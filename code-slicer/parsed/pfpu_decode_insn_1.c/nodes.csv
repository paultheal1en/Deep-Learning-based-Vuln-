command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6516050	File	/home/p4ultr4n/workplace/ReVeal/raw_code/pfpu_decode_insn_1.c								
ANR	6516051	Function	pfpu_decode_insn	1:0:0:6253							
ANR	6516052	FunctionDef	pfpu_decode_insn (MilkymistPFPUState * s)		6516051	0					
ANR	6516053	CompoundStatement		3:0:52:6253	6516051	0					
ANR	6516054	IdentifierDeclStatement	uint32_t pc = s -> regs [ R_PC ] ;	5:4:59:86	6516051	0	True				
ANR	6516055	IdentifierDecl	pc = s -> regs [ R_PC ]		6516051	0					
ANR	6516056	IdentifierDeclType	uint32_t		6516051	0					
ANR	6516057	Identifier	pc		6516051	1					
ANR	6516058	AssignmentExpression	pc = s -> regs [ R_PC ]		6516051	2		=			
ANR	6516059	Identifier	pc		6516051	0					
ANR	6516060	ArrayIndexing	s -> regs [ R_PC ]		6516051	1					
ANR	6516061	PtrMemberAccess	s -> regs		6516051	0					
ANR	6516062	Identifier	s		6516051	0					
ANR	6516063	Identifier	regs		6516051	1					
ANR	6516064	Identifier	R_PC		6516051	1					
ANR	6516065	IdentifierDeclStatement	uint32_t insn = s -> microcode [ pc ] ;	7:4:93:125	6516051	1	True				
ANR	6516066	IdentifierDecl	insn = s -> microcode [ pc ]		6516051	0					
ANR	6516067	IdentifierDeclType	uint32_t		6516051	0					
ANR	6516068	Identifier	insn		6516051	1					
ANR	6516069	AssignmentExpression	insn = s -> microcode [ pc ]		6516051	2		=			
ANR	6516070	Identifier	insn		6516051	0					
ANR	6516071	ArrayIndexing	s -> microcode [ pc ]		6516051	1					
ANR	6516072	PtrMemberAccess	s -> microcode		6516051	0					
ANR	6516073	Identifier	s		6516051	0					
ANR	6516074	Identifier	microcode		6516051	1					
ANR	6516075	Identifier	pc		6516051	1					
ANR	6516076	IdentifierDeclStatement	uint32_t reg_a = ( insn >> 18 ) & 0x7f ;	9:4:132:168	6516051	2	True				
ANR	6516077	IdentifierDecl	reg_a = ( insn >> 18 ) & 0x7f		6516051	0					
ANR	6516078	IdentifierDeclType	uint32_t		6516051	0					
ANR	6516079	Identifier	reg_a		6516051	1					
ANR	6516080	AssignmentExpression	reg_a = ( insn >> 18 ) & 0x7f		6516051	2		=			
ANR	6516081	Identifier	reg_a		6516051	0					
ANR	6516082	BitAndExpression	( insn >> 18 ) & 0x7f		6516051	1		&			
ANR	6516083	ShiftExpression	insn >> 18		6516051	0		>>			
ANR	6516084	Identifier	insn		6516051	0					
ANR	6516085	PrimaryExpression	18		6516051	1					
ANR	6516086	PrimaryExpression	0x7f		6516051	1					
ANR	6516087	IdentifierDeclStatement	uint32_t reg_b = ( insn >> 11 ) & 0x7f ;	11:4:175:211	6516051	3	True				
ANR	6516088	IdentifierDecl	reg_b = ( insn >> 11 ) & 0x7f		6516051	0					
ANR	6516089	IdentifierDeclType	uint32_t		6516051	0					
ANR	6516090	Identifier	reg_b		6516051	1					
ANR	6516091	AssignmentExpression	reg_b = ( insn >> 11 ) & 0x7f		6516051	2		=			
ANR	6516092	Identifier	reg_b		6516051	0					
ANR	6516093	BitAndExpression	( insn >> 11 ) & 0x7f		6516051	1		&			
ANR	6516094	ShiftExpression	insn >> 11		6516051	0		>>			
ANR	6516095	Identifier	insn		6516051	0					
ANR	6516096	PrimaryExpression	11		6516051	1					
ANR	6516097	PrimaryExpression	0x7f		6516051	1					
ANR	6516098	IdentifierDeclStatement	uint32_t op = ( insn >> 7 ) & 0xf ;	13:4:218:249	6516051	4	True				
ANR	6516099	IdentifierDecl	op = ( insn >> 7 ) & 0xf		6516051	0					
ANR	6516100	IdentifierDeclType	uint32_t		6516051	0					
ANR	6516101	Identifier	op		6516051	1					
ANR	6516102	AssignmentExpression	op = ( insn >> 7 ) & 0xf		6516051	2		=			
ANR	6516103	Identifier	op		6516051	0					
ANR	6516104	BitAndExpression	( insn >> 7 ) & 0xf		6516051	1		&			
ANR	6516105	ShiftExpression	insn >> 7		6516051	0		>>			
ANR	6516106	Identifier	insn		6516051	0					
ANR	6516107	PrimaryExpression	7		6516051	1					
ANR	6516108	PrimaryExpression	0xf		6516051	1					
ANR	6516109	IdentifierDeclStatement	uint32_t reg_d = insn & 0x7f ;	15:4:256:284	6516051	5	True				
ANR	6516110	IdentifierDecl	reg_d = insn & 0x7f		6516051	0					
ANR	6516111	IdentifierDeclType	uint32_t		6516051	0					
ANR	6516112	Identifier	reg_d		6516051	1					
ANR	6516113	AssignmentExpression	reg_d = insn & 0x7f		6516051	2		=			
ANR	6516114	Identifier	reg_d		6516051	0					
ANR	6516115	BitAndExpression	insn & 0x7f		6516051	1		&			
ANR	6516116	Identifier	insn		6516051	0					
ANR	6516117	PrimaryExpression	0x7f		6516051	1					
ANR	6516118	IdentifierDeclStatement	uint32_t r ;	17:4:291:301	6516051	6	True				
ANR	6516119	IdentifierDecl	r		6516051	0					
ANR	6516120	IdentifierDeclType	uint32_t		6516051	0					
ANR	6516121	Identifier	r		6516051	1					
ANR	6516122	IdentifierDeclStatement	int latency = 0 ;	19:4:308:323	6516051	7	True				
ANR	6516123	IdentifierDecl	latency = 0		6516051	0					
ANR	6516124	IdentifierDeclType	int		6516051	0					
ANR	6516125	Identifier	latency		6516051	1					
ANR	6516126	AssignmentExpression	latency = 0		6516051	2		=			
ANR	6516127	Identifier	latency		6516051	0					
ANR	6516128	PrimaryExpression	0		6516051	1					
ANR	6516129	SwitchStatement	switch ( op )		6516051	8					
ANR	6516130	Condition	op	23:12:340:341	6516051	0	True				
ANR	6516131	Identifier	op		6516051	0					
ANR	6516132	CompoundStatement		21:16:291:291	6516051	1					
ANR	6516133	Label	case OP_NOP :	25:4:351:362	6516051	0	True				
ANR	6516134	Identifier	OP_NOP		6516051	0					
ANR	6516135	BreakStatement	break ;	27:8:373:378	6516051	1	True				
ANR	6516136	Label	case OP_FADD :	29:4:385:397	6516051	2	True				
ANR	6516137	Identifier	OP_FADD		6516051	0					
ANR	6516138	CompoundStatement		35:8:488:503	6516051	3					
ANR	6516139	IdentifierDeclStatement	"float a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] ) ;"	33:8:415:467	6516051	0	True				
ANR	6516140	IdentifierDecl	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516141	IdentifierDeclType	float		6516051	0					
ANR	6516142	Identifier	a		6516051	1					
ANR	6516143	AssignmentExpression	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516144	Identifier	a		6516051	0					
ANR	6516145	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516146	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516147	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516148	ArgumentList	float		6516051	1					
ANR	6516149	Argument	float		6516051	0					
ANR	6516150	Identifier	float		6516051	0					
ANR	6516151	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516152	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516153	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516154	Identifier	s		6516051	0					
ANR	6516155	Identifier	gp_regs		6516051	1					
ANR	6516156	Identifier	reg_a		6516051	1					
ANR	6516157	IdentifierDeclStatement	"float b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] ) ;"	35:8:478:530	6516051	1	True				
ANR	6516158	IdentifierDecl	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	0					
ANR	6516159	IdentifierDeclType	float		6516051	0					
ANR	6516160	Identifier	b		6516051	1					
ANR	6516161	AssignmentExpression	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	2		=			
ANR	6516162	Identifier	b		6516051	0					
ANR	6516163	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	1					
ANR	6516164	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516165	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516166	ArgumentList	float		6516051	1					
ANR	6516167	Argument	float		6516051	0					
ANR	6516168	Identifier	float		6516051	0					
ANR	6516169	Argument	s -> gp_regs [ reg_b ]		6516051	1					
ANR	6516170	ArrayIndexing	s -> gp_regs [ reg_b ]		6516051	0					
ANR	6516171	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516172	Identifier	s		6516051	0					
ANR	6516173	Identifier	gp_regs		6516051	1					
ANR	6516174	Identifier	reg_b		6516051	1					
ANR	6516175	IdentifierDeclStatement	float t = a + b ;	37:8:541:556	6516051	2	True				
ANR	6516176	IdentifierDecl	t = a + b		6516051	0					
ANR	6516177	IdentifierDeclType	float		6516051	0					
ANR	6516178	Identifier	t		6516051	1					
ANR	6516179	AssignmentExpression	t = a + b		6516051	2		=			
ANR	6516180	Identifier	t		6516051	0					
ANR	6516181	AdditiveExpression	a + b		6516051	1		+			
ANR	6516182	Identifier	a		6516051	0					
ANR	6516183	Identifier	b		6516051	1					
ANR	6516184	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	39:8:567:600	6516051	3	True				
ANR	6516185	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6516186	Identifier	r		6516051	0					
ANR	6516187	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6516188	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516189	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516190	ArgumentList	uint32_t		6516051	1					
ANR	6516191	Argument	uint32_t		6516051	0					
ANR	6516192	Identifier	uint32_t		6516051	0					
ANR	6516193	Argument	t		6516051	1					
ANR	6516194	Identifier	t		6516051	0					
ANR	6516195	ExpressionStatement	latency = LATENCY_FADD	41:8:611:633	6516051	4	True				
ANR	6516196	AssignmentExpression	latency = LATENCY_FADD		6516051	0		=			
ANR	6516197	Identifier	latency		6516051	0					
ANR	6516198	Identifier	LATENCY_FADD		6516051	1					
ANR	6516199	ExpressionStatement	"D_EXEC ( qemu_log ( ""ADD a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"	43:8:644:704	6516051	5	True				
ANR	6516200	CallExpression	"D_EXEC ( qemu_log ( ""ADD a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"		6516051	0					
ANR	6516201	Callee	D_EXEC		6516051	0					
ANR	6516202	Identifier	D_EXEC		6516051	0					
ANR	6516203	ArgumentList	"qemu_log ( ""ADD a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	1					
ANR	6516204	Argument	"qemu_log ( ""ADD a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6516205	CallExpression	"qemu_log ( ""ADD a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6516206	Callee	qemu_log		6516051	0					
ANR	6516207	Identifier	qemu_log		6516051	0					
ANR	6516208	ArgumentList	"""ADD a=%f b=%f t=%f, r=%08x\\n"""		6516051	1					
ANR	6516209	Argument	"""ADD a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516210	PrimaryExpression	"""ADD a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516211	Argument	a		6516051	1					
ANR	6516212	Identifier	a		6516051	0					
ANR	6516213	Argument	b		6516051	2					
ANR	6516214	Identifier	b		6516051	0					
ANR	6516215	Argument	t		6516051	3					
ANR	6516216	Identifier	t		6516051	0					
ANR	6516217	Argument	r		6516051	4					
ANR	6516218	Identifier	r		6516051	0					
ANR	6516219	BreakStatement	break ;	45:6:713:718	6516051	4	True				
ANR	6516220	Label	case OP_FSUB :	47:4:725:737	6516051	5	True				
ANR	6516221	Identifier	OP_FSUB		6516051	0					
ANR	6516222	CompoundStatement		53:8:828:843	6516051	6					
ANR	6516223	IdentifierDeclStatement	"float a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] ) ;"	51:8:755:807	6516051	0	True				
ANR	6516224	IdentifierDecl	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516225	IdentifierDeclType	float		6516051	0					
ANR	6516226	Identifier	a		6516051	1					
ANR	6516227	AssignmentExpression	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516228	Identifier	a		6516051	0					
ANR	6516229	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516230	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516231	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516232	ArgumentList	float		6516051	1					
ANR	6516233	Argument	float		6516051	0					
ANR	6516234	Identifier	float		6516051	0					
ANR	6516235	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516236	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516237	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516238	Identifier	s		6516051	0					
ANR	6516239	Identifier	gp_regs		6516051	1					
ANR	6516240	Identifier	reg_a		6516051	1					
ANR	6516241	IdentifierDeclStatement	"float b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] ) ;"	53:8:818:870	6516051	1	True				
ANR	6516242	IdentifierDecl	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	0					
ANR	6516243	IdentifierDeclType	float		6516051	0					
ANR	6516244	Identifier	b		6516051	1					
ANR	6516245	AssignmentExpression	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	2		=			
ANR	6516246	Identifier	b		6516051	0					
ANR	6516247	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	1					
ANR	6516248	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516249	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516250	ArgumentList	float		6516051	1					
ANR	6516251	Argument	float		6516051	0					
ANR	6516252	Identifier	float		6516051	0					
ANR	6516253	Argument	s -> gp_regs [ reg_b ]		6516051	1					
ANR	6516254	ArrayIndexing	s -> gp_regs [ reg_b ]		6516051	0					
ANR	6516255	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516256	Identifier	s		6516051	0					
ANR	6516257	Identifier	gp_regs		6516051	1					
ANR	6516258	Identifier	reg_b		6516051	1					
ANR	6516259	IdentifierDeclStatement	float t = a - b ;	55:8:881:896	6516051	2	True				
ANR	6516260	IdentifierDecl	t = a - b		6516051	0					
ANR	6516261	IdentifierDeclType	float		6516051	0					
ANR	6516262	Identifier	t		6516051	1					
ANR	6516263	AssignmentExpression	t = a - b		6516051	2		=			
ANR	6516264	Identifier	t		6516051	0					
ANR	6516265	AdditiveExpression	a - b		6516051	1		-			
ANR	6516266	Identifier	a		6516051	0					
ANR	6516267	Identifier	b		6516051	1					
ANR	6516268	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	57:8:907:940	6516051	3	True				
ANR	6516269	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6516270	Identifier	r		6516051	0					
ANR	6516271	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6516272	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516273	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516274	ArgumentList	uint32_t		6516051	1					
ANR	6516275	Argument	uint32_t		6516051	0					
ANR	6516276	Identifier	uint32_t		6516051	0					
ANR	6516277	Argument	t		6516051	1					
ANR	6516278	Identifier	t		6516051	0					
ANR	6516279	ExpressionStatement	latency = LATENCY_FSUB	59:8:951:973	6516051	4	True				
ANR	6516280	AssignmentExpression	latency = LATENCY_FSUB		6516051	0		=			
ANR	6516281	Identifier	latency		6516051	0					
ANR	6516282	Identifier	LATENCY_FSUB		6516051	1					
ANR	6516283	ExpressionStatement	"D_EXEC ( qemu_log ( ""SUB a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"	61:8:984:1044	6516051	5	True				
ANR	6516284	CallExpression	"D_EXEC ( qemu_log ( ""SUB a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"		6516051	0					
ANR	6516285	Callee	D_EXEC		6516051	0					
ANR	6516286	Identifier	D_EXEC		6516051	0					
ANR	6516287	ArgumentList	"qemu_log ( ""SUB a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	1					
ANR	6516288	Argument	"qemu_log ( ""SUB a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6516289	CallExpression	"qemu_log ( ""SUB a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6516290	Callee	qemu_log		6516051	0					
ANR	6516291	Identifier	qemu_log		6516051	0					
ANR	6516292	ArgumentList	"""SUB a=%f b=%f t=%f, r=%08x\\n"""		6516051	1					
ANR	6516293	Argument	"""SUB a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516294	PrimaryExpression	"""SUB a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516295	Argument	a		6516051	1					
ANR	6516296	Identifier	a		6516051	0					
ANR	6516297	Argument	b		6516051	2					
ANR	6516298	Identifier	b		6516051	0					
ANR	6516299	Argument	t		6516051	3					
ANR	6516300	Identifier	t		6516051	0					
ANR	6516301	Argument	r		6516051	4					
ANR	6516302	Identifier	r		6516051	0					
ANR	6516303	BreakStatement	break ;	63:6:1053:1058	6516051	7	True				
ANR	6516304	Label	case OP_FMUL :	65:4:1065:1077	6516051	8	True				
ANR	6516305	Identifier	OP_FMUL		6516051	0					
ANR	6516306	CompoundStatement		71:8:1168:1183	6516051	9					
ANR	6516307	IdentifierDeclStatement	"float a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] ) ;"	69:8:1095:1147	6516051	0	True				
ANR	6516308	IdentifierDecl	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516309	IdentifierDeclType	float		6516051	0					
ANR	6516310	Identifier	a		6516051	1					
ANR	6516311	AssignmentExpression	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516312	Identifier	a		6516051	0					
ANR	6516313	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516314	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516315	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516316	ArgumentList	float		6516051	1					
ANR	6516317	Argument	float		6516051	0					
ANR	6516318	Identifier	float		6516051	0					
ANR	6516319	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516320	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516321	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516322	Identifier	s		6516051	0					
ANR	6516323	Identifier	gp_regs		6516051	1					
ANR	6516324	Identifier	reg_a		6516051	1					
ANR	6516325	IdentifierDeclStatement	"float b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] ) ;"	71:8:1158:1210	6516051	1	True				
ANR	6516326	IdentifierDecl	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	0					
ANR	6516327	IdentifierDeclType	float		6516051	0					
ANR	6516328	Identifier	b		6516051	1					
ANR	6516329	AssignmentExpression	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	2		=			
ANR	6516330	Identifier	b		6516051	0					
ANR	6516331	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	1					
ANR	6516332	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516333	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516334	ArgumentList	float		6516051	1					
ANR	6516335	Argument	float		6516051	0					
ANR	6516336	Identifier	float		6516051	0					
ANR	6516337	Argument	s -> gp_regs [ reg_b ]		6516051	1					
ANR	6516338	ArrayIndexing	s -> gp_regs [ reg_b ]		6516051	0					
ANR	6516339	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516340	Identifier	s		6516051	0					
ANR	6516341	Identifier	gp_regs		6516051	1					
ANR	6516342	Identifier	reg_b		6516051	1					
ANR	6516343	IdentifierDeclStatement	float t = a * b ;	73:8:1221:1236	6516051	2	True				
ANR	6516344	IdentifierDecl	t = a * b		6516051	0					
ANR	6516345	IdentifierDeclType	float		6516051	0					
ANR	6516346	Identifier	t		6516051	1					
ANR	6516347	AssignmentExpression	t = a * b		6516051	2		=			
ANR	6516348	Identifier	t		6516051	0					
ANR	6516349	MultiplicativeExpression	a * b		6516051	1		*			
ANR	6516350	Identifier	a		6516051	0					
ANR	6516351	Identifier	b		6516051	1					
ANR	6516352	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	75:8:1247:1280	6516051	3	True				
ANR	6516353	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6516354	Identifier	r		6516051	0					
ANR	6516355	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6516356	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516357	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516358	ArgumentList	uint32_t		6516051	1					
ANR	6516359	Argument	uint32_t		6516051	0					
ANR	6516360	Identifier	uint32_t		6516051	0					
ANR	6516361	Argument	t		6516051	1					
ANR	6516362	Identifier	t		6516051	0					
ANR	6516363	ExpressionStatement	latency = LATENCY_FMUL	77:8:1291:1313	6516051	4	True				
ANR	6516364	AssignmentExpression	latency = LATENCY_FMUL		6516051	0		=			
ANR	6516365	Identifier	latency		6516051	0					
ANR	6516366	Identifier	LATENCY_FMUL		6516051	1					
ANR	6516367	ExpressionStatement	"D_EXEC ( qemu_log ( ""MUL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"	79:8:1324:1384	6516051	5	True				
ANR	6516368	CallExpression	"D_EXEC ( qemu_log ( ""MUL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"		6516051	0					
ANR	6516369	Callee	D_EXEC		6516051	0					
ANR	6516370	Identifier	D_EXEC		6516051	0					
ANR	6516371	ArgumentList	"qemu_log ( ""MUL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	1					
ANR	6516372	Argument	"qemu_log ( ""MUL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6516373	CallExpression	"qemu_log ( ""MUL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6516374	Callee	qemu_log		6516051	0					
ANR	6516375	Identifier	qemu_log		6516051	0					
ANR	6516376	ArgumentList	"""MUL a=%f b=%f t=%f, r=%08x\\n"""		6516051	1					
ANR	6516377	Argument	"""MUL a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516378	PrimaryExpression	"""MUL a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516379	Argument	a		6516051	1					
ANR	6516380	Identifier	a		6516051	0					
ANR	6516381	Argument	b		6516051	2					
ANR	6516382	Identifier	b		6516051	0					
ANR	6516383	Argument	t		6516051	3					
ANR	6516384	Identifier	t		6516051	0					
ANR	6516385	Argument	r		6516051	4					
ANR	6516386	Identifier	r		6516051	0					
ANR	6516387	BreakStatement	break ;	81:6:1393:1398	6516051	10	True				
ANR	6516388	Label	case OP_FABS :	83:4:1405:1417	6516051	11	True				
ANR	6516389	Identifier	OP_FABS		6516051	0					
ANR	6516390	CompoundStatement		87:8:1445:1463	6516051	12					
ANR	6516391	IdentifierDeclStatement	"float a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] ) ;"	87:8:1435:1487	6516051	0	True				
ANR	6516392	IdentifierDecl	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516393	IdentifierDeclType	float		6516051	0					
ANR	6516394	Identifier	a		6516051	1					
ANR	6516395	AssignmentExpression	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516396	Identifier	a		6516051	0					
ANR	6516397	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516398	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516399	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516400	ArgumentList	float		6516051	1					
ANR	6516401	Argument	float		6516051	0					
ANR	6516402	Identifier	float		6516051	0					
ANR	6516403	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516404	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516405	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516406	Identifier	s		6516051	0					
ANR	6516407	Identifier	gp_regs		6516051	1					
ANR	6516408	Identifier	reg_a		6516051	1					
ANR	6516409	IdentifierDeclStatement	float t = fabsf ( a ) ;	89:8:1498:1516	6516051	1	True				
ANR	6516410	IdentifierDecl	t = fabsf ( a )		6516051	0					
ANR	6516411	IdentifierDeclType	float		6516051	0					
ANR	6516412	Identifier	t		6516051	1					
ANR	6516413	AssignmentExpression	t = fabsf ( a )		6516051	2		=			
ANR	6516414	Identifier	t		6516051	0					
ANR	6516415	CallExpression	fabsf ( a )		6516051	1					
ANR	6516416	Callee	fabsf		6516051	0					
ANR	6516417	Identifier	fabsf		6516051	0					
ANR	6516418	ArgumentList	a		6516051	1					
ANR	6516419	Argument	a		6516051	0					
ANR	6516420	Identifier	a		6516051	0					
ANR	6516421	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	91:8:1527:1560	6516051	2	True				
ANR	6516422	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6516423	Identifier	r		6516051	0					
ANR	6516424	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6516425	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516426	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516427	ArgumentList	uint32_t		6516051	1					
ANR	6516428	Argument	uint32_t		6516051	0					
ANR	6516429	Identifier	uint32_t		6516051	0					
ANR	6516430	Argument	t		6516051	1					
ANR	6516431	Identifier	t		6516051	0					
ANR	6516432	ExpressionStatement	latency = LATENCY_FABS	93:8:1571:1593	6516051	3	True				
ANR	6516433	AssignmentExpression	latency = LATENCY_FABS		6516051	0		=			
ANR	6516434	Identifier	latency		6516051	0					
ANR	6516435	Identifier	LATENCY_FABS		6516051	1					
ANR	6516436	ExpressionStatement	"D_EXEC ( qemu_log ( ""ABS a=%f t=%f, r=%08x\\n"" , a , t , r ) )"	95:8:1604:1656	6516051	4	True				
ANR	6516437	CallExpression	"D_EXEC ( qemu_log ( ""ABS a=%f t=%f, r=%08x\\n"" , a , t , r ) )"		6516051	0					
ANR	6516438	Callee	D_EXEC		6516051	0					
ANR	6516439	Identifier	D_EXEC		6516051	0					
ANR	6516440	ArgumentList	"qemu_log ( ""ABS a=%f t=%f, r=%08x\\n"" , a , t , r )"		6516051	1					
ANR	6516441	Argument	"qemu_log ( ""ABS a=%f t=%f, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516442	CallExpression	"qemu_log ( ""ABS a=%f t=%f, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516443	Callee	qemu_log		6516051	0					
ANR	6516444	Identifier	qemu_log		6516051	0					
ANR	6516445	ArgumentList	"""ABS a=%f t=%f, r=%08x\\n"""		6516051	1					
ANR	6516446	Argument	"""ABS a=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516447	PrimaryExpression	"""ABS a=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516448	Argument	a		6516051	1					
ANR	6516449	Identifier	a		6516051	0					
ANR	6516450	Argument	t		6516051	2					
ANR	6516451	Identifier	t		6516051	0					
ANR	6516452	Argument	r		6516051	3					
ANR	6516453	Identifier	r		6516051	0					
ANR	6516454	BreakStatement	break ;	97:6:1665:1670	6516051	13	True				
ANR	6516455	Label	case OP_F2I :	99:4:1677:1688	6516051	14	True				
ANR	6516456	Identifier	OP_F2I		6516051	0					
ANR	6516457	CompoundStatement		103:8:1716:1729	6516051	15					
ANR	6516458	IdentifierDeclStatement	"float a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] ) ;"	103:8:1706:1758	6516051	0	True				
ANR	6516459	IdentifierDecl	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516460	IdentifierDeclType	float		6516051	0					
ANR	6516461	Identifier	a		6516051	1					
ANR	6516462	AssignmentExpression	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516463	Identifier	a		6516051	0					
ANR	6516464	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516465	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516466	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516467	ArgumentList	float		6516051	1					
ANR	6516468	Argument	float		6516051	0					
ANR	6516469	Identifier	float		6516051	0					
ANR	6516470	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516471	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516472	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516473	Identifier	s		6516051	0					
ANR	6516474	Identifier	gp_regs		6516051	1					
ANR	6516475	Identifier	reg_a		6516051	1					
ANR	6516476	IdentifierDeclStatement	int32_t t = a ;	105:8:1769:1782	6516051	1	True				
ANR	6516477	IdentifierDecl	t = a		6516051	0					
ANR	6516478	IdentifierDeclType	int32_t		6516051	0					
ANR	6516479	Identifier	t		6516051	1					
ANR	6516480	AssignmentExpression	t = a		6516051	2		=			
ANR	6516481	Identifier	a		6516051	0					
ANR	6516482	Identifier	a		6516051	1					
ANR	6516483	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	107:8:1793:1826	6516051	2	True				
ANR	6516484	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6516485	Identifier	r		6516051	0					
ANR	6516486	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6516487	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516488	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516489	ArgumentList	uint32_t		6516051	1					
ANR	6516490	Argument	uint32_t		6516051	0					
ANR	6516491	Identifier	uint32_t		6516051	0					
ANR	6516492	Argument	t		6516051	1					
ANR	6516493	Identifier	t		6516051	0					
ANR	6516494	ExpressionStatement	latency = LATENCY_F2I	109:8:1837:1858	6516051	3	True				
ANR	6516495	AssignmentExpression	latency = LATENCY_F2I		6516051	0		=			
ANR	6516496	Identifier	latency		6516051	0					
ANR	6516497	Identifier	LATENCY_F2I		6516051	1					
ANR	6516498	ExpressionStatement	"D_EXEC ( qemu_log ( ""F2I a=%f t=%d, r=%08x\\n"" , a , t , r ) )"	111:8:1869:1921	6516051	4	True				
ANR	6516499	CallExpression	"D_EXEC ( qemu_log ( ""F2I a=%f t=%d, r=%08x\\n"" , a , t , r ) )"		6516051	0					
ANR	6516500	Callee	D_EXEC		6516051	0					
ANR	6516501	Identifier	D_EXEC		6516051	0					
ANR	6516502	ArgumentList	"qemu_log ( ""F2I a=%f t=%d, r=%08x\\n"" , a , t , r )"		6516051	1					
ANR	6516503	Argument	"qemu_log ( ""F2I a=%f t=%d, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516504	CallExpression	"qemu_log ( ""F2I a=%f t=%d, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516505	Callee	qemu_log		6516051	0					
ANR	6516506	Identifier	qemu_log		6516051	0					
ANR	6516507	ArgumentList	"""F2I a=%f t=%d, r=%08x\\n"""		6516051	1					
ANR	6516508	Argument	"""F2I a=%f t=%d, r=%08x\\n"""		6516051	0					
ANR	6516509	PrimaryExpression	"""F2I a=%f t=%d, r=%08x\\n"""		6516051	0					
ANR	6516510	Argument	a		6516051	1					
ANR	6516511	Identifier	a		6516051	0					
ANR	6516512	Argument	t		6516051	2					
ANR	6516513	Identifier	t		6516051	0					
ANR	6516514	Argument	r		6516051	3					
ANR	6516515	Identifier	r		6516051	0					
ANR	6516516	BreakStatement	break ;	113:6:1930:1935	6516051	16	True				
ANR	6516517	Label	case OP_I2F :	115:4:1942:1953	6516051	17	True				
ANR	6516518	Identifier	OP_I2F		6516051	0					
ANR	6516519	CompoundStatement		119:8:1985:1996	6516051	18					
ANR	6516520	IdentifierDeclStatement	"int32_t a = REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] ) ;"	119:8:1971:2027	6516051	0	True				
ANR	6516521	IdentifierDecl	"a = REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516522	IdentifierDeclType	int32_t		6516051	0					
ANR	6516523	Identifier	a		6516051	1					
ANR	6516524	AssignmentExpression	"a = REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516525	Identifier	a		6516051	0					
ANR	6516526	CallExpression	"REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516527	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516528	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516529	ArgumentList	int32_t		6516051	1					
ANR	6516530	Argument	int32_t		6516051	0					
ANR	6516531	Identifier	int32_t		6516051	0					
ANR	6516532	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516533	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516534	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516535	Identifier	s		6516051	0					
ANR	6516536	Identifier	gp_regs		6516051	1					
ANR	6516537	Identifier	reg_a		6516051	1					
ANR	6516538	IdentifierDeclStatement	float t = a ;	121:8:2038:2049	6516051	1	True				
ANR	6516539	IdentifierDecl	t = a		6516051	0					
ANR	6516540	IdentifierDeclType	float		6516051	0					
ANR	6516541	Identifier	t		6516051	1					
ANR	6516542	AssignmentExpression	t = a		6516051	2		=			
ANR	6516543	Identifier	a		6516051	0					
ANR	6516544	Identifier	a		6516051	1					
ANR	6516545	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	123:8:2060:2093	6516051	2	True				
ANR	6516546	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6516547	Identifier	r		6516051	0					
ANR	6516548	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6516549	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516550	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516551	ArgumentList	uint32_t		6516051	1					
ANR	6516552	Argument	uint32_t		6516051	0					
ANR	6516553	Identifier	uint32_t		6516051	0					
ANR	6516554	Argument	t		6516051	1					
ANR	6516555	Identifier	t		6516051	0					
ANR	6516556	ExpressionStatement	latency = LATENCY_I2F	125:8:2104:2125	6516051	3	True				
ANR	6516557	AssignmentExpression	latency = LATENCY_I2F		6516051	0		=			
ANR	6516558	Identifier	latency		6516051	0					
ANR	6516559	Identifier	LATENCY_I2F		6516051	1					
ANR	6516560	ExpressionStatement	"D_EXEC ( qemu_log ( ""I2F a=%08x t=%f, r=%08x\\n"" , a , t , r ) )"	127:8:2136:2190	6516051	4	True				
ANR	6516561	CallExpression	"D_EXEC ( qemu_log ( ""I2F a=%08x t=%f, r=%08x\\n"" , a , t , r ) )"		6516051	0					
ANR	6516562	Callee	D_EXEC		6516051	0					
ANR	6516563	Identifier	D_EXEC		6516051	0					
ANR	6516564	ArgumentList	"qemu_log ( ""I2F a=%08x t=%f, r=%08x\\n"" , a , t , r )"		6516051	1					
ANR	6516565	Argument	"qemu_log ( ""I2F a=%08x t=%f, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516566	CallExpression	"qemu_log ( ""I2F a=%08x t=%f, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516567	Callee	qemu_log		6516051	0					
ANR	6516568	Identifier	qemu_log		6516051	0					
ANR	6516569	ArgumentList	"""I2F a=%08x t=%f, r=%08x\\n"""		6516051	1					
ANR	6516570	Argument	"""I2F a=%08x t=%f, r=%08x\\n"""		6516051	0					
ANR	6516571	PrimaryExpression	"""I2F a=%08x t=%f, r=%08x\\n"""		6516051	0					
ANR	6516572	Argument	a		6516051	1					
ANR	6516573	Identifier	a		6516051	0					
ANR	6516574	Argument	t		6516051	2					
ANR	6516575	Identifier	t		6516051	0					
ANR	6516576	Argument	r		6516051	3					
ANR	6516577	Identifier	r		6516051	0					
ANR	6516578	BreakStatement	break ;	129:6:2199:2204	6516051	19	True				
ANR	6516579	Label	case OP_VECTOUT :	131:4:2211:2226	6516051	20	True				
ANR	6516580	Identifier	OP_VECTOUT		6516051	0					
ANR	6516581	CompoundStatement		137:8:2299:2436	6516051	21					
ANR	6516582	IdentifierDeclStatement	uint32_t a = cpu_to_be32 ( s -> gp_regs [ reg_a ] ) ;	135:8:2244:2287	6516051	0	True				
ANR	6516583	IdentifierDecl	a = cpu_to_be32 ( s -> gp_regs [ reg_a ] )		6516051	0					
ANR	6516584	IdentifierDeclType	uint32_t		6516051	0					
ANR	6516585	Identifier	a		6516051	1					
ANR	6516586	AssignmentExpression	a = cpu_to_be32 ( s -> gp_regs [ reg_a ] )		6516051	2		=			
ANR	6516587	Identifier	a		6516051	0					
ANR	6516588	CallExpression	cpu_to_be32 ( s -> gp_regs [ reg_a ] )		6516051	1					
ANR	6516589	Callee	cpu_to_be32		6516051	0					
ANR	6516590	Identifier	cpu_to_be32		6516051	0					
ANR	6516591	ArgumentList	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516592	Argument	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516593	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516594	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516595	Identifier	s		6516051	0					
ANR	6516596	Identifier	gp_regs		6516051	1					
ANR	6516597	Identifier	reg_a		6516051	1					
ANR	6516598	IdentifierDeclStatement	uint32_t b = cpu_to_be32 ( s -> gp_regs [ reg_b ] ) ;	137:8:2298:2341	6516051	1	True				
ANR	6516599	IdentifierDecl	b = cpu_to_be32 ( s -> gp_regs [ reg_b ] )		6516051	0					
ANR	6516600	IdentifierDeclType	uint32_t		6516051	0					
ANR	6516601	Identifier	b		6516051	1					
ANR	6516602	AssignmentExpression	b = cpu_to_be32 ( s -> gp_regs [ reg_b ] )		6516051	2		=			
ANR	6516603	Identifier	b		6516051	0					
ANR	6516604	CallExpression	cpu_to_be32 ( s -> gp_regs [ reg_b ] )		6516051	1					
ANR	6516605	Callee	cpu_to_be32		6516051	0					
ANR	6516606	Identifier	cpu_to_be32		6516051	0					
ANR	6516607	ArgumentList	s -> gp_regs [ reg_b ]		6516051	1					
ANR	6516608	Argument	s -> gp_regs [ reg_b ]		6516051	0					
ANR	6516609	ArrayIndexing	s -> gp_regs [ reg_b ]		6516051	0					
ANR	6516610	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516611	Identifier	s		6516051	0					
ANR	6516612	Identifier	gp_regs		6516051	1					
ANR	6516613	Identifier	reg_b		6516051	1					
ANR	6516614	IdentifierDeclStatement	"target_phys_addr_t dma_ptr = get_dma_address ( s -> regs [ R_MESHBASE ] , s -> gp_regs [ GPR_X ] , s -> gp_regs [ GPR_Y ] ) ;"	139:8:2352:2489	6516051	2	True				
ANR	6516615	IdentifierDecl	"dma_ptr = get_dma_address ( s -> regs [ R_MESHBASE ] , s -> gp_regs [ GPR_X ] , s -> gp_regs [ GPR_Y ] )"		6516051	0					
ANR	6516616	IdentifierDeclType	target_phys_addr_t		6516051	0					
ANR	6516617	Identifier	dma_ptr		6516051	1					
ANR	6516618	AssignmentExpression	"dma_ptr = get_dma_address ( s -> regs [ R_MESHBASE ] , s -> gp_regs [ GPR_X ] , s -> gp_regs [ GPR_Y ] )"		6516051	2		=			
ANR	6516619	Identifier	dma_ptr		6516051	0					
ANR	6516620	CallExpression	"get_dma_address ( s -> regs [ R_MESHBASE ] , s -> gp_regs [ GPR_X ] , s -> gp_regs [ GPR_Y ] )"		6516051	1					
ANR	6516621	Callee	get_dma_address		6516051	0					
ANR	6516622	Identifier	get_dma_address		6516051	0					
ANR	6516623	ArgumentList	s -> regs [ R_MESHBASE ]		6516051	1					
ANR	6516624	Argument	s -> regs [ R_MESHBASE ]		6516051	0					
ANR	6516625	ArrayIndexing	s -> regs [ R_MESHBASE ]		6516051	0					
ANR	6516626	PtrMemberAccess	s -> regs		6516051	0					
ANR	6516627	Identifier	s		6516051	0					
ANR	6516628	Identifier	regs		6516051	1					
ANR	6516629	Identifier	R_MESHBASE		6516051	1					
ANR	6516630	Argument	s -> gp_regs [ GPR_X ]		6516051	1					
ANR	6516631	ArrayIndexing	s -> gp_regs [ GPR_X ]		6516051	0					
ANR	6516632	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516633	Identifier	s		6516051	0					
ANR	6516634	Identifier	gp_regs		6516051	1					
ANR	6516635	Identifier	GPR_X		6516051	1					
ANR	6516636	Argument	s -> gp_regs [ GPR_Y ]		6516051	2					
ANR	6516637	ArrayIndexing	s -> gp_regs [ GPR_Y ]		6516051	0					
ANR	6516638	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516639	Identifier	s		6516051	0					
ANR	6516640	Identifier	gp_regs		6516051	1					
ANR	6516641	Identifier	GPR_Y		6516051	1					
ANR	6516642	ExpressionStatement	"cpu_physical_memory_write ( dma_ptr , ( uint8_t * ) & a , 4 )"	145:8:2500:2552	6516051	3	True				
ANR	6516643	CallExpression	"cpu_physical_memory_write ( dma_ptr , ( uint8_t * ) & a , 4 )"		6516051	0					
ANR	6516644	Callee	cpu_physical_memory_write		6516051	0					
ANR	6516645	Identifier	cpu_physical_memory_write		6516051	0					
ANR	6516646	ArgumentList	dma_ptr		6516051	1					
ANR	6516647	Argument	dma_ptr		6516051	0					
ANR	6516648	Identifier	dma_ptr		6516051	0					
ANR	6516649	Argument	( uint8_t * ) & a		6516051	1					
ANR	6516650	CastExpression	( uint8_t * ) & a		6516051	0					
ANR	6516651	CastTarget	uint8_t *		6516051	0					
ANR	6516652	UnaryOperationExpression	& a		6516051	1					
ANR	6516653	UnaryOperator	&		6516051	0					
ANR	6516654	Identifier	a		6516051	1					
ANR	6516655	Argument	4		6516051	2					
ANR	6516656	PrimaryExpression	4		6516051	0					
ANR	6516657	ExpressionStatement	"cpu_physical_memory_write ( dma_ptr + 4 , ( uint8_t * ) & b , 4 )"	147:8:2563:2619	6516051	4	True				
ANR	6516658	CallExpression	"cpu_physical_memory_write ( dma_ptr + 4 , ( uint8_t * ) & b , 4 )"		6516051	0					
ANR	6516659	Callee	cpu_physical_memory_write		6516051	0					
ANR	6516660	Identifier	cpu_physical_memory_write		6516051	0					
ANR	6516661	ArgumentList	dma_ptr + 4		6516051	1					
ANR	6516662	Argument	dma_ptr + 4		6516051	0					
ANR	6516663	AdditiveExpression	dma_ptr + 4		6516051	0		+			
ANR	6516664	Identifier	dma_ptr		6516051	0					
ANR	6516665	PrimaryExpression	4		6516051	1					
ANR	6516666	Argument	( uint8_t * ) & b		6516051	1					
ANR	6516667	CastExpression	( uint8_t * ) & b		6516051	0					
ANR	6516668	CastTarget	uint8_t *		6516051	0					
ANR	6516669	UnaryOperationExpression	& b		6516051	1					
ANR	6516670	UnaryOperator	&		6516051	0					
ANR	6516671	Identifier	b		6516051	1					
ANR	6516672	Argument	4		6516051	2					
ANR	6516673	PrimaryExpression	4		6516051	0					
ANR	6516674	ExpressionStatement	s -> regs [ R_LASTDMA ] = dma_ptr + 4	149:8:2630:2662	6516051	5	True				
ANR	6516675	AssignmentExpression	s -> regs [ R_LASTDMA ] = dma_ptr + 4		6516051	0		=			
ANR	6516676	ArrayIndexing	s -> regs [ R_LASTDMA ]		6516051	0					
ANR	6516677	PtrMemberAccess	s -> regs		6516051	0					
ANR	6516678	Identifier	s		6516051	0					
ANR	6516679	Identifier	regs		6516051	1					
ANR	6516680	Identifier	R_LASTDMA		6516051	1					
ANR	6516681	AdditiveExpression	dma_ptr + 4		6516051	1		+			
ANR	6516682	Identifier	dma_ptr		6516051	0					
ANR	6516683	PrimaryExpression	4		6516051	1					
ANR	6516684	ExpressionStatement	"D_EXEC ( qemu_log ( ""VECTOUT a=%08x b=%08x dma=%08x\\n"" , a , b , dma_ptr ) )"	151:8:2673:2740	6516051	6	True				
ANR	6516685	CallExpression	"D_EXEC ( qemu_log ( ""VECTOUT a=%08x b=%08x dma=%08x\\n"" , a , b , dma_ptr ) )"		6516051	0					
ANR	6516686	Callee	D_EXEC		6516051	0					
ANR	6516687	Identifier	D_EXEC		6516051	0					
ANR	6516688	ArgumentList	"qemu_log ( ""VECTOUT a=%08x b=%08x dma=%08x\\n"" , a , b , dma_ptr )"		6516051	1					
ANR	6516689	Argument	"qemu_log ( ""VECTOUT a=%08x b=%08x dma=%08x\\n"" , a , b , dma_ptr )"		6516051	0					
ANR	6516690	CallExpression	"qemu_log ( ""VECTOUT a=%08x b=%08x dma=%08x\\n"" , a , b , dma_ptr )"		6516051	0					
ANR	6516691	Callee	qemu_log		6516051	0					
ANR	6516692	Identifier	qemu_log		6516051	0					
ANR	6516693	ArgumentList	"""VECTOUT a=%08x b=%08x dma=%08x\\n"""		6516051	1					
ANR	6516694	Argument	"""VECTOUT a=%08x b=%08x dma=%08x\\n"""		6516051	0					
ANR	6516695	PrimaryExpression	"""VECTOUT a=%08x b=%08x dma=%08x\\n"""		6516051	0					
ANR	6516696	Argument	a		6516051	1					
ANR	6516697	Identifier	a		6516051	0					
ANR	6516698	Argument	b		6516051	2					
ANR	6516699	Identifier	b		6516051	0					
ANR	6516700	Argument	dma_ptr		6516051	3					
ANR	6516701	Identifier	dma_ptr		6516051	0					
ANR	6516702	ExpressionStatement	"trace_milkymist_pfpu_vectout ( a , b , dma_ptr )"	153:8:2751:2794	6516051	7	True				
ANR	6516703	CallExpression	"trace_milkymist_pfpu_vectout ( a , b , dma_ptr )"		6516051	0					
ANR	6516704	Callee	trace_milkymist_pfpu_vectout		6516051	0					
ANR	6516705	Identifier	trace_milkymist_pfpu_vectout		6516051	0					
ANR	6516706	ArgumentList	a		6516051	1					
ANR	6516707	Argument	a		6516051	0					
ANR	6516708	Identifier	a		6516051	0					
ANR	6516709	Argument	b		6516051	1					
ANR	6516710	Identifier	b		6516051	0					
ANR	6516711	Argument	dma_ptr		6516051	2					
ANR	6516712	Identifier	dma_ptr		6516051	0					
ANR	6516713	BreakStatement	break ;	155:6:2803:2808	6516051	22	True				
ANR	6516714	Label	case OP_SIN :	157:4:2815:2826	6516051	23	True				
ANR	6516715	Identifier	OP_SIN		6516051	0					
ANR	6516716	CompoundStatement		161:8:2858:2903	6516051	24					
ANR	6516717	IdentifierDeclStatement	"int32_t a = REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] ) ;"	161:8:2844:2900	6516051	0	True				
ANR	6516718	IdentifierDecl	"a = REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516719	IdentifierDeclType	int32_t		6516051	0					
ANR	6516720	Identifier	a		6516051	1					
ANR	6516721	AssignmentExpression	"a = REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516722	Identifier	a		6516051	0					
ANR	6516723	CallExpression	"REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516724	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516725	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516726	ArgumentList	int32_t		6516051	1					
ANR	6516727	Argument	int32_t		6516051	0					
ANR	6516728	Identifier	int32_t		6516051	0					
ANR	6516729	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516730	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516731	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516732	Identifier	s		6516051	0					
ANR	6516733	Identifier	gp_regs		6516051	1					
ANR	6516734	Identifier	reg_a		6516051	1					
ANR	6516735	IdentifierDeclStatement	float t = sinf ( a * ( 1.0f / ( M_PI * 4096.0f ) ) ) ;	163:8:2911:2956	6516051	1	True				
ANR	6516736	IdentifierDecl	t = sinf ( a * ( 1.0f / ( M_PI * 4096.0f ) ) )		6516051	0					
ANR	6516737	IdentifierDeclType	float		6516051	0					
ANR	6516738	Identifier	t		6516051	1					
ANR	6516739	AssignmentExpression	t = sinf ( a * ( 1.0f / ( M_PI * 4096.0f ) ) )		6516051	2		=			
ANR	6516740	Identifier	t		6516051	0					
ANR	6516741	CallExpression	sinf ( a * ( 1.0f / ( M_PI * 4096.0f ) ) )		6516051	1					
ANR	6516742	Callee	sinf		6516051	0					
ANR	6516743	Identifier	sinf		6516051	0					
ANR	6516744	ArgumentList	a * ( 1.0f / ( M_PI * 4096.0f ) )		6516051	1					
ANR	6516745	Argument	a * ( 1.0f / ( M_PI * 4096.0f ) )		6516051	0					
ANR	6516746	MultiplicativeExpression	a * ( 1.0f / ( M_PI * 4096.0f ) )		6516051	0		*			
ANR	6516747	Identifier	a		6516051	0					
ANR	6516748	MultiplicativeExpression	1.0f / ( M_PI * 4096.0f )		6516051	1		/			
ANR	6516749	PrimaryExpression	1.0f		6516051	0					
ANR	6516750	MultiplicativeExpression	M_PI * 4096.0f		6516051	1		*			
ANR	6516751	Identifier	M_PI		6516051	0					
ANR	6516752	PrimaryExpression	4096.0f		6516051	1					
ANR	6516753	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	165:8:2967:3000	6516051	2	True				
ANR	6516754	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6516755	Identifier	r		6516051	0					
ANR	6516756	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6516757	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516758	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516759	ArgumentList	uint32_t		6516051	1					
ANR	6516760	Argument	uint32_t		6516051	0					
ANR	6516761	Identifier	uint32_t		6516051	0					
ANR	6516762	Argument	t		6516051	1					
ANR	6516763	Identifier	t		6516051	0					
ANR	6516764	ExpressionStatement	latency = LATENCY_SIN	167:8:3011:3032	6516051	3	True				
ANR	6516765	AssignmentExpression	latency = LATENCY_SIN		6516051	0		=			
ANR	6516766	Identifier	latency		6516051	0					
ANR	6516767	Identifier	LATENCY_SIN		6516051	1					
ANR	6516768	ExpressionStatement	"D_EXEC ( qemu_log ( ""SIN a=%d t=%f, r=%08x\\n"" , a , t , r ) )"	169:8:3043:3095	6516051	4	True				
ANR	6516769	CallExpression	"D_EXEC ( qemu_log ( ""SIN a=%d t=%f, r=%08x\\n"" , a , t , r ) )"		6516051	0					
ANR	6516770	Callee	D_EXEC		6516051	0					
ANR	6516771	Identifier	D_EXEC		6516051	0					
ANR	6516772	ArgumentList	"qemu_log ( ""SIN a=%d t=%f, r=%08x\\n"" , a , t , r )"		6516051	1					
ANR	6516773	Argument	"qemu_log ( ""SIN a=%d t=%f, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516774	CallExpression	"qemu_log ( ""SIN a=%d t=%f, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516775	Callee	qemu_log		6516051	0					
ANR	6516776	Identifier	qemu_log		6516051	0					
ANR	6516777	ArgumentList	"""SIN a=%d t=%f, r=%08x\\n"""		6516051	1					
ANR	6516778	Argument	"""SIN a=%d t=%f, r=%08x\\n"""		6516051	0					
ANR	6516779	PrimaryExpression	"""SIN a=%d t=%f, r=%08x\\n"""		6516051	0					
ANR	6516780	Argument	a		6516051	1					
ANR	6516781	Identifier	a		6516051	0					
ANR	6516782	Argument	t		6516051	2					
ANR	6516783	Identifier	t		6516051	0					
ANR	6516784	Argument	r		6516051	3					
ANR	6516785	Identifier	r		6516051	0					
ANR	6516786	BreakStatement	break ;	171:6:3104:3109	6516051	25	True				
ANR	6516787	Label	case OP_COS :	173:4:3116:3127	6516051	26	True				
ANR	6516788	Identifier	OP_COS		6516051	0					
ANR	6516789	CompoundStatement		177:8:3159:3204	6516051	27					
ANR	6516790	IdentifierDeclStatement	"int32_t a = REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] ) ;"	177:8:3145:3201	6516051	0	True				
ANR	6516791	IdentifierDecl	"a = REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516792	IdentifierDeclType	int32_t		6516051	0					
ANR	6516793	Identifier	a		6516051	1					
ANR	6516794	AssignmentExpression	"a = REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516795	Identifier	a		6516051	0					
ANR	6516796	CallExpression	"REINTERPRET_CAST ( int32_t , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516797	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516798	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516799	ArgumentList	int32_t		6516051	1					
ANR	6516800	Argument	int32_t		6516051	0					
ANR	6516801	Identifier	int32_t		6516051	0					
ANR	6516802	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516803	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516804	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516805	Identifier	s		6516051	0					
ANR	6516806	Identifier	gp_regs		6516051	1					
ANR	6516807	Identifier	reg_a		6516051	1					
ANR	6516808	IdentifierDeclStatement	float t = cosf ( a * ( 1.0f / ( M_PI * 4096.0f ) ) ) ;	179:8:3212:3257	6516051	1	True				
ANR	6516809	IdentifierDecl	t = cosf ( a * ( 1.0f / ( M_PI * 4096.0f ) ) )		6516051	0					
ANR	6516810	IdentifierDeclType	float		6516051	0					
ANR	6516811	Identifier	t		6516051	1					
ANR	6516812	AssignmentExpression	t = cosf ( a * ( 1.0f / ( M_PI * 4096.0f ) ) )		6516051	2		=			
ANR	6516813	Identifier	t		6516051	0					
ANR	6516814	CallExpression	cosf ( a * ( 1.0f / ( M_PI * 4096.0f ) ) )		6516051	1					
ANR	6516815	Callee	cosf		6516051	0					
ANR	6516816	Identifier	cosf		6516051	0					
ANR	6516817	ArgumentList	a * ( 1.0f / ( M_PI * 4096.0f ) )		6516051	1					
ANR	6516818	Argument	a * ( 1.0f / ( M_PI * 4096.0f ) )		6516051	0					
ANR	6516819	MultiplicativeExpression	a * ( 1.0f / ( M_PI * 4096.0f ) )		6516051	0		*			
ANR	6516820	Identifier	a		6516051	0					
ANR	6516821	MultiplicativeExpression	1.0f / ( M_PI * 4096.0f )		6516051	1		/			
ANR	6516822	PrimaryExpression	1.0f		6516051	0					
ANR	6516823	MultiplicativeExpression	M_PI * 4096.0f		6516051	1		*			
ANR	6516824	Identifier	M_PI		6516051	0					
ANR	6516825	PrimaryExpression	4096.0f		6516051	1					
ANR	6516826	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	181:8:3268:3301	6516051	2	True				
ANR	6516827	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6516828	Identifier	r		6516051	0					
ANR	6516829	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6516830	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516831	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516832	ArgumentList	uint32_t		6516051	1					
ANR	6516833	Argument	uint32_t		6516051	0					
ANR	6516834	Identifier	uint32_t		6516051	0					
ANR	6516835	Argument	t		6516051	1					
ANR	6516836	Identifier	t		6516051	0					
ANR	6516837	ExpressionStatement	latency = LATENCY_COS	183:8:3312:3333	6516051	3	True				
ANR	6516838	AssignmentExpression	latency = LATENCY_COS		6516051	0		=			
ANR	6516839	Identifier	latency		6516051	0					
ANR	6516840	Identifier	LATENCY_COS		6516051	1					
ANR	6516841	ExpressionStatement	"D_EXEC ( qemu_log ( ""COS a=%d t=%f, r=%08x\\n"" , a , t , r ) )"	185:8:3344:3396	6516051	4	True				
ANR	6516842	CallExpression	"D_EXEC ( qemu_log ( ""COS a=%d t=%f, r=%08x\\n"" , a , t , r ) )"		6516051	0					
ANR	6516843	Callee	D_EXEC		6516051	0					
ANR	6516844	Identifier	D_EXEC		6516051	0					
ANR	6516845	ArgumentList	"qemu_log ( ""COS a=%d t=%f, r=%08x\\n"" , a , t , r )"		6516051	1					
ANR	6516846	Argument	"qemu_log ( ""COS a=%d t=%f, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516847	CallExpression	"qemu_log ( ""COS a=%d t=%f, r=%08x\\n"" , a , t , r )"		6516051	0					
ANR	6516848	Callee	qemu_log		6516051	0					
ANR	6516849	Identifier	qemu_log		6516051	0					
ANR	6516850	ArgumentList	"""COS a=%d t=%f, r=%08x\\n"""		6516051	1					
ANR	6516851	Argument	"""COS a=%d t=%f, r=%08x\\n"""		6516051	0					
ANR	6516852	PrimaryExpression	"""COS a=%d t=%f, r=%08x\\n"""		6516051	0					
ANR	6516853	Argument	a		6516051	1					
ANR	6516854	Identifier	a		6516051	0					
ANR	6516855	Argument	t		6516051	2					
ANR	6516856	Identifier	t		6516051	0					
ANR	6516857	Argument	r		6516051	3					
ANR	6516858	Identifier	r		6516051	0					
ANR	6516859	BreakStatement	break ;	187:6:3405:3410	6516051	28	True				
ANR	6516860	Label	case OP_ABOVE :	189:4:3417:3430	6516051	29	True				
ANR	6516861	Identifier	OP_ABOVE		6516051	0					
ANR	6516862	CompoundStatement		195:8:3521:3552	6516051	30					
ANR	6516863	IdentifierDeclStatement	"float a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] ) ;"	193:8:3448:3500	6516051	0	True				
ANR	6516864	IdentifierDecl	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516865	IdentifierDeclType	float		6516051	0					
ANR	6516866	Identifier	a		6516051	1					
ANR	6516867	AssignmentExpression	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516868	Identifier	a		6516051	0					
ANR	6516869	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516870	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516871	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516872	ArgumentList	float		6516051	1					
ANR	6516873	Argument	float		6516051	0					
ANR	6516874	Identifier	float		6516051	0					
ANR	6516875	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516876	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516877	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516878	Identifier	s		6516051	0					
ANR	6516879	Identifier	gp_regs		6516051	1					
ANR	6516880	Identifier	reg_a		6516051	1					
ANR	6516881	IdentifierDeclStatement	"float b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] ) ;"	195:8:3511:3563	6516051	1	True				
ANR	6516882	IdentifierDecl	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	0					
ANR	6516883	IdentifierDeclType	float		6516051	0					
ANR	6516884	Identifier	b		6516051	1					
ANR	6516885	AssignmentExpression	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	2		=			
ANR	6516886	Identifier	b		6516051	0					
ANR	6516887	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	1					
ANR	6516888	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516889	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516890	ArgumentList	float		6516051	1					
ANR	6516891	Argument	float		6516051	0					
ANR	6516892	Identifier	float		6516051	0					
ANR	6516893	Argument	s -> gp_regs [ reg_b ]		6516051	1					
ANR	6516894	ArrayIndexing	s -> gp_regs [ reg_b ]		6516051	0					
ANR	6516895	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516896	Identifier	s		6516051	0					
ANR	6516897	Identifier	gp_regs		6516051	1					
ANR	6516898	Identifier	reg_b		6516051	1					
ANR	6516899	IdentifierDeclStatement	float t = ( a > b ) ? 1.0f : 0.0f ;	197:8:3574:3605	6516051	2	True				
ANR	6516900	IdentifierDecl	t = ( a > b ) ? 1.0f : 0.0f		6516051	0					
ANR	6516901	IdentifierDeclType	float		6516051	0					
ANR	6516902	Identifier	t		6516051	1					
ANR	6516903	AssignmentExpression	t = ( a > b ) ? 1.0f : 0.0f		6516051	2		=			
ANR	6516904	Identifier	t		6516051	0					
ANR	6516905	ConditionalExpression	( a > b ) ? 1.0f : 0.0f		6516051	1					
ANR	6516906	Condition	a > b		6516051	0					
ANR	6516907	RelationalExpression	a > b		6516051	0		>			
ANR	6516908	Identifier	a		6516051	0					
ANR	6516909	Identifier	b		6516051	1					
ANR	6516910	PrimaryExpression	1.0f		6516051	1					
ANR	6516911	PrimaryExpression	0.0f		6516051	2					
ANR	6516912	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	199:8:3616:3649	6516051	3	True				
ANR	6516913	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6516914	Identifier	r		6516051	0					
ANR	6516915	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6516916	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516917	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516918	ArgumentList	uint32_t		6516051	1					
ANR	6516919	Argument	uint32_t		6516051	0					
ANR	6516920	Identifier	uint32_t		6516051	0					
ANR	6516921	Argument	t		6516051	1					
ANR	6516922	Identifier	t		6516051	0					
ANR	6516923	ExpressionStatement	latency = LATENCY_ABOVE	201:8:3660:3683	6516051	4	True				
ANR	6516924	AssignmentExpression	latency = LATENCY_ABOVE		6516051	0		=			
ANR	6516925	Identifier	latency		6516051	0					
ANR	6516926	Identifier	LATENCY_ABOVE		6516051	1					
ANR	6516927	ExpressionStatement	"D_EXEC ( qemu_log ( ""ABOVE a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"	203:8:3694:3756	6516051	5	True				
ANR	6516928	CallExpression	"D_EXEC ( qemu_log ( ""ABOVE a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"		6516051	0					
ANR	6516929	Callee	D_EXEC		6516051	0					
ANR	6516930	Identifier	D_EXEC		6516051	0					
ANR	6516931	ArgumentList	"qemu_log ( ""ABOVE a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	1					
ANR	6516932	Argument	"qemu_log ( ""ABOVE a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6516933	CallExpression	"qemu_log ( ""ABOVE a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6516934	Callee	qemu_log		6516051	0					
ANR	6516935	Identifier	qemu_log		6516051	0					
ANR	6516936	ArgumentList	"""ABOVE a=%f b=%f t=%f, r=%08x\\n"""		6516051	1					
ANR	6516937	Argument	"""ABOVE a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516938	PrimaryExpression	"""ABOVE a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6516939	Argument	a		6516051	1					
ANR	6516940	Identifier	a		6516051	0					
ANR	6516941	Argument	b		6516051	2					
ANR	6516942	Identifier	b		6516051	0					
ANR	6516943	Argument	t		6516051	3					
ANR	6516944	Identifier	t		6516051	0					
ANR	6516945	Argument	r		6516051	4					
ANR	6516946	Identifier	r		6516051	0					
ANR	6516947	BreakStatement	break ;	205:6:3765:3770	6516051	31	True				
ANR	6516948	Label	case OP_EQUAL :	207:4:3777:3790	6516051	32	True				
ANR	6516949	Identifier	OP_EQUAL		6516051	0					
ANR	6516950	CompoundStatement		213:8:3881:3913	6516051	33					
ANR	6516951	IdentifierDeclStatement	"float a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] ) ;"	211:8:3808:3860	6516051	0	True				
ANR	6516952	IdentifierDecl	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6516953	IdentifierDeclType	float		6516051	0					
ANR	6516954	Identifier	a		6516051	1					
ANR	6516955	AssignmentExpression	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6516956	Identifier	a		6516051	0					
ANR	6516957	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6516958	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516959	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516960	ArgumentList	float		6516051	1					
ANR	6516961	Argument	float		6516051	0					
ANR	6516962	Identifier	float		6516051	0					
ANR	6516963	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6516964	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6516965	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516966	Identifier	s		6516051	0					
ANR	6516967	Identifier	gp_regs		6516051	1					
ANR	6516968	Identifier	reg_a		6516051	1					
ANR	6516969	IdentifierDeclStatement	"float b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] ) ;"	213:8:3871:3923	6516051	1	True				
ANR	6516970	IdentifierDecl	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	0					
ANR	6516971	IdentifierDeclType	float		6516051	0					
ANR	6516972	Identifier	b		6516051	1					
ANR	6516973	AssignmentExpression	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	2		=			
ANR	6516974	Identifier	b		6516051	0					
ANR	6516975	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	1					
ANR	6516976	Callee	REINTERPRET_CAST		6516051	0					
ANR	6516977	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6516978	ArgumentList	float		6516051	1					
ANR	6516979	Argument	float		6516051	0					
ANR	6516980	Identifier	float		6516051	0					
ANR	6516981	Argument	s -> gp_regs [ reg_b ]		6516051	1					
ANR	6516982	ArrayIndexing	s -> gp_regs [ reg_b ]		6516051	0					
ANR	6516983	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6516984	Identifier	s		6516051	0					
ANR	6516985	Identifier	gp_regs		6516051	1					
ANR	6516986	Identifier	reg_b		6516051	1					
ANR	6516987	IdentifierDeclStatement	float t = ( a == b ) ? 1.0f : 0.0f ;	215:8:3934:3966	6516051	2	True				
ANR	6516988	IdentifierDecl	t = ( a == b ) ? 1.0f : 0.0f		6516051	0					
ANR	6516989	IdentifierDeclType	float		6516051	0					
ANR	6516990	Identifier	t		6516051	1					
ANR	6516991	AssignmentExpression	t = ( a == b ) ? 1.0f : 0.0f		6516051	2		=			
ANR	6516992	Identifier	t		6516051	0					
ANR	6516993	ConditionalExpression	( a == b ) ? 1.0f : 0.0f		6516051	1					
ANR	6516994	Condition	a == b		6516051	0					
ANR	6516995	EqualityExpression	a == b		6516051	0		==			
ANR	6516996	Identifier	a		6516051	0					
ANR	6516997	Identifier	b		6516051	1					
ANR	6516998	PrimaryExpression	1.0f		6516051	1					
ANR	6516999	PrimaryExpression	0.0f		6516051	2					
ANR	6517000	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	217:8:3977:4010	6516051	3	True				
ANR	6517001	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6517002	Identifier	r		6516051	0					
ANR	6517003	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6517004	Callee	REINTERPRET_CAST		6516051	0					
ANR	6517005	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6517006	ArgumentList	uint32_t		6516051	1					
ANR	6517007	Argument	uint32_t		6516051	0					
ANR	6517008	Identifier	uint32_t		6516051	0					
ANR	6517009	Argument	t		6516051	1					
ANR	6517010	Identifier	t		6516051	0					
ANR	6517011	ExpressionStatement	latency = LATENCY_EQUAL	219:8:4021:4044	6516051	4	True				
ANR	6517012	AssignmentExpression	latency = LATENCY_EQUAL		6516051	0		=			
ANR	6517013	Identifier	latency		6516051	0					
ANR	6517014	Identifier	LATENCY_EQUAL		6516051	1					
ANR	6517015	ExpressionStatement	"D_EXEC ( qemu_log ( ""EQUAL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"	221:8:4055:4117	6516051	5	True				
ANR	6517016	CallExpression	"D_EXEC ( qemu_log ( ""EQUAL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"		6516051	0					
ANR	6517017	Callee	D_EXEC		6516051	0					
ANR	6517018	Identifier	D_EXEC		6516051	0					
ANR	6517019	ArgumentList	"qemu_log ( ""EQUAL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	1					
ANR	6517020	Argument	"qemu_log ( ""EQUAL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6517021	CallExpression	"qemu_log ( ""EQUAL a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6517022	Callee	qemu_log		6516051	0					
ANR	6517023	Identifier	qemu_log		6516051	0					
ANR	6517024	ArgumentList	"""EQUAL a=%f b=%f t=%f, r=%08x\\n"""		6516051	1					
ANR	6517025	Argument	"""EQUAL a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6517026	PrimaryExpression	"""EQUAL a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6517027	Argument	a		6516051	1					
ANR	6517028	Identifier	a		6516051	0					
ANR	6517029	Argument	b		6516051	2					
ANR	6517030	Identifier	b		6516051	0					
ANR	6517031	Argument	t		6516051	3					
ANR	6517032	Identifier	t		6516051	0					
ANR	6517033	Argument	r		6516051	4					
ANR	6517034	Identifier	r		6516051	0					
ANR	6517035	BreakStatement	break ;	223:6:4126:4131	6516051	34	True				
ANR	6517036	Label	case OP_COPY :	225:4:4138:4150	6516051	35	True				
ANR	6517037	Identifier	OP_COPY		6516051	0					
ANR	6517038	CompoundStatement		225:4:4104:4104	6516051	36					
ANR	6517039	ExpressionStatement	r = s -> gp_regs [ reg_a ]	229:8:4168:4189	6516051	0	True				
ANR	6517040	AssignmentExpression	r = s -> gp_regs [ reg_a ]		6516051	0		=			
ANR	6517041	Identifier	r		6516051	0					
ANR	6517042	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6517043	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6517044	Identifier	s		6516051	0					
ANR	6517045	Identifier	gp_regs		6516051	1					
ANR	6517046	Identifier	reg_a		6516051	1					
ANR	6517047	ExpressionStatement	latency = LATENCY_COPY	231:8:4200:4222	6516051	1	True				
ANR	6517048	AssignmentExpression	latency = LATENCY_COPY		6516051	0		=			
ANR	6517049	Identifier	latency		6516051	0					
ANR	6517050	Identifier	LATENCY_COPY		6516051	1					
ANR	6517051	ExpressionStatement	"D_EXEC ( qemu_log ( ""COPY"" ) )"	233:8:4233:4257	6516051	2	True				
ANR	6517052	CallExpression	"D_EXEC ( qemu_log ( ""COPY"" ) )"		6516051	0					
ANR	6517053	Callee	D_EXEC		6516051	0					
ANR	6517054	Identifier	D_EXEC		6516051	0					
ANR	6517055	ArgumentList	"qemu_log ( ""COPY"" )"		6516051	1					
ANR	6517056	Argument	"qemu_log ( ""COPY"" )"		6516051	0					
ANR	6517057	CallExpression	"qemu_log ( ""COPY"" )"		6516051	0					
ANR	6517058	Callee	qemu_log		6516051	0					
ANR	6517059	Identifier	qemu_log		6516051	0					
ANR	6517060	ArgumentList	"""COPY"""		6516051	1					
ANR	6517061	Argument	"""COPY"""		6516051	0					
ANR	6517062	PrimaryExpression	"""COPY"""		6516051	0					
ANR	6517063	BreakStatement	break ;	235:6:4266:4271	6516051	37	True				
ANR	6517064	Label	case OP_IF :	237:4:4278:4288	6516051	38	True				
ANR	6517065	Identifier	OP_IF		6516051	0					
ANR	6517066	CompoundStatement		245:8:4424:4450	6516051	39					
ANR	6517067	IdentifierDeclStatement	"float a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] ) ;"	241:8:4306:4358	6516051	0	True				
ANR	6517068	IdentifierDecl	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6517069	IdentifierDeclType	float		6516051	0					
ANR	6517070	Identifier	a		6516051	1					
ANR	6517071	AssignmentExpression	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6517072	Identifier	a		6516051	0					
ANR	6517073	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6517074	Callee	REINTERPRET_CAST		6516051	0					
ANR	6517075	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6517076	ArgumentList	float		6516051	1					
ANR	6517077	Argument	float		6516051	0					
ANR	6517078	Identifier	float		6516051	0					
ANR	6517079	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6517080	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6517081	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6517082	Identifier	s		6516051	0					
ANR	6517083	Identifier	gp_regs		6516051	1					
ANR	6517084	Identifier	reg_a		6516051	1					
ANR	6517085	IdentifierDeclStatement	"float b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] ) ;"	243:8:4369:4421	6516051	1	True				
ANR	6517086	IdentifierDecl	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	0					
ANR	6517087	IdentifierDeclType	float		6516051	0					
ANR	6517088	Identifier	b		6516051	1					
ANR	6517089	AssignmentExpression	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	2		=			
ANR	6517090	Identifier	b		6516051	0					
ANR	6517091	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	1					
ANR	6517092	Callee	REINTERPRET_CAST		6516051	0					
ANR	6517093	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6517094	ArgumentList	float		6516051	1					
ANR	6517095	Argument	float		6516051	0					
ANR	6517096	Identifier	float		6516051	0					
ANR	6517097	Argument	s -> gp_regs [ reg_b ]		6516051	1					
ANR	6517098	ArrayIndexing	s -> gp_regs [ reg_b ]		6516051	0					
ANR	6517099	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6517100	Identifier	s		6516051	0					
ANR	6517101	Identifier	gp_regs		6516051	1					
ANR	6517102	Identifier	reg_b		6516051	1					
ANR	6517103	IdentifierDeclStatement	uint32_t f = s -> gp_regs [ GPR_FLAGS ] ;	245:8:4432:4466	6516051	2	True				
ANR	6517104	IdentifierDecl	f = s -> gp_regs [ GPR_FLAGS ]		6516051	0					
ANR	6517105	IdentifierDeclType	uint32_t		6516051	0					
ANR	6517106	Identifier	f		6516051	1					
ANR	6517107	AssignmentExpression	f = s -> gp_regs [ GPR_FLAGS ]		6516051	2		=			
ANR	6517108	Identifier	f		6516051	0					
ANR	6517109	ArrayIndexing	s -> gp_regs [ GPR_FLAGS ]		6516051	1					
ANR	6517110	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6517111	Identifier	s		6516051	0					
ANR	6517112	Identifier	gp_regs		6516051	1					
ANR	6517113	Identifier	GPR_FLAGS		6516051	1					
ANR	6517114	IdentifierDeclStatement	float t = ( f != 0 ) ? a : b ;	247:8:4477:4503	6516051	3	True				
ANR	6517115	IdentifierDecl	t = ( f != 0 ) ? a : b		6516051	0					
ANR	6517116	IdentifierDeclType	float		6516051	0					
ANR	6517117	Identifier	t		6516051	1					
ANR	6517118	AssignmentExpression	t = ( f != 0 ) ? a : b		6516051	2		=			
ANR	6517119	Identifier	t		6516051	0					
ANR	6517120	ConditionalExpression	( f != 0 ) ? a : b		6516051	1					
ANR	6517121	Condition	f != 0		6516051	0					
ANR	6517122	EqualityExpression	f != 0		6516051	0		!=			
ANR	6517123	Identifier	f		6516051	0					
ANR	6517124	PrimaryExpression	0		6516051	1					
ANR	6517125	Identifier	a		6516051	1					
ANR	6517126	Identifier	b		6516051	2					
ANR	6517127	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	249:8:4514:4547	6516051	4	True				
ANR	6517128	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6517129	Identifier	r		6516051	0					
ANR	6517130	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6517131	Callee	REINTERPRET_CAST		6516051	0					
ANR	6517132	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6517133	ArgumentList	uint32_t		6516051	1					
ANR	6517134	Argument	uint32_t		6516051	0					
ANR	6517135	Identifier	uint32_t		6516051	0					
ANR	6517136	Argument	t		6516051	1					
ANR	6517137	Identifier	t		6516051	0					
ANR	6517138	ExpressionStatement	latency = LATENCY_IF	251:8:4558:4578	6516051	5	True				
ANR	6517139	AssignmentExpression	latency = LATENCY_IF		6516051	0		=			
ANR	6517140	Identifier	latency		6516051	0					
ANR	6517141	Identifier	LATENCY_IF		6516051	1					
ANR	6517142	ExpressionStatement	"D_EXEC ( qemu_log ( ""IF f=%u a=%f b=%f t=%f, r=%08x\\n"" , f , a , b , t , r ) )"	253:8:4589:4656	6516051	6	True				
ANR	6517143	CallExpression	"D_EXEC ( qemu_log ( ""IF f=%u a=%f b=%f t=%f, r=%08x\\n"" , f , a , b , t , r ) )"		6516051	0					
ANR	6517144	Callee	D_EXEC		6516051	0					
ANR	6517145	Identifier	D_EXEC		6516051	0					
ANR	6517146	ArgumentList	"qemu_log ( ""IF f=%u a=%f b=%f t=%f, r=%08x\\n"" , f , a , b , t , r )"		6516051	1					
ANR	6517147	Argument	"qemu_log ( ""IF f=%u a=%f b=%f t=%f, r=%08x\\n"" , f , a , b , t , r )"		6516051	0					
ANR	6517148	CallExpression	"qemu_log ( ""IF f=%u a=%f b=%f t=%f, r=%08x\\n"" , f , a , b , t , r )"		6516051	0					
ANR	6517149	Callee	qemu_log		6516051	0					
ANR	6517150	Identifier	qemu_log		6516051	0					
ANR	6517151	ArgumentList	"""IF f=%u a=%f b=%f t=%f, r=%08x\\n"""		6516051	1					
ANR	6517152	Argument	"""IF f=%u a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6517153	PrimaryExpression	"""IF f=%u a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6517154	Argument	f		6516051	1					
ANR	6517155	Identifier	f		6516051	0					
ANR	6517156	Argument	a		6516051	2					
ANR	6517157	Identifier	a		6516051	0					
ANR	6517158	Argument	b		6516051	3					
ANR	6517159	Identifier	b		6516051	0					
ANR	6517160	Argument	t		6516051	4					
ANR	6517161	Identifier	t		6516051	0					
ANR	6517162	Argument	r		6516051	5					
ANR	6517163	Identifier	r		6516051	0					
ANR	6517164	BreakStatement	break ;	255:6:4665:4670	6516051	40	True				
ANR	6517165	Label	case OP_TSIGN :	257:4:4677:4690	6516051	41	True				
ANR	6517166	Identifier	OP_TSIGN		6516051	0					
ANR	6517167	CompoundStatement		263:8:4781:4807	6516051	42					
ANR	6517168	IdentifierDeclStatement	"float a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] ) ;"	261:8:4708:4760	6516051	0	True				
ANR	6517169	IdentifierDecl	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	0					
ANR	6517170	IdentifierDeclType	float		6516051	0					
ANR	6517171	Identifier	a		6516051	1					
ANR	6517172	AssignmentExpression	"a = REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	2		=			
ANR	6517173	Identifier	a		6516051	0					
ANR	6517174	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_a ] )"		6516051	1					
ANR	6517175	Callee	REINTERPRET_CAST		6516051	0					
ANR	6517176	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6517177	ArgumentList	float		6516051	1					
ANR	6517178	Argument	float		6516051	0					
ANR	6517179	Identifier	float		6516051	0					
ANR	6517180	Argument	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6517181	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	0					
ANR	6517182	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6517183	Identifier	s		6516051	0					
ANR	6517184	Identifier	gp_regs		6516051	1					
ANR	6517185	Identifier	reg_a		6516051	1					
ANR	6517186	IdentifierDeclStatement	"float b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] ) ;"	263:8:4771:4823	6516051	1	True				
ANR	6517187	IdentifierDecl	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	0					
ANR	6517188	IdentifierDeclType	float		6516051	0					
ANR	6517189	Identifier	b		6516051	1					
ANR	6517190	AssignmentExpression	"b = REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	2		=			
ANR	6517191	Identifier	b		6516051	0					
ANR	6517192	CallExpression	"REINTERPRET_CAST ( float , s -> gp_regs [ reg_b ] )"		6516051	1					
ANR	6517193	Callee	REINTERPRET_CAST		6516051	0					
ANR	6517194	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6517195	ArgumentList	float		6516051	1					
ANR	6517196	Argument	float		6516051	0					
ANR	6517197	Identifier	float		6516051	0					
ANR	6517198	Argument	s -> gp_regs [ reg_b ]		6516051	1					
ANR	6517199	ArrayIndexing	s -> gp_regs [ reg_b ]		6516051	0					
ANR	6517200	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6517201	Identifier	s		6516051	0					
ANR	6517202	Identifier	gp_regs		6516051	1					
ANR	6517203	Identifier	reg_b		6516051	1					
ANR	6517204	IdentifierDeclStatement	float t = ( b < 0 ) ? - a : a ;	265:8:4834:4860	6516051	2	True				
ANR	6517205	IdentifierDecl	t = ( b < 0 ) ? - a : a		6516051	0					
ANR	6517206	IdentifierDeclType	float		6516051	0					
ANR	6517207	Identifier	t		6516051	1					
ANR	6517208	AssignmentExpression	t = ( b < 0 ) ? - a : a		6516051	2		=			
ANR	6517209	Identifier	t		6516051	0					
ANR	6517210	ConditionalExpression	( b < 0 ) ? - a : a		6516051	1					
ANR	6517211	Condition	b < 0		6516051	0					
ANR	6517212	RelationalExpression	b < 0		6516051	0		<			
ANR	6517213	Identifier	b		6516051	0					
ANR	6517214	PrimaryExpression	0		6516051	1					
ANR	6517215	UnaryOperationExpression	- a		6516051	1					
ANR	6517216	UnaryOperator	-		6516051	0					
ANR	6517217	Identifier	a		6516051	1					
ANR	6517218	Identifier	a		6516051	2					
ANR	6517219	ExpressionStatement	"r = REINTERPRET_CAST ( uint32_t , t )"	267:8:4871:4904	6516051	3	True				
ANR	6517220	AssignmentExpression	"r = REINTERPRET_CAST ( uint32_t , t )"		6516051	0		=			
ANR	6517221	Identifier	r		6516051	0					
ANR	6517222	CallExpression	"REINTERPRET_CAST ( uint32_t , t )"		6516051	1					
ANR	6517223	Callee	REINTERPRET_CAST		6516051	0					
ANR	6517224	Identifier	REINTERPRET_CAST		6516051	0					
ANR	6517225	ArgumentList	uint32_t		6516051	1					
ANR	6517226	Argument	uint32_t		6516051	0					
ANR	6517227	Identifier	uint32_t		6516051	0					
ANR	6517228	Argument	t		6516051	1					
ANR	6517229	Identifier	t		6516051	0					
ANR	6517230	ExpressionStatement	latency = LATENCY_TSIGN	269:8:4915:4938	6516051	4	True				
ANR	6517231	AssignmentExpression	latency = LATENCY_TSIGN		6516051	0		=			
ANR	6517232	Identifier	latency		6516051	0					
ANR	6517233	Identifier	LATENCY_TSIGN		6516051	1					
ANR	6517234	ExpressionStatement	"D_EXEC ( qemu_log ( ""TSIGN a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"	271:8:4949:5011	6516051	5	True				
ANR	6517235	CallExpression	"D_EXEC ( qemu_log ( ""TSIGN a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r ) )"		6516051	0					
ANR	6517236	Callee	D_EXEC		6516051	0					
ANR	6517237	Identifier	D_EXEC		6516051	0					
ANR	6517238	ArgumentList	"qemu_log ( ""TSIGN a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	1					
ANR	6517239	Argument	"qemu_log ( ""TSIGN a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6517240	CallExpression	"qemu_log ( ""TSIGN a=%f b=%f t=%f, r=%08x\\n"" , a , b , t , r )"		6516051	0					
ANR	6517241	Callee	qemu_log		6516051	0					
ANR	6517242	Identifier	qemu_log		6516051	0					
ANR	6517243	ArgumentList	"""TSIGN a=%f b=%f t=%f, r=%08x\\n"""		6516051	1					
ANR	6517244	Argument	"""TSIGN a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6517245	PrimaryExpression	"""TSIGN a=%f b=%f t=%f, r=%08x\\n"""		6516051	0					
ANR	6517246	Argument	a		6516051	1					
ANR	6517247	Identifier	a		6516051	0					
ANR	6517248	Argument	b		6516051	2					
ANR	6517249	Identifier	b		6516051	0					
ANR	6517250	Argument	t		6516051	3					
ANR	6517251	Identifier	t		6516051	0					
ANR	6517252	Argument	r		6516051	4					
ANR	6517253	Identifier	r		6516051	0					
ANR	6517254	BreakStatement	break ;	273:6:5020:5025	6516051	43	True				
ANR	6517255	Label	case OP_QUAKE :	275:4:5032:5045	6516051	44	True				
ANR	6517256	Identifier	OP_QUAKE		6516051	0					
ANR	6517257	CompoundStatement		277:8:5010:5040	6516051	45					
ANR	6517258	IdentifierDeclStatement	uint32_t a = s -> gp_regs [ reg_a ] ;	279:8:5063:5093	6516051	0	True				
ANR	6517259	IdentifierDecl	a = s -> gp_regs [ reg_a ]		6516051	0					
ANR	6517260	IdentifierDeclType	uint32_t		6516051	0					
ANR	6517261	Identifier	a		6516051	1					
ANR	6517262	AssignmentExpression	a = s -> gp_regs [ reg_a ]		6516051	2		=			
ANR	6517263	Identifier	a		6516051	0					
ANR	6517264	ArrayIndexing	s -> gp_regs [ reg_a ]		6516051	1					
ANR	6517265	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6517266	Identifier	s		6516051	0					
ANR	6517267	Identifier	gp_regs		6516051	1					
ANR	6517268	Identifier	reg_a		6516051	1					
ANR	6517269	ExpressionStatement	r = 0x5f3759df - ( a >> 1 )	281:8:5104:5129	6516051	1	True				
ANR	6517270	AssignmentExpression	r = 0x5f3759df - ( a >> 1 )		6516051	0		=			
ANR	6517271	Identifier	r		6516051	0					
ANR	6517272	AdditiveExpression	0x5f3759df - ( a >> 1 )		6516051	1		-			
ANR	6517273	PrimaryExpression	0x5f3759df		6516051	0					
ANR	6517274	ShiftExpression	a >> 1		6516051	1		>>			
ANR	6517275	Identifier	a		6516051	0					
ANR	6517276	PrimaryExpression	1		6516051	1					
ANR	6517277	ExpressionStatement	latency = LATENCY_QUAKE	283:8:5140:5163	6516051	2	True				
ANR	6517278	AssignmentExpression	latency = LATENCY_QUAKE		6516051	0		=			
ANR	6517279	Identifier	latency		6516051	0					
ANR	6517280	Identifier	LATENCY_QUAKE		6516051	1					
ANR	6517281	ExpressionStatement	"D_EXEC ( qemu_log ( ""QUAKE a=%d r=%08x\\n"" , a , r ) )"	285:8:5174:5219	6516051	3	True				
ANR	6517282	CallExpression	"D_EXEC ( qemu_log ( ""QUAKE a=%d r=%08x\\n"" , a , r ) )"		6516051	0					
ANR	6517283	Callee	D_EXEC		6516051	0					
ANR	6517284	Identifier	D_EXEC		6516051	0					
ANR	6517285	ArgumentList	"qemu_log ( ""QUAKE a=%d r=%08x\\n"" , a , r )"		6516051	1					
ANR	6517286	Argument	"qemu_log ( ""QUAKE a=%d r=%08x\\n"" , a , r )"		6516051	0					
ANR	6517287	CallExpression	"qemu_log ( ""QUAKE a=%d r=%08x\\n"" , a , r )"		6516051	0					
ANR	6517288	Callee	qemu_log		6516051	0					
ANR	6517289	Identifier	qemu_log		6516051	0					
ANR	6517290	ArgumentList	"""QUAKE a=%d r=%08x\\n"""		6516051	1					
ANR	6517291	Argument	"""QUAKE a=%d r=%08x\\n"""		6516051	0					
ANR	6517292	PrimaryExpression	"""QUAKE a=%d r=%08x\\n"""		6516051	0					
ANR	6517293	Argument	a		6516051	1					
ANR	6517294	Identifier	a		6516051	0					
ANR	6517295	Argument	r		6516051	2					
ANR	6517296	Identifier	r		6516051	0					
ANR	6517297	BreakStatement	break ;	287:6:5228:5233	6516051	46	True				
ANR	6517298	Label	default :	291:4:5242:5249	6516051	47	True				
ANR	6517299	Identifier	default		6516051	0					
ANR	6517300	ExpressionStatement	"error_report ( ""milkymist_pfpu: unknown opcode %d\\n"" , op )"	293:8:5260:5315	6516051	48	True				
ANR	6517301	CallExpression	"error_report ( ""milkymist_pfpu: unknown opcode %d\\n"" , op )"		6516051	0					
ANR	6517302	Callee	error_report		6516051	0					
ANR	6517303	Identifier	error_report		6516051	0					
ANR	6517304	ArgumentList	"""milkymist_pfpu: unknown opcode %d\\n"""		6516051	1					
ANR	6517305	Argument	"""milkymist_pfpu: unknown opcode %d\\n"""		6516051	0					
ANR	6517306	PrimaryExpression	"""milkymist_pfpu: unknown opcode %d\\n"""		6516051	0					
ANR	6517307	Argument	op		6516051	1					
ANR	6517308	Identifier	op		6516051	0					
ANR	6517309	BreakStatement	break ;	295:8:5326:5331	6516051	49	True				
ANR	6517310	IfStatement	if ( ! reg_d )		6516051	9					
ANR	6517311	Condition	! reg_d	301:8:5351:5356	6516051	0	True				
ANR	6517312	UnaryOperationExpression	! reg_d		6516051	0					
ANR	6517313	UnaryOperator	!		6516051	0					
ANR	6517314	Identifier	reg_d		6516051	1					
ANR	6517315	CompoundStatement		299:16:5306:5306	6516051	1					
ANR	6517316	ExpressionStatement	"D_EXEC ( qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d>\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency ) )"	303:8:5370:5552	6516051	0	True				
ANR	6517317	CallExpression	"D_EXEC ( qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d>\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency ) )"		6516051	0					
ANR	6517318	Callee	D_EXEC		6516051	0					
ANR	6517319	Identifier	D_EXEC		6516051	0					
ANR	6517320	ArgumentList	"qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d>\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency )"		6516051	1					
ANR	6517321	Argument	"qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d>\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency )"		6516051	0					
ANR	6517322	CallExpression	"qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d>\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency )"		6516051	0					
ANR	6517323	Callee	qemu_log		6516051	0					
ANR	6517324	Identifier	qemu_log		6516051	0					
ANR	6517325	ArgumentList	"""%04d %8s R%03d, R%03d <L=%d, E=%04d>\\n"""		6516051	1					
ANR	6517326	Argument	"""%04d %8s R%03d, R%03d <L=%d, E=%04d>\\n"""		6516051	0					
ANR	6517327	PrimaryExpression	"""%04d %8s R%03d, R%03d <L=%d, E=%04d>\\n"""		6516051	0					
ANR	6517328	Argument	s -> regs [ R_PC ]		6516051	1					
ANR	6517329	ArrayIndexing	s -> regs [ R_PC ]		6516051	0					
ANR	6517330	PtrMemberAccess	s -> regs		6516051	0					
ANR	6517331	Identifier	s		6516051	0					
ANR	6517332	Identifier	regs		6516051	1					
ANR	6517333	Identifier	R_PC		6516051	1					
ANR	6517334	Argument	opcode_to_str [ op ]		6516051	2					
ANR	6517335	ArrayIndexing	opcode_to_str [ op ]		6516051	0					
ANR	6517336	Identifier	opcode_to_str		6516051	0					
ANR	6517337	Identifier	op		6516051	1					
ANR	6517338	Argument	reg_a		6516051	3					
ANR	6517339	Identifier	reg_a		6516051	0					
ANR	6517340	Argument	reg_b		6516051	4					
ANR	6517341	Identifier	reg_b		6516051	0					
ANR	6517342	Argument	latency		6516051	5					
ANR	6517343	Identifier	latency		6516051	0					
ANR	6517344	Argument	s -> regs [ R_PC ] + latency		6516051	6					
ANR	6517345	AdditiveExpression	s -> regs [ R_PC ] + latency		6516051	0		+			
ANR	6517346	ArrayIndexing	s -> regs [ R_PC ]		6516051	0					
ANR	6517347	PtrMemberAccess	s -> regs		6516051	0					
ANR	6517348	Identifier	s		6516051	0					
ANR	6517349	Identifier	regs		6516051	1					
ANR	6517350	Identifier	R_PC		6516051	1					
ANR	6517351	Identifier	latency		6516051	1					
ANR	6517352	ElseStatement	else		6516051	0					
ANR	6517353	CompoundStatement		307:11:5513:5513	6516051	0					
ANR	6517354	ExpressionStatement	"D_EXEC ( qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d> -> R%03d\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency , reg_d ) )"	311:8:5577:5775	6516051	0	True				
ANR	6517355	CallExpression	"D_EXEC ( qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d> -> R%03d\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency , reg_d ) )"		6516051	0					
ANR	6517356	Callee	D_EXEC		6516051	0					
ANR	6517357	Identifier	D_EXEC		6516051	0					
ANR	6517358	ArgumentList	"qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d> -> R%03d\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency , reg_d )"		6516051	1					
ANR	6517359	Argument	"qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d> -> R%03d\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency , reg_d )"		6516051	0					
ANR	6517360	CallExpression	"qemu_log ( ""%04d %8s R%03d, R%03d <L=%d, E=%04d> -> R%03d\\n"" , s -> regs [ R_PC ] , opcode_to_str [ op ] , reg_a , reg_b , latency , s -> regs [ R_PC ] + latency , reg_d )"		6516051	0					
ANR	6517361	Callee	qemu_log		6516051	0					
ANR	6517362	Identifier	qemu_log		6516051	0					
ANR	6517363	ArgumentList	"""%04d %8s R%03d, R%03d <L=%d, E=%04d> -> R%03d\\n"""		6516051	1					
ANR	6517364	Argument	"""%04d %8s R%03d, R%03d <L=%d, E=%04d> -> R%03d\\n"""		6516051	0					
ANR	6517365	PrimaryExpression	"""%04d %8s R%03d, R%03d <L=%d, E=%04d> -> R%03d\\n"""		6516051	0					
ANR	6517366	Argument	s -> regs [ R_PC ]		6516051	1					
ANR	6517367	ArrayIndexing	s -> regs [ R_PC ]		6516051	0					
ANR	6517368	PtrMemberAccess	s -> regs		6516051	0					
ANR	6517369	Identifier	s		6516051	0					
ANR	6517370	Identifier	regs		6516051	1					
ANR	6517371	Identifier	R_PC		6516051	1					
ANR	6517372	Argument	opcode_to_str [ op ]		6516051	2					
ANR	6517373	ArrayIndexing	opcode_to_str [ op ]		6516051	0					
ANR	6517374	Identifier	opcode_to_str		6516051	0					
ANR	6517375	Identifier	op		6516051	1					
ANR	6517376	Argument	reg_a		6516051	3					
ANR	6517377	Identifier	reg_a		6516051	0					
ANR	6517378	Argument	reg_b		6516051	4					
ANR	6517379	Identifier	reg_b		6516051	0					
ANR	6517380	Argument	latency		6516051	5					
ANR	6517381	Identifier	latency		6516051	0					
ANR	6517382	Argument	s -> regs [ R_PC ] + latency		6516051	6					
ANR	6517383	AdditiveExpression	s -> regs [ R_PC ] + latency		6516051	0		+			
ANR	6517384	ArrayIndexing	s -> regs [ R_PC ]		6516051	0					
ANR	6517385	PtrMemberAccess	s -> regs		6516051	0					
ANR	6517386	Identifier	s		6516051	0					
ANR	6517387	Identifier	regs		6516051	1					
ANR	6517388	Identifier	R_PC		6516051	1					
ANR	6517389	Identifier	latency		6516051	1					
ANR	6517390	Argument	reg_d		6516051	7					
ANR	6517391	Identifier	reg_d		6516051	0					
ANR	6517392	IfStatement	if ( op == OP_VECTOUT )		6516051	10					
ANR	6517393	Condition	op == OP_VECTOUT	321:8:5795:5810	6516051	0	True				
ANR	6517394	EqualityExpression	op == OP_VECTOUT		6516051	0		==			
ANR	6517395	Identifier	op		6516051	0					
ANR	6517396	Identifier	OP_VECTOUT		6516051	1					
ANR	6517397	CompoundStatement		319:26:5760:5760	6516051	1					
ANR	6517398	ReturnStatement	return 0 ;	323:8:5824:5832	6516051	0	True				
ANR	6517399	PrimaryExpression	0		6516051	0					
ANR	6517400	IfStatement	if ( reg_d )		6516051	11					
ANR	6517401	Condition	reg_d	331:8:5891:5895	6516051	0	True				
ANR	6517402	Identifier	reg_d		6516051	0					
ANR	6517403	CompoundStatement		331:8:5856:5893	6516051	1					
ANR	6517404	IdentifierDeclStatement	uint32_t val = output_queue_remove ( s ) ;	333:8:5909:5946	6516051	0	True				
ANR	6517405	IdentifierDecl	val = output_queue_remove ( s )		6516051	0					
ANR	6517406	IdentifierDeclType	uint32_t		6516051	0					
ANR	6517407	Identifier	val		6516051	1					
ANR	6517408	AssignmentExpression	val = output_queue_remove ( s )		6516051	2		=			
ANR	6517409	Identifier	val		6516051	0					
ANR	6517410	CallExpression	output_queue_remove ( s )		6516051	1					
ANR	6517411	Callee	output_queue_remove		6516051	0					
ANR	6517412	Identifier	output_queue_remove		6516051	0					
ANR	6517413	ArgumentList	s		6516051	1					
ANR	6517414	Argument	s		6516051	0					
ANR	6517415	Identifier	s		6516051	0					
ANR	6517416	ExpressionStatement	"D_EXEC ( qemu_log ( ""R%03d <- 0x%08x\\n"" , reg_d , val ) )"	335:8:5957:6006	6516051	1	True				
ANR	6517417	CallExpression	"D_EXEC ( qemu_log ( ""R%03d <- 0x%08x\\n"" , reg_d , val ) )"		6516051	0					
ANR	6517418	Callee	D_EXEC		6516051	0					
ANR	6517419	Identifier	D_EXEC		6516051	0					
ANR	6517420	ArgumentList	"qemu_log ( ""R%03d <- 0x%08x\\n"" , reg_d , val )"		6516051	1					
ANR	6517421	Argument	"qemu_log ( ""R%03d <- 0x%08x\\n"" , reg_d , val )"		6516051	0					
ANR	6517422	CallExpression	"qemu_log ( ""R%03d <- 0x%08x\\n"" , reg_d , val )"		6516051	0					
ANR	6517423	Callee	qemu_log		6516051	0					
ANR	6517424	Identifier	qemu_log		6516051	0					
ANR	6517425	ArgumentList	"""R%03d <- 0x%08x\\n"""		6516051	1					
ANR	6517426	Argument	"""R%03d <- 0x%08x\\n"""		6516051	0					
ANR	6517427	PrimaryExpression	"""R%03d <- 0x%08x\\n"""		6516051	0					
ANR	6517428	Argument	reg_d		6516051	1					
ANR	6517429	Identifier	reg_d		6516051	0					
ANR	6517430	Argument	val		6516051	2					
ANR	6517431	Identifier	val		6516051	0					
ANR	6517432	ExpressionStatement	s -> gp_regs [ reg_d ] = val	337:8:6017:6040	6516051	2	True				
ANR	6517433	AssignmentExpression	s -> gp_regs [ reg_d ] = val		6516051	0		=			
ANR	6517434	ArrayIndexing	s -> gp_regs [ reg_d ]		6516051	0					
ANR	6517435	PtrMemberAccess	s -> gp_regs		6516051	0					
ANR	6517436	Identifier	s		6516051	0					
ANR	6517437	Identifier	gp_regs		6516051	1					
ANR	6517438	Identifier	reg_d		6516051	1					
ANR	6517439	Identifier	val		6516051	1					
ANR	6517440	ExpressionStatement	output_queue_advance ( s )	343:4:6056:6079	6516051	12	True				
ANR	6517441	CallExpression	output_queue_advance ( s )		6516051	0					
ANR	6517442	Callee	output_queue_advance		6516051	0					
ANR	6517443	Identifier	output_queue_advance		6516051	0					
ANR	6517444	ArgumentList	s		6516051	1					
ANR	6517445	Argument	s		6516051	0					
ANR	6517446	Identifier	s		6516051	0					
ANR	6517447	IfStatement	if ( op != OP_NOP )		6516051	13					
ANR	6517448	Condition	op != OP_NOP	349:8:6119:6130	6516051	0	True				
ANR	6517449	EqualityExpression	op != OP_NOP		6516051	0		!=			
ANR	6517450	Identifier	op		6516051	0					
ANR	6517451	Identifier	OP_NOP		6516051	1					
ANR	6517452	CompoundStatement		347:22:6080:6080	6516051	1					
ANR	6517453	ExpressionStatement	"output_queue_insert ( s , r , latency - 1 )"	351:8:6144:6180	6516051	0	True				
ANR	6517454	CallExpression	"output_queue_insert ( s , r , latency - 1 )"		6516051	0					
ANR	6517455	Callee	output_queue_insert		6516051	0					
ANR	6517456	Identifier	output_queue_insert		6516051	0					
ANR	6517457	ArgumentList	s		6516051	1					
ANR	6517458	Argument	s		6516051	0					
ANR	6517459	Identifier	s		6516051	0					
ANR	6517460	Argument	r		6516051	1					
ANR	6517461	Identifier	r		6516051	0					
ANR	6517462	Argument	latency - 1		6516051	2					
ANR	6517463	AdditiveExpression	latency - 1		6516051	0		-			
ANR	6517464	Identifier	latency		6516051	0					
ANR	6517465	PrimaryExpression	1		6516051	1					
ANR	6517466	ExpressionStatement	s -> regs [ R_PC ] ++	359:4:6218:6233	6516051	14	True				
ANR	6517467	PostIncDecOperationExpression	s -> regs [ R_PC ] ++		6516051	0					
ANR	6517468	ArrayIndexing	s -> regs [ R_PC ]		6516051	0					
ANR	6517469	PtrMemberAccess	s -> regs		6516051	0					
ANR	6517470	Identifier	s		6516051	0					
ANR	6517471	Identifier	regs		6516051	1					
ANR	6517472	Identifier	R_PC		6516051	1					
ANR	6517473	IncDec	++		6516051	1					
ANR	6517474	ReturnStatement	return 1 ;	363:4:6242:6250	6516051	15	True				
ANR	6517475	PrimaryExpression	1		6516051	0					
ANR	6517476	ReturnType	static int		6516051	1					
ANR	6517477	Identifier	pfpu_decode_insn		6516051	2					
ANR	6517478	ParameterList	MilkymistPFPUState * s		6516051	3					
ANR	6517479	Parameter	MilkymistPFPUState * s	1:28:28:48	6516051	0	True				
ANR	6517480	ParameterType	MilkymistPFPUState *		6516051	0					
ANR	6517481	Identifier	s		6516051	1					
ANR	6517482	CFGEntryNode	ENTRY		6516051		True				
ANR	6517483	CFGExitNode	EXIT		6516051		True				
ANR	6517484	Symbol	LATENCY_F2I		6516051						
ANR	6517485	Symbol	cpu_to_be32		6516051						
ANR	6517486	Symbol	reg_b		6516051						
ANR	6517487	Symbol	reg_a		6516051						
ANR	6517488	Symbol	GPR_FLAGS		6516051						
ANR	6517489	Symbol	* op		6516051						
ANR	6517490	Symbol	get_dma_address		6516051						
ANR	6517491	Symbol	reg_d		6516051						
ANR	6517492	Symbol	float		6516051						
ANR	6517493	Symbol	LATENCY_IF		6516051						
ANR	6517494	Symbol	output_queue_remove		6516051						
ANR	6517495	Symbol	M_PI		6516051						
ANR	6517496	Symbol	cosf		6516051						
ANR	6517497	Symbol	qemu_log		6516051						
ANR	6517498	Symbol	int32_t		6516051						
ANR	6517499	Symbol	* s -> regs		6516051						
ANR	6517500	Symbol	val		6516051						
ANR	6517501	Symbol	* R_PC		6516051						
ANR	6517502	Symbol	LATENCY_ABOVE		6516051						
ANR	6517503	Symbol	R_PC		6516051						
ANR	6517504	Symbol	s -> microcode		6516051						
ANR	6517505	Symbol	LATENCY_FSUB		6516051						
ANR	6517506	Symbol	GPR_X		6516051						
ANR	6517507	Symbol	GPR_Y		6516051						
ANR	6517508	Symbol	LATENCY_FMUL		6516051						
ANR	6517509	Symbol	* R_LASTDMA		6516051						
ANR	6517510	Symbol	OP_NOP		6516051						
ANR	6517511	Symbol	* pc		6516051						
ANR	6517512	Symbol	sinf		6516051						
ANR	6517513	Symbol	LATENCY_COS		6516051						
ANR	6517514	Symbol	* s -> microcode		6516051						
ANR	6517515	Symbol	LATENCY_I2F		6516051						
ANR	6517516	Symbol	* GPR_X		6516051						
ANR	6517517	Symbol	* GPR_Y		6516051						
ANR	6517518	Symbol	LATENCY_COPY		6516051						
ANR	6517519	Symbol	latency		6516051						
ANR	6517520	Symbol	LATENCY_EQUAL		6516051						
ANR	6517521	Symbol	LATENCY_FADD		6516051						
ANR	6517522	Symbol	* opcode_to_str		6516051						
ANR	6517523	Symbol	fabsf		6516051						
ANR	6517524	Symbol	dma_ptr		6516051						
ANR	6517525	Symbol	* reg_d		6516051						
ANR	6517526	Symbol	* reg_a		6516051						
ANR	6517527	Symbol	* reg_b		6516051						
ANR	6517528	Symbol	* * s		6516051						
ANR	6517529	Symbol	* GPR_FLAGS		6516051						
ANR	6517530	Symbol	R_MESHBASE		6516051						
ANR	6517531	Symbol	s -> regs		6516051						
ANR	6517532	Symbol	op		6516051						
ANR	6517533	Symbol	a		6516051						
ANR	6517534	Symbol	b		6516051						
ANR	6517535	Symbol	s -> gp_regs		6516051						
ANR	6517536	Symbol	* R_MESHBASE		6516051						
ANR	6517537	Symbol	f		6516051						
ANR	6517538	Symbol	& a		6516051						
ANR	6517539	Symbol	& b		6516051						
ANR	6517540	Symbol	uint32_t		6516051						
ANR	6517541	Symbol	LATENCY_SIN		6516051						
ANR	6517542	Symbol	R_LASTDMA		6516051						
ANR	6517543	Symbol	* s -> gp_regs		6516051						
ANR	6517544	Symbol	opcode_to_str		6516051						
ANR	6517545	Symbol	insn		6516051						
ANR	6517546	Symbol	r		6516051						
ANR	6517547	Symbol	s		6516051						
ANR	6517548	Symbol	pc		6516051						
ANR	6517549	Symbol	t		6516051						
ANR	6517550	Symbol	LATENCY_QUAKE		6516051						
ANR	6517551	Symbol	REINTERPRET_CAST		6516051						
ANR	6517552	Symbol	OP_VECTOUT		6516051						
ANR	6517553	Symbol	LATENCY_FABS		6516051						
ANR	6517554	Symbol	* s		6516051						
ANR	6517555	Symbol	LATENCY_TSIGN		6516051						
