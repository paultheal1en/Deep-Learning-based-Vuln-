command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	7001069	File	/home/p4ultr4n/workplace/ReVeal/raw_code/qemu_next_deadline_dyntick_0.c								
ANR	7001070	Function	qemu_next_deadline_dyntick	1:0:0:543							
ANR	7001071	FunctionDef	qemu_next_deadline_dyntick ()		7001070	0					
ANR	7001072	CompoundStatement		3:0:50:543	7001070	0					
ANR	7001073	IdentifierDeclStatement	int64_t delta ;	5:4:57:70	7001070	0	True				
ANR	7001074	IdentifierDecl	delta		7001070	0					
ANR	7001075	IdentifierDeclType	int64_t		7001070	0					
ANR	7001076	Identifier	delta		7001070	1					
ANR	7001077	IdentifierDeclStatement	int64_t rtdelta ;	7:4:77:92	7001070	1	True				
ANR	7001078	IdentifierDecl	rtdelta		7001070	0					
ANR	7001079	IdentifierDeclType	int64_t		7001070	0					
ANR	7001080	Identifier	rtdelta		7001070	1					
ANR	7001081	IfStatement	if ( use_icount )		7001070	2					
ANR	7001082	Condition	use_icount	11:8:105:114	7001070	0	True				
ANR	7001083	Identifier	use_icount		7001070	0					
ANR	7001084	ExpressionStatement	delta = INT32_MAX	13:8:126:143	7001070	1	True				
ANR	7001085	AssignmentExpression	delta = INT32_MAX		7001070	0		=			
ANR	7001086	Identifier	delta		7001070	0					
ANR	7001087	Identifier	INT32_MAX		7001070	1					
ANR	7001088	ElseStatement	else		7001070	0					
ANR	7001089	ExpressionStatement	delta = ( qemu_next_deadline ( ) + 999 ) / 1000	17:8:164:207	7001070	0	True				
ANR	7001090	AssignmentExpression	delta = ( qemu_next_deadline ( ) + 999 ) / 1000		7001070	0		=			
ANR	7001091	Identifier	delta		7001070	0					
ANR	7001092	MultiplicativeExpression	( qemu_next_deadline ( ) + 999 ) / 1000		7001070	1		/			
ANR	7001093	AdditiveExpression	qemu_next_deadline ( ) + 999		7001070	0		+			
ANR	7001094	CallExpression	qemu_next_deadline ( )		7001070	0					
ANR	7001095	Callee	qemu_next_deadline		7001070	0					
ANR	7001096	Identifier	qemu_next_deadline		7001070	0					
ANR	7001097	ArgumentList			7001070	1					
ANR	7001098	PrimaryExpression	999		7001070	1					
ANR	7001099	PrimaryExpression	1000		7001070	1					
ANR	7001100	IfStatement	if ( active_timers [ QEMU_TIMER_REALTIME ] )		7001070	3					
ANR	7001101	Condition	active_timers [ QEMU_TIMER_REALTIME ]	21:8:220:253	7001070	0	True				
ANR	7001102	ArrayIndexing	active_timers [ QEMU_TIMER_REALTIME ]		7001070	0					
ANR	7001103	Identifier	active_timers		7001070	0					
ANR	7001104	Identifier	QEMU_TIMER_REALTIME		7001070	1					
ANR	7001105	CompoundStatement		19:44:205:205	7001070	1					
ANR	7001106	ExpressionStatement	rtdelta = ( active_timers [ QEMU_TIMER_REALTIME ] -> expire_time - qemu_get_clock ( rt_clock ) ) * 1000	23:8:267:376	7001070	0	True				
ANR	7001107	AssignmentExpression	rtdelta = ( active_timers [ QEMU_TIMER_REALTIME ] -> expire_time - qemu_get_clock ( rt_clock ) ) * 1000		7001070	0		=			
ANR	7001108	Identifier	rtdelta		7001070	0					
ANR	7001109	MultiplicativeExpression	( active_timers [ QEMU_TIMER_REALTIME ] -> expire_time - qemu_get_clock ( rt_clock ) ) * 1000		7001070	1		*			
ANR	7001110	AdditiveExpression	active_timers [ QEMU_TIMER_REALTIME ] -> expire_time - qemu_get_clock ( rt_clock )		7001070	0		-			
ANR	7001111	PtrMemberAccess	active_timers [ QEMU_TIMER_REALTIME ] -> expire_time		7001070	0					
ANR	7001112	ArrayIndexing	active_timers [ QEMU_TIMER_REALTIME ]		7001070	0					
ANR	7001113	Identifier	active_timers		7001070	0					
ANR	7001114	Identifier	QEMU_TIMER_REALTIME		7001070	1					
ANR	7001115	Identifier	expire_time		7001070	1					
ANR	7001116	CallExpression	qemu_get_clock ( rt_clock )		7001070	1					
ANR	7001117	Callee	qemu_get_clock		7001070	0					
ANR	7001118	Identifier	qemu_get_clock		7001070	0					
ANR	7001119	ArgumentList	rt_clock		7001070	1					
ANR	7001120	Argument	rt_clock		7001070	0					
ANR	7001121	Identifier	rt_clock		7001070	0					
ANR	7001122	PrimaryExpression	1000		7001070	1					
ANR	7001123	IfStatement	if ( rtdelta < delta )		7001070	1					
ANR	7001124	Condition	rtdelta < delta	27:12:391:405	7001070	0	True				
ANR	7001125	RelationalExpression	rtdelta < delta		7001070	0		<			
ANR	7001126	Identifier	rtdelta		7001070	0					
ANR	7001127	Identifier	delta		7001070	1					
ANR	7001128	ExpressionStatement	delta = rtdelta	29:12:421:436	7001070	1	True				
ANR	7001129	AssignmentExpression	delta = rtdelta		7001070	0		=			
ANR	7001130	Identifier	delta		7001070	0					
ANR	7001131	Identifier	rtdelta		7001070	1					
ANR	7001132	IfStatement	if ( delta < MIN_TIMER_REARM_US )		7001070	4					
ANR	7001133	Condition	delta < MIN_TIMER_REARM_US	35:8:456:481	7001070	0	True				
ANR	7001134	RelationalExpression	delta < MIN_TIMER_REARM_US		7001070	0		<			
ANR	7001135	Identifier	delta		7001070	0					
ANR	7001136	Identifier	MIN_TIMER_REARM_US		7001070	1					
ANR	7001137	ExpressionStatement	delta = MIN_TIMER_REARM_US	37:8:493:519	7001070	1	True				
ANR	7001138	AssignmentExpression	delta = MIN_TIMER_REARM_US		7001070	0		=			
ANR	7001139	Identifier	delta		7001070	0					
ANR	7001140	Identifier	MIN_TIMER_REARM_US		7001070	1					
ANR	7001141	ReturnStatement	return delta ;	41:4:528:540	7001070	5	True				
ANR	7001142	Identifier	delta		7001070	0					
ANR	7001143	ReturnType	static uint64_t		7001070	1					
ANR	7001144	Identifier	qemu_next_deadline_dyntick		7001070	2					
ANR	7001145	ParameterList			7001070	3					
ANR	7001146	CFGEntryNode	ENTRY		7001070		True				
ANR	7001147	CFGExitNode	EXIT		7001070		True				
ANR	7001148	Symbol	* active_timers		7001070						
ANR	7001149	Symbol	qemu_next_deadline		7001070						
ANR	7001150	Symbol	* QEMU_TIMER_REALTIME		7001070						
ANR	7001151	Symbol	delta		7001070						
ANR	7001152	Symbol	MIN_TIMER_REARM_US		7001070						
ANR	7001153	Symbol	rt_clock		7001070						
ANR	7001154	Symbol	INT32_MAX		7001070						
ANR	7001155	Symbol	active_timers		7001070						
ANR	7001156	Symbol	* * QEMU_TIMER_REALTIME		7001070						
ANR	7001157	Symbol	* * active_timers		7001070						
ANR	7001158	Symbol	qemu_get_clock		7001070						
ANR	7001159	Symbol	QEMU_TIMER_REALTIME		7001070						
ANR	7001160	Symbol	use_icount		7001070						
ANR	7001161	Symbol	rtdelta		7001070						
ANR	7001162	Symbol	active_timers [ QEMU_TIMER_REALTIME ] -> expire_time		7001070						
