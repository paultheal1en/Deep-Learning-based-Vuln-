command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4813260	File	/home/p4ultr4n/workplace/ReVeal/raw_code/if_start_02_0.c								
ANR	4813261	Function	if_start	1:0:0:2538							
ANR	4813262	FunctionDef	if_start (Slirp * slirp)		4813261	0					
ANR	4813263	CompoundStatement		3:0:29:2538	4813261	0					
ANR	4813264	IdentifierDeclStatement	uint64_t now = qemu_clock_get_ns ( QEMU_CLOCK_REALTIME ) ;	5:4:36:89	4813261	0	True				
ANR	4813265	IdentifierDecl	now = qemu_clock_get_ns ( QEMU_CLOCK_REALTIME )		4813261	0					
ANR	4813266	IdentifierDeclType	uint64_t		4813261	0					
ANR	4813267	Identifier	now		4813261	1					
ANR	4813268	AssignmentExpression	now = qemu_clock_get_ns ( QEMU_CLOCK_REALTIME )		4813261	2		=			
ANR	4813269	Identifier	now		4813261	0					
ANR	4813270	CallExpression	qemu_clock_get_ns ( QEMU_CLOCK_REALTIME )		4813261	1					
ANR	4813271	Callee	qemu_clock_get_ns		4813261	0					
ANR	4813272	Identifier	qemu_clock_get_ns		4813261	0					
ANR	4813273	ArgumentList	QEMU_CLOCK_REALTIME		4813261	1					
ANR	4813274	Argument	QEMU_CLOCK_REALTIME		4813261	0					
ANR	4813275	Identifier	QEMU_CLOCK_REALTIME		4813261	0					
ANR	4813276	IdentifierDeclStatement	"bool from_batchq , next_from_batchq ;"	7:4:96:130	4813261	1	True				
ANR	4813277	IdentifierDecl	from_batchq		4813261	0					
ANR	4813278	IdentifierDeclType	bool		4813261	0					
ANR	4813279	Identifier	from_batchq		4813261	1					
ANR	4813280	IdentifierDecl	next_from_batchq		4813261	1					
ANR	4813281	IdentifierDeclType	bool		4813261	0					
ANR	4813282	Identifier	next_from_batchq		4813261	1					
ANR	4813283	IdentifierDeclStatement	"struct mbuf * ifm , * ifm_next , * ifqt ;"	9:4:137:171	4813261	2	True				
ANR	4813284	IdentifierDecl	* ifm		4813261	0					
ANR	4813285	IdentifierDeclType	struct mbuf *		4813261	0					
ANR	4813286	Identifier	ifm		4813261	1					
ANR	4813287	IdentifierDecl	* ifm_next		4813261	1					
ANR	4813288	IdentifierDeclType	struct mbuf *		4813261	0					
ANR	4813289	Identifier	ifm_next		4813261	1					
ANR	4813290	IdentifierDecl	* ifqt		4813261	2					
ANR	4813291	IdentifierDeclType	struct mbuf *		4813261	0					
ANR	4813292	Identifier	ifqt		4813261	1					
ANR	4813293	ExpressionStatement	"DEBUG_CALL ( ""if_start"" )"	13:4:180:202	4813261	3	True				
ANR	4813294	CallExpression	"DEBUG_CALL ( ""if_start"" )"		4813261	0					
ANR	4813295	Callee	DEBUG_CALL		4813261	0					
ANR	4813296	Identifier	DEBUG_CALL		4813261	0					
ANR	4813297	ArgumentList	"""if_start"""		4813261	1					
ANR	4813298	Argument	"""if_start"""		4813261	0					
ANR	4813299	PrimaryExpression	"""if_start"""		4813261	0					
ANR	4813300	IfStatement	if ( slirp -> if_start_busy )		4813261	4					
ANR	4813301	Condition	slirp -> if_start_busy	17:8:215:234	4813261	0	True				
ANR	4813302	PtrMemberAccess	slirp -> if_start_busy		4813261	0					
ANR	4813303	Identifier	slirp		4813261	0					
ANR	4813304	Identifier	if_start_busy		4813261	1					
ANR	4813305	CompoundStatement		15:30:207:207	4813261	1					
ANR	4813306	ReturnStatement	return ;	19:8:248:254	4813261	0	True				
ANR	4813307	ExpressionStatement	slirp -> if_start_busy = true	23:4:268:295	4813261	5	True				
ANR	4813308	AssignmentExpression	slirp -> if_start_busy = true		4813261	0		=			
ANR	4813309	PtrMemberAccess	slirp -> if_start_busy		4813261	0					
ANR	4813310	Identifier	slirp		4813261	0					
ANR	4813311	Identifier	if_start_busy		4813261	1					
ANR	4813312	Identifier	true		4813261	1					
ANR	4813313	IfStatement	if ( slirp -> if_fastq . ifq_next != & slirp -> if_fastq )		4813261	6					
ANR	4813314	Condition	slirp -> if_fastq . ifq_next != & slirp -> if_fastq	27:8:308:351	4813261	0	True				
ANR	4813315	EqualityExpression	slirp -> if_fastq . ifq_next != & slirp -> if_fastq		4813261	0		!=			
ANR	4813316	MemberAccess	slirp -> if_fastq . ifq_next		4813261	0					
ANR	4813317	PtrMemberAccess	slirp -> if_fastq		4813261	0					
ANR	4813318	Identifier	slirp		4813261	0					
ANR	4813319	Identifier	if_fastq		4813261	1					
ANR	4813320	Identifier	ifq_next		4813261	1					
ANR	4813321	UnaryOperationExpression	& slirp -> if_fastq		4813261	1					
ANR	4813322	UnaryOperator	&		4813261	0					
ANR	4813323	PtrMemberAccess	slirp -> if_fastq		4813261	1					
ANR	4813324	Identifier	slirp		4813261	0					
ANR	4813325	Identifier	if_fastq		4813261	1					
ANR	4813326	CompoundStatement		25:54:324:324	4813261	1					
ANR	4813327	ExpressionStatement	ifm_next = slirp -> if_fastq . ifq_next	29:8:365:400	4813261	0	True				
ANR	4813328	AssignmentExpression	ifm_next = slirp -> if_fastq . ifq_next		4813261	0		=			
ANR	4813329	Identifier	ifm_next		4813261	0					
ANR	4813330	MemberAccess	slirp -> if_fastq . ifq_next		4813261	1					
ANR	4813331	PtrMemberAccess	slirp -> if_fastq		4813261	0					
ANR	4813332	Identifier	slirp		4813261	0					
ANR	4813333	Identifier	if_fastq		4813261	1					
ANR	4813334	Identifier	ifq_next		4813261	1					
ANR	4813335	ExpressionStatement	next_from_batchq = false	31:8:411:435	4813261	1	True				
ANR	4813336	AssignmentExpression	next_from_batchq = false		4813261	0		=			
ANR	4813337	Identifier	next_from_batchq		4813261	0					
ANR	4813338	Identifier	false		4813261	1					
ANR	4813339	ElseStatement	else		4813261	0					
ANR	4813340	IfStatement	if ( slirp -> next_m != & slirp -> if_batchq )		4813261	0					
ANR	4813341	Condition	slirp -> next_m != & slirp -> if_batchq	33:15:453:486	4813261	0	True				
ANR	4813342	EqualityExpression	slirp -> next_m != & slirp -> if_batchq		4813261	0		!=			
ANR	4813343	PtrMemberAccess	slirp -> next_m		4813261	0					
ANR	4813344	Identifier	slirp		4813261	0					
ANR	4813345	Identifier	next_m		4813261	1					
ANR	4813346	UnaryOperationExpression	& slirp -> if_batchq		4813261	1					
ANR	4813347	UnaryOperator	&		4813261	0					
ANR	4813348	PtrMemberAccess	slirp -> if_batchq		4813261	1					
ANR	4813349	Identifier	slirp		4813261	0					
ANR	4813350	Identifier	if_batchq		4813261	1					
ANR	4813351	CompoundStatement		31:51:459:459	4813261	1					
ANR	4813352	ExpressionStatement	ifm_next = slirp -> next_m	37:8:564:588	4813261	0	True				
ANR	4813353	AssignmentExpression	ifm_next = slirp -> next_m		4813261	0		=			
ANR	4813354	Identifier	ifm_next		4813261	0					
ANR	4813355	PtrMemberAccess	slirp -> next_m		4813261	1					
ANR	4813356	Identifier	slirp		4813261	0					
ANR	4813357	Identifier	next_m		4813261	1					
ANR	4813358	ExpressionStatement	next_from_batchq = true	39:8:599:622	4813261	1	True				
ANR	4813359	AssignmentExpression	next_from_batchq = true		4813261	0		=			
ANR	4813360	Identifier	next_from_batchq		4813261	0					
ANR	4813361	Identifier	true		4813261	1					
ANR	4813362	ElseStatement	else		4813261	0					
ANR	4813363	CompoundStatement		39:11:606:606	4813261	0					
ANR	4813364	ExpressionStatement	ifm_next = NULL	43:8:647:662	4813261	0	True				
ANR	4813365	AssignmentExpression	ifm_next = NULL		4813261	0		=			
ANR	4813366	Identifier	ifm_next		4813261	0					
ANR	4813367	Identifier	NULL		4813261	1					
ANR	4813368	WhileStatement	while ( ifm_next )		4813261	7					
ANR	4813369	Condition	ifm_next	49:11:685:692	4813261	0	True				
ANR	4813370	Identifier	ifm_next		4813261	0					
ANR	4813371	CompoundStatement		47:21:665:665	4813261	1					
ANR	4813372	ExpressionStatement	ifm = ifm_next	51:8:706:720	4813261	0	True				
ANR	4813373	AssignmentExpression	ifm = ifm_next		4813261	0		=			
ANR	4813374	Identifier	ifm		4813261	0					
ANR	4813375	Identifier	ifm_next		4813261	1					
ANR	4813376	ExpressionStatement	from_batchq = next_from_batchq	53:8:731:761	4813261	1	True				
ANR	4813377	AssignmentExpression	from_batchq = next_from_batchq		4813261	0		=			
ANR	4813378	Identifier	from_batchq		4813261	0					
ANR	4813379	Identifier	next_from_batchq		4813261	1					
ANR	4813380	ExpressionStatement	ifm_next = ifm -> ifq_next	57:8:774:798	4813261	2	True				
ANR	4813381	AssignmentExpression	ifm_next = ifm -> ifq_next		4813261	0		=			
ANR	4813382	Identifier	ifm_next		4813261	0					
ANR	4813383	PtrMemberAccess	ifm -> ifq_next		4813261	1					
ANR	4813384	Identifier	ifm		4813261	0					
ANR	4813385	Identifier	ifq_next		4813261	1					
ANR	4813386	IfStatement	if ( ifm_next == & slirp -> if_fastq )		4813261	3					
ANR	4813387	Condition	ifm_next == & slirp -> if_fastq	59:12:813:840	4813261	0	True				
ANR	4813388	EqualityExpression	ifm_next == & slirp -> if_fastq		4813261	0		==			
ANR	4813389	Identifier	ifm_next		4813261	0					
ANR	4813390	UnaryOperationExpression	& slirp -> if_fastq		4813261	1					
ANR	4813391	UnaryOperator	&		4813261	0					
ANR	4813392	PtrMemberAccess	slirp -> if_fastq		4813261	1					
ANR	4813393	Identifier	slirp		4813261	0					
ANR	4813394	Identifier	if_fastq		4813261	1					
ANR	4813395	CompoundStatement		57:42:813:813	4813261	1					
ANR	4813396	ExpressionStatement	ifm_next = slirp -> next_m	63:12:920:944	4813261	0	True				
ANR	4813397	AssignmentExpression	ifm_next = slirp -> next_m		4813261	0		=			
ANR	4813398	Identifier	ifm_next		4813261	0					
ANR	4813399	PtrMemberAccess	slirp -> next_m		4813261	1					
ANR	4813400	Identifier	slirp		4813261	0					
ANR	4813401	Identifier	next_m		4813261	1					
ANR	4813402	ExpressionStatement	next_from_batchq = true	65:12:959:982	4813261	1	True				
ANR	4813403	AssignmentExpression	next_from_batchq = true		4813261	0		=			
ANR	4813404	Identifier	next_from_batchq		4813261	0					
ANR	4813405	Identifier	true		4813261	1					
ANR	4813406	IfStatement	if ( ifm_next == & slirp -> if_batchq )		4813261	4					
ANR	4813407	Condition	ifm_next == & slirp -> if_batchq	69:12:1008:1036	4813261	0	True				
ANR	4813408	EqualityExpression	ifm_next == & slirp -> if_batchq		4813261	0		==			
ANR	4813409	Identifier	ifm_next		4813261	0					
ANR	4813410	UnaryOperationExpression	& slirp -> if_batchq		4813261	1					
ANR	4813411	UnaryOperator	&		4813261	0					
ANR	4813412	PtrMemberAccess	slirp -> if_batchq		4813261	1					
ANR	4813413	Identifier	slirp		4813261	0					
ANR	4813414	Identifier	if_batchq		4813261	1					
ANR	4813415	CompoundStatement		67:43:1009:1009	4813261	1					
ANR	4813416	ExpressionStatement	ifm_next = NULL	73:12:1087:1102	4813261	0	True				
ANR	4813417	AssignmentExpression	ifm_next = NULL		4813261	0		=			
ANR	4813418	Identifier	ifm_next		4813261	0					
ANR	4813419	Identifier	NULL		4813261	1					
ANR	4813420	IfStatement	"if ( ifm -> expiration_date >= now && ! if_encap ( slirp , ifm ) )"		4813261	5					
ANR	4813421	Condition	"ifm -> expiration_date >= now && ! if_encap ( slirp , ifm )"	81:12:1190:1241	4813261	0	True				
ANR	4813422	AndExpression	"ifm -> expiration_date >= now && ! if_encap ( slirp , ifm )"		4813261	0		&&			
ANR	4813423	RelationalExpression	ifm -> expiration_date >= now		4813261	0		>=			
ANR	4813424	PtrMemberAccess	ifm -> expiration_date		4813261	0					
ANR	4813425	Identifier	ifm		4813261	0					
ANR	4813426	Identifier	expiration_date		4813261	1					
ANR	4813427	Identifier	now		4813261	1					
ANR	4813428	UnaryOperationExpression	"! if_encap ( slirp , ifm )"		4813261	1					
ANR	4813429	UnaryOperator	!		4813261	0					
ANR	4813430	CallExpression	"if_encap ( slirp , ifm )"		4813261	1					
ANR	4813431	Callee	if_encap		4813261	0					
ANR	4813432	Identifier	if_encap		4813261	0					
ANR	4813433	ArgumentList	slirp		4813261	1					
ANR	4813434	Argument	slirp		4813261	0					
ANR	4813435	Identifier	slirp		4813261	0					
ANR	4813436	Argument	ifm		4813261	1					
ANR	4813437	Identifier	ifm		4813261	0					
ANR	4813438	CompoundStatement		79:66:1214:1214	4813261	1					
ANR	4813439	ContinueStatement	continue ;	85:12:1326:1334	4813261	0	True				
ANR	4813440	IfStatement	if ( ifm == slirp -> next_m )		4813261	6					
ANR	4813441	Condition	ifm == slirp -> next_m	91:12:1362:1381	4813261	0	True				
ANR	4813442	EqualityExpression	ifm == slirp -> next_m		4813261	0		==			
ANR	4813443	Identifier	ifm		4813261	0					
ANR	4813444	PtrMemberAccess	slirp -> next_m		4813261	1					
ANR	4813445	Identifier	slirp		4813261	0					
ANR	4813446	Identifier	next_m		4813261	1					
ANR	4813447	CompoundStatement		89:34:1354:1354	4813261	1					
ANR	4813448	ExpressionStatement	slirp -> next_m = ifm -> ifq_next	95:12:1461:1490	4813261	0	True				
ANR	4813449	AssignmentExpression	slirp -> next_m = ifm -> ifq_next		4813261	0		=			
ANR	4813450	PtrMemberAccess	slirp -> next_m		4813261	0					
ANR	4813451	Identifier	slirp		4813261	0					
ANR	4813452	Identifier	next_m		4813261	1					
ANR	4813453	PtrMemberAccess	ifm -> ifq_next		4813261	1					
ANR	4813454	Identifier	ifm		4813261	0					
ANR	4813455	Identifier	ifq_next		4813261	1					
ANR	4813456	ExpressionStatement	ifqt = ifm -> ifq_prev	103:8:1554:1574	4813261	7	True				
ANR	4813457	AssignmentExpression	ifqt = ifm -> ifq_prev		4813261	0		=			
ANR	4813458	Identifier	ifqt		4813261	0					
ANR	4813459	PtrMemberAccess	ifm -> ifq_prev		4813261	1					
ANR	4813460	Identifier	ifm		4813261	0					
ANR	4813461	Identifier	ifq_prev		4813261	1					
ANR	4813462	ExpressionStatement	remque ( ifm )	105:8:1585:1596	4813261	8	True				
ANR	4813463	CallExpression	remque ( ifm )		4813261	0					
ANR	4813464	Callee	remque		4813261	0					
ANR	4813465	Identifier	remque		4813261	0					
ANR	4813466	ArgumentList	ifm		4813261	1					
ANR	4813467	Argument	ifm		4813261	0					
ANR	4813468	Identifier	ifm		4813261	0					
ANR	4813469	IfStatement	if ( ifm -> ifs_next != ifm )		4813261	9					
ANR	4813470	Condition	ifm -> ifs_next != ifm	111:12:1686:1705	4813261	0	True				
ANR	4813471	EqualityExpression	ifm -> ifs_next != ifm		4813261	0		!=			
ANR	4813472	PtrMemberAccess	ifm -> ifs_next		4813261	0					
ANR	4813473	Identifier	ifm		4813261	0					
ANR	4813474	Identifier	ifs_next		4813261	1					
ANR	4813475	Identifier	ifm		4813261	1					
ANR	4813476	CompoundStatement		111:12:1693:1726	4813261	1					
ANR	4813477	IdentifierDeclStatement	struct mbuf * next = ifm -> ifs_next ;	113:12:1723:1756	4813261	0	True				
ANR	4813478	IdentifierDecl	* next = ifm -> ifs_next		4813261	0					
ANR	4813479	IdentifierDeclType	struct mbuf *		4813261	0					
ANR	4813480	Identifier	next		4813261	1					
ANR	4813481	AssignmentExpression	* next = ifm -> ifs_next		4813261	2		=			
ANR	4813482	Identifier	next		4813261	0					
ANR	4813483	PtrMemberAccess	ifm -> ifs_next		4813261	1					
ANR	4813484	Identifier	ifm		4813261	0					
ANR	4813485	Identifier	ifs_next		4813261	1					
ANR	4813486	ExpressionStatement	"insque ( next , ifqt )"	117:12:1773:1791	4813261	1	True				
ANR	4813487	CallExpression	"insque ( next , ifqt )"		4813261	0					
ANR	4813488	Callee	insque		4813261	0					
ANR	4813489	Identifier	insque		4813261	0					
ANR	4813490	ArgumentList	next		4813261	1					
ANR	4813491	Argument	next		4813261	0					
ANR	4813492	Identifier	next		4813261	0					
ANR	4813493	Argument	ifqt		4813261	1					
ANR	4813494	Identifier	ifqt		4813261	0					
ANR	4813495	ExpressionStatement	ifs_remque ( ifm )	119:12:1806:1821	4813261	2	True				
ANR	4813496	CallExpression	ifs_remque ( ifm )		4813261	0					
ANR	4813497	Callee	ifs_remque		4813261	0					
ANR	4813498	Identifier	ifs_remque		4813261	0					
ANR	4813499	ArgumentList	ifm		4813261	1					
ANR	4813500	Argument	ifm		4813261	0					
ANR	4813501	Identifier	ifm		4813261	0					
ANR	4813502	IfStatement	if ( ! from_batchq )		4813261	3					
ANR	4813503	Condition	! from_batchq	123:16:1842:1853	4813261	0	True				
ANR	4813504	UnaryOperationExpression	! from_batchq		4813261	0					
ANR	4813505	UnaryOperator	!		4813261	0					
ANR	4813506	Identifier	from_batchq		4813261	1					
ANR	4813507	CompoundStatement		121:30:1826:1826	4813261	1					
ANR	4813508	ExpressionStatement	ifm_next = next	127:16:1944:1959	4813261	0	True				
ANR	4813509	AssignmentExpression	ifm_next = next		4813261	0		=			
ANR	4813510	Identifier	ifm_next		4813261	0					
ANR	4813511	Identifier	next		4813261	1					
ANR	4813512	ExpressionStatement	next_from_batchq = false	129:16:1978:2002	4813261	1	True				
ANR	4813513	AssignmentExpression	next_from_batchq = false		4813261	0		=			
ANR	4813514	Identifier	next_from_batchq		4813261	0					
ANR	4813515	Identifier	false		4813261	1					
ANR	4813516	ElseStatement	else		4813261	0					
ANR	4813517	IfStatement	if ( slirp -> next_m == & slirp -> if_batchq )		4813261	0					
ANR	4813518	Condition	slirp -> next_m == & slirp -> if_batchq	131:23:2028:2061	4813261	0	True				
ANR	4813519	EqualityExpression	slirp -> next_m == & slirp -> if_batchq		4813261	0		==			
ANR	4813520	PtrMemberAccess	slirp -> next_m		4813261	0					
ANR	4813521	Identifier	slirp		4813261	0					
ANR	4813522	Identifier	next_m		4813261	1					
ANR	4813523	UnaryOperationExpression	& slirp -> if_batchq		4813261	1					
ANR	4813524	UnaryOperator	&		4813261	0					
ANR	4813525	PtrMemberAccess	slirp -> if_batchq		4813261	1					
ANR	4813526	Identifier	slirp		4813261	0					
ANR	4813527	Identifier	if_batchq		4813261	1					
ANR	4813528	CompoundStatement		129:59:2034:2034	4813261	1					
ANR	4813529	ExpressionStatement	slirp -> next_m = ifm_next = next	137:16:2202:2233	4813261	0	True				
ANR	4813530	AssignmentExpression	slirp -> next_m = ifm_next = next		4813261	0		=			
ANR	4813531	PtrMemberAccess	slirp -> next_m		4813261	0					
ANR	4813532	Identifier	slirp		4813261	0					
ANR	4813533	Identifier	next_m		4813261	1					
ANR	4813534	AssignmentExpression	ifm_next = next		4813261	1		=			
ANR	4813535	Identifier	ifm_next		4813261	0					
ANR	4813536	Identifier	next		4813261	1					
ANR	4813537	IfStatement	if ( ifm -> ifq_so && -- ifm -> ifq_so -> so_queued == 0 )		4813261	10					
ANR	4813538	Condition	ifm -> ifq_so && -- ifm -> ifq_so -> so_queued == 0	147:12:2308:2351	4813261	0	True				
ANR	4813539	AndExpression	ifm -> ifq_so && -- ifm -> ifq_so -> so_queued == 0		4813261	0		&&			
ANR	4813540	PtrMemberAccess	ifm -> ifq_so		4813261	0					
ANR	4813541	Identifier	ifm		4813261	0					
ANR	4813542	Identifier	ifq_so		4813261	1					
ANR	4813543	EqualityExpression	-- ifm -> ifq_so -> so_queued == 0		4813261	1		==			
ANR	4813544	UnaryExpression	-- ifm -> ifq_so -> so_queued		4813261	0					
ANR	4813545	IncDec	--		4813261	0					
ANR	4813546	PtrMemberAccess	ifm -> ifq_so -> so_queued		4813261	1					
ANR	4813547	PtrMemberAccess	ifm -> ifq_so		4813261	0					
ANR	4813548	Identifier	ifm		4813261	0					
ANR	4813549	Identifier	ifq_so		4813261	1					
ANR	4813550	Identifier	so_queued		4813261	1					
ANR	4813551	PrimaryExpression	0		4813261	1					
ANR	4813552	CompoundStatement		145:58:2324:2324	4813261	1					
ANR	4813553	ExpressionStatement	ifm -> ifq_so -> so_nqueued = 0	151:12:2429:2456	4813261	0	True				
ANR	4813554	AssignmentExpression	ifm -> ifq_so -> so_nqueued = 0		4813261	0		=			
ANR	4813555	PtrMemberAccess	ifm -> ifq_so -> so_nqueued		4813261	0					
ANR	4813556	PtrMemberAccess	ifm -> ifq_so		4813261	0					
ANR	4813557	Identifier	ifm		4813261	0					
ANR	4813558	Identifier	ifq_so		4813261	1					
ANR	4813559	Identifier	so_nqueued		4813261	1					
ANR	4813560	PrimaryExpression	0		4813261	1					
ANR	4813561	ExpressionStatement	m_free ( ifm )	157:8:2480:2491	4813261	11	True				
ANR	4813562	CallExpression	m_free ( ifm )		4813261	0					
ANR	4813563	Callee	m_free		4813261	0					
ANR	4813564	Identifier	m_free		4813261	0					
ANR	4813565	ArgumentList	ifm		4813261	1					
ANR	4813566	Argument	ifm		4813261	0					
ANR	4813567	Identifier	ifm		4813261	0					
ANR	4813568	ExpressionStatement	slirp -> if_start_busy = false	163:4:2507:2535	4813261	8	True				
ANR	4813569	AssignmentExpression	slirp -> if_start_busy = false		4813261	0		=			
ANR	4813570	PtrMemberAccess	slirp -> if_start_busy		4813261	0					
ANR	4813571	Identifier	slirp		4813261	0					
ANR	4813572	Identifier	if_start_busy		4813261	1					
ANR	4813573	Identifier	false		4813261	1					
ANR	4813574	ReturnType	void		4813261	1					
ANR	4813575	Identifier	if_start		4813261	2					
ANR	4813576	ParameterList	Slirp * slirp		4813261	3					
ANR	4813577	Parameter	Slirp * slirp	1:14:14:25	4813261	0	True				
ANR	4813578	ParameterType	Slirp *		4813261	0					
ANR	4813579	Identifier	slirp		4813261	1					
ANR	4813580	CFGEntryNode	ENTRY		4813261		True				
ANR	4813581	CFGExitNode	EXIT		4813261		True				
ANR	4813582	Symbol	next		4813261						
ANR	4813583	Symbol	ifm -> ifq_next		4813261						
ANR	4813584	Symbol	* * ifm		4813261						
ANR	4813585	Symbol	qemu_clock_get_ns		4813261						
ANR	4813586	Symbol	ifm -> expiration_date		4813261						
ANR	4813587	Symbol	ifm -> ifq_so		4813261						
ANR	4813588	Symbol	* slirp		4813261						
ANR	4813589	Symbol	ifm -> ifq_so -> so_queued		4813261						
ANR	4813590	Symbol	if_encap		4813261						
ANR	4813591	Symbol	ifm -> ifs_next		4813261						
ANR	4813592	Symbol	* ifm -> ifq_so		4813261						
ANR	4813593	Symbol	& slirp -> if_batchq		4813261						
ANR	4813594	Symbol	now		4813261						
ANR	4813595	Symbol	slirp -> if_start_busy		4813261						
ANR	4813596	Symbol	QEMU_CLOCK_REALTIME		4813261						
ANR	4813597	Symbol	NULL		4813261						
ANR	4813598	Symbol	& slirp -> if_fastq		4813261						
ANR	4813599	Symbol	* ifm		4813261						
ANR	4813600	Symbol	ifm_next		4813261						
ANR	4813601	Symbol	false		4813261						
ANR	4813602	Symbol	slirp		4813261						
ANR	4813603	Symbol	slirp -> if_fastq . ifq_next		4813261						
ANR	4813604	Symbol	ifm		4813261						
ANR	4813605	Symbol	ifqt		4813261						
ANR	4813606	Symbol	slirp -> next_m		4813261						
ANR	4813607	Symbol	next_from_batchq		4813261						
ANR	4813608	Symbol	true		4813261						
ANR	4813609	Symbol	from_batchq		4813261						
ANR	4813610	Symbol	slirp -> if_fastq		4813261						
ANR	4813611	Symbol	ifm -> ifq_so -> so_nqueued		4813261						
ANR	4813612	Symbol	ifm -> ifq_prev		4813261						
