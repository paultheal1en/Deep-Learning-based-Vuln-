command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6266529	File	/home/p4ultr4n/workplace/ReVeal/raw_code/oss_run_out_0.c								
ANR	6266530	Function	oss_run_out	1:0:0:3651							
ANR	6266531	FunctionDef	oss_run_out (HWVoiceOut * hw)		6266530	0					
ANR	6266532	CompoundStatement		3:0:41:3651	6266530	0					
ANR	6266533	IdentifierDeclStatement	OSSVoiceOut * oss = ( OSSVoiceOut * ) hw ;	5:4:48:85	6266530	0	True				
ANR	6266534	IdentifierDecl	* oss = ( OSSVoiceOut * ) hw		6266530	0					
ANR	6266535	IdentifierDeclType	OSSVoiceOut *		6266530	0					
ANR	6266536	Identifier	oss		6266530	1					
ANR	6266537	AssignmentExpression	* oss = ( OSSVoiceOut * ) hw		6266530	2		=			
ANR	6266538	Identifier	oss		6266530	0					
ANR	6266539	CastExpression	( OSSVoiceOut * ) hw		6266530	1					
ANR	6266540	CastTarget	OSSVoiceOut *		6266530	0					
ANR	6266541	Identifier	hw		6266530	1					
ANR	6266542	IdentifierDeclStatement	"int err , rpos , live , decr ;"	7:4:92:117	6266530	1	True				
ANR	6266543	IdentifierDecl	err		6266530	0					
ANR	6266544	IdentifierDeclType	int		6266530	0					
ANR	6266545	Identifier	err		6266530	1					
ANR	6266546	IdentifierDecl	rpos		6266530	1					
ANR	6266547	IdentifierDeclType	int		6266530	0					
ANR	6266548	Identifier	rpos		6266530	1					
ANR	6266549	IdentifierDecl	live		6266530	2					
ANR	6266550	IdentifierDeclType	int		6266530	0					
ANR	6266551	Identifier	live		6266530	1					
ANR	6266552	IdentifierDecl	decr		6266530	3					
ANR	6266553	IdentifierDeclType	int		6266530	0					
ANR	6266554	Identifier	decr		6266530	1					
ANR	6266555	IdentifierDeclStatement	int samples ;	9:4:124:135	6266530	2	True				
ANR	6266556	IdentifierDecl	samples		6266530	0					
ANR	6266557	IdentifierDeclType	int		6266530	0					
ANR	6266558	Identifier	samples		6266530	1					
ANR	6266559	IdentifierDeclStatement	uint8_t * dst ;	11:4:142:154	6266530	3	True				
ANR	6266560	IdentifierDecl	* dst		6266530	0					
ANR	6266561	IdentifierDeclType	uint8_t *		6266530	0					
ANR	6266562	Identifier	dst		6266530	1					
ANR	6266563	IdentifierDeclStatement	st_sample_t * src ;	13:4:161:177	6266530	4	True				
ANR	6266564	IdentifierDecl	* src		6266530	0					
ANR	6266565	IdentifierDeclType	st_sample_t *		6266530	0					
ANR	6266566	Identifier	src		6266530	1					
ANR	6266567	IdentifierDeclStatement	struct audio_buf_info abinfo ;	15:4:184:212	6266530	5	True				
ANR	6266568	IdentifierDecl	abinfo		6266530	0					
ANR	6266569	IdentifierDeclType	struct audio_buf_info		6266530	0					
ANR	6266570	Identifier	abinfo		6266530	1					
ANR	6266571	IdentifierDeclStatement	struct count_info cntinfo ;	17:4:219:244	6266530	6	True				
ANR	6266572	IdentifierDecl	cntinfo		6266530	0					
ANR	6266573	IdentifierDeclType	struct count_info		6266530	0					
ANR	6266574	Identifier	cntinfo		6266530	1					
ANR	6266575	IdentifierDeclStatement	int bufsize ;	19:4:251:262	6266530	7	True				
ANR	6266576	IdentifierDecl	bufsize		6266530	0					
ANR	6266577	IdentifierDeclType	int		6266530	0					
ANR	6266578	Identifier	bufsize		6266530	1					
ANR	6266579	ExpressionStatement	live = audio_pcm_hw_get_live_out ( hw )	23:4:271:308	6266530	8	True				
ANR	6266580	AssignmentExpression	live = audio_pcm_hw_get_live_out ( hw )		6266530	0		=			
ANR	6266581	Identifier	live		6266530	0					
ANR	6266582	CallExpression	audio_pcm_hw_get_live_out ( hw )		6266530	1					
ANR	6266583	Callee	audio_pcm_hw_get_live_out		6266530	0					
ANR	6266584	Identifier	audio_pcm_hw_get_live_out		6266530	0					
ANR	6266585	ArgumentList	hw		6266530	1					
ANR	6266586	Argument	hw		6266530	0					
ANR	6266587	Identifier	hw		6266530	0					
ANR	6266588	IfStatement	if ( ! live )		6266530	9					
ANR	6266589	Condition	! live	25:8:319:323	6266530	0	True				
ANR	6266590	UnaryOperationExpression	! live		6266530	0					
ANR	6266591	UnaryOperator	!		6266530	0					
ANR	6266592	Identifier	live		6266530	1					
ANR	6266593	CompoundStatement		23:15:284:284	6266530	1					
ANR	6266594	ReturnStatement	return 0 ;	27:8:337:345	6266530	0	True				
ANR	6266595	PrimaryExpression	0		6266530	0					
ANR	6266596	ExpressionStatement	bufsize = hw -> samples << hw -> info . shift	33:4:361:400	6266530	10	True				
ANR	6266597	AssignmentExpression	bufsize = hw -> samples << hw -> info . shift		6266530	0		=			
ANR	6266598	Identifier	bufsize		6266530	0					
ANR	6266599	ShiftExpression	hw -> samples << hw -> info . shift		6266530	1		<<			
ANR	6266600	PtrMemberAccess	hw -> samples		6266530	0					
ANR	6266601	Identifier	hw		6266530	0					
ANR	6266602	Identifier	samples		6266530	1					
ANR	6266603	MemberAccess	hw -> info . shift		6266530	1					
ANR	6266604	PtrMemberAccess	hw -> info		6266530	0					
ANR	6266605	Identifier	hw		6266530	0					
ANR	6266606	Identifier	info		6266530	1					
ANR	6266607	Identifier	shift		6266530	1					
ANR	6266608	IfStatement	if ( oss -> mmapped )		6266530	11					
ANR	6266609	Condition	oss -> mmapped	37:8:413:424	6266530	0	True				
ANR	6266610	PtrMemberAccess	oss -> mmapped		6266530	0					
ANR	6266611	Identifier	oss		6266530	0					
ANR	6266612	Identifier	mmapped		6266530	1					
ANR	6266613	CompoundStatement		37:8:396:405	6266530	1					
ANR	6266614	IdentifierDeclStatement	int bytes ;	39:8:438:447	6266530	0	True				
ANR	6266615	IdentifierDecl	bytes		6266530	0					
ANR	6266616	IdentifierDeclType	int		6266530	0					
ANR	6266617	Identifier	bytes		6266530	1					
ANR	6266618	ExpressionStatement	"err = ioctl ( oss -> fd , SNDCTL_DSP_GETOPTR , & cntinfo )"	43:8:460:511	6266530	1	True				
ANR	6266619	AssignmentExpression	"err = ioctl ( oss -> fd , SNDCTL_DSP_GETOPTR , & cntinfo )"		6266530	0		=			
ANR	6266620	Identifier	err		6266530	0					
ANR	6266621	CallExpression	"ioctl ( oss -> fd , SNDCTL_DSP_GETOPTR , & cntinfo )"		6266530	1					
ANR	6266622	Callee	ioctl		6266530	0					
ANR	6266623	Identifier	ioctl		6266530	0					
ANR	6266624	ArgumentList	oss -> fd		6266530	1					
ANR	6266625	Argument	oss -> fd		6266530	0					
ANR	6266626	PtrMemberAccess	oss -> fd		6266530	0					
ANR	6266627	Identifier	oss		6266530	0					
ANR	6266628	Identifier	fd		6266530	1					
ANR	6266629	Argument	SNDCTL_DSP_GETOPTR		6266530	1					
ANR	6266630	Identifier	SNDCTL_DSP_GETOPTR		6266530	0					
ANR	6266631	Argument	& cntinfo		6266530	2					
ANR	6266632	UnaryOperationExpression	& cntinfo		6266530	0					
ANR	6266633	UnaryOperator	&		6266530	0					
ANR	6266634	Identifier	cntinfo		6266530	1					
ANR	6266635	IfStatement	if ( err < 0 )		6266530	2					
ANR	6266636	Condition	err < 0	45:12:526:532	6266530	0	True				
ANR	6266637	RelationalExpression	err < 0		6266530	0		<			
ANR	6266638	Identifier	err		6266530	0					
ANR	6266639	PrimaryExpression	0		6266530	1					
ANR	6266640	CompoundStatement		43:21:493:493	6266530	1					
ANR	6266641	ExpressionStatement	"oss_logerr ( errno , ""SNDCTL_DSP_GETOPTR failed\\n"" )"	47:12:550:599	6266530	0	True				
ANR	6266642	CallExpression	"oss_logerr ( errno , ""SNDCTL_DSP_GETOPTR failed\\n"" )"		6266530	0					
ANR	6266643	Callee	oss_logerr		6266530	0					
ANR	6266644	Identifier	oss_logerr		6266530	0					
ANR	6266645	ArgumentList	errno		6266530	1					
ANR	6266646	Argument	errno		6266530	0					
ANR	6266647	Identifier	errno		6266530	0					
ANR	6266648	Argument	"""SNDCTL_DSP_GETOPTR failed\\n"""		6266530	1					
ANR	6266649	PrimaryExpression	"""SNDCTL_DSP_GETOPTR failed\\n"""		6266530	0					
ANR	6266650	ReturnStatement	return 0 ;	49:12:614:622	6266530	1	True				
ANR	6266651	PrimaryExpression	0		6266530	0					
ANR	6266652	IfStatement	if ( cntinfo . ptr == oss -> old_optr )		6266530	3					
ANR	6266653	Condition	cntinfo . ptr == oss -> old_optr	55:12:650:677	6266530	0	True				
ANR	6266654	EqualityExpression	cntinfo . ptr == oss -> old_optr		6266530	0		==			
ANR	6266655	MemberAccess	cntinfo . ptr		6266530	0					
ANR	6266656	Identifier	cntinfo		6266530	0					
ANR	6266657	Identifier	ptr		6266530	1					
ANR	6266658	PtrMemberAccess	oss -> old_optr		6266530	1					
ANR	6266659	Identifier	oss		6266530	0					
ANR	6266660	Identifier	old_optr		6266530	1					
ANR	6266661	CompoundStatement		53:42:638:638	6266530	1					
ANR	6266662	IfStatement	if ( abs ( hw -> samples - live ) < 64 )		6266530	0					
ANR	6266663	Condition	abs ( hw -> samples - live ) < 64	57:16:699:727	6266530	0	True				
ANR	6266664	RelationalExpression	abs ( hw -> samples - live ) < 64		6266530	0		<			
ANR	6266665	CallExpression	abs ( hw -> samples - live )		6266530	0					
ANR	6266666	Callee	abs		6266530	0					
ANR	6266667	Identifier	abs		6266530	0					
ANR	6266668	ArgumentList	hw -> samples - live		6266530	1					
ANR	6266669	Argument	hw -> samples - live		6266530	0					
ANR	6266670	AdditiveExpression	hw -> samples - live		6266530	0		-			
ANR	6266671	PtrMemberAccess	hw -> samples		6266530	0					
ANR	6266672	Identifier	hw		6266530	0					
ANR	6266673	Identifier	samples		6266530	1					
ANR	6266674	Identifier	live		6266530	1					
ANR	6266675	PrimaryExpression	64		6266530	1					
ANR	6266676	CompoundStatement		55:47:688:688	6266530	1					
ANR	6266677	ExpressionStatement	"dolog ( ""warning: Overrun\\n"" )"	59:16:749:777	6266530	0	True				
ANR	6266678	CallExpression	"dolog ( ""warning: Overrun\\n"" )"		6266530	0					
ANR	6266679	Callee	dolog		6266530	0					
ANR	6266680	Identifier	dolog		6266530	0					
ANR	6266681	ArgumentList	"""warning: Overrun\\n"""		6266530	1					
ANR	6266682	Argument	"""warning: Overrun\\n"""		6266530	0					
ANR	6266683	PrimaryExpression	"""warning: Overrun\\n"""		6266530	0					
ANR	6266684	ReturnStatement	return 0 ;	63:12:807:815	6266530	1	True				
ANR	6266685	PrimaryExpression	0		6266530	0					
ANR	6266686	IfStatement	if ( cntinfo . ptr > oss -> old_optr )		6266530	4					
ANR	6266687	Condition	cntinfo . ptr > oss -> old_optr	69:12:843:869	6266530	0	True				
ANR	6266688	RelationalExpression	cntinfo . ptr > oss -> old_optr		6266530	0		>			
ANR	6266689	MemberAccess	cntinfo . ptr		6266530	0					
ANR	6266690	Identifier	cntinfo		6266530	0					
ANR	6266691	Identifier	ptr		6266530	1					
ANR	6266692	PtrMemberAccess	oss -> old_optr		6266530	1					
ANR	6266693	Identifier	oss		6266530	0					
ANR	6266694	Identifier	old_optr		6266530	1					
ANR	6266695	CompoundStatement		67:41:830:830	6266530	1					
ANR	6266696	ExpressionStatement	bytes = cntinfo . ptr - oss -> old_optr	71:12:887:922	6266530	0	True				
ANR	6266697	AssignmentExpression	bytes = cntinfo . ptr - oss -> old_optr		6266530	0		=			
ANR	6266698	Identifier	bytes		6266530	0					
ANR	6266699	AdditiveExpression	cntinfo . ptr - oss -> old_optr		6266530	1		-			
ANR	6266700	MemberAccess	cntinfo . ptr		6266530	0					
ANR	6266701	Identifier	cntinfo		6266530	0					
ANR	6266702	Identifier	ptr		6266530	1					
ANR	6266703	PtrMemberAccess	oss -> old_optr		6266530	1					
ANR	6266704	Identifier	oss		6266530	0					
ANR	6266705	Identifier	old_optr		6266530	1					
ANR	6266706	ElseStatement	else		6266530	0					
ANR	6266707	CompoundStatement		73:13:907:907	6266530	0					
ANR	6266708	ExpressionStatement	bytes = bufsize + cntinfo . ptr - oss -> old_optr	77:12:964:1009	6266530	0	True				
ANR	6266709	AssignmentExpression	bytes = bufsize + cntinfo . ptr - oss -> old_optr		6266530	0		=			
ANR	6266710	Identifier	bytes		6266530	0					
ANR	6266711	AdditiveExpression	bufsize + cntinfo . ptr - oss -> old_optr		6266530	1		+			
ANR	6266712	Identifier	bufsize		6266530	0					
ANR	6266713	AdditiveExpression	cntinfo . ptr - oss -> old_optr		6266530	1		-			
ANR	6266714	MemberAccess	cntinfo . ptr		6266530	0					
ANR	6266715	Identifier	cntinfo		6266530	0					
ANR	6266716	Identifier	ptr		6266530	1					
ANR	6266717	PtrMemberAccess	oss -> old_optr		6266530	1					
ANR	6266718	Identifier	oss		6266530	0					
ANR	6266719	Identifier	old_optr		6266530	1					
ANR	6266720	ExpressionStatement	"decr = audio_MIN ( bytes >> hw -> info . shift , live )"	83:8:1033:1081	6266530	5	True				
ANR	6266721	AssignmentExpression	"decr = audio_MIN ( bytes >> hw -> info . shift , live )"		6266530	0		=			
ANR	6266722	Identifier	decr		6266530	0					
ANR	6266723	CallExpression	"audio_MIN ( bytes >> hw -> info . shift , live )"		6266530	1					
ANR	6266724	Callee	audio_MIN		6266530	0					
ANR	6266725	Identifier	audio_MIN		6266530	0					
ANR	6266726	ArgumentList	bytes >> hw -> info . shift		6266530	1					
ANR	6266727	Argument	bytes >> hw -> info . shift		6266530	0					
ANR	6266728	ShiftExpression	bytes >> hw -> info . shift		6266530	0		>>			
ANR	6266729	Identifier	bytes		6266530	0					
ANR	6266730	MemberAccess	hw -> info . shift		6266530	1					
ANR	6266731	PtrMemberAccess	hw -> info		6266530	0					
ANR	6266732	Identifier	hw		6266530	0					
ANR	6266733	Identifier	info		6266530	1					
ANR	6266734	Identifier	shift		6266530	1					
ANR	6266735	Argument	live		6266530	1					
ANR	6266736	Identifier	live		6266530	0					
ANR	6266737	ElseStatement	else		6266530	0					
ANR	6266738	CompoundStatement		85:9:1058:1058	6266530	0					
ANR	6266739	ExpressionStatement	"err = ioctl ( oss -> fd , SNDCTL_DSP_GETOSPACE , & abinfo )"	89:8:1111:1163	6266530	0	True				
ANR	6266740	AssignmentExpression	"err = ioctl ( oss -> fd , SNDCTL_DSP_GETOSPACE , & abinfo )"		6266530	0		=			
ANR	6266741	Identifier	err		6266530	0					
ANR	6266742	CallExpression	"ioctl ( oss -> fd , SNDCTL_DSP_GETOSPACE , & abinfo )"		6266530	1					
ANR	6266743	Callee	ioctl		6266530	0					
ANR	6266744	Identifier	ioctl		6266530	0					
ANR	6266745	ArgumentList	oss -> fd		6266530	1					
ANR	6266746	Argument	oss -> fd		6266530	0					
ANR	6266747	PtrMemberAccess	oss -> fd		6266530	0					
ANR	6266748	Identifier	oss		6266530	0					
ANR	6266749	Identifier	fd		6266530	1					
ANR	6266750	Argument	SNDCTL_DSP_GETOSPACE		6266530	1					
ANR	6266751	Identifier	SNDCTL_DSP_GETOSPACE		6266530	0					
ANR	6266752	Argument	& abinfo		6266530	2					
ANR	6266753	UnaryOperationExpression	& abinfo		6266530	0					
ANR	6266754	UnaryOperator	&		6266530	0					
ANR	6266755	Identifier	abinfo		6266530	1					
ANR	6266756	IfStatement	if ( err < 0 )		6266530	1					
ANR	6266757	Condition	err < 0	91:12:1178:1184	6266530	0	True				
ANR	6266758	RelationalExpression	err < 0		6266530	0		<			
ANR	6266759	Identifier	err		6266530	0					
ANR	6266760	PrimaryExpression	0		6266530	1					
ANR	6266761	CompoundStatement		89:21:1145:1145	6266530	1					
ANR	6266762	ExpressionStatement	"oss_logerr ( errno , ""SNDCTL_DSP_GETOPTR failed\\n"" )"	93:12:1202:1251	6266530	0	True				
ANR	6266763	CallExpression	"oss_logerr ( errno , ""SNDCTL_DSP_GETOPTR failed\\n"" )"		6266530	0					
ANR	6266764	Callee	oss_logerr		6266530	0					
ANR	6266765	Identifier	oss_logerr		6266530	0					
ANR	6266766	ArgumentList	errno		6266530	1					
ANR	6266767	Argument	errno		6266530	0					
ANR	6266768	Identifier	errno		6266530	0					
ANR	6266769	Argument	"""SNDCTL_DSP_GETOPTR failed\\n"""		6266530	1					
ANR	6266770	PrimaryExpression	"""SNDCTL_DSP_GETOPTR failed\\n"""		6266530	0					
ANR	6266771	ReturnStatement	return 0 ;	95:12:1266:1274	6266530	1	True				
ANR	6266772	PrimaryExpression	0		6266530	0					
ANR	6266773	IfStatement	if ( abinfo . bytes > bufsize )		6266530	2					
ANR	6266774	Condition	abinfo . bytes > bufsize	101:12:1302:1323	6266530	0	True				
ANR	6266775	RelationalExpression	abinfo . bytes > bufsize		6266530	0		>			
ANR	6266776	MemberAccess	abinfo . bytes		6266530	0					
ANR	6266777	Identifier	abinfo		6266530	0					
ANR	6266778	Identifier	bytes		6266530	1					
ANR	6266779	Identifier	bufsize		6266530	1					
ANR	6266780	CompoundStatement		99:36:1284:1284	6266530	1					
ANR	6266781	IfStatement	if ( conf . debug )		6266530	0					
ANR	6266782	Condition	conf . debug	103:16:1345:1354	6266530	0	True				
ANR	6266783	MemberAccess	conf . debug		6266530	0					
ANR	6266784	Identifier	conf		6266530	0					
ANR	6266785	Identifier	debug		6266530	1					
ANR	6266786	CompoundStatement		101:28:1315:1315	6266530	1					
ANR	6266787	Statement	dolog	105:16:1376:1380	6266530	0	True				
ANR	6266788	Statement	(	105:22:1382:1382	6266530	1	True				
ANR	6266789	Statement	"""warning: Invalid available size, size=%d bufsize=%d\\n"""	105:23:1383:1437	6266530	2	True				
ANR	6266790	Statement	"""please report your OS/audio hw to malc@pulsesoft.com\\n"""	107:23:1463:1518	6266530	3	True				
ANR	6266791	Statement	","	107:79:1519:1519	6266530	4	True				
ANR	6266792	Statement	abinfo	109:23:1545:1550	6266530	5	True				
ANR	6266793	Statement	.	109:29:1551:1551	6266530	6	True				
ANR	6266794	Statement	bytes	109:30:1552:1556	6266530	7	True				
ANR	6266795	Statement	","	109:35:1557:1557	6266530	8	True				
ANR	6266796	Statement	bufsize	109:37:1559:1565	6266530	9	True				
ANR	6266797	Statement	)	109:44:1566:1566	6266530	10	True				
ANR	6266798	ExpressionStatement		109:45:1567:1567	6266530	11	True				
ANR	6266799	ExpressionStatement	abinfo . bytes = bufsize	113:12:1597:1619	6266530	1	True				
ANR	6266800	AssignmentExpression	abinfo . bytes = bufsize		6266530	0		=			
ANR	6266801	MemberAccess	abinfo . bytes		6266530	0					
ANR	6266802	Identifier	abinfo		6266530	0					
ANR	6266803	Identifier	bytes		6266530	1					
ANR	6266804	Identifier	bufsize		6266530	1					
ANR	6266805	IfStatement	if ( abinfo . bytes < 0 )		6266530	3					
ANR	6266806	Condition	abinfo . bytes < 0	119:12:1647:1662	6266530	0	True				
ANR	6266807	RelationalExpression	abinfo . bytes < 0		6266530	0		<			
ANR	6266808	MemberAccess	abinfo . bytes		6266530	0					
ANR	6266809	Identifier	abinfo		6266530	0					
ANR	6266810	Identifier	bytes		6266530	1					
ANR	6266811	PrimaryExpression	0		6266530	1					
ANR	6266812	CompoundStatement		117:30:1623:1623	6266530	1					
ANR	6266813	IfStatement	if ( conf . debug )		6266530	0					
ANR	6266814	Condition	conf . debug	121:16:1684:1693	6266530	0	True				
ANR	6266815	MemberAccess	conf . debug		6266530	0					
ANR	6266816	Identifier	conf		6266530	0					
ANR	6266817	Identifier	debug		6266530	1					
ANR	6266818	CompoundStatement		119:28:1654:1654	6266530	1					
ANR	6266819	ExpressionStatement	"dolog ( ""warning: Invalid available size, size=%d bufsize=%d\\n"" , abinfo . bytes , bufsize )"	123:16:1715:1825	6266530	0	True				
ANR	6266820	CallExpression	"dolog ( ""warning: Invalid available size, size=%d bufsize=%d\\n"" , abinfo . bytes , bufsize )"		6266530	0					
ANR	6266821	Callee	dolog		6266530	0					
ANR	6266822	Identifier	dolog		6266530	0					
ANR	6266823	ArgumentList	"""warning: Invalid available size, size=%d bufsize=%d\\n"""		6266530	1					
ANR	6266824	Argument	"""warning: Invalid available size, size=%d bufsize=%d\\n"""		6266530	0					
ANR	6266825	PrimaryExpression	"""warning: Invalid available size, size=%d bufsize=%d\\n"""		6266530	0					
ANR	6266826	Argument	abinfo . bytes		6266530	1					
ANR	6266827	MemberAccess	abinfo . bytes		6266530	0					
ANR	6266828	Identifier	abinfo		6266530	0					
ANR	6266829	Identifier	bytes		6266530	1					
ANR	6266830	Argument	bufsize		6266530	2					
ANR	6266831	Identifier	bufsize		6266530	0					
ANR	6266832	ReturnStatement	return 0 ;	129:12:1855:1863	6266530	1	True				
ANR	6266833	PrimaryExpression	0		6266530	0					
ANR	6266834	ExpressionStatement	"decr = audio_MIN ( abinfo . bytes >> hw -> info . shift , live )"	135:8:1887:1942	6266530	4	True				
ANR	6266835	AssignmentExpression	"decr = audio_MIN ( abinfo . bytes >> hw -> info . shift , live )"		6266530	0		=			
ANR	6266836	Identifier	decr		6266530	0					
ANR	6266837	CallExpression	"audio_MIN ( abinfo . bytes >> hw -> info . shift , live )"		6266530	1					
ANR	6266838	Callee	audio_MIN		6266530	0					
ANR	6266839	Identifier	audio_MIN		6266530	0					
ANR	6266840	ArgumentList	abinfo . bytes >> hw -> info . shift		6266530	1					
ANR	6266841	Argument	abinfo . bytes >> hw -> info . shift		6266530	0					
ANR	6266842	ShiftExpression	abinfo . bytes >> hw -> info . shift		6266530	0		>>			
ANR	6266843	MemberAccess	abinfo . bytes		6266530	0					
ANR	6266844	Identifier	abinfo		6266530	0					
ANR	6266845	Identifier	bytes		6266530	1					
ANR	6266846	MemberAccess	hw -> info . shift		6266530	1					
ANR	6266847	PtrMemberAccess	hw -> info		6266530	0					
ANR	6266848	Identifier	hw		6266530	0					
ANR	6266849	Identifier	info		6266530	1					
ANR	6266850	Identifier	shift		6266530	1					
ANR	6266851	Argument	live		6266530	1					
ANR	6266852	Identifier	live		6266530	0					
ANR	6266853	IfStatement	if ( ! decr )		6266530	5					
ANR	6266854	Condition	! decr	137:12:1957:1961	6266530	0	True				
ANR	6266855	UnaryOperationExpression	! decr		6266530	0					
ANR	6266856	UnaryOperator	!		6266530	0					
ANR	6266857	Identifier	decr		6266530	1					
ANR	6266858	CompoundStatement		135:19:1922:1922	6266530	1					
ANR	6266859	ReturnStatement	return 0 ;	139:12:1979:1987	6266530	0	True				
ANR	6266860	PrimaryExpression	0		6266530	0					
ANR	6266861	ExpressionStatement	samples = decr	147:4:2014:2028	6266530	12	True				
ANR	6266862	AssignmentExpression	samples = decr		6266530	0		=			
ANR	6266863	Identifier	samples		6266530	0					
ANR	6266864	Identifier	decr		6266530	1					
ANR	6266865	ExpressionStatement	rpos = hw -> rpos	149:4:2035:2050	6266530	13	True				
ANR	6266866	AssignmentExpression	rpos = hw -> rpos		6266530	0		=			
ANR	6266867	Identifier	rpos		6266530	0					
ANR	6266868	PtrMemberAccess	hw -> rpos		6266530	1					
ANR	6266869	Identifier	hw		6266530	0					
ANR	6266870	Identifier	rpos		6266530	1					
ANR	6266871	WhileStatement	while ( samples )		6266530	14					
ANR	6266872	Condition	samples	151:11:2064:2070	6266530	0	True				
ANR	6266873	Identifier	samples		6266530	0					
ANR	6266874	CompoundStatement		153:8:2099:2163	6266530	1					
ANR	6266875	IdentifierDeclStatement	int left_till_end_samples = hw -> samples - rpos ;	153:8:2084:2130	6266530	0	True				
ANR	6266876	IdentifierDecl	left_till_end_samples = hw -> samples - rpos		6266530	0					
ANR	6266877	IdentifierDeclType	int		6266530	0					
ANR	6266878	Identifier	left_till_end_samples		6266530	1					
ANR	6266879	AssignmentExpression	left_till_end_samples = hw -> samples - rpos		6266530	2		=			
ANR	6266880	Identifier	left_till_end_samples		6266530	0					
ANR	6266881	AdditiveExpression	hw -> samples - rpos		6266530	1		-			
ANR	6266882	PtrMemberAccess	hw -> samples		6266530	0					
ANR	6266883	Identifier	hw		6266530	0					
ANR	6266884	Identifier	samples		6266530	1					
ANR	6266885	Identifier	rpos		6266530	1					
ANR	6266886	IdentifierDeclStatement	"int convert_samples = audio_MIN ( samples , left_till_end_samples ) ;"	155:8:2141:2205	6266530	1	True				
ANR	6266887	IdentifierDecl	"convert_samples = audio_MIN ( samples , left_till_end_samples )"		6266530	0					
ANR	6266888	IdentifierDeclType	int		6266530	0					
ANR	6266889	Identifier	convert_samples		6266530	1					
ANR	6266890	AssignmentExpression	"convert_samples = audio_MIN ( samples , left_till_end_samples )"		6266530	2		=			
ANR	6266891	Identifier	convert_samples		6266530	0					
ANR	6266892	CallExpression	"audio_MIN ( samples , left_till_end_samples )"		6266530	1					
ANR	6266893	Callee	audio_MIN		6266530	0					
ANR	6266894	Identifier	audio_MIN		6266530	0					
ANR	6266895	ArgumentList	samples		6266530	1					
ANR	6266896	Argument	samples		6266530	0					
ANR	6266897	Identifier	samples		6266530	0					
ANR	6266898	Argument	left_till_end_samples		6266530	1					
ANR	6266899	Identifier	left_till_end_samples		6266530	0					
ANR	6266900	ExpressionStatement	src = hw -> mix_buf + rpos	159:8:2218:2242	6266530	2	True				
ANR	6266901	AssignmentExpression	src = hw -> mix_buf + rpos		6266530	0		=			
ANR	6266902	Identifier	src		6266530	0					
ANR	6266903	AdditiveExpression	hw -> mix_buf + rpos		6266530	1		+			
ANR	6266904	PtrMemberAccess	hw -> mix_buf		6266530	0					
ANR	6266905	Identifier	hw		6266530	0					
ANR	6266906	Identifier	mix_buf		6266530	1					
ANR	6266907	Identifier	rpos		6266530	1					
ANR	6266908	ExpressionStatement	"dst = advance ( oss -> pcm_buf , rpos << hw -> info . shift )"	161:8:2253:2305	6266530	3	True				
ANR	6266909	AssignmentExpression	"dst = advance ( oss -> pcm_buf , rpos << hw -> info . shift )"		6266530	0		=			
ANR	6266910	Identifier	dst		6266530	0					
ANR	6266911	CallExpression	"advance ( oss -> pcm_buf , rpos << hw -> info . shift )"		6266530	1					
ANR	6266912	Callee	advance		6266530	0					
ANR	6266913	Identifier	advance		6266530	0					
ANR	6266914	ArgumentList	oss -> pcm_buf		6266530	1					
ANR	6266915	Argument	oss -> pcm_buf		6266530	0					
ANR	6266916	PtrMemberAccess	oss -> pcm_buf		6266530	0					
ANR	6266917	Identifier	oss		6266530	0					
ANR	6266918	Identifier	pcm_buf		6266530	1					
ANR	6266919	Argument	rpos << hw -> info . shift		6266530	1					
ANR	6266920	ShiftExpression	rpos << hw -> info . shift		6266530	0		<<			
ANR	6266921	Identifier	rpos		6266530	0					
ANR	6266922	MemberAccess	hw -> info . shift		6266530	1					
ANR	6266923	PtrMemberAccess	hw -> info		6266530	0					
ANR	6266924	Identifier	hw		6266530	0					
ANR	6266925	Identifier	info		6266530	1					
ANR	6266926	Identifier	shift		6266530	1					
ANR	6266927	ExpressionStatement	"hw -> clip ( dst , src , convert_samples )"	165:8:2318:2354	6266530	4	True				
ANR	6266928	CallExpression	"hw -> clip ( dst , src , convert_samples )"		6266530	0					
ANR	6266929	Callee	hw -> clip		6266530	0					
ANR	6266930	PtrMemberAccess	hw -> clip		6266530	0					
ANR	6266931	Identifier	hw		6266530	0					
ANR	6266932	Identifier	clip		6266530	1					
ANR	6266933	ArgumentList	dst		6266530	1					
ANR	6266934	Argument	dst		6266530	0					
ANR	6266935	Identifier	dst		6266530	0					
ANR	6266936	Argument	src		6266530	1					
ANR	6266937	Identifier	src		6266530	0					
ANR	6266938	Argument	convert_samples		6266530	2					
ANR	6266939	Identifier	convert_samples		6266530	0					
ANR	6266940	IfStatement	if ( ! oss -> mmapped )		6266530	5					
ANR	6266941	Condition	! oss -> mmapped	167:12:2369:2381	6266530	0	True				
ANR	6266942	UnaryOperationExpression	! oss -> mmapped		6266530	0					
ANR	6266943	UnaryOperator	!		6266530	0					
ANR	6266944	PtrMemberAccess	oss -> mmapped		6266530	1					
ANR	6266945	Identifier	oss		6266530	0					
ANR	6266946	Identifier	mmapped		6266530	1					
ANR	6266947	CompoundStatement		167:12:2357:2368	6266530	1					
ANR	6266948	IdentifierDeclStatement	int written ;	169:12:2399:2410	6266530	0	True				
ANR	6266949	IdentifierDecl	written		6266530	0					
ANR	6266950	IdentifierDeclType	int		6266530	0					
ANR	6266951	Identifier	written		6266530	1					
ANR	6266952	ExpressionStatement	"written = write ( oss -> fd , dst , convert_samples << hw -> info . shift )"	173:12:2427:2492	6266530	1	True				
ANR	6266953	AssignmentExpression	"written = write ( oss -> fd , dst , convert_samples << hw -> info . shift )"		6266530	0		=			
ANR	6266954	Identifier	written		6266530	0					
ANR	6266955	CallExpression	"write ( oss -> fd , dst , convert_samples << hw -> info . shift )"		6266530	1					
ANR	6266956	Callee	write		6266530	0					
ANR	6266957	Identifier	write		6266530	0					
ANR	6266958	ArgumentList	oss -> fd		6266530	1					
ANR	6266959	Argument	oss -> fd		6266530	0					
ANR	6266960	PtrMemberAccess	oss -> fd		6266530	0					
ANR	6266961	Identifier	oss		6266530	0					
ANR	6266962	Identifier	fd		6266530	1					
ANR	6266963	Argument	dst		6266530	1					
ANR	6266964	Identifier	dst		6266530	0					
ANR	6266965	Argument	convert_samples << hw -> info . shift		6266530	2					
ANR	6266966	ShiftExpression	convert_samples << hw -> info . shift		6266530	0		<<			
ANR	6266967	Identifier	convert_samples		6266530	0					
ANR	6266968	MemberAccess	hw -> info . shift		6266530	1					
ANR	6266969	PtrMemberAccess	hw -> info		6266530	0					
ANR	6266970	Identifier	hw		6266530	0					
ANR	6266971	Identifier	info		6266530	1					
ANR	6266972	Identifier	shift		6266530	1					
ANR	6266973	IfStatement	if ( written == - 1 )		6266530	2					
ANR	6266974	Condition	written == - 1	177:16:2566:2578	6266530	0	True				
ANR	6266975	EqualityExpression	written == - 1		6266530	0		==			
ANR	6266976	Identifier	written		6266530	0					
ANR	6266977	UnaryOperationExpression	- 1		6266530	1					
ANR	6266978	UnaryOperator	-		6266530	0					
ANR	6266979	PrimaryExpression	1		6266530	1					
ANR	6266980	CompoundStatement		175:31:2539:2539	6266530	1					
ANR	6266981	ExpressionStatement	"oss_logerr ( errno , ""Failed to write %d bytes of audio data from %p\\n"" , convert_samples << hw -> info . shift , dst )"	179:16:2600:2817	6266530	0	True				
ANR	6266982	CallExpression	"oss_logerr ( errno , ""Failed to write %d bytes of audio data from %p\\n"" , convert_samples << hw -> info . shift , dst )"		6266530	0					
ANR	6266983	Callee	oss_logerr		6266530	0					
ANR	6266984	Identifier	oss_logerr		6266530	0					
ANR	6266985	ArgumentList	errno		6266530	1					
ANR	6266986	Argument	errno		6266530	0					
ANR	6266987	Identifier	errno		6266530	0					
ANR	6266988	Argument	"""Failed to write %d bytes of audio data from %p\\n"""		6266530	1					
ANR	6266989	PrimaryExpression	"""Failed to write %d bytes of audio data from %p\\n"""		6266530	0					
ANR	6266990	Argument	convert_samples << hw -> info . shift		6266530	2					
ANR	6266991	ShiftExpression	convert_samples << hw -> info . shift		6266530	0		<<			
ANR	6266992	Identifier	convert_samples		6266530	0					
ANR	6266993	MemberAccess	hw -> info . shift		6266530	1					
ANR	6266994	PtrMemberAccess	hw -> info		6266530	0					
ANR	6266995	Identifier	hw		6266530	0					
ANR	6266996	Identifier	info		6266530	1					
ANR	6266997	Identifier	shift		6266530	1					
ANR	6266998	Argument	dst		6266530	3					
ANR	6266999	Identifier	dst		6266530	0					
ANR	6267000	ContinueStatement	continue ;	191:16:2836:2844	6266530	1	True				
ANR	6267001	IfStatement	if ( written != convert_samples << hw -> info . shift )		6266530	3					
ANR	6267002	Condition	written != convert_samples << hw -> info . shift	197:16:2880:2923	6266530	0	True				
ANR	6267003	EqualityExpression	written != convert_samples << hw -> info . shift		6266530	0		!=			
ANR	6267004	Identifier	written		6266530	0					
ANR	6267005	ShiftExpression	convert_samples << hw -> info . shift		6266530	1		<<			
ANR	6267006	Identifier	convert_samples		6266530	0					
ANR	6267007	MemberAccess	hw -> info . shift		6266530	1					
ANR	6267008	PtrMemberAccess	hw -> info		6266530	0					
ANR	6267009	Identifier	hw		6266530	0					
ANR	6267010	Identifier	info		6266530	1					
ANR	6267011	Identifier	shift		6266530	1					
ANR	6267012	CompoundStatement		199:16:2962:3001	6266530	1					
ANR	6267013	IdentifierDeclStatement	int wsamples = written >> hw -> info . shift ;	199:16:2945:2985	6266530	0	True				
ANR	6267014	IdentifierDecl	wsamples = written >> hw -> info . shift		6266530	0					
ANR	6267015	IdentifierDeclType	int		6266530	0					
ANR	6267016	Identifier	wsamples		6266530	1					
ANR	6267017	AssignmentExpression	wsamples = written >> hw -> info . shift		6266530	2		=			
ANR	6267018	Identifier	wsamples		6266530	0					
ANR	6267019	ShiftExpression	written >> hw -> info . shift		6266530	1		>>			
ANR	6267020	Identifier	written		6266530	0					
ANR	6267021	MemberAccess	hw -> info . shift		6266530	1					
ANR	6267022	PtrMemberAccess	hw -> info		6266530	0					
ANR	6267023	Identifier	hw		6266530	0					
ANR	6267024	Identifier	info		6266530	1					
ANR	6267025	Identifier	shift		6266530	1					
ANR	6267026	IdentifierDeclStatement	int wbytes = wsamples << hw -> info . shift ;	201:16:3004:3043	6266530	1	True				
ANR	6267027	IdentifierDecl	wbytes = wsamples << hw -> info . shift		6266530	0					
ANR	6267028	IdentifierDeclType	int		6266530	0					
ANR	6267029	Identifier	wbytes		6266530	1					
ANR	6267030	AssignmentExpression	wbytes = wsamples << hw -> info . shift		6266530	2		=			
ANR	6267031	Identifier	wbytes		6266530	0					
ANR	6267032	ShiftExpression	wsamples << hw -> info . shift		6266530	1		<<			
ANR	6267033	Identifier	wsamples		6266530	0					
ANR	6267034	MemberAccess	hw -> info . shift		6266530	1					
ANR	6267035	PtrMemberAccess	hw -> info		6266530	0					
ANR	6267036	Identifier	hw		6266530	0					
ANR	6267037	Identifier	info		6266530	1					
ANR	6267038	Identifier	shift		6266530	1					
ANR	6267039	IfStatement	if ( wbytes != written )		6266530	2					
ANR	6267040	Condition	wbytes != written	203:20:3066:3082	6266530	0	True				
ANR	6267041	EqualityExpression	wbytes != written		6266530	0		!=			
ANR	6267042	Identifier	wbytes		6266530	0					
ANR	6267043	Identifier	written		6266530	1					
ANR	6267044	CompoundStatement		201:39:3043:3043	6266530	1					
ANR	6267045	Statement	dolog	205:20:3108:3112	6266530	0	True				
ANR	6267046	Statement	(	205:26:3114:3114	6266530	1	True				
ANR	6267047	Statement	"""warning: Misaligned write %d (requested %d), """	205:27:3115:3161	6266530	2	True				
ANR	6267048	Statement	"""alignment %d\\n"""	207:27:3191:3206	6266530	3	True				
ANR	6267049	Statement	","	207:43:3207:3207	6266530	4	True				
ANR	6267050	Statement	wbytes	209:27:3237:3242	6266530	5	True				
ANR	6267051	Statement	","	209:33:3243:3243	6266530	6	True				
ANR	6267052	Statement	written	209:35:3245:3251	6266530	7	True				
ANR	6267053	Statement	","	209:42:3252:3252	6266530	8	True				
ANR	6267054	Statement	hw	209:44:3254:3255	6266530	9	True				
ANR	6267055	Statement	->	209:46:3256:3257	6266530	10	True				
ANR	6267056	Statement	info	209:48:3258:3261	6266530	11	True				
ANR	6267057	Statement	.	209:52:3262:3262	6266530	12	True				
ANR	6267058	Statement	align	209:53:3263:3267	6266530	13	True				
ANR	6267059	Statement	+	209:59:3269:3269	6266530	14	True				
ANR	6267060	Statement	1	209:61:3271:3271	6266530	15	True				
ANR	6267061	Statement	)	209:62:3272:3272	6266530	16	True				
ANR	6267062	ExpressionStatement		209:63:3273:3273	6266530	17	True				
ANR	6267063	ExpressionStatement	decr -= wsamples	213:16:3311:3327	6266530	3	True				
ANR	6267064	AssignmentExpression	decr -= wsamples		6266530	0		-=			
ANR	6267065	Identifier	decr		6266530	0					
ANR	6267066	Identifier	wsamples		6266530	1					
ANR	6267067	ExpressionStatement	rpos = ( rpos + wsamples ) % hw -> samples	215:16:3346:3384	6266530	4	True				
ANR	6267068	AssignmentExpression	rpos = ( rpos + wsamples ) % hw -> samples		6266530	0		=			
ANR	6267069	Identifier	rpos		6266530	0					
ANR	6267070	MultiplicativeExpression	( rpos + wsamples ) % hw -> samples		6266530	1		%			
ANR	6267071	AdditiveExpression	rpos + wsamples		6266530	0		+			
ANR	6267072	Identifier	rpos		6266530	0					
ANR	6267073	Identifier	wsamples		6266530	1					
ANR	6267074	PtrMemberAccess	hw -> samples		6266530	1					
ANR	6267075	Identifier	hw		6266530	0					
ANR	6267076	Identifier	samples		6266530	1					
ANR	6267077	BreakStatement	break ;	217:16:3403:3408	6266530	5	True				
ANR	6267078	ExpressionStatement	rpos = ( rpos + convert_samples ) % hw -> samples	225:8:3447:3492	6266530	6	True				
ANR	6267079	AssignmentExpression	rpos = ( rpos + convert_samples ) % hw -> samples		6266530	0		=			
ANR	6267080	Identifier	rpos		6266530	0					
ANR	6267081	MultiplicativeExpression	( rpos + convert_samples ) % hw -> samples		6266530	1		%			
ANR	6267082	AdditiveExpression	rpos + convert_samples		6266530	0		+			
ANR	6267083	Identifier	rpos		6266530	0					
ANR	6267084	Identifier	convert_samples		6266530	1					
ANR	6267085	PtrMemberAccess	hw -> samples		6266530	1					
ANR	6267086	Identifier	hw		6266530	0					
ANR	6267087	Identifier	samples		6266530	1					
ANR	6267088	ExpressionStatement	samples -= convert_samples	227:8:3503:3529	6266530	7	True				
ANR	6267089	AssignmentExpression	samples -= convert_samples		6266530	0		-=			
ANR	6267090	Identifier	samples		6266530	0					
ANR	6267091	Identifier	convert_samples		6266530	1					
ANR	6267092	IfStatement	if ( oss -> mmapped )		6266530	15					
ANR	6267093	Condition	oss -> mmapped	231:8:3547:3558	6266530	0	True				
ANR	6267094	PtrMemberAccess	oss -> mmapped		6266530	0					
ANR	6267095	Identifier	oss		6266530	0					
ANR	6267096	Identifier	mmapped		6266530	1					
ANR	6267097	CompoundStatement		229:22:3519:3519	6266530	1					
ANR	6267098	ExpressionStatement	oss -> old_optr = cntinfo . ptr	233:8:3572:3599	6266530	0	True				
ANR	6267099	AssignmentExpression	oss -> old_optr = cntinfo . ptr		6266530	0		=			
ANR	6267100	PtrMemberAccess	oss -> old_optr		6266530	0					
ANR	6267101	Identifier	oss		6266530	0					
ANR	6267102	Identifier	old_optr		6266530	1					
ANR	6267103	MemberAccess	cntinfo . ptr		6266530	1					
ANR	6267104	Identifier	cntinfo		6266530	0					
ANR	6267105	Identifier	ptr		6266530	1					
ANR	6267106	ExpressionStatement	hw -> rpos = rpos	239:4:3615:3630	6266530	16	True				
ANR	6267107	AssignmentExpression	hw -> rpos = rpos		6266530	0		=			
ANR	6267108	PtrMemberAccess	hw -> rpos		6266530	0					
ANR	6267109	Identifier	hw		6266530	0					
ANR	6267110	Identifier	rpos		6266530	1					
ANR	6267111	Identifier	rpos		6266530	1					
ANR	6267112	ReturnStatement	return decr ;	241:4:3637:3648	6266530	17	True				
ANR	6267113	Identifier	decr		6266530	0					
ANR	6267114	ReturnType	static int		6266530	1					
ANR	6267115	Identifier	oss_run_out		6266530	2					
ANR	6267116	ParameterList	HWVoiceOut * hw		6266530	3					
ANR	6267117	Parameter	HWVoiceOut * hw	1:24:24:37	6266530	0	True				
ANR	6267118	ParameterType	HWVoiceOut *		6266530	0					
ANR	6267119	Identifier	hw		6266530	1					
ANR	6267120	CFGEntryNode	ENTRY		6266530		True				
ANR	6267121	CFGExitNode	EXIT		6266530		True				
ANR	6267122	Symbol	oss -> old_optr		6266530						
ANR	6267123	Symbol	dst		6266530						
ANR	6267124	Symbol	cntinfo		6266530						
ANR	6267125	Symbol	hw -> info . shift		6266530						
ANR	6267126	Symbol	conf		6266530						
ANR	6267127	Symbol	oss -> fd		6266530						
ANR	6267128	Symbol	oss		6266530						
ANR	6267129	Symbol	ioctl		6266530						
ANR	6267130	Symbol	hw		6266530						
ANR	6267131	Symbol	advance		6266530						
ANR	6267132	Symbol	hw -> mix_buf		6266530						
ANR	6267133	Symbol	abinfo		6266530						
ANR	6267134	Symbol	cntinfo . ptr		6266530						
ANR	6267135	Symbol	* hw		6266530						
ANR	6267136	Symbol	rpos		6266530						
ANR	6267137	Symbol	abinfo . bytes		6266530						
ANR	6267138	Symbol	& abinfo		6266530						
ANR	6267139	Symbol	conf . debug		6266530						
ANR	6267140	Symbol	written		6266530						
ANR	6267141	Symbol	write		6266530						
ANR	6267142	Symbol	decr		6266530						
ANR	6267143	Symbol	live		6266530						
ANR	6267144	Symbol	wsamples		6266530						
ANR	6267145	Symbol	errno		6266530						
ANR	6267146	Symbol	SNDCTL_DSP_GETOSPACE		6266530						
ANR	6267147	Symbol	err		6266530						
ANR	6267148	Symbol	src		6266530						
ANR	6267149	Symbol	hw -> samples		6266530						
ANR	6267150	Symbol	convert_samples		6266530						
ANR	6267151	Symbol	bufsize		6266530						
ANR	6267152	Symbol	hw -> info		6266530						
ANR	6267153	Symbol	hw -> rpos		6266530						
ANR	6267154	Symbol	left_till_end_samples		6266530						
ANR	6267155	Symbol	samples		6266530						
ANR	6267156	Symbol	audio_pcm_hw_get_live_out		6266530						
ANR	6267157	Symbol	oss -> pcm_buf		6266530						
ANR	6267158	Symbol	abs		6266530						
ANR	6267159	Symbol	audio_MIN		6266530						
ANR	6267160	Symbol	bytes		6266530						
ANR	6267161	Symbol	* oss		6266530						
ANR	6267162	Symbol	wbytes		6266530						
ANR	6267163	Symbol	SNDCTL_DSP_GETOPTR		6266530						
ANR	6267164	Symbol	oss -> mmapped		6266530						
ANR	6267165	Symbol	& cntinfo		6266530						
