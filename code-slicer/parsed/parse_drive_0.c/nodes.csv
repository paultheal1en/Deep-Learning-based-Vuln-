command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6312212	File	/home/p4ultr4n/workplace/ReVeal/raw_code/parse_drive_0.c								
ANR	6312213	Function	parse_drive	1:0:0:938							
ANR	6312214	FunctionDef	"parse_drive (DeviceState * dev , const char * str , void * * ptr , const char * propname , Error * * errp)"		6312213	0					
ANR	6312215	CompoundStatement		5:0:133:938	6312213	0					
ANR	6312216	IdentifierDeclStatement	BlockBackend * blk ;	7:4:140:157	6312213	0	True				
ANR	6312217	IdentifierDecl	* blk		6312213	0					
ANR	6312218	IdentifierDeclType	BlockBackend *		6312213	0					
ANR	6312219	Identifier	blk		6312213	1					
ANR	6312220	ExpressionStatement	blk = blk_by_name ( str )	11:4:166:188	6312213	1	True				
ANR	6312221	AssignmentExpression	blk = blk_by_name ( str )		6312213	0		=			
ANR	6312222	Identifier	blk		6312213	0					
ANR	6312223	CallExpression	blk_by_name ( str )		6312213	1					
ANR	6312224	Callee	blk_by_name		6312213	0					
ANR	6312225	Identifier	blk_by_name		6312213	0					
ANR	6312226	ArgumentList	str		6312213	1					
ANR	6312227	Argument	str		6312213	0					
ANR	6312228	Identifier	str		6312213	0					
ANR	6312229	IfStatement	if ( ! blk )		6312213	2					
ANR	6312230	Condition	! blk	13:8:199:202	6312213	0	True				
ANR	6312231	UnaryOperationExpression	! blk		6312213	0					
ANR	6312232	UnaryOperator	!		6312213	0					
ANR	6312233	Identifier	blk		6312213	1					
ANR	6312234	CompoundStatement		9:14:71:71	6312213	1					
ANR	6312235	ExpressionStatement	"error_setg ( errp , ""Property '%s.%s' can't find value '%s'"" , object_get_typename ( OBJECT ( dev ) ) , propname , str )"	15:8:216:343	6312213	0	True				
ANR	6312236	CallExpression	"error_setg ( errp , ""Property '%s.%s' can't find value '%s'"" , object_get_typename ( OBJECT ( dev ) ) , propname , str )"		6312213	0					
ANR	6312237	Callee	error_setg		6312213	0					
ANR	6312238	Identifier	error_setg		6312213	0					
ANR	6312239	ArgumentList	errp		6312213	1					
ANR	6312240	Argument	errp		6312213	0					
ANR	6312241	Identifier	errp		6312213	0					
ANR	6312242	Argument	"""Property '%s.%s' can't find value '%s'"""		6312213	1					
ANR	6312243	PrimaryExpression	"""Property '%s.%s' can't find value '%s'"""		6312213	0					
ANR	6312244	Argument	object_get_typename ( OBJECT ( dev ) )		6312213	2					
ANR	6312245	CallExpression	object_get_typename ( OBJECT ( dev ) )		6312213	0					
ANR	6312246	Callee	object_get_typename		6312213	0					
ANR	6312247	Identifier	object_get_typename		6312213	0					
ANR	6312248	ArgumentList	OBJECT ( dev )		6312213	1					
ANR	6312249	Argument	OBJECT ( dev )		6312213	0					
ANR	6312250	CallExpression	OBJECT ( dev )		6312213	0					
ANR	6312251	Callee	OBJECT		6312213	0					
ANR	6312252	Identifier	OBJECT		6312213	0					
ANR	6312253	ArgumentList	dev		6312213	1					
ANR	6312254	Argument	dev		6312213	0					
ANR	6312255	Identifier	dev		6312213	0					
ANR	6312256	Argument	propname		6312213	3					
ANR	6312257	Identifier	propname		6312213	0					
ANR	6312258	Argument	str		6312213	4					
ANR	6312259	Identifier	str		6312213	0					
ANR	6312260	ReturnStatement	return ;	19:8:354:360	6312213	1	True				
ANR	6312261	IfStatement	"if ( blk_attach_dev ( blk , dev ) < 0 )"		6312213	3					
ANR	6312262	Condition	"blk_attach_dev ( blk , dev ) < 0"	23:8:378:405	6312213	0	True				
ANR	6312263	RelationalExpression	"blk_attach_dev ( blk , dev ) < 0"		6312213	0		<			
ANR	6312264	CallExpression	"blk_attach_dev ( blk , dev )"		6312213	0					
ANR	6312265	Callee	blk_attach_dev		6312213	0					
ANR	6312266	Identifier	blk_attach_dev		6312213	0					
ANR	6312267	ArgumentList	blk		6312213	1					
ANR	6312268	Argument	blk		6312213	0					
ANR	6312269	Identifier	blk		6312213	0					
ANR	6312270	Argument	dev		6312213	1					
ANR	6312271	Identifier	dev		6312213	0					
ANR	6312272	PrimaryExpression	0		6312213	1					
ANR	6312273	CompoundStatement		21:8:285:325	6312213	1					
ANR	6312274	IdentifierDeclStatement	DriveInfo * dinfo = blk_legacy_dinfo ( blk ) ;	25:8:419:459	6312213	0	True				
ANR	6312275	IdentifierDecl	* dinfo = blk_legacy_dinfo ( blk )		6312213	0					
ANR	6312276	IdentifierDeclType	DriveInfo *		6312213	0					
ANR	6312277	Identifier	dinfo		6312213	1					
ANR	6312278	AssignmentExpression	* dinfo = blk_legacy_dinfo ( blk )		6312213	2		=			
ANR	6312279	Identifier	dinfo		6312213	0					
ANR	6312280	CallExpression	blk_legacy_dinfo ( blk )		6312213	1					
ANR	6312281	Callee	blk_legacy_dinfo		6312213	0					
ANR	6312282	Identifier	blk_legacy_dinfo		6312213	0					
ANR	6312283	ArgumentList	blk		6312213	1					
ANR	6312284	Argument	blk		6312213	0					
ANR	6312285	Identifier	blk		6312213	0					
ANR	6312286	IfStatement	if ( dinfo -> type != IF_NONE )		6312213	1					
ANR	6312287	Condition	dinfo -> type != IF_NONE	29:12:476:497	6312213	0	True				
ANR	6312288	EqualityExpression	dinfo -> type != IF_NONE		6312213	0		!=			
ANR	6312289	PtrMemberAccess	dinfo -> type		6312213	0					
ANR	6312290	Identifier	dinfo		6312213	0					
ANR	6312291	Identifier	type		6312213	1					
ANR	6312292	Identifier	IF_NONE		6312213	1					
ANR	6312293	CompoundStatement		25:36:366:366	6312213	1					
ANR	6312294	Statement	error_setg	31:12:515:524	6312213	0	True				
ANR	6312295	Statement	(	31:22:525:525	6312213	1	True				
ANR	6312296	Statement	errp	31:23:526:529	6312213	2	True				
ANR	6312297	Statement	","	31:27:530:530	6312213	3	True				
ANR	6312298	Statement	"""Drive '%s' is already in use because """	31:29:532:570	6312213	4	True				
ANR	6312299	Statement	"""it has been automatically connected to another """	33:23:596:644	6312213	5	True				
ANR	6312300	Statement	"""device (did you need 'if=none' in the drive options?)"""	35:23:670:724	6312213	6	True				
ANR	6312301	Statement	","	35:78:725:725	6312213	7	True				
ANR	6312302	Statement	str	37:23:751:753	6312213	8	True				
ANR	6312303	Statement	)	37:26:754:754	6312213	9	True				
ANR	6312304	ExpressionStatement		37:27:755:755	6312213	10	True				
ANR	6312305	ElseStatement	else		6312213	0					
ANR	6312306	CompoundStatement		35:15:639:639	6312213	0					
ANR	6312307	ExpressionStatement	"error_setg ( errp , ""Drive '%s' is already in use by another device"" , str )"	41:12:788:883	6312213	0	True				
ANR	6312308	CallExpression	"error_setg ( errp , ""Drive '%s' is already in use by another device"" , str )"		6312213	0					
ANR	6312309	Callee	error_setg		6312213	0					
ANR	6312310	Identifier	error_setg		6312213	0					
ANR	6312311	ArgumentList	errp		6312213	1					
ANR	6312312	Argument	errp		6312213	0					
ANR	6312313	Identifier	errp		6312213	0					
ANR	6312314	Argument	"""Drive '%s' is already in use by another device"""		6312213	1					
ANR	6312315	PrimaryExpression	"""Drive '%s' is already in use by another device"""		6312213	0					
ANR	6312316	Argument	str		6312213	2					
ANR	6312317	Identifier	str		6312213	0					
ANR	6312318	ReturnStatement	return ;	47:8:905:911	6312213	2	True				
ANR	6312319	ExpressionStatement	* ptr = blk	51:4:925:935	6312213	4	True				
ANR	6312320	AssignmentExpression	* ptr = blk		6312213	0		=			
ANR	6312321	UnaryOperationExpression	* ptr		6312213	0					
ANR	6312322	UnaryOperator	*		6312213	0					
ANR	6312323	Identifier	ptr		6312213	1					
ANR	6312324	Identifier	blk		6312213	1					
ANR	6312325	ReturnType	static void		6312213	1					
ANR	6312326	Identifier	parse_drive		6312213	2					
ANR	6312327	ParameterList	"DeviceState * dev , const char * str , void * * ptr , const char * propname , Error * * errp"		6312213	3					
ANR	6312328	Parameter	DeviceState * dev	1:24:24:39	6312213	0	True				
ANR	6312329	ParameterType	DeviceState *		6312213	0					
ANR	6312330	Identifier	dev		6312213	1					
ANR	6312331	Parameter	const char * str	1:42:42:56	6312213	1	True				
ANR	6312332	ParameterType	const char *		6312213	0					
ANR	6312333	Identifier	str		6312213	1					
ANR	6312334	Parameter	void * * ptr	1:59:59:68	6312213	2	True				
ANR	6312335	ParameterType	void * *		6312213	0					
ANR	6312336	Identifier	ptr		6312213	1					
ANR	6312337	Parameter	const char * propname	3:24:96:115	6312213	3	True				
ANR	6312338	ParameterType	const char *		6312213	0					
ANR	6312339	Identifier	propname		6312213	1					
ANR	6312340	Parameter	Error * * errp	3:46:118:129	6312213	4	True				
ANR	6312341	ParameterType	Error * *		6312213	0					
ANR	6312342	Identifier	errp		6312213	1					
ANR	6312343	CFGEntryNode	ENTRY		6312213		True				
ANR	6312344	CFGExitNode	EXIT		6312213		True				
ANR	6312345	Symbol	blk		6312213						
ANR	6312346	Symbol	dinfo		6312213						
ANR	6312347	Symbol	IF_NONE		6312213						
ANR	6312348	Symbol	errp		6312213						
ANR	6312349	Symbol	blk_attach_dev		6312213						
ANR	6312350	Symbol	blk_by_name		6312213						
ANR	6312351	Symbol	OBJECT		6312213						
ANR	6312352	Symbol	blk_legacy_dinfo		6312213						
ANR	6312353	Symbol	ptr		6312213						
ANR	6312354	Symbol	* dinfo		6312213						
ANR	6312355	Symbol	str		6312213						
ANR	6312356	Symbol	dev		6312213						
ANR	6312357	Symbol	dinfo -> type		6312213						
ANR	6312358	Symbol	* ptr		6312213						
ANR	6312359	Symbol	object_get_typename		6312213						
ANR	6312360	Symbol	propname		6312213						
