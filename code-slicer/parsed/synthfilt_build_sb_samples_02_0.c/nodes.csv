command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8156146	File	/home/p4ultr4n/workplace/ReVeal/raw_code/synthfilt_build_sb_samples_02_0.c								
ANR	8156147	Function	synthfilt_build_sb_samples	1:0:0:7304							
ANR	8156148	FunctionDef	"synthfilt_build_sb_samples (QDM2Context * q , GetBitContext * gb , int length , int sb_min , int sb_max)"		8156147	0					
ANR	8156149	CompoundStatement		3:0:112:7304	8156147	0					
ANR	8156150	IdentifierDeclStatement	"int sb , j , k , n , ch , run , channels ;"	5:4:119:153	8156147	0	True				
ANR	8156151	IdentifierDecl	sb		8156147	0					
ANR	8156152	IdentifierDeclType	int		8156147	0					
ANR	8156153	Identifier	sb		8156147	1					
ANR	8156154	IdentifierDecl	j		8156147	1					
ANR	8156155	IdentifierDeclType	int		8156147	0					
ANR	8156156	Identifier	j		8156147	1					
ANR	8156157	IdentifierDecl	k		8156147	2					
ANR	8156158	IdentifierDeclType	int		8156147	0					
ANR	8156159	Identifier	k		8156147	1					
ANR	8156160	IdentifierDecl	n		8156147	3					
ANR	8156161	IdentifierDeclType	int		8156147	0					
ANR	8156162	Identifier	n		8156147	1					
ANR	8156163	IdentifierDecl	ch		8156147	4					
ANR	8156164	IdentifierDeclType	int		8156147	0					
ANR	8156165	Identifier	ch		8156147	1					
ANR	8156166	IdentifierDecl	run		8156147	5					
ANR	8156167	IdentifierDeclType	int		8156147	0					
ANR	8156168	Identifier	run		8156147	1					
ANR	8156169	IdentifierDecl	channels		8156147	6					
ANR	8156170	IdentifierDeclType	int		8156147	0					
ANR	8156171	Identifier	channels		8156147	1					
ANR	8156172	IdentifierDeclStatement	"int joined_stereo , zero_encoding , chs ;"	7:4:160:197	8156147	1	True				
ANR	8156173	IdentifierDecl	joined_stereo		8156147	0					
ANR	8156174	IdentifierDeclType	int		8156147	0					
ANR	8156175	Identifier	joined_stereo		8156147	1					
ANR	8156176	IdentifierDecl	zero_encoding		8156147	1					
ANR	8156177	IdentifierDeclType	int		8156147	0					
ANR	8156178	Identifier	zero_encoding		8156147	1					
ANR	8156179	IdentifierDecl	chs		8156147	2					
ANR	8156180	IdentifierDeclType	int		8156147	0					
ANR	8156181	Identifier	chs		8156147	1					
ANR	8156182	IdentifierDeclStatement	int type34_first ;	9:4:204:220	8156147	2	True				
ANR	8156183	IdentifierDecl	type34_first		8156147	0					
ANR	8156184	IdentifierDeclType	int		8156147	0					
ANR	8156185	Identifier	type34_first		8156147	1					
ANR	8156186	IdentifierDeclStatement	float type34_div = 0 ;	11:4:227:247	8156147	3	True				
ANR	8156187	IdentifierDecl	type34_div = 0		8156147	0					
ANR	8156188	IdentifierDeclType	float		8156147	0					
ANR	8156189	Identifier	type34_div		8156147	1					
ANR	8156190	AssignmentExpression	type34_div = 0		8156147	2		=			
ANR	8156191	Identifier	type34_div		8156147	0					
ANR	8156192	PrimaryExpression	0		8156147	1					
ANR	8156193	IdentifierDeclStatement	float type34_predictor ;	13:4:254:276	8156147	4	True				
ANR	8156194	IdentifierDecl	type34_predictor		8156147	0					
ANR	8156195	IdentifierDeclType	float		8156147	0					
ANR	8156196	Identifier	type34_predictor		8156147	1					
ANR	8156197	IdentifierDeclStatement	"float samples [ 10 ] , sign_bits [ 16 ] ;"	15:4:283:315	8156147	5	True				
ANR	8156198	IdentifierDecl	samples [ 10 ]		8156147	0					
ANR	8156199	IdentifierDeclType	float [ 10 ]		8156147	0					
ANR	8156200	Identifier	samples		8156147	1					
ANR	8156201	PrimaryExpression	10		8156147	2					
ANR	8156202	IdentifierDecl	sign_bits [ 16 ]		8156147	1					
ANR	8156203	IdentifierDeclType	float [ 16 ]		8156147	0					
ANR	8156204	Identifier	sign_bits		8156147	1					
ANR	8156205	PrimaryExpression	16		8156147	2					
ANR	8156206	IfStatement	if ( length == 0 )		8156147	6					
ANR	8156207	Condition	length == 0	19:8:328:338	8156147	0	True				
ANR	8156208	EqualityExpression	length == 0		8156147	0		==			
ANR	8156209	Identifier	length		8156147	0					
ANR	8156210	PrimaryExpression	0		8156147	1					
ANR	8156211	CompoundStatement		17:21:228:228	8156147	1					
ANR	8156212	ForStatement	for ( sb = sb_min ; sb < sb_max ; sb ++ )		8156147	0					
ANR	8156213	ForInit	sb = sb_min ;	23:13:390:399	8156147	0	True				
ANR	8156214	AssignmentExpression	sb = sb_min		8156147	0		=			
ANR	8156215	Identifier	sb		8156147	0					
ANR	8156216	Identifier	sb_min		8156147	1					
ANR	8156217	Condition	sb < sb_max	23:24:401:411	8156147	1	True				
ANR	8156218	RelationalExpression	sb < sb_max		8156147	0		<			
ANR	8156219	Identifier	sb		8156147	0					
ANR	8156220	Identifier	sb_max		8156147	1					
ANR	8156221	PostIncDecOperationExpression	sb ++	23:37:414:417	8156147	2	True				
ANR	8156222	Identifier	sb		8156147	0					
ANR	8156223	IncDec	++		8156147	1					
ANR	8156224	ExpressionStatement	"build_sb_samples_from_noise ( q , sb )"	25:12:433:468	8156147	3	True				
ANR	8156225	CallExpression	"build_sb_samples_from_noise ( q , sb )"		8156147	0					
ANR	8156226	Callee	build_sb_samples_from_noise		8156147	0					
ANR	8156227	Identifier	build_sb_samples_from_noise		8156147	0					
ANR	8156228	ArgumentList	q		8156147	1					
ANR	8156229	Argument	q		8156147	0					
ANR	8156230	Identifier	q		8156147	0					
ANR	8156231	Argument	sb		8156147	1					
ANR	8156232	Identifier	sb		8156147	0					
ANR	8156233	ReturnStatement	return ;	29:8:481:487	8156147	1	True				
ANR	8156234	ForStatement	for ( sb = sb_min ; sb < sb_max ; sb ++ )		8156147	7					
ANR	8156235	ForInit	sb = sb_min ;	35:9:508:519	8156147	0	True				
ANR	8156236	AssignmentExpression	sb = sb_min		8156147	0		=			
ANR	8156237	Identifier	sb		8156147	0					
ANR	8156238	Identifier	sb_min		8156147	1					
ANR	8156239	Condition	sb < sb_max	35:22:521:531	8156147	1	True				
ANR	8156240	RelationalExpression	sb < sb_max		8156147	0		<			
ANR	8156241	Identifier	sb		8156147	0					
ANR	8156242	Identifier	sb_max		8156147	1					
ANR	8156243	PostIncDecOperationExpression	sb ++	35:35:534:537	8156147	2	True				
ANR	8156244	Identifier	sb		8156147	0					
ANR	8156245	IncDec	++		8156147	1					
ANR	8156246	CompoundStatement		33:41:427:427	8156147	3					
ANR	8156247	ExpressionStatement	FIX_NOISE_IDX ( q -> noise_idx )	37:8:551:578	8156147	0	True				
ANR	8156248	CallExpression	FIX_NOISE_IDX ( q -> noise_idx )		8156147	0					
ANR	8156249	Callee	FIX_NOISE_IDX		8156147	0					
ANR	8156250	Identifier	FIX_NOISE_IDX		8156147	0					
ANR	8156251	ArgumentList	q -> noise_idx		8156147	1					
ANR	8156252	Argument	q -> noise_idx		8156147	0					
ANR	8156253	PtrMemberAccess	q -> noise_idx		8156147	0					
ANR	8156254	Identifier	q		8156147	0					
ANR	8156255	Identifier	noise_idx		8156147	1					
ANR	8156256	ExpressionStatement	channels = q -> nb_channels	41:8:591:616	8156147	1	True				
ANR	8156257	AssignmentExpression	channels = q -> nb_channels		8156147	0		=			
ANR	8156258	Identifier	channels		8156147	0					
ANR	8156259	PtrMemberAccess	q -> nb_channels		8156147	1					
ANR	8156260	Identifier	q		8156147	0					
ANR	8156261	Identifier	nb_channels		8156147	1					
ANR	8156262	IfStatement	if ( q -> nb_channels <= 1 || sb < 12 )		8156147	2					
ANR	8156263	Condition	q -> nb_channels <= 1 || sb < 12	45:12:633:662	8156147	0	True				
ANR	8156264	OrExpression	q -> nb_channels <= 1 || sb < 12		8156147	0		||			
ANR	8156265	RelationalExpression	q -> nb_channels <= 1		8156147	0		<=			
ANR	8156266	PtrMemberAccess	q -> nb_channels		8156147	0					
ANR	8156267	Identifier	q		8156147	0					
ANR	8156268	Identifier	nb_channels		8156147	1					
ANR	8156269	PrimaryExpression	1		8156147	1					
ANR	8156270	RelationalExpression	sb < 12		8156147	1		<			
ANR	8156271	Identifier	sb		8156147	0					
ANR	8156272	PrimaryExpression	12		8156147	1					
ANR	8156273	ExpressionStatement	joined_stereo = 0	47:12:678:695	8156147	1	True				
ANR	8156274	AssignmentExpression	joined_stereo = 0		8156147	0		=			
ANR	8156275	Identifier	joined_stereo		8156147	0					
ANR	8156276	PrimaryExpression	0		8156147	1					
ANR	8156277	ElseStatement	else		8156147	0					
ANR	8156278	IfStatement	if ( sb >= 24 )		8156147	0					
ANR	8156279	Condition	sb >= 24	49:17:715:722	8156147	0	True				
ANR	8156280	RelationalExpression	sb >= 24		8156147	0		>=			
ANR	8156281	Identifier	sb		8156147	0					
ANR	8156282	PrimaryExpression	24		8156147	1					
ANR	8156283	ExpressionStatement	joined_stereo = 1	51:12:738:755	8156147	1	True				
ANR	8156284	AssignmentExpression	joined_stereo = 1		8156147	0		=			
ANR	8156285	Identifier	joined_stereo		8156147	0					
ANR	8156286	PrimaryExpression	1		8156147	1					
ANR	8156287	ElseStatement	else		8156147	0					
ANR	8156288	ExpressionStatement	"joined_stereo = ( BITS_LEFT ( length , gb ) >= 1 ) ? get_bits1 ( gb ) : 0"	55:12:784:848	8156147	0	True				
ANR	8156289	AssignmentExpression	"joined_stereo = ( BITS_LEFT ( length , gb ) >= 1 ) ? get_bits1 ( gb ) : 0"		8156147	0		=			
ANR	8156290	Identifier	joined_stereo		8156147	0					
ANR	8156291	ConditionalExpression	"( BITS_LEFT ( length , gb ) >= 1 ) ? get_bits1 ( gb ) : 0"		8156147	1					
ANR	8156292	Condition	"BITS_LEFT ( length , gb ) >= 1"		8156147	0					
ANR	8156293	RelationalExpression	"BITS_LEFT ( length , gb ) >= 1"		8156147	0		>=			
ANR	8156294	CallExpression	"BITS_LEFT ( length , gb )"		8156147	0					
ANR	8156295	Callee	BITS_LEFT		8156147	0					
ANR	8156296	Identifier	BITS_LEFT		8156147	0					
ANR	8156297	ArgumentList	length		8156147	1					
ANR	8156298	Argument	length		8156147	0					
ANR	8156299	Identifier	length		8156147	0					
ANR	8156300	Argument	gb		8156147	1					
ANR	8156301	Identifier	gb		8156147	0					
ANR	8156302	PrimaryExpression	1		8156147	1					
ANR	8156303	CallExpression	get_bits1 ( gb )		8156147	1					
ANR	8156304	Callee	get_bits1		8156147	0					
ANR	8156305	Identifier	get_bits1		8156147	0					
ANR	8156306	ArgumentList	gb		8156147	1					
ANR	8156307	Argument	gb		8156147	0					
ANR	8156308	Identifier	gb		8156147	0					
ANR	8156309	PrimaryExpression	0		8156147	2					
ANR	8156310	IfStatement	if ( joined_stereo )		8156147	3					
ANR	8156311	Condition	joined_stereo	59:12:865:877	8156147	0	True				
ANR	8156312	Identifier	joined_stereo		8156147	0					
ANR	8156313	CompoundStatement		57:27:767:767	8156147	1					
ANR	8156314	IfStatement	"if ( BITS_LEFT ( length , gb ) >= 16 )"		8156147	0					
ANR	8156315	Condition	"BITS_LEFT ( length , gb ) >= 16"	61:16:899:924	8156147	0	True				
ANR	8156316	RelationalExpression	"BITS_LEFT ( length , gb ) >= 16"		8156147	0		>=			
ANR	8156317	CallExpression	"BITS_LEFT ( length , gb )"		8156147	0					
ANR	8156318	Callee	BITS_LEFT		8156147	0					
ANR	8156319	Identifier	BITS_LEFT		8156147	0					
ANR	8156320	ArgumentList	length		8156147	1					
ANR	8156321	Argument	length		8156147	0					
ANR	8156322	Identifier	length		8156147	0					
ANR	8156323	Argument	gb		8156147	1					
ANR	8156324	Identifier	gb		8156147	0					
ANR	8156325	PrimaryExpression	16		8156147	1					
ANR	8156326	ForStatement	for ( j = 0 ; j < 16 ; j ++ )		8156147	1					
ANR	8156327	ForInit	j = 0 ;	63:21:949:954	8156147	0	True				
ANR	8156328	AssignmentExpression	j = 0		8156147	0		=			
ANR	8156329	Identifier	j		8156147	0					
ANR	8156330	PrimaryExpression	0		8156147	1					
ANR	8156331	Condition	j < 16	63:28:956:961	8156147	1	True				
ANR	8156332	RelationalExpression	j < 16		8156147	0		<			
ANR	8156333	Identifier	j		8156147	0					
ANR	8156334	PrimaryExpression	16		8156147	1					
ANR	8156335	PostIncDecOperationExpression	j ++	63:36:964:966	8156147	2	True				
ANR	8156336	Identifier	j		8156147	0					
ANR	8156337	IncDec	++		8156147	1					
ANR	8156338	ExpressionStatement	sign_bits [ j ] = get_bits1 ( gb )	65:20:990:1019	8156147	3	True				
ANR	8156339	AssignmentExpression	sign_bits [ j ] = get_bits1 ( gb )		8156147	0		=			
ANR	8156340	ArrayIndexing	sign_bits [ j ]		8156147	0					
ANR	8156341	Identifier	sign_bits		8156147	0					
ANR	8156342	Identifier	j		8156147	1					
ANR	8156343	CallExpression	get_bits1 ( gb )		8156147	1					
ANR	8156344	Callee	get_bits1		8156147	0					
ANR	8156345	Identifier	get_bits1		8156147	0					
ANR	8156346	ArgumentList	gb		8156147	1					
ANR	8156347	Argument	gb		8156147	0					
ANR	8156348	Identifier	gb		8156147	0					
ANR	8156349	ForStatement	for ( j = 0 ; j < 64 ; j ++ )		8156147	1					
ANR	8156350	ForInit	j = 0 ;	69:17:1041:1046	8156147	0	True				
ANR	8156351	AssignmentExpression	j = 0		8156147	0		=			
ANR	8156352	Identifier	j		8156147	0					
ANR	8156353	PrimaryExpression	0		8156147	1					
ANR	8156354	Condition	j < 64	69:24:1048:1053	8156147	1	True				
ANR	8156355	RelationalExpression	j < 64		8156147	0		<			
ANR	8156356	Identifier	j		8156147	0					
ANR	8156357	PrimaryExpression	64		8156147	1					
ANR	8156358	PostIncDecOperationExpression	j ++	69:32:1056:1058	8156147	2	True				
ANR	8156359	Identifier	j		8156147	0					
ANR	8156360	IncDec	++		8156147	1					
ANR	8156361	IfStatement	if ( q -> coding_method [ 1 ] [ sb ] [ j ] > q -> coding_method [ 0 ] [ sb ] [ j ] )		8156147	3					
ANR	8156362	Condition	q -> coding_method [ 1 ] [ sb ] [ j ] > q -> coding_method [ 0 ] [ sb ] [ j ]	71:20:1082:1136	8156147	0	True				
ANR	8156363	RelationalExpression	q -> coding_method [ 1 ] [ sb ] [ j ] > q -> coding_method [ 0 ] [ sb ] [ j ]		8156147	0		>			
ANR	8156364	ArrayIndexing	q -> coding_method [ 1 ] [ sb ] [ j ]		8156147	0					
ANR	8156365	ArrayIndexing	q -> coding_method [ 1 ] [ sb ]		8156147	0					
ANR	8156366	ArrayIndexing	q -> coding_method [ 1 ]		8156147	0					
ANR	8156367	PtrMemberAccess	q -> coding_method		8156147	0					
ANR	8156368	Identifier	q		8156147	0					
ANR	8156369	Identifier	coding_method		8156147	1					
ANR	8156370	PrimaryExpression	1		8156147	1					
ANR	8156371	Identifier	sb		8156147	1					
ANR	8156372	Identifier	j		8156147	1					
ANR	8156373	ArrayIndexing	q -> coding_method [ 0 ] [ sb ] [ j ]		8156147	1					
ANR	8156374	ArrayIndexing	q -> coding_method [ 0 ] [ sb ]		8156147	0					
ANR	8156375	ArrayIndexing	q -> coding_method [ 0 ]		8156147	0					
ANR	8156376	PtrMemberAccess	q -> coding_method		8156147	0					
ANR	8156377	Identifier	q		8156147	0					
ANR	8156378	Identifier	coding_method		8156147	1					
ANR	8156379	PrimaryExpression	0		8156147	1					
ANR	8156380	Identifier	sb		8156147	1					
ANR	8156381	Identifier	j		8156147	1					
ANR	8156382	ExpressionStatement	q -> coding_method [ 0 ] [ sb ] [ j ] = q -> coding_method [ 1 ] [ sb ] [ j ]	73:20:1160:1215	8156147	1	True				
ANR	8156383	AssignmentExpression	q -> coding_method [ 0 ] [ sb ] [ j ] = q -> coding_method [ 1 ] [ sb ] [ j ]		8156147	0		=			
ANR	8156384	ArrayIndexing	q -> coding_method [ 0 ] [ sb ] [ j ]		8156147	0					
ANR	8156385	ArrayIndexing	q -> coding_method [ 0 ] [ sb ]		8156147	0					
ANR	8156386	ArrayIndexing	q -> coding_method [ 0 ]		8156147	0					
ANR	8156387	PtrMemberAccess	q -> coding_method		8156147	0					
ANR	8156388	Identifier	q		8156147	0					
ANR	8156389	Identifier	coding_method		8156147	1					
ANR	8156390	PrimaryExpression	0		8156147	1					
ANR	8156391	Identifier	sb		8156147	1					
ANR	8156392	Identifier	j		8156147	1					
ANR	8156393	ArrayIndexing	q -> coding_method [ 1 ] [ sb ] [ j ]		8156147	1					
ANR	8156394	ArrayIndexing	q -> coding_method [ 1 ] [ sb ]		8156147	0					
ANR	8156395	ArrayIndexing	q -> coding_method [ 1 ]		8156147	0					
ANR	8156396	PtrMemberAccess	q -> coding_method		8156147	0					
ANR	8156397	Identifier	q		8156147	0					
ANR	8156398	Identifier	coding_method		8156147	1					
ANR	8156399	PrimaryExpression	1		8156147	1					
ANR	8156400	Identifier	sb		8156147	1					
ANR	8156401	Identifier	j		8156147	1					
ANR	8156402	ExpressionStatement	"fix_coding_method_array ( sb , q -> nb_channels , q -> coding_method )"	77:12:1232:1293	8156147	2	True				
ANR	8156403	CallExpression	"fix_coding_method_array ( sb , q -> nb_channels , q -> coding_method )"		8156147	0					
ANR	8156404	Callee	fix_coding_method_array		8156147	0					
ANR	8156405	Identifier	fix_coding_method_array		8156147	0					
ANR	8156406	ArgumentList	sb		8156147	1					
ANR	8156407	Argument	sb		8156147	0					
ANR	8156408	Identifier	sb		8156147	0					
ANR	8156409	Argument	q -> nb_channels		8156147	1					
ANR	8156410	PtrMemberAccess	q -> nb_channels		8156147	0					
ANR	8156411	Identifier	q		8156147	0					
ANR	8156412	Identifier	nb_channels		8156147	1					
ANR	8156413	Argument	q -> coding_method		8156147	2					
ANR	8156414	PtrMemberAccess	q -> coding_method		8156147	0					
ANR	8156415	Identifier	q		8156147	0					
ANR	8156416	Identifier	coding_method		8156147	1					
ANR	8156417	ExpressionStatement	channels = 1	79:12:1308:1320	8156147	3	True				
ANR	8156418	AssignmentExpression	channels = 1		8156147	0		=			
ANR	8156419	Identifier	channels		8156147	0					
ANR	8156420	PrimaryExpression	1		8156147	1					
ANR	8156421	ForStatement	for ( ch = 0 ; ch < channels ; ch ++ )		8156147	4					
ANR	8156422	ForInit	ch = 0 ;	85:13:1349:1355	8156147	0	True				
ANR	8156423	AssignmentExpression	ch = 0		8156147	0		=			
ANR	8156424	Identifier	ch		8156147	0					
ANR	8156425	PrimaryExpression	0		8156147	1					
ANR	8156426	Condition	ch < channels	85:21:1357:1369	8156147	1	True				
ANR	8156427	RelationalExpression	ch < channels		8156147	0		<			
ANR	8156428	Identifier	ch		8156147	0					
ANR	8156429	Identifier	channels		8156147	1					
ANR	8156430	PostIncDecOperationExpression	ch ++	85:36:1372:1375	8156147	2	True				
ANR	8156431	Identifier	ch		8156147	0					
ANR	8156432	IncDec	++		8156147	1					
ANR	8156433	CompoundStatement		83:42:1265:1265	8156147	3					
ANR	8156434	ExpressionStatement	"zero_encoding = ( BITS_LEFT ( length , gb ) >= 1 ) ? get_bits1 ( gb ) : 0"	87:12:1393:1456	8156147	0	True				
ANR	8156435	AssignmentExpression	"zero_encoding = ( BITS_LEFT ( length , gb ) >= 1 ) ? get_bits1 ( gb ) : 0"		8156147	0		=			
ANR	8156436	Identifier	zero_encoding		8156147	0					
ANR	8156437	ConditionalExpression	"( BITS_LEFT ( length , gb ) >= 1 ) ? get_bits1 ( gb ) : 0"		8156147	1					
ANR	8156438	Condition	"BITS_LEFT ( length , gb ) >= 1"		8156147	0					
ANR	8156439	RelationalExpression	"BITS_LEFT ( length , gb ) >= 1"		8156147	0		>=			
ANR	8156440	CallExpression	"BITS_LEFT ( length , gb )"		8156147	0					
ANR	8156441	Callee	BITS_LEFT		8156147	0					
ANR	8156442	Identifier	BITS_LEFT		8156147	0					
ANR	8156443	ArgumentList	length		8156147	1					
ANR	8156444	Argument	length		8156147	0					
ANR	8156445	Identifier	length		8156147	0					
ANR	8156446	Argument	gb		8156147	1					
ANR	8156447	Identifier	gb		8156147	0					
ANR	8156448	PrimaryExpression	1		8156147	1					
ANR	8156449	CallExpression	get_bits1 ( gb )		8156147	1					
ANR	8156450	Callee	get_bits1		8156147	0					
ANR	8156451	Identifier	get_bits1		8156147	0					
ANR	8156452	ArgumentList	gb		8156147	1					
ANR	8156453	Argument	gb		8156147	0					
ANR	8156454	Identifier	gb		8156147	0					
ANR	8156455	PrimaryExpression	0		8156147	2					
ANR	8156456	ExpressionStatement	type34_predictor = 0.0	89:12:1471:1493	8156147	1	True				
ANR	8156457	AssignmentExpression	type34_predictor = 0.0		8156147	0		=			
ANR	8156458	Identifier	type34_predictor		8156147	0					
ANR	8156459	PrimaryExpression	0.0		8156147	1					
ANR	8156460	ExpressionStatement	type34_first = 1	91:12:1508:1524	8156147	2	True				
ANR	8156461	AssignmentExpression	type34_first = 1		8156147	0		=			
ANR	8156462	Identifier	type34_first		8156147	0					
ANR	8156463	PrimaryExpression	1		8156147	1					
ANR	8156464	ForStatement	for ( j = 0 ; j < 128 ; )		8156147	3					
ANR	8156465	ForInit	j = 0 ;	95:17:1546:1551	8156147	0	True				
ANR	8156466	AssignmentExpression	j = 0		8156147	0		=			
ANR	8156467	Identifier	j		8156147	0					
ANR	8156468	PrimaryExpression	0		8156147	1					
ANR	8156469	Condition	j < 128	95:24:1553:1559	8156147	1	True				
ANR	8156470	RelationalExpression	j < 128		8156147	0		<			
ANR	8156471	Identifier	j		8156147	0					
ANR	8156472	PrimaryExpression	128		8156147	1					
ANR	8156473	CompoundStatement		93:35:1451:1451	8156147	2					
ANR	8156474	SwitchStatement	switch ( q -> coding_method [ ch ] [ sb ] [ j / 2 ] )		8156147	0					
ANR	8156475	Condition	q -> coding_method [ ch ] [ sb ] [ j / 2 ]	97:24:1591:1621	8156147	0	True				
ANR	8156476	ArrayIndexing	q -> coding_method [ ch ] [ sb ] [ j / 2 ]		8156147	0					
ANR	8156477	ArrayIndexing	q -> coding_method [ ch ] [ sb ]		8156147	0					
ANR	8156478	ArrayIndexing	q -> coding_method [ ch ]		8156147	0					
ANR	8156479	PtrMemberAccess	q -> coding_method		8156147	0					
ANR	8156480	Identifier	q		8156147	0					
ANR	8156481	Identifier	coding_method		8156147	1					
ANR	8156482	Identifier	ch		8156147	1					
ANR	8156483	Identifier	sb		8156147	1					
ANR	8156484	MultiplicativeExpression	j / 2		8156147	1		/			
ANR	8156485	Identifier	j		8156147	0					
ANR	8156486	PrimaryExpression	2		8156147	1					
ANR	8156487	CompoundStatement		95:57:1511:1511	8156147	1					
ANR	8156488	Label	case 8 :	99:20:1647:1653	8156147	0	True				
ANR	8156489	IfStatement	"if ( BITS_LEFT ( length , gb ) >= 10 )"		8156147	1					
ANR	8156490	Condition	"BITS_LEFT ( length , gb ) >= 10"	101:28:1684:1709	8156147	0	True				
ANR	8156491	RelationalExpression	"BITS_LEFT ( length , gb ) >= 10"		8156147	0		>=			
ANR	8156492	CallExpression	"BITS_LEFT ( length , gb )"		8156147	0					
ANR	8156493	Callee	BITS_LEFT		8156147	0					
ANR	8156494	Identifier	BITS_LEFT		8156147	0					
ANR	8156495	ArgumentList	length		8156147	1					
ANR	8156496	Argument	length		8156147	0					
ANR	8156497	Identifier	length		8156147	0					
ANR	8156498	Argument	gb		8156147	1					
ANR	8156499	Identifier	gb		8156147	0					
ANR	8156500	PrimaryExpression	10		8156147	1					
ANR	8156501	CompoundStatement		99:56:1599:1599	8156147	1					
ANR	8156502	IfStatement	if ( zero_encoding )		8156147	0					
ANR	8156503	Condition	zero_encoding	103:32:1747:1759	8156147	0	True				
ANR	8156504	Identifier	zero_encoding		8156147	0					
ANR	8156505	CompoundStatement		101:47:1649:1649	8156147	1					
ANR	8156506	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8156147	0					
ANR	8156507	ForInit	k = 0 ;	105:37:1802:1807	8156147	0	True				
ANR	8156508	AssignmentExpression	k = 0		8156147	0		=			
ANR	8156509	Identifier	k		8156147	0					
ANR	8156510	PrimaryExpression	0		8156147	1					
ANR	8156511	Condition	k < 5	105:44:1809:1813	8156147	1	True				
ANR	8156512	RelationalExpression	k < 5		8156147	0		<			
ANR	8156513	Identifier	k		8156147	0					
ANR	8156514	PrimaryExpression	5		8156147	1					
ANR	8156515	PostIncDecOperationExpression	k ++	105:51:1816:1818	8156147	2	True				
ANR	8156516	Identifier	k		8156147	0					
ANR	8156517	IncDec	++		8156147	1					
ANR	8156518	CompoundStatement		103:56:1708:1708	8156147	3					
ANR	8156519	IfStatement	if ( ( j + 2 * k ) >= 128 )		8156147	0					
ANR	8156520	Condition	( j + 2 * k ) >= 128	107:40:1864:1881	8156147	0	True				
ANR	8156521	RelationalExpression	( j + 2 * k ) >= 128		8156147	0		>=			
ANR	8156522	AdditiveExpression	j + 2 * k		8156147	0		+			
ANR	8156523	Identifier	j		8156147	0					
ANR	8156524	MultiplicativeExpression	2 * k		8156147	1		*			
ANR	8156525	PrimaryExpression	2		8156147	0					
ANR	8156526	Identifier	k		8156147	1					
ANR	8156527	PrimaryExpression	128		8156147	1					
ANR	8156528	BreakStatement	break ;	109:40:1925:1930	8156147	1	True				
ANR	8156529	ExpressionStatement	samples [ 2 * k ] = get_bits1 ( gb ) ? dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ] : 0	111:36:1969:2052	8156147	1	True				
ANR	8156530	AssignmentExpression	samples [ 2 * k ] = get_bits1 ( gb ) ? dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ] : 0		8156147	0		=			
ANR	8156531	ArrayIndexing	samples [ 2 * k ]		8156147	0					
ANR	8156532	Identifier	samples		8156147	0					
ANR	8156533	MultiplicativeExpression	2 * k		8156147	1		*			
ANR	8156534	PrimaryExpression	2		8156147	0					
ANR	8156535	Identifier	k		8156147	1					
ANR	8156536	ConditionalExpression	get_bits1 ( gb ) ? dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ] : 0		8156147	1					
ANR	8156537	Condition	get_bits1 ( gb )		8156147	0					
ANR	8156538	CallExpression	get_bits1 ( gb )		8156147	0					
ANR	8156539	Callee	get_bits1		8156147	0					
ANR	8156540	Identifier	get_bits1		8156147	0					
ANR	8156541	ArgumentList	gb		8156147	1					
ANR	8156542	Argument	gb		8156147	0					
ANR	8156543	Identifier	gb		8156147	0					
ANR	8156544	ArrayIndexing	dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8156147	1					
ANR	8156545	ArrayIndexing	dequant_1bit [ joined_stereo ]		8156147	0					
ANR	8156546	Identifier	dequant_1bit		8156147	0					
ANR	8156547	Identifier	joined_stereo		8156147	1					
ANR	8156548	MultiplicativeExpression	2 * get_bits1 ( gb )		8156147	1		*			
ANR	8156549	PrimaryExpression	2		8156147	0					
ANR	8156550	CallExpression	get_bits1 ( gb )		8156147	1					
ANR	8156551	Callee	get_bits1		8156147	0					
ANR	8156552	Identifier	get_bits1		8156147	0					
ANR	8156553	ArgumentList	gb		8156147	1					
ANR	8156554	Argument	gb		8156147	0					
ANR	8156555	Identifier	gb		8156147	0					
ANR	8156556	PrimaryExpression	0		8156147	2					
ANR	8156557	ElseStatement	else		8156147	0					
ANR	8156558	CompoundStatement		113:35:2012:2012	8156147	0					
ANR	8156559	ExpressionStatement	"n = get_bits ( gb , 8 )"	117:32:2160:2179	8156147	0	True				
ANR	8156560	AssignmentExpression	"n = get_bits ( gb , 8 )"		8156147	0		=			
ANR	8156561	Identifier	n		8156147	0					
ANR	8156562	CallExpression	"get_bits ( gb , 8 )"		8156147	1					
ANR	8156563	Callee	get_bits		8156147	0					
ANR	8156564	Identifier	get_bits		8156147	0					
ANR	8156565	ArgumentList	gb		8156147	1					
ANR	8156566	Argument	gb		8156147	0					
ANR	8156567	Identifier	gb		8156147	0					
ANR	8156568	Argument	8		8156147	1					
ANR	8156569	PrimaryExpression	8		8156147	0					
ANR	8156570	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8156147	1					
ANR	8156571	ForInit	k = 0 ;	119:37:2219:2224	8156147	0	True				
ANR	8156572	AssignmentExpression	k = 0		8156147	0		=			
ANR	8156573	Identifier	k		8156147	0					
ANR	8156574	PrimaryExpression	0		8156147	1					
ANR	8156575	Condition	k < 5	119:44:2226:2230	8156147	1	True				
ANR	8156576	RelationalExpression	k < 5		8156147	0		<			
ANR	8156577	Identifier	k		8156147	0					
ANR	8156578	PrimaryExpression	5		8156147	1					
ANR	8156579	PostIncDecOperationExpression	k ++	119:51:2233:2235	8156147	2	True				
ANR	8156580	Identifier	k		8156147	0					
ANR	8156581	IncDec	++		8156147	1					
ANR	8156582	ExpressionStatement	samples [ 2 * k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]	121:36:2275:2347	8156147	3	True				
ANR	8156583	AssignmentExpression	samples [ 2 * k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8156147	0		=			
ANR	8156584	ArrayIndexing	samples [ 2 * k ]		8156147	0					
ANR	8156585	Identifier	samples		8156147	0					
ANR	8156586	MultiplicativeExpression	2 * k		8156147	1		*			
ANR	8156587	PrimaryExpression	2		8156147	0					
ANR	8156588	Identifier	k		8156147	1					
ANR	8156589	ArrayIndexing	dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8156147	1					
ANR	8156590	ArrayIndexing	dequant_1bit [ joined_stereo ]		8156147	0					
ANR	8156591	Identifier	dequant_1bit		8156147	0					
ANR	8156592	Identifier	joined_stereo		8156147	1					
ANR	8156593	ArrayIndexing	random_dequant_index [ n ] [ k ]		8156147	1					
ANR	8156594	ArrayIndexing	random_dequant_index [ n ]		8156147	0					
ANR	8156595	Identifier	random_dequant_index		8156147	0					
ANR	8156596	Identifier	n		8156147	1					
ANR	8156597	Identifier	k		8156147	1					
ANR	8156598	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8156147	1					
ANR	8156599	ForInit	k = 0 ;	125:33:2414:2419	8156147	0	True				
ANR	8156600	AssignmentExpression	k = 0		8156147	0		=			
ANR	8156601	Identifier	k		8156147	0					
ANR	8156602	PrimaryExpression	0		8156147	1					
ANR	8156603	Condition	k < 5	125:40:2421:2425	8156147	1	True				
ANR	8156604	RelationalExpression	k < 5		8156147	0		<			
ANR	8156605	Identifier	k		8156147	0					
ANR	8156606	PrimaryExpression	5		8156147	1					
ANR	8156607	PostIncDecOperationExpression	k ++	125:47:2428:2430	8156147	2	True				
ANR	8156608	Identifier	k		8156147	0					
ANR	8156609	IncDec	++		8156147	1					
ANR	8156610	ExpressionStatement	"samples [ 2 * k + 1 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	127:32:2466:2522	8156147	3	True				
ANR	8156611	AssignmentExpression	"samples [ 2 * k + 1 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	0		=			
ANR	8156612	ArrayIndexing	samples [ 2 * k + 1 ]		8156147	0					
ANR	8156613	Identifier	samples		8156147	0					
ANR	8156614	AdditiveExpression	2 * k + 1		8156147	1		+			
ANR	8156615	MultiplicativeExpression	2 * k		8156147	0		*			
ANR	8156616	PrimaryExpression	2		8156147	0					
ANR	8156617	Identifier	k		8156147	1					
ANR	8156618	PrimaryExpression	1		8156147	1					
ANR	8156619	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	1					
ANR	8156620	Callee	SB_DITHERING_NOISE		8156147	0					
ANR	8156621	Identifier	SB_DITHERING_NOISE		8156147	0					
ANR	8156622	ArgumentList	sb		8156147	1					
ANR	8156623	Argument	sb		8156147	0					
ANR	8156624	Identifier	sb		8156147	0					
ANR	8156625	Argument	q -> noise_idx		8156147	1					
ANR	8156626	PtrMemberAccess	q -> noise_idx		8156147	0					
ANR	8156627	Identifier	q		8156147	0					
ANR	8156628	Identifier	noise_idx		8156147	1					
ANR	8156629	ElseStatement	else		8156147	0					
ANR	8156630	CompoundStatement		127:31:2443:2443	8156147	0					
ANR	8156631	ForStatement	for ( k = 0 ; k < 10 ; k ++ )		8156147	0					
ANR	8156632	ForInit	k = 0 ;	131:33:2592:2597	8156147	0	True				
ANR	8156633	AssignmentExpression	k = 0		8156147	0		=			
ANR	8156634	Identifier	k		8156147	0					
ANR	8156635	PrimaryExpression	0		8156147	1					
ANR	8156636	Condition	k < 10	131:40:2599:2604	8156147	1	True				
ANR	8156637	RelationalExpression	k < 10		8156147	0		<			
ANR	8156638	Identifier	k		8156147	0					
ANR	8156639	PrimaryExpression	10		8156147	1					
ANR	8156640	PostIncDecOperationExpression	k ++	131:48:2607:2609	8156147	2	True				
ANR	8156641	Identifier	k		8156147	0					
ANR	8156642	IncDec	++		8156147	1					
ANR	8156643	ExpressionStatement	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	133:32:2645:2693	8156147	3	True				
ANR	8156644	AssignmentExpression	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	0		=			
ANR	8156645	ArrayIndexing	samples [ k ]		8156147	0					
ANR	8156646	Identifier	samples		8156147	0					
ANR	8156647	Identifier	k		8156147	1					
ANR	8156648	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	1					
ANR	8156649	Callee	SB_DITHERING_NOISE		8156147	0					
ANR	8156650	Identifier	SB_DITHERING_NOISE		8156147	0					
ANR	8156651	ArgumentList	sb		8156147	1					
ANR	8156652	Argument	sb		8156147	0					
ANR	8156653	Identifier	sb		8156147	0					
ANR	8156654	Argument	q -> noise_idx		8156147	1					
ANR	8156655	PtrMemberAccess	q -> noise_idx		8156147	0					
ANR	8156656	Identifier	q		8156147	0					
ANR	8156657	Identifier	noise_idx		8156147	1					
ANR	8156658	ExpressionStatement	run = 10	137:24:2747:2755	8156147	2	True				
ANR	8156659	AssignmentExpression	run = 10		8156147	0		=			
ANR	8156660	Identifier	run		8156147	0					
ANR	8156661	PrimaryExpression	10		8156147	1					
ANR	8156662	BreakStatement	break ;	139:24:2782:2787	8156147	3	True				
ANR	8156663	Label	case 10 :	143:20:2812:2819	8156147	4	True				
ANR	8156664	IfStatement	"if ( BITS_LEFT ( length , gb ) >= 1 )"		8156147	5					
ANR	8156665	Condition	"BITS_LEFT ( length , gb ) >= 1"	145:28:2850:2874	8156147	0	True				
ANR	8156666	RelationalExpression	"BITS_LEFT ( length , gb ) >= 1"		8156147	0		>=			
ANR	8156667	CallExpression	"BITS_LEFT ( length , gb )"		8156147	0					
ANR	8156668	Callee	BITS_LEFT		8156147	0					
ANR	8156669	Identifier	BITS_LEFT		8156147	0					
ANR	8156670	ArgumentList	length		8156147	1					
ANR	8156671	Argument	length		8156147	0					
ANR	8156672	Identifier	length		8156147	0					
ANR	8156673	Argument	gb		8156147	1					
ANR	8156674	Identifier	gb		8156147	0					
ANR	8156675	PrimaryExpression	1		8156147	1					
ANR	8156676	CompoundStatement		145:28:2795:2809	8156147	1					
ANR	8156677	IdentifierDeclStatement	float f = 0.81 ;	147:28:2908:2922	8156147	0	True				
ANR	8156678	IdentifierDecl	f = 0.81		8156147	0					
ANR	8156679	IdentifierDeclType	float		8156147	0					
ANR	8156680	Identifier	f		8156147	1					
ANR	8156681	AssignmentExpression	f = 0.81		8156147	2		=			
ANR	8156682	Identifier	f		8156147	0					
ANR	8156683	PrimaryExpression	0.81		8156147	1					
ANR	8156684	IfStatement	if ( get_bits1 ( gb ) )		8156147	1					
ANR	8156685	Condition	get_bits1 ( gb )	151:32:2959:2971	8156147	0	True				
ANR	8156686	CallExpression	get_bits1 ( gb )		8156147	0					
ANR	8156687	Callee	get_bits1		8156147	0					
ANR	8156688	Identifier	get_bits1		8156147	0					
ANR	8156689	ArgumentList	gb		8156147	1					
ANR	8156690	Argument	gb		8156147	0					
ANR	8156691	Identifier	gb		8156147	0					
ANR	8156692	ExpressionStatement	f = - f	153:32:3007:3013	8156147	1	True				
ANR	8156693	AssignmentExpression	f = - f		8156147	0		=			
ANR	8156694	Identifier	f		8156147	0					
ANR	8156695	UnaryOperationExpression	- f		8156147	1					
ANR	8156696	UnaryOperator	-		8156147	0					
ANR	8156697	Identifier	f		8156147	1					
ANR	8156698	ExpressionStatement	f -= noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ] * 9.0 / 40.0	155:28:3044:3111	8156147	2	True				
ANR	8156699	AssignmentExpression	f -= noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ] * 9.0 / 40.0		8156147	0		-=			
ANR	8156700	Identifier	f		8156147	0					
ANR	8156701	MultiplicativeExpression	noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ] * 9.0 / 40.0		8156147	1		*			
ANR	8156702	ArrayIndexing	noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ]		8156147	0					
ANR	8156703	Identifier	noise_samples		8156147	0					
ANR	8156704	BitAndExpression	( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127		8156147	1		&			
ANR	8156705	MultiplicativeExpression	( sb + 1 ) * ( j + 5 * ch + 1 )		8156147	0		*			
ANR	8156706	AdditiveExpression	sb + 1		8156147	0		+			
ANR	8156707	Identifier	sb		8156147	0					
ANR	8156708	PrimaryExpression	1		8156147	1					
ANR	8156709	AdditiveExpression	j + 5 * ch + 1		8156147	1		+			
ANR	8156710	Identifier	j		8156147	0					
ANR	8156711	AdditiveExpression	5 * ch + 1		8156147	1		+			
ANR	8156712	MultiplicativeExpression	5 * ch		8156147	0		*			
ANR	8156713	PrimaryExpression	5		8156147	0					
ANR	8156714	Identifier	ch		8156147	1					
ANR	8156715	PrimaryExpression	1		8156147	1					
ANR	8156716	PrimaryExpression	127		8156147	1					
ANR	8156717	MultiplicativeExpression	9.0 / 40.0		8156147	1		/			
ANR	8156718	PrimaryExpression	9.0		8156147	0					
ANR	8156719	PrimaryExpression	40.0		8156147	1					
ANR	8156720	ExpressionStatement	samples [ 0 ] = f	157:28:3142:3156	8156147	3	True				
ANR	8156721	AssignmentExpression	samples [ 0 ] = f		8156147	0		=			
ANR	8156722	ArrayIndexing	samples [ 0 ]		8156147	0					
ANR	8156723	Identifier	samples		8156147	0					
ANR	8156724	PrimaryExpression	0		8156147	1					
ANR	8156725	Identifier	f		8156147	1					
ANR	8156726	ElseStatement	else		8156147	0					
ANR	8156727	CompoundStatement		157:31:3077:3077	8156147	0					
ANR	8156728	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	161:28:3221:3269	8156147	0	True				
ANR	8156729	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	0		=			
ANR	8156730	ArrayIndexing	samples [ 0 ]		8156147	0					
ANR	8156731	Identifier	samples		8156147	0					
ANR	8156732	PrimaryExpression	0		8156147	1					
ANR	8156733	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	1					
ANR	8156734	Callee	SB_DITHERING_NOISE		8156147	0					
ANR	8156735	Identifier	SB_DITHERING_NOISE		8156147	0					
ANR	8156736	ArgumentList	sb		8156147	1					
ANR	8156737	Argument	sb		8156147	0					
ANR	8156738	Identifier	sb		8156147	0					
ANR	8156739	Argument	q -> noise_idx		8156147	1					
ANR	8156740	PtrMemberAccess	q -> noise_idx		8156147	0					
ANR	8156741	Identifier	q		8156147	0					
ANR	8156742	Identifier	noise_idx		8156147	1					
ANR	8156743	ExpressionStatement	run = 1	165:24:3323:3330	8156147	6	True				
ANR	8156744	AssignmentExpression	run = 1		8156147	0		=			
ANR	8156745	Identifier	run		8156147	0					
ANR	8156746	PrimaryExpression	1		8156147	1					
ANR	8156747	BreakStatement	break ;	167:24:3357:3362	8156147	7	True				
ANR	8156748	Label	case 16 :	171:20:3387:3394	8156147	8	True				
ANR	8156749	IfStatement	"if ( BITS_LEFT ( length , gb ) >= 10 )"		8156147	9					
ANR	8156750	Condition	"BITS_LEFT ( length , gb ) >= 10"	173:28:3425:3450	8156147	0	True				
ANR	8156751	RelationalExpression	"BITS_LEFT ( length , gb ) >= 10"		8156147	0		>=			
ANR	8156752	CallExpression	"BITS_LEFT ( length , gb )"		8156147	0					
ANR	8156753	Callee	BITS_LEFT		8156147	0					
ANR	8156754	Identifier	BITS_LEFT		8156147	0					
ANR	8156755	ArgumentList	length		8156147	1					
ANR	8156756	Argument	length		8156147	0					
ANR	8156757	Identifier	length		8156147	0					
ANR	8156758	Argument	gb		8156147	1					
ANR	8156759	Identifier	gb		8156147	0					
ANR	8156760	PrimaryExpression	10		8156147	1					
ANR	8156761	CompoundStatement		171:56:3340:3340	8156147	1					
ANR	8156762	IfStatement	if ( zero_encoding )		8156147	0					
ANR	8156763	Condition	zero_encoding	175:32:3488:3500	8156147	0	True				
ANR	8156764	Identifier	zero_encoding		8156147	0					
ANR	8156765	CompoundStatement		173:47:3390:3390	8156147	1					
ANR	8156766	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8156147	0					
ANR	8156767	ForInit	k = 0 ;	177:37:3543:3548	8156147	0	True				
ANR	8156768	AssignmentExpression	k = 0		8156147	0		=			
ANR	8156769	Identifier	k		8156147	0					
ANR	8156770	PrimaryExpression	0		8156147	1					
ANR	8156771	Condition	k < 5	177:44:3550:3554	8156147	1	True				
ANR	8156772	RelationalExpression	k < 5		8156147	0		<			
ANR	8156773	Identifier	k		8156147	0					
ANR	8156774	PrimaryExpression	5		8156147	1					
ANR	8156775	PostIncDecOperationExpression	k ++	177:51:3557:3559	8156147	2	True				
ANR	8156776	Identifier	k		8156147	0					
ANR	8156777	IncDec	++		8156147	1					
ANR	8156778	CompoundStatement		175:56:3449:3449	8156147	3					
ANR	8156779	IfStatement	if ( ( j + k ) >= 128 )		8156147	0					
ANR	8156780	Condition	( j + k ) >= 128	179:40:3605:3618	8156147	0	True				
ANR	8156781	RelationalExpression	( j + k ) >= 128		8156147	0		>=			
ANR	8156782	AdditiveExpression	j + k		8156147	0		+			
ANR	8156783	Identifier	j		8156147	0					
ANR	8156784	Identifier	k		8156147	1					
ANR	8156785	PrimaryExpression	128		8156147	1					
ANR	8156786	BreakStatement	break ;	181:40:3662:3667	8156147	1	True				
ANR	8156787	ExpressionStatement	samples [ k ] = ( get_bits1 ( gb ) == 0 ) ? 0 : dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]	183:36:3706:3792	8156147	1	True				
ANR	8156788	AssignmentExpression	samples [ k ] = ( get_bits1 ( gb ) == 0 ) ? 0 : dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8156147	0		=			
ANR	8156789	ArrayIndexing	samples [ k ]		8156147	0					
ANR	8156790	Identifier	samples		8156147	0					
ANR	8156791	Identifier	k		8156147	1					
ANR	8156792	ConditionalExpression	( get_bits1 ( gb ) == 0 ) ? 0 : dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8156147	1					
ANR	8156793	Condition	get_bits1 ( gb ) == 0		8156147	0					
ANR	8156794	EqualityExpression	get_bits1 ( gb ) == 0		8156147	0		==			
ANR	8156795	CallExpression	get_bits1 ( gb )		8156147	0					
ANR	8156796	Callee	get_bits1		8156147	0					
ANR	8156797	Identifier	get_bits1		8156147	0					
ANR	8156798	ArgumentList	gb		8156147	1					
ANR	8156799	Argument	gb		8156147	0					
ANR	8156800	Identifier	gb		8156147	0					
ANR	8156801	PrimaryExpression	0		8156147	1					
ANR	8156802	PrimaryExpression	0		8156147	1					
ANR	8156803	ArrayIndexing	dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8156147	2					
ANR	8156804	ArrayIndexing	dequant_1bit [ joined_stereo ]		8156147	0					
ANR	8156805	Identifier	dequant_1bit		8156147	0					
ANR	8156806	Identifier	joined_stereo		8156147	1					
ANR	8156807	MultiplicativeExpression	2 * get_bits1 ( gb )		8156147	1		*			
ANR	8156808	PrimaryExpression	2		8156147	0					
ANR	8156809	CallExpression	get_bits1 ( gb )		8156147	1					
ANR	8156810	Callee	get_bits1		8156147	0					
ANR	8156811	Identifier	get_bits1		8156147	0					
ANR	8156812	ArgumentList	gb		8156147	1					
ANR	8156813	Argument	gb		8156147	0					
ANR	8156814	Identifier	gb		8156147	0					
ANR	8156815	ElseStatement	else		8156147	0					
ANR	8156816	CompoundStatement		185:35:3752:3752	8156147	0					
ANR	8156817	ExpressionStatement	"n = get_bits ( gb , 8 )"	189:32:3900:3920	8156147	0	True				
ANR	8156818	AssignmentExpression	"n = get_bits ( gb , 8 )"		8156147	0		=			
ANR	8156819	Identifier	n		8156147	0					
ANR	8156820	CallExpression	"get_bits ( gb , 8 )"		8156147	1					
ANR	8156821	Callee	get_bits		8156147	0					
ANR	8156822	Identifier	get_bits		8156147	0					
ANR	8156823	ArgumentList	gb		8156147	1					
ANR	8156824	Argument	gb		8156147	0					
ANR	8156825	Identifier	gb		8156147	0					
ANR	8156826	Argument	8		8156147	1					
ANR	8156827	PrimaryExpression	8		8156147	0					
ANR	8156828	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8156147	1					
ANR	8156829	ForInit	k = 0 ;	191:37:3960:3965	8156147	0	True				
ANR	8156830	AssignmentExpression	k = 0		8156147	0		=			
ANR	8156831	Identifier	k		8156147	0					
ANR	8156832	PrimaryExpression	0		8156147	1					
ANR	8156833	Condition	k < 5	191:44:3967:3971	8156147	1	True				
ANR	8156834	RelationalExpression	k < 5		8156147	0		<			
ANR	8156835	Identifier	k		8156147	0					
ANR	8156836	PrimaryExpression	5		8156147	1					
ANR	8156837	PostIncDecOperationExpression	k ++	191:51:3974:3976	8156147	2	True				
ANR	8156838	Identifier	k		8156147	0					
ANR	8156839	IncDec	++		8156147	1					
ANR	8156840	ExpressionStatement	samples [ k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]	193:36:4016:4084	8156147	3	True				
ANR	8156841	AssignmentExpression	samples [ k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8156147	0		=			
ANR	8156842	ArrayIndexing	samples [ k ]		8156147	0					
ANR	8156843	Identifier	samples		8156147	0					
ANR	8156844	Identifier	k		8156147	1					
ANR	8156845	ArrayIndexing	dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8156147	1					
ANR	8156846	ArrayIndexing	dequant_1bit [ joined_stereo ]		8156147	0					
ANR	8156847	Identifier	dequant_1bit		8156147	0					
ANR	8156848	Identifier	joined_stereo		8156147	1					
ANR	8156849	ArrayIndexing	random_dequant_index [ n ] [ k ]		8156147	1					
ANR	8156850	ArrayIndexing	random_dequant_index [ n ]		8156147	0					
ANR	8156851	Identifier	random_dequant_index		8156147	0					
ANR	8156852	Identifier	n		8156147	1					
ANR	8156853	Identifier	k		8156147	1					
ANR	8156854	ElseStatement	else		8156147	0					
ANR	8156855	CompoundStatement		195:31:4036:4036	8156147	0					
ANR	8156856	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8156147	0					
ANR	8156857	ForInit	k = 0 ;	199:33:4185:4190	8156147	0	True				
ANR	8156858	AssignmentExpression	k = 0		8156147	0		=			
ANR	8156859	Identifier	k		8156147	0					
ANR	8156860	PrimaryExpression	0		8156147	1					
ANR	8156861	Condition	k < 5	199:40:4192:4196	8156147	1	True				
ANR	8156862	RelationalExpression	k < 5		8156147	0		<			
ANR	8156863	Identifier	k		8156147	0					
ANR	8156864	PrimaryExpression	5		8156147	1					
ANR	8156865	PostIncDecOperationExpression	k ++	199:47:4199:4201	8156147	2	True				
ANR	8156866	Identifier	k		8156147	0					
ANR	8156867	IncDec	++		8156147	1					
ANR	8156868	ExpressionStatement	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	201:32:4237:4285	8156147	3	True				
ANR	8156869	AssignmentExpression	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	0		=			
ANR	8156870	ArrayIndexing	samples [ k ]		8156147	0					
ANR	8156871	Identifier	samples		8156147	0					
ANR	8156872	Identifier	k		8156147	1					
ANR	8156873	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	1					
ANR	8156874	Callee	SB_DITHERING_NOISE		8156147	0					
ANR	8156875	Identifier	SB_DITHERING_NOISE		8156147	0					
ANR	8156876	ArgumentList	sb		8156147	1					
ANR	8156877	Argument	sb		8156147	0					
ANR	8156878	Identifier	sb		8156147	0					
ANR	8156879	Argument	q -> noise_idx		8156147	1					
ANR	8156880	PtrMemberAccess	q -> noise_idx		8156147	0					
ANR	8156881	Identifier	q		8156147	0					
ANR	8156882	Identifier	noise_idx		8156147	1					
ANR	8156883	ExpressionStatement	run = 5	205:24:4339:4346	8156147	10	True				
ANR	8156884	AssignmentExpression	run = 5		8156147	0		=			
ANR	8156885	Identifier	run		8156147	0					
ANR	8156886	PrimaryExpression	5		8156147	1					
ANR	8156887	BreakStatement	break ;	207:24:4373:4378	8156147	11	True				
ANR	8156888	Label	case 24 :	211:20:4403:4410	8156147	12	True				
ANR	8156889	IfStatement	"if ( BITS_LEFT ( length , gb ) >= 7 )"		8156147	13					
ANR	8156890	Condition	"BITS_LEFT ( length , gb ) >= 7"	213:28:4441:4465	8156147	0	True				
ANR	8156891	RelationalExpression	"BITS_LEFT ( length , gb ) >= 7"		8156147	0		>=			
ANR	8156892	CallExpression	"BITS_LEFT ( length , gb )"		8156147	0					
ANR	8156893	Callee	BITS_LEFT		8156147	0					
ANR	8156894	Identifier	BITS_LEFT		8156147	0					
ANR	8156895	ArgumentList	length		8156147	1					
ANR	8156896	Argument	length		8156147	0					
ANR	8156897	Identifier	length		8156147	0					
ANR	8156898	Argument	gb		8156147	1					
ANR	8156899	Identifier	gb		8156147	0					
ANR	8156900	PrimaryExpression	7		8156147	1					
ANR	8156901	CompoundStatement		211:55:4355:4355	8156147	1					
ANR	8156902	ExpressionStatement	"n = get_bits ( gb , 7 )"	215:28:4499:4518	8156147	0	True				
ANR	8156903	AssignmentExpression	"n = get_bits ( gb , 7 )"		8156147	0		=			
ANR	8156904	Identifier	n		8156147	0					
ANR	8156905	CallExpression	"get_bits ( gb , 7 )"		8156147	1					
ANR	8156906	Callee	get_bits		8156147	0					
ANR	8156907	Identifier	get_bits		8156147	0					
ANR	8156908	ArgumentList	gb		8156147	1					
ANR	8156909	Argument	gb		8156147	0					
ANR	8156910	Identifier	gb		8156147	0					
ANR	8156911	Argument	7		8156147	1					
ANR	8156912	PrimaryExpression	7		8156147	0					
ANR	8156913	ForStatement	for ( k = 0 ; k < 3 ; k ++ )		8156147	1					
ANR	8156914	ForInit	k = 0 ;	217:33:4554:4559	8156147	0	True				
ANR	8156915	AssignmentExpression	k = 0		8156147	0		=			
ANR	8156916	Identifier	k		8156147	0					
ANR	8156917	PrimaryExpression	0		8156147	1					
ANR	8156918	Condition	k < 3	217:40:4561:4565	8156147	1	True				
ANR	8156919	RelationalExpression	k < 3		8156147	0		<			
ANR	8156920	Identifier	k		8156147	0					
ANR	8156921	PrimaryExpression	3		8156147	1					
ANR	8156922	PostIncDecOperationExpression	k ++	217:47:4568:4570	8156147	2	True				
ANR	8156923	Identifier	k		8156147	0					
ANR	8156924	IncDec	++		8156147	1					
ANR	8156925	ExpressionStatement	samples [ k ] = ( random_dequant_type24 [ n ] [ k ] - 2.0 ) * 0.5	219:32:4606:4660	8156147	3	True				
ANR	8156926	AssignmentExpression	samples [ k ] = ( random_dequant_type24 [ n ] [ k ] - 2.0 ) * 0.5		8156147	0		=			
ANR	8156927	ArrayIndexing	samples [ k ]		8156147	0					
ANR	8156928	Identifier	samples		8156147	0					
ANR	8156929	Identifier	k		8156147	1					
ANR	8156930	MultiplicativeExpression	( random_dequant_type24 [ n ] [ k ] - 2.0 ) * 0.5		8156147	1		*			
ANR	8156931	AdditiveExpression	random_dequant_type24 [ n ] [ k ] - 2.0		8156147	0		-			
ANR	8156932	ArrayIndexing	random_dequant_type24 [ n ] [ k ]		8156147	0					
ANR	8156933	ArrayIndexing	random_dequant_type24 [ n ]		8156147	0					
ANR	8156934	Identifier	random_dequant_type24		8156147	0					
ANR	8156935	Identifier	n		8156147	1					
ANR	8156936	Identifier	k		8156147	1					
ANR	8156937	PrimaryExpression	2.0		8156147	1					
ANR	8156938	PrimaryExpression	0.5		8156147	1					
ANR	8156939	ElseStatement	else		8156147	0					
ANR	8156940	CompoundStatement		219:31:4581:4581	8156147	0					
ANR	8156941	ForStatement	for ( k = 0 ; k < 3 ; k ++ )		8156147	0					
ANR	8156942	ForInit	k = 0 ;	223:33:4730:4735	8156147	0	True				
ANR	8156943	AssignmentExpression	k = 0		8156147	0		=			
ANR	8156944	Identifier	k		8156147	0					
ANR	8156945	PrimaryExpression	0		8156147	1					
ANR	8156946	Condition	k < 3	223:40:4737:4741	8156147	1	True				
ANR	8156947	RelationalExpression	k < 3		8156147	0		<			
ANR	8156948	Identifier	k		8156147	0					
ANR	8156949	PrimaryExpression	3		8156147	1					
ANR	8156950	PostIncDecOperationExpression	k ++	223:47:4744:4746	8156147	2	True				
ANR	8156951	Identifier	k		8156147	0					
ANR	8156952	IncDec	++		8156147	1					
ANR	8156953	ExpressionStatement	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	225:32:4782:4830	8156147	3	True				
ANR	8156954	AssignmentExpression	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	0		=			
ANR	8156955	ArrayIndexing	samples [ k ]		8156147	0					
ANR	8156956	Identifier	samples		8156147	0					
ANR	8156957	Identifier	k		8156147	1					
ANR	8156958	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	1					
ANR	8156959	Callee	SB_DITHERING_NOISE		8156147	0					
ANR	8156960	Identifier	SB_DITHERING_NOISE		8156147	0					
ANR	8156961	ArgumentList	sb		8156147	1					
ANR	8156962	Argument	sb		8156147	0					
ANR	8156963	Identifier	sb		8156147	0					
ANR	8156964	Argument	q -> noise_idx		8156147	1					
ANR	8156965	PtrMemberAccess	q -> noise_idx		8156147	0					
ANR	8156966	Identifier	q		8156147	0					
ANR	8156967	Identifier	noise_idx		8156147	1					
ANR	8156968	ExpressionStatement	run = 3	229:24:4884:4891	8156147	14	True				
ANR	8156969	AssignmentExpression	run = 3		8156147	0		=			
ANR	8156970	Identifier	run		8156147	0					
ANR	8156971	PrimaryExpression	3		8156147	1					
ANR	8156972	BreakStatement	break ;	231:24:4918:4923	8156147	15	True				
ANR	8156973	Label	case 30 :	235:20:4948:4955	8156147	16	True				
ANR	8156974	IfStatement	"if ( BITS_LEFT ( length , gb ) >= 4 )"		8156147	17					
ANR	8156975	Condition	"BITS_LEFT ( length , gb ) >= 4"	237:28:4986:5010	8156147	0	True				
ANR	8156976	RelationalExpression	"BITS_LEFT ( length , gb ) >= 4"		8156147	0		>=			
ANR	8156977	CallExpression	"BITS_LEFT ( length , gb )"		8156147	0					
ANR	8156978	Callee	BITS_LEFT		8156147	0					
ANR	8156979	Identifier	BITS_LEFT		8156147	0					
ANR	8156980	ArgumentList	length		8156147	1					
ANR	8156981	Argument	length		8156147	0					
ANR	8156982	Identifier	length		8156147	0					
ANR	8156983	Argument	gb		8156147	1					
ANR	8156984	Identifier	gb		8156147	0					
ANR	8156985	PrimaryExpression	4		8156147	1					
ANR	8156986	ExpressionStatement	"samples [ 0 ] = type30_dequant [ qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 ) ]"	239:28:5042:5110	8156147	1	True				
ANR	8156987	AssignmentExpression	"samples [ 0 ] = type30_dequant [ qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 ) ]"		8156147	0		=			
ANR	8156988	ArrayIndexing	samples [ 0 ]		8156147	0					
ANR	8156989	Identifier	samples		8156147	0					
ANR	8156990	PrimaryExpression	0		8156147	1					
ANR	8156991	ArrayIndexing	"type30_dequant [ qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 ) ]"		8156147	1					
ANR	8156992	Identifier	type30_dequant		8156147	0					
ANR	8156993	CallExpression	"qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 )"		8156147	1					
ANR	8156994	Callee	qdm2_get_vlc		8156147	0					
ANR	8156995	Identifier	qdm2_get_vlc		8156147	0					
ANR	8156996	ArgumentList	gb		8156147	1					
ANR	8156997	Argument	gb		8156147	0					
ANR	8156998	Identifier	gb		8156147	0					
ANR	8156999	Argument	& vlc_tab_type30		8156147	1					
ANR	8157000	UnaryOperationExpression	& vlc_tab_type30		8156147	0					
ANR	8157001	UnaryOperator	&		8156147	0					
ANR	8157002	Identifier	vlc_tab_type30		8156147	1					
ANR	8157003	Argument	0		8156147	2					
ANR	8157004	PrimaryExpression	0		8156147	0					
ANR	8157005	Argument	1		8156147	3					
ANR	8157006	PrimaryExpression	1		8156147	0					
ANR	8157007	ElseStatement	else		8156147	0					
ANR	8157008	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	243:28:5171:5219	8156147	0	True				
ANR	8157009	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	0		=			
ANR	8157010	ArrayIndexing	samples [ 0 ]		8156147	0					
ANR	8157011	Identifier	samples		8156147	0					
ANR	8157012	PrimaryExpression	0		8156147	1					
ANR	8157013	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	1					
ANR	8157014	Callee	SB_DITHERING_NOISE		8156147	0					
ANR	8157015	Identifier	SB_DITHERING_NOISE		8156147	0					
ANR	8157016	ArgumentList	sb		8156147	1					
ANR	8157017	Argument	sb		8156147	0					
ANR	8157018	Identifier	sb		8156147	0					
ANR	8157019	Argument	q -> noise_idx		8156147	1					
ANR	8157020	PtrMemberAccess	q -> noise_idx		8156147	0					
ANR	8157021	Identifier	q		8156147	0					
ANR	8157022	Identifier	noise_idx		8156147	1					
ANR	8157023	ExpressionStatement	run = 1	247:24:5248:5255	8156147	18	True				
ANR	8157024	AssignmentExpression	run = 1		8156147	0		=			
ANR	8157025	Identifier	run		8156147	0					
ANR	8157026	PrimaryExpression	1		8156147	1					
ANR	8157027	BreakStatement	break ;	249:24:5282:5287	8156147	19	True				
ANR	8157028	Label	case 34 :	253:20:5312:5319	8156147	20	True				
ANR	8157029	IfStatement	"if ( BITS_LEFT ( length , gb ) >= 7 )"		8156147	21					
ANR	8157030	Condition	"BITS_LEFT ( length , gb ) >= 7"	255:28:5350:5374	8156147	0	True				
ANR	8157031	RelationalExpression	"BITS_LEFT ( length , gb ) >= 7"		8156147	0		>=			
ANR	8157032	CallExpression	"BITS_LEFT ( length , gb )"		8156147	0					
ANR	8157033	Callee	BITS_LEFT		8156147	0					
ANR	8157034	Identifier	BITS_LEFT		8156147	0					
ANR	8157035	ArgumentList	length		8156147	1					
ANR	8157036	Argument	length		8156147	0					
ANR	8157037	Identifier	length		8156147	0					
ANR	8157038	Argument	gb		8156147	1					
ANR	8157039	Identifier	gb		8156147	0					
ANR	8157040	PrimaryExpression	7		8156147	1					
ANR	8157041	CompoundStatement		253:55:5264:5264	8156147	1					
ANR	8157042	IfStatement	if ( type34_first )		8156147	0					
ANR	8157043	Condition	type34_first	257:32:5412:5423	8156147	0	True				
ANR	8157044	Identifier	type34_first		8156147	0					
ANR	8157045	CompoundStatement		255:46:5313:5313	8156147	1					
ANR	8157046	ExpressionStatement	"type34_div = ( float ) ( 1 << get_bits ( gb , 2 ) )"	259:32:5461:5503	8156147	0	True				
ANR	8157047	AssignmentExpression	"type34_div = ( float ) ( 1 << get_bits ( gb , 2 ) )"		8156147	0		=			
ANR	8157048	Identifier	type34_div		8156147	0					
ANR	8157049	CastExpression	"( float ) ( 1 << get_bits ( gb , 2 ) )"		8156147	1					
ANR	8157050	CastTarget	float		8156147	0					
ANR	8157051	ShiftExpression	"1 << get_bits ( gb , 2 )"		8156147	1		<<			
ANR	8157052	PrimaryExpression	1		8156147	0					
ANR	8157053	CallExpression	"get_bits ( gb , 2 )"		8156147	1					
ANR	8157054	Callee	get_bits		8156147	0					
ANR	8157055	Identifier	get_bits		8156147	0					
ANR	8157056	ArgumentList	gb		8156147	1					
ANR	8157057	Argument	gb		8156147	0					
ANR	8157058	Identifier	gb		8156147	0					
ANR	8157059	Argument	2		8156147	1					
ANR	8157060	PrimaryExpression	2		8156147	0					
ANR	8157061	ExpressionStatement	"samples [ 0 ] = ( ( float ) get_bits ( gb , 5 ) - 16.0 ) / 15.0"	261:32:5538:5589	8156147	1	True				
ANR	8157062	AssignmentExpression	"samples [ 0 ] = ( ( float ) get_bits ( gb , 5 ) - 16.0 ) / 15.0"		8156147	0		=			
ANR	8157063	ArrayIndexing	samples [ 0 ]		8156147	0					
ANR	8157064	Identifier	samples		8156147	0					
ANR	8157065	PrimaryExpression	0		8156147	1					
ANR	8157066	MultiplicativeExpression	"( ( float ) get_bits ( gb , 5 ) - 16.0 ) / 15.0"		8156147	1		/			
ANR	8157067	AdditiveExpression	"( float ) get_bits ( gb , 5 ) - 16.0"		8156147	0		-			
ANR	8157068	CastExpression	"( float ) get_bits ( gb , 5 )"		8156147	0					
ANR	8157069	CastTarget	float		8156147	0					
ANR	8157070	CallExpression	"get_bits ( gb , 5 )"		8156147	1					
ANR	8157071	Callee	get_bits		8156147	0					
ANR	8157072	Identifier	get_bits		8156147	0					
ANR	8157073	ArgumentList	gb		8156147	1					
ANR	8157074	Argument	gb		8156147	0					
ANR	8157075	Identifier	gb		8156147	0					
ANR	8157076	Argument	5		8156147	1					
ANR	8157077	PrimaryExpression	5		8156147	0					
ANR	8157078	PrimaryExpression	16.0		8156147	1					
ANR	8157079	PrimaryExpression	15.0		8156147	1					
ANR	8157080	ExpressionStatement	type34_predictor = samples [ 0 ]	263:32:5624:5653	8156147	2	True				
ANR	8157081	AssignmentExpression	type34_predictor = samples [ 0 ]		8156147	0		=			
ANR	8157082	Identifier	type34_predictor		8156147	0					
ANR	8157083	ArrayIndexing	samples [ 0 ]		8156147	1					
ANR	8157084	Identifier	samples		8156147	0					
ANR	8157085	PrimaryExpression	0		8156147	1					
ANR	8157086	ExpressionStatement	type34_first = 0	265:32:5688:5704	8156147	3	True				
ANR	8157087	AssignmentExpression	type34_first = 0		8156147	0		=			
ANR	8157088	Identifier	type34_first		8156147	0					
ANR	8157089	PrimaryExpression	0		8156147	1					
ANR	8157090	ElseStatement	else		8156147	0					
ANR	8157091	CompoundStatement		265:35:5629:5629	8156147	0					
ANR	8157092	ExpressionStatement	"samples [ 0 ] = type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ] / type34_div + type34_predictor"	269:32:5777:5875	8156147	0	True				
ANR	8157093	AssignmentExpression	"samples [ 0 ] = type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ] / type34_div + type34_predictor"		8156147	0		=			
ANR	8157094	ArrayIndexing	samples [ 0 ]		8156147	0					
ANR	8157095	Identifier	samples		8156147	0					
ANR	8157096	PrimaryExpression	0		8156147	1					
ANR	8157097	AdditiveExpression	"type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ] / type34_div + type34_predictor"		8156147	1		+			
ANR	8157098	MultiplicativeExpression	"type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ] / type34_div"		8156147	0		/			
ANR	8157099	ArrayIndexing	"type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ]"		8156147	0					
ANR	8157100	Identifier	type34_delta		8156147	0					
ANR	8157101	CallExpression	"qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 )"		8156147	1					
ANR	8157102	Callee	qdm2_get_vlc		8156147	0					
ANR	8157103	Identifier	qdm2_get_vlc		8156147	0					
ANR	8157104	ArgumentList	gb		8156147	1					
ANR	8157105	Argument	gb		8156147	0					
ANR	8157106	Identifier	gb		8156147	0					
ANR	8157107	Argument	& vlc_tab_type34		8156147	1					
ANR	8157108	UnaryOperationExpression	& vlc_tab_type34		8156147	0					
ANR	8157109	UnaryOperator	&		8156147	0					
ANR	8157110	Identifier	vlc_tab_type34		8156147	1					
ANR	8157111	Argument	0		8156147	2					
ANR	8157112	PrimaryExpression	0		8156147	0					
ANR	8157113	Argument	1		8156147	3					
ANR	8157114	PrimaryExpression	1		8156147	0					
ANR	8157115	Identifier	type34_div		8156147	1					
ANR	8157116	Identifier	type34_predictor		8156147	1					
ANR	8157117	ExpressionStatement	type34_predictor = samples [ 0 ]	271:32:5910:5939	8156147	1	True				
ANR	8157118	AssignmentExpression	type34_predictor = samples [ 0 ]		8156147	0		=			
ANR	8157119	Identifier	type34_predictor		8156147	0					
ANR	8157120	ArrayIndexing	samples [ 0 ]		8156147	1					
ANR	8157121	Identifier	samples		8156147	0					
ANR	8157122	PrimaryExpression	0		8156147	1					
ANR	8157123	ElseStatement	else		8156147	0					
ANR	8157124	CompoundStatement		273:31:5891:5891	8156147	0					
ANR	8157125	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	277:28:6035:6083	8156147	0	True				
ANR	8157126	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	0		=			
ANR	8157127	ArrayIndexing	samples [ 0 ]		8156147	0					
ANR	8157128	Identifier	samples		8156147	0					
ANR	8157129	PrimaryExpression	0		8156147	1					
ANR	8157130	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	1					
ANR	8157131	Callee	SB_DITHERING_NOISE		8156147	0					
ANR	8157132	Identifier	SB_DITHERING_NOISE		8156147	0					
ANR	8157133	ArgumentList	sb		8156147	1					
ANR	8157134	Argument	sb		8156147	0					
ANR	8157135	Identifier	sb		8156147	0					
ANR	8157136	Argument	q -> noise_idx		8156147	1					
ANR	8157137	PtrMemberAccess	q -> noise_idx		8156147	0					
ANR	8157138	Identifier	q		8156147	0					
ANR	8157139	Identifier	noise_idx		8156147	1					
ANR	8157140	ExpressionStatement	run = 1	281:24:6137:6144	8156147	22	True				
ANR	8157141	AssignmentExpression	run = 1		8156147	0		=			
ANR	8157142	Identifier	run		8156147	0					
ANR	8157143	PrimaryExpression	1		8156147	1					
ANR	8157144	BreakStatement	break ;	283:24:6171:6176	8156147	23	True				
ANR	8157145	Label	default :	287:20:6201:6208	8156147	24	True				
ANR	8157146	Identifier	default		8156147	0					
ANR	8157147	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	289:24:6235:6283	8156147	25	True				
ANR	8157148	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	0		=			
ANR	8157149	ArrayIndexing	samples [ 0 ]		8156147	0					
ANR	8157150	Identifier	samples		8156147	0					
ANR	8157151	PrimaryExpression	0		8156147	1					
ANR	8157152	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8156147	1					
ANR	8157153	Callee	SB_DITHERING_NOISE		8156147	0					
ANR	8157154	Identifier	SB_DITHERING_NOISE		8156147	0					
ANR	8157155	ArgumentList	sb		8156147	1					
ANR	8157156	Argument	sb		8156147	0					
ANR	8157157	Identifier	sb		8156147	0					
ANR	8157158	Argument	q -> noise_idx		8156147	1					
ANR	8157159	PtrMemberAccess	q -> noise_idx		8156147	0					
ANR	8157160	Identifier	q		8156147	0					
ANR	8157161	Identifier	noise_idx		8156147	1					
ANR	8157162	ExpressionStatement	run = 1	291:24:6310:6317	8156147	26	True				
ANR	8157163	AssignmentExpression	run = 1		8156147	0		=			
ANR	8157164	Identifier	run		8156147	0					
ANR	8157165	PrimaryExpression	1		8156147	1					
ANR	8157166	BreakStatement	break ;	293:24:6344:6349	8156147	27	True				
ANR	8157167	IfStatement	if ( joined_stereo )		8156147	1					
ANR	8157168	Condition	joined_stereo	299:20:6393:6405	8156147	0	True				
ANR	8157169	Identifier	joined_stereo		8156147	0					
ANR	8157170	CompoundStatement		297:35:6295:6295	8156147	1					
ANR	8157171	Statement	float	301:20:6431:6435	8156147	0	True				
ANR	8157172	ExpressionStatement	tmp [ 10 ] [ MPA_MAX_CHANNELS ]	301:26:6437:6462	8156147	1	True				
ANR	8157173	ArrayIndexing	tmp [ 10 ] [ MPA_MAX_CHANNELS ]		8156147	0					
ANR	8157174	ArrayIndexing	tmp [ 10 ]		8156147	0					
ANR	8157175	Identifier	tmp		8156147	0					
ANR	8157176	PrimaryExpression	10		8156147	1					
ANR	8157177	Identifier	MPA_MAX_CHANNELS		8156147	1					
ANR	8157178	ForStatement	for ( k = 0 ; k < run ; k ++ )		8156147	2					
ANR	8157179	ForInit	k = 0 ;	305:25:6492:6497	8156147	0	True				
ANR	8157180	AssignmentExpression	k = 0		8156147	0		=			
ANR	8157181	Identifier	k		8156147	0					
ANR	8157182	PrimaryExpression	0		8156147	1					
ANR	8157183	Condition	k < run	305:32:6499:6505	8156147	1	True				
ANR	8157184	RelationalExpression	k < run		8156147	0		<			
ANR	8157185	Identifier	k		8156147	0					
ANR	8157186	Identifier	run		8156147	1					
ANR	8157187	PostIncDecOperationExpression	k ++	305:41:6508:6510	8156147	2	True				
ANR	8157188	Identifier	k		8156147	0					
ANR	8157189	IncDec	++		8156147	1					
ANR	8157190	CompoundStatement		303:46:6400:6400	8156147	3					
ANR	8157191	ExpressionStatement	tmp [ k ] [ 0 ] = samples [ k ]	307:24:6540:6562	8156147	0	True				
ANR	8157192	AssignmentExpression	tmp [ k ] [ 0 ] = samples [ k ]		8156147	0		=			
ANR	8157193	ArrayIndexing	tmp [ k ] [ 0 ]		8156147	0					
ANR	8157194	ArrayIndexing	tmp [ k ]		8156147	0					
ANR	8157195	Identifier	tmp		8156147	0					
ANR	8157196	Identifier	k		8156147	1					
ANR	8157197	PrimaryExpression	0		8156147	1					
ANR	8157198	ArrayIndexing	samples [ k ]		8156147	1					
ANR	8157199	Identifier	samples		8156147	0					
ANR	8157200	Identifier	k		8156147	1					
ANR	8157201	ExpressionStatement	tmp [ k ] [ 1 ] = ( sign_bits [ ( j + k ) / 8 ] ) ? - samples [ k ] : samples [ k ]	309:24:6589:6652	8156147	1	True				
ANR	8157202	AssignmentExpression	tmp [ k ] [ 1 ] = ( sign_bits [ ( j + k ) / 8 ] ) ? - samples [ k ] : samples [ k ]		8156147	0		=			
ANR	8157203	ArrayIndexing	tmp [ k ] [ 1 ]		8156147	0					
ANR	8157204	ArrayIndexing	tmp [ k ]		8156147	0					
ANR	8157205	Identifier	tmp		8156147	0					
ANR	8157206	Identifier	k		8156147	1					
ANR	8157207	PrimaryExpression	1		8156147	1					
ANR	8157208	ConditionalExpression	( sign_bits [ ( j + k ) / 8 ] ) ? - samples [ k ] : samples [ k ]		8156147	1					
ANR	8157209	Condition	sign_bits [ ( j + k ) / 8 ]		8156147	0					
ANR	8157210	ArrayIndexing	sign_bits [ ( j + k ) / 8 ]		8156147	0					
ANR	8157211	Identifier	sign_bits		8156147	0					
ANR	8157212	MultiplicativeExpression	( j + k ) / 8		8156147	1		/			
ANR	8157213	AdditiveExpression	j + k		8156147	0		+			
ANR	8157214	Identifier	j		8156147	0					
ANR	8157215	Identifier	k		8156147	1					
ANR	8157216	PrimaryExpression	8		8156147	1					
ANR	8157217	UnaryOperationExpression	- samples [ k ]		8156147	1					
ANR	8157218	UnaryOperator	-		8156147	0					
ANR	8157219	ArrayIndexing	samples [ k ]		8156147	1					
ANR	8157220	Identifier	samples		8156147	0					
ANR	8157221	Identifier	k		8156147	1					
ANR	8157222	ArrayIndexing	samples [ k ]		8156147	2					
ANR	8157223	Identifier	samples		8156147	0					
ANR	8157224	Identifier	k		8156147	1					
ANR	8157225	ForStatement	for ( chs = 0 ; chs < q -> nb_channels ; chs ++ )		8156147	3					
ANR	8157226	ForInit	chs = 0 ;	313:25:6703:6710	8156147	0	True				
ANR	8157227	AssignmentExpression	chs = 0		8156147	0		=			
ANR	8157228	Identifier	chs		8156147	0					
ANR	8157229	PrimaryExpression	0		8156147	1					
ANR	8157230	Condition	chs < q -> nb_channels	313:34:6712:6731	8156147	1	True				
ANR	8157231	RelationalExpression	chs < q -> nb_channels		8156147	0		<			
ANR	8157232	Identifier	chs		8156147	0					
ANR	8157233	PtrMemberAccess	q -> nb_channels		8156147	1					
ANR	8157234	Identifier	q		8156147	0					
ANR	8157235	Identifier	nb_channels		8156147	1					
ANR	8157236	PostIncDecOperationExpression	chs ++	313:56:6734:6738	8156147	2	True				
ANR	8157237	Identifier	chs		8156147	0					
ANR	8157238	IncDec	++		8156147	1					
ANR	8157239	ForStatement	for ( k = 0 ; k < run ; k ++ )		8156147	3					
ANR	8157240	ForInit	k = 0 ;	315:29:6771:6776	8156147	0	True				
ANR	8157241	AssignmentExpression	k = 0		8156147	0		=			
ANR	8157242	Identifier	k		8156147	0					
ANR	8157243	PrimaryExpression	0		8156147	1					
ANR	8157244	Condition	k < run	315:36:6778:6784	8156147	1	True				
ANR	8157245	RelationalExpression	k < run		8156147	0		<			
ANR	8157246	Identifier	k		8156147	0					
ANR	8157247	Identifier	run		8156147	1					
ANR	8157248	PostIncDecOperationExpression	k ++	315:45:6787:6789	8156147	2	True				
ANR	8157249	Identifier	k		8156147	0					
ANR	8157250	IncDec	++		8156147	1					
ANR	8157251	IfStatement	if ( ( j + k ) < 128 )		8156147	3					
ANR	8157252	Condition	( j + k ) < 128	317:32:6825:6837	8156147	0	True				
ANR	8157253	RelationalExpression	( j + k ) < 128		8156147	0		<			
ANR	8157254	AdditiveExpression	j + k		8156147	0		+			
ANR	8157255	Identifier	j		8156147	0					
ANR	8157256	Identifier	k		8156147	1					
ANR	8157257	PrimaryExpression	128		8156147	1					
ANR	8157258	ExpressionStatement	q -> sb_samples [ chs ] [ j + k ] [ sb ] = q -> tone_level [ chs ] [ sb ] [ ( ( j + k ) / 2 ) ] * tmp [ k ] [ chs ]	319:32:6873:6954	8156147	1	True				
ANR	8157259	AssignmentExpression	q -> sb_samples [ chs ] [ j + k ] [ sb ] = q -> tone_level [ chs ] [ sb ] [ ( ( j + k ) / 2 ) ] * tmp [ k ] [ chs ]		8156147	0		=			
ANR	8157260	ArrayIndexing	q -> sb_samples [ chs ] [ j + k ] [ sb ]		8156147	0					
ANR	8157261	ArrayIndexing	q -> sb_samples [ chs ] [ j + k ]		8156147	0					
ANR	8157262	ArrayIndexing	q -> sb_samples [ chs ]		8156147	0					
ANR	8157263	PtrMemberAccess	q -> sb_samples		8156147	0					
ANR	8157264	Identifier	q		8156147	0					
ANR	8157265	Identifier	sb_samples		8156147	1					
ANR	8157266	Identifier	chs		8156147	1					
ANR	8157267	AdditiveExpression	j + k		8156147	1		+			
ANR	8157268	Identifier	j		8156147	0					
ANR	8157269	Identifier	k		8156147	1					
ANR	8157270	Identifier	sb		8156147	1					
ANR	8157271	MultiplicativeExpression	q -> tone_level [ chs ] [ sb ] [ ( ( j + k ) / 2 ) ] * tmp [ k ] [ chs ]		8156147	1		*			
ANR	8157272	ArrayIndexing	q -> tone_level [ chs ] [ sb ] [ ( ( j + k ) / 2 ) ]		8156147	0					
ANR	8157273	ArrayIndexing	q -> tone_level [ chs ] [ sb ]		8156147	0					
ANR	8157274	ArrayIndexing	q -> tone_level [ chs ]		8156147	0					
ANR	8157275	PtrMemberAccess	q -> tone_level		8156147	0					
ANR	8157276	Identifier	q		8156147	0					
ANR	8157277	Identifier	tone_level		8156147	1					
ANR	8157278	Identifier	chs		8156147	1					
ANR	8157279	Identifier	sb		8156147	1					
ANR	8157280	MultiplicativeExpression	( j + k ) / 2		8156147	1		/			
ANR	8157281	AdditiveExpression	j + k		8156147	0		+			
ANR	8157282	Identifier	j		8156147	0					
ANR	8157283	Identifier	k		8156147	1					
ANR	8157284	PrimaryExpression	2		8156147	1					
ANR	8157285	ArrayIndexing	tmp [ k ] [ chs ]		8156147	1					
ANR	8157286	ArrayIndexing	tmp [ k ]		8156147	0					
ANR	8157287	Identifier	tmp		8156147	0					
ANR	8157288	Identifier	k		8156147	1					
ANR	8157289	Identifier	chs		8156147	1					
ANR	8157290	ElseStatement	else		8156147	0					
ANR	8157291	CompoundStatement		319:23:6867:6867	8156147	0					
ANR	8157292	ForStatement	for ( k = 0 ; k < run ; k ++ )		8156147	0					
ANR	8157293	ForInit	k = 0 ;	323:25:7008:7013	8156147	0	True				
ANR	8157294	AssignmentExpression	k = 0		8156147	0		=			
ANR	8157295	Identifier	k		8156147	0					
ANR	8157296	PrimaryExpression	0		8156147	1					
ANR	8157297	Condition	k < run	323:32:7015:7021	8156147	1	True				
ANR	8157298	RelationalExpression	k < run		8156147	0		<			
ANR	8157299	Identifier	k		8156147	0					
ANR	8157300	Identifier	run		8156147	1					
ANR	8157301	PostIncDecOperationExpression	k ++	323:41:7024:7026	8156147	2	True				
ANR	8157302	Identifier	k		8156147	0					
ANR	8157303	IncDec	++		8156147	1					
ANR	8157304	IfStatement	if ( ( j + k ) < 128 )		8156147	3					
ANR	8157305	Condition	( j + k ) < 128	325:28:7058:7070	8156147	0	True				
ANR	8157306	RelationalExpression	( j + k ) < 128		8156147	0		<			
ANR	8157307	AdditiveExpression	j + k		8156147	0		+			
ANR	8157308	Identifier	j		8156147	0					
ANR	8157309	Identifier	k		8156147	1					
ANR	8157310	PrimaryExpression	128		8156147	1					
ANR	8157311	ExpressionStatement	q -> sb_samples [ ch ] [ j + k ] [ sb ] = q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]	327:28:7102:7178	8156147	1	True				
ANR	8157312	AssignmentExpression	q -> sb_samples [ ch ] [ j + k ] [ sb ] = q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8156147	0		=			
ANR	8157313	ArrayIndexing	q -> sb_samples [ ch ] [ j + k ] [ sb ]		8156147	0					
ANR	8157314	ArrayIndexing	q -> sb_samples [ ch ] [ j + k ]		8156147	0					
ANR	8157315	ArrayIndexing	q -> sb_samples [ ch ]		8156147	0					
ANR	8157316	PtrMemberAccess	q -> sb_samples		8156147	0					
ANR	8157317	Identifier	q		8156147	0					
ANR	8157318	Identifier	sb_samples		8156147	1					
ANR	8157319	Identifier	ch		8156147	1					
ANR	8157320	AdditiveExpression	j + k		8156147	1		+			
ANR	8157321	Identifier	j		8156147	0					
ANR	8157322	Identifier	k		8156147	1					
ANR	8157323	Identifier	sb		8156147	1					
ANR	8157324	MultiplicativeExpression	q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8156147	1		*			
ANR	8157325	ArrayIndexing	q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ]		8156147	0					
ANR	8157326	ArrayIndexing	q -> tone_level [ ch ] [ sb ]		8156147	0					
ANR	8157327	ArrayIndexing	q -> tone_level [ ch ]		8156147	0					
ANR	8157328	PtrMemberAccess	q -> tone_level		8156147	0					
ANR	8157329	Identifier	q		8156147	0					
ANR	8157330	Identifier	tone_level		8156147	1					
ANR	8157331	Identifier	ch		8156147	1					
ANR	8157332	Identifier	sb		8156147	1					
ANR	8157333	MultiplicativeExpression	( j + k ) / 2		8156147	1		/			
ANR	8157334	AdditiveExpression	j + k		8156147	0		+			
ANR	8157335	Identifier	j		8156147	0					
ANR	8157336	Identifier	k		8156147	1					
ANR	8157337	PrimaryExpression	2		8156147	1					
ANR	8157338	ArrayIndexing	samples [ k ]		8156147	1					
ANR	8157339	Identifier	samples		8156147	0					
ANR	8157340	Identifier	k		8156147	1					
ANR	8157341	ExpressionStatement	j += run	333:16:7218:7226	8156147	2	True				
ANR	8157342	AssignmentExpression	j += run		8156147	0		+=			
ANR	8157343	Identifier	j		8156147	0					
ANR	8157344	Identifier	run		8156147	1					
ANR	8157345	ReturnType	static void		8156147	1					
ANR	8157346	Identifier	synthfilt_build_sb_samples		8156147	2					
ANR	8157347	ParameterList	"QDM2Context * q , GetBitContext * gb , int length , int sb_min , int sb_max"		8156147	3					
ANR	8157348	Parameter	QDM2Context * q	1:40:40:53	8156147	0	True				
ANR	8157349	ParameterType	QDM2Context *		8156147	0					
ANR	8157350	Identifier	q		8156147	1					
ANR	8157351	Parameter	GetBitContext * gb	1:56:56:72	8156147	1	True				
ANR	8157352	ParameterType	GetBitContext *		8156147	0					
ANR	8157353	Identifier	gb		8156147	1					
ANR	8157354	Parameter	int length	1:75:75:84	8156147	2	True				
ANR	8157355	ParameterType	int		8156147	0					
ANR	8157356	Identifier	length		8156147	1					
ANR	8157357	Parameter	int sb_min	1:87:87:96	8156147	3	True				
ANR	8157358	ParameterType	int		8156147	0					
ANR	8157359	Identifier	sb_min		8156147	1					
ANR	8157360	Parameter	int sb_max	1:99:99:108	8156147	4	True				
ANR	8157361	ParameterType	int		8156147	0					
ANR	8157362	Identifier	sb_max		8156147	1					
ANR	8157363	CFGEntryNode	ENTRY		8156147		True				
ANR	8157364	CFGExitNode	EXIT		8156147		True				
ANR	8157365	Symbol	qdm2_get_vlc		8156147						
ANR	8157366	Symbol	& vlc_tab_type30		8156147						
ANR	8157367	Symbol	MPA_MAX_CHANNELS		8156147						
ANR	8157368	Symbol	* * chs		8156147						
ANR	8157369	Symbol	SB_DITHERING_NOISE		8156147						
ANR	8157370	Symbol	* * * * q		8156147						
ANR	8157371	Symbol	get_bits		8156147						
ANR	8157372	Symbol	* ch		8156147						
ANR	8157373	Symbol	q -> coding_method		8156147						
ANR	8157374	Symbol	* type30_dequant		8156147						
ANR	8157375	Symbol	run		8156147						
ANR	8157376	Symbol	* * q -> coding_method		8156147						
ANR	8157377	Symbol	* random_dequant_type24		8156147						
ANR	8157378	Symbol	zero_encoding		8156147						
ANR	8157379	Symbol	sign_bits		8156147						
ANR	8157380	Symbol	* * dequant_1bit		8156147						
ANR	8157381	Symbol	* samples		8156147						
ANR	8157382	Symbol	* sb		8156147						
ANR	8157383	Symbol	tmp		8156147						
ANR	8157384	Symbol	* * random_dequant_type24		8156147						
ANR	8157385	Symbol	& vlc_tab_type34		8156147						
ANR	8157386	Symbol	type34_predictor		8156147						
ANR	8157387	Symbol	* * k		8156147						
ANR	8157388	Symbol	* * q -> tone_level		8156147						
ANR	8157389	Symbol	* * j		8156147						
ANR	8157390	Symbol	* type34_delta		8156147						
ANR	8157391	Symbol	get_bits1		8156147						
ANR	8157392	Symbol	type30_dequant		8156147						
ANR	8157393	Symbol	* joined_stereo		8156147						
ANR	8157394	Symbol	q -> tone_level		8156147						
ANR	8157395	Symbol	* * * q -> sb_samples		8156147						
ANR	8157396	Symbol	* * random_dequant_index		8156147						
ANR	8157397	Symbol	sb_min		8156147						
ANR	8157398	Symbol	dequant_1bit		8156147						
ANR	8157399	Symbol	samples		8156147						
ANR	8157400	Symbol	chs		8156147						
ANR	8157401	Symbol	* * * q		8156147						
ANR	8157402	Symbol	noise_samples		8156147						
ANR	8157403	Symbol	type34_delta		8156147						
ANR	8157404	Symbol	* * * n		8156147						
ANR	8157405	Symbol	channels		8156147						
ANR	8157406	Symbol	* dequant_1bit		8156147						
ANR	8157407	Symbol	* * sb		8156147						
ANR	8157408	Symbol	* q -> sb_samples		8156147						
ANR	8157409	Symbol	sb_max		8156147						
ANR	8157410	Symbol	q -> noise_idx		8156147						
ANR	8157411	Symbol	random_dequant_index		8156147						
ANR	8157412	Symbol	* * * ch		8156147						
ANR	8157413	Symbol	* tmp		8156147						
ANR	8157414	Symbol	* * * q -> coding_method		8156147						
ANR	8157415	Symbol	BITS_LEFT		8156147						
ANR	8157416	Symbol	sb		8156147						
ANR	8157417	Symbol	type34_first		8156147						
ANR	8157418	Symbol	* * ch		8156147						
ANR	8157419	Symbol	* get_bits1		8156147						
ANR	8157420	Symbol	* * q		8156147						
ANR	8157421	Symbol	gb		8156147						
ANR	8157422	Symbol	* * n		8156147						
ANR	8157423	Symbol	* sign_bits		8156147						
ANR	8157424	Symbol	* * * random_dequant_index		8156147						
ANR	8157425	Symbol	* noise_samples		8156147						
ANR	8157426	Symbol	type34_div		8156147						
ANR	8157427	Symbol	* * q -> sb_samples		8156147						
ANR	8157428	Symbol	ch		8156147						
ANR	8157429	Symbol	f		8156147						
ANR	8157430	Symbol	q -> sb_samples		8156147						
ANR	8157431	Symbol	* chs		8156147						
ANR	8157432	Symbol	length		8156147						
ANR	8157433	Symbol	* * * q -> tone_level		8156147						
ANR	8157434	Symbol	* * joined_stereo		8156147						
ANR	8157435	Symbol	j		8156147						
ANR	8157436	Symbol	k		8156147						
ANR	8157437	Symbol	* * tmp		8156147						
ANR	8157438	Symbol	* * * chs		8156147						
ANR	8157439	Symbol	random_dequant_type24		8156147						
ANR	8157440	Symbol	n		8156147						
ANR	8157441	Symbol	q		8156147						
ANR	8157442	Symbol	* qdm2_get_vlc		8156147						
ANR	8157443	Symbol	q -> nb_channels		8156147						
ANR	8157444	Symbol	* j		8156147						
ANR	8157445	Symbol	* q -> coding_method		8156147						
ANR	8157446	Symbol	* k		8156147						
ANR	8157447	Symbol	joined_stereo		8156147						
ANR	8157448	Symbol	* n		8156147						
ANR	8157449	Symbol	* q -> tone_level		8156147						
ANR	8157450	Symbol	* random_dequant_index		8156147						
ANR	8157451	Symbol	* q		8156147						
