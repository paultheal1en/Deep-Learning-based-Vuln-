command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8631350	File	/home/p4ultr4n/workplace/ReVeal/raw_code/unpack_modes_01_0.c								
ANR	8631351	Function	unpack_modes	1:0:0:3456							
ANR	8631352	FunctionDef	"unpack_modes (Vp3DecodeContext * s , GetBitContext * gb)"		8631351	0					
ANR	8631353	CompoundStatement		3:0:65:3456	8631351	0					
ANR	8631354	IdentifierDeclStatement	"int i , j , k , sb_x , sb_y ;"	5:4:72:95	8631351	0	True				
ANR	8631355	IdentifierDecl	i		8631351	0					
ANR	8631356	IdentifierDeclType	int		8631351	0					
ANR	8631357	Identifier	i		8631351	1					
ANR	8631358	IdentifierDecl	j		8631351	1					
ANR	8631359	IdentifierDeclType	int		8631351	0					
ANR	8631360	Identifier	j		8631351	1					
ANR	8631361	IdentifierDecl	k		8631351	2					
ANR	8631362	IdentifierDeclType	int		8631351	0					
ANR	8631363	Identifier	k		8631351	1					
ANR	8631364	IdentifierDecl	sb_x		8631351	3					
ANR	8631365	IdentifierDeclType	int		8631351	0					
ANR	8631366	Identifier	sb_x		8631351	1					
ANR	8631367	IdentifierDecl	sb_y		8631351	4					
ANR	8631368	IdentifierDeclType	int		8631351	0					
ANR	8631369	Identifier	sb_y		8631351	1					
ANR	8631370	IdentifierDeclStatement	int scheme ;	7:4:102:112	8631351	1	True				
ANR	8631371	IdentifierDecl	scheme		8631351	0					
ANR	8631372	IdentifierDeclType	int		8631351	0					
ANR	8631373	Identifier	scheme		8631351	1					
ANR	8631374	IdentifierDeclStatement	int current_macroblock ;	9:4:119:141	8631351	2	True				
ANR	8631375	IdentifierDecl	current_macroblock		8631351	0					
ANR	8631376	IdentifierDeclType	int		8631351	0					
ANR	8631377	Identifier	current_macroblock		8631351	1					
ANR	8631378	IdentifierDeclStatement	int current_fragment ;	11:4:148:168	8631351	3	True				
ANR	8631379	IdentifierDecl	current_fragment		8631351	0					
ANR	8631380	IdentifierDeclType	int		8631351	0					
ANR	8631381	Identifier	current_fragment		8631351	1					
ANR	8631382	IdentifierDeclStatement	int coding_mode ;	13:4:175:190	8631351	4	True				
ANR	8631383	IdentifierDecl	coding_mode		8631351	0					
ANR	8631384	IdentifierDeclType	int		8631351	0					
ANR	8631385	Identifier	coding_mode		8631351	1					
ANR	8631386	IdentifierDeclStatement	int custom_mode_alphabet [ CODING_MODE_COUNT ] ;	15:4:197:240	8631351	5	True				
ANR	8631387	IdentifierDecl	custom_mode_alphabet [ CODING_MODE_COUNT ]		8631351	0					
ANR	8631388	IdentifierDeclType	int [ CODING_MODE_COUNT ]		8631351	0					
ANR	8631389	Identifier	custom_mode_alphabet		8631351	1					
ANR	8631390	Identifier	CODING_MODE_COUNT		8631351	2					
ANR	8631391	IfStatement	if ( s -> keyframe )		8631351	6					
ANR	8631392	Condition	s -> keyframe	19:8:253:263	8631351	0	True				
ANR	8631393	PtrMemberAccess	s -> keyframe		8631351	0					
ANR	8631394	Identifier	s		8631351	0					
ANR	8631395	Identifier	keyframe		8631351	1					
ANR	8631396	CompoundStatement		17:21:200:200	8631351	1					
ANR	8631397	ForStatement	for ( i = 0 ; i < s -> fragment_count ; i ++ )		8631351	0					
ANR	8631398	ForInit	i = 0 ;	21:13:282:287	8631351	0	True				
ANR	8631399	AssignmentExpression	i = 0		8631351	0		=			
ANR	8631400	Identifier	i		8631351	0					
ANR	8631401	PrimaryExpression	0		8631351	1					
ANR	8631402	Condition	i < s -> fragment_count	21:20:289:309	8631351	1	True				
ANR	8631403	RelationalExpression	i < s -> fragment_count		8631351	0		<			
ANR	8631404	Identifier	i		8631351	0					
ANR	8631405	PtrMemberAccess	s -> fragment_count		8631351	1					
ANR	8631406	Identifier	s		8631351	0					
ANR	8631407	Identifier	fragment_count		8631351	1					
ANR	8631408	PostIncDecOperationExpression	i ++	21:43:312:314	8631351	2	True				
ANR	8631409	Identifier	i		8631351	0					
ANR	8631410	IncDec	++		8631351	1					
ANR	8631411	ExpressionStatement	s -> all_fragments [ i ] . coding_method = MODE_INTRA	23:12:330:376	8631351	3	True				
ANR	8631412	AssignmentExpression	s -> all_fragments [ i ] . coding_method = MODE_INTRA		8631351	0		=			
ANR	8631413	MemberAccess	s -> all_fragments [ i ] . coding_method		8631351	0					
ANR	8631414	ArrayIndexing	s -> all_fragments [ i ]		8631351	0					
ANR	8631415	PtrMemberAccess	s -> all_fragments		8631351	0					
ANR	8631416	Identifier	s		8631351	0					
ANR	8631417	Identifier	all_fragments		8631351	1					
ANR	8631418	Identifier	i		8631351	1					
ANR	8631419	Identifier	coding_method		8631351	1					
ANR	8631420	Identifier	MODE_INTRA		8631351	1					
ANR	8631421	ElseStatement	else		8631351	0					
ANR	8631422	CompoundStatement		25:11:326:326	8631351	0					
ANR	8631423	ExpressionStatement	"scheme = get_bits ( gb , 3 )"	33:8:464:488	8631351	0	True				
ANR	8631424	AssignmentExpression	"scheme = get_bits ( gb , 3 )"		8631351	0		=			
ANR	8631425	Identifier	scheme		8631351	0					
ANR	8631426	CallExpression	"get_bits ( gb , 3 )"		8631351	1					
ANR	8631427	Callee	get_bits		8631351	0					
ANR	8631428	Identifier	get_bits		8631351	0					
ANR	8631429	ArgumentList	gb		8631351	1					
ANR	8631430	Argument	gb		8631351	0					
ANR	8631431	Identifier	gb		8631351	0					
ANR	8631432	Argument	3		8631351	1					
ANR	8631433	PrimaryExpression	3		8631351	0					
ANR	8631434	IfStatement	if ( scheme == 0 )		8631351	1					
ANR	8631435	Condition	scheme == 0	39:12:550:560	8631351	0	True				
ANR	8631436	EqualityExpression	scheme == 0		8631351	0		==			
ANR	8631437	Identifier	scheme		8631351	0					
ANR	8631438	PrimaryExpression	0		8631351	1					
ANR	8631439	CompoundStatement		37:25:497:497	8631351	1					
ANR	8631440	ForStatement	for ( i = 0 ; i < 8 ; i ++ )		8631351	0					
ANR	8631441	ForInit	i = 0 ;	41:17:583:588	8631351	0	True				
ANR	8631442	AssignmentExpression	i = 0		8631351	0		=			
ANR	8631443	Identifier	i		8631351	0					
ANR	8631444	PrimaryExpression	0		8631351	1					
ANR	8631445	Condition	i < 8	41:24:590:594	8631351	1	True				
ANR	8631446	RelationalExpression	i < 8		8631351	0		<			
ANR	8631447	Identifier	i		8631351	0					
ANR	8631448	PrimaryExpression	8		8631351	1					
ANR	8631449	PostIncDecOperationExpression	i ++	41:31:597:599	8631351	2	True				
ANR	8631450	Identifier	i		8631351	0					
ANR	8631451	IncDec	++		8631351	1					
ANR	8631452	ExpressionStatement	custom_mode_alphabet [ i ] = MODE_INTER_NO_MV	43:16:619:661	8631351	3	True				
ANR	8631453	AssignmentExpression	custom_mode_alphabet [ i ] = MODE_INTER_NO_MV		8631351	0		=			
ANR	8631454	ArrayIndexing	custom_mode_alphabet [ i ]		8631351	0					
ANR	8631455	Identifier	custom_mode_alphabet		8631351	0					
ANR	8631456	Identifier	i		8631351	1					
ANR	8631457	Identifier	MODE_INTER_NO_MV		8631351	1					
ANR	8631458	ForStatement	for ( i = 0 ; i < 8 ; i ++ )		8631351	1					
ANR	8631459	ForInit	i = 0 ;	45:17:681:686	8631351	0	True				
ANR	8631460	AssignmentExpression	i = 0		8631351	0		=			
ANR	8631461	Identifier	i		8631351	0					
ANR	8631462	PrimaryExpression	0		8631351	1					
ANR	8631463	Condition	i < 8	45:24:688:692	8631351	1	True				
ANR	8631464	RelationalExpression	i < 8		8631351	0		<			
ANR	8631465	Identifier	i		8631351	0					
ANR	8631466	PrimaryExpression	8		8631351	1					
ANR	8631467	PostIncDecOperationExpression	i ++	45:31:695:697	8631351	2	True				
ANR	8631468	Identifier	i		8631351	0					
ANR	8631469	IncDec	++		8631351	1					
ANR	8631470	ExpressionStatement	"custom_mode_alphabet [ get_bits ( gb , 3 ) ] = i"	47:16:717:758	8631351	3	True				
ANR	8631471	AssignmentExpression	"custom_mode_alphabet [ get_bits ( gb , 3 ) ] = i"		8631351	0		=			
ANR	8631472	ArrayIndexing	"custom_mode_alphabet [ get_bits ( gb , 3 ) ]"		8631351	0					
ANR	8631473	Identifier	custom_mode_alphabet		8631351	0					
ANR	8631474	CallExpression	"get_bits ( gb , 3 )"		8631351	1					
ANR	8631475	Callee	get_bits		8631351	0					
ANR	8631476	Identifier	get_bits		8631351	0					
ANR	8631477	ArgumentList	gb		8631351	1					
ANR	8631478	Argument	gb		8631351	0					
ANR	8631479	Identifier	gb		8631351	0					
ANR	8631480	Argument	3		8631351	1					
ANR	8631481	PrimaryExpression	3		8631351	0					
ANR	8631482	Identifier	i		8631351	1					
ANR	8631483	ForStatement	for ( sb_y = 0 ; sb_y < s -> y_superblock_height ; sb_y ++ )		8631351	2					
ANR	8631484	ForInit	sb_y = 0 ;	57:13:892:900	8631351	0	True				
ANR	8631485	AssignmentExpression	sb_y = 0		8631351	0		=			
ANR	8631486	Identifier	sb_y		8631351	0					
ANR	8631487	PrimaryExpression	0		8631351	1					
ANR	8631488	Condition	sb_y < s -> y_superblock_height	57:23:902:930	8631351	1	True				
ANR	8631489	RelationalExpression	sb_y < s -> y_superblock_height		8631351	0		<			
ANR	8631490	Identifier	sb_y		8631351	0					
ANR	8631491	PtrMemberAccess	s -> y_superblock_height		8631351	1					
ANR	8631492	Identifier	s		8631351	0					
ANR	8631493	Identifier	y_superblock_height		8631351	1					
ANR	8631494	PostIncDecOperationExpression	sb_y ++	57:54:933:938	8631351	2	True				
ANR	8631495	Identifier	sb_y		8631351	0					
ANR	8631496	IncDec	++		8631351	1					
ANR	8631497	CompoundStatement		55:62:875:875	8631351	3					
ANR	8631498	ForStatement	for ( sb_x = 0 ; sb_x < s -> y_superblock_width ; sb_x ++ )		8631351	0					
ANR	8631499	ForInit	sb_x = 0 ;	59:17:961:969	8631351	0	True				
ANR	8631500	AssignmentExpression	sb_x = 0		8631351	0		=			
ANR	8631501	Identifier	sb_x		8631351	0					
ANR	8631502	PrimaryExpression	0		8631351	1					
ANR	8631503	Condition	sb_x < s -> y_superblock_width	59:27:971:998	8631351	1	True				
ANR	8631504	RelationalExpression	sb_x < s -> y_superblock_width		8631351	0		<			
ANR	8631505	Identifier	sb_x		8631351	0					
ANR	8631506	PtrMemberAccess	s -> y_superblock_width		8631351	1					
ANR	8631507	Identifier	s		8631351	0					
ANR	8631508	Identifier	y_superblock_width		8631351	1					
ANR	8631509	PostIncDecOperationExpression	sb_x ++	59:57:1001:1006	8631351	2	True				
ANR	8631510	Identifier	sb_x		8631351	0					
ANR	8631511	IncDec	++		8631351	1					
ANR	8631512	CompoundStatement		57:65:943:943	8631351	3					
ANR	8631513	ForStatement	for ( j = 0 ; j < 4 ; j ++ )		8631351	0					
ANR	8631514	ForInit	j = 0 ;	63:17:1031:1036	8631351	0	True				
ANR	8631515	AssignmentExpression	j = 0		8631351	0		=			
ANR	8631516	Identifier	j		8631351	0					
ANR	8631517	PrimaryExpression	0		8631351	1					
ANR	8631518	Condition	j < 4	63:24:1038:1042	8631351	1	True				
ANR	8631519	RelationalExpression	j < 4		8631351	0		<			
ANR	8631520	Identifier	j		8631351	0					
ANR	8631521	PrimaryExpression	4		8631351	1					
ANR	8631522	PostIncDecOperationExpression	j ++	63:31:1045:1047	8631351	2	True				
ANR	8631523	Identifier	j		8631351	0					
ANR	8631524	IncDec	++		8631351	1					
ANR	8631525	CompoundStatement		67:16:1103:1122	8631351	3					
ANR	8631526	IdentifierDeclStatement	int mb_x = 2 * sb_x + ( j >> 1 ) ;	65:16:1069:1097	8631351	0	True				
ANR	8631527	IdentifierDecl	mb_x = 2 * sb_x + ( j >> 1 )		8631351	0					
ANR	8631528	IdentifierDeclType	int		8631351	0					
ANR	8631529	Identifier	mb_x		8631351	1					
ANR	8631530	AssignmentExpression	mb_x = 2 * sb_x + ( j >> 1 )		8631351	2		=			
ANR	8631531	Identifier	mb_x		8631351	0					
ANR	8631532	AdditiveExpression	2 * sb_x + ( j >> 1 )		8631351	1		+			
ANR	8631533	MultiplicativeExpression	2 * sb_x		8631351	0		*			
ANR	8631534	PrimaryExpression	2		8631351	0					
ANR	8631535	Identifier	sb_x		8631351	1					
ANR	8631536	ShiftExpression	j >> 1		8631351	1		>>			
ANR	8631537	Identifier	j		8631351	0					
ANR	8631538	PrimaryExpression	1		8631351	1					
ANR	8631539	IdentifierDeclStatement	int mb_y = 2 * sb_y + ( ( ( j >> 1 ) + j ) & 1 ) ;	67:16:1116:1150	8631351	1	True				
ANR	8631540	IdentifierDecl	mb_y = 2 * sb_y + ( ( ( j >> 1 ) + j ) & 1 )		8631351	0					
ANR	8631541	IdentifierDeclType	int		8631351	0					
ANR	8631542	Identifier	mb_y		8631351	1					
ANR	8631543	AssignmentExpression	mb_y = 2 * sb_y + ( ( ( j >> 1 ) + j ) & 1 )		8631351	2		=			
ANR	8631544	Identifier	mb_y		8631351	0					
ANR	8631545	AdditiveExpression	2 * sb_y + ( ( ( j >> 1 ) + j ) & 1 )		8631351	1		+			
ANR	8631546	MultiplicativeExpression	2 * sb_y		8631351	0		*			
ANR	8631547	PrimaryExpression	2		8631351	0					
ANR	8631548	Identifier	sb_y		8631351	1					
ANR	8631549	BitAndExpression	( ( j >> 1 ) + j ) & 1		8631351	1		&			
ANR	8631550	AdditiveExpression	( j >> 1 ) + j		8631351	0		+			
ANR	8631551	ShiftExpression	j >> 1		8631351	0		>>			
ANR	8631552	Identifier	j		8631351	0					
ANR	8631553	PrimaryExpression	1		8631351	1					
ANR	8631554	Identifier	j		8631351	1					
ANR	8631555	PrimaryExpression	1		8631351	1					
ANR	8631556	IdentifierDeclStatement	int frags_coded = 0 ;	69:16:1169:1188	8631351	2	True				
ANR	8631557	IdentifierDecl	frags_coded = 0		8631351	0					
ANR	8631558	IdentifierDeclType	int		8631351	0					
ANR	8631559	Identifier	frags_coded		8631351	1					
ANR	8631560	AssignmentExpression	frags_coded = 0		8631351	2		=			
ANR	8631561	Identifier	frags_coded		8631351	0					
ANR	8631562	PrimaryExpression	0		8631351	1					
ANR	8631563	ExpressionStatement	current_macroblock = mb_y * s -> macroblock_width + mb_x	71:16:1207:1261	8631351	3	True				
ANR	8631564	AssignmentExpression	current_macroblock = mb_y * s -> macroblock_width + mb_x		8631351	0		=			
ANR	8631565	Identifier	current_macroblock		8631351	0					
ANR	8631566	AdditiveExpression	mb_y * s -> macroblock_width + mb_x		8631351	1		+			
ANR	8631567	MultiplicativeExpression	mb_y * s -> macroblock_width		8631351	0		*			
ANR	8631568	Identifier	mb_y		8631351	0					
ANR	8631569	PtrMemberAccess	s -> macroblock_width		8631351	1					
ANR	8631570	Identifier	s		8631351	0					
ANR	8631571	Identifier	macroblock_width		8631351	1					
ANR	8631572	Identifier	mb_x		8631351	1					
ANR	8631573	IfStatement	if ( mb_x >= s -> macroblock_width || mb_y >= s -> macroblock_height )		8631351	4					
ANR	8631574	Condition	mb_x >= s -> macroblock_width || mb_y >= s -> macroblock_height	75:20:1286:1344	8631351	0	True				
ANR	8631575	OrExpression	mb_x >= s -> macroblock_width || mb_y >= s -> macroblock_height		8631351	0		||			
ANR	8631576	RelationalExpression	mb_x >= s -> macroblock_width		8631351	0		>=			
ANR	8631577	Identifier	mb_x		8631351	0					
ANR	8631578	PtrMemberAccess	s -> macroblock_width		8631351	1					
ANR	8631579	Identifier	s		8631351	0					
ANR	8631580	Identifier	macroblock_width		8631351	1					
ANR	8631581	RelationalExpression	mb_y >= s -> macroblock_height		8631351	1		>=			
ANR	8631582	Identifier	mb_y		8631351	0					
ANR	8631583	PtrMemberAccess	s -> macroblock_height		8631351	1					
ANR	8631584	Identifier	s		8631351	0					
ANR	8631585	Identifier	macroblock_height		8631351	1					
ANR	8631586	ContinueStatement	continue ;	77:20:1368:1376	8631351	1	True				
ANR	8631587	Statement	define	81:1:1382:1387	8631351	5	True				
ANR	8631588	Statement	BLOCK_X	81:8:1389:1395	8631351	6	True				
ANR	8631589	Statement	(	81:16:1397:1397	8631351	7	True				
ANR	8631590	Statement	2	81:17:1398:1398	8631351	8	True				
ANR	8631591	Statement	*	81:18:1399:1399	8631351	9	True				
ANR	8631592	Statement	mb_x	81:19:1400:1403	8631351	10	True				
ANR	8631593	Statement	+	81:24:1405:1405	8631351	11	True				
ANR	8631594	Statement	(	81:26:1407:1407	8631351	12	True				
ANR	8631595	Statement	k	81:27:1408:1408	8631351	13	True				
ANR	8631596	Statement	&	81:28:1409:1409	8631351	14	True				
ANR	8631597	Statement	1	81:29:1410:1410	8631351	15	True				
ANR	8631598	Statement	)	81:30:1411:1411	8631351	16	True				
ANR	8631599	Statement	)	81:31:1412:1412	8631351	17	True				
ANR	8631600	Statement	define	83:1:1416:1421	8631351	18	True				
ANR	8631601	Statement	BLOCK_Y	83:8:1423:1429	8631351	19	True				
ANR	8631602	Statement	(	83:16:1431:1431	8631351	20	True				
ANR	8631603	Statement	2	83:17:1432:1432	8631351	21	True				
ANR	8631604	Statement	*	83:18:1433:1433	8631351	22	True				
ANR	8631605	Statement	mb_y	83:19:1434:1437	8631351	23	True				
ANR	8631606	Statement	+	83:24:1439:1439	8631351	24	True				
ANR	8631607	Statement	(	83:26:1441:1441	8631351	25	True				
ANR	8631608	Statement	k	83:27:1442:1442	8631351	26	True				
ANR	8631609	Statement	>>	83:28:1443:1444	8631351	27	True				
ANR	8631610	Statement	1	83:30:1445:1445	8631351	28	True				
ANR	8631611	Statement	)	83:31:1446:1446	8631351	29	True				
ANR	8631612	Statement	)	83:32:1447:1447	8631351	30	True				
ANR	8631613	ForStatement	for ( k = 0 ; k < 4 ; k ++ )		8631351	31					
ANR	8631614	ForInit	k = 0 ;	89:21:1629:1634	8631351	0	True				
ANR	8631615	AssignmentExpression	k = 0		8631351	0		=			
ANR	8631616	Identifier	k		8631351	0					
ANR	8631617	PrimaryExpression	0		8631351	1					
ANR	8631618	Condition	k < 4	89:28:1636:1640	8631351	1	True				
ANR	8631619	RelationalExpression	k < 4		8631351	0		<			
ANR	8631620	Identifier	k		8631351	0					
ANR	8631621	PrimaryExpression	4		8631351	1					
ANR	8631622	PostIncDecOperationExpression	k ++	89:35:1643:1645	8631351	2	True				
ANR	8631623	Identifier	k		8631351	0					
ANR	8631624	IncDec	++		8631351	1					
ANR	8631625	CompoundStatement		87:40:1582:1582	8631351	3					
ANR	8631626	ExpressionStatement	current_fragment = BLOCK_Y * s -> fragment_width + BLOCK_X	91:20:1671:1725	8631351	0	True				
ANR	8631627	AssignmentExpression	current_fragment = BLOCK_Y * s -> fragment_width + BLOCK_X		8631351	0		=			
ANR	8631628	Identifier	current_fragment		8631351	0					
ANR	8631629	AdditiveExpression	BLOCK_Y * s -> fragment_width + BLOCK_X		8631351	1		+			
ANR	8631630	MultiplicativeExpression	BLOCK_Y * s -> fragment_width		8631351	0		*			
ANR	8631631	Identifier	BLOCK_Y		8631351	0					
ANR	8631632	PtrMemberAccess	s -> fragment_width		8631351	1					
ANR	8631633	Identifier	s		8631351	0					
ANR	8631634	Identifier	fragment_width		8631351	1					
ANR	8631635	Identifier	BLOCK_X		8631351	1					
ANR	8631636	IfStatement	if ( s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY )		8631351	1					
ANR	8631637	Condition	s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY	93:24:1752:1812	8631351	0	True				
ANR	8631638	EqualityExpression	s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY		8631351	0		!=			
ANR	8631639	MemberAccess	s -> all_fragments [ current_fragment ] . coding_method		8631351	0					
ANR	8631640	ArrayIndexing	s -> all_fragments [ current_fragment ]		8631351	0					
ANR	8631641	PtrMemberAccess	s -> all_fragments		8631351	0					
ANR	8631642	Identifier	s		8631351	0					
ANR	8631643	Identifier	all_fragments		8631351	1					
ANR	8631644	Identifier	current_fragment		8631351	1					
ANR	8631645	Identifier	coding_method		8631351	1					
ANR	8631646	Identifier	MODE_COPY		8631351	1					
ANR	8631647	BreakStatement	break ;	95:24:1840:1845	8631351	1	True				
ANR	8631648	IfStatement	if ( k == 4 )		8631351	32					
ANR	8631649	Condition	k == 4	99:20:1887:1892	8631351	0	True				
ANR	8631650	EqualityExpression	k == 4		8631351	0		==			
ANR	8631651	Identifier	k		8631351	0					
ANR	8631652	PrimaryExpression	4		8631351	1					
ANR	8631653	CompoundStatement		97:28:1829:1829	8631351	1					
ANR	8631654	ExpressionStatement	s -> macroblock_coding [ current_macroblock ] = MODE_INTER_NO_MV	101:20:1918:1977	8631351	0	True				
ANR	8631655	AssignmentExpression	s -> macroblock_coding [ current_macroblock ] = MODE_INTER_NO_MV		8631351	0		=			
ANR	8631656	ArrayIndexing	s -> macroblock_coding [ current_macroblock ]		8631351	0					
ANR	8631657	PtrMemberAccess	s -> macroblock_coding		8631351	0					
ANR	8631658	Identifier	s		8631351	0					
ANR	8631659	Identifier	macroblock_coding		8631351	1					
ANR	8631660	Identifier	current_macroblock		8631351	1					
ANR	8631661	Identifier	MODE_INTER_NO_MV		8631351	1					
ANR	8631662	ContinueStatement	continue ;	103:20:2000:2008	8631351	1	True				
ANR	8631663	IfStatement	if ( scheme == 7 )		8631351	33					
ANR	8631664	Condition	scheme == 7	111:20:2120:2130	8631351	0	True				
ANR	8631665	EqualityExpression	scheme == 7		8631351	0		==			
ANR	8631666	Identifier	scheme		8631351	0					
ANR	8631667	PrimaryExpression	7		8631351	1					
ANR	8631668	ExpressionStatement	"coding_mode = get_bits ( gb , 3 )"	113:20:2154:2183	8631351	1	True				
ANR	8631669	AssignmentExpression	"coding_mode = get_bits ( gb , 3 )"		8631351	0		=			
ANR	8631670	Identifier	coding_mode		8631351	0					
ANR	8631671	CallExpression	"get_bits ( gb , 3 )"		8631351	1					
ANR	8631672	Callee	get_bits		8631351	0					
ANR	8631673	Identifier	get_bits		8631351	0					
ANR	8631674	ArgumentList	gb		8631351	1					
ANR	8631675	Argument	gb		8631351	0					
ANR	8631676	Identifier	gb		8631351	0					
ANR	8631677	Argument	3		8631351	1					
ANR	8631678	PrimaryExpression	3		8631351	0					
ANR	8631679	ElseStatement	else		8631351	0					
ANR	8631680	IfStatement	if ( scheme == 0 )		8631351	0					
ANR	8631681	Condition	scheme == 0	115:24:2210:2220	8631351	0	True				
ANR	8631682	EqualityExpression	scheme == 0		8631351	0		==			
ANR	8631683	Identifier	scheme		8631351	0					
ANR	8631684	PrimaryExpression	0		8631351	1					
ANR	8631685	ExpressionStatement	"coding_mode = custom_mode_alphabet [ get_vlc2 ( gb , s -> mode_code_vlc . table , 3 , 3 ) ]"	117:20:2244:2348	8631351	1	True				
ANR	8631686	AssignmentExpression	"coding_mode = custom_mode_alphabet [ get_vlc2 ( gb , s -> mode_code_vlc . table , 3 , 3 ) ]"		8631351	0		=			
ANR	8631687	Identifier	coding_mode		8631351	0					
ANR	8631688	ArrayIndexing	"custom_mode_alphabet [ get_vlc2 ( gb , s -> mode_code_vlc . table , 3 , 3 ) ]"		8631351	1					
ANR	8631689	Identifier	custom_mode_alphabet		8631351	0					
ANR	8631690	CallExpression	"get_vlc2 ( gb , s -> mode_code_vlc . table , 3 , 3 )"		8631351	1					
ANR	8631691	Callee	get_vlc2		8631351	0					
ANR	8631692	Identifier	get_vlc2		8631351	0					
ANR	8631693	ArgumentList	gb		8631351	1					
ANR	8631694	Argument	gb		8631351	0					
ANR	8631695	Identifier	gb		8631351	0					
ANR	8631696	Argument	s -> mode_code_vlc . table		8631351	1					
ANR	8631697	MemberAccess	s -> mode_code_vlc . table		8631351	0					
ANR	8631698	PtrMemberAccess	s -> mode_code_vlc		8631351	0					
ANR	8631699	Identifier	s		8631351	0					
ANR	8631700	Identifier	mode_code_vlc		8631351	1					
ANR	8631701	Identifier	table		8631351	1					
ANR	8631702	Argument	3		8631351	2					
ANR	8631703	PrimaryExpression	3		8631351	0					
ANR	8631704	Argument	3		8631351	3					
ANR	8631705	PrimaryExpression	3		8631351	0					
ANR	8631706	ElseStatement	else		8631351	0					
ANR	8631707	ExpressionStatement	"coding_mode = ModeAlphabet [ scheme - 1 ] [ get_vlc2 ( gb , s -> mode_code_vlc . table , 3 , 3 ) ]"	123:20:2393:2499	8631351	0	True				
ANR	8631708	AssignmentExpression	"coding_mode = ModeAlphabet [ scheme - 1 ] [ get_vlc2 ( gb , s -> mode_code_vlc . table , 3 , 3 ) ]"		8631351	0		=			
ANR	8631709	Identifier	coding_mode		8631351	0					
ANR	8631710	ArrayIndexing	"ModeAlphabet [ scheme - 1 ] [ get_vlc2 ( gb , s -> mode_code_vlc . table , 3 , 3 ) ]"		8631351	1					
ANR	8631711	ArrayIndexing	ModeAlphabet [ scheme - 1 ]		8631351	0					
ANR	8631712	Identifier	ModeAlphabet		8631351	0					
ANR	8631713	AdditiveExpression	scheme - 1		8631351	1		-			
ANR	8631714	Identifier	scheme		8631351	0					
ANR	8631715	PrimaryExpression	1		8631351	1					
ANR	8631716	CallExpression	"get_vlc2 ( gb , s -> mode_code_vlc . table , 3 , 3 )"		8631351	1					
ANR	8631717	Callee	get_vlc2		8631351	0					
ANR	8631718	Identifier	get_vlc2		8631351	0					
ANR	8631719	ArgumentList	gb		8631351	1					
ANR	8631720	Argument	gb		8631351	0					
ANR	8631721	Identifier	gb		8631351	0					
ANR	8631722	Argument	s -> mode_code_vlc . table		8631351	1					
ANR	8631723	MemberAccess	s -> mode_code_vlc . table		8631351	0					
ANR	8631724	PtrMemberAccess	s -> mode_code_vlc		8631351	0					
ANR	8631725	Identifier	s		8631351	0					
ANR	8631726	Identifier	mode_code_vlc		8631351	1					
ANR	8631727	Identifier	table		8631351	1					
ANR	8631728	Argument	3		8631351	2					
ANR	8631729	PrimaryExpression	3		8631351	0					
ANR	8631730	Argument	3		8631351	3					
ANR	8631731	PrimaryExpression	3		8631351	0					
ANR	8631732	ExpressionStatement	s -> macroblock_coding [ current_macroblock ] = coding_mode	129:16:2520:2574	8631351	34	True				
ANR	8631733	AssignmentExpression	s -> macroblock_coding [ current_macroblock ] = coding_mode		8631351	0		=			
ANR	8631734	ArrayIndexing	s -> macroblock_coding [ current_macroblock ]		8631351	0					
ANR	8631735	PtrMemberAccess	s -> macroblock_coding		8631351	0					
ANR	8631736	Identifier	s		8631351	0					
ANR	8631737	Identifier	macroblock_coding		8631351	1					
ANR	8631738	Identifier	current_macroblock		8631351	1					
ANR	8631739	Identifier	coding_mode		8631351	1					
ANR	8631740	ForStatement	for ( k = 0 ; k < 4 ; k ++ )		8631351	35					
ANR	8631741	ForInit	k = 0 ;	131:21:2598:2603	8631351	0	True				
ANR	8631742	AssignmentExpression	k = 0		8631351	0		=			
ANR	8631743	Identifier	k		8631351	0					
ANR	8631744	PrimaryExpression	0		8631351	1					
ANR	8631745	Condition	k < 4	131:28:2605:2609	8631351	1	True				
ANR	8631746	RelationalExpression	k < 4		8631351	0		<			
ANR	8631747	Identifier	k		8631351	0					
ANR	8631748	PrimaryExpression	4		8631351	1					
ANR	8631749	PostIncDecOperationExpression	k ++	131:35:2612:2614	8631351	2	True				
ANR	8631750	Identifier	k		8631351	0					
ANR	8631751	IncDec	++		8631351	1					
ANR	8631752	CompoundStatement		129:40:2551:2551	8631351	3					
ANR	8631753	ExpressionStatement	current_fragment = BLOCK_Y * s -> fragment_width + BLOCK_X	133:20:2640:2719	8631351	0	True				
ANR	8631754	AssignmentExpression	current_fragment = BLOCK_Y * s -> fragment_width + BLOCK_X		8631351	0		=			
ANR	8631755	Identifier	current_fragment		8631351	0					
ANR	8631756	AdditiveExpression	BLOCK_Y * s -> fragment_width + BLOCK_X		8631351	1		+			
ANR	8631757	MultiplicativeExpression	BLOCK_Y * s -> fragment_width		8631351	0		*			
ANR	8631758	Identifier	BLOCK_Y		8631351	0					
ANR	8631759	PtrMemberAccess	s -> fragment_width		8631351	1					
ANR	8631760	Identifier	s		8631351	0					
ANR	8631761	Identifier	fragment_width		8631351	1					
ANR	8631762	Identifier	BLOCK_X		8631351	1					
ANR	8631763	IfStatement	if ( s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY )		8631351	1					
ANR	8631764	Condition	s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY	137:24:2746:2831	8631351	0	True				
ANR	8631765	EqualityExpression	s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY		8631351	0		!=			
ANR	8631766	MemberAccess	s -> all_fragments [ current_fragment ] . coding_method		8631351	0					
ANR	8631767	ArrayIndexing	s -> all_fragments [ current_fragment ]		8631351	0					
ANR	8631768	PtrMemberAccess	s -> all_fragments		8631351	0					
ANR	8631769	Identifier	s		8631351	0					
ANR	8631770	Identifier	all_fragments		8631351	1					
ANR	8631771	Identifier	current_fragment		8631351	1					
ANR	8631772	Identifier	coding_method		8631351	1					
ANR	8631773	Identifier	MODE_COPY		8631351	1					
ANR	8631774	ExpressionStatement	s -> all_fragments [ current_fragment ] . coding_method = coding_mode	141:24:2859:2950	8631351	1	True				
ANR	8631775	AssignmentExpression	s -> all_fragments [ current_fragment ] . coding_method = coding_mode		8631351	0		=			
ANR	8631776	MemberAccess	s -> all_fragments [ current_fragment ] . coding_method		8631351	0					
ANR	8631777	ArrayIndexing	s -> all_fragments [ current_fragment ]		8631351	0					
ANR	8631778	PtrMemberAccess	s -> all_fragments		8631351	0					
ANR	8631779	Identifier	s		8631351	0					
ANR	8631780	Identifier	all_fragments		8631351	1					
ANR	8631781	Identifier	current_fragment		8631351	1					
ANR	8631782	Identifier	coding_method		8631351	1					
ANR	8631783	Identifier	coding_mode		8631351	1					
ANR	8631784	ForStatement	for ( k = 0 ; k < 2 ; k ++ )		8631351	36					
ANR	8631785	ForInit	k = 0 ;	147:21:2993:2998	8631351	0	True				
ANR	8631786	AssignmentExpression	k = 0		8631351	0		=			
ANR	8631787	Identifier	k		8631351	0					
ANR	8631788	PrimaryExpression	0		8631351	1					
ANR	8631789	Condition	k < 2	147:28:3000:3004	8631351	1	True				
ANR	8631790	RelationalExpression	k < 2		8631351	0		<			
ANR	8631791	Identifier	k		8631351	0					
ANR	8631792	PrimaryExpression	2		8631351	1					
ANR	8631793	PostIncDecOperationExpression	k ++	147:35:3007:3009	8631351	2	True				
ANR	8631794	Identifier	k		8631351	0					
ANR	8631795	IncDec	++		8631351	1					
ANR	8631796	CompoundStatement		145:40:2946:2946	8631351	3					
ANR	8631797	ExpressionStatement	current_fragment = s -> fragment_start [ k + 1 ] + mb_y * ( s -> fragment_width >> 1 ) + mb_x	149:20:3035:3138	8631351	0	True				
ANR	8631798	AssignmentExpression	current_fragment = s -> fragment_start [ k + 1 ] + mb_y * ( s -> fragment_width >> 1 ) + mb_x		8631351	0		=			
ANR	8631799	Identifier	current_fragment		8631351	0					
ANR	8631800	AdditiveExpression	s -> fragment_start [ k + 1 ] + mb_y * ( s -> fragment_width >> 1 ) + mb_x		8631351	1		+			
ANR	8631801	ArrayIndexing	s -> fragment_start [ k + 1 ]		8631351	0					
ANR	8631802	PtrMemberAccess	s -> fragment_start		8631351	0					
ANR	8631803	Identifier	s		8631351	0					
ANR	8631804	Identifier	fragment_start		8631351	1					
ANR	8631805	AdditiveExpression	k + 1		8631351	1		+			
ANR	8631806	Identifier	k		8631351	0					
ANR	8631807	PrimaryExpression	1		8631351	1					
ANR	8631808	AdditiveExpression	mb_y * ( s -> fragment_width >> 1 ) + mb_x		8631351	1		+			
ANR	8631809	MultiplicativeExpression	mb_y * ( s -> fragment_width >> 1 )		8631351	0		*			
ANR	8631810	Identifier	mb_y		8631351	0					
ANR	8631811	ShiftExpression	s -> fragment_width >> 1		8631351	1		>>			
ANR	8631812	PtrMemberAccess	s -> fragment_width		8631351	0					
ANR	8631813	Identifier	s		8631351	0					
ANR	8631814	Identifier	fragment_width		8631351	1					
ANR	8631815	PrimaryExpression	1		8631351	1					
ANR	8631816	Identifier	mb_x		8631351	1					
ANR	8631817	IfStatement	if ( s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY )		8631351	1					
ANR	8631818	Condition	s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY	153:24:3165:3250	8631351	0	True				
ANR	8631819	EqualityExpression	s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY		8631351	0		!=			
ANR	8631820	MemberAccess	s -> all_fragments [ current_fragment ] . coding_method		8631351	0					
ANR	8631821	ArrayIndexing	s -> all_fragments [ current_fragment ]		8631351	0					
ANR	8631822	PtrMemberAccess	s -> all_fragments		8631351	0					
ANR	8631823	Identifier	s		8631351	0					
ANR	8631824	Identifier	all_fragments		8631351	1					
ANR	8631825	Identifier	current_fragment		8631351	1					
ANR	8631826	Identifier	coding_method		8631351	1					
ANR	8631827	Identifier	MODE_COPY		8631351	1					
ANR	8631828	ExpressionStatement	s -> all_fragments [ current_fragment ] . coding_method = coding_mode	157:24:3278:3369	8631351	1	True				
ANR	8631829	AssignmentExpression	s -> all_fragments [ current_fragment ] . coding_method = coding_mode		8631351	0		=			
ANR	8631830	MemberAccess	s -> all_fragments [ current_fragment ] . coding_method		8631351	0					
ANR	8631831	ArrayIndexing	s -> all_fragments [ current_fragment ]		8631351	0					
ANR	8631832	PtrMemberAccess	s -> all_fragments		8631351	0					
ANR	8631833	Identifier	s		8631351	0					
ANR	8631834	Identifier	all_fragments		8631351	1					
ANR	8631835	Identifier	current_fragment		8631351	1					
ANR	8631836	Identifier	coding_method		8631351	1					
ANR	8631837	Identifier	coding_mode		8631351	1					
ANR	8631838	ReturnStatement	return 0 ;	173:4:3445:3453	8631351	7	True				
ANR	8631839	PrimaryExpression	0		8631351	0					
ANR	8631840	ReturnType	static int		8631351	1					
ANR	8631841	Identifier	unpack_modes		8631351	2					
ANR	8631842	ParameterList	"Vp3DecodeContext * s , GetBitContext * gb"		8631351	3					
ANR	8631843	Parameter	Vp3DecodeContext * s	1:24:24:42	8631351	0	True				
ANR	8631844	ParameterType	Vp3DecodeContext *		8631351	0					
ANR	8631845	Identifier	s		8631351	1					
ANR	8631846	Parameter	GetBitContext * gb	1:45:45:61	8631351	1	True				
ANR	8631847	ParameterType	GetBitContext *		8631351	0					
ANR	8631848	Identifier	gb		8631351	1					
ANR	8631849	CFGEntryNode	ENTRY		8631351		True				
ANR	8631850	CFGExitNode	EXIT		8631351		True				
ANR	8631851	Symbol	BLOCK_X		8631351						
ANR	8631852	Symbol	BLOCK_Y		8631351						
ANR	8631853	Symbol	get_bits		8631351						
ANR	8631854	Symbol	s -> mode_code_vlc		8631351						
ANR	8631855	Symbol	* get_vlc2		8631351						
ANR	8631856	Symbol	s -> keyframe		8631351						
ANR	8631857	Symbol	* custom_mode_alphabet		8631351						
ANR	8631858	Symbol	* s -> macroblock_coding		8631351						
ANR	8631859	Symbol	s -> y_superblock_height		8631351						
ANR	8631860	Symbol	frags_coded		8631351						
ANR	8631861	Symbol	s -> all_fragments [ i ] . coding_method		8631351						
ANR	8631862	Symbol	s -> macroblock_width		8631351						
ANR	8631863	Symbol	current_fragment		8631351						
ANR	8631864	Symbol	s -> mode_code_vlc . table		8631351						
ANR	8631865	Symbol	* * scheme		8631351						
ANR	8631866	Symbol	coding_mode		8631351						
ANR	8631867	Symbol	custom_mode_alphabet		8631351						
ANR	8631868	Symbol	* current_fragment		8631351						
ANR	8631869	Symbol	s -> all_fragments		8631351						
ANR	8631870	Symbol	* s -> all_fragments		8631351						
ANR	8631871	Symbol	s -> macroblock_coding		8631351						
ANR	8631872	Symbol	sb_y		8631351						
ANR	8631873	Symbol	sb_x		8631351						
ANR	8631874	Symbol	* scheme		8631351						
ANR	8631875	Symbol	MODE_COPY		8631351						
ANR	8631876	Symbol	scheme		8631351						
ANR	8631877	Symbol	s -> fragment_count		8631351						
ANR	8631878	Symbol	MODE_INTER_NO_MV		8631351						
ANR	8631879	Symbol	ModeAlphabet		8631351						
ANR	8631880	Symbol	* ModeAlphabet		8631351						
ANR	8631881	Symbol	* * s		8631351						
ANR	8631882	Symbol	s -> fragment_width		8631351						
ANR	8631883	Symbol	gb		8631351						
ANR	8631884	Symbol	* s -> fragment_start		8631351						
ANR	8631885	Symbol	* get_bits		8631351						
ANR	8631886	Symbol	i		8631351						
ANR	8631887	Symbol	j		8631351						
ANR	8631888	Symbol	k		8631351						
ANR	8631889	Symbol	s		8631351						
ANR	8631890	Symbol	* i		8631351						
ANR	8631891	Symbol	* k		8631351						
ANR	8631892	Symbol	current_macroblock		8631351						
ANR	8631893	Symbol	* current_macroblock		8631351						
ANR	8631894	Symbol	* * ModeAlphabet		8631351						
ANR	8631895	Symbol	MODE_INTRA		8631351						
ANR	8631896	Symbol	s -> fragment_start		8631351						
ANR	8631897	Symbol	mb_y		8631351						
ANR	8631898	Symbol	get_vlc2		8631351						
ANR	8631899	Symbol	* s		8631351						
ANR	8631900	Symbol	mb_x		8631351						
ANR	8631901	Symbol	s -> y_superblock_width		8631351						
ANR	8631902	Symbol	s -> macroblock_height		8631351						
ANR	8631903	Symbol	s -> all_fragments [ current_fragment ] . coding_method		8631351						
