command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6641385	File	/home/p4ultr4n/workplace/ReVeal/raw_code/ppc_spapr_init_0.c								
ANR	6641386	Function	ppc_spapr_init	1:0:0:9030							
ANR	6641387	FunctionDef	ppc_spapr_init (QEMUMachineInitArgs * args)		6641386	0					
ANR	6641388	CompoundStatement		3:0:55:9030	6641386	0					
ANR	6641389	IdentifierDeclStatement	ram_addr_t ram_size = args -> ram_size ;	5:4:62:98	6641386	0	True				
ANR	6641390	IdentifierDecl	ram_size = args -> ram_size		6641386	0					
ANR	6641391	IdentifierDeclType	ram_addr_t		6641386	0					
ANR	6641392	Identifier	ram_size		6641386	1					
ANR	6641393	AssignmentExpression	ram_size = args -> ram_size		6641386	2		=			
ANR	6641394	Identifier	ram_size		6641386	0					
ANR	6641395	PtrMemberAccess	args -> ram_size		6641386	1					
ANR	6641396	Identifier	args		6641386	0					
ANR	6641397	Identifier	ram_size		6641386	1					
ANR	6641398	IdentifierDeclStatement	const char * cpu_model = args -> cpu_model ;	7:4:105:144	6641386	1	True				
ANR	6641399	IdentifierDecl	* cpu_model = args -> cpu_model		6641386	0					
ANR	6641400	IdentifierDeclType	const char *		6641386	0					
ANR	6641401	Identifier	cpu_model		6641386	1					
ANR	6641402	AssignmentExpression	* cpu_model = args -> cpu_model		6641386	2		=			
ANR	6641403	Identifier	cpu_model		6641386	0					
ANR	6641404	PtrMemberAccess	args -> cpu_model		6641386	1					
ANR	6641405	Identifier	args		6641386	0					
ANR	6641406	Identifier	cpu_model		6641386	1					
ANR	6641407	IdentifierDeclStatement	const char * kernel_filename = args -> kernel_filename ;	9:4:151:202	6641386	2	True				
ANR	6641408	IdentifierDecl	* kernel_filename = args -> kernel_filename		6641386	0					
ANR	6641409	IdentifierDeclType	const char *		6641386	0					
ANR	6641410	Identifier	kernel_filename		6641386	1					
ANR	6641411	AssignmentExpression	* kernel_filename = args -> kernel_filename		6641386	2		=			
ANR	6641412	Identifier	kernel_filename		6641386	0					
ANR	6641413	PtrMemberAccess	args -> kernel_filename		6641386	1					
ANR	6641414	Identifier	args		6641386	0					
ANR	6641415	Identifier	kernel_filename		6641386	1					
ANR	6641416	IdentifierDeclStatement	const char * kernel_cmdline = args -> kernel_cmdline ;	11:4:209:258	6641386	3	True				
ANR	6641417	IdentifierDecl	* kernel_cmdline = args -> kernel_cmdline		6641386	0					
ANR	6641418	IdentifierDeclType	const char *		6641386	0					
ANR	6641419	Identifier	kernel_cmdline		6641386	1					
ANR	6641420	AssignmentExpression	* kernel_cmdline = args -> kernel_cmdline		6641386	2		=			
ANR	6641421	Identifier	kernel_cmdline		6641386	0					
ANR	6641422	PtrMemberAccess	args -> kernel_cmdline		6641386	1					
ANR	6641423	Identifier	args		6641386	0					
ANR	6641424	Identifier	kernel_cmdline		6641386	1					
ANR	6641425	IdentifierDeclStatement	const char * initrd_filename = args -> initrd_filename ;	13:4:265:316	6641386	4	True				
ANR	6641426	IdentifierDecl	* initrd_filename = args -> initrd_filename		6641386	0					
ANR	6641427	IdentifierDeclType	const char *		6641386	0					
ANR	6641428	Identifier	initrd_filename		6641386	1					
ANR	6641429	AssignmentExpression	* initrd_filename = args -> initrd_filename		6641386	2		=			
ANR	6641430	Identifier	initrd_filename		6641386	0					
ANR	6641431	PtrMemberAccess	args -> initrd_filename		6641386	1					
ANR	6641432	Identifier	args		6641386	0					
ANR	6641433	Identifier	initrd_filename		6641386	1					
ANR	6641434	IdentifierDeclStatement	const char * boot_device = args -> boot_order ;	15:4:323:365	6641386	5	True				
ANR	6641435	IdentifierDecl	* boot_device = args -> boot_order		6641386	0					
ANR	6641436	IdentifierDeclType	const char *		6641386	0					
ANR	6641437	Identifier	boot_device		6641386	1					
ANR	6641438	AssignmentExpression	* boot_device = args -> boot_order		6641386	2		=			
ANR	6641439	Identifier	boot_device		6641386	0					
ANR	6641440	PtrMemberAccess	args -> boot_order		6641386	1					
ANR	6641441	Identifier	args		6641386	0					
ANR	6641442	Identifier	boot_order		6641386	1					
ANR	6641443	IdentifierDeclStatement	PowerPCCPU * cpu ;	17:4:372:387	6641386	6	True				
ANR	6641444	IdentifierDecl	* cpu		6641386	0					
ANR	6641445	IdentifierDeclType	PowerPCCPU *		6641386	0					
ANR	6641446	Identifier	cpu		6641386	1					
ANR	6641447	IdentifierDeclStatement	CPUPPCState * env ;	19:4:394:410	6641386	7	True				
ANR	6641448	IdentifierDecl	* env		6641386	0					
ANR	6641449	IdentifierDeclType	CPUPPCState *		6641386	0					
ANR	6641450	Identifier	env		6641386	1					
ANR	6641451	IdentifierDeclStatement	PCIHostState * phb ;	21:4:417:434	6641386	8	True				
ANR	6641452	IdentifierDecl	* phb		6641386	0					
ANR	6641453	IdentifierDeclType	PCIHostState *		6641386	0					
ANR	6641454	Identifier	phb		6641386	1					
ANR	6641455	IdentifierDeclStatement	int i ;	23:4:441:446	6641386	9	True				
ANR	6641456	IdentifierDecl	i		6641386	0					
ANR	6641457	IdentifierDeclType	int		6641386	0					
ANR	6641458	Identifier	i		6641386	1					
ANR	6641459	IdentifierDeclStatement	MemoryRegion * sysmem = get_system_memory ( ) ;	25:4:453:495	6641386	10	True				
ANR	6641460	IdentifierDecl	* sysmem = get_system_memory ( )		6641386	0					
ANR	6641461	IdentifierDeclType	MemoryRegion *		6641386	0					
ANR	6641462	Identifier	sysmem		6641386	1					
ANR	6641463	AssignmentExpression	* sysmem = get_system_memory ( )		6641386	2		=			
ANR	6641464	Identifier	sysmem		6641386	0					
ANR	6641465	CallExpression	get_system_memory ( )		6641386	1					
ANR	6641466	Callee	get_system_memory		6641386	0					
ANR	6641467	Identifier	get_system_memory		6641386	0					
ANR	6641468	ArgumentList			6641386	1					
ANR	6641469	IdentifierDeclStatement	"MemoryRegion * ram = g_new ( MemoryRegion , 1 ) ;"	27:4:502:544	6641386	11	True				
ANR	6641470	IdentifierDecl	"* ram = g_new ( MemoryRegion , 1 )"		6641386	0					
ANR	6641471	IdentifierDeclType	MemoryRegion *		6641386	0					
ANR	6641472	Identifier	ram		6641386	1					
ANR	6641473	AssignmentExpression	"* ram = g_new ( MemoryRegion , 1 )"		6641386	2		=			
ANR	6641474	Identifier	ram		6641386	0					
ANR	6641475	CallExpression	"g_new ( MemoryRegion , 1 )"		6641386	1					
ANR	6641476	Callee	g_new		6641386	0					
ANR	6641477	Identifier	g_new		6641386	0					
ANR	6641478	ArgumentList	MemoryRegion		6641386	1					
ANR	6641479	Argument	MemoryRegion		6641386	0					
ANR	6641480	Identifier	MemoryRegion		6641386	0					
ANR	6641481	Argument	1		6641386	1					
ANR	6641482	PrimaryExpression	1		6641386	0					
ANR	6641483	IdentifierDeclStatement	hwaddr rma_alloc_size ;	29:4:551:572	6641386	12	True				
ANR	6641484	IdentifierDecl	rma_alloc_size		6641386	0					
ANR	6641485	IdentifierDeclType	hwaddr		6641386	0					
ANR	6641486	Identifier	rma_alloc_size		6641386	1					
ANR	6641487	IdentifierDeclStatement	uint32_t initrd_base = 0 ;	31:4:579:603	6641386	13	True				
ANR	6641488	IdentifierDecl	initrd_base = 0		6641386	0					
ANR	6641489	IdentifierDeclType	uint32_t		6641386	0					
ANR	6641490	Identifier	initrd_base		6641386	1					
ANR	6641491	AssignmentExpression	initrd_base = 0		6641386	2		=			
ANR	6641492	Identifier	initrd_base		6641386	0					
ANR	6641493	PrimaryExpression	0		6641386	1					
ANR	6641494	IdentifierDeclStatement	"long kernel_size = 0 , initrd_size = 0 ;"	33:4:610:647	6641386	14	True				
ANR	6641495	IdentifierDecl	kernel_size = 0		6641386	0					
ANR	6641496	IdentifierDeclType	long		6641386	0					
ANR	6641497	Identifier	kernel_size		6641386	1					
ANR	6641498	AssignmentExpression	kernel_size = 0		6641386	2		=			
ANR	6641499	Identifier	kernel_size		6641386	0					
ANR	6641500	PrimaryExpression	0		6641386	1					
ANR	6641501	IdentifierDecl	initrd_size = 0		6641386	1					
ANR	6641502	IdentifierDeclType	long		6641386	0					
ANR	6641503	Identifier	initrd_size		6641386	1					
ANR	6641504	AssignmentExpression	initrd_size = 0		6641386	2		=			
ANR	6641505	Identifier	initrd_size		6641386	0					
ANR	6641506	PrimaryExpression	0		6641386	1					
ANR	6641507	IdentifierDeclStatement	"long load_limit , rtas_limit , fw_size ;"	35:4:654:690	6641386	15	True				
ANR	6641508	IdentifierDecl	load_limit		6641386	0					
ANR	6641509	IdentifierDeclType	long		6641386	0					
ANR	6641510	Identifier	load_limit		6641386	1					
ANR	6641511	IdentifierDecl	rtas_limit		6641386	1					
ANR	6641512	IdentifierDeclType	long		6641386	0					
ANR	6641513	Identifier	rtas_limit		6641386	1					
ANR	6641514	IdentifierDecl	fw_size		6641386	2					
ANR	6641515	IdentifierDeclType	long		6641386	0					
ANR	6641516	Identifier	fw_size		6641386	1					
ANR	6641517	IdentifierDeclStatement	bool kernel_le = false ;	37:4:697:719	6641386	16	True				
ANR	6641518	IdentifierDecl	kernel_le = false		6641386	0					
ANR	6641519	IdentifierDeclType	bool		6641386	0					
ANR	6641520	Identifier	kernel_le		6641386	1					
ANR	6641521	AssignmentExpression	kernel_le = false		6641386	2		=			
ANR	6641522	Identifier	false		6641386	0					
ANR	6641523	Identifier	false		6641386	1					
ANR	6641524	IdentifierDeclStatement	char * filename ;	39:4:726:740	6641386	17	True				
ANR	6641525	IdentifierDecl	* filename		6641386	0					
ANR	6641526	IdentifierDeclType	char *		6641386	0					
ANR	6641527	Identifier	filename		6641386	1					
ANR	6641528	ExpressionStatement	msi_supported = true	43:4:749:769	6641386	18	True				
ANR	6641529	AssignmentExpression	msi_supported = true		6641386	0		=			
ANR	6641530	Identifier	msi_supported		6641386	0					
ANR	6641531	Identifier	true		6641386	1					
ANR	6641532	ExpressionStatement	spapr = g_malloc0 ( sizeof ( * spapr ) )	47:4:778:811	6641386	19	True				
ANR	6641533	AssignmentExpression	spapr = g_malloc0 ( sizeof ( * spapr ) )		6641386	0		=			
ANR	6641534	Identifier	spapr		6641386	0					
ANR	6641535	CallExpression	g_malloc0 ( sizeof ( * spapr ) )		6641386	1					
ANR	6641536	Callee	g_malloc0		6641386	0					
ANR	6641537	Identifier	g_malloc0		6641386	0					
ANR	6641538	ArgumentList	sizeof ( * spapr )		6641386	1					
ANR	6641539	Argument	sizeof ( * spapr )		6641386	0					
ANR	6641540	SizeofExpression	sizeof ( * spapr )		6641386	0					
ANR	6641541	Sizeof	sizeof		6641386	0					
ANR	6641542	UnaryOperationExpression	* spapr		6641386	1					
ANR	6641543	UnaryOperator	*		6641386	0					
ANR	6641544	Identifier	spapr		6641386	1					
ANR	6641545	ExpressionStatement	QLIST_INIT ( & spapr -> phbs )	49:4:818:842	6641386	20	True				
ANR	6641546	CallExpression	QLIST_INIT ( & spapr -> phbs )		6641386	0					
ANR	6641547	Callee	QLIST_INIT		6641386	0					
ANR	6641548	Identifier	QLIST_INIT		6641386	0					
ANR	6641549	ArgumentList	& spapr -> phbs		6641386	1					
ANR	6641550	Argument	& spapr -> phbs		6641386	0					
ANR	6641551	UnaryOperationExpression	& spapr -> phbs		6641386	0					
ANR	6641552	UnaryOperator	&		6641386	0					
ANR	6641553	PtrMemberAccess	spapr -> phbs		6641386	1					
ANR	6641554	Identifier	spapr		6641386	0					
ANR	6641555	Identifier	phbs		6641386	1					
ANR	6641556	ExpressionStatement	cpu_ppc_hypercall = emulate_spapr_hypercall	53:4:851:894	6641386	21	True				
ANR	6641557	AssignmentExpression	cpu_ppc_hypercall = emulate_spapr_hypercall		6641386	0		=			
ANR	6641558	Identifier	cpu_ppc_hypercall		6641386	0					
ANR	6641559	Identifier	emulate_spapr_hypercall		6641386	1					
ANR	6641560	ExpressionStatement	"rma_alloc_size = kvmppc_alloc_rma ( ""ppc_spapr.rma"" , sysmem )"	59:4:940:998	6641386	22	True				
ANR	6641561	AssignmentExpression	"rma_alloc_size = kvmppc_alloc_rma ( ""ppc_spapr.rma"" , sysmem )"		6641386	0		=			
ANR	6641562	Identifier	rma_alloc_size		6641386	0					
ANR	6641563	CallExpression	"kvmppc_alloc_rma ( ""ppc_spapr.rma"" , sysmem )"		6641386	1					
ANR	6641564	Callee	kvmppc_alloc_rma		6641386	0					
ANR	6641565	Identifier	kvmppc_alloc_rma		6641386	0					
ANR	6641566	ArgumentList	"""ppc_spapr.rma"""		6641386	1					
ANR	6641567	Argument	"""ppc_spapr.rma"""		6641386	0					
ANR	6641568	PrimaryExpression	"""ppc_spapr.rma"""		6641386	0					
ANR	6641569	Argument	sysmem		6641386	1					
ANR	6641570	Identifier	sysmem		6641386	0					
ANR	6641571	IfStatement	if ( rma_alloc_size == - 1 )		6641386	23					
ANR	6641572	Condition	rma_alloc_size == - 1	63:8:1011:1030	6641386	0	True				
ANR	6641573	EqualityExpression	rma_alloc_size == - 1		6641386	0		==			
ANR	6641574	Identifier	rma_alloc_size		6641386	0					
ANR	6641575	UnaryOperationExpression	- 1		6641386	1					
ANR	6641576	UnaryOperator	-		6641386	0					
ANR	6641577	PrimaryExpression	1		6641386	1					
ANR	6641578	CompoundStatement		61:30:977:977	6641386	1					
ANR	6641579	ExpressionStatement	"hw_error ( ""qemu: Unable to create RMA\\n"" )"	65:8:1044:1084	6641386	0	True				
ANR	6641580	CallExpression	"hw_error ( ""qemu: Unable to create RMA\\n"" )"		6641386	0					
ANR	6641581	Callee	hw_error		6641386	0					
ANR	6641582	Identifier	hw_error		6641386	0					
ANR	6641583	ArgumentList	"""qemu: Unable to create RMA\\n"""		6641386	1					
ANR	6641584	Argument	"""qemu: Unable to create RMA\\n"""		6641386	0					
ANR	6641585	PrimaryExpression	"""qemu: Unable to create RMA\\n"""		6641386	0					
ANR	6641586	ExpressionStatement	exit ( 1 )	67:8:1095:1102	6641386	1	True				
ANR	6641587	CallExpression	exit ( 1 )		6641386	0					
ANR	6641588	Callee	exit		6641386	0					
ANR	6641589	Identifier	exit		6641386	0					
ANR	6641590	ArgumentList	1		6641386	1					
ANR	6641591	Argument	1		6641386	0					
ANR	6641592	PrimaryExpression	1		6641386	0					
ANR	6641593	IfStatement	if ( rma_alloc_size && ( rma_alloc_size < ram_size ) )		6641386	24					
ANR	6641594	Condition	rma_alloc_size && ( rma_alloc_size < ram_size )	73:8:1122:1166	6641386	0	True				
ANR	6641595	AndExpression	rma_alloc_size && ( rma_alloc_size < ram_size )		6641386	0		&&			
ANR	6641596	Identifier	rma_alloc_size		6641386	0					
ANR	6641597	RelationalExpression	rma_alloc_size < ram_size		6641386	1		<			
ANR	6641598	Identifier	rma_alloc_size		6641386	0					
ANR	6641599	Identifier	ram_size		6641386	1					
ANR	6641600	CompoundStatement		71:55:1113:1113	6641386	1					
ANR	6641601	ExpressionStatement	spapr -> rma_size = rma_alloc_size	75:8:1180:1212	6641386	0	True				
ANR	6641602	AssignmentExpression	spapr -> rma_size = rma_alloc_size		6641386	0		=			
ANR	6641603	PtrMemberAccess	spapr -> rma_size		6641386	0					
ANR	6641604	Identifier	spapr		6641386	0					
ANR	6641605	Identifier	rma_size		6641386	1					
ANR	6641606	Identifier	rma_alloc_size		6641386	1					
ANR	6641607	ElseStatement	else		6641386	0					
ANR	6641608	CompoundStatement		75:11:1170:1170	6641386	0					
ANR	6641609	ExpressionStatement	spapr -> rma_size = ram_size	79:8:1237:1263	6641386	0	True				
ANR	6641610	AssignmentExpression	spapr -> rma_size = ram_size		6641386	0		=			
ANR	6641611	PtrMemberAccess	spapr -> rma_size		6641386	0					
ANR	6641612	Identifier	spapr		6641386	0					
ANR	6641613	Identifier	rma_size		6641386	1					
ANR	6641614	Identifier	ram_size		6641386	1					
ANR	6641615	IfStatement	if ( kvm_enabled ( ) )		6641386	1					
ANR	6641616	Condition	kvm_enabled ( )	101:12:1763:1775	6641386	0	True				
ANR	6641617	CallExpression	kvm_enabled ( )		6641386	0					
ANR	6641618	Callee	kvm_enabled		6641386	0					
ANR	6641619	Identifier	kvm_enabled		6641386	0					
ANR	6641620	ArgumentList			6641386	1					
ANR	6641621	CompoundStatement		99:27:1722:1722	6641386	1					
ANR	6641622	ExpressionStatement	spapr -> vrma_adjust = 1	103:12:1793:1815	6641386	0	True				
ANR	6641623	AssignmentExpression	spapr -> vrma_adjust = 1		6641386	0		=			
ANR	6641624	PtrMemberAccess	spapr -> vrma_adjust		6641386	0					
ANR	6641625	Identifier	spapr		6641386	0					
ANR	6641626	Identifier	vrma_adjust		6641386	1					
ANR	6641627	PrimaryExpression	1		6641386	1					
ANR	6641628	ExpressionStatement	"spapr -> rma_size = MIN ( spapr -> rma_size , 0x10000000 )"	105:12:1830:1880	6641386	1	True				
ANR	6641629	AssignmentExpression	"spapr -> rma_size = MIN ( spapr -> rma_size , 0x10000000 )"		6641386	0		=			
ANR	6641630	PtrMemberAccess	spapr -> rma_size		6641386	0					
ANR	6641631	Identifier	spapr		6641386	0					
ANR	6641632	Identifier	rma_size		6641386	1					
ANR	6641633	CallExpression	"MIN ( spapr -> rma_size , 0x10000000 )"		6641386	1					
ANR	6641634	Callee	MIN		6641386	0					
ANR	6641635	Identifier	MIN		6641386	0					
ANR	6641636	ArgumentList	spapr -> rma_size		6641386	1					
ANR	6641637	Argument	spapr -> rma_size		6641386	0					
ANR	6641638	PtrMemberAccess	spapr -> rma_size		6641386	0					
ANR	6641639	Identifier	spapr		6641386	0					
ANR	6641640	Identifier	rma_size		6641386	1					
ANR	6641641	Argument	0x10000000		6641386	1					
ANR	6641642	PrimaryExpression	0x10000000		6641386	0					
ANR	6641643	ExpressionStatement	"rtas_limit = MIN ( spapr -> rma_size , 0x80000000 )"	119:4:2114:2159	6641386	25	True				
ANR	6641644	AssignmentExpression	"rtas_limit = MIN ( spapr -> rma_size , 0x80000000 )"		6641386	0		=			
ANR	6641645	Identifier	rtas_limit		6641386	0					
ANR	6641646	CallExpression	"MIN ( spapr -> rma_size , 0x80000000 )"		6641386	1					
ANR	6641647	Callee	MIN		6641386	0					
ANR	6641648	Identifier	MIN		6641386	0					
ANR	6641649	ArgumentList	spapr -> rma_size		6641386	1					
ANR	6641650	Argument	spapr -> rma_size		6641386	0					
ANR	6641651	PtrMemberAccess	spapr -> rma_size		6641386	0					
ANR	6641652	Identifier	spapr		6641386	0					
ANR	6641653	Identifier	rma_size		6641386	1					
ANR	6641654	Argument	0x80000000		6641386	1					
ANR	6641655	PrimaryExpression	0x80000000		6641386	0					
ANR	6641656	ExpressionStatement	spapr -> rtas_addr = rtas_limit - RTAS_MAX_SIZE	121:4:2166:2211	6641386	26	True				
ANR	6641657	AssignmentExpression	spapr -> rtas_addr = rtas_limit - RTAS_MAX_SIZE		6641386	0		=			
ANR	6641658	PtrMemberAccess	spapr -> rtas_addr		6641386	0					
ANR	6641659	Identifier	spapr		6641386	0					
ANR	6641660	Identifier	rtas_addr		6641386	1					
ANR	6641661	AdditiveExpression	rtas_limit - RTAS_MAX_SIZE		6641386	1		-			
ANR	6641662	Identifier	rtas_limit		6641386	0					
ANR	6641663	Identifier	RTAS_MAX_SIZE		6641386	1					
ANR	6641664	ExpressionStatement	spapr -> fdt_addr = spapr -> rtas_addr - FDT_MAX_SIZE	123:4:2218:2267	6641386	27	True				
ANR	6641665	AssignmentExpression	spapr -> fdt_addr = spapr -> rtas_addr - FDT_MAX_SIZE		6641386	0		=			
ANR	6641666	PtrMemberAccess	spapr -> fdt_addr		6641386	0					
ANR	6641667	Identifier	spapr		6641386	0					
ANR	6641668	Identifier	fdt_addr		6641386	1					
ANR	6641669	AdditiveExpression	spapr -> rtas_addr - FDT_MAX_SIZE		6641386	1		-			
ANR	6641670	PtrMemberAccess	spapr -> rtas_addr		6641386	0					
ANR	6641671	Identifier	spapr		6641386	0					
ANR	6641672	Identifier	rtas_addr		6641386	1					
ANR	6641673	Identifier	FDT_MAX_SIZE		6641386	1					
ANR	6641674	ExpressionStatement	load_limit = spapr -> fdt_addr - FW_OVERHEAD	125:4:2274:2316	6641386	28	True				
ANR	6641675	AssignmentExpression	load_limit = spapr -> fdt_addr - FW_OVERHEAD		6641386	0		=			
ANR	6641676	Identifier	load_limit		6641386	0					
ANR	6641677	AdditiveExpression	spapr -> fdt_addr - FW_OVERHEAD		6641386	1		-			
ANR	6641678	PtrMemberAccess	spapr -> fdt_addr		6641386	0					
ANR	6641679	Identifier	spapr		6641386	0					
ANR	6641680	Identifier	fdt_addr		6641386	1					
ANR	6641681	Identifier	FW_OVERHEAD		6641386	1					
ANR	6641682	ExpressionStatement	spapr -> htab_shift = 18	135:4:2524:2546	6641386	29	True				
ANR	6641683	AssignmentExpression	spapr -> htab_shift = 18		6641386	0		=			
ANR	6641684	PtrMemberAccess	spapr -> htab_shift		6641386	0					
ANR	6641685	Identifier	spapr		6641386	0					
ANR	6641686	Identifier	htab_shift		6641386	1					
ANR	6641687	PrimaryExpression	18		6641386	1					
ANR	6641688	WhileStatement	while ( spapr -> htab_shift <= 46 )		6641386	30					
ANR	6641689	Condition	spapr -> htab_shift <= 46	137:11:2591:2613	6641386	0	True				
ANR	6641690	RelationalExpression	spapr -> htab_shift <= 46		6641386	0		<=			
ANR	6641691	PtrMemberAccess	spapr -> htab_shift		6641386	0					
ANR	6641692	Identifier	spapr		6641386	0					
ANR	6641693	Identifier	htab_shift		6641386	1					
ANR	6641694	PrimaryExpression	46		6641386	1					
ANR	6641695	CompoundStatement		135:36:2560:2560	6641386	1					
ANR	6641696	Statement	if	139:8:2627:2628	6641386	0	True				
ANR	6641697	Statement	(	139:11:2630:2630	6641386	1	True				
ANR	6641698	Statement	(	139:12:2631:2631	6641386	2	True				
ANR	6641699	Statement	1UL	139:13:2632:2634	6641386	3	True				
ANR	6641700	Statement	L	139:16:2635:2635	6641386	4	True				
ANR	6641701	Statement	<<	139:18:2637:2638	6641386	5	True				
ANR	6641702	Statement	(	139:21:2640:2640	6641386	6	True				
ANR	6641703	Statement	spapr	139:22:2641:2645	6641386	7	True				
ANR	6641704	Statement	->	139:27:2646:2647	6641386	8	True				
ANR	6641705	Statement	htab_shift	139:29:2648:2657	6641386	9	True				
ANR	6641706	Statement	+	139:40:2659:2659	6641386	10	True				
ANR	6641707	Statement	7	139:42:2661:2661	6641386	11	True				
ANR	6641708	Statement	)	139:43:2662:2662	6641386	12	True				
ANR	6641709	Statement	)	139:44:2663:2663	6641386	13	True				
ANR	6641710	Statement	>=	139:46:2665:2666	6641386	14	True				
ANR	6641711	Statement	ram_size	139:49:2668:2675	6641386	15	True				
ANR	6641712	Statement	)	139:57:2676:2676	6641386	16	True				
ANR	6641713	CompoundStatement		137:59:2622:2622	6641386	17					
ANR	6641714	BreakStatement	break ;	141:12:2693:2698	6641386	0	True				
ANR	6641715	ExpressionStatement	spapr -> htab_shift ++	145:8:2720:2739	6641386	18	True				
ANR	6641716	PostIncDecOperationExpression	spapr -> htab_shift ++		6641386	0					
ANR	6641717	PtrMemberAccess	spapr -> htab_shift		6641386	0					
ANR	6641718	Identifier	spapr		6641386	0					
ANR	6641719	Identifier	htab_shift		6641386	1					
ANR	6641720	IncDec	++		6641386	1					
ANR	6641721	ExpressionStatement	"spapr -> icp = xics_system_init ( smp_cpus * kvmppc_smt_threads ( ) / smp_threads , XICS_IRQS )"	153:4:2821:2943	6641386	31	True				
ANR	6641722	AssignmentExpression	"spapr -> icp = xics_system_init ( smp_cpus * kvmppc_smt_threads ( ) / smp_threads , XICS_IRQS )"		6641386	0		=			
ANR	6641723	PtrMemberAccess	spapr -> icp		6641386	0					
ANR	6641724	Identifier	spapr		6641386	0					
ANR	6641725	Identifier	icp		6641386	1					
ANR	6641726	CallExpression	"xics_system_init ( smp_cpus * kvmppc_smt_threads ( ) / smp_threads , XICS_IRQS )"		6641386	1					
ANR	6641727	Callee	xics_system_init		6641386	0					
ANR	6641728	Identifier	xics_system_init		6641386	0					
ANR	6641729	ArgumentList	smp_cpus * kvmppc_smt_threads ( ) / smp_threads		6641386	1					
ANR	6641730	Argument	smp_cpus * kvmppc_smt_threads ( ) / smp_threads		6641386	0					
ANR	6641731	MultiplicativeExpression	smp_cpus * kvmppc_smt_threads ( ) / smp_threads		6641386	0		*			
ANR	6641732	Identifier	smp_cpus		6641386	0					
ANR	6641733	MultiplicativeExpression	kvmppc_smt_threads ( ) / smp_threads		6641386	1		/			
ANR	6641734	CallExpression	kvmppc_smt_threads ( )		6641386	0					
ANR	6641735	Callee	kvmppc_smt_threads		6641386	0					
ANR	6641736	Identifier	kvmppc_smt_threads		6641386	0					
ANR	6641737	ArgumentList			6641386	1					
ANR	6641738	Identifier	smp_threads		6641386	1					
ANR	6641739	Argument	XICS_IRQS		6641386	1					
ANR	6641740	Identifier	XICS_IRQS		6641386	0					
ANR	6641741	ExpressionStatement	spapr -> next_irq = XICS_IRQ_BASE	157:4:2950:2981	6641386	32	True				
ANR	6641742	AssignmentExpression	spapr -> next_irq = XICS_IRQ_BASE		6641386	0		=			
ANR	6641743	PtrMemberAccess	spapr -> next_irq		6641386	0					
ANR	6641744	Identifier	spapr		6641386	0					
ANR	6641745	Identifier	next_irq		6641386	1					
ANR	6641746	Identifier	XICS_IRQ_BASE		6641386	1					
ANR	6641747	IfStatement	if ( cpu_model == NULL )		6641386	33					
ANR	6641748	Condition	cpu_model == NULL	163:8:3015:3031	6641386	0	True				
ANR	6641749	EqualityExpression	cpu_model == NULL		6641386	0		==			
ANR	6641750	Identifier	cpu_model		6641386	0					
ANR	6641751	Identifier	NULL		6641386	1					
ANR	6641752	CompoundStatement		161:27:2978:2978	6641386	1					
ANR	6641753	ExpressionStatement	"cpu_model = kvm_enabled ( ) ? ""host"" : ""POWER7"""	165:8:3045:3090	6641386	0	True				
ANR	6641754	AssignmentExpression	"cpu_model = kvm_enabled ( ) ? ""host"" : ""POWER7"""		6641386	0		=			
ANR	6641755	Identifier	cpu_model		6641386	0					
ANR	6641756	ConditionalExpression	"kvm_enabled ( ) ? ""host"" : ""POWER7"""		6641386	1					
ANR	6641757	Condition	kvm_enabled ( )		6641386	0					
ANR	6641758	CallExpression	kvm_enabled ( )		6641386	0					
ANR	6641759	Callee	kvm_enabled		6641386	0					
ANR	6641760	Identifier	kvm_enabled		6641386	0					
ANR	6641761	ArgumentList			6641386	1					
ANR	6641762	PrimaryExpression	"""host"""		6641386	1					
ANR	6641763	PrimaryExpression	"""POWER7"""		6641386	2					
ANR	6641764	ForStatement	for ( i = 0 ; i < smp_cpus ; i ++ )		6641386	34					
ANR	6641765	ForInit	i = 0 ;	169:9:3109:3114	6641386	0	True				
ANR	6641766	AssignmentExpression	i = 0		6641386	0		=			
ANR	6641767	Identifier	i		6641386	0					
ANR	6641768	PrimaryExpression	0		6641386	1					
ANR	6641769	Condition	i < smp_cpus	169:16:3116:3127	6641386	1	True				
ANR	6641770	RelationalExpression	i < smp_cpus		6641386	0		<			
ANR	6641771	Identifier	i		6641386	0					
ANR	6641772	Identifier	smp_cpus		6641386	1					
ANR	6641773	PostIncDecOperationExpression	i ++	169:30:3130:3132	6641386	2	True				
ANR	6641774	Identifier	i		6641386	0					
ANR	6641775	IncDec	++		6641386	1					
ANR	6641776	CompoundStatement		167:35:3079:3079	6641386	3					
ANR	6641777	ExpressionStatement	cpu = cpu_ppc_init ( cpu_model )	171:8:3146:3175	6641386	0	True				
ANR	6641778	AssignmentExpression	cpu = cpu_ppc_init ( cpu_model )		6641386	0		=			
ANR	6641779	Identifier	cpu		6641386	0					
ANR	6641780	CallExpression	cpu_ppc_init ( cpu_model )		6641386	1					
ANR	6641781	Callee	cpu_ppc_init		6641386	0					
ANR	6641782	Identifier	cpu_ppc_init		6641386	0					
ANR	6641783	ArgumentList	cpu_model		6641386	1					
ANR	6641784	Argument	cpu_model		6641386	0					
ANR	6641785	Identifier	cpu_model		6641386	0					
ANR	6641786	IfStatement	if ( cpu == NULL )		6641386	1					
ANR	6641787	Condition	cpu == NULL	173:12:3190:3200	6641386	0	True				
ANR	6641788	EqualityExpression	cpu == NULL		6641386	0		==			
ANR	6641789	Identifier	cpu		6641386	0					
ANR	6641790	Identifier	NULL		6641386	1					
ANR	6641791	CompoundStatement		171:25:3147:3147	6641386	1					
ANR	6641792	ExpressionStatement	"fprintf ( stderr , ""Unable to find PowerPC CPU definition\\n"" )"	175:12:3218:3276	6641386	0	True				
ANR	6641793	CallExpression	"fprintf ( stderr , ""Unable to find PowerPC CPU definition\\n"" )"		6641386	0					
ANR	6641794	Callee	fprintf		6641386	0					
ANR	6641795	Identifier	fprintf		6641386	0					
ANR	6641796	ArgumentList	stderr		6641386	1					
ANR	6641797	Argument	stderr		6641386	0					
ANR	6641798	Identifier	stderr		6641386	0					
ANR	6641799	Argument	"""Unable to find PowerPC CPU definition\\n"""		6641386	1					
ANR	6641800	PrimaryExpression	"""Unable to find PowerPC CPU definition\\n"""		6641386	0					
ANR	6641801	ExpressionStatement	exit ( 1 )	177:12:3291:3298	6641386	1	True				
ANR	6641802	CallExpression	exit ( 1 )		6641386	0					
ANR	6641803	Callee	exit		6641386	0					
ANR	6641804	Identifier	exit		6641386	0					
ANR	6641805	ArgumentList	1		6641386	1					
ANR	6641806	Argument	1		6641386	0					
ANR	6641807	PrimaryExpression	1		6641386	0					
ANR	6641808	ExpressionStatement	env = & cpu -> env	181:8:3320:3335	6641386	2	True				
ANR	6641809	AssignmentExpression	env = & cpu -> env		6641386	0		=			
ANR	6641810	Identifier	env		6641386	0					
ANR	6641811	UnaryOperationExpression	& cpu -> env		6641386	1					
ANR	6641812	UnaryOperator	&		6641386	0					
ANR	6641813	PtrMemberAccess	cpu -> env		6641386	1					
ANR	6641814	Identifier	cpu		6641386	0					
ANR	6641815	Identifier	env		6641386	1					
ANR	6641816	ExpressionStatement	"xics_cpu_setup ( spapr -> icp , cpu )"	185:8:3348:3379	6641386	3	True				
ANR	6641817	CallExpression	"xics_cpu_setup ( spapr -> icp , cpu )"		6641386	0					
ANR	6641818	Callee	xics_cpu_setup		6641386	0					
ANR	6641819	Identifier	xics_cpu_setup		6641386	0					
ANR	6641820	ArgumentList	spapr -> icp		6641386	1					
ANR	6641821	Argument	spapr -> icp		6641386	0					
ANR	6641822	PtrMemberAccess	spapr -> icp		6641386	0					
ANR	6641823	Identifier	spapr		6641386	0					
ANR	6641824	Identifier	icp		6641386	1					
ANR	6641825	Argument	cpu		6641386	1					
ANR	6641826	Identifier	cpu		6641386	0					
ANR	6641827	ExpressionStatement	"cpu_ppc_tb_init ( env , TIMEBASE_FREQ )"	191:8:3442:3477	6641386	4	True				
ANR	6641828	CallExpression	"cpu_ppc_tb_init ( env , TIMEBASE_FREQ )"		6641386	0					
ANR	6641829	Callee	cpu_ppc_tb_init		6641386	0					
ANR	6641830	Identifier	cpu_ppc_tb_init		6641386	0					
ANR	6641831	ArgumentList	env		6641386	1					
ANR	6641832	Argument	env		6641386	0					
ANR	6641833	Identifier	env		6641386	0					
ANR	6641834	Argument	TIMEBASE_FREQ		6641386	1					
ANR	6641835	Identifier	TIMEBASE_FREQ		6641386	0					
ANR	6641836	ExpressionStatement	env -> msr_mask &= ~ ( 1 << 6 )	201:8:3622:3648	6641386	5	True				
ANR	6641837	AssignmentExpression	env -> msr_mask &= ~ ( 1 << 6 )		6641386	0		&=			
ANR	6641838	PtrMemberAccess	env -> msr_mask		6641386	0					
ANR	6641839	Identifier	env		6641386	0					
ANR	6641840	Identifier	msr_mask		6641386	1					
ANR	6641841	UnaryOperationExpression	~ ( 1 << 6 )		6641386	1					
ANR	6641842	UnaryOperator	~		6641386	0					
ANR	6641843	ShiftExpression	1 << 6		6641386	1		<<			
ANR	6641844	PrimaryExpression	1		6641386	0					
ANR	6641845	PrimaryExpression	6		6641386	1					
ANR	6641846	IfStatement	if ( kvm_enabled ( ) )		6641386	6					
ANR	6641847	Condition	kvm_enabled ( )	207:12:3713:3725	6641386	0	True				
ANR	6641848	CallExpression	kvm_enabled ( )		6641386	0					
ANR	6641849	Callee	kvm_enabled		6641386	0					
ANR	6641850	Identifier	kvm_enabled		6641386	0					
ANR	6641851	ArgumentList			6641386	1					
ANR	6641852	CompoundStatement		205:27:3672:3672	6641386	1					
ANR	6641853	ExpressionStatement	kvmppc_set_papr ( cpu )	209:12:3743:3763	6641386	0	True				
ANR	6641854	CallExpression	kvmppc_set_papr ( cpu )		6641386	0					
ANR	6641855	Callee	kvmppc_set_papr		6641386	0					
ANR	6641856	Identifier	kvmppc_set_papr		6641386	0					
ANR	6641857	ArgumentList	cpu		6641386	1					
ANR	6641858	Argument	cpu		6641386	0					
ANR	6641859	Identifier	cpu		6641386	0					
ANR	6641860	ExpressionStatement	"qemu_register_reset ( spapr_cpu_reset , cpu )"	215:8:3787:3828	6641386	7	True				
ANR	6641861	CallExpression	"qemu_register_reset ( spapr_cpu_reset , cpu )"		6641386	0					
ANR	6641862	Callee	qemu_register_reset		6641386	0					
ANR	6641863	Identifier	qemu_register_reset		6641386	0					
ANR	6641864	ArgumentList	spapr_cpu_reset		6641386	1					
ANR	6641865	Argument	spapr_cpu_reset		6641386	0					
ANR	6641866	Identifier	spapr_cpu_reset		6641386	0					
ANR	6641867	Argument	cpu		6641386	1					
ANR	6641868	Identifier	cpu		6641386	0					
ANR	6641869	ExpressionStatement	spapr -> ram_limit = ram_size	223:4:3868:3895	6641386	35	True				
ANR	6641870	AssignmentExpression	spapr -> ram_limit = ram_size		6641386	0		=			
ANR	6641871	PtrMemberAccess	spapr -> ram_limit		6641386	0					
ANR	6641872	Identifier	spapr		6641386	0					
ANR	6641873	Identifier	ram_limit		6641386	1					
ANR	6641874	Identifier	ram_size		6641386	1					
ANR	6641875	IfStatement	if ( spapr -> ram_limit > rma_alloc_size )		6641386	36					
ANR	6641876	Condition	spapr -> ram_limit > rma_alloc_size	225:8:3906:3938	6641386	0	True				
ANR	6641877	RelationalExpression	spapr -> ram_limit > rma_alloc_size		6641386	0		>			
ANR	6641878	PtrMemberAccess	spapr -> ram_limit		6641386	0					
ANR	6641879	Identifier	spapr		6641386	0					
ANR	6641880	Identifier	ram_limit		6641386	1					
ANR	6641881	Identifier	rma_alloc_size		6641386	1					
ANR	6641882	CompoundStatement		227:8:3946:4004	6641386	1					
ANR	6641883	IdentifierDeclStatement	ram_addr_t nonrma_base = rma_alloc_size ;	227:8:3952:3991	6641386	0	True				
ANR	6641884	IdentifierDecl	nonrma_base = rma_alloc_size		6641386	0					
ANR	6641885	IdentifierDeclType	ram_addr_t		6641386	0					
ANR	6641886	Identifier	nonrma_base		6641386	1					
ANR	6641887	AssignmentExpression	nonrma_base = rma_alloc_size		6641386	2		=			
ANR	6641888	Identifier	rma_alloc_size		6641386	0					
ANR	6641889	Identifier	rma_alloc_size		6641386	1					
ANR	6641890	IdentifierDeclStatement	ram_addr_t nonrma_size = spapr -> ram_limit - rma_alloc_size ;	229:8:4002:4060	6641386	1	True				
ANR	6641891	IdentifierDecl	nonrma_size = spapr -> ram_limit - rma_alloc_size		6641386	0					
ANR	6641892	IdentifierDeclType	ram_addr_t		6641386	0					
ANR	6641893	Identifier	nonrma_size		6641386	1					
ANR	6641894	AssignmentExpression	nonrma_size = spapr -> ram_limit - rma_alloc_size		6641386	2		=			
ANR	6641895	Identifier	nonrma_size		6641386	0					
ANR	6641896	AdditiveExpression	spapr -> ram_limit - rma_alloc_size		6641386	1		-			
ANR	6641897	PtrMemberAccess	spapr -> ram_limit		6641386	0					
ANR	6641898	Identifier	spapr		6641386	0					
ANR	6641899	Identifier	ram_limit		6641386	1					
ANR	6641900	Identifier	rma_alloc_size		6641386	1					
ANR	6641901	ExpressionStatement	"memory_region_init_ram ( ram , NULL , ""ppc_spapr.ram"" , nonrma_size )"	233:8:4073:4136	6641386	2	True				
ANR	6641902	CallExpression	"memory_region_init_ram ( ram , NULL , ""ppc_spapr.ram"" , nonrma_size )"		6641386	0					
ANR	6641903	Callee	memory_region_init_ram		6641386	0					
ANR	6641904	Identifier	memory_region_init_ram		6641386	0					
ANR	6641905	ArgumentList	ram		6641386	1					
ANR	6641906	Argument	ram		6641386	0					
ANR	6641907	Identifier	ram		6641386	0					
ANR	6641908	Argument	NULL		6641386	1					
ANR	6641909	Identifier	NULL		6641386	0					
ANR	6641910	Argument	"""ppc_spapr.ram"""		6641386	2					
ANR	6641911	PrimaryExpression	"""ppc_spapr.ram"""		6641386	0					
ANR	6641912	Argument	nonrma_size		6641386	3					
ANR	6641913	Identifier	nonrma_size		6641386	0					
ANR	6641914	ExpressionStatement	vmstate_register_ram_global ( ram )	235:8:4147:4179	6641386	3	True				
ANR	6641915	CallExpression	vmstate_register_ram_global ( ram )		6641386	0					
ANR	6641916	Callee	vmstate_register_ram_global		6641386	0					
ANR	6641917	Identifier	vmstate_register_ram_global		6641386	0					
ANR	6641918	ArgumentList	ram		6641386	1					
ANR	6641919	Argument	ram		6641386	0					
ANR	6641920	Identifier	ram		6641386	0					
ANR	6641921	ExpressionStatement	"memory_region_add_subregion ( sysmem , nonrma_base , ram )"	237:8:4190:4243	6641386	4	True				
ANR	6641922	CallExpression	"memory_region_add_subregion ( sysmem , nonrma_base , ram )"		6641386	0					
ANR	6641923	Callee	memory_region_add_subregion		6641386	0					
ANR	6641924	Identifier	memory_region_add_subregion		6641386	0					
ANR	6641925	ArgumentList	sysmem		6641386	1					
ANR	6641926	Argument	sysmem		6641386	0					
ANR	6641927	Identifier	sysmem		6641386	0					
ANR	6641928	Argument	nonrma_base		6641386	1					
ANR	6641929	Identifier	nonrma_base		6641386	0					
ANR	6641930	Argument	ram		6641386	2					
ANR	6641931	Identifier	ram		6641386	0					
ANR	6641932	ExpressionStatement	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , ""spapr-rtas.bin"" )"	243:4:4259:4323	6641386	37	True				
ANR	6641933	AssignmentExpression	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , ""spapr-rtas.bin"" )"		6641386	0		=			
ANR	6641934	Identifier	filename		6641386	0					
ANR	6641935	CallExpression	"qemu_find_file ( QEMU_FILE_TYPE_BIOS , ""spapr-rtas.bin"" )"		6641386	1					
ANR	6641936	Callee	qemu_find_file		6641386	0					
ANR	6641937	Identifier	qemu_find_file		6641386	0					
ANR	6641938	ArgumentList	QEMU_FILE_TYPE_BIOS		6641386	1					
ANR	6641939	Argument	QEMU_FILE_TYPE_BIOS		6641386	0					
ANR	6641940	Identifier	QEMU_FILE_TYPE_BIOS		6641386	0					
ANR	6641941	Argument	"""spapr-rtas.bin"""		6641386	1					
ANR	6641942	PrimaryExpression	"""spapr-rtas.bin"""		6641386	0					
ANR	6641943	ExpressionStatement	"spapr -> rtas_size = load_image_targphys ( filename , spapr -> rtas_addr , rtas_limit - spapr -> rtas_addr )"	245:4:4330:4471	6641386	38	True				
ANR	6641944	AssignmentExpression	"spapr -> rtas_size = load_image_targphys ( filename , spapr -> rtas_addr , rtas_limit - spapr -> rtas_addr )"		6641386	0		=			
ANR	6641945	PtrMemberAccess	spapr -> rtas_size		6641386	0					
ANR	6641946	Identifier	spapr		6641386	0					
ANR	6641947	Identifier	rtas_size		6641386	1					
ANR	6641948	CallExpression	"load_image_targphys ( filename , spapr -> rtas_addr , rtas_limit - spapr -> rtas_addr )"		6641386	1					
ANR	6641949	Callee	load_image_targphys		6641386	0					
ANR	6641950	Identifier	load_image_targphys		6641386	0					
ANR	6641951	ArgumentList	filename		6641386	1					
ANR	6641952	Argument	filename		6641386	0					
ANR	6641953	Identifier	filename		6641386	0					
ANR	6641954	Argument	spapr -> rtas_addr		6641386	1					
ANR	6641955	PtrMemberAccess	spapr -> rtas_addr		6641386	0					
ANR	6641956	Identifier	spapr		6641386	0					
ANR	6641957	Identifier	rtas_addr		6641386	1					
ANR	6641958	Argument	rtas_limit - spapr -> rtas_addr		6641386	2					
ANR	6641959	AdditiveExpression	rtas_limit - spapr -> rtas_addr		6641386	0		-			
ANR	6641960	Identifier	rtas_limit		6641386	0					
ANR	6641961	PtrMemberAccess	spapr -> rtas_addr		6641386	1					
ANR	6641962	Identifier	spapr		6641386	0					
ANR	6641963	Identifier	rtas_addr		6641386	1					
ANR	6641964	IfStatement	if ( spapr -> rtas_size < 0 )		6641386	39					
ANR	6641965	Condition	spapr -> rtas_size < 0	249:8:4482:4501	6641386	0	True				
ANR	6641966	RelationalExpression	spapr -> rtas_size < 0		6641386	0		<			
ANR	6641967	PtrMemberAccess	spapr -> rtas_size		6641386	0					
ANR	6641968	Identifier	spapr		6641386	0					
ANR	6641969	Identifier	rtas_size		6641386	1					
ANR	6641970	PrimaryExpression	0		6641386	1					
ANR	6641971	CompoundStatement		247:30:4448:4448	6641386	1					
ANR	6641972	ExpressionStatement	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"	251:8:4515:4574	6641386	0	True				
ANR	6641973	CallExpression	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"		6641386	0					
ANR	6641974	Callee	hw_error		6641386	0					
ANR	6641975	Identifier	hw_error		6641386	0					
ANR	6641976	ArgumentList	"""qemu: could not load LPAR rtas '%s'\\n"""		6641386	1					
ANR	6641977	Argument	"""qemu: could not load LPAR rtas '%s'\\n"""		6641386	0					
ANR	6641978	PrimaryExpression	"""qemu: could not load LPAR rtas '%s'\\n"""		6641386	0					
ANR	6641979	Argument	filename		6641386	1					
ANR	6641980	Identifier	filename		6641386	0					
ANR	6641981	ExpressionStatement	exit ( 1 )	253:8:4585:4592	6641386	1	True				
ANR	6641982	CallExpression	exit ( 1 )		6641386	0					
ANR	6641983	Callee	exit		6641386	0					
ANR	6641984	Identifier	exit		6641386	0					
ANR	6641985	ArgumentList	1		6641386	1					
ANR	6641986	Argument	1		6641386	0					
ANR	6641987	PrimaryExpression	1		6641386	0					
ANR	6641988	IfStatement	if ( spapr -> rtas_size > RTAS_MAX_SIZE )		6641386	40					
ANR	6641989	Condition	spapr -> rtas_size > RTAS_MAX_SIZE	257:8:4610:4641	6641386	0	True				
ANR	6641990	RelationalExpression	spapr -> rtas_size > RTAS_MAX_SIZE		6641386	0		>			
ANR	6641991	PtrMemberAccess	spapr -> rtas_size		6641386	0					
ANR	6641992	Identifier	spapr		6641386	0					
ANR	6641993	Identifier	rtas_size		6641386	1					
ANR	6641994	Identifier	RTAS_MAX_SIZE		6641386	1					
ANR	6641995	CompoundStatement		255:42:4588:4588	6641386	1					
ANR	6641996	ExpressionStatement	"hw_error ( ""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"" , spapr -> rtas_size , RTAS_MAX_SIZE )"	259:8:4655:4760	6641386	0	True				
ANR	6641997	CallExpression	"hw_error ( ""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"" , spapr -> rtas_size , RTAS_MAX_SIZE )"		6641386	0					
ANR	6641998	Callee	hw_error		6641386	0					
ANR	6641999	Identifier	hw_error		6641386	0					
ANR	6642000	ArgumentList	"""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"""		6641386	1					
ANR	6642001	Argument	"""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"""		6641386	0					
ANR	6642002	PrimaryExpression	"""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"""		6641386	0					
ANR	6642003	Argument	spapr -> rtas_size		6641386	1					
ANR	6642004	PtrMemberAccess	spapr -> rtas_size		6641386	0					
ANR	6642005	Identifier	spapr		6641386	0					
ANR	6642006	Identifier	rtas_size		6641386	1					
ANR	6642007	Argument	RTAS_MAX_SIZE		6641386	2					
ANR	6642008	Identifier	RTAS_MAX_SIZE		6641386	0					
ANR	6642009	ExpressionStatement	exit ( 1 )	263:8:4771:4778	6641386	1	True				
ANR	6642010	CallExpression	exit ( 1 )		6641386	0					
ANR	6642011	Callee	exit		6641386	0					
ANR	6642012	Identifier	exit		6641386	0					
ANR	6642013	ArgumentList	1		6641386	1					
ANR	6642014	Argument	1		6641386	0					
ANR	6642015	PrimaryExpression	1		6641386	0					
ANR	6642016	ExpressionStatement	g_free ( filename )	267:4:4792:4808	6641386	41	True				
ANR	6642017	CallExpression	g_free ( filename )		6641386	0					
ANR	6642018	Callee	g_free		6641386	0					
ANR	6642019	Identifier	g_free		6641386	0					
ANR	6642020	ArgumentList	filename		6641386	1					
ANR	6642021	Argument	filename		6641386	0					
ANR	6642022	Identifier	filename		6641386	0					
ANR	6642023	ExpressionStatement	spapr_events_init ( spapr )	273:4:4862:4886	6641386	42	True				
ANR	6642024	CallExpression	spapr_events_init ( spapr )		6641386	0					
ANR	6642025	Callee	spapr_events_init		6641386	0					
ANR	6642026	Identifier	spapr_events_init		6641386	0					
ANR	6642027	ArgumentList	spapr		6641386	1					
ANR	6642028	Argument	spapr		6641386	0					
ANR	6642029	Identifier	spapr		6641386	0					
ANR	6642030	ExpressionStatement	spapr -> vio_bus = spapr_vio_bus_init ( )	279:4:4921:4958	6641386	43	True				
ANR	6642031	AssignmentExpression	spapr -> vio_bus = spapr_vio_bus_init ( )		6641386	0		=			
ANR	6642032	PtrMemberAccess	spapr -> vio_bus		6641386	0					
ANR	6642033	Identifier	spapr		6641386	0					
ANR	6642034	Identifier	vio_bus		6641386	1					
ANR	6642035	CallExpression	spapr_vio_bus_init ( )		6641386	1					
ANR	6642036	Callee	spapr_vio_bus_init		6641386	0					
ANR	6642037	Identifier	spapr_vio_bus_init		6641386	0					
ANR	6642038	ArgumentList			6641386	1					
ANR	6642039	ForStatement	for ( i = 0 ; i < MAX_SERIAL_PORTS ; i ++ )		6641386	44					
ANR	6642040	ForInit	i = 0 ;	283:9:4972:4977	6641386	0	True				
ANR	6642041	AssignmentExpression	i = 0		6641386	0		=			
ANR	6642042	Identifier	i		6641386	0					
ANR	6642043	PrimaryExpression	0		6641386	1					
ANR	6642044	Condition	i < MAX_SERIAL_PORTS	283:16:4979:4998	6641386	1	True				
ANR	6642045	RelationalExpression	i < MAX_SERIAL_PORTS		6641386	0		<			
ANR	6642046	Identifier	i		6641386	0					
ANR	6642047	Identifier	MAX_SERIAL_PORTS		6641386	1					
ANR	6642048	PostIncDecOperationExpression	i ++	283:38:5001:5003	6641386	2	True				
ANR	6642049	Identifier	i		6641386	0					
ANR	6642050	IncDec	++		6641386	1					
ANR	6642051	CompoundStatement		281:43:4950:4950	6641386	3					
ANR	6642052	IfStatement	if ( serial_hds [ i ] )		6641386	0					
ANR	6642053	Condition	serial_hds [ i ]	285:12:5021:5033	6641386	0	True				
ANR	6642054	ArrayIndexing	serial_hds [ i ]		6641386	0					
ANR	6642055	Identifier	serial_hds		6641386	0					
ANR	6642056	Identifier	i		6641386	1					
ANR	6642057	CompoundStatement		283:27:4980:4980	6641386	1					
ANR	6642058	ExpressionStatement	"spapr_vty_create ( spapr -> vio_bus , serial_hds [ i ] )"	287:12:5051:5098	6641386	0	True				
ANR	6642059	CallExpression	"spapr_vty_create ( spapr -> vio_bus , serial_hds [ i ] )"		6641386	0					
ANR	6642060	Callee	spapr_vty_create		6641386	0					
ANR	6642061	Identifier	spapr_vty_create		6641386	0					
ANR	6642062	ArgumentList	spapr -> vio_bus		6641386	1					
ANR	6642063	Argument	spapr -> vio_bus		6641386	0					
ANR	6642064	PtrMemberAccess	spapr -> vio_bus		6641386	0					
ANR	6642065	Identifier	spapr		6641386	0					
ANR	6642066	Identifier	vio_bus		6641386	1					
ANR	6642067	Argument	serial_hds [ i ]		6641386	1					
ANR	6642068	ArrayIndexing	serial_hds [ i ]		6641386	0					
ANR	6642069	Identifier	serial_hds		6641386	0					
ANR	6642070	Identifier	i		6641386	1					
ANR	6642071	ExpressionStatement	spapr_create_nvram ( spapr )	297:4:5184:5209	6641386	45	True				
ANR	6642072	CallExpression	spapr_create_nvram ( spapr )		6641386	0					
ANR	6642073	Callee	spapr_create_nvram		6641386	0					
ANR	6642074	Identifier	spapr_create_nvram		6641386	0					
ANR	6642075	ArgumentList	spapr		6641386	1					
ANR	6642076	Argument	spapr		6641386	0					
ANR	6642077	Identifier	spapr		6641386	0					
ANR	6642078	ExpressionStatement	"spapr_pci_msi_init ( spapr , SPAPR_PCI_MSI_WINDOW )"	303:4:5240:5287	6641386	46	True				
ANR	6642079	CallExpression	"spapr_pci_msi_init ( spapr , SPAPR_PCI_MSI_WINDOW )"		6641386	0					
ANR	6642080	Callee	spapr_pci_msi_init		6641386	0					
ANR	6642081	Identifier	spapr_pci_msi_init		6641386	0					
ANR	6642082	ArgumentList	spapr		6641386	1					
ANR	6642083	Argument	spapr		6641386	0					
ANR	6642084	Identifier	spapr		6641386	0					
ANR	6642085	Argument	SPAPR_PCI_MSI_WINDOW		6641386	1					
ANR	6642086	Identifier	SPAPR_PCI_MSI_WINDOW		6641386	0					
ANR	6642087	ExpressionStatement	spapr_pci_rtas_init ( )	305:4:5294:5315	6641386	47	True				
ANR	6642088	CallExpression	spapr_pci_rtas_init ( )		6641386	0					
ANR	6642089	Callee	spapr_pci_rtas_init		6641386	0					
ANR	6642090	Identifier	spapr_pci_rtas_init		6641386	0					
ANR	6642091	ArgumentList			6641386	1					
ANR	6642092	ExpressionStatement	"phb = spapr_create_phb ( spapr , 0 )"	309:4:5324:5356	6641386	48	True				
ANR	6642093	AssignmentExpression	"phb = spapr_create_phb ( spapr , 0 )"		6641386	0		=			
ANR	6642094	Identifier	phb		6641386	0					
ANR	6642095	CallExpression	"spapr_create_phb ( spapr , 0 )"		6641386	1					
ANR	6642096	Callee	spapr_create_phb		6641386	0					
ANR	6642097	Identifier	spapr_create_phb		6641386	0					
ANR	6642098	ArgumentList	spapr		6641386	1					
ANR	6642099	Argument	spapr		6641386	0					
ANR	6642100	Identifier	spapr		6641386	0					
ANR	6642101	Argument	0		6641386	1					
ANR	6642102	PrimaryExpression	0		6641386	0					
ANR	6642103	ForStatement	for ( i = 0 ; i < nb_nics ; i ++ )		6641386	49					
ANR	6642104	ForInit	i = 0 ;	313:9:5370:5375	6641386	0	True				
ANR	6642105	AssignmentExpression	i = 0		6641386	0		=			
ANR	6642106	Identifier	i		6641386	0					
ANR	6642107	PrimaryExpression	0		6641386	1					
ANR	6642108	Condition	i < nb_nics	313:16:5377:5387	6641386	1	True				
ANR	6642109	RelationalExpression	i < nb_nics		6641386	0		<			
ANR	6642110	Identifier	i		6641386	0					
ANR	6642111	Identifier	nb_nics		6641386	1					
ANR	6642112	PostIncDecOperationExpression	i ++	313:29:5390:5392	6641386	2	True				
ANR	6642113	Identifier	i		6641386	0					
ANR	6642114	IncDec	++		6641386	1					
ANR	6642115	CompoundStatement		313:8:5350:5376	6641386	3					
ANR	6642116	IdentifierDeclStatement	NICInfo * nd = & nd_table [ i ] ;	315:8:5406:5432	6641386	0	True				
ANR	6642117	IdentifierDecl	* nd = & nd_table [ i ]		6641386	0					
ANR	6642118	IdentifierDeclType	NICInfo *		6641386	0					
ANR	6642119	Identifier	nd		6641386	1					
ANR	6642120	AssignmentExpression	* nd = & nd_table [ i ]		6641386	2		=			
ANR	6642121	Identifier	nd		6641386	0					
ANR	6642122	UnaryOperationExpression	& nd_table [ i ]		6641386	1					
ANR	6642123	UnaryOperator	&		6641386	0					
ANR	6642124	ArrayIndexing	nd_table [ i ]		6641386	1					
ANR	6642125	Identifier	nd_table		6641386	0					
ANR	6642126	Identifier	i		6641386	1					
ANR	6642127	IfStatement	if ( ! nd -> model )		6641386	1					
ANR	6642128	Condition	! nd -> model	319:12:5449:5458	6641386	0	True				
ANR	6642129	UnaryOperationExpression	! nd -> model		6641386	0					
ANR	6642130	UnaryOperator	!		6641386	0					
ANR	6642131	PtrMemberAccess	nd -> model		6641386	1					
ANR	6642132	Identifier	nd		6641386	0					
ANR	6642133	Identifier	model		6641386	1					
ANR	6642134	CompoundStatement		317:24:5405:5405	6641386	1					
ANR	6642135	ExpressionStatement	"nd -> model = g_strdup ( ""ibmveth"" )"	321:12:5476:5507	6641386	0	True				
ANR	6642136	AssignmentExpression	"nd -> model = g_strdup ( ""ibmveth"" )"		6641386	0		=			
ANR	6642137	PtrMemberAccess	nd -> model		6641386	0					
ANR	6642138	Identifier	nd		6641386	0					
ANR	6642139	Identifier	model		6641386	1					
ANR	6642140	CallExpression	"g_strdup ( ""ibmveth"" )"		6641386	1					
ANR	6642141	Callee	g_strdup		6641386	0					
ANR	6642142	Identifier	g_strdup		6641386	0					
ANR	6642143	ArgumentList	"""ibmveth"""		6641386	1					
ANR	6642144	Argument	"""ibmveth"""		6641386	0					
ANR	6642145	PrimaryExpression	"""ibmveth"""		6641386	0					
ANR	6642146	IfStatement	"if ( strcmp ( nd -> model , ""ibmveth"" ) == 0 )"		6641386	2					
ANR	6642147	Condition	"strcmp ( nd -> model , ""ibmveth"" ) == 0"	327:12:5535:5567	6641386	0	True				
ANR	6642148	EqualityExpression	"strcmp ( nd -> model , ""ibmveth"" ) == 0"		6641386	0		==			
ANR	6642149	CallExpression	"strcmp ( nd -> model , ""ibmveth"" )"		6641386	0					
ANR	6642150	Callee	strcmp		6641386	0					
ANR	6642151	Identifier	strcmp		6641386	0					
ANR	6642152	ArgumentList	nd -> model		6641386	1					
ANR	6642153	Argument	nd -> model		6641386	0					
ANR	6642154	PtrMemberAccess	nd -> model		6641386	0					
ANR	6642155	Identifier	nd		6641386	0					
ANR	6642156	Identifier	model		6641386	1					
ANR	6642157	Argument	"""ibmveth"""		6641386	1					
ANR	6642158	PrimaryExpression	"""ibmveth"""		6641386	0					
ANR	6642159	PrimaryExpression	0		6641386	1					
ANR	6642160	CompoundStatement		325:47:5514:5514	6641386	1					
ANR	6642161	ExpressionStatement	"spapr_vlan_create ( spapr -> vio_bus , nd )"	329:12:5585:5622	6641386	0	True				
ANR	6642162	CallExpression	"spapr_vlan_create ( spapr -> vio_bus , nd )"		6641386	0					
ANR	6642163	Callee	spapr_vlan_create		6641386	0					
ANR	6642164	Identifier	spapr_vlan_create		6641386	0					
ANR	6642165	ArgumentList	spapr -> vio_bus		6641386	1					
ANR	6642166	Argument	spapr -> vio_bus		6641386	0					
ANR	6642167	PtrMemberAccess	spapr -> vio_bus		6641386	0					
ANR	6642168	Identifier	spapr		6641386	0					
ANR	6642169	Identifier	vio_bus		6641386	1					
ANR	6642170	Argument	nd		6641386	1					
ANR	6642171	Identifier	nd		6641386	0					
ANR	6642172	ElseStatement	else		6641386	0					
ANR	6642173	CompoundStatement		329:15:5584:5584	6641386	0					
ANR	6642174	ExpressionStatement	"pci_nic_init_nofail ( & nd_table [ i ] , phb -> bus , nd -> model , NULL )"	333:12:5655:5715	6641386	0	True				
ANR	6642175	CallExpression	"pci_nic_init_nofail ( & nd_table [ i ] , phb -> bus , nd -> model , NULL )"		6641386	0					
ANR	6642176	Callee	pci_nic_init_nofail		6641386	0					
ANR	6642177	Identifier	pci_nic_init_nofail		6641386	0					
ANR	6642178	ArgumentList	& nd_table [ i ]		6641386	1					
ANR	6642179	Argument	& nd_table [ i ]		6641386	0					
ANR	6642180	UnaryOperationExpression	& nd_table [ i ]		6641386	0					
ANR	6642181	UnaryOperator	&		6641386	0					
ANR	6642182	ArrayIndexing	nd_table [ i ]		6641386	1					
ANR	6642183	Identifier	nd_table		6641386	0					
ANR	6642184	Identifier	i		6641386	1					
ANR	6642185	Argument	phb -> bus		6641386	1					
ANR	6642186	PtrMemberAccess	phb -> bus		6641386	0					
ANR	6642187	Identifier	phb		6641386	0					
ANR	6642188	Identifier	bus		6641386	1					
ANR	6642189	Argument	nd -> model		6641386	2					
ANR	6642190	PtrMemberAccess	nd -> model		6641386	0					
ANR	6642191	Identifier	nd		6641386	0					
ANR	6642192	Identifier	model		6641386	1					
ANR	6642193	Argument	NULL		6641386	3					
ANR	6642194	Identifier	NULL		6641386	0					
ANR	6642195	ForStatement	for ( i = 0 ; i <= drive_get_max_bus ( IF_SCSI ) ; i ++ )		6641386	50					
ANR	6642196	ForInit	i = 0 ;	341:9:5747:5752	6641386	0	True				
ANR	6642197	AssignmentExpression	i = 0		6641386	0		=			
ANR	6642198	Identifier	i		6641386	0					
ANR	6642199	PrimaryExpression	0		6641386	1					
ANR	6642200	Condition	i <= drive_get_max_bus ( IF_SCSI )	341:16:5754:5784	6641386	1	True				
ANR	6642201	RelationalExpression	i <= drive_get_max_bus ( IF_SCSI )		6641386	0		<=			
ANR	6642202	Identifier	i		6641386	0					
ANR	6642203	CallExpression	drive_get_max_bus ( IF_SCSI )		6641386	1					
ANR	6642204	Callee	drive_get_max_bus		6641386	0					
ANR	6642205	Identifier	drive_get_max_bus		6641386	0					
ANR	6642206	ArgumentList	IF_SCSI		6641386	1					
ANR	6642207	Argument	IF_SCSI		6641386	0					
ANR	6642208	Identifier	IF_SCSI		6641386	0					
ANR	6642209	PostIncDecOperationExpression	i ++	341:49:5787:5789	6641386	2	True				
ANR	6642210	Identifier	i		6641386	0					
ANR	6642211	IncDec	++		6641386	1					
ANR	6642212	CompoundStatement		339:54:5736:5736	6641386	3					
ANR	6642213	ExpressionStatement	spapr_vscsi_create ( spapr -> vio_bus )	343:8:5803:5837	6641386	0	True				
ANR	6642214	CallExpression	spapr_vscsi_create ( spapr -> vio_bus )		6641386	0					
ANR	6642215	Callee	spapr_vscsi_create		6641386	0					
ANR	6642216	Identifier	spapr_vscsi_create		6641386	0					
ANR	6642217	ArgumentList	spapr -> vio_bus		6641386	1					
ANR	6642218	Argument	spapr -> vio_bus		6641386	0					
ANR	6642219	PtrMemberAccess	spapr -> vio_bus		6641386	0					
ANR	6642220	Identifier	spapr		6641386	0					
ANR	6642221	Identifier	vio_bus		6641386	1					
ANR	6642222	IfStatement	if ( spapr_vga_init ( phb -> bus ) )		6641386	51					
ANR	6642223	Condition	spapr_vga_init ( phb -> bus )	351:8:5877:5900	6641386	0	True				
ANR	6642224	CallExpression	spapr_vga_init ( phb -> bus )		6641386	0					
ANR	6642225	Callee	spapr_vga_init		6641386	0					
ANR	6642226	Identifier	spapr_vga_init		6641386	0					
ANR	6642227	ArgumentList	phb -> bus		6641386	1					
ANR	6642228	Argument	phb -> bus		6641386	0					
ANR	6642229	PtrMemberAccess	phb -> bus		6641386	0					
ANR	6642230	Identifier	phb		6641386	0					
ANR	6642231	Identifier	bus		6641386	1					
ANR	6642232	CompoundStatement		349:34:5847:5847	6641386	1					
ANR	6642233	ExpressionStatement	spapr -> has_graphics = true	353:8:5914:5940	6641386	0	True				
ANR	6642234	AssignmentExpression	spapr -> has_graphics = true		6641386	0		=			
ANR	6642235	PtrMemberAccess	spapr -> has_graphics		6641386	0					
ANR	6642236	Identifier	spapr		6641386	0					
ANR	6642237	Identifier	has_graphics		6641386	1					
ANR	6642238	Identifier	true		6641386	1					
ANR	6642239	IfStatement	if ( usb_enabled ( spapr -> has_graphics ) )		6641386	52					
ANR	6642240	Condition	usb_enabled ( spapr -> has_graphics )	359:8:5960:5991	6641386	0	True				
ANR	6642241	CallExpression	usb_enabled ( spapr -> has_graphics )		6641386	0					
ANR	6642242	Callee	usb_enabled		6641386	0					
ANR	6642243	Identifier	usb_enabled		6641386	0					
ANR	6642244	ArgumentList	spapr -> has_graphics		6641386	1					
ANR	6642245	Argument	spapr -> has_graphics		6641386	0					
ANR	6642246	PtrMemberAccess	spapr -> has_graphics		6641386	0					
ANR	6642247	Identifier	spapr		6641386	0					
ANR	6642248	Identifier	has_graphics		6641386	1					
ANR	6642249	CompoundStatement		357:42:5938:5938	6641386	1					
ANR	6642250	ExpressionStatement	"pci_create_simple ( phb -> bus , - 1 , ""pci-ohci"" )"	361:8:6005:6048	6641386	0	True				
ANR	6642251	CallExpression	"pci_create_simple ( phb -> bus , - 1 , ""pci-ohci"" )"		6641386	0					
ANR	6642252	Callee	pci_create_simple		6641386	0					
ANR	6642253	Identifier	pci_create_simple		6641386	0					
ANR	6642254	ArgumentList	phb -> bus		6641386	1					
ANR	6642255	Argument	phb -> bus		6641386	0					
ANR	6642256	PtrMemberAccess	phb -> bus		6641386	0					
ANR	6642257	Identifier	phb		6641386	0					
ANR	6642258	Identifier	bus		6641386	1					
ANR	6642259	Argument	- 1		6641386	1					
ANR	6642260	UnaryOperationExpression	- 1		6641386	0					
ANR	6642261	UnaryOperator	-		6641386	0					
ANR	6642262	PrimaryExpression	1		6641386	1					
ANR	6642263	Argument	"""pci-ohci"""		6641386	2					
ANR	6642264	PrimaryExpression	"""pci-ohci"""		6641386	0					
ANR	6642265	IfStatement	if ( spapr -> has_graphics )		6641386	1					
ANR	6642266	Condition	spapr -> has_graphics	363:12:6063:6081	6641386	0	True				
ANR	6642267	PtrMemberAccess	spapr -> has_graphics		6641386	0					
ANR	6642268	Identifier	spapr		6641386	0					
ANR	6642269	Identifier	has_graphics		6641386	1					
ANR	6642270	CompoundStatement		361:33:6028:6028	6641386	1					
ANR	6642271	ExpressionStatement	"usbdevice_create ( ""keyboard"" )"	365:12:6099:6127	6641386	0	True				
ANR	6642272	CallExpression	"usbdevice_create ( ""keyboard"" )"		6641386	0					
ANR	6642273	Callee	usbdevice_create		6641386	0					
ANR	6642274	Identifier	usbdevice_create		6641386	0					
ANR	6642275	ArgumentList	"""keyboard"""		6641386	1					
ANR	6642276	Argument	"""keyboard"""		6641386	0					
ANR	6642277	PrimaryExpression	"""keyboard"""		6641386	0					
ANR	6642278	ExpressionStatement	"usbdevice_create ( ""mouse"" )"	367:12:6142:6167	6641386	1	True				
ANR	6642279	CallExpression	"usbdevice_create ( ""mouse"" )"		6641386	0					
ANR	6642280	Callee	usbdevice_create		6641386	0					
ANR	6642281	Identifier	usbdevice_create		6641386	0					
ANR	6642282	ArgumentList	"""mouse"""		6641386	1					
ANR	6642283	Argument	"""mouse"""		6641386	0					
ANR	6642284	PrimaryExpression	"""mouse"""		6641386	0					
ANR	6642285	IfStatement	if ( spapr -> rma_size < ( MIN_RMA_SLOF << 20 ) )		6641386	53					
ANR	6642286	Condition	spapr -> rma_size < ( MIN_RMA_SLOF << 20 )	375:8:6198:6235	6641386	0	True				
ANR	6642287	RelationalExpression	spapr -> rma_size < ( MIN_RMA_SLOF << 20 )		6641386	0		<			
ANR	6642288	PtrMemberAccess	spapr -> rma_size		6641386	0					
ANR	6642289	Identifier	spapr		6641386	0					
ANR	6642290	Identifier	rma_size		6641386	1					
ANR	6642291	ShiftExpression	MIN_RMA_SLOF << 20		6641386	1		<<			
ANR	6642292	Identifier	MIN_RMA_SLOF		6641386	0					
ANR	6642293	PrimaryExpression	20		6641386	1					
ANR	6642294	CompoundStatement		373:48:6182:6182	6641386	1					
ANR	6642295	Statement	fprintf	377:8:6249:6255	6641386	0	True				
ANR	6642296	Statement	(	377:15:6256:6256	6641386	1	True				
ANR	6642297	Statement	stderr	377:16:6257:6262	6641386	2	True				
ANR	6642298	Statement	","	377:22:6263:6263	6641386	3	True				
ANR	6642299	Statement	"""qemu: pSeries SLOF firmware requires >= """	377:24:6265:6306	6641386	4	True				
ANR	6642300	Statement	"""%ldM guest RMA (Real Mode Area memory)\\n"""	379:16:6325:6366	6641386	5	True				
ANR	6642301	Statement	","	379:58:6367:6367	6641386	6	True				
ANR	6642302	Statement	MIN_RMA_SLOF	379:60:6369:6380	6641386	7	True				
ANR	6642303	Statement	)	379:72:6381:6381	6641386	8	True				
ANR	6642304	ExpressionStatement		379:73:6382:6382	6641386	9	True				
ANR	6642305	ExpressionStatement	exit ( 1 )	381:8:6393:6400	6641386	10	True				
ANR	6642306	CallExpression	exit ( 1 )		6641386	0					
ANR	6642307	Callee	exit		6641386	0					
ANR	6642308	Identifier	exit		6641386	0					
ANR	6642309	ArgumentList	1		6641386	1					
ANR	6642310	Argument	1		6641386	0					
ANR	6642311	PrimaryExpression	1		6641386	0					
ANR	6642312	IfStatement	if ( kernel_filename )		6641386	54					
ANR	6642313	Condition	kernel_filename	387:8:6420:6434	6641386	0	True				
ANR	6642314	Identifier	kernel_filename		6641386	0					
ANR	6642315	CompoundStatement		387:8:6392:6412	6641386	1					
ANR	6642316	IdentifierDeclStatement	uint64_t lowaddr = 0 ;	389:8:6448:6468	6641386	0	True				
ANR	6642317	IdentifierDecl	lowaddr = 0		6641386	0					
ANR	6642318	IdentifierDeclType	uint64_t		6641386	0					
ANR	6642319	Identifier	lowaddr		6641386	1					
ANR	6642320	AssignmentExpression	lowaddr = 0		6641386	2		=			
ANR	6642321	Identifier	lowaddr		6641386	0					
ANR	6642322	PrimaryExpression	0		6641386	1					
ANR	6642323	ExpressionStatement	"kernel_size = load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 1 , ELF_MACHINE , 0 )"	393:8:6481:6625	6641386	1	True				
ANR	6642324	AssignmentExpression	"kernel_size = load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 1 , ELF_MACHINE , 0 )"		6641386	0		=			
ANR	6642325	Identifier	kernel_size		6641386	0					
ANR	6642326	CallExpression	"load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 1 , ELF_MACHINE , 0 )"		6641386	1					
ANR	6642327	Callee	load_elf		6641386	0					
ANR	6642328	Identifier	load_elf		6641386	0					
ANR	6642329	ArgumentList	kernel_filename		6641386	1					
ANR	6642330	Argument	kernel_filename		6641386	0					
ANR	6642331	Identifier	kernel_filename		6641386	0					
ANR	6642332	Argument	translate_kernel_address		6641386	1					
ANR	6642333	Identifier	translate_kernel_address		6641386	0					
ANR	6642334	Argument	NULL		6641386	2					
ANR	6642335	Identifier	NULL		6641386	0					
ANR	6642336	Argument	NULL		6641386	3					
ANR	6642337	Identifier	NULL		6641386	0					
ANR	6642338	Argument	& lowaddr		6641386	4					
ANR	6642339	UnaryOperationExpression	& lowaddr		6641386	0					
ANR	6642340	UnaryOperator	&		6641386	0					
ANR	6642341	Identifier	lowaddr		6641386	1					
ANR	6642342	Argument	NULL		6641386	5					
ANR	6642343	Identifier	NULL		6641386	0					
ANR	6642344	Argument	1		6641386	6					
ANR	6642345	PrimaryExpression	1		6641386	0					
ANR	6642346	Argument	ELF_MACHINE		6641386	7					
ANR	6642347	Identifier	ELF_MACHINE		6641386	0					
ANR	6642348	Argument	0		6641386	8					
ANR	6642349	PrimaryExpression	0		6641386	0					
ANR	6642350	IfStatement	if ( kernel_size < 0 )		6641386	2					
ANR	6642351	Condition	kernel_size < 0	397:12:6640:6654	6641386	0	True				
ANR	6642352	RelationalExpression	kernel_size < 0		6641386	0		<			
ANR	6642353	Identifier	kernel_size		6641386	0					
ANR	6642354	PrimaryExpression	0		6641386	1					
ANR	6642355	CompoundStatement		395:29:6601:6601	6641386	1					
ANR	6642356	ExpressionStatement	"kernel_size = load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 0 , ELF_MACHINE , 0 )"	399:12:6672:6856	6641386	0	True				
ANR	6642357	AssignmentExpression	"kernel_size = load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 0 , ELF_MACHINE , 0 )"		6641386	0		=			
ANR	6642358	Identifier	kernel_size		6641386	0					
ANR	6642359	CallExpression	"load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 0 , ELF_MACHINE , 0 )"		6641386	1					
ANR	6642360	Callee	load_elf		6641386	0					
ANR	6642361	Identifier	load_elf		6641386	0					
ANR	6642362	ArgumentList	kernel_filename		6641386	1					
ANR	6642363	Argument	kernel_filename		6641386	0					
ANR	6642364	Identifier	kernel_filename		6641386	0					
ANR	6642365	Argument	translate_kernel_address		6641386	1					
ANR	6642366	Identifier	translate_kernel_address		6641386	0					
ANR	6642367	Argument	NULL		6641386	2					
ANR	6642368	Identifier	NULL		6641386	0					
ANR	6642369	Argument	NULL		6641386	3					
ANR	6642370	Identifier	NULL		6641386	0					
ANR	6642371	Argument	& lowaddr		6641386	4					
ANR	6642372	UnaryOperationExpression	& lowaddr		6641386	0					
ANR	6642373	UnaryOperator	&		6641386	0					
ANR	6642374	Identifier	lowaddr		6641386	1					
ANR	6642375	Argument	NULL		6641386	5					
ANR	6642376	Identifier	NULL		6641386	0					
ANR	6642377	Argument	0		6641386	6					
ANR	6642378	PrimaryExpression	0		6641386	0					
ANR	6642379	Argument	ELF_MACHINE		6641386	7					
ANR	6642380	Identifier	ELF_MACHINE		6641386	0					
ANR	6642381	Argument	0		6641386	8					
ANR	6642382	PrimaryExpression	0		6641386	0					
ANR	6642383	ExpressionStatement	kernel_le = kernel_size > 0	405:12:6871:6898	6641386	1	True				
ANR	6642384	AssignmentExpression	kernel_le = kernel_size > 0		6641386	0		=			
ANR	6642385	Identifier	kernel_le		6641386	0					
ANR	6642386	RelationalExpression	kernel_size > 0		6641386	1		>			
ANR	6642387	Identifier	kernel_size		6641386	0					
ANR	6642388	PrimaryExpression	0		6641386	1					
ANR	6642389	IfStatement	if ( kernel_size < 0 )		6641386	3					
ANR	6642390	Condition	kernel_size < 0	409:12:6924:6938	6641386	0	True				
ANR	6642391	RelationalExpression	kernel_size < 0		6641386	0		<			
ANR	6642392	Identifier	kernel_size		6641386	0					
ANR	6642393	PrimaryExpression	0		6641386	1					
ANR	6642394	CompoundStatement		407:29:6885:6885	6641386	1					
ANR	6642395	ExpressionStatement	"kernel_size = load_image_targphys ( kernel_filename , KERNEL_LOAD_ADDR , load_limit - KERNEL_LOAD_ADDR )"	411:12:6956:7149	6641386	0	True				
ANR	6642396	AssignmentExpression	"kernel_size = load_image_targphys ( kernel_filename , KERNEL_LOAD_ADDR , load_limit - KERNEL_LOAD_ADDR )"		6641386	0		=			
ANR	6642397	Identifier	kernel_size		6641386	0					
ANR	6642398	CallExpression	"load_image_targphys ( kernel_filename , KERNEL_LOAD_ADDR , load_limit - KERNEL_LOAD_ADDR )"		6641386	1					
ANR	6642399	Callee	load_image_targphys		6641386	0					
ANR	6642400	Identifier	load_image_targphys		6641386	0					
ANR	6642401	ArgumentList	kernel_filename		6641386	1					
ANR	6642402	Argument	kernel_filename		6641386	0					
ANR	6642403	Identifier	kernel_filename		6641386	0					
ANR	6642404	Argument	KERNEL_LOAD_ADDR		6641386	1					
ANR	6642405	Identifier	KERNEL_LOAD_ADDR		6641386	0					
ANR	6642406	Argument	load_limit - KERNEL_LOAD_ADDR		6641386	2					
ANR	6642407	AdditiveExpression	load_limit - KERNEL_LOAD_ADDR		6641386	0		-			
ANR	6642408	Identifier	load_limit		6641386	0					
ANR	6642409	Identifier	KERNEL_LOAD_ADDR		6641386	1					
ANR	6642410	IfStatement	if ( kernel_size < 0 )		6641386	4					
ANR	6642411	Condition	kernel_size < 0	419:12:7175:7189	6641386	0	True				
ANR	6642412	RelationalExpression	kernel_size < 0		6641386	0		<			
ANR	6642413	Identifier	kernel_size		6641386	0					
ANR	6642414	PrimaryExpression	0		6641386	1					
ANR	6642415	CompoundStatement		417:29:7136:7136	6641386	1					
ANR	6642416	ExpressionStatement	"fprintf ( stderr , ""qemu: could not load kernel '%s'\\n"" , kernel_filename )"	421:12:7207:7298	6641386	0	True				
ANR	6642417	CallExpression	"fprintf ( stderr , ""qemu: could not load kernel '%s'\\n"" , kernel_filename )"		6641386	0					
ANR	6642418	Callee	fprintf		6641386	0					
ANR	6642419	Identifier	fprintf		6641386	0					
ANR	6642420	ArgumentList	stderr		6641386	1					
ANR	6642421	Argument	stderr		6641386	0					
ANR	6642422	Identifier	stderr		6641386	0					
ANR	6642423	Argument	"""qemu: could not load kernel '%s'\\n"""		6641386	1					
ANR	6642424	PrimaryExpression	"""qemu: could not load kernel '%s'\\n"""		6641386	0					
ANR	6642425	Argument	kernel_filename		6641386	2					
ANR	6642426	Identifier	kernel_filename		6641386	0					
ANR	6642427	ExpressionStatement	exit ( 1 )	425:12:7313:7320	6641386	1	True				
ANR	6642428	CallExpression	exit ( 1 )		6641386	0					
ANR	6642429	Callee	exit		6641386	0					
ANR	6642430	Identifier	exit		6641386	0					
ANR	6642431	ArgumentList	1		6641386	1					
ANR	6642432	Argument	1		6641386	0					
ANR	6642433	PrimaryExpression	1		6641386	0					
ANR	6642434	IfStatement	if ( initrd_filename )		6641386	5					
ANR	6642435	Condition	initrd_filename	433:12:7375:7389	6641386	0	True				
ANR	6642436	Identifier	initrd_filename		6641386	0					
ANR	6642437	CompoundStatement		431:29:7336:7336	6641386	1					
ANR	6642438	ExpressionStatement	initrd_base = ( KERNEL_LOAD_ADDR + kernel_size + 0x1ffff ) & ~0xffff	441:12:7561:7627	6641386	0	True				
ANR	6642439	AssignmentExpression	initrd_base = ( KERNEL_LOAD_ADDR + kernel_size + 0x1ffff ) & ~0xffff		6641386	0		=			
ANR	6642440	Identifier	initrd_base		6641386	0					
ANR	6642441	BitAndExpression	( KERNEL_LOAD_ADDR + kernel_size + 0x1ffff ) & ~0xffff		6641386	1		&			
ANR	6642442	AdditiveExpression	KERNEL_LOAD_ADDR + kernel_size + 0x1ffff		6641386	0		+			
ANR	6642443	Identifier	KERNEL_LOAD_ADDR		6641386	0					
ANR	6642444	AdditiveExpression	kernel_size + 0x1ffff		6641386	1		+			
ANR	6642445	Identifier	kernel_size		6641386	0					
ANR	6642446	PrimaryExpression	0x1ffff		6641386	1					
ANR	6642447	Identifier	~0xffff		6641386	1					
ANR	6642448	ExpressionStatement	"initrd_size = load_image_targphys ( initrd_filename , initrd_base , load_limit - initrd_base )"	443:12:7642:7778	6641386	1	True				
ANR	6642449	AssignmentExpression	"initrd_size = load_image_targphys ( initrd_filename , initrd_base , load_limit - initrd_base )"		6641386	0		=			
ANR	6642450	Identifier	initrd_size		6641386	0					
ANR	6642451	CallExpression	"load_image_targphys ( initrd_filename , initrd_base , load_limit - initrd_base )"		6641386	1					
ANR	6642452	Callee	load_image_targphys		6641386	0					
ANR	6642453	Identifier	load_image_targphys		6641386	0					
ANR	6642454	ArgumentList	initrd_filename		6641386	1					
ANR	6642455	Argument	initrd_filename		6641386	0					
ANR	6642456	Identifier	initrd_filename		6641386	0					
ANR	6642457	Argument	initrd_base		6641386	1					
ANR	6642458	Identifier	initrd_base		6641386	0					
ANR	6642459	Argument	load_limit - initrd_base		6641386	2					
ANR	6642460	AdditiveExpression	load_limit - initrd_base		6641386	0		-			
ANR	6642461	Identifier	load_limit		6641386	0					
ANR	6642462	Identifier	initrd_base		6641386	1					
ANR	6642463	IfStatement	if ( initrd_size < 0 )		6641386	2					
ANR	6642464	Condition	initrd_size < 0	447:16:7797:7811	6641386	0	True				
ANR	6642465	RelationalExpression	initrd_size < 0		6641386	0		<			
ANR	6642466	Identifier	initrd_size		6641386	0					
ANR	6642467	PrimaryExpression	0		6641386	1					
ANR	6642468	CompoundStatement		445:33:7758:7758	6641386	1					
ANR	6642469	ExpressionStatement	"fprintf ( stderr , ""qemu: could not load initial ram disk '%s'\\n"" , initrd_filename )"	449:16:7833:7938	6641386	0	True				
ANR	6642470	CallExpression	"fprintf ( stderr , ""qemu: could not load initial ram disk '%s'\\n"" , initrd_filename )"		6641386	0					
ANR	6642471	Callee	fprintf		6641386	0					
ANR	6642472	Identifier	fprintf		6641386	0					
ANR	6642473	ArgumentList	stderr		6641386	1					
ANR	6642474	Argument	stderr		6641386	0					
ANR	6642475	Identifier	stderr		6641386	0					
ANR	6642476	Argument	"""qemu: could not load initial ram disk '%s'\\n"""		6641386	1					
ANR	6642477	PrimaryExpression	"""qemu: could not load initial ram disk '%s'\\n"""		6641386	0					
ANR	6642478	Argument	initrd_filename		6641386	2					
ANR	6642479	Identifier	initrd_filename		6641386	0					
ANR	6642480	ExpressionStatement	exit ( 1 )	453:16:7957:7964	6641386	1	True				
ANR	6642481	CallExpression	exit ( 1 )		6641386	0					
ANR	6642482	Callee	exit		6641386	0					
ANR	6642483	Identifier	exit		6641386	0					
ANR	6642484	ArgumentList	1		6641386	1					
ANR	6642485	Argument	1		6641386	0					
ANR	6642486	PrimaryExpression	1		6641386	0					
ANR	6642487	ElseStatement	else		6641386	0					
ANR	6642488	CompoundStatement		455:15:7941:7941	6641386	0					
ANR	6642489	ExpressionStatement	initrd_base = 0	459:12:8012:8027	6641386	0	True				
ANR	6642490	AssignmentExpression	initrd_base = 0		6641386	0		=			
ANR	6642491	Identifier	initrd_base		6641386	0					
ANR	6642492	PrimaryExpression	0		6641386	1					
ANR	6642493	ExpressionStatement	initrd_size = 0	461:12:8042:8057	6641386	1	True				
ANR	6642494	AssignmentExpression	initrd_size = 0		6641386	0		=			
ANR	6642495	Identifier	initrd_size		6641386	0					
ANR	6642496	PrimaryExpression	0		6641386	1					
ANR	6642497	IfStatement	if ( bios_name == NULL )		6641386	55					
ANR	6642498	Condition	bios_name == NULL	469:8:8088:8104	6641386	0	True				
ANR	6642499	EqualityExpression	bios_name == NULL		6641386	0		==			
ANR	6642500	Identifier	bios_name		6641386	0					
ANR	6642501	Identifier	NULL		6641386	1					
ANR	6642502	CompoundStatement		467:27:8051:8051	6641386	1					
ANR	6642503	ExpressionStatement	bios_name = FW_FILE_NAME	471:8:8118:8142	6641386	0	True				
ANR	6642504	AssignmentExpression	bios_name = FW_FILE_NAME		6641386	0		=			
ANR	6642505	Identifier	bios_name		6641386	0					
ANR	6642506	Identifier	FW_FILE_NAME		6641386	1					
ANR	6642507	ExpressionStatement	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , bios_name )"	475:4:8156:8213	6641386	56	True				
ANR	6642508	AssignmentExpression	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , bios_name )"		6641386	0		=			
ANR	6642509	Identifier	filename		6641386	0					
ANR	6642510	CallExpression	"qemu_find_file ( QEMU_FILE_TYPE_BIOS , bios_name )"		6641386	1					
ANR	6642511	Callee	qemu_find_file		6641386	0					
ANR	6642512	Identifier	qemu_find_file		6641386	0					
ANR	6642513	ArgumentList	QEMU_FILE_TYPE_BIOS		6641386	1					
ANR	6642514	Argument	QEMU_FILE_TYPE_BIOS		6641386	0					
ANR	6642515	Identifier	QEMU_FILE_TYPE_BIOS		6641386	0					
ANR	6642516	Argument	bios_name		6641386	1					
ANR	6642517	Identifier	bios_name		6641386	0					
ANR	6642518	ExpressionStatement	"fw_size = load_image_targphys ( filename , 0 , FW_MAX_SIZE )"	477:4:8220:8275	6641386	57	True				
ANR	6642519	AssignmentExpression	"fw_size = load_image_targphys ( filename , 0 , FW_MAX_SIZE )"		6641386	0		=			
ANR	6642520	Identifier	fw_size		6641386	0					
ANR	6642521	CallExpression	"load_image_targphys ( filename , 0 , FW_MAX_SIZE )"		6641386	1					
ANR	6642522	Callee	load_image_targphys		6641386	0					
ANR	6642523	Identifier	load_image_targphys		6641386	0					
ANR	6642524	ArgumentList	filename		6641386	1					
ANR	6642525	Argument	filename		6641386	0					
ANR	6642526	Identifier	filename		6641386	0					
ANR	6642527	Argument	0		6641386	1					
ANR	6642528	PrimaryExpression	0		6641386	0					
ANR	6642529	Argument	FW_MAX_SIZE		6641386	2					
ANR	6642530	Identifier	FW_MAX_SIZE		6641386	0					
ANR	6642531	IfStatement	if ( fw_size < 0 )		6641386	58					
ANR	6642532	Condition	fw_size < 0	479:8:8286:8296	6641386	0	True				
ANR	6642533	RelationalExpression	fw_size < 0		6641386	0		<			
ANR	6642534	Identifier	fw_size		6641386	0					
ANR	6642535	PrimaryExpression	0		6641386	1					
ANR	6642536	CompoundStatement		477:21:8243:8243	6641386	1					
ANR	6642537	ExpressionStatement	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"	481:8:8310:8369	6641386	0	True				
ANR	6642538	CallExpression	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"		6641386	0					
ANR	6642539	Callee	hw_error		6641386	0					
ANR	6642540	Identifier	hw_error		6641386	0					
ANR	6642541	ArgumentList	"""qemu: could not load LPAR rtas '%s'\\n"""		6641386	1					
ANR	6642542	Argument	"""qemu: could not load LPAR rtas '%s'\\n"""		6641386	0					
ANR	6642543	PrimaryExpression	"""qemu: could not load LPAR rtas '%s'\\n"""		6641386	0					
ANR	6642544	Argument	filename		6641386	1					
ANR	6642545	Identifier	filename		6641386	0					
ANR	6642546	ExpressionStatement	exit ( 1 )	483:8:8380:8387	6641386	1	True				
ANR	6642547	CallExpression	exit ( 1 )		6641386	0					
ANR	6642548	Callee	exit		6641386	0					
ANR	6642549	Identifier	exit		6641386	0					
ANR	6642550	ArgumentList	1		6641386	1					
ANR	6642551	Argument	1		6641386	0					
ANR	6642552	PrimaryExpression	1		6641386	0					
ANR	6642553	ExpressionStatement	g_free ( filename )	487:4:8401:8417	6641386	59	True				
ANR	6642554	CallExpression	g_free ( filename )		6641386	0					
ANR	6642555	Callee	g_free		6641386	0					
ANR	6642556	Identifier	g_free		6641386	0					
ANR	6642557	ArgumentList	filename		6641386	1					
ANR	6642558	Argument	filename		6641386	0					
ANR	6642559	Identifier	filename		6641386	0					
ANR	6642560	ExpressionStatement	spapr -> entry_point = 0x100	491:4:8426:8452	6641386	60	True				
ANR	6642561	AssignmentExpression	spapr -> entry_point = 0x100		6641386	0		=			
ANR	6642562	PtrMemberAccess	spapr -> entry_point		6641386	0					
ANR	6642563	Identifier	spapr		6641386	0					
ANR	6642564	Identifier	entry_point		6641386	1					
ANR	6642565	PrimaryExpression	0x100		6641386	1					
ANR	6642566	ExpressionStatement	"vmstate_register ( NULL , 0 , & vmstate_spapr , spapr )"	495:4:8461:8509	6641386	61	True				
ANR	6642567	CallExpression	"vmstate_register ( NULL , 0 , & vmstate_spapr , spapr )"		6641386	0					
ANR	6642568	Callee	vmstate_register		6641386	0					
ANR	6642569	Identifier	vmstate_register		6641386	0					
ANR	6642570	ArgumentList	NULL		6641386	1					
ANR	6642571	Argument	NULL		6641386	0					
ANR	6642572	Identifier	NULL		6641386	0					
ANR	6642573	Argument	0		6641386	1					
ANR	6642574	PrimaryExpression	0		6641386	0					
ANR	6642575	Argument	& vmstate_spapr		6641386	2					
ANR	6642576	UnaryOperationExpression	& vmstate_spapr		6641386	0					
ANR	6642577	UnaryOperator	&		6641386	0					
ANR	6642578	Identifier	vmstate_spapr		6641386	1					
ANR	6642579	Argument	spapr		6641386	3					
ANR	6642580	Identifier	spapr		6641386	0					
ANR	6642581	ExpressionStatement	"register_savevm_live ( NULL , ""spapr/htab"" , - 1 , 1 , & savevm_htab_handlers , spapr )"	497:4:8516:8619	6641386	62	True				
ANR	6642582	CallExpression	"register_savevm_live ( NULL , ""spapr/htab"" , - 1 , 1 , & savevm_htab_handlers , spapr )"		6641386	0					
ANR	6642583	Callee	register_savevm_live		6641386	0					
ANR	6642584	Identifier	register_savevm_live		6641386	0					
ANR	6642585	ArgumentList	NULL		6641386	1					
ANR	6642586	Argument	NULL		6641386	0					
ANR	6642587	Identifier	NULL		6641386	0					
ANR	6642588	Argument	"""spapr/htab"""		6641386	1					
ANR	6642589	PrimaryExpression	"""spapr/htab"""		6641386	0					
ANR	6642590	Argument	- 1		6641386	2					
ANR	6642591	UnaryOperationExpression	- 1		6641386	0					
ANR	6642592	UnaryOperator	-		6641386	0					
ANR	6642593	PrimaryExpression	1		6641386	1					
ANR	6642594	Argument	1		6641386	3					
ANR	6642595	PrimaryExpression	1		6641386	0					
ANR	6642596	Argument	& savevm_htab_handlers		6641386	4					
ANR	6642597	UnaryOperationExpression	& savevm_htab_handlers		6641386	0					
ANR	6642598	UnaryOperator	&		6641386	0					
ANR	6642599	Identifier	savevm_htab_handlers		6641386	1					
ANR	6642600	Argument	spapr		6641386	5					
ANR	6642601	Identifier	spapr		6641386	0					
ANR	6642602	ExpressionStatement	"spapr -> fdt_skel = spapr_create_fdt_skel ( cpu_model , initrd_base , initrd_size , kernel_size , kernel_le , boot_device , kernel_cmdline , spapr -> epow_irq )"	505:4:8663:8989	6641386	63	True				
ANR	6642603	AssignmentExpression	"spapr -> fdt_skel = spapr_create_fdt_skel ( cpu_model , initrd_base , initrd_size , kernel_size , kernel_le , boot_device , kernel_cmdline , spapr -> epow_irq )"		6641386	0		=			
ANR	6642604	PtrMemberAccess	spapr -> fdt_skel		6641386	0					
ANR	6642605	Identifier	spapr		6641386	0					
ANR	6642606	Identifier	fdt_skel		6641386	1					
ANR	6642607	CallExpression	"spapr_create_fdt_skel ( cpu_model , initrd_base , initrd_size , kernel_size , kernel_le , boot_device , kernel_cmdline , spapr -> epow_irq )"		6641386	1					
ANR	6642608	Callee	spapr_create_fdt_skel		6641386	0					
ANR	6642609	Identifier	spapr_create_fdt_skel		6641386	0					
ANR	6642610	ArgumentList	cpu_model		6641386	1					
ANR	6642611	Argument	cpu_model		6641386	0					
ANR	6642612	Identifier	cpu_model		6641386	0					
ANR	6642613	Argument	initrd_base		6641386	1					
ANR	6642614	Identifier	initrd_base		6641386	0					
ANR	6642615	Argument	initrd_size		6641386	2					
ANR	6642616	Identifier	initrd_size		6641386	0					
ANR	6642617	Argument	kernel_size		6641386	3					
ANR	6642618	Identifier	kernel_size		6641386	0					
ANR	6642619	Argument	kernel_le		6641386	4					
ANR	6642620	Identifier	kernel_le		6641386	0					
ANR	6642621	Argument	boot_device		6641386	5					
ANR	6642622	Identifier	boot_device		6641386	0					
ANR	6642623	Argument	kernel_cmdline		6641386	6					
ANR	6642624	Identifier	kernel_cmdline		6641386	0					
ANR	6642625	Argument	spapr -> epow_irq		6641386	7					
ANR	6642626	PtrMemberAccess	spapr -> epow_irq		6641386	0					
ANR	6642627	Identifier	spapr		6641386	0					
ANR	6642628	Identifier	epow_irq		6641386	1					
ANR	6642629	ExpressionStatement	assert ( spapr -> fdt_skel != NULL )	515:4:8996:9027	6641386	64	True				
ANR	6642630	CallExpression	assert ( spapr -> fdt_skel != NULL )		6641386	0					
ANR	6642631	Callee	assert		6641386	0					
ANR	6642632	Identifier	assert		6641386	0					
ANR	6642633	ArgumentList	spapr -> fdt_skel != NULL		6641386	1					
ANR	6642634	Argument	spapr -> fdt_skel != NULL		6641386	0					
ANR	6642635	EqualityExpression	spapr -> fdt_skel != NULL		6641386	0		!=			
ANR	6642636	PtrMemberAccess	spapr -> fdt_skel		6641386	0					
ANR	6642637	Identifier	spapr		6641386	0					
ANR	6642638	Identifier	fdt_skel		6641386	1					
ANR	6642639	Identifier	NULL		6641386	1					
ANR	6642640	ReturnType	static void		6641386	1					
ANR	6642641	Identifier	ppc_spapr_init		6641386	2					
ANR	6642642	ParameterList	QEMUMachineInitArgs * args		6641386	3					
ANR	6642643	Parameter	QEMUMachineInitArgs * args	1:27:27:51	6641386	0	True				
ANR	6642644	ParameterType	QEMUMachineInitArgs *		6641386	0					
ANR	6642645	Identifier	args		6641386	1					
ANR	6642646	CFGEntryNode	ENTRY		6641386		True				
ANR	6642647	CFGExitNode	EXIT		6641386		True				
ANR	6642648	Symbol	lowaddr		6641386						
ANR	6642649	Symbol	smp_threads		6641386						
ANR	6642650	Symbol	rtas_limit		6641386						
ANR	6642651	Symbol	spapr -> epow_irq		6641386						
ANR	6642652	Symbol	load_limit		6641386						
ANR	6642653	Symbol	drive_get_max_bus		6641386						
ANR	6642654	Symbol	cpu_ppc_hypercall		6641386						
ANR	6642655	Symbol	g_new		6641386						
ANR	6642656	Symbol	* phb		6641386						
ANR	6642657	Symbol	ram		6641386						
ANR	6642658	Symbol	kvmppc_alloc_rma		6641386						
ANR	6642659	Symbol	spapr_create_fdt_skel		6641386						
ANR	6642660	Symbol	MemoryRegion		6641386						
ANR	6642661	Symbol	phb -> bus		6641386						
ANR	6642662	Symbol	spapr		6641386						
ANR	6642663	Symbol	nonrma_size		6641386						
ANR	6642664	Symbol	& vmstate_spapr		6641386						
ANR	6642665	Symbol	TIMEBASE_FREQ		6641386						
ANR	6642666	Symbol	filename		6641386						
ANR	6642667	Symbol	MIN		6641386						
ANR	6642668	Symbol	args -> boot_order		6641386						
ANR	6642669	Symbol	RTAS_MAX_SIZE		6641386						
ANR	6642670	Symbol	spapr -> vrma_adjust		6641386						
ANR	6642671	Symbol	spapr -> htab_shift		6641386						
ANR	6642672	Symbol	spapr -> fdt_addr		6641386						
ANR	6642673	Symbol	spapr_cpu_reset		6641386						
ANR	6642674	Symbol	spapr -> fdt_skel		6641386						
ANR	6642675	Symbol	spapr_vga_init		6641386						
ANR	6642676	Symbol	FW_MAX_SIZE		6641386						
ANR	6642677	Symbol	cpu_model		6641386						
ANR	6642678	Symbol	load_image_targphys		6641386						
ANR	6642679	Symbol	kvm_enabled		6641386						
ANR	6642680	Symbol	nd_table		6641386						
ANR	6642681	Symbol	get_system_memory		6641386						
ANR	6642682	Symbol	xics_system_init		6641386						
ANR	6642683	Symbol	i		6641386						
ANR	6642684	Symbol	FDT_MAX_SIZE		6641386						
ANR	6642685	Symbol	phb		6641386						
ANR	6642686	Symbol	args -> cpu_model		6641386						
ANR	6642687	Symbol	FW_FILE_NAME		6641386						
ANR	6642688	Symbol	ram_size		6641386						
ANR	6642689	Symbol	cpu_ppc_init		6641386						
ANR	6642690	Symbol	emulate_spapr_hypercall		6641386						
ANR	6642691	Symbol	nonrma_base		6641386						
ANR	6642692	Symbol	FW_OVERHEAD		6641386						
ANR	6642693	Symbol	kernel_filename		6641386						
ANR	6642694	Symbol	serial_hds		6641386						
ANR	6642695	Symbol	spapr -> next_irq		6641386						
ANR	6642696	Symbol	* nd		6641386						
ANR	6642697	Symbol	nb_nics		6641386						
ANR	6642698	Symbol	spapr -> has_graphics		6641386						
ANR	6642699	Symbol	rma_alloc_size		6641386						
ANR	6642700	Symbol	msi_supported		6641386						
ANR	6642701	Symbol	spapr -> rma_size		6641386						
ANR	6642702	Symbol	args -> ram_size		6641386						
ANR	6642703	Symbol	nd -> model		6641386						
ANR	6642704	Symbol	spapr -> rtas_size		6641386						
ANR	6642705	Symbol	MIN_RMA_SLOF		6641386						
ANR	6642706	Symbol	* args		6641386						
ANR	6642707	Symbol	XICS_IRQ_BASE		6641386						
ANR	6642708	Symbol	spapr -> icp		6641386						
ANR	6642709	Symbol	kvmppc_smt_threads		6641386						
ANR	6642710	Symbol	fw_size		6641386						
ANR	6642711	Symbol	XICS_IRQS		6641386						
ANR	6642712	Symbol	spapr -> rtas_addr		6641386						
ANR	6642713	Symbol	args -> initrd_filename		6641386						
ANR	6642714	Symbol	spapr_create_phb		6641386						
ANR	6642715	Symbol	& savevm_htab_handlers		6641386						
ANR	6642716	Symbol	kernel_size		6641386						
ANR	6642717	Symbol	strcmp		6641386						
ANR	6642718	Symbol	smp_cpus		6641386						
ANR	6642719	Symbol	NULL		6641386						
ANR	6642720	Symbol	initrd_base		6641386						
ANR	6642721	Symbol	* env		6641386						
ANR	6642722	Symbol	cpu		6641386						
ANR	6642723	Symbol	QEMU_FILE_TYPE_BIOS		6641386						
ANR	6642724	Symbol	spapr_vio_bus_init		6641386						
ANR	6642725	Symbol	KERNEL_LOAD_ADDR		6641386						
ANR	6642726	Symbol	stderr		6641386						
ANR	6642727	Symbol	nd		6641386						
ANR	6642728	Symbol	boot_device		6641386						
ANR	6642729	Symbol	true		6641386						
ANR	6642730	Symbol	g_malloc0		6641386						
ANR	6642731	Symbol	load_elf		6641386						
ANR	6642732	Symbol	translate_kernel_address		6641386						
ANR	6642733	Symbol	~0xffff		6641386						
ANR	6642734	Symbol	kernel_cmdline		6641386						
ANR	6642735	Symbol	args -> kernel_cmdline		6641386						
ANR	6642736	Symbol	spapr -> entry_point		6641386						
ANR	6642737	Symbol	initrd_filename		6641386						
ANR	6642738	Symbol	initrd_size		6641386						
ANR	6642739	Symbol	bios_name		6641386						
ANR	6642740	Symbol	usb_enabled		6641386						
ANR	6642741	Symbol	ELF_MACHINE		6641386						
ANR	6642742	Symbol	kernel_le		6641386						
ANR	6642743	Symbol	g_strdup		6641386						
ANR	6642744	Symbol	& lowaddr		6641386						
ANR	6642745	Symbol	* spapr		6641386						
ANR	6642746	Symbol	env -> msr_mask		6641386						
ANR	6642747	Symbol	qemu_find_file		6641386						
ANR	6642748	Symbol	spapr -> vio_bus		6641386						
ANR	6642749	Symbol	MAX_SERIAL_PORTS		6641386						
ANR	6642750	Symbol	SPAPR_PCI_MSI_WINDOW		6641386						
ANR	6642751	Symbol	args -> kernel_filename		6641386						
ANR	6642752	Symbol	& spapr -> phbs		6641386						
ANR	6642753	Symbol	false		6641386						
ANR	6642754	Symbol	env		6641386						
ANR	6642755	Symbol	args		6641386						
ANR	6642756	Symbol	& cpu -> env		6641386						
ANR	6642757	Symbol	* serial_hds		6641386						
ANR	6642758	Symbol	* i		6641386						
ANR	6642759	Symbol	IF_SCSI		6641386						
ANR	6642760	Symbol	sysmem		6641386						
ANR	6642761	Symbol	spapr -> ram_limit		6641386						
