command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1256284	File	/home/p4ultr4n/workplace/ReVeal/raw_code/check_guest_output_1.c								
ANR	1256285	Function	check_guest_output	1:0:0:732							
ANR	1256286	FunctionDef	"check_guest_output (const testdef_t * test , int fd)"		1256285	0					
ANR	1256287	CompoundStatement		3:0:63:732	1256285	0					
ANR	1256288	IdentifierDeclStatement	bool output_ok = false ;	5:4:70:92	1256285	0	True				
ANR	1256289	IdentifierDecl	output_ok = false		1256285	0					
ANR	1256290	IdentifierDeclType	bool		1256285	0					
ANR	1256291	Identifier	output_ok		1256285	1					
ANR	1256292	AssignmentExpression	output_ok = false		1256285	2		=			
ANR	1256293	Identifier	false		1256285	0					
ANR	1256294	Identifier	false		1256285	1					
ANR	1256295	IdentifierDeclStatement	"int i , nbr , pos = 0 ;"	7:4:99:118	1256285	1	True				
ANR	1256296	IdentifierDecl	i		1256285	0					
ANR	1256297	IdentifierDeclType	int		1256285	0					
ANR	1256298	Identifier	i		1256285	1					
ANR	1256299	IdentifierDecl	nbr		1256285	1					
ANR	1256300	IdentifierDeclType	int		1256285	0					
ANR	1256301	Identifier	nbr		1256285	1					
ANR	1256302	IdentifierDecl	pos = 0		1256285	2					
ANR	1256303	IdentifierDeclType	int		1256285	0					
ANR	1256304	Identifier	pos		1256285	1					
ANR	1256305	AssignmentExpression	pos = 0		1256285	2		=			
ANR	1256306	Identifier	pos		1256285	0					
ANR	1256307	PrimaryExpression	0		1256285	1					
ANR	1256308	IdentifierDeclStatement	char ch ;	9:4:125:132	1256285	2	True				
ANR	1256309	IdentifierDecl	ch		1256285	0					
ANR	1256310	IdentifierDeclType	char		1256285	0					
ANR	1256311	Identifier	ch		1256285	1					
ANR	1256312	ForStatement	for ( i = 0 ; i < 6000 ; ++ i )		1256285	3					
ANR	1256313	ForInit	i = 0 ;	15:9:203:208	1256285	0	True				
ANR	1256314	AssignmentExpression	i = 0		1256285	0		=			
ANR	1256315	Identifier	i		1256285	0					
ANR	1256316	PrimaryExpression	0		1256285	1					
ANR	1256317	Condition	i < 6000	15:16:210:217	1256285	1	True				
ANR	1256318	RelationalExpression	i < 6000		1256285	0		<			
ANR	1256319	Identifier	i		1256285	0					
ANR	1256320	PrimaryExpression	6000		1256285	1					
ANR	1256321	UnaryExpression	++ i	15:26:220:222	1256285	2	True				
ANR	1256322	IncDec	++		1256285	0					
ANR	1256323	Identifier	i		1256285	1					
ANR	1256324	CompoundStatement		13:31:161:161	1256285	3					
ANR	1256325	WhileStatement	"while ( ( nbr = read ( fd , & ch , 1 ) ) == 1 )"		1256285	0					
ANR	1256326	Condition	"( nbr = read ( fd , & ch , 1 ) ) == 1"	17:15:243:271	1256285	0	True				
ANR	1256327	EqualityExpression	"( nbr = read ( fd , & ch , 1 ) ) == 1"		1256285	0		==			
ANR	1256328	AssignmentExpression	"nbr = read ( fd , & ch , 1 )"		1256285	0		=			
ANR	1256329	Identifier	nbr		1256285	0					
ANR	1256330	CallExpression	"read ( fd , & ch , 1 )"		1256285	1					
ANR	1256331	Callee	read		1256285	0					
ANR	1256332	Identifier	read		1256285	0					
ANR	1256333	ArgumentList	fd		1256285	1					
ANR	1256334	Argument	fd		1256285	0					
ANR	1256335	Identifier	fd		1256285	0					
ANR	1256336	Argument	& ch		1256285	1					
ANR	1256337	UnaryOperationExpression	& ch		1256285	0					
ANR	1256338	UnaryOperator	&		1256285	0					
ANR	1256339	Identifier	ch		1256285	1					
ANR	1256340	Argument	1		1256285	2					
ANR	1256341	PrimaryExpression	1		1256285	0					
ANR	1256342	PrimaryExpression	1		1256285	1					
ANR	1256343	CompoundStatement		15:46:210:210	1256285	1					
ANR	1256344	IfStatement	if ( ch == test -> expect [ pos ] )		1256285	0					
ANR	1256345	Condition	ch == test -> expect [ pos ]	19:16:293:315	1256285	0	True				
ANR	1256346	EqualityExpression	ch == test -> expect [ pos ]		1256285	0		==			
ANR	1256347	Identifier	ch		1256285	0					
ANR	1256348	ArrayIndexing	test -> expect [ pos ]		1256285	1					
ANR	1256349	PtrMemberAccess	test -> expect		1256285	0					
ANR	1256350	Identifier	test		1256285	0					
ANR	1256351	Identifier	expect		1256285	1					
ANR	1256352	Identifier	pos		1256285	1					
ANR	1256353	CompoundStatement		17:41:254:254	1256285	1					
ANR	1256354	ExpressionStatement	pos += 1	21:16:337:345	1256285	0	True				
ANR	1256355	AssignmentExpression	pos += 1		1256285	0		+=			
ANR	1256356	Identifier	pos		1256285	0					
ANR	1256357	PrimaryExpression	1		1256285	1					
ANR	1256358	IfStatement	if ( test -> expect [ pos ] == '\\0' )		1256285	1					
ANR	1256359	Condition	test -> expect [ pos ] == '\\0'	23:20:368:392	1256285	0	True				
ANR	1256360	EqualityExpression	test -> expect [ pos ] == '\\0'		1256285	0		==			
ANR	1256361	ArrayIndexing	test -> expect [ pos ]		1256285	0					
ANR	1256362	PtrMemberAccess	test -> expect		1256285	0					
ANR	1256363	Identifier	test		1256285	0					
ANR	1256364	Identifier	expect		1256285	1					
ANR	1256365	Identifier	pos		1256285	1					
ANR	1256366	PrimaryExpression	'\\0'		1256285	1					
ANR	1256367	CompoundStatement		21:47:331:331	1256285	1					
ANR	1256368	ExpressionStatement	output_ok = true	27:20:491:507	1256285	0	True				
ANR	1256369	AssignmentExpression	output_ok = true		1256285	0		=			
ANR	1256370	Identifier	output_ok		1256285	0					
ANR	1256371	Identifier	true		1256285	1					
ANR	1256372	GotoStatement	goto done ;	29:20:530:539	1256285	1	True				
ANR	1256373	Identifier	done		1256285	0					
ANR	1256374	ElseStatement	else		1256285	0					
ANR	1256375	CompoundStatement		31:19:516:516	1256285	0					
ANR	1256376	ExpressionStatement	pos = 0	35:16:599:606	1256285	0	True				
ANR	1256377	AssignmentExpression	pos = 0		1256285	0		=			
ANR	1256378	Identifier	pos		1256285	0					
ANR	1256379	PrimaryExpression	0		1256285	1					
ANR	1256380	ExpressionStatement	g_assert ( nbr >= 0 )	41:8:643:661	1256285	1	True				
ANR	1256381	CallExpression	g_assert ( nbr >= 0 )		1256285	0					
ANR	1256382	Callee	g_assert		1256285	0					
ANR	1256383	Identifier	g_assert		1256285	0					
ANR	1256384	ArgumentList	nbr >= 0		1256285	1					
ANR	1256385	Argument	nbr >= 0		1256285	0					
ANR	1256386	RelationalExpression	nbr >= 0		1256285	0		>=			
ANR	1256387	Identifier	nbr		1256285	0					
ANR	1256388	PrimaryExpression	0		1256285	1					
ANR	1256389	ExpressionStatement	g_usleep ( 10000 )	43:8:672:687	1256285	2	True				
ANR	1256390	CallExpression	g_usleep ( 10000 )		1256285	0					
ANR	1256391	Callee	g_usleep		1256285	0					
ANR	1256392	Identifier	g_usleep		1256285	0					
ANR	1256393	ArgumentList	10000		1256285	1					
ANR	1256394	Argument	10000		1256285	0					
ANR	1256395	PrimaryExpression	10000		1256285	0					
ANR	1256396	Label	done :	49:0:699:703	1256285	4	True				
ANR	1256397	Identifier	done		1256285	0					
ANR	1256398	ExpressionStatement	g_assert ( output_ok )	51:4:710:729	1256285	5	True				
ANR	1256399	CallExpression	g_assert ( output_ok )		1256285	0					
ANR	1256400	Callee	g_assert		1256285	0					
ANR	1256401	Identifier	g_assert		1256285	0					
ANR	1256402	ArgumentList	output_ok		1256285	1					
ANR	1256403	Argument	output_ok		1256285	0					
ANR	1256404	Identifier	output_ok		1256285	0					
ANR	1256405	ReturnType	static void		1256285	1					
ANR	1256406	Identifier	check_guest_output		1256285	2					
ANR	1256407	ParameterList	"const testdef_t * test , int fd"		1256285	3					
ANR	1256408	Parameter	const testdef_t * test	1:31:31:51	1256285	0	True				
ANR	1256409	ParameterType	const testdef_t *		1256285	0					
ANR	1256410	Identifier	test		1256285	1					
ANR	1256411	Parameter	int fd	1:54:54:59	1256285	1	True				
ANR	1256412	ParameterType	int		1256285	0					
ANR	1256413	Identifier	fd		1256285	1					
ANR	1256414	CFGEntryNode	ENTRY		1256285		True				
ANR	1256415	CFGExitNode	EXIT		1256285		True				
ANR	1256416	Symbol	read		1256285						
ANR	1256417	Symbol	* * test		1256285						
ANR	1256418	Symbol	test		1256285						
ANR	1256419	Symbol	ch		1256285						
ANR	1256420	Symbol	false		1256285						
ANR	1256421	Symbol	i		1256285						
ANR	1256422	Symbol	* test		1256285						
ANR	1256423	Symbol	& ch		1256285						
ANR	1256424	Symbol	output_ok		1256285						
ANR	1256425	Symbol	test -> expect		1256285						
ANR	1256426	Symbol	pos		1256285						
ANR	1256427	Symbol	true		1256285						
ANR	1256428	Symbol	* test -> expect		1256285						
ANR	1256429	Symbol	fd		1256285						
ANR	1256430	Symbol	* pos		1256285						
ANR	1256431	Symbol	nbr		1256285						
