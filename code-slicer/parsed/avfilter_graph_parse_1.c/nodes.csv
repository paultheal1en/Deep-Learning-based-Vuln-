command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	856346	File	/home/p4ultr4n/workplace/ReVeal/raw_code/avfilter_graph_parse_1.c								
ANR	856347	Function	avfilter_graph_parse	1:0:0:2509							
ANR	856348	FunctionDef	"avfilter_graph_parse (AVFilterGraph * graph , const char * filters , AVFilterInOut * * open_inputs , AVFilterInOut * * open_outputs , void * log_ctx)"		856347	0					
ANR	856349	CompoundStatement		7:0:195:2509	856347	0					
ANR	856350	IdentifierDeclStatement	"int index = 0 , ret ;"	9:4:202:220	856347	0	True				
ANR	856351	IdentifierDecl	index = 0		856347	0					
ANR	856352	IdentifierDeclType	int		856347	0					
ANR	856353	Identifier	index		856347	1					
ANR	856354	AssignmentExpression	index = 0		856347	2		=			
ANR	856355	Identifier	index		856347	0					
ANR	856356	PrimaryExpression	0		856347	1					
ANR	856357	IdentifierDecl	ret		856347	1					
ANR	856358	IdentifierDeclType	int		856347	0					
ANR	856359	Identifier	ret		856347	1					
ANR	856360	IdentifierDeclStatement	char chr = 0 ;	11:4:227:239	856347	1	True				
ANR	856361	IdentifierDecl	chr = 0		856347	0					
ANR	856362	IdentifierDeclType	char		856347	0					
ANR	856363	Identifier	chr		856347	1					
ANR	856364	AssignmentExpression	chr = 0		856347	2		=			
ANR	856365	Identifier	chr		856347	0					
ANR	856366	PrimaryExpression	0		856347	1					
ANR	856367	IdentifierDeclStatement	AVFilterInOut * curr_inputs = NULL ;	15:4:248:281	856347	2	True				
ANR	856368	IdentifierDecl	* curr_inputs = NULL		856347	0					
ANR	856369	IdentifierDeclType	AVFilterInOut *		856347	0					
ANR	856370	Identifier	curr_inputs		856347	1					
ANR	856371	AssignmentExpression	* curr_inputs = NULL		856347	2		=			
ANR	856372	Identifier	NULL		856347	0					
ANR	856373	Identifier	NULL		856347	1					
ANR	856374	DoStatement	do		856347	3					
ANR	856375	CompoundStatement		17:8:142:175	856347	0					
ANR	856376	IdentifierDeclStatement	AVFilterContext * filter ;	21:8:304:327	856347	0	True				
ANR	856377	IdentifierDecl	* filter		856347	0					
ANR	856378	IdentifierDeclType	AVFilterContext *		856347	0					
ANR	856379	Identifier	filter		856347	1					
ANR	856380	IdentifierDeclStatement	const char * filterchain = filters ;	23:8:338:371	856347	1	True				
ANR	856381	IdentifierDecl	* filterchain = filters		856347	0					
ANR	856382	IdentifierDeclType	const char *		856347	0					
ANR	856383	Identifier	filterchain		856347	1					
ANR	856384	AssignmentExpression	* filterchain = filters		856347	2		=			
ANR	856385	Identifier	filters		856347	0					
ANR	856386	Identifier	filters		856347	1					
ANR	856387	ExpressionStatement	"filters += strspn ( filters , WHITESPACES )"	25:8:382:421	856347	2	True				
ANR	856388	AssignmentExpression	"filters += strspn ( filters , WHITESPACES )"		856347	0		+=			
ANR	856389	Identifier	filters		856347	0					
ANR	856390	CallExpression	"strspn ( filters , WHITESPACES )"		856347	1					
ANR	856391	Callee	strspn		856347	0					
ANR	856392	Identifier	strspn		856347	0					
ANR	856393	ArgumentList	filters		856347	1					
ANR	856394	Argument	filters		856347	0					
ANR	856395	Identifier	filters		856347	0					
ANR	856396	Argument	WHITESPACES		856347	1					
ANR	856397	Identifier	WHITESPACES		856347	0					
ANR	856398	IfStatement	"if ( ( ret = parse_inputs ( & filters , & curr_inputs , open_outputs , log_ctx ) ) < 0 )"		856347	3					
ANR	856399	Condition	"( ret = parse_inputs ( & filters , & curr_inputs , open_outputs , log_ctx ) ) < 0"	29:12:438:508	856347	0	True				
ANR	856400	RelationalExpression	"( ret = parse_inputs ( & filters , & curr_inputs , open_outputs , log_ctx ) ) < 0"		856347	0		<			
ANR	856401	AssignmentExpression	"ret = parse_inputs ( & filters , & curr_inputs , open_outputs , log_ctx )"		856347	0		=			
ANR	856402	Identifier	ret		856347	0					
ANR	856403	CallExpression	"parse_inputs ( & filters , & curr_inputs , open_outputs , log_ctx )"		856347	1					
ANR	856404	Callee	parse_inputs		856347	0					
ANR	856405	Identifier	parse_inputs		856347	0					
ANR	856406	ArgumentList	& filters		856347	1					
ANR	856407	Argument	& filters		856347	0					
ANR	856408	UnaryOperationExpression	& filters		856347	0					
ANR	856409	UnaryOperator	&		856347	0					
ANR	856410	Identifier	filters		856347	1					
ANR	856411	Argument	& curr_inputs		856347	1					
ANR	856412	UnaryOperationExpression	& curr_inputs		856347	0					
ANR	856413	UnaryOperator	&		856347	0					
ANR	856414	Identifier	curr_inputs		856347	1					
ANR	856415	Argument	open_outputs		856347	2					
ANR	856416	Identifier	open_outputs		856347	0					
ANR	856417	Argument	log_ctx		856347	3					
ANR	856418	Identifier	log_ctx		856347	0					
ANR	856419	PrimaryExpression	0		856347	1					
ANR	856420	GotoStatement	goto fail ;	31:12:524:533	856347	1	True				
ANR	856421	Identifier	fail		856347	0					
ANR	856422	IfStatement	"if ( ( ret = parse_filter ( & filter , & filters , graph , index , log_ctx ) ) < 0 )"		856347	4					
ANR	856423	Condition	"( ret = parse_filter ( & filter , & filters , graph , index , log_ctx ) ) < 0"	35:12:550:615	856347	0	True				
ANR	856424	RelationalExpression	"( ret = parse_filter ( & filter , & filters , graph , index , log_ctx ) ) < 0"		856347	0		<			
ANR	856425	AssignmentExpression	"ret = parse_filter ( & filter , & filters , graph , index , log_ctx )"		856347	0		=			
ANR	856426	Identifier	ret		856347	0					
ANR	856427	CallExpression	"parse_filter ( & filter , & filters , graph , index , log_ctx )"		856347	1					
ANR	856428	Callee	parse_filter		856347	0					
ANR	856429	Identifier	parse_filter		856347	0					
ANR	856430	ArgumentList	& filter		856347	1					
ANR	856431	Argument	& filter		856347	0					
ANR	856432	UnaryOperationExpression	& filter		856347	0					
ANR	856433	UnaryOperator	&		856347	0					
ANR	856434	Identifier	filter		856347	1					
ANR	856435	Argument	& filters		856347	1					
ANR	856436	UnaryOperationExpression	& filters		856347	0					
ANR	856437	UnaryOperator	&		856347	0					
ANR	856438	Identifier	filters		856347	1					
ANR	856439	Argument	graph		856347	2					
ANR	856440	Identifier	graph		856347	0					
ANR	856441	Argument	index		856347	3					
ANR	856442	Identifier	index		856347	0					
ANR	856443	Argument	log_ctx		856347	4					
ANR	856444	Identifier	log_ctx		856347	0					
ANR	856445	PrimaryExpression	0		856347	1					
ANR	856446	GotoStatement	goto fail ;	37:12:631:640	856347	1	True				
ANR	856447	Identifier	fail		856347	0					
ANR	856448	IfStatement	if ( filter -> input_count == 1 && ! curr_inputs && ! index )		856347	5					
ANR	856449	Condition	filter -> input_count == 1 && ! curr_inputs && ! index	41:12:657:706	856347	0	True				
ANR	856450	AndExpression	filter -> input_count == 1 && ! curr_inputs && ! index		856347	0		&&			
ANR	856451	EqualityExpression	filter -> input_count == 1		856347	0		==			
ANR	856452	PtrMemberAccess	filter -> input_count		856347	0					
ANR	856453	Identifier	filter		856347	0					
ANR	856454	Identifier	input_count		856347	1					
ANR	856455	PrimaryExpression	1		856347	1					
ANR	856456	AndExpression	! curr_inputs && ! index		856347	1		&&			
ANR	856457	UnaryOperationExpression	! curr_inputs		856347	0					
ANR	856458	UnaryOperator	!		856347	0					
ANR	856459	Identifier	curr_inputs		856347	1					
ANR	856460	UnaryOperationExpression	! index		856347	1					
ANR	856461	UnaryOperator	!		856347	0					
ANR	856462	Identifier	index		856347	1					
ANR	856463	CompoundStatement		39:12:590:614	856347	1					
ANR	856464	IdentifierDeclStatement	"const char * tmp = ""[in]"" ;"	45:12:786:810	856347	0	True				
ANR	856465	IdentifierDecl	"* tmp = ""[in]"""		856347	0					
ANR	856466	IdentifierDeclType	const char *		856347	0					
ANR	856467	Identifier	tmp		856347	1					
ANR	856468	AssignmentExpression	"* tmp = ""[in]"""		856347	2		=			
ANR	856469	Identifier	tmp		856347	0					
ANR	856470	PrimaryExpression	"""[in]"""		856347	1					
ANR	856471	IfStatement	"if ( ( ret = parse_inputs ( & tmp , & curr_inputs , open_outputs , log_ctx ) ) < 0 )"		856347	1					
ANR	856472	Condition	"( ret = parse_inputs ( & tmp , & curr_inputs , open_outputs , log_ctx ) ) < 0"	47:16:829:895	856347	0	True				
ANR	856473	RelationalExpression	"( ret = parse_inputs ( & tmp , & curr_inputs , open_outputs , log_ctx ) ) < 0"		856347	0		<			
ANR	856474	AssignmentExpression	"ret = parse_inputs ( & tmp , & curr_inputs , open_outputs , log_ctx )"		856347	0		=			
ANR	856475	Identifier	ret		856347	0					
ANR	856476	CallExpression	"parse_inputs ( & tmp , & curr_inputs , open_outputs , log_ctx )"		856347	1					
ANR	856477	Callee	parse_inputs		856347	0					
ANR	856478	Identifier	parse_inputs		856347	0					
ANR	856479	ArgumentList	& tmp		856347	1					
ANR	856480	Argument	& tmp		856347	0					
ANR	856481	UnaryOperationExpression	& tmp		856347	0					
ANR	856482	UnaryOperator	&		856347	0					
ANR	856483	Identifier	tmp		856347	1					
ANR	856484	Argument	& curr_inputs		856347	1					
ANR	856485	UnaryOperationExpression	& curr_inputs		856347	0					
ANR	856486	UnaryOperator	&		856347	0					
ANR	856487	Identifier	curr_inputs		856347	1					
ANR	856488	Argument	open_outputs		856347	2					
ANR	856489	Identifier	open_outputs		856347	0					
ANR	856490	Argument	log_ctx		856347	3					
ANR	856491	Identifier	log_ctx		856347	0					
ANR	856492	PrimaryExpression	0		856347	1					
ANR	856493	GotoStatement	goto fail ;	49:16:915:924	856347	1	True				
ANR	856494	Identifier	fail		856347	0					
ANR	856495	IfStatement	"if ( ( ret = link_filter_inouts ( filter , & curr_inputs , open_inputs , log_ctx ) ) < 0 )"		856347	6					
ANR	856496	Condition	"( ret = link_filter_inouts ( filter , & curr_inputs , open_inputs , log_ctx ) ) < 0"	55:12:952:1025	856347	0	True				
ANR	856497	RelationalExpression	"( ret = link_filter_inouts ( filter , & curr_inputs , open_inputs , log_ctx ) ) < 0"		856347	0		<			
ANR	856498	AssignmentExpression	"ret = link_filter_inouts ( filter , & curr_inputs , open_inputs , log_ctx )"		856347	0		=			
ANR	856499	Identifier	ret		856347	0					
ANR	856500	CallExpression	"link_filter_inouts ( filter , & curr_inputs , open_inputs , log_ctx )"		856347	1					
ANR	856501	Callee	link_filter_inouts		856347	0					
ANR	856502	Identifier	link_filter_inouts		856347	0					
ANR	856503	ArgumentList	filter		856347	1					
ANR	856504	Argument	filter		856347	0					
ANR	856505	Identifier	filter		856347	0					
ANR	856506	Argument	& curr_inputs		856347	1					
ANR	856507	UnaryOperationExpression	& curr_inputs		856347	0					
ANR	856508	UnaryOperator	&		856347	0					
ANR	856509	Identifier	curr_inputs		856347	1					
ANR	856510	Argument	open_inputs		856347	2					
ANR	856511	Identifier	open_inputs		856347	0					
ANR	856512	Argument	log_ctx		856347	3					
ANR	856513	Identifier	log_ctx		856347	0					
ANR	856514	PrimaryExpression	0		856347	1					
ANR	856515	GotoStatement	goto fail ;	57:12:1041:1050	856347	1	True				
ANR	856516	Identifier	fail		856347	0					
ANR	856517	IfStatement	"if ( ( ret = parse_outputs ( & filters , & curr_inputs , open_inputs , open_outputs , log_ctx ) ) < 0 )"		856347	7					
ANR	856518	Condition	"( ret = parse_outputs ( & filters , & curr_inputs , open_inputs , open_outputs , log_ctx ) ) < 0"	61:12:1067:1185	856347	0	True				
ANR	856519	RelationalExpression	"( ret = parse_outputs ( & filters , & curr_inputs , open_inputs , open_outputs , log_ctx ) ) < 0"		856347	0		<			
ANR	856520	AssignmentExpression	"ret = parse_outputs ( & filters , & curr_inputs , open_inputs , open_outputs , log_ctx )"		856347	0		=			
ANR	856521	Identifier	ret		856347	0					
ANR	856522	CallExpression	"parse_outputs ( & filters , & curr_inputs , open_inputs , open_outputs , log_ctx )"		856347	1					
ANR	856523	Callee	parse_outputs		856347	0					
ANR	856524	Identifier	parse_outputs		856347	0					
ANR	856525	ArgumentList	& filters		856347	1					
ANR	856526	Argument	& filters		856347	0					
ANR	856527	UnaryOperationExpression	& filters		856347	0					
ANR	856528	UnaryOperator	&		856347	0					
ANR	856529	Identifier	filters		856347	1					
ANR	856530	Argument	& curr_inputs		856347	1					
ANR	856531	UnaryOperationExpression	& curr_inputs		856347	0					
ANR	856532	UnaryOperator	&		856347	0					
ANR	856533	Identifier	curr_inputs		856347	1					
ANR	856534	Argument	open_inputs		856347	2					
ANR	856535	Identifier	open_inputs		856347	0					
ANR	856536	Argument	open_outputs		856347	3					
ANR	856537	Identifier	open_outputs		856347	0					
ANR	856538	Argument	log_ctx		856347	4					
ANR	856539	Identifier	log_ctx		856347	0					
ANR	856540	PrimaryExpression	0		856347	1					
ANR	856541	GotoStatement	goto fail ;	65:12:1201:1210	856347	1	True				
ANR	856542	Identifier	fail		856347	0					
ANR	856543	ExpressionStatement	"filters += strspn ( filters , WHITESPACES )"	69:8:1223:1262	856347	8	True				
ANR	856544	AssignmentExpression	"filters += strspn ( filters , WHITESPACES )"		856347	0		+=			
ANR	856545	Identifier	filters		856347	0					
ANR	856546	CallExpression	"strspn ( filters , WHITESPACES )"		856347	1					
ANR	856547	Callee	strspn		856347	0					
ANR	856548	Identifier	strspn		856347	0					
ANR	856549	ArgumentList	filters		856347	1					
ANR	856550	Argument	filters		856347	0					
ANR	856551	Identifier	filters		856347	0					
ANR	856552	Argument	WHITESPACES		856347	1					
ANR	856553	Identifier	WHITESPACES		856347	0					
ANR	856554	ExpressionStatement	chr = * filters ++	71:8:1273:1289	856347	9	True				
ANR	856555	AssignmentExpression	chr = * filters ++		856347	0		=			
ANR	856556	Identifier	chr		856347	0					
ANR	856557	UnaryOperationExpression	* filters ++		856347	1					
ANR	856558	UnaryOperator	*		856347	0					
ANR	856559	PostIncDecOperationExpression	filters ++		856347	1					
ANR	856560	Identifier	filters		856347	0					
ANR	856561	IncDec	++		856347	1					
ANR	856562	IfStatement	if ( chr == ';' && curr_inputs )		856347	10					
ANR	856563	Condition	chr == ';' && curr_inputs	75:12:1306:1330	856347	0	True				
ANR	856564	AndExpression	chr == ';' && curr_inputs		856347	0		&&			
ANR	856565	EqualityExpression	chr == ';'		856347	0		==			
ANR	856566	Identifier	chr		856347	0					
ANR	856567	PrimaryExpression	';'		856347	1					
ANR	856568	Identifier	curr_inputs		856347	1					
ANR	856569	CompoundStatement		69:39:1137:1137	856347	1					
ANR	856570	ExpressionStatement	"av_log ( log_ctx , AV_LOG_ERROR , ""Invalid filterchain containing an unlabelled output pad: \\""%s\\""\\n"" , filterchain )"	77:12:1348:1499	856347	0	True				
ANR	856571	CallExpression	"av_log ( log_ctx , AV_LOG_ERROR , ""Invalid filterchain containing an unlabelled output pad: \\""%s\\""\\n"" , filterchain )"		856347	0					
ANR	856572	Callee	av_log		856347	0					
ANR	856573	Identifier	av_log		856347	0					
ANR	856574	ArgumentList	log_ctx		856347	1					
ANR	856575	Argument	log_ctx		856347	0					
ANR	856576	Identifier	log_ctx		856347	0					
ANR	856577	Argument	AV_LOG_ERROR		856347	1					
ANR	856578	Identifier	AV_LOG_ERROR		856347	0					
ANR	856579	Argument	"""Invalid filterchain containing an unlabelled output pad: \\""%s\\""\\n"""		856347	2					
ANR	856580	PrimaryExpression	"""Invalid filterchain containing an unlabelled output pad: \\""%s\\""\\n"""		856347	0					
ANR	856581	Argument	filterchain		856347	3					
ANR	856582	Identifier	filterchain		856347	0					
ANR	856583	ExpressionStatement	ret = AVERROR ( EINVAL )	83:12:1514:1535	856347	1	True				
ANR	856584	AssignmentExpression	ret = AVERROR ( EINVAL )		856347	0		=			
ANR	856585	Identifier	ret		856347	0					
ANR	856586	CallExpression	AVERROR ( EINVAL )		856347	1					
ANR	856587	Callee	AVERROR		856347	0					
ANR	856588	Identifier	AVERROR		856347	0					
ANR	856589	ArgumentList	EINVAL		856347	1					
ANR	856590	Argument	EINVAL		856347	0					
ANR	856591	Identifier	EINVAL		856347	0					
ANR	856592	GotoStatement	goto fail ;	85:12:1550:1559	856347	2	True				
ANR	856593	Identifier	fail		856347	0					
ANR	856594	ExpressionStatement	index ++	89:8:1581:1588	856347	11	True				
ANR	856595	PostIncDecOperationExpression	index ++		856347	0					
ANR	856596	Identifier	index		856347	0					
ANR	856597	IncDec	++		856347	1					
ANR	856598	Condition	"chr == ',' || chr == ';'"	91:13:1604:1627	856347	1	True				
ANR	856599	OrExpression	"chr == ',' || chr == ';'"		856347	0		||			
ANR	856600	EqualityExpression	"chr == ','"		856347	0		==			
ANR	856601	Identifier	chr		856347	0					
ANR	856602	PrimaryExpression	"','"		856347	1					
ANR	856603	EqualityExpression	chr == ';'		856347	1		==			
ANR	856604	Identifier	chr		856347	0					
ANR	856605	PrimaryExpression	';'		856347	1					
ANR	856606	IfStatement	if ( chr )		856347	4					
ANR	856607	Condition	chr	95:8:1642:1644	856347	0	True				
ANR	856608	Identifier	chr		856347	0					
ANR	856609	CompoundStatement		89:13:1451:1451	856347	1					
ANR	856610	ExpressionStatement	"av_log ( log_ctx , AV_LOG_ERROR , ""Unable to parse graph description substring: \\""%s\\""\\n"" , filters - 1 )"	97:8:1658:1789	856347	0	True				
ANR	856611	CallExpression	"av_log ( log_ctx , AV_LOG_ERROR , ""Unable to parse graph description substring: \\""%s\\""\\n"" , filters - 1 )"		856347	0					
ANR	856612	Callee	av_log		856347	0					
ANR	856613	Identifier	av_log		856347	0					
ANR	856614	ArgumentList	log_ctx		856347	1					
ANR	856615	Argument	log_ctx		856347	0					
ANR	856616	Identifier	log_ctx		856347	0					
ANR	856617	Argument	AV_LOG_ERROR		856347	1					
ANR	856618	Identifier	AV_LOG_ERROR		856347	0					
ANR	856619	Argument	"""Unable to parse graph description substring: \\""%s\\""\\n"""		856347	2					
ANR	856620	PrimaryExpression	"""Unable to parse graph description substring: \\""%s\\""\\n"""		856347	0					
ANR	856621	Argument	filters - 1		856347	3					
ANR	856622	AdditiveExpression	filters - 1		856347	0		-			
ANR	856623	Identifier	filters		856347	0					
ANR	856624	PrimaryExpression	1		856347	1					
ANR	856625	ExpressionStatement	ret = AVERROR ( EINVAL )	103:8:1800:1821	856347	1	True				
ANR	856626	AssignmentExpression	ret = AVERROR ( EINVAL )		856347	0		=			
ANR	856627	Identifier	ret		856347	0					
ANR	856628	CallExpression	AVERROR ( EINVAL )		856347	1					
ANR	856629	Callee	AVERROR		856347	0					
ANR	856630	Identifier	AVERROR		856347	0					
ANR	856631	ArgumentList	EINVAL		856347	1					
ANR	856632	Argument	EINVAL		856347	0					
ANR	856633	Identifier	EINVAL		856347	0					
ANR	856634	GotoStatement	goto fail ;	105:8:1832:1841	856347	2	True				
ANR	856635	Identifier	fail		856347	0					
ANR	856636	IfStatement	"if ( * open_inputs && ! strcmp ( ( * open_inputs ) -> name , ""out"" ) && curr_inputs )"		856347	5					
ANR	856637	Condition	"* open_inputs && ! strcmp ( ( * open_inputs ) -> name , ""out"" ) && curr_inputs"	111:8:1861:1927	856347	0	True				
ANR	856638	AndExpression	"* open_inputs && ! strcmp ( ( * open_inputs ) -> name , ""out"" ) && curr_inputs"		856347	0		&&			
ANR	856639	UnaryOperationExpression	* open_inputs		856347	0					
ANR	856640	UnaryOperator	*		856347	0					
ANR	856641	Identifier	open_inputs		856347	1					
ANR	856642	AndExpression	"! strcmp ( ( * open_inputs ) -> name , ""out"" ) && curr_inputs"		856347	1		&&			
ANR	856643	UnaryOperationExpression	"! strcmp ( ( * open_inputs ) -> name , ""out"" )"		856347	0					
ANR	856644	UnaryOperator	!		856347	0					
ANR	856645	CallExpression	"strcmp ( ( * open_inputs ) -> name , ""out"" )"		856347	1					
ANR	856646	Callee	strcmp		856347	0					
ANR	856647	Identifier	strcmp		856347	0					
ANR	856648	ArgumentList	( * open_inputs ) -> name		856347	1					
ANR	856649	Argument	( * open_inputs ) -> name		856347	0					
ANR	856650	PtrMemberAccess	( * open_inputs ) -> name		856347	0					
ANR	856651	UnaryOperationExpression	* open_inputs		856347	0					
ANR	856652	UnaryOperator	*		856347	0					
ANR	856653	Identifier	open_inputs		856347	1					
ANR	856654	Identifier	name		856347	1					
ANR	856655	Argument	"""out"""		856347	1					
ANR	856656	PrimaryExpression	"""out"""		856347	0					
ANR	856657	Identifier	curr_inputs		856347	1					
ANR	856658	CompoundStatement		109:8:1804:1829	856347	1					
ANR	856659	IdentifierDeclStatement	"const char * tmp = ""[out]"" ;"	115:8:2000:2025	856347	0	True				
ANR	856660	IdentifierDecl	"* tmp = ""[out]"""		856347	0					
ANR	856661	IdentifierDeclType	const char *		856347	0					
ANR	856662	Identifier	tmp		856347	1					
ANR	856663	AssignmentExpression	"* tmp = ""[out]"""		856347	2		=			
ANR	856664	Identifier	tmp		856347	0					
ANR	856665	PrimaryExpression	"""[out]"""		856347	1					
ANR	856666	IfStatement	"if ( ( ret = parse_outputs ( & tmp , & curr_inputs , open_inputs , open_outputs , log_ctx ) ) < 0 )"		856347	1					
ANR	856667	Condition	"( ret = parse_outputs ( & tmp , & curr_inputs , open_inputs , open_outputs , log_ctx ) ) < 0"	117:12:2040:2154	856347	0	True				
ANR	856668	RelationalExpression	"( ret = parse_outputs ( & tmp , & curr_inputs , open_inputs , open_outputs , log_ctx ) ) < 0"		856347	0		<			
ANR	856669	AssignmentExpression	"ret = parse_outputs ( & tmp , & curr_inputs , open_inputs , open_outputs , log_ctx )"		856347	0		=			
ANR	856670	Identifier	ret		856347	0					
ANR	856671	CallExpression	"parse_outputs ( & tmp , & curr_inputs , open_inputs , open_outputs , log_ctx )"		856347	1					
ANR	856672	Callee	parse_outputs		856347	0					
ANR	856673	Identifier	parse_outputs		856347	0					
ANR	856674	ArgumentList	& tmp		856347	1					
ANR	856675	Argument	& tmp		856347	0					
ANR	856676	UnaryOperationExpression	& tmp		856347	0					
ANR	856677	UnaryOperator	&		856347	0					
ANR	856678	Identifier	tmp		856347	1					
ANR	856679	Argument	& curr_inputs		856347	1					
ANR	856680	UnaryOperationExpression	& curr_inputs		856347	0					
ANR	856681	UnaryOperator	&		856347	0					
ANR	856682	Identifier	curr_inputs		856347	1					
ANR	856683	Argument	open_inputs		856347	2					
ANR	856684	Identifier	open_inputs		856347	0					
ANR	856685	Argument	open_outputs		856347	3					
ANR	856686	Identifier	open_outputs		856347	0					
ANR	856687	Argument	log_ctx		856347	4					
ANR	856688	Identifier	log_ctx		856347	0					
ANR	856689	PrimaryExpression	0		856347	1					
ANR	856690	GotoStatement	goto fail ;	121:12:2170:2179	856347	1	True				
ANR	856691	Identifier	fail		856347	0					
ANR	856692	ReturnStatement	return 0 ;	127:4:2195:2203	856347	6	True				
ANR	856693	PrimaryExpression	0		856347	0					
ANR	856694	Label	fail :	131:1:2209:2213	856347	7	True				
ANR	856695	Identifier	fail		856347	0					
ANR	856696	ForStatement	for ( ; graph -> filter_count > 0 ; graph -> filter_count -- )		856347	8					
ANR	856697	Condition	graph -> filter_count > 0	133:11:2227:2249	856347	0	True				
ANR	856698	RelationalExpression	graph -> filter_count > 0		856347	0		>			
ANR	856699	PtrMemberAccess	graph -> filter_count		856347	0					
ANR	856700	Identifier	graph		856347	0					
ANR	856701	Identifier	filter_count		856347	1					
ANR	856702	PrimaryExpression	0		856347	1					
ANR	856703	PostIncDecOperationExpression	graph -> filter_count --	133:36:2252:2272	856347	1	True				
ANR	856704	PtrMemberAccess	graph -> filter_count		856347	0					
ANR	856705	Identifier	graph		856347	0					
ANR	856706	Identifier	filter_count		856347	1					
ANR	856707	IncDec	--		856347	1					
ANR	856708	ExpressionStatement	avfilter_free ( graph -> filters [ graph -> filter_count - 1 ] )	135:8:2284:2338	856347	2	True				
ANR	856709	CallExpression	avfilter_free ( graph -> filters [ graph -> filter_count - 1 ] )		856347	0					
ANR	856710	Callee	avfilter_free		856347	0					
ANR	856711	Identifier	avfilter_free		856347	0					
ANR	856712	ArgumentList	graph -> filters [ graph -> filter_count - 1 ]		856347	1					
ANR	856713	Argument	graph -> filters [ graph -> filter_count - 1 ]		856347	0					
ANR	856714	ArrayIndexing	graph -> filters [ graph -> filter_count - 1 ]		856347	0					
ANR	856715	PtrMemberAccess	graph -> filters		856347	0					
ANR	856716	Identifier	graph		856347	0					
ANR	856717	Identifier	filters		856347	1					
ANR	856718	AdditiveExpression	graph -> filter_count - 1		856347	1		-			
ANR	856719	PtrMemberAccess	graph -> filter_count		856347	0					
ANR	856720	Identifier	graph		856347	0					
ANR	856721	Identifier	filter_count		856347	1					
ANR	856722	PrimaryExpression	1		856347	1					
ANR	856723	ExpressionStatement	av_freep ( & graph -> filters )	137:4:2345:2370	856347	9	True				
ANR	856724	CallExpression	av_freep ( & graph -> filters )		856347	0					
ANR	856725	Callee	av_freep		856347	0					
ANR	856726	Identifier	av_freep		856347	0					
ANR	856727	ArgumentList	& graph -> filters		856347	1					
ANR	856728	Argument	& graph -> filters		856347	0					
ANR	856729	UnaryOperationExpression	& graph -> filters		856347	0					
ANR	856730	UnaryOperator	&		856347	0					
ANR	856731	PtrMemberAccess	graph -> filters		856347	1					
ANR	856732	Identifier	graph		856347	0					
ANR	856733	Identifier	filters		856347	1					
ANR	856734	ExpressionStatement	avfilter_inout_free ( open_inputs )	139:4:2377:2409	856347	10	True				
ANR	856735	CallExpression	avfilter_inout_free ( open_inputs )		856347	0					
ANR	856736	Callee	avfilter_inout_free		856347	0					
ANR	856737	Identifier	avfilter_inout_free		856347	0					
ANR	856738	ArgumentList	open_inputs		856347	1					
ANR	856739	Argument	open_inputs		856347	0					
ANR	856740	Identifier	open_inputs		856347	0					
ANR	856741	ExpressionStatement	avfilter_inout_free ( open_outputs )	141:4:2416:2449	856347	11	True				
ANR	856742	CallExpression	avfilter_inout_free ( open_outputs )		856347	0					
ANR	856743	Callee	avfilter_inout_free		856347	0					
ANR	856744	Identifier	avfilter_inout_free		856347	0					
ANR	856745	ArgumentList	open_outputs		856347	1					
ANR	856746	Argument	open_outputs		856347	0					
ANR	856747	Identifier	open_outputs		856347	0					
ANR	856748	ExpressionStatement	avfilter_inout_free ( & curr_inputs )	143:4:2456:2489	856347	12	True				
ANR	856749	CallExpression	avfilter_inout_free ( & curr_inputs )		856347	0					
ANR	856750	Callee	avfilter_inout_free		856347	0					
ANR	856751	Identifier	avfilter_inout_free		856347	0					
ANR	856752	ArgumentList	& curr_inputs		856347	1					
ANR	856753	Argument	& curr_inputs		856347	0					
ANR	856754	UnaryOperationExpression	& curr_inputs		856347	0					
ANR	856755	UnaryOperator	&		856347	0					
ANR	856756	Identifier	curr_inputs		856347	1					
ANR	856757	ReturnStatement	return ret ;	145:4:2496:2506	856347	13	True				
ANR	856758	Identifier	ret		856347	0					
ANR	856759	ReturnType	int		856347	1					
ANR	856760	Identifier	avfilter_graph_parse		856347	2					
ANR	856761	ParameterList	"AVFilterGraph * graph , const char * filters , AVFilterInOut * * open_inputs , AVFilterInOut * * open_outputs , void * log_ctx"		856347	3					
ANR	856762	Parameter	AVFilterGraph * graph	1:25:25:44	856347	0	True				
ANR	856763	ParameterType	AVFilterGraph *		856347	0					
ANR	856764	Identifier	graph		856347	1					
ANR	856765	Parameter	const char * filters	1:47:47:65	856347	1	True				
ANR	856766	ParameterType	const char *		856347	0					
ANR	856767	Identifier	filters		856347	1					
ANR	856768	Parameter	AVFilterInOut * * open_inputs	3:25:94:120	856347	2	True				
ANR	856769	ParameterType	AVFilterInOut * *		856347	0					
ANR	856770	Identifier	open_inputs		856347	1					
ANR	856771	Parameter	AVFilterInOut * * open_outputs	3:54:123:150	856347	3	True				
ANR	856772	ParameterType	AVFilterInOut * *		856347	0					
ANR	856773	Identifier	open_outputs		856347	1					
ANR	856774	Parameter	void * log_ctx	5:25:179:191	856347	4	True				
ANR	856775	ParameterType	void *		856347	0					
ANR	856776	Identifier	log_ctx		856347	1					
ANR	856777	CFGEntryNode	ENTRY		856347		True				
ANR	856778	CFGExitNode	EXIT		856347		True				
ANR	856779	Symbol	& graph -> filters		856347						
ANR	856780	Symbol	* * graph		856347						
ANR	856781	Symbol	open_outputs		856347						
ANR	856782	Symbol	* * open_inputs		856347						
ANR	856783	Symbol	WHITESPACES		856347						
ANR	856784	Symbol	link_filter_inouts		856347						
ANR	856785	Symbol	& filter		856347						
ANR	856786	Symbol	log_ctx		856347						
ANR	856787	Symbol	& curr_inputs		856347						
ANR	856788	Symbol	open_inputs		856347						
ANR	856789	Symbol	tmp		856347						
ANR	856790	Symbol	* open_inputs		856347						
ANR	856791	Symbol	* graph		856347						
ANR	856792	Symbol	graph -> filter_count		856347						
ANR	856793	Symbol	& filters		856347						
ANR	856794	Symbol	parse_outputs		856347						
ANR	856795	Symbol	ret		856347						
ANR	856796	Symbol	strcmp		856347						
ANR	856797	Symbol	NULL		856347						
ANR	856798	Symbol	AV_LOG_ERROR		856347						
ANR	856799	Symbol	parse_filter		856347						
ANR	856800	Symbol	index		856347						
ANR	856801	Symbol	filters		856347						
ANR	856802	Symbol	graph -> filters		856347						
ANR	856803	Symbol	chr		856347						
ANR	856804	Symbol	* filters ++		856347						
ANR	856805	Symbol	graph		856347						
ANR	856806	Symbol	filterchain		856347						
ANR	856807	Symbol	* filter		856347						
ANR	856808	Symbol	filter		856347						
ANR	856809	Symbol	EINVAL		856347						
ANR	856810	Symbol	* graph -> filters		856347						
ANR	856811	Symbol	strspn		856347						
ANR	856812	Symbol	curr_inputs		856347						
ANR	856813	Symbol	& tmp		856347						
ANR	856814	Symbol	AVERROR		856347						
ANR	856815	Symbol	( * open_inputs ) -> name		856347						
ANR	856816	Symbol	* graph -> filter_count		856347						
ANR	856817	Symbol	parse_inputs		856347						
ANR	856818	Symbol	filter -> input_count		856347						
