command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6679925	File	/home/p4ultr4n/workplace/ReVeal/raw_code/print_insn_1.c								
ANR	6679926	Function	print_insn	1:0:0:11901							
ANR	6679927	FunctionDef	"print_insn (bfd_vma pc , disassemble_info * info)"		6679926	0					
ANR	6679928	CompoundStatement		3:0:49:11901	6679926	0					
ANR	6679929	IdentifierDeclStatement	const struct dis386 * dp ;	5:2:54:77	6679926	0	True				
ANR	6679930	IdentifierDecl	* dp		6679926	0					
ANR	6679931	IdentifierDeclType	const struct dis386 *		6679926	0					
ANR	6679932	Identifier	dp		6679926	1					
ANR	6679933	IdentifierDeclStatement	int i ;	7:2:82:87	6679926	1	True				
ANR	6679934	IdentifierDecl	i		6679926	0					
ANR	6679935	IdentifierDeclType	int		6679926	0					
ANR	6679936	Identifier	i		6679926	1					
ANR	6679937	IdentifierDeclStatement	char * op_txt [ MAX_OPERANDS ] ;	9:2:92:118	6679926	2	True				
ANR	6679938	IdentifierDecl	* op_txt [ MAX_OPERANDS ]		6679926	0					
ANR	6679939	IdentifierDeclType	char * [ MAX_OPERANDS ]		6679926	0					
ANR	6679940	Identifier	op_txt		6679926	1					
ANR	6679941	Identifier	MAX_OPERANDS		6679926	2					
ANR	6679942	IdentifierDeclStatement	int needcomma ;	11:2:123:136	6679926	3	True				
ANR	6679943	IdentifierDecl	needcomma		6679926	0					
ANR	6679944	IdentifierDeclType	int		6679926	0					
ANR	6679945	Identifier	needcomma		6679926	1					
ANR	6679946	IdentifierDeclStatement	"unsigned char uses_DATA_prefix , uses_LOCK_prefix ;"	13:2:141:189	6679926	4	True				
ANR	6679947	IdentifierDecl	uses_DATA_prefix		6679926	0					
ANR	6679948	IdentifierDeclType	unsigned char		6679926	0					
ANR	6679949	Identifier	uses_DATA_prefix		6679926	1					
ANR	6679950	IdentifierDecl	uses_LOCK_prefix		6679926	1					
ANR	6679951	IdentifierDeclType	unsigned char		6679926	0					
ANR	6679952	Identifier	uses_LOCK_prefix		6679926	1					
ANR	6679953	IdentifierDeclStatement	"unsigned char uses_REPNZ_prefix , uses_REPZ_prefix ;"	15:2:194:243	6679926	5	True				
ANR	6679954	IdentifierDecl	uses_REPNZ_prefix		6679926	0					
ANR	6679955	IdentifierDeclType	unsigned char		6679926	0					
ANR	6679956	Identifier	uses_REPNZ_prefix		6679926	1					
ANR	6679957	IdentifierDecl	uses_REPZ_prefix		6679926	1					
ANR	6679958	IdentifierDeclType	unsigned char		6679926	0					
ANR	6679959	Identifier	uses_REPZ_prefix		6679926	1					
ANR	6679960	IdentifierDeclStatement	int sizeflag ;	17:2:248:260	6679926	6	True				
ANR	6679961	IdentifierDecl	sizeflag		6679926	0					
ANR	6679962	IdentifierDeclType	int		6679926	0					
ANR	6679963	Identifier	sizeflag		6679926	1					
ANR	6679964	IdentifierDeclStatement	const char * p ;	19:2:265:278	6679926	7	True				
ANR	6679965	IdentifierDecl	* p		6679926	0					
ANR	6679966	IdentifierDeclType	const char *		6679926	0					
ANR	6679967	Identifier	p		6679926	1					
ANR	6679968	IdentifierDeclStatement	struct dis_private priv ;	21:2:283:306	6679926	8	True				
ANR	6679969	IdentifierDecl	priv		6679926	0					
ANR	6679970	IdentifierDeclType	struct dis_private		6679926	0					
ANR	6679971	Identifier	priv		6679926	1					
ANR	6679972	IdentifierDeclStatement	unsigned char op ;	23:2:311:327	6679926	9	True				
ANR	6679973	IdentifierDecl	op		6679926	0					
ANR	6679974	IdentifierDeclType	unsigned char		6679926	0					
ANR	6679975	Identifier	op		6679926	1					
ANR	6679976	IdentifierDeclStatement	unsigned char threebyte ;	25:2:332:355	6679926	10	True				
ANR	6679977	IdentifierDecl	threebyte		6679926	0					
ANR	6679978	IdentifierDeclType	unsigned char		6679926	0					
ANR	6679979	Identifier	threebyte		6679926	1					
ANR	6679980	IfStatement	if ( info -> mach == bfd_mach_x86_64_intel_syntax || info -> mach == bfd_mach_x86_64 )		6679926	11					
ANR	6679981	Condition	info -> mach == bfd_mach_x86_64_intel_syntax || info -> mach == bfd_mach_x86_64	29:6:366:447	6679926	0	True				
ANR	6679982	OrExpression	info -> mach == bfd_mach_x86_64_intel_syntax || info -> mach == bfd_mach_x86_64		6679926	0		||			
ANR	6679983	EqualityExpression	info -> mach == bfd_mach_x86_64_intel_syntax		6679926	0		==			
ANR	6679984	PtrMemberAccess	info -> mach		6679926	0					
ANR	6679985	Identifier	info		6679926	0					
ANR	6679986	Identifier	mach		6679926	1					
ANR	6679987	Identifier	bfd_mach_x86_64_intel_syntax		6679926	1					
ANR	6679988	EqualityExpression	info -> mach == bfd_mach_x86_64		6679926	1		==			
ANR	6679989	PtrMemberAccess	info -> mach		6679926	0					
ANR	6679990	Identifier	info		6679926	0					
ANR	6679991	Identifier	mach		6679926	1					
ANR	6679992	Identifier	bfd_mach_x86_64		6679926	1					
ANR	6679993	ExpressionStatement	address_mode = mode_64bit	33:4:455:480	6679926	1	True				
ANR	6679994	AssignmentExpression	address_mode = mode_64bit		6679926	0		=			
ANR	6679995	Identifier	address_mode		6679926	0					
ANR	6679996	Identifier	mode_64bit		6679926	1					
ANR	6679997	ElseStatement	else		6679926	0					
ANR	6679998	ExpressionStatement	address_mode = mode_32bit	37:4:495:520	6679926	0	True				
ANR	6679999	AssignmentExpression	address_mode = mode_32bit		6679926	0		=			
ANR	6680000	Identifier	address_mode		6679926	0					
ANR	6680001	Identifier	mode_32bit		6679926	1					
ANR	6680002	IfStatement	if ( intel_syntax == ( char ) - 1 )		6679926	12					
ANR	6680003	Condition	intel_syntax == ( char ) - 1	41:6:531:555	6679926	0	True				
ANR	6680004	EqualityExpression	intel_syntax == ( char ) - 1		6679926	0		==			
ANR	6680005	Identifier	intel_syntax		6679926	0					
ANR	6680006	CastExpression	( char ) - 1		6679926	1					
ANR	6680007	CastTarget	char		6679926	0					
ANR	6680008	UnaryOperationExpression	- 1		6679926	1					
ANR	6680009	UnaryOperator	-		6679926	0					
ANR	6680010	PrimaryExpression	1		6679926	1					
ANR	6680011	ExpressionStatement	intel_syntax = ( info -> mach == bfd_mach_i386_i386_intel_syntax || info -> mach == bfd_mach_x86_64_intel_syntax )	43:4:563:678	6679926	1	True				
ANR	6680012	AssignmentExpression	intel_syntax = ( info -> mach == bfd_mach_i386_i386_intel_syntax || info -> mach == bfd_mach_x86_64_intel_syntax )		6679926	0		=			
ANR	6680013	Identifier	intel_syntax		6679926	0					
ANR	6680014	OrExpression	info -> mach == bfd_mach_i386_i386_intel_syntax || info -> mach == bfd_mach_x86_64_intel_syntax		6679926	1		||			
ANR	6680015	EqualityExpression	info -> mach == bfd_mach_i386_i386_intel_syntax		6679926	0		==			
ANR	6680016	PtrMemberAccess	info -> mach		6679926	0					
ANR	6680017	Identifier	info		6679926	0					
ANR	6680018	Identifier	mach		6679926	1					
ANR	6680019	Identifier	bfd_mach_i386_i386_intel_syntax		6679926	1					
ANR	6680020	EqualityExpression	info -> mach == bfd_mach_x86_64_intel_syntax		6679926	1		==			
ANR	6680021	PtrMemberAccess	info -> mach		6679926	0					
ANR	6680022	Identifier	info		6679926	0					
ANR	6680023	Identifier	mach		6679926	1					
ANR	6680024	Identifier	bfd_mach_x86_64_intel_syntax		6679926	1					
ANR	6680025	IfStatement	if ( info -> mach == bfd_mach_i386_i386 || info -> mach == bfd_mach_x86_64 || info -> mach == bfd_mach_i386_i386_intel_syntax || info -> mach == bfd_mach_x86_64_intel_syntax )		6679926	13					
ANR	6680026	Condition	info -> mach == bfd_mach_i386_i386 || info -> mach == bfd_mach_x86_64 || info -> mach == bfd_mach_i386_i386_intel_syntax || info -> mach == bfd_mach_x86_64_intel_syntax	49:6:689:869	6679926	0	True				
ANR	6680027	OrExpression	info -> mach == bfd_mach_i386_i386 || info -> mach == bfd_mach_x86_64 || info -> mach == bfd_mach_i386_i386_intel_syntax || info -> mach == bfd_mach_x86_64_intel_syntax		6679926	0		||			
ANR	6680028	EqualityExpression	info -> mach == bfd_mach_i386_i386		6679926	0		==			
ANR	6680029	PtrMemberAccess	info -> mach		6679926	0					
ANR	6680030	Identifier	info		6679926	0					
ANR	6680031	Identifier	mach		6679926	1					
ANR	6680032	Identifier	bfd_mach_i386_i386		6679926	1					
ANR	6680033	OrExpression	info -> mach == bfd_mach_x86_64 || info -> mach == bfd_mach_i386_i386_intel_syntax || info -> mach == bfd_mach_x86_64_intel_syntax		6679926	1		||			
ANR	6680034	EqualityExpression	info -> mach == bfd_mach_x86_64		6679926	0		==			
ANR	6680035	PtrMemberAccess	info -> mach		6679926	0					
ANR	6680036	Identifier	info		6679926	0					
ANR	6680037	Identifier	mach		6679926	1					
ANR	6680038	Identifier	bfd_mach_x86_64		6679926	1					
ANR	6680039	OrExpression	info -> mach == bfd_mach_i386_i386_intel_syntax || info -> mach == bfd_mach_x86_64_intel_syntax		6679926	1		||			
ANR	6680040	EqualityExpression	info -> mach == bfd_mach_i386_i386_intel_syntax		6679926	0		==			
ANR	6680041	PtrMemberAccess	info -> mach		6679926	0					
ANR	6680042	Identifier	info		6679926	0					
ANR	6680043	Identifier	mach		6679926	1					
ANR	6680044	Identifier	bfd_mach_i386_i386_intel_syntax		6679926	1					
ANR	6680045	EqualityExpression	info -> mach == bfd_mach_x86_64_intel_syntax		6679926	1		==			
ANR	6680046	PtrMemberAccess	info -> mach		6679926	0					
ANR	6680047	Identifier	info		6679926	0					
ANR	6680048	Identifier	mach		6679926	1					
ANR	6680049	Identifier	bfd_mach_x86_64_intel_syntax		6679926	1					
ANR	6680050	ExpressionStatement	priv . orig_sizeflag = AFLAG | DFLAG	57:4:877:911	6679926	1	True				
ANR	6680051	AssignmentExpression	priv . orig_sizeflag = AFLAG | DFLAG		6679926	0		=			
ANR	6680052	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680053	Identifier	priv		6679926	0					
ANR	6680054	Identifier	orig_sizeflag		6679926	1					
ANR	6680055	InclusiveOrExpression	AFLAG | DFLAG		6679926	1		|			
ANR	6680056	Identifier	AFLAG		6679926	0					
ANR	6680057	Identifier	DFLAG		6679926	1					
ANR	6680058	ElseStatement	else		6679926	0					
ANR	6680059	IfStatement	if ( info -> mach == bfd_mach_i386_i8086 )		6679926	0					
ANR	6680060	Condition	info -> mach == bfd_mach_i386_i8086	59:11:925:957	6679926	0	True				
ANR	6680061	EqualityExpression	info -> mach == bfd_mach_i386_i8086		6679926	0		==			
ANR	6680062	PtrMemberAccess	info -> mach		6679926	0					
ANR	6680063	Identifier	info		6679926	0					
ANR	6680064	Identifier	mach		6679926	1					
ANR	6680065	Identifier	bfd_mach_i386_i8086		6679926	1					
ANR	6680066	ExpressionStatement	priv . orig_sizeflag = 0	61:4:965:987	6679926	1	True				
ANR	6680067	AssignmentExpression	priv . orig_sizeflag = 0		6679926	0		=			
ANR	6680068	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680069	Identifier	priv		6679926	0					
ANR	6680070	Identifier	orig_sizeflag		6679926	1					
ANR	6680071	PrimaryExpression	0		6679926	1					
ANR	6680072	ElseStatement	else		6679926	0					
ANR	6680073	ExpressionStatement	abort ( )	65:4:1002:1010	6679926	0	True				
ANR	6680074	CallExpression	abort ( )		6679926	0					
ANR	6680075	Callee	abort		6679926	0					
ANR	6680076	Identifier	abort		6679926	0					
ANR	6680077	ArgumentList			6679926	1					
ANR	6680078	ForStatement	for ( p = info -> disassembler_options ; p != NULL ; )		6679926	14					
ANR	6680079	ForInit	p = info -> disassembler_options ;	69:7:1022:1052	6679926	0	True				
ANR	6680080	AssignmentExpression	p = info -> disassembler_options		6679926	0		=			
ANR	6680081	Identifier	p		6679926	0					
ANR	6680082	PtrMemberAccess	info -> disassembler_options		6679926	1					
ANR	6680083	Identifier	info		6679926	0					
ANR	6680084	Identifier	disassembler_options		6679926	1					
ANR	6680085	Condition	p != NULL	69:39:1054:1062	6679926	1	True				
ANR	6680086	EqualityExpression	p != NULL		6679926	0		!=			
ANR	6680087	Identifier	p		6679926	0					
ANR	6680088	Identifier	NULL		6679926	1					
ANR	6680089	CompoundStatement		69:4:1022:1022	6679926	2					
ANR	6680090	IfStatement	"if ( strncmp ( p , ""x86-64"" , 6 ) == 0 )"		6679926	0					
ANR	6680091	Condition	"strncmp ( p , ""x86-64"" , 6 ) == 0"	73:10:1085:1113	6679926	0	True				
ANR	6680092	EqualityExpression	"strncmp ( p , ""x86-64"" , 6 ) == 0"		6679926	0		==			
ANR	6680093	CallExpression	"strncmp ( p , ""x86-64"" , 6 )"		6679926	0					
ANR	6680094	Callee	strncmp		6679926	0					
ANR	6680095	Identifier	strncmp		6679926	0					
ANR	6680096	ArgumentList	p		6679926	1					
ANR	6680097	Argument	p		6679926	0					
ANR	6680098	Identifier	p		6679926	0					
ANR	6680099	Argument	"""x86-64"""		6679926	1					
ANR	6680100	PrimaryExpression	"""x86-64"""		6679926	0					
ANR	6680101	Argument	6		6679926	2					
ANR	6680102	PrimaryExpression	6		6679926	0					
ANR	6680103	PrimaryExpression	0		6679926	1					
ANR	6680104	CompoundStatement		73:1:1068:1068	6679926	1					
ANR	6680105	ExpressionStatement	address_mode = mode_64bit	77:3:1124:1149	6679926	0	True				
ANR	6680106	AssignmentExpression	address_mode = mode_64bit		6679926	0		=			
ANR	6680107	Identifier	address_mode		6679926	0					
ANR	6680108	Identifier	mode_64bit		6679926	1					
ANR	6680109	ExpressionStatement	priv . orig_sizeflag = AFLAG | DFLAG	79:3:1155:1189	6679926	1	True				
ANR	6680110	AssignmentExpression	priv . orig_sizeflag = AFLAG | DFLAG		6679926	0		=			
ANR	6680111	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680112	Identifier	priv		6679926	0					
ANR	6680113	Identifier	orig_sizeflag		6679926	1					
ANR	6680114	InclusiveOrExpression	AFLAG | DFLAG		6679926	1		|			
ANR	6680115	Identifier	AFLAG		6679926	0					
ANR	6680116	Identifier	DFLAG		6679926	1					
ANR	6680117	ElseStatement	else		6679926	0					
ANR	6680118	IfStatement	"if ( strncmp ( p , ""i386"" , 4 ) == 0 )"		6679926	0					
ANR	6680119	Condition	"strncmp ( p , ""i386"" , 4 ) == 0"	83:15:1211:1237	6679926	0	True				
ANR	6680120	EqualityExpression	"strncmp ( p , ""i386"" , 4 ) == 0"		6679926	0		==			
ANR	6680121	CallExpression	"strncmp ( p , ""i386"" , 4 )"		6679926	0					
ANR	6680122	Callee	strncmp		6679926	0					
ANR	6680123	Identifier	strncmp		6679926	0					
ANR	6680124	ArgumentList	p		6679926	1					
ANR	6680125	Argument	p		6679926	0					
ANR	6680126	Identifier	p		6679926	0					
ANR	6680127	Argument	"""i386"""		6679926	1					
ANR	6680128	PrimaryExpression	"""i386"""		6679926	0					
ANR	6680129	Argument	4		6679926	2					
ANR	6680130	PrimaryExpression	4		6679926	0					
ANR	6680131	PrimaryExpression	0		6679926	1					
ANR	6680132	CompoundStatement		83:1:1192:1192	6679926	1					
ANR	6680133	ExpressionStatement	address_mode = mode_32bit	87:3:1248:1273	6679926	0	True				
ANR	6680134	AssignmentExpression	address_mode = mode_32bit		6679926	0		=			
ANR	6680135	Identifier	address_mode		6679926	0					
ANR	6680136	Identifier	mode_32bit		6679926	1					
ANR	6680137	ExpressionStatement	priv . orig_sizeflag = AFLAG | DFLAG	89:3:1279:1313	6679926	1	True				
ANR	6680138	AssignmentExpression	priv . orig_sizeflag = AFLAG | DFLAG		6679926	0		=			
ANR	6680139	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680140	Identifier	priv		6679926	0					
ANR	6680141	Identifier	orig_sizeflag		6679926	1					
ANR	6680142	InclusiveOrExpression	AFLAG | DFLAG		6679926	1		|			
ANR	6680143	Identifier	AFLAG		6679926	0					
ANR	6680144	Identifier	DFLAG		6679926	1					
ANR	6680145	ElseStatement	else		6679926	0					
ANR	6680146	IfStatement	"if ( strncmp ( p , ""i8086"" , 5 ) == 0 )"		6679926	0					
ANR	6680147	Condition	"strncmp ( p , ""i8086"" , 5 ) == 0"	93:15:1335:1362	6679926	0	True				
ANR	6680148	EqualityExpression	"strncmp ( p , ""i8086"" , 5 ) == 0"		6679926	0		==			
ANR	6680149	CallExpression	"strncmp ( p , ""i8086"" , 5 )"		6679926	0					
ANR	6680150	Callee	strncmp		6679926	0					
ANR	6680151	Identifier	strncmp		6679926	0					
ANR	6680152	ArgumentList	p		6679926	1					
ANR	6680153	Argument	p		6679926	0					
ANR	6680154	Identifier	p		6679926	0					
ANR	6680155	Argument	"""i8086"""		6679926	1					
ANR	6680156	PrimaryExpression	"""i8086"""		6679926	0					
ANR	6680157	Argument	5		6679926	2					
ANR	6680158	PrimaryExpression	5		6679926	0					
ANR	6680159	PrimaryExpression	0		6679926	1					
ANR	6680160	CompoundStatement		93:1:1317:1317	6679926	1					
ANR	6680161	ExpressionStatement	address_mode = mode_16bit	97:3:1373:1398	6679926	0	True				
ANR	6680162	AssignmentExpression	address_mode = mode_16bit		6679926	0		=			
ANR	6680163	Identifier	address_mode		6679926	0					
ANR	6680164	Identifier	mode_16bit		6679926	1					
ANR	6680165	ExpressionStatement	priv . orig_sizeflag = 0	99:3:1404:1426	6679926	1	True				
ANR	6680166	AssignmentExpression	priv . orig_sizeflag = 0		6679926	0		=			
ANR	6680167	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680168	Identifier	priv		6679926	0					
ANR	6680169	Identifier	orig_sizeflag		6679926	1					
ANR	6680170	PrimaryExpression	0		6679926	1					
ANR	6680171	ElseStatement	else		6679926	0					
ANR	6680172	IfStatement	"if ( strncmp ( p , ""intel"" , 5 ) == 0 )"		6679926	0					
ANR	6680173	Condition	"strncmp ( p , ""intel"" , 5 ) == 0"	103:15:1448:1475	6679926	0	True				
ANR	6680174	EqualityExpression	"strncmp ( p , ""intel"" , 5 ) == 0"		6679926	0		==			
ANR	6680175	CallExpression	"strncmp ( p , ""intel"" , 5 )"		6679926	0					
ANR	6680176	Callee	strncmp		6679926	0					
ANR	6680177	Identifier	strncmp		6679926	0					
ANR	6680178	ArgumentList	p		6679926	1					
ANR	6680179	Argument	p		6679926	0					
ANR	6680180	Identifier	p		6679926	0					
ANR	6680181	Argument	"""intel"""		6679926	1					
ANR	6680182	PrimaryExpression	"""intel"""		6679926	0					
ANR	6680183	Argument	5		6679926	2					
ANR	6680184	PrimaryExpression	5		6679926	0					
ANR	6680185	PrimaryExpression	0		6679926	1					
ANR	6680186	CompoundStatement		103:1:1430:1430	6679926	1					
ANR	6680187	ExpressionStatement	intel_syntax = 1	107:3:1486:1502	6679926	0	True				
ANR	6680188	AssignmentExpression	intel_syntax = 1		6679926	0		=			
ANR	6680189	Identifier	intel_syntax		6679926	0					
ANR	6680190	PrimaryExpression	1		6679926	1					
ANR	6680191	ElseStatement	else		6679926	0					
ANR	6680192	IfStatement	"if ( strncmp ( p , ""att"" , 3 ) == 0 )"		6679926	0					
ANR	6680193	Condition	"strncmp ( p , ""att"" , 3 ) == 0"	111:15:1524:1549	6679926	0	True				
ANR	6680194	EqualityExpression	"strncmp ( p , ""att"" , 3 ) == 0"		6679926	0		==			
ANR	6680195	CallExpression	"strncmp ( p , ""att"" , 3 )"		6679926	0					
ANR	6680196	Callee	strncmp		6679926	0					
ANR	6680197	Identifier	strncmp		6679926	0					
ANR	6680198	ArgumentList	p		6679926	1					
ANR	6680199	Argument	p		6679926	0					
ANR	6680200	Identifier	p		6679926	0					
ANR	6680201	Argument	"""att"""		6679926	1					
ANR	6680202	PrimaryExpression	"""att"""		6679926	0					
ANR	6680203	Argument	3		6679926	2					
ANR	6680204	PrimaryExpression	3		6679926	0					
ANR	6680205	PrimaryExpression	0		6679926	1					
ANR	6680206	CompoundStatement		111:1:1504:1504	6679926	1					
ANR	6680207	ExpressionStatement	intel_syntax = 0	115:3:1560:1576	6679926	0	True				
ANR	6680208	AssignmentExpression	intel_syntax = 0		6679926	0		=			
ANR	6680209	Identifier	intel_syntax		6679926	0					
ANR	6680210	PrimaryExpression	0		6679926	1					
ANR	6680211	ElseStatement	else		6679926	0					
ANR	6680212	IfStatement	"if ( strncmp ( p , ""addr"" , 4 ) == 0 )"		6679926	0					
ANR	6680213	Condition	"strncmp ( p , ""addr"" , 4 ) == 0"	119:15:1598:1624	6679926	0	True				
ANR	6680214	EqualityExpression	"strncmp ( p , ""addr"" , 4 ) == 0"		6679926	0		==			
ANR	6680215	CallExpression	"strncmp ( p , ""addr"" , 4 )"		6679926	0					
ANR	6680216	Callee	strncmp		6679926	0					
ANR	6680217	Identifier	strncmp		6679926	0					
ANR	6680218	ArgumentList	p		6679926	1					
ANR	6680219	Argument	p		6679926	0					
ANR	6680220	Identifier	p		6679926	0					
ANR	6680221	Argument	"""addr"""		6679926	1					
ANR	6680222	PrimaryExpression	"""addr"""		6679926	0					
ANR	6680223	Argument	4		6679926	2					
ANR	6680224	PrimaryExpression	4		6679926	0					
ANR	6680225	PrimaryExpression	0		6679926	1					
ANR	6680226	CompoundStatement		119:1:1579:1579	6679926	1					
ANR	6680227	IfStatement	if ( address_mode == mode_64bit )		6679926	0					
ANR	6680228	Condition	address_mode == mode_64bit	123:7:1639:1664	6679926	0	True				
ANR	6680229	EqualityExpression	address_mode == mode_64bit		6679926	0		==			
ANR	6680230	Identifier	address_mode		6679926	0					
ANR	6680231	Identifier	mode_64bit		6679926	1					
ANR	6680232	CompoundStatement		123:5:1623:1623	6679926	1					
ANR	6680233	IfStatement	if ( p [ 4 ] == '3' && p [ 5 ] == '2' )		6679926	0					
ANR	6680234	Condition	p [ 4 ] == '3' && p [ 5 ] == '2'	127:11:1687:1712	6679926	0	True				
ANR	6680235	AndExpression	p [ 4 ] == '3' && p [ 5 ] == '2'		6679926	0		&&			
ANR	6680236	EqualityExpression	p [ 4 ] == '3'		6679926	0		==			
ANR	6680237	ArrayIndexing	p [ 4 ]		6679926	0					
ANR	6680238	Identifier	p		6679926	0					
ANR	6680239	PrimaryExpression	4		6679926	1					
ANR	6680240	PrimaryExpression	'3'		6679926	1					
ANR	6680241	EqualityExpression	p [ 5 ] == '2'		6679926	1		==			
ANR	6680242	ArrayIndexing	p [ 5 ]		6679926	0					
ANR	6680243	Identifier	p		6679926	0					
ANR	6680244	PrimaryExpression	5		6679926	1					
ANR	6680245	PrimaryExpression	'2'		6679926	1					
ANR	6680246	ExpressionStatement	priv . orig_sizeflag &= ~AFLAG	129:2:1718:1746	6679926	1	True				
ANR	6680247	AssignmentExpression	priv . orig_sizeflag &= ~AFLAG		6679926	0		&=			
ANR	6680248	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680249	Identifier	priv		6679926	0					
ANR	6680250	Identifier	orig_sizeflag		6679926	1					
ANR	6680251	Identifier	~AFLAG		6679926	1					
ANR	6680252	ElseStatement	else		6679926	0					
ANR	6680253	IfStatement	if ( p [ 4 ] == '6' && p [ 5 ] == '4' )		6679926	0					
ANR	6680254	Condition	p [ 4 ] == '6' && p [ 5 ] == '4'	131:16:1765:1790	6679926	0	True				
ANR	6680255	AndExpression	p [ 4 ] == '6' && p [ 5 ] == '4'		6679926	0		&&			
ANR	6680256	EqualityExpression	p [ 4 ] == '6'		6679926	0		==			
ANR	6680257	ArrayIndexing	p [ 4 ]		6679926	0					
ANR	6680258	Identifier	p		6679926	0					
ANR	6680259	PrimaryExpression	4		6679926	1					
ANR	6680260	PrimaryExpression	'6'		6679926	1					
ANR	6680261	EqualityExpression	p [ 5 ] == '4'		6679926	1		==			
ANR	6680262	ArrayIndexing	p [ 5 ]		6679926	0					
ANR	6680263	Identifier	p		6679926	0					
ANR	6680264	PrimaryExpression	5		6679926	1					
ANR	6680265	PrimaryExpression	'4'		6679926	1					
ANR	6680266	ExpressionStatement	priv . orig_sizeflag |= AFLAG	133:2:1796:1823	6679926	1	True				
ANR	6680267	AssignmentExpression	priv . orig_sizeflag |= AFLAG		6679926	0		|=			
ANR	6680268	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680269	Identifier	priv		6679926	0					
ANR	6680270	Identifier	orig_sizeflag		6679926	1					
ANR	6680271	Identifier	AFLAG		6679926	1					
ANR	6680272	ElseStatement	else		6679926	0					
ANR	6680273	CompoundStatement		137:5:1798:1798	6679926	0					
ANR	6680274	IfStatement	if ( p [ 4 ] == '1' && p [ 5 ] == '6' )		6679926	0					
ANR	6680275	Condition	p [ 4 ] == '1' && p [ 5 ] == '6'	141:11:1862:1887	6679926	0	True				
ANR	6680276	AndExpression	p [ 4 ] == '1' && p [ 5 ] == '6'		6679926	0		&&			
ANR	6680277	EqualityExpression	p [ 4 ] == '1'		6679926	0		==			
ANR	6680278	ArrayIndexing	p [ 4 ]		6679926	0					
ANR	6680279	Identifier	p		6679926	0					
ANR	6680280	PrimaryExpression	4		6679926	1					
ANR	6680281	PrimaryExpression	'1'		6679926	1					
ANR	6680282	EqualityExpression	p [ 5 ] == '6'		6679926	1		==			
ANR	6680283	ArrayIndexing	p [ 5 ]		6679926	0					
ANR	6680284	Identifier	p		6679926	0					
ANR	6680285	PrimaryExpression	5		6679926	1					
ANR	6680286	PrimaryExpression	'6'		6679926	1					
ANR	6680287	ExpressionStatement	priv . orig_sizeflag &= ~AFLAG	143:2:1893:1921	6679926	1	True				
ANR	6680288	AssignmentExpression	priv . orig_sizeflag &= ~AFLAG		6679926	0		&=			
ANR	6680289	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680290	Identifier	priv		6679926	0					
ANR	6680291	Identifier	orig_sizeflag		6679926	1					
ANR	6680292	Identifier	~AFLAG		6679926	1					
ANR	6680293	ElseStatement	else		6679926	0					
ANR	6680294	IfStatement	if ( p [ 4 ] == '3' && p [ 5 ] == '2' )		6679926	0					
ANR	6680295	Condition	p [ 4 ] == '3' && p [ 5 ] == '2'	145:16:1940:1965	6679926	0	True				
ANR	6680296	AndExpression	p [ 4 ] == '3' && p [ 5 ] == '2'		6679926	0		&&			
ANR	6680297	EqualityExpression	p [ 4 ] == '3'		6679926	0		==			
ANR	6680298	ArrayIndexing	p [ 4 ]		6679926	0					
ANR	6680299	Identifier	p		6679926	0					
ANR	6680300	PrimaryExpression	4		6679926	1					
ANR	6680301	PrimaryExpression	'3'		6679926	1					
ANR	6680302	EqualityExpression	p [ 5 ] == '2'		6679926	1		==			
ANR	6680303	ArrayIndexing	p [ 5 ]		6679926	0					
ANR	6680304	Identifier	p		6679926	0					
ANR	6680305	PrimaryExpression	5		6679926	1					
ANR	6680306	PrimaryExpression	'2'		6679926	1					
ANR	6680307	ExpressionStatement	priv . orig_sizeflag |= AFLAG	147:2:1971:1998	6679926	1	True				
ANR	6680308	AssignmentExpression	priv . orig_sizeflag |= AFLAG		6679926	0		|=			
ANR	6680309	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680310	Identifier	priv		6679926	0					
ANR	6680311	Identifier	orig_sizeflag		6679926	1					
ANR	6680312	Identifier	AFLAG		6679926	1					
ANR	6680313	ElseStatement	else		6679926	0					
ANR	6680314	IfStatement	"if ( strncmp ( p , ""data"" , 4 ) == 0 )"		6679926	0					
ANR	6680315	Condition	"strncmp ( p , ""data"" , 4 ) == 0"	153:15:2028:2054	6679926	0	True				
ANR	6680316	EqualityExpression	"strncmp ( p , ""data"" , 4 ) == 0"		6679926	0		==			
ANR	6680317	CallExpression	"strncmp ( p , ""data"" , 4 )"		6679926	0					
ANR	6680318	Callee	strncmp		6679926	0					
ANR	6680319	Identifier	strncmp		6679926	0					
ANR	6680320	ArgumentList	p		6679926	1					
ANR	6680321	Argument	p		6679926	0					
ANR	6680322	Identifier	p		6679926	0					
ANR	6680323	Argument	"""data"""		6679926	1					
ANR	6680324	PrimaryExpression	"""data"""		6679926	0					
ANR	6680325	Argument	4		6679926	2					
ANR	6680326	PrimaryExpression	4		6679926	0					
ANR	6680327	PrimaryExpression	0		6679926	1					
ANR	6680328	CompoundStatement		153:1:2009:2009	6679926	1					
ANR	6680329	IfStatement	if ( p [ 4 ] == '1' && p [ 5 ] == '6' )		6679926	0					
ANR	6680330	Condition	p [ 4 ] == '1' && p [ 5 ] == '6'	157:7:2069:2094	6679926	0	True				
ANR	6680331	AndExpression	p [ 4 ] == '1' && p [ 5 ] == '6'		6679926	0		&&			
ANR	6680332	EqualityExpression	p [ 4 ] == '1'		6679926	0		==			
ANR	6680333	ArrayIndexing	p [ 4 ]		6679926	0					
ANR	6680334	Identifier	p		6679926	0					
ANR	6680335	PrimaryExpression	4		6679926	1					
ANR	6680336	PrimaryExpression	'1'		6679926	1					
ANR	6680337	EqualityExpression	p [ 5 ] == '6'		6679926	1		==			
ANR	6680338	ArrayIndexing	p [ 5 ]		6679926	0					
ANR	6680339	Identifier	p		6679926	0					
ANR	6680340	PrimaryExpression	5		6679926	1					
ANR	6680341	PrimaryExpression	'6'		6679926	1					
ANR	6680342	ExpressionStatement	priv . orig_sizeflag &= ~DFLAG	159:5:2103:2131	6679926	1	True				
ANR	6680343	AssignmentExpression	priv . orig_sizeflag &= ~DFLAG		6679926	0		&=			
ANR	6680344	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680345	Identifier	priv		6679926	0					
ANR	6680346	Identifier	orig_sizeflag		6679926	1					
ANR	6680347	Identifier	~DFLAG		6679926	1					
ANR	6680348	ElseStatement	else		6679926	0					
ANR	6680349	IfStatement	if ( p [ 4 ] == '3' && p [ 5 ] == '2' )		6679926	0					
ANR	6680350	Condition	p [ 4 ] == '3' && p [ 5 ] == '2'	161:12:2146:2171	6679926	0	True				
ANR	6680351	AndExpression	p [ 4 ] == '3' && p [ 5 ] == '2'		6679926	0		&&			
ANR	6680352	EqualityExpression	p [ 4 ] == '3'		6679926	0		==			
ANR	6680353	ArrayIndexing	p [ 4 ]		6679926	0					
ANR	6680354	Identifier	p		6679926	0					
ANR	6680355	PrimaryExpression	4		6679926	1					
ANR	6680356	PrimaryExpression	'3'		6679926	1					
ANR	6680357	EqualityExpression	p [ 5 ] == '2'		6679926	1		==			
ANR	6680358	ArrayIndexing	p [ 5 ]		6679926	0					
ANR	6680359	Identifier	p		6679926	0					
ANR	6680360	PrimaryExpression	5		6679926	1					
ANR	6680361	PrimaryExpression	'2'		6679926	1					
ANR	6680362	ExpressionStatement	priv . orig_sizeflag |= DFLAG	163:5:2180:2207	6679926	1	True				
ANR	6680363	AssignmentExpression	priv . orig_sizeflag |= DFLAG		6679926	0		|=			
ANR	6680364	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680365	Identifier	priv		6679926	0					
ANR	6680366	Identifier	orig_sizeflag		6679926	1					
ANR	6680367	Identifier	DFLAG		6679926	1					
ANR	6680368	ElseStatement	else		6679926	0					
ANR	6680369	IfStatement	"if ( strncmp ( p , ""suffix"" , 6 ) == 0 )"		6679926	0					
ANR	6680370	Condition	"strncmp ( p , ""suffix"" , 6 ) == 0"	167:15:2229:2257	6679926	0	True				
ANR	6680371	EqualityExpression	"strncmp ( p , ""suffix"" , 6 ) == 0"		6679926	0		==			
ANR	6680372	CallExpression	"strncmp ( p , ""suffix"" , 6 )"		6679926	0					
ANR	6680373	Callee	strncmp		6679926	0					
ANR	6680374	Identifier	strncmp		6679926	0					
ANR	6680375	ArgumentList	p		6679926	1					
ANR	6680376	Argument	p		6679926	0					
ANR	6680377	Identifier	p		6679926	0					
ANR	6680378	Argument	"""suffix"""		6679926	1					
ANR	6680379	PrimaryExpression	"""suffix"""		6679926	0					
ANR	6680380	Argument	6		6679926	2					
ANR	6680381	PrimaryExpression	6		6679926	0					
ANR	6680382	PrimaryExpression	0		6679926	1					
ANR	6680383	ExpressionStatement	priv . orig_sizeflag |= SUFFIX_ALWAYS	169:1:2262:2297	6679926	1	True				
ANR	6680384	AssignmentExpression	priv . orig_sizeflag |= SUFFIX_ALWAYS		6679926	0		|=			
ANR	6680385	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680386	Identifier	priv		6679926	0					
ANR	6680387	Identifier	orig_sizeflag		6679926	1					
ANR	6680388	Identifier	SUFFIX_ALWAYS		6679926	1					
ANR	6680389	ExpressionStatement	"p = strchr ( p , ',' )"	173:6:2308:2327	6679926	1	True				
ANR	6680390	AssignmentExpression	"p = strchr ( p , ',' )"		6679926	0		=			
ANR	6680391	Identifier	p		6679926	0					
ANR	6680392	CallExpression	"strchr ( p , ',' )"		6679926	1					
ANR	6680393	Callee	strchr		6679926	0					
ANR	6680394	Identifier	strchr		6679926	0					
ANR	6680395	ArgumentList	p		6679926	1					
ANR	6680396	Argument	p		6679926	0					
ANR	6680397	Identifier	p		6679926	0					
ANR	6680398	Argument	"','"		6679926	1					
ANR	6680399	PrimaryExpression	"','"		6679926	0					
ANR	6680400	IfStatement	if ( p != NULL )		6679926	2					
ANR	6680401	Condition	p != NULL	175:10:2340:2348	6679926	0	True				
ANR	6680402	EqualityExpression	p != NULL		6679926	0		!=			
ANR	6680403	Identifier	p		6679926	0					
ANR	6680404	Identifier	NULL		6679926	1					
ANR	6680405	ExpressionStatement	p ++	177:1:2353:2356	6679926	1	True				
ANR	6680406	PostIncDecOperationExpression	p ++		6679926	0					
ANR	6680407	Identifier	p		6679926	0					
ANR	6680408	IncDec	++		6679926	1					
ANR	6680409	IfStatement	if ( intel_syntax )		6679926	15					
ANR	6680410	Condition	intel_syntax	183:6:2374:2385	6679926	0	True				
ANR	6680411	Identifier	intel_syntax		6679926	0					
ANR	6680412	CompoundStatement		183:4:2343:2343	6679926	1					
ANR	6680413	ExpressionStatement	names64 = intel_names64	187:6:2402:2425	6679926	0	True				
ANR	6680414	AssignmentExpression	names64 = intel_names64		6679926	0		=			
ANR	6680415	Identifier	names64		6679926	0					
ANR	6680416	Identifier	intel_names64		6679926	1					
ANR	6680417	ExpressionStatement	names32 = intel_names32	189:6:2434:2457	6679926	1	True				
ANR	6680418	AssignmentExpression	names32 = intel_names32		6679926	0		=			
ANR	6680419	Identifier	names32		6679926	0					
ANR	6680420	Identifier	intel_names32		6679926	1					
ANR	6680421	ExpressionStatement	names16 = intel_names16	191:6:2466:2489	6679926	2	True				
ANR	6680422	AssignmentExpression	names16 = intel_names16		6679926	0		=			
ANR	6680423	Identifier	names16		6679926	0					
ANR	6680424	Identifier	intel_names16		6679926	1					
ANR	6680425	ExpressionStatement	names8 = intel_names8	193:6:2498:2519	6679926	3	True				
ANR	6680426	AssignmentExpression	names8 = intel_names8		6679926	0		=			
ANR	6680427	Identifier	names8		6679926	0					
ANR	6680428	Identifier	intel_names8		6679926	1					
ANR	6680429	ExpressionStatement	names8rex = intel_names8rex	195:6:2528:2555	6679926	4	True				
ANR	6680430	AssignmentExpression	names8rex = intel_names8rex		6679926	0		=			
ANR	6680431	Identifier	names8rex		6679926	0					
ANR	6680432	Identifier	intel_names8rex		6679926	1					
ANR	6680433	ExpressionStatement	names_seg = intel_names_seg	197:6:2564:2591	6679926	5	True				
ANR	6680434	AssignmentExpression	names_seg = intel_names_seg		6679926	0		=			
ANR	6680435	Identifier	names_seg		6679926	0					
ANR	6680436	Identifier	intel_names_seg		6679926	1					
ANR	6680437	ExpressionStatement	index16 = intel_index16	199:6:2600:2623	6679926	6	True				
ANR	6680438	AssignmentExpression	index16 = intel_index16		6679926	0		=			
ANR	6680439	Identifier	index16		6679926	0					
ANR	6680440	Identifier	intel_index16		6679926	1					
ANR	6680441	ExpressionStatement	open_char = '['	201:6:2632:2647	6679926	7	True				
ANR	6680442	AssignmentExpression	open_char = '['		6679926	0		=			
ANR	6680443	Identifier	open_char		6679926	0					
ANR	6680444	PrimaryExpression	'['		6679926	1					
ANR	6680445	ExpressionStatement	close_char = ']'	203:6:2656:2672	6679926	8	True				
ANR	6680446	AssignmentExpression	close_char = ']'		6679926	0		=			
ANR	6680447	Identifier	close_char		6679926	0					
ANR	6680448	PrimaryExpression	']'		6679926	1					
ANR	6680449	ExpressionStatement	separator_char = '+'	205:6:2681:2701	6679926	9	True				
ANR	6680450	AssignmentExpression	separator_char = '+'		6679926	0		=			
ANR	6680451	Identifier	separator_char		6679926	0					
ANR	6680452	PrimaryExpression	'+'		6679926	1					
ANR	6680453	ExpressionStatement	scale_char = '*'	207:6:2710:2726	6679926	10	True				
ANR	6680454	AssignmentExpression	scale_char = '*'		6679926	0		=			
ANR	6680455	Identifier	scale_char		6679926	0					
ANR	6680456	PrimaryExpression	'*'		6679926	1					
ANR	6680457	ElseStatement	else		6679926	0					
ANR	6680458	CompoundStatement		211:4:2698:2698	6679926	0					
ANR	6680459	ExpressionStatement	names64 = att_names64	215:6:2757:2778	6679926	0	True				
ANR	6680460	AssignmentExpression	names64 = att_names64		6679926	0		=			
ANR	6680461	Identifier	names64		6679926	0					
ANR	6680462	Identifier	att_names64		6679926	1					
ANR	6680463	ExpressionStatement	names32 = att_names32	217:6:2787:2808	6679926	1	True				
ANR	6680464	AssignmentExpression	names32 = att_names32		6679926	0		=			
ANR	6680465	Identifier	names32		6679926	0					
ANR	6680466	Identifier	att_names32		6679926	1					
ANR	6680467	ExpressionStatement	names16 = att_names16	219:6:2817:2838	6679926	2	True				
ANR	6680468	AssignmentExpression	names16 = att_names16		6679926	0		=			
ANR	6680469	Identifier	names16		6679926	0					
ANR	6680470	Identifier	att_names16		6679926	1					
ANR	6680471	ExpressionStatement	names8 = att_names8	221:6:2847:2866	6679926	3	True				
ANR	6680472	AssignmentExpression	names8 = att_names8		6679926	0		=			
ANR	6680473	Identifier	names8		6679926	0					
ANR	6680474	Identifier	att_names8		6679926	1					
ANR	6680475	ExpressionStatement	names8rex = att_names8rex	223:6:2875:2900	6679926	4	True				
ANR	6680476	AssignmentExpression	names8rex = att_names8rex		6679926	0		=			
ANR	6680477	Identifier	names8rex		6679926	0					
ANR	6680478	Identifier	att_names8rex		6679926	1					
ANR	6680479	ExpressionStatement	names_seg = att_names_seg	225:6:2909:2934	6679926	5	True				
ANR	6680480	AssignmentExpression	names_seg = att_names_seg		6679926	0		=			
ANR	6680481	Identifier	names_seg		6679926	0					
ANR	6680482	Identifier	att_names_seg		6679926	1					
ANR	6680483	ExpressionStatement	index16 = att_index16	227:6:2943:2964	6679926	6	True				
ANR	6680484	AssignmentExpression	index16 = att_index16		6679926	0		=			
ANR	6680485	Identifier	index16		6679926	0					
ANR	6680486	Identifier	att_index16		6679926	1					
ANR	6680487	ExpressionStatement	open_char = '('	229:6:2973:2988	6679926	7	True				
ANR	6680488	AssignmentExpression	open_char = '('		6679926	0		=			
ANR	6680489	Identifier	open_char		6679926	0					
ANR	6680490	PrimaryExpression	'('		6679926	1					
ANR	6680491	ExpressionStatement	close_char = ')'	231:6:2997:3014	6679926	8	True				
ANR	6680492	AssignmentExpression	close_char = ')'		6679926	0		=			
ANR	6680493	Identifier	close_char		6679926	0					
ANR	6680494	PrimaryExpression	')'		6679926	1					
ANR	6680495	ExpressionStatement	"separator_char = ','"	233:6:3023:3043	6679926	9	True				
ANR	6680496	AssignmentExpression	"separator_char = ','"		6679926	0		=			
ANR	6680497	Identifier	separator_char		6679926	0					
ANR	6680498	PrimaryExpression	"','"		6679926	1					
ANR	6680499	ExpressionStatement	"scale_char = ','"	235:6:3052:3068	6679926	10	True				
ANR	6680500	AssignmentExpression	"scale_char = ','"		6679926	0		=			
ANR	6680501	Identifier	scale_char		6679926	0					
ANR	6680502	PrimaryExpression	"','"		6679926	1					
ANR	6680503	ExpressionStatement	info -> bytes_per_line = 7	245:2:3213:3237	6679926	16	True				
ANR	6680504	AssignmentExpression	info -> bytes_per_line = 7		6679926	0		=			
ANR	6680505	PtrMemberAccess	info -> bytes_per_line		6679926	0					
ANR	6680506	Identifier	info		6679926	0					
ANR	6680507	Identifier	bytes_per_line		6679926	1					
ANR	6680508	PrimaryExpression	7		6679926	1					
ANR	6680509	ExpressionStatement	info -> private_data = & priv	249:2:3244:3270	6679926	17	True				
ANR	6680510	AssignmentExpression	info -> private_data = & priv		6679926	0		=			
ANR	6680511	PtrMemberAccess	info -> private_data		6679926	0					
ANR	6680512	Identifier	info		6679926	0					
ANR	6680513	Identifier	private_data		6679926	1					
ANR	6680514	UnaryOperationExpression	& priv		6679926	1					
ANR	6680515	UnaryOperator	&		6679926	0					
ANR	6680516	Identifier	priv		6679926	1					
ANR	6680517	ExpressionStatement	priv . max_fetched = priv . the_buffer	251:2:3275:3309	6679926	18	True				
ANR	6680518	AssignmentExpression	priv . max_fetched = priv . the_buffer		6679926	0		=			
ANR	6680519	MemberAccess	priv . max_fetched		6679926	0					
ANR	6680520	Identifier	priv		6679926	0					
ANR	6680521	Identifier	max_fetched		6679926	1					
ANR	6680522	MemberAccess	priv . the_buffer		6679926	1					
ANR	6680523	Identifier	priv		6679926	0					
ANR	6680524	Identifier	the_buffer		6679926	1					
ANR	6680525	ExpressionStatement	priv . insn_start = pc	253:2:3314:3334	6679926	19	True				
ANR	6680526	AssignmentExpression	priv . insn_start = pc		6679926	0		=			
ANR	6680527	MemberAccess	priv . insn_start		6679926	0					
ANR	6680528	Identifier	priv		6679926	0					
ANR	6680529	Identifier	insn_start		6679926	1					
ANR	6680530	Identifier	pc		6679926	1					
ANR	6680531	ExpressionStatement	obuf [ 0 ] = 0	257:2:3341:3352	6679926	20	True				
ANR	6680532	AssignmentExpression	obuf [ 0 ] = 0		6679926	0		=			
ANR	6680533	ArrayIndexing	obuf [ 0 ]		6679926	0					
ANR	6680534	Identifier	obuf		6679926	0					
ANR	6680535	PrimaryExpression	0		6679926	1					
ANR	6680536	PrimaryExpression	0		6679926	1					
ANR	6680537	ForStatement	for ( i = 0 ; i < MAX_OPERANDS ; ++ i )		6679926	21					
ANR	6680538	ForInit	i = 0 ;	259:7:3362:3367	6679926	0	True				
ANR	6680539	AssignmentExpression	i = 0		6679926	0		=			
ANR	6680540	Identifier	i		6679926	0					
ANR	6680541	PrimaryExpression	0		6679926	1					
ANR	6680542	Condition	i < MAX_OPERANDS	259:14:3369:3384	6679926	1	True				
ANR	6680543	RelationalExpression	i < MAX_OPERANDS		6679926	0		<			
ANR	6680544	Identifier	i		6679926	0					
ANR	6680545	Identifier	MAX_OPERANDS		6679926	1					
ANR	6680546	UnaryExpression	++ i	259:32:3387:3389	6679926	2	True				
ANR	6680547	IncDec	++		6679926	0					
ANR	6680548	Identifier	i		6679926	1					
ANR	6680549	CompoundStatement		259:4:3347:3347	6679926	3					
ANR	6680550	ExpressionStatement	op_out [ i ] [ 0 ] = 0	263:6:3406:3422	6679926	0	True				
ANR	6680551	AssignmentExpression	op_out [ i ] [ 0 ] = 0		6679926	0		=			
ANR	6680552	ArrayIndexing	op_out [ i ] [ 0 ]		6679926	0					
ANR	6680553	ArrayIndexing	op_out [ i ]		6679926	0					
ANR	6680554	Identifier	op_out		6679926	0					
ANR	6680555	Identifier	i		6679926	1					
ANR	6680556	PrimaryExpression	0		6679926	1					
ANR	6680557	PrimaryExpression	0		6679926	1					
ANR	6680558	ExpressionStatement	op_index [ i ] = - 1	265:6:3431:3447	6679926	1	True				
ANR	6680559	AssignmentExpression	op_index [ i ] = - 1		6679926	0		=			
ANR	6680560	ArrayIndexing	op_index [ i ]		6679926	0					
ANR	6680561	Identifier	op_index		6679926	0					
ANR	6680562	Identifier	i		6679926	1					
ANR	6680563	UnaryOperationExpression	- 1		6679926	1					
ANR	6680564	UnaryOperator	-		6679926	0					
ANR	6680565	PrimaryExpression	1		6679926	1					
ANR	6680566	ExpressionStatement	the_info = info	271:2:3461:3476	6679926	22	True				
ANR	6680567	AssignmentExpression	the_info = info		6679926	0		=			
ANR	6680568	Identifier	the_info		6679926	0					
ANR	6680569	Identifier	info		6679926	1					
ANR	6680570	ExpressionStatement	start_pc = pc	273:2:3481:3494	6679926	23	True				
ANR	6680571	AssignmentExpression	start_pc = pc		6679926	0		=			
ANR	6680572	Identifier	start_pc		6679926	0					
ANR	6680573	Identifier	pc		6679926	1					
ANR	6680574	ExpressionStatement	start_codep = priv . the_buffer	275:2:3499:3528	6679926	24	True				
ANR	6680575	AssignmentExpression	start_codep = priv . the_buffer		6679926	0		=			
ANR	6680576	Identifier	start_codep		6679926	0					
ANR	6680577	MemberAccess	priv . the_buffer		6679926	1					
ANR	6680578	Identifier	priv		6679926	0					
ANR	6680579	Identifier	the_buffer		6679926	1					
ANR	6680580	ExpressionStatement	codep = priv . the_buffer	277:2:3533:3556	6679926	25	True				
ANR	6680581	AssignmentExpression	codep = priv . the_buffer		6679926	0		=			
ANR	6680582	Identifier	codep		6679926	0					
ANR	6680583	MemberAccess	priv . the_buffer		6679926	1					
ANR	6680584	Identifier	priv		6679926	0					
ANR	6680585	Identifier	the_buffer		6679926	1					
ANR	6680586	IfStatement	"if ( sigsetjmp ( priv . bailout , 0 ) != 0 )"		6679926	26					
ANR	6680587	Condition	"sigsetjmp ( priv . bailout , 0 ) != 0"	281:6:3567:3597	6679926	0	True				
ANR	6680588	EqualityExpression	"sigsetjmp ( priv . bailout , 0 ) != 0"		6679926	0		!=			
ANR	6680589	CallExpression	"sigsetjmp ( priv . bailout , 0 )"		6679926	0					
ANR	6680590	Callee	sigsetjmp		6679926	0					
ANR	6680591	Identifier	sigsetjmp		6679926	0					
ANR	6680592	ArgumentList	priv . bailout		6679926	1					
ANR	6680593	Argument	priv . bailout		6679926	0					
ANR	6680594	MemberAccess	priv . bailout		6679926	0					
ANR	6680595	Identifier	priv		6679926	0					
ANR	6680596	Identifier	bailout		6679926	1					
ANR	6680597	Argument	0		6679926	1					
ANR	6680598	PrimaryExpression	0		6679926	0					
ANR	6680599	PrimaryExpression	0		6679926	1					
ANR	6680600	CompoundStatement		283:6:3564:3580	6679926	1					
ANR	6680601	IdentifierDeclStatement	const char * name ;	285:6:3614:3630	6679926	0	True				
ANR	6680602	IdentifierDecl	* name		6679926	0					
ANR	6680603	IdentifierDeclType	const char *		6679926	0					
ANR	6680604	Identifier	name		6679926	1					
ANR	6680605	IfStatement	if ( codep > priv . the_buffer )		6679926	1					
ANR	6680606	Condition	codep > priv . the_buffer	295:10:3842:3864	6679926	0	True				
ANR	6680607	RelationalExpression	codep > priv . the_buffer		6679926	0		>			
ANR	6680608	Identifier	codep		6679926	0					
ANR	6680609	MemberAccess	priv . the_buffer		6679926	1					
ANR	6680610	Identifier	priv		6679926	0					
ANR	6680611	Identifier	the_buffer		6679926	1					
ANR	6680612	CompoundStatement		295:1:3819:3819	6679926	1					
ANR	6680613	ExpressionStatement	"name = prefix_name ( priv . the_buffer [ 0 ] , priv . orig_sizeflag )"	299:3:3875:3934	6679926	0	True				
ANR	6680614	AssignmentExpression	"name = prefix_name ( priv . the_buffer [ 0 ] , priv . orig_sizeflag )"		6679926	0		=			
ANR	6680615	Identifier	name		6679926	0					
ANR	6680616	CallExpression	"prefix_name ( priv . the_buffer [ 0 ] , priv . orig_sizeflag )"		6679926	1					
ANR	6680617	Callee	prefix_name		6679926	0					
ANR	6680618	Identifier	prefix_name		6679926	0					
ANR	6680619	ArgumentList	priv . the_buffer [ 0 ]		6679926	1					
ANR	6680620	Argument	priv . the_buffer [ 0 ]		6679926	0					
ANR	6680621	ArrayIndexing	priv . the_buffer [ 0 ]		6679926	0					
ANR	6680622	MemberAccess	priv . the_buffer		6679926	0					
ANR	6680623	Identifier	priv		6679926	0					
ANR	6680624	Identifier	the_buffer		6679926	1					
ANR	6680625	PrimaryExpression	0		6679926	1					
ANR	6680626	Argument	priv . orig_sizeflag		6679926	1					
ANR	6680627	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680628	Identifier	priv		6679926	0					
ANR	6680629	Identifier	orig_sizeflag		6679926	1					
ANR	6680630	IfStatement	if ( name != NULL )		6679926	1					
ANR	6680631	Condition	name != NULL	301:7:3944:3955	6679926	0	True				
ANR	6680632	EqualityExpression	name != NULL		6679926	0		!=			
ANR	6680633	Identifier	name		6679926	0					
ANR	6680634	Identifier	NULL		6679926	1					
ANR	6680635	ExpressionStatement	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , name )"	303:5:3964:4012	6679926	1	True				
ANR	6680636	CallExpression	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , name )"		6679926	0					
ANR	6680637	Callee	* info -> fprintf_func		6679926	0					
ANR	6680638	UnaryOperationExpression	* info -> fprintf_func		6679926	0					
ANR	6680639	UnaryOperator	*		6679926	0					
ANR	6680640	PtrMemberAccess	info -> fprintf_func		6679926	1					
ANR	6680641	Identifier	info		6679926	0					
ANR	6680642	Identifier	fprintf_func		6679926	1					
ANR	6680643	ArgumentList	info -> stream		6679926	1					
ANR	6680644	Argument	info -> stream		6679926	0					
ANR	6680645	PtrMemberAccess	info -> stream		6679926	0					
ANR	6680646	Identifier	info		6679926	0					
ANR	6680647	Identifier	stream		6679926	1					
ANR	6680648	Argument	"""%s"""		6679926	1					
ANR	6680649	PrimaryExpression	"""%s"""		6679926	0					
ANR	6680650	Argument	name		6679926	2					
ANR	6680651	Identifier	name		6679926	0					
ANR	6680652	ElseStatement	else		6679926	0					
ANR	6680653	CompoundStatement		305:5:3979:3979	6679926	0					
ANR	6680654	ExpressionStatement	"( * info -> fprintf_func ) ( info -> stream , "".byte 0x%x"" , ( unsigned int ) priv . the_buffer [ 0 ] )"	311:7:4104:4199	6679926	0	True				
ANR	6680655	CallExpression	"( * info -> fprintf_func ) ( info -> stream , "".byte 0x%x"" , ( unsigned int ) priv . the_buffer [ 0 ] )"		6679926	0					
ANR	6680656	Callee	* info -> fprintf_func		6679926	0					
ANR	6680657	UnaryOperationExpression	* info -> fprintf_func		6679926	0					
ANR	6680658	UnaryOperator	*		6679926	0					
ANR	6680659	PtrMemberAccess	info -> fprintf_func		6679926	1					
ANR	6680660	Identifier	info		6679926	0					
ANR	6680661	Identifier	fprintf_func		6679926	1					
ANR	6680662	ArgumentList	info -> stream		6679926	1					
ANR	6680663	Argument	info -> stream		6679926	0					
ANR	6680664	PtrMemberAccess	info -> stream		6679926	0					
ANR	6680665	Identifier	info		6679926	0					
ANR	6680666	Identifier	stream		6679926	1					
ANR	6680667	Argument	""".byte 0x%x"""		6679926	1					
ANR	6680668	PrimaryExpression	""".byte 0x%x"""		6679926	0					
ANR	6680669	Argument	( unsigned int ) priv . the_buffer [ 0 ]		6679926	2					
ANR	6680670	CastExpression	( unsigned int ) priv . the_buffer [ 0 ]		6679926	0					
ANR	6680671	CastTarget	unsigned int		6679926	0					
ANR	6680672	ArrayIndexing	priv . the_buffer [ 0 ]		6679926	1					
ANR	6680673	MemberAccess	priv . the_buffer		6679926	0					
ANR	6680674	Identifier	priv		6679926	0					
ANR	6680675	Identifier	the_buffer		6679926	1					
ANR	6680676	PrimaryExpression	0		6679926	1					
ANR	6680677	ReturnStatement	return 1 ;	319:3:4215:4223	6679926	2	True				
ANR	6680678	PrimaryExpression	1		6679926	0					
ANR	6680679	ReturnStatement	return - 1 ;	325:6:4238:4247	6679926	2	True				
ANR	6680680	UnaryOperationExpression	- 1		6679926	0					
ANR	6680681	UnaryOperator	-		6679926	0					
ANR	6680682	PrimaryExpression	1		6679926	1					
ANR	6680683	ExpressionStatement	obufp = obuf	331:2:4261:4273	6679926	27	True				
ANR	6680684	AssignmentExpression	obufp = obuf		6679926	0		=			
ANR	6680685	Identifier	obufp		6679926	0					
ANR	6680686	Identifier	obuf		6679926	1					
ANR	6680687	ExpressionStatement	ckprefix ( )	333:2:4278:4289	6679926	28	True				
ANR	6680688	CallExpression	ckprefix ( )		6679926	0					
ANR	6680689	Callee	ckprefix		6679926	0					
ANR	6680690	Identifier	ckprefix		6679926	0					
ANR	6680691	ArgumentList			6679926	1					
ANR	6680692	ExpressionStatement	ckvexprefix ( )	335:2:4294:4308	6679926	29	True				
ANR	6680693	CallExpression	ckvexprefix ( )		6679926	0					
ANR	6680694	Callee	ckvexprefix		6679926	0					
ANR	6680695	Identifier	ckvexprefix		6679926	0					
ANR	6680696	ArgumentList			6679926	1					
ANR	6680697	ExpressionStatement	insn_codep = codep	339:2:4315:4333	6679926	30	True				
ANR	6680698	AssignmentExpression	insn_codep = codep		6679926	0		=			
ANR	6680699	Identifier	insn_codep		6679926	0					
ANR	6680700	Identifier	codep		6679926	1					
ANR	6680701	ExpressionStatement	sizeflag = priv . orig_sizeflag	341:2:4338:4367	6679926	31	True				
ANR	6680702	AssignmentExpression	sizeflag = priv . orig_sizeflag		6679926	0		=			
ANR	6680703	Identifier	sizeflag		6679926	0					
ANR	6680704	MemberAccess	priv . orig_sizeflag		6679926	1					
ANR	6680705	Identifier	priv		6679926	0					
ANR	6680706	Identifier	orig_sizeflag		6679926	1					
ANR	6680707	ExpressionStatement	"fetch_data ( info , codep + 1 )"	345:2:4374:4401	6679926	32	True				
ANR	6680708	CallExpression	"fetch_data ( info , codep + 1 )"		6679926	0					
ANR	6680709	Callee	fetch_data		6679926	0					
ANR	6680710	Identifier	fetch_data		6679926	0					
ANR	6680711	ArgumentList	info		6679926	1					
ANR	6680712	Argument	info		6679926	0					
ANR	6680713	Identifier	info		6679926	0					
ANR	6680714	Argument	codep + 1		6679926	1					
ANR	6680715	AdditiveExpression	codep + 1		6679926	0		+			
ANR	6680716	Identifier	codep		6679926	0					
ANR	6680717	PrimaryExpression	1		6679926	1					
ANR	6680718	ExpressionStatement	two_source_ops = ( * codep == 0x62 ) || ( * codep == 0xc8 )	347:2:4406:4459	6679926	33	True				
ANR	6680719	AssignmentExpression	two_source_ops = ( * codep == 0x62 ) || ( * codep == 0xc8 )		6679926	0		=			
ANR	6680720	Identifier	two_source_ops		6679926	0					
ANR	6680721	OrExpression	( * codep == 0x62 ) || ( * codep == 0xc8 )		6679926	1		||			
ANR	6680722	EqualityExpression	* codep == 0x62		6679926	0		==			
ANR	6680723	UnaryOperationExpression	* codep		6679926	0					
ANR	6680724	UnaryOperator	*		6679926	0					
ANR	6680725	Identifier	codep		6679926	1					
ANR	6680726	PrimaryExpression	0x62		6679926	1					
ANR	6680727	EqualityExpression	* codep == 0xc8		6679926	1		==			
ANR	6680728	UnaryOperationExpression	* codep		6679926	0					
ANR	6680729	UnaryOperator	*		6679926	0					
ANR	6680730	Identifier	codep		6679926	1					
ANR	6680731	PrimaryExpression	0xc8		6679926	1					
ANR	6680732	IfStatement	if ( ( ( prefixes & PREFIX_FWAIT ) && ( ( * codep < 0xd8 ) || ( * codep > 0xdf ) ) ) || ( rex && rex_used ) )		6679926	34					
ANR	6680733	Condition	( ( prefixes & PREFIX_FWAIT ) && ( ( * codep < 0xd8 ) || ( * codep > 0xdf ) ) ) || ( rex && rex_used )	351:6:4470:4572	6679926	0	True				
ANR	6680734	OrExpression	( ( prefixes & PREFIX_FWAIT ) && ( ( * codep < 0xd8 ) || ( * codep > 0xdf ) ) ) || ( rex && rex_used )		6679926	0		||			
ANR	6680735	AndExpression	( prefixes & PREFIX_FWAIT ) && ( ( * codep < 0xd8 ) || ( * codep > 0xdf ) )		6679926	0		&&			
ANR	6680736	BitAndExpression	prefixes & PREFIX_FWAIT		6679926	0		&			
ANR	6680737	Identifier	prefixes		6679926	0					
ANR	6680738	Identifier	PREFIX_FWAIT		6679926	1					
ANR	6680739	OrExpression	( * codep < 0xd8 ) || ( * codep > 0xdf )		6679926	1		||			
ANR	6680740	RelationalExpression	* codep < 0xd8		6679926	0		<			
ANR	6680741	UnaryOperationExpression	* codep		6679926	0					
ANR	6680742	UnaryOperator	*		6679926	0					
ANR	6680743	Identifier	codep		6679926	1					
ANR	6680744	PrimaryExpression	0xd8		6679926	1					
ANR	6680745	RelationalExpression	* codep > 0xdf		6679926	1		>			
ANR	6680746	UnaryOperationExpression	* codep		6679926	0					
ANR	6680747	UnaryOperator	*		6679926	0					
ANR	6680748	Identifier	codep		6679926	1					
ANR	6680749	PrimaryExpression	0xdf		6679926	1					
ANR	6680750	AndExpression	rex && rex_used		6679926	1		&&			
ANR	6680751	Identifier	rex		6679926	0					
ANR	6680752	Identifier	rex_used		6679926	1					
ANR	6680753	CompoundStatement		357:6:4539:4555	6679926	1					
ANR	6680754	IdentifierDeclStatement	const char * name ;	359:6:4589:4605	6679926	0	True				
ANR	6680755	IdentifierDecl	* name		6679926	0					
ANR	6680756	IdentifierDeclType	const char *		6679926	0					
ANR	6680757	Identifier	name		6679926	1					
ANR	6680758	ExpressionStatement	"name = prefix_name ( priv . the_buffer [ 0 ] , priv . orig_sizeflag )"	367:6:4743:4802	6679926	1	True				
ANR	6680759	AssignmentExpression	"name = prefix_name ( priv . the_buffer [ 0 ] , priv . orig_sizeflag )"		6679926	0		=			
ANR	6680760	Identifier	name		6679926	0					
ANR	6680761	CallExpression	"prefix_name ( priv . the_buffer [ 0 ] , priv . orig_sizeflag )"		6679926	1					
ANR	6680762	Callee	prefix_name		6679926	0					
ANR	6680763	Identifier	prefix_name		6679926	0					
ANR	6680764	ArgumentList	priv . the_buffer [ 0 ]		6679926	1					
ANR	6680765	Argument	priv . the_buffer [ 0 ]		6679926	0					
ANR	6680766	ArrayIndexing	priv . the_buffer [ 0 ]		6679926	0					
ANR	6680767	MemberAccess	priv . the_buffer		6679926	0					
ANR	6680768	Identifier	priv		6679926	0					
ANR	6680769	Identifier	the_buffer		6679926	1					
ANR	6680770	PrimaryExpression	0		6679926	1					
ANR	6680771	Argument	priv . orig_sizeflag		6679926	1					
ANR	6680772	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6680773	Identifier	priv		6679926	0					
ANR	6680774	Identifier	orig_sizeflag		6679926	1					
ANR	6680775	IfStatement	if ( name == NULL )		6679926	2					
ANR	6680776	Condition	name == NULL	369:10:4815:4826	6679926	0	True				
ANR	6680777	EqualityExpression	name == NULL		6679926	0		==			
ANR	6680778	Identifier	name		6679926	0					
ANR	6680779	Identifier	NULL		6679926	1					
ANR	6680780	ExpressionStatement	name = INTERNAL_DISASSEMBLER_ERROR	371:1:4831:4865	6679926	1	True				
ANR	6680781	AssignmentExpression	name = INTERNAL_DISASSEMBLER_ERROR		6679926	0		=			
ANR	6680782	Identifier	name		6679926	0					
ANR	6680783	Identifier	INTERNAL_DISASSEMBLER_ERROR		6679926	1					
ANR	6680784	ExpressionStatement	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , name )"	373:6:4874:4922	6679926	3	True				
ANR	6680785	CallExpression	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , name )"		6679926	0					
ANR	6680786	Callee	* info -> fprintf_func		6679926	0					
ANR	6680787	UnaryOperationExpression	* info -> fprintf_func		6679926	0					
ANR	6680788	UnaryOperator	*		6679926	0					
ANR	6680789	PtrMemberAccess	info -> fprintf_func		6679926	1					
ANR	6680790	Identifier	info		6679926	0					
ANR	6680791	Identifier	fprintf_func		6679926	1					
ANR	6680792	ArgumentList	info -> stream		6679926	1					
ANR	6680793	Argument	info -> stream		6679926	0					
ANR	6680794	PtrMemberAccess	info -> stream		6679926	0					
ANR	6680795	Identifier	info		6679926	0					
ANR	6680796	Identifier	stream		6679926	1					
ANR	6680797	Argument	"""%s"""		6679926	1					
ANR	6680798	PrimaryExpression	"""%s"""		6679926	0					
ANR	6680799	Argument	name		6679926	2					
ANR	6680800	Identifier	name		6679926	0					
ANR	6680801	ReturnStatement	return 1 ;	375:6:4931:4939	6679926	4	True				
ANR	6680802	PrimaryExpression	1		6679926	0					
ANR	6680803	ExpressionStatement	op = 0	381:2:4953:4959	6679926	35	True				
ANR	6680804	AssignmentExpression	op = 0		6679926	0		=			
ANR	6680805	Identifier	op		6679926	0					
ANR	6680806	PrimaryExpression	0		6679926	1					
ANR	6680807	IfStatement	if ( prefixes & PREFIX_VEX_0F )		6679926	36					
ANR	6680808	Condition	prefixes & PREFIX_VEX_0F	383:6:4968:4991	6679926	0	True				
ANR	6680809	BitAndExpression	prefixes & PREFIX_VEX_0F		6679926	0		&			
ANR	6680810	Identifier	prefixes		6679926	0					
ANR	6680811	Identifier	PREFIX_VEX_0F		6679926	1					
ANR	6680812	CompoundStatement		383:4:4949:4949	6679926	1					
ANR	6680813	ExpressionStatement	used_prefixes |= PREFIX_VEX_0F | PREFIX_VEX_0F38 | PREFIX_VEX_0F3A	387:6:5008:5074	6679926	0	True				
ANR	6680814	AssignmentExpression	used_prefixes |= PREFIX_VEX_0F | PREFIX_VEX_0F38 | PREFIX_VEX_0F3A		6679926	0		|=			
ANR	6680815	Identifier	used_prefixes		6679926	0					
ANR	6680816	InclusiveOrExpression	PREFIX_VEX_0F | PREFIX_VEX_0F38 | PREFIX_VEX_0F3A		6679926	1		|			
ANR	6680817	Identifier	PREFIX_VEX_0F		6679926	0					
ANR	6680818	InclusiveOrExpression	PREFIX_VEX_0F38 | PREFIX_VEX_0F3A		6679926	1		|			
ANR	6680819	Identifier	PREFIX_VEX_0F38		6679926	0					
ANR	6680820	Identifier	PREFIX_VEX_0F3A		6679926	1					
ANR	6680821	IfStatement	if ( prefixes & PREFIX_VEX_0F38 )		6679926	1					
ANR	6680822	Condition	prefixes & PREFIX_VEX_0F38	389:10:5087:5112	6679926	0	True				
ANR	6680823	BitAndExpression	prefixes & PREFIX_VEX_0F38		6679926	0		&			
ANR	6680824	Identifier	prefixes		6679926	0					
ANR	6680825	Identifier	PREFIX_VEX_0F38		6679926	1					
ANR	6680826	ExpressionStatement	threebyte = 0x38	391:8:5124:5140	6679926	1	True				
ANR	6680827	AssignmentExpression	threebyte = 0x38		6679926	0		=			
ANR	6680828	Identifier	threebyte		6679926	0					
ANR	6680829	PrimaryExpression	0x38		6679926	1					
ANR	6680830	ElseStatement	else		6679926	0					
ANR	6680831	IfStatement	if ( prefixes & PREFIX_VEX_0F3A )		6679926	0					
ANR	6680832	Condition	prefixes & PREFIX_VEX_0F3A	393:15:5158:5183	6679926	0	True				
ANR	6680833	BitAndExpression	prefixes & PREFIX_VEX_0F3A		6679926	0		&			
ANR	6680834	Identifier	prefixes		6679926	0					
ANR	6680835	Identifier	PREFIX_VEX_0F3A		6679926	1					
ANR	6680836	ExpressionStatement	threebyte = 0x3a	395:8:5195:5211	6679926	1	True				
ANR	6680837	AssignmentExpression	threebyte = 0x3a		6679926	0		=			
ANR	6680838	Identifier	threebyte		6679926	0					
ANR	6680839	PrimaryExpression	0x3a		6679926	1					
ANR	6680840	ElseStatement	else		6679926	0					
ANR	6680841	ExpressionStatement	threebyte = * codep ++	399:8:5234:5254	6679926	0	True				
ANR	6680842	AssignmentExpression	threebyte = * codep ++		6679926	0		=			
ANR	6680843	Identifier	threebyte		6679926	0					
ANR	6680844	UnaryOperationExpression	* codep ++		6679926	1					
ANR	6680845	UnaryOperator	*		6679926	0					
ANR	6680846	PostIncDecOperationExpression	codep ++		6679926	1					
ANR	6680847	Identifier	codep		6679926	0					
ANR	6680848	IncDec	++		6679926	1					
ANR	6680849	GotoStatement	goto vex_opcode ;	401:6:5263:5278	6679926	2	True				
ANR	6680850	Identifier	vex_opcode		6679926	0					
ANR	6680851	IfStatement	if ( * codep == 0x0f )		6679926	37					
ANR	6680852	Condition	* codep == 0x0f	405:6:5294:5307	6679926	0	True				
ANR	6680853	EqualityExpression	* codep == 0x0f		6679926	0		==			
ANR	6680854	UnaryOperationExpression	* codep		6679926	0					
ANR	6680855	UnaryOperator	*		6679926	0					
ANR	6680856	Identifier	codep		6679926	1					
ANR	6680857	PrimaryExpression	0x0f		6679926	1					
ANR	6680858	CompoundStatement		405:4:5265:5265	6679926	1					
ANR	6680859	ExpressionStatement	"fetch_data ( info , codep + 2 )"	409:6:5324:5351	6679926	0	True				
ANR	6680860	CallExpression	"fetch_data ( info , codep + 2 )"		6679926	0					
ANR	6680861	Callee	fetch_data		6679926	0					
ANR	6680862	Identifier	fetch_data		6679926	0					
ANR	6680863	ArgumentList	info		6679926	1					
ANR	6680864	Argument	info		6679926	0					
ANR	6680865	Identifier	info		6679926	0					
ANR	6680866	Argument	codep + 2		6679926	1					
ANR	6680867	AdditiveExpression	codep + 2		6679926	0		+			
ANR	6680868	Identifier	codep		6679926	0					
ANR	6680869	PrimaryExpression	2		6679926	1					
ANR	6680870	ExpressionStatement	threebyte = codep [ 1 ]	411:6:5360:5380	6679926	1	True				
ANR	6680871	AssignmentExpression	threebyte = codep [ 1 ]		6679926	0		=			
ANR	6680872	Identifier	threebyte		6679926	0					
ANR	6680873	ArrayIndexing	codep [ 1 ]		6679926	1					
ANR	6680874	Identifier	codep		6679926	0					
ANR	6680875	PrimaryExpression	1		6679926	1					
ANR	6680876	ExpressionStatement	codep += 2	413:6:5389:5399	6679926	2	True				
ANR	6680877	AssignmentExpression	codep += 2		6679926	0		+=			
ANR	6680878	Identifier	codep		6679926	0					
ANR	6680879	PrimaryExpression	2		6679926	1					
ANR	6680880	Label	vex_opcode :	415:4:5406:5416	6679926	3	True				
ANR	6680881	Identifier	vex_opcode		6679926	0					
ANR	6680882	ExpressionStatement	dp = & dis386_twobyte [ threebyte ]	417:6:5425:5456	6679926	4	True				
ANR	6680883	AssignmentExpression	dp = & dis386_twobyte [ threebyte ]		6679926	0		=			
ANR	6680884	Identifier	dp		6679926	0					
ANR	6680885	UnaryOperationExpression	& dis386_twobyte [ threebyte ]		6679926	1					
ANR	6680886	UnaryOperator	&		6679926	0					
ANR	6680887	ArrayIndexing	dis386_twobyte [ threebyte ]		6679926	1					
ANR	6680888	Identifier	dis386_twobyte		6679926	0					
ANR	6680889	Identifier	threebyte		6679926	1					
ANR	6680890	ExpressionStatement	need_modrm = twobyte_has_modrm [ threebyte ]	419:6:5465:5506	6679926	5	True				
ANR	6680891	AssignmentExpression	need_modrm = twobyte_has_modrm [ threebyte ]		6679926	0		=			
ANR	6680892	Identifier	need_modrm		6679926	0					
ANR	6680893	ArrayIndexing	twobyte_has_modrm [ threebyte ]		6679926	1					
ANR	6680894	Identifier	twobyte_has_modrm		6679926	0					
ANR	6680895	Identifier	threebyte		6679926	1					
ANR	6680896	ExpressionStatement	uses_DATA_prefix = twobyte_uses_DATA_prefix [ threebyte ]	421:6:5515:5569	6679926	6	True				
ANR	6680897	AssignmentExpression	uses_DATA_prefix = twobyte_uses_DATA_prefix [ threebyte ]		6679926	0		=			
ANR	6680898	Identifier	uses_DATA_prefix		6679926	0					
ANR	6680899	ArrayIndexing	twobyte_uses_DATA_prefix [ threebyte ]		6679926	1					
ANR	6680900	Identifier	twobyte_uses_DATA_prefix		6679926	0					
ANR	6680901	Identifier	threebyte		6679926	1					
ANR	6680902	ExpressionStatement	uses_REPNZ_prefix = twobyte_uses_REPNZ_prefix [ threebyte ]	423:6:5578:5634	6679926	7	True				
ANR	6680903	AssignmentExpression	uses_REPNZ_prefix = twobyte_uses_REPNZ_prefix [ threebyte ]		6679926	0		=			
ANR	6680904	Identifier	uses_REPNZ_prefix		6679926	0					
ANR	6680905	ArrayIndexing	twobyte_uses_REPNZ_prefix [ threebyte ]		6679926	1					
ANR	6680906	Identifier	twobyte_uses_REPNZ_prefix		6679926	0					
ANR	6680907	Identifier	threebyte		6679926	1					
ANR	6680908	ExpressionStatement	uses_REPZ_prefix = twobyte_uses_REPZ_prefix [ threebyte ]	425:6:5643:5697	6679926	8	True				
ANR	6680909	AssignmentExpression	uses_REPZ_prefix = twobyte_uses_REPZ_prefix [ threebyte ]		6679926	0		=			
ANR	6680910	Identifier	uses_REPZ_prefix		6679926	0					
ANR	6680911	ArrayIndexing	twobyte_uses_REPZ_prefix [ threebyte ]		6679926	1					
ANR	6680912	Identifier	twobyte_uses_REPZ_prefix		6679926	0					
ANR	6680913	Identifier	threebyte		6679926	1					
ANR	6680914	ExpressionStatement	uses_LOCK_prefix = ( threebyte & ~0x02 ) == 0x20	427:6:5706:5752	6679926	9	True				
ANR	6680915	AssignmentExpression	uses_LOCK_prefix = ( threebyte & ~0x02 ) == 0x20		6679926	0		=			
ANR	6680916	Identifier	uses_LOCK_prefix		6679926	0					
ANR	6680917	EqualityExpression	( threebyte & ~0x02 ) == 0x20		6679926	1		==			
ANR	6680918	BitAndExpression	threebyte & ~0x02		6679926	0		&			
ANR	6680919	Identifier	threebyte		6679926	0					
ANR	6680920	Identifier	~0x02		6679926	1					
ANR	6680921	PrimaryExpression	0x20		6679926	1					
ANR	6680922	IfStatement	if ( dp -> name == NULL && dp -> op [ 0 ] . bytemode == IS_3BYTE_OPCODE )		6679926	10					
ANR	6680923	Condition	dp -> name == NULL && dp -> op [ 0 ] . bytemode == IS_3BYTE_OPCODE	429:10:5765:5821	6679926	0	True				
ANR	6680924	AndExpression	dp -> name == NULL && dp -> op [ 0 ] . bytemode == IS_3BYTE_OPCODE		6679926	0		&&			
ANR	6680925	EqualityExpression	dp -> name == NULL		6679926	0		==			
ANR	6680926	PtrMemberAccess	dp -> name		6679926	0					
ANR	6680927	Identifier	dp		6679926	0					
ANR	6680928	Identifier	name		6679926	1					
ANR	6680929	Identifier	NULL		6679926	1					
ANR	6680930	EqualityExpression	dp -> op [ 0 ] . bytemode == IS_3BYTE_OPCODE		6679926	1		==			
ANR	6680931	MemberAccess	dp -> op [ 0 ] . bytemode		6679926	0					
ANR	6680932	ArrayIndexing	dp -> op [ 0 ]		6679926	0					
ANR	6680933	PtrMemberAccess	dp -> op		6679926	0					
ANR	6680934	Identifier	dp		6679926	0					
ANR	6680935	Identifier	op		6679926	1					
ANR	6680936	PrimaryExpression	0		6679926	1					
ANR	6680937	Identifier	bytemode		6679926	1					
ANR	6680938	Identifier	IS_3BYTE_OPCODE		6679926	1					
ANR	6680939	CompoundStatement		429:1:5776:5776	6679926	1					
ANR	6680940	ExpressionStatement	"fetch_data ( info , codep + 2 )"	433:10:5839:5866	6679926	0	True				
ANR	6680941	CallExpression	"fetch_data ( info , codep + 2 )"		6679926	0					
ANR	6680942	Callee	fetch_data		6679926	0					
ANR	6680943	Identifier	fetch_data		6679926	0					
ANR	6680944	ArgumentList	info		6679926	1					
ANR	6680945	Argument	info		6679926	0					
ANR	6680946	Identifier	info		6679926	0					
ANR	6680947	Argument	codep + 2		6679926	1					
ANR	6680948	AdditiveExpression	codep + 2		6679926	0		+			
ANR	6680949	Identifier	codep		6679926	0					
ANR	6680950	PrimaryExpression	2		6679926	1					
ANR	6680951	ExpressionStatement	op = * codep ++	435:3:5872:5885	6679926	1	True				
ANR	6680952	AssignmentExpression	op = * codep ++		6679926	0		=			
ANR	6680953	Identifier	op		6679926	0					
ANR	6680954	UnaryOperationExpression	* codep ++		6679926	1					
ANR	6680955	UnaryOperator	*		6679926	0					
ANR	6680956	PostIncDecOperationExpression	codep ++		6679926	1					
ANR	6680957	Identifier	codep		6679926	0					
ANR	6680958	IncDec	++		6679926	1					
ANR	6680959	SwitchStatement	switch ( threebyte )		6679926	2					
ANR	6680960	Condition	threebyte	437:11:5899:5907	6679926	0	True				
ANR	6680961	Identifier	threebyte		6679926	0					
ANR	6680962	CompoundStatement		437:5:5866:5866	6679926	1					
ANR	6680963	Label	case 0x38 :	441:5:5924:5933	6679926	0	True				
ANR	6680964	ExpressionStatement	uses_DATA_prefix = threebyte_0x38_uses_DATA_prefix [ op ]	443:7:5943:5997	6679926	1	True				
ANR	6680965	AssignmentExpression	uses_DATA_prefix = threebyte_0x38_uses_DATA_prefix [ op ]		6679926	0		=			
ANR	6680966	Identifier	uses_DATA_prefix		6679926	0					
ANR	6680967	ArrayIndexing	threebyte_0x38_uses_DATA_prefix [ op ]		6679926	1					
ANR	6680968	Identifier	threebyte_0x38_uses_DATA_prefix		6679926	0					
ANR	6680969	Identifier	op		6679926	1					
ANR	6680970	ExpressionStatement	uses_REPNZ_prefix = threebyte_0x38_uses_REPNZ_prefix [ op ]	445:7:6007:6063	6679926	2	True				
ANR	6680971	AssignmentExpression	uses_REPNZ_prefix = threebyte_0x38_uses_REPNZ_prefix [ op ]		6679926	0		=			
ANR	6680972	Identifier	uses_REPNZ_prefix		6679926	0					
ANR	6680973	ArrayIndexing	threebyte_0x38_uses_REPNZ_prefix [ op ]		6679926	1					
ANR	6680974	Identifier	threebyte_0x38_uses_REPNZ_prefix		6679926	0					
ANR	6680975	Identifier	op		6679926	1					
ANR	6680976	ExpressionStatement	uses_REPZ_prefix = threebyte_0x38_uses_REPZ_prefix [ op ]	447:7:6073:6127	6679926	3	True				
ANR	6680977	AssignmentExpression	uses_REPZ_prefix = threebyte_0x38_uses_REPZ_prefix [ op ]		6679926	0		=			
ANR	6680978	Identifier	uses_REPZ_prefix		6679926	0					
ANR	6680979	ArrayIndexing	threebyte_0x38_uses_REPZ_prefix [ op ]		6679926	1					
ANR	6680980	Identifier	threebyte_0x38_uses_REPZ_prefix		6679926	0					
ANR	6680981	Identifier	op		6679926	1					
ANR	6680982	BreakStatement	break ;	449:7:6137:6142	6679926	4	True				
ANR	6680983	Label	case 0x3a :	451:5:6150:6159	6679926	5	True				
ANR	6680984	ExpressionStatement	uses_DATA_prefix = threebyte_0x3a_uses_DATA_prefix [ op ]	453:7:6169:6223	6679926	6	True				
ANR	6680985	AssignmentExpression	uses_DATA_prefix = threebyte_0x3a_uses_DATA_prefix [ op ]		6679926	0		=			
ANR	6680986	Identifier	uses_DATA_prefix		6679926	0					
ANR	6680987	ArrayIndexing	threebyte_0x3a_uses_DATA_prefix [ op ]		6679926	1					
ANR	6680988	Identifier	threebyte_0x3a_uses_DATA_prefix		6679926	0					
ANR	6680989	Identifier	op		6679926	1					
ANR	6680990	ExpressionStatement	uses_REPNZ_prefix = threebyte_0x3a_uses_REPNZ_prefix [ op ]	455:7:6233:6289	6679926	7	True				
ANR	6680991	AssignmentExpression	uses_REPNZ_prefix = threebyte_0x3a_uses_REPNZ_prefix [ op ]		6679926	0		=			
ANR	6680992	Identifier	uses_REPNZ_prefix		6679926	0					
ANR	6680993	ArrayIndexing	threebyte_0x3a_uses_REPNZ_prefix [ op ]		6679926	1					
ANR	6680994	Identifier	threebyte_0x3a_uses_REPNZ_prefix		6679926	0					
ANR	6680995	Identifier	op		6679926	1					
ANR	6680996	ExpressionStatement	uses_REPZ_prefix = threebyte_0x3a_uses_REPZ_prefix [ op ]	457:7:6299:6353	6679926	8	True				
ANR	6680997	AssignmentExpression	uses_REPZ_prefix = threebyte_0x3a_uses_REPZ_prefix [ op ]		6679926	0		=			
ANR	6680998	Identifier	uses_REPZ_prefix		6679926	0					
ANR	6680999	ArrayIndexing	threebyte_0x3a_uses_REPZ_prefix [ op ]		6679926	1					
ANR	6681000	Identifier	threebyte_0x3a_uses_REPZ_prefix		6679926	0					
ANR	6681001	Identifier	op		6679926	1					
ANR	6681002	BreakStatement	break ;	459:7:6363:6368	6679926	9	True				
ANR	6681003	Label	default :	461:5:6376:6383	6679926	10	True				
ANR	6681004	Identifier	default		6679926	0					
ANR	6681005	BreakStatement	break ;	463:7:6393:6398	6679926	11	True				
ANR	6681006	ElseStatement	else		6679926	0					
ANR	6681007	CompoundStatement		471:4:6382:6382	6679926	0					
ANR	6681008	ExpressionStatement	dp = & dis386 [ * codep ]	475:6:6441:6461	6679926	0	True				
ANR	6681009	AssignmentExpression	dp = & dis386 [ * codep ]		6679926	0		=			
ANR	6681010	Identifier	dp		6679926	0					
ANR	6681011	UnaryOperationExpression	& dis386 [ * codep ]		6679926	1					
ANR	6681012	UnaryOperator	&		6679926	0					
ANR	6681013	ArrayIndexing	dis386 [ * codep ]		6679926	1					
ANR	6681014	Identifier	dis386		6679926	0					
ANR	6681015	UnaryOperationExpression	* codep		6679926	1					
ANR	6681016	UnaryOperator	*		6679926	0					
ANR	6681017	Identifier	codep		6679926	1					
ANR	6681018	ExpressionStatement	need_modrm = onebyte_has_modrm [ * codep ]	477:6:6470:6508	6679926	1	True				
ANR	6681019	AssignmentExpression	need_modrm = onebyte_has_modrm [ * codep ]		6679926	0		=			
ANR	6681020	Identifier	need_modrm		6679926	0					
ANR	6681021	ArrayIndexing	onebyte_has_modrm [ * codep ]		6679926	1					
ANR	6681022	Identifier	onebyte_has_modrm		6679926	0					
ANR	6681023	UnaryOperationExpression	* codep		6679926	1					
ANR	6681024	UnaryOperator	*		6679926	0					
ANR	6681025	Identifier	codep		6679926	1					
ANR	6681026	ExpressionStatement	uses_DATA_prefix = 0	479:6:6517:6537	6679926	2	True				
ANR	6681027	AssignmentExpression	uses_DATA_prefix = 0		6679926	0		=			
ANR	6681028	Identifier	uses_DATA_prefix		6679926	0					
ANR	6681029	PrimaryExpression	0		6679926	1					
ANR	6681030	ExpressionStatement	uses_REPNZ_prefix = 0	481:6:6546:6567	6679926	3	True				
ANR	6681031	AssignmentExpression	uses_REPNZ_prefix = 0		6679926	0		=			
ANR	6681032	Identifier	uses_REPNZ_prefix		6679926	0					
ANR	6681033	PrimaryExpression	0		6679926	1					
ANR	6681034	ExpressionStatement	uses_REPZ_prefix = * codep == 0x90	485:6:6610:6643	6679926	4	True				
ANR	6681035	AssignmentExpression	uses_REPZ_prefix = * codep == 0x90		6679926	0		=			
ANR	6681036	Identifier	uses_REPZ_prefix		6679926	0					
ANR	6681037	EqualityExpression	* codep == 0x90		6679926	1		==			
ANR	6681038	UnaryOperationExpression	* codep		6679926	0					
ANR	6681039	UnaryOperator	*		6679926	0					
ANR	6681040	Identifier	codep		6679926	1					
ANR	6681041	PrimaryExpression	0x90		6679926	1					
ANR	6681042	ExpressionStatement	uses_LOCK_prefix = 0	487:6:6652:6672	6679926	5	True				
ANR	6681043	AssignmentExpression	uses_LOCK_prefix = 0		6679926	0		=			
ANR	6681044	Identifier	uses_LOCK_prefix		6679926	0					
ANR	6681045	PrimaryExpression	0		6679926	1					
ANR	6681046	ExpressionStatement	codep ++	489:6:6681:6688	6679926	6	True				
ANR	6681047	PostIncDecOperationExpression	codep ++		6679926	0					
ANR	6681048	Identifier	codep		6679926	0					
ANR	6681049	IncDec	++		6679926	1					
ANR	6681050	IfStatement	if ( ! uses_REPZ_prefix && ( prefixes & PREFIX_REPZ ) )		6679926	38					
ANR	6681051	Condition	! uses_REPZ_prefix && ( prefixes & PREFIX_REPZ )	495:6:6706:6750	6679926	0	True				
ANR	6681052	AndExpression	! uses_REPZ_prefix && ( prefixes & PREFIX_REPZ )		6679926	0		&&			
ANR	6681053	UnaryOperationExpression	! uses_REPZ_prefix		6679926	0					
ANR	6681054	UnaryOperator	!		6679926	0					
ANR	6681055	Identifier	uses_REPZ_prefix		6679926	1					
ANR	6681056	BitAndExpression	prefixes & PREFIX_REPZ		6679926	1		&			
ANR	6681057	Identifier	prefixes		6679926	0					
ANR	6681058	Identifier	PREFIX_REPZ		6679926	1					
ANR	6681059	CompoundStatement		495:4:6708:6708	6679926	1					
ANR	6681060	ExpressionStatement	"oappend ( ""repz "" )"	499:6:6767:6784	6679926	0	True				
ANR	6681061	CallExpression	"oappend ( ""repz "" )"		6679926	0					
ANR	6681062	Callee	oappend		6679926	0					
ANR	6681063	Identifier	oappend		6679926	0					
ANR	6681064	ArgumentList	"""repz """		6679926	1					
ANR	6681065	Argument	"""repz """		6679926	0					
ANR	6681066	PrimaryExpression	"""repz """		6679926	0					
ANR	6681067	ExpressionStatement	used_prefixes |= PREFIX_REPZ	501:6:6793:6821	6679926	1	True				
ANR	6681068	AssignmentExpression	used_prefixes |= PREFIX_REPZ		6679926	0		|=			
ANR	6681069	Identifier	used_prefixes		6679926	0					
ANR	6681070	Identifier	PREFIX_REPZ		6679926	1					
ANR	6681071	IfStatement	if ( ! uses_REPNZ_prefix && ( prefixes & PREFIX_REPNZ ) )		6679926	39					
ANR	6681072	Condition	! uses_REPNZ_prefix && ( prefixes & PREFIX_REPNZ )	505:6:6837:6883	6679926	0	True				
ANR	6681073	AndExpression	! uses_REPNZ_prefix && ( prefixes & PREFIX_REPNZ )		6679926	0		&&			
ANR	6681074	UnaryOperationExpression	! uses_REPNZ_prefix		6679926	0					
ANR	6681075	UnaryOperator	!		6679926	0					
ANR	6681076	Identifier	uses_REPNZ_prefix		6679926	1					
ANR	6681077	BitAndExpression	prefixes & PREFIX_REPNZ		6679926	1		&			
ANR	6681078	Identifier	prefixes		6679926	0					
ANR	6681079	Identifier	PREFIX_REPNZ		6679926	1					
ANR	6681080	CompoundStatement		505:4:6841:6841	6679926	1					
ANR	6681081	ExpressionStatement	"oappend ( ""repnz "" )"	509:6:6900:6918	6679926	0	True				
ANR	6681082	CallExpression	"oappend ( ""repnz "" )"		6679926	0					
ANR	6681083	Callee	oappend		6679926	0					
ANR	6681084	Identifier	oappend		6679926	0					
ANR	6681085	ArgumentList	"""repnz """		6679926	1					
ANR	6681086	Argument	"""repnz """		6679926	0					
ANR	6681087	PrimaryExpression	"""repnz """		6679926	0					
ANR	6681088	ExpressionStatement	used_prefixes |= PREFIX_REPNZ	511:6:6927:6956	6679926	1	True				
ANR	6681089	AssignmentExpression	used_prefixes |= PREFIX_REPNZ		6679926	0		|=			
ANR	6681090	Identifier	used_prefixes		6679926	0					
ANR	6681091	Identifier	PREFIX_REPNZ		6679926	1					
ANR	6681092	IfStatement	if ( ! uses_LOCK_prefix && ( prefixes & PREFIX_LOCK ) )		6679926	40					
ANR	6681093	Condition	! uses_LOCK_prefix && ( prefixes & PREFIX_LOCK )	517:6:6974:7018	6679926	0	True				
ANR	6681094	AndExpression	! uses_LOCK_prefix && ( prefixes & PREFIX_LOCK )		6679926	0		&&			
ANR	6681095	UnaryOperationExpression	! uses_LOCK_prefix		6679926	0					
ANR	6681096	UnaryOperator	!		6679926	0					
ANR	6681097	Identifier	uses_LOCK_prefix		6679926	1					
ANR	6681098	BitAndExpression	prefixes & PREFIX_LOCK		6679926	1		&			
ANR	6681099	Identifier	prefixes		6679926	0					
ANR	6681100	Identifier	PREFIX_LOCK		6679926	1					
ANR	6681101	CompoundStatement		517:4:6976:6976	6679926	1					
ANR	6681102	ExpressionStatement	"oappend ( ""lock "" )"	521:6:7035:7052	6679926	0	True				
ANR	6681103	CallExpression	"oappend ( ""lock "" )"		6679926	0					
ANR	6681104	Callee	oappend		6679926	0					
ANR	6681105	Identifier	oappend		6679926	0					
ANR	6681106	ArgumentList	"""lock """		6679926	1					
ANR	6681107	Argument	"""lock """		6679926	0					
ANR	6681108	PrimaryExpression	"""lock """		6679926	0					
ANR	6681109	ExpressionStatement	used_prefixes |= PREFIX_LOCK	523:6:7061:7089	6679926	1	True				
ANR	6681110	AssignmentExpression	used_prefixes |= PREFIX_LOCK		6679926	0		|=			
ANR	6681111	Identifier	used_prefixes		6679926	0					
ANR	6681112	Identifier	PREFIX_LOCK		6679926	1					
ANR	6681113	IfStatement	if ( prefixes & PREFIX_ADDR )		6679926	41					
ANR	6681114	Condition	prefixes & PREFIX_ADDR	529:6:7107:7128	6679926	0	True				
ANR	6681115	BitAndExpression	prefixes & PREFIX_ADDR		6679926	0		&			
ANR	6681116	Identifier	prefixes		6679926	0					
ANR	6681117	Identifier	PREFIX_ADDR		6679926	1					
ANR	6681118	CompoundStatement		529:4:7086:7086	6679926	1					
ANR	6681119	ExpressionStatement	sizeflag ^= AFLAG	533:6:7145:7162	6679926	0	True				
ANR	6681120	AssignmentExpression	sizeflag ^= AFLAG		6679926	0		^=			
ANR	6681121	Identifier	sizeflag		6679926	0					
ANR	6681122	Identifier	AFLAG		6679926	1					
ANR	6681123	IfStatement	if ( dp -> op [ 2 ] . bytemode != loop_jcxz_mode || intel_syntax )		6679926	1					
ANR	6681124	Condition	dp -> op [ 2 ] . bytemode != loop_jcxz_mode || intel_syntax	535:10:7175:7226	6679926	0	True				
ANR	6681125	OrExpression	dp -> op [ 2 ] . bytemode != loop_jcxz_mode || intel_syntax		6679926	0		||			
ANR	6681126	EqualityExpression	dp -> op [ 2 ] . bytemode != loop_jcxz_mode		6679926	0		!=			
ANR	6681127	MemberAccess	dp -> op [ 2 ] . bytemode		6679926	0					
ANR	6681128	ArrayIndexing	dp -> op [ 2 ]		6679926	0					
ANR	6681129	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681130	Identifier	dp		6679926	0					
ANR	6681131	Identifier	op		6679926	1					
ANR	6681132	PrimaryExpression	2		6679926	1					
ANR	6681133	Identifier	bytemode		6679926	1					
ANR	6681134	Identifier	loop_jcxz_mode		6679926	1					
ANR	6681135	Identifier	intel_syntax		6679926	1					
ANR	6681136	CompoundStatement		535:1:7181:7181	6679926	1					
ANR	6681137	IfStatement	if ( ( sizeflag & AFLAG ) || address_mode == mode_64bit )		6679926	0					
ANR	6681138	Condition	( sizeflag & AFLAG ) || address_mode == mode_64bit	539:7:7241:7288	6679926	0	True				
ANR	6681139	OrExpression	( sizeflag & AFLAG ) || address_mode == mode_64bit		6679926	0		||			
ANR	6681140	BitAndExpression	sizeflag & AFLAG		6679926	0		&			
ANR	6681141	Identifier	sizeflag		6679926	0					
ANR	6681142	Identifier	AFLAG		6679926	1					
ANR	6681143	EqualityExpression	address_mode == mode_64bit		6679926	1		==			
ANR	6681144	Identifier	address_mode		6679926	0					
ANR	6681145	Identifier	mode_64bit		6679926	1					
ANR	6681146	ExpressionStatement	"oappend ( ""addr32 "" )"	541:5:7297:7316	6679926	1	True				
ANR	6681147	CallExpression	"oappend ( ""addr32 "" )"		6679926	0					
ANR	6681148	Callee	oappend		6679926	0					
ANR	6681149	Identifier	oappend		6679926	0					
ANR	6681150	ArgumentList	"""addr32 """		6679926	1					
ANR	6681151	Argument	"""addr32 """		6679926	0					
ANR	6681152	PrimaryExpression	"""addr32 """		6679926	0					
ANR	6681153	ElseStatement	else		6679926	0					
ANR	6681154	ExpressionStatement	"oappend ( ""addr16 "" )"	545:5:7333:7352	6679926	0	True				
ANR	6681155	CallExpression	"oappend ( ""addr16 "" )"		6679926	0					
ANR	6681156	Callee	oappend		6679926	0					
ANR	6681157	Identifier	oappend		6679926	0					
ANR	6681158	ArgumentList	"""addr16 """		6679926	1					
ANR	6681159	Argument	"""addr16 """		6679926	0					
ANR	6681160	PrimaryExpression	"""addr16 """		6679926	0					
ANR	6681161	ExpressionStatement	used_prefixes |= PREFIX_ADDR	547:3:7358:7386	6679926	1	True				
ANR	6681162	AssignmentExpression	used_prefixes |= PREFIX_ADDR		6679926	0		|=			
ANR	6681163	Identifier	used_prefixes		6679926	0					
ANR	6681164	Identifier	PREFIX_ADDR		6679926	1					
ANR	6681165	IfStatement	if ( ! uses_DATA_prefix && ( prefixes & PREFIX_DATA ) )		6679926	42					
ANR	6681166	Condition	! uses_DATA_prefix && ( prefixes & PREFIX_DATA )	555:6:7408:7452	6679926	0	True				
ANR	6681167	AndExpression	! uses_DATA_prefix && ( prefixes & PREFIX_DATA )		6679926	0		&&			
ANR	6681168	UnaryOperationExpression	! uses_DATA_prefix		6679926	0					
ANR	6681169	UnaryOperator	!		6679926	0					
ANR	6681170	Identifier	uses_DATA_prefix		6679926	1					
ANR	6681171	BitAndExpression	prefixes & PREFIX_DATA		6679926	1		&			
ANR	6681172	Identifier	prefixes		6679926	0					
ANR	6681173	Identifier	PREFIX_DATA		6679926	1					
ANR	6681174	CompoundStatement		555:4:7410:7410	6679926	1					
ANR	6681175	ExpressionStatement	sizeflag ^= DFLAG	559:6:7469:7486	6679926	0	True				
ANR	6681176	AssignmentExpression	sizeflag ^= DFLAG		6679926	0		^=			
ANR	6681177	Identifier	sizeflag		6679926	0					
ANR	6681178	Identifier	DFLAG		6679926	1					
ANR	6681179	IfStatement	if ( dp -> op [ 2 ] . bytemode == cond_jump_mode && dp -> op [ 0 ] . bytemode == v_mode && ! intel_syntax )		6679926	1					
ANR	6681180	Condition	dp -> op [ 2 ] . bytemode == cond_jump_mode && dp -> op [ 0 ] . bytemode == v_mode && ! intel_syntax	561:10:7499:7591	6679926	0	True				
ANR	6681181	AndExpression	dp -> op [ 2 ] . bytemode == cond_jump_mode && dp -> op [ 0 ] . bytemode == v_mode && ! intel_syntax		6679926	0		&&			
ANR	6681182	EqualityExpression	dp -> op [ 2 ] . bytemode == cond_jump_mode		6679926	0		==			
ANR	6681183	MemberAccess	dp -> op [ 2 ] . bytemode		6679926	0					
ANR	6681184	ArrayIndexing	dp -> op [ 2 ]		6679926	0					
ANR	6681185	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681186	Identifier	dp		6679926	0					
ANR	6681187	Identifier	op		6679926	1					
ANR	6681188	PrimaryExpression	2		6679926	1					
ANR	6681189	Identifier	bytemode		6679926	1					
ANR	6681190	Identifier	cond_jump_mode		6679926	1					
ANR	6681191	AndExpression	dp -> op [ 0 ] . bytemode == v_mode && ! intel_syntax		6679926	1		&&			
ANR	6681192	EqualityExpression	dp -> op [ 0 ] . bytemode == v_mode		6679926	0		==			
ANR	6681193	MemberAccess	dp -> op [ 0 ] . bytemode		6679926	0					
ANR	6681194	ArrayIndexing	dp -> op [ 0 ]		6679926	0					
ANR	6681195	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681196	Identifier	dp		6679926	0					
ANR	6681197	Identifier	op		6679926	1					
ANR	6681198	PrimaryExpression	0		6679926	1					
ANR	6681199	Identifier	bytemode		6679926	1					
ANR	6681200	Identifier	v_mode		6679926	1					
ANR	6681201	UnaryOperationExpression	! intel_syntax		6679926	1					
ANR	6681202	UnaryOperator	!		6679926	0					
ANR	6681203	Identifier	intel_syntax		6679926	1					
ANR	6681204	CompoundStatement		565:1:7546:7546	6679926	1					
ANR	6681205	IfStatement	if ( sizeflag & DFLAG )		6679926	0					
ANR	6681206	Condition	sizeflag & DFLAG	569:7:7606:7621	6679926	0	True				
ANR	6681207	BitAndExpression	sizeflag & DFLAG		6679926	0		&			
ANR	6681208	Identifier	sizeflag		6679926	0					
ANR	6681209	Identifier	DFLAG		6679926	1					
ANR	6681210	ExpressionStatement	"oappend ( ""data32 "" )"	571:5:7630:7649	6679926	1	True				
ANR	6681211	CallExpression	"oappend ( ""data32 "" )"		6679926	0					
ANR	6681212	Callee	oappend		6679926	0					
ANR	6681213	Identifier	oappend		6679926	0					
ANR	6681214	ArgumentList	"""data32 """		6679926	1					
ANR	6681215	Argument	"""data32 """		6679926	0					
ANR	6681216	PrimaryExpression	"""data32 """		6679926	0					
ANR	6681217	ElseStatement	else		6679926	0					
ANR	6681218	ExpressionStatement	"oappend ( ""data16 "" )"	575:5:7666:7685	6679926	0	True				
ANR	6681219	CallExpression	"oappend ( ""data16 "" )"		6679926	0					
ANR	6681220	Callee	oappend		6679926	0					
ANR	6681221	Identifier	oappend		6679926	0					
ANR	6681222	ArgumentList	"""data16 """		6679926	1					
ANR	6681223	Argument	"""data16 """		6679926	0					
ANR	6681224	PrimaryExpression	"""data16 """		6679926	0					
ANR	6681225	ExpressionStatement	used_prefixes |= PREFIX_DATA	577:3:7691:7719	6679926	1	True				
ANR	6681226	AssignmentExpression	used_prefixes |= PREFIX_DATA		6679926	0		|=			
ANR	6681227	Identifier	used_prefixes		6679926	0					
ANR	6681228	Identifier	PREFIX_DATA		6679926	1					
ANR	6681229	IfStatement	if ( dp -> name == NULL && dp -> op [ 0 ] . bytemode == IS_3BYTE_OPCODE )		6679926	43					
ANR	6681230	Condition	dp -> name == NULL && dp -> op [ 0 ] . bytemode == IS_3BYTE_OPCODE	585:6:7741:7797	6679926	0	True				
ANR	6681231	AndExpression	dp -> name == NULL && dp -> op [ 0 ] . bytemode == IS_3BYTE_OPCODE		6679926	0		&&			
ANR	6681232	EqualityExpression	dp -> name == NULL		6679926	0		==			
ANR	6681233	PtrMemberAccess	dp -> name		6679926	0					
ANR	6681234	Identifier	dp		6679926	0					
ANR	6681235	Identifier	name		6679926	1					
ANR	6681236	Identifier	NULL		6679926	1					
ANR	6681237	EqualityExpression	dp -> op [ 0 ] . bytemode == IS_3BYTE_OPCODE		6679926	1		==			
ANR	6681238	MemberAccess	dp -> op [ 0 ] . bytemode		6679926	0					
ANR	6681239	ArrayIndexing	dp -> op [ 0 ]		6679926	0					
ANR	6681240	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681241	Identifier	dp		6679926	0					
ANR	6681242	Identifier	op		6679926	1					
ANR	6681243	PrimaryExpression	0		6679926	1					
ANR	6681244	Identifier	bytemode		6679926	1					
ANR	6681245	Identifier	IS_3BYTE_OPCODE		6679926	1					
ANR	6681246	CompoundStatement		585:4:7755:7755	6679926	1					
ANR	6681247	ExpressionStatement	dp = & three_byte_table [ dp -> op [ 1 ] . bytemode ] [ op ]	589:6:7814:7860	6679926	0	True				
ANR	6681248	AssignmentExpression	dp = & three_byte_table [ dp -> op [ 1 ] . bytemode ] [ op ]		6679926	0		=			
ANR	6681249	Identifier	dp		6679926	0					
ANR	6681250	UnaryOperationExpression	& three_byte_table [ dp -> op [ 1 ] . bytemode ] [ op ]		6679926	1					
ANR	6681251	UnaryOperator	&		6679926	0					
ANR	6681252	ArrayIndexing	three_byte_table [ dp -> op [ 1 ] . bytemode ] [ op ]		6679926	1					
ANR	6681253	ArrayIndexing	three_byte_table [ dp -> op [ 1 ] . bytemode ]		6679926	0					
ANR	6681254	Identifier	three_byte_table		6679926	0					
ANR	6681255	MemberAccess	dp -> op [ 1 ] . bytemode		6679926	1					
ANR	6681256	ArrayIndexing	dp -> op [ 1 ]		6679926	0					
ANR	6681257	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681258	Identifier	dp		6679926	0					
ANR	6681259	Identifier	op		6679926	1					
ANR	6681260	PrimaryExpression	1		6679926	1					
ANR	6681261	Identifier	bytemode		6679926	1					
ANR	6681262	Identifier	op		6679926	1					
ANR	6681263	ExpressionStatement	modrm . mod = ( * codep >> 6 ) & 3	591:6:7869:7898	6679926	1	True				
ANR	6681264	AssignmentExpression	modrm . mod = ( * codep >> 6 ) & 3		6679926	0		=			
ANR	6681265	MemberAccess	modrm . mod		6679926	0					
ANR	6681266	Identifier	modrm		6679926	0					
ANR	6681267	Identifier	mod		6679926	1					
ANR	6681268	BitAndExpression	( * codep >> 6 ) & 3		6679926	1		&			
ANR	6681269	ShiftExpression	* codep >> 6		6679926	0		>>			
ANR	6681270	UnaryOperationExpression	* codep		6679926	0					
ANR	6681271	UnaryOperator	*		6679926	0					
ANR	6681272	Identifier	codep		6679926	1					
ANR	6681273	PrimaryExpression	6		6679926	1					
ANR	6681274	PrimaryExpression	3		6679926	1					
ANR	6681275	ExpressionStatement	modrm . reg = ( * codep >> 3 ) & 7	593:6:7907:7936	6679926	2	True				
ANR	6681276	AssignmentExpression	modrm . reg = ( * codep >> 3 ) & 7		6679926	0		=			
ANR	6681277	MemberAccess	modrm . reg		6679926	0					
ANR	6681278	Identifier	modrm		6679926	0					
ANR	6681279	Identifier	reg		6679926	1					
ANR	6681280	BitAndExpression	( * codep >> 3 ) & 7		6679926	1		&			
ANR	6681281	ShiftExpression	* codep >> 3		6679926	0		>>			
ANR	6681282	UnaryOperationExpression	* codep		6679926	0					
ANR	6681283	UnaryOperator	*		6679926	0					
ANR	6681284	Identifier	codep		6679926	1					
ANR	6681285	PrimaryExpression	3		6679926	1					
ANR	6681286	PrimaryExpression	7		6679926	1					
ANR	6681287	ExpressionStatement	modrm . rm = * codep & 7	595:6:7945:7966	6679926	3	True				
ANR	6681288	AssignmentExpression	modrm . rm = * codep & 7		6679926	0		=			
ANR	6681289	MemberAccess	modrm . rm		6679926	0					
ANR	6681290	Identifier	modrm		6679926	0					
ANR	6681291	Identifier	rm		6679926	1					
ANR	6681292	BitAndExpression	* codep & 7		6679926	1		&			
ANR	6681293	UnaryOperationExpression	* codep		6679926	0					
ANR	6681294	UnaryOperator	*		6679926	0					
ANR	6681295	Identifier	codep		6679926	1					
ANR	6681296	PrimaryExpression	7		6679926	1					
ANR	6681297	ElseStatement	else		6679926	0					
ANR	6681298	IfStatement	if ( need_modrm )		6679926	0					
ANR	6681299	Condition	need_modrm	599:11:7987:7996	6679926	0	True				
ANR	6681300	Identifier	need_modrm		6679926	0					
ANR	6681301	CompoundStatement		599:4:7954:7954	6679926	1					
ANR	6681302	ExpressionStatement	"fetch_data ( info , codep + 1 )"	603:6:8013:8040	6679926	0	True				
ANR	6681303	CallExpression	"fetch_data ( info , codep + 1 )"		6679926	0					
ANR	6681304	Callee	fetch_data		6679926	0					
ANR	6681305	Identifier	fetch_data		6679926	0					
ANR	6681306	ArgumentList	info		6679926	1					
ANR	6681307	Argument	info		6679926	0					
ANR	6681308	Identifier	info		6679926	0					
ANR	6681309	Argument	codep + 1		6679926	1					
ANR	6681310	AdditiveExpression	codep + 1		6679926	0		+			
ANR	6681311	Identifier	codep		6679926	0					
ANR	6681312	PrimaryExpression	1		6679926	1					
ANR	6681313	ExpressionStatement	modrm . mod = ( * codep >> 6 ) & 3	605:6:8049:8078	6679926	1	True				
ANR	6681314	AssignmentExpression	modrm . mod = ( * codep >> 6 ) & 3		6679926	0		=			
ANR	6681315	MemberAccess	modrm . mod		6679926	0					
ANR	6681316	Identifier	modrm		6679926	0					
ANR	6681317	Identifier	mod		6679926	1					
ANR	6681318	BitAndExpression	( * codep >> 6 ) & 3		6679926	1		&			
ANR	6681319	ShiftExpression	* codep >> 6		6679926	0		>>			
ANR	6681320	UnaryOperationExpression	* codep		6679926	0					
ANR	6681321	UnaryOperator	*		6679926	0					
ANR	6681322	Identifier	codep		6679926	1					
ANR	6681323	PrimaryExpression	6		6679926	1					
ANR	6681324	PrimaryExpression	3		6679926	1					
ANR	6681325	ExpressionStatement	modrm . reg = ( * codep >> 3 ) & 7	607:6:8087:8116	6679926	2	True				
ANR	6681326	AssignmentExpression	modrm . reg = ( * codep >> 3 ) & 7		6679926	0		=			
ANR	6681327	MemberAccess	modrm . reg		6679926	0					
ANR	6681328	Identifier	modrm		6679926	0					
ANR	6681329	Identifier	reg		6679926	1					
ANR	6681330	BitAndExpression	( * codep >> 3 ) & 7		6679926	1		&			
ANR	6681331	ShiftExpression	* codep >> 3		6679926	0		>>			
ANR	6681332	UnaryOperationExpression	* codep		6679926	0					
ANR	6681333	UnaryOperator	*		6679926	0					
ANR	6681334	Identifier	codep		6679926	1					
ANR	6681335	PrimaryExpression	3		6679926	1					
ANR	6681336	PrimaryExpression	7		6679926	1					
ANR	6681337	ExpressionStatement	modrm . rm = * codep & 7	609:6:8125:8146	6679926	3	True				
ANR	6681338	AssignmentExpression	modrm . rm = * codep & 7		6679926	0		=			
ANR	6681339	MemberAccess	modrm . rm		6679926	0					
ANR	6681340	Identifier	modrm		6679926	0					
ANR	6681341	Identifier	rm		6679926	1					
ANR	6681342	BitAndExpression	* codep & 7		6679926	1		&			
ANR	6681343	UnaryOperationExpression	* codep		6679926	0					
ANR	6681344	UnaryOperator	*		6679926	0					
ANR	6681345	Identifier	codep		6679926	1					
ANR	6681346	PrimaryExpression	7		6679926	1					
ANR	6681347	IfStatement	if ( dp -> name == NULL && dp -> op [ 0 ] . bytemode == FLOATCODE )		6679926	44					
ANR	6681348	Condition	dp -> name == NULL && dp -> op [ 0 ] . bytemode == FLOATCODE	615:6:8164:8214	6679926	0	True				
ANR	6681349	AndExpression	dp -> name == NULL && dp -> op [ 0 ] . bytemode == FLOATCODE		6679926	0		&&			
ANR	6681350	EqualityExpression	dp -> name == NULL		6679926	0		==			
ANR	6681351	PtrMemberAccess	dp -> name		6679926	0					
ANR	6681352	Identifier	dp		6679926	0					
ANR	6681353	Identifier	name		6679926	1					
ANR	6681354	Identifier	NULL		6679926	1					
ANR	6681355	EqualityExpression	dp -> op [ 0 ] . bytemode == FLOATCODE		6679926	1		==			
ANR	6681356	MemberAccess	dp -> op [ 0 ] . bytemode		6679926	0					
ANR	6681357	ArrayIndexing	dp -> op [ 0 ]		6679926	0					
ANR	6681358	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681359	Identifier	dp		6679926	0					
ANR	6681360	Identifier	op		6679926	1					
ANR	6681361	PrimaryExpression	0		6679926	1					
ANR	6681362	Identifier	bytemode		6679926	1					
ANR	6681363	Identifier	FLOATCODE		6679926	1					
ANR	6681364	CompoundStatement		615:4:8172:8172	6679926	1					
ANR	6681365	ExpressionStatement	dofloat ( sizeflag )	619:6:8231:8249	6679926	0	True				
ANR	6681366	CallExpression	dofloat ( sizeflag )		6679926	0					
ANR	6681367	Callee	dofloat		6679926	0					
ANR	6681368	Identifier	dofloat		6679926	0					
ANR	6681369	ArgumentList	sizeflag		6679926	1					
ANR	6681370	Argument	sizeflag		6679926	0					
ANR	6681371	Identifier	sizeflag		6679926	0					
ANR	6681372	ElseStatement	else		6679926	0					
ANR	6681373	CompoundStatement		625:6:8230:8239	6679926	0					
ANR	6681374	IdentifierDeclStatement	int index ;	627:6:8280:8289	6679926	0	True				
ANR	6681375	IdentifierDecl	index		6679926	0					
ANR	6681376	IdentifierDeclType	int		6679926	0					
ANR	6681377	Identifier	index		6679926	1					
ANR	6681378	IfStatement	if ( dp -> name == NULL )		6679926	1					
ANR	6681379	Condition	dp -> name == NULL	629:10:8302:8317	6679926	0	True				
ANR	6681380	EqualityExpression	dp -> name == NULL		6679926	0		==			
ANR	6681381	PtrMemberAccess	dp -> name		6679926	0					
ANR	6681382	Identifier	dp		6679926	0					
ANR	6681383	Identifier	name		6679926	1					
ANR	6681384	Identifier	NULL		6679926	1					
ANR	6681385	CompoundStatement		629:1:8272:8272	6679926	1					
ANR	6681386	SwitchStatement	switch ( dp -> op [ 0 ] . bytemode )		6679926	0					
ANR	6681387	Condition	dp -> op [ 0 ] . bytemode	633:11:8336:8353	6679926	0	True				
ANR	6681388	MemberAccess	dp -> op [ 0 ] . bytemode		6679926	0					
ANR	6681389	ArrayIndexing	dp -> op [ 0 ]		6679926	0					
ANR	6681390	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681391	Identifier	dp		6679926	0					
ANR	6681392	Identifier	op		6679926	1					
ANR	6681393	PrimaryExpression	0		6679926	1					
ANR	6681394	Identifier	bytemode		6679926	1					
ANR	6681395	CompoundStatement		633:5:8312:8312	6679926	1					
ANR	6681396	Label	case USE_GROUPS :	637:5:8370:8385	6679926	0	True				
ANR	6681397	Identifier	USE_GROUPS		6679926	0					
ANR	6681398	ExpressionStatement	dp = & grps [ dp -> op [ 1 ] . bytemode ] [ modrm . reg ]	639:7:8395:8436	6679926	1	True				
ANR	6681399	AssignmentExpression	dp = & grps [ dp -> op [ 1 ] . bytemode ] [ modrm . reg ]		6679926	0		=			
ANR	6681400	Identifier	dp		6679926	0					
ANR	6681401	UnaryOperationExpression	& grps [ dp -> op [ 1 ] . bytemode ] [ modrm . reg ]		6679926	1					
ANR	6681402	UnaryOperator	&		6679926	0					
ANR	6681403	ArrayIndexing	grps [ dp -> op [ 1 ] . bytemode ] [ modrm . reg ]		6679926	1					
ANR	6681404	ArrayIndexing	grps [ dp -> op [ 1 ] . bytemode ]		6679926	0					
ANR	6681405	Identifier	grps		6679926	0					
ANR	6681406	MemberAccess	dp -> op [ 1 ] . bytemode		6679926	1					
ANR	6681407	ArrayIndexing	dp -> op [ 1 ]		6679926	0					
ANR	6681408	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681409	Identifier	dp		6679926	0					
ANR	6681410	Identifier	op		6679926	1					
ANR	6681411	PrimaryExpression	1		6679926	1					
ANR	6681412	Identifier	bytemode		6679926	1					
ANR	6681413	MemberAccess	modrm . reg		6679926	1					
ANR	6681414	Identifier	modrm		6679926	0					
ANR	6681415	Identifier	reg		6679926	1					
ANR	6681416	BreakStatement	break ;	641:7:8446:8451	6679926	2	True				
ANR	6681417	Label	case USE_PREFIX_USER_TABLE :	645:5:8461:8487	6679926	3	True				
ANR	6681418	Identifier	USE_PREFIX_USER_TABLE		6679926	0					
ANR	6681419	ExpressionStatement	index = 0	647:7:8497:8506	6679926	4	True				
ANR	6681420	AssignmentExpression	index = 0		6679926	0		=			
ANR	6681421	Identifier	index		6679926	0					
ANR	6681422	PrimaryExpression	0		6679926	1					
ANR	6681423	ExpressionStatement	used_prefixes |= ( prefixes & PREFIX_REPZ )	649:7:8516:8557	6679926	5	True				
ANR	6681424	AssignmentExpression	used_prefixes |= ( prefixes & PREFIX_REPZ )		6679926	0		|=			
ANR	6681425	Identifier	used_prefixes		6679926	0					
ANR	6681426	BitAndExpression	prefixes & PREFIX_REPZ		6679926	1		&			
ANR	6681427	Identifier	prefixes		6679926	0					
ANR	6681428	Identifier	PREFIX_REPZ		6679926	1					
ANR	6681429	IfStatement	if ( prefixes & PREFIX_REPZ )		6679926	6					
ANR	6681430	Condition	prefixes & PREFIX_REPZ	651:11:8571:8592	6679926	0	True				
ANR	6681431	BitAndExpression	prefixes & PREFIX_REPZ		6679926	0		&			
ANR	6681432	Identifier	prefixes		6679926	0					
ANR	6681433	Identifier	PREFIX_REPZ		6679926	1					
ANR	6681434	ExpressionStatement	index = 1	653:2:8598:8607	6679926	1	True				
ANR	6681435	AssignmentExpression	index = 1		6679926	0		=			
ANR	6681436	Identifier	index		6679926	0					
ANR	6681437	PrimaryExpression	1		6679926	1					
ANR	6681438	ElseStatement	else		6679926	0					
ANR	6681439	CompoundStatement		655:2:8575:8575	6679926	0					
ANR	6681440	ExpressionStatement	used_prefixes |= ( prefixes & PREFIX_REPNZ )	663:4:8717:8759	6679926	0	True				
ANR	6681441	AssignmentExpression	used_prefixes |= ( prefixes & PREFIX_REPNZ )		6679926	0		|=			
ANR	6681442	Identifier	used_prefixes		6679926	0					
ANR	6681443	BitAndExpression	prefixes & PREFIX_REPNZ		6679926	1		&			
ANR	6681444	Identifier	prefixes		6679926	0					
ANR	6681445	Identifier	PREFIX_REPNZ		6679926	1					
ANR	6681446	IfStatement	if ( prefixes & PREFIX_REPNZ )		6679926	1					
ANR	6681447	Condition	prefixes & PREFIX_REPNZ	665:8:8770:8792	6679926	0	True				
ANR	6681448	BitAndExpression	prefixes & PREFIX_REPNZ		6679926	0		&			
ANR	6681449	Identifier	prefixes		6679926	0					
ANR	6681450	Identifier	PREFIX_REPNZ		6679926	1					
ANR	6681451	ExpressionStatement	index = 3	667:6:8802:8811	6679926	1	True				
ANR	6681452	AssignmentExpression	index = 3		6679926	0		=			
ANR	6681453	Identifier	index		6679926	0					
ANR	6681454	PrimaryExpression	3		6679926	1					
ANR	6681455	ElseStatement	else		6679926	0					
ANR	6681456	CompoundStatement		669:6:8780:8780	6679926	0					
ANR	6681457	ExpressionStatement	used_prefixes |= ( prefixes & PREFIX_DATA )	673:8:8841:8882	6679926	0	True				
ANR	6681458	AssignmentExpression	used_prefixes |= ( prefixes & PREFIX_DATA )		6679926	0		|=			
ANR	6681459	Identifier	used_prefixes		6679926	0					
ANR	6681460	BitAndExpression	prefixes & PREFIX_DATA		6679926	1		&			
ANR	6681461	Identifier	prefixes		6679926	0					
ANR	6681462	Identifier	PREFIX_DATA		6679926	1					
ANR	6681463	IfStatement	if ( prefixes & PREFIX_DATA )		6679926	1					
ANR	6681464	Condition	prefixes & PREFIX_DATA	675:12:8897:8918	6679926	0	True				
ANR	6681465	BitAndExpression	prefixes & PREFIX_DATA		6679926	0		&			
ANR	6681466	Identifier	prefixes		6679926	0					
ANR	6681467	Identifier	PREFIX_DATA		6679926	1					
ANR	6681468	ExpressionStatement	index = 2	677:3:8925:8934	6679926	1	True				
ANR	6681469	AssignmentExpression	index = 2		6679926	0		=			
ANR	6681470	Identifier	index		6679926	0					
ANR	6681471	PrimaryExpression	2		6679926	1					
ANR	6681472	ExpressionStatement	dp = & prefix_user_table [ dp -> op [ 1 ] . bytemode ] [ index ]	683:7:8958:9008	6679926	7	True				
ANR	6681473	AssignmentExpression	dp = & prefix_user_table [ dp -> op [ 1 ] . bytemode ] [ index ]		6679926	0		=			
ANR	6681474	Identifier	dp		6679926	0					
ANR	6681475	UnaryOperationExpression	& prefix_user_table [ dp -> op [ 1 ] . bytemode ] [ index ]		6679926	1					
ANR	6681476	UnaryOperator	&		6679926	0					
ANR	6681477	ArrayIndexing	prefix_user_table [ dp -> op [ 1 ] . bytemode ] [ index ]		6679926	1					
ANR	6681478	ArrayIndexing	prefix_user_table [ dp -> op [ 1 ] . bytemode ]		6679926	0					
ANR	6681479	Identifier	prefix_user_table		6679926	0					
ANR	6681480	MemberAccess	dp -> op [ 1 ] . bytemode		6679926	1					
ANR	6681481	ArrayIndexing	dp -> op [ 1 ]		6679926	0					
ANR	6681482	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681483	Identifier	dp		6679926	0					
ANR	6681484	Identifier	op		6679926	1					
ANR	6681485	PrimaryExpression	1		6679926	1					
ANR	6681486	Identifier	bytemode		6679926	1					
ANR	6681487	Identifier	index		6679926	1					
ANR	6681488	BreakStatement	break ;	685:7:9018:9023	6679926	8	True				
ANR	6681489	Label	case X86_64_SPECIAL :	689:5:9033:9052	6679926	9	True				
ANR	6681490	Identifier	X86_64_SPECIAL		6679926	0					
ANR	6681491	ExpressionStatement	index = address_mode == mode_64bit ? 1 : 0	691:7:9062:9104	6679926	10	True				
ANR	6681492	AssignmentExpression	index = address_mode == mode_64bit ? 1 : 0		6679926	0		=			
ANR	6681493	Identifier	index		6679926	0					
ANR	6681494	ConditionalExpression	address_mode == mode_64bit ? 1 : 0		6679926	1					
ANR	6681495	Condition	address_mode == mode_64bit		6679926	0					
ANR	6681496	EqualityExpression	address_mode == mode_64bit		6679926	0		==			
ANR	6681497	Identifier	address_mode		6679926	0					
ANR	6681498	Identifier	mode_64bit		6679926	1					
ANR	6681499	PrimaryExpression	1		6679926	1					
ANR	6681500	PrimaryExpression	0		6679926	2					
ANR	6681501	ExpressionStatement	dp = & x86_64_table [ dp -> op [ 1 ] . bytemode ] [ index ]	693:7:9114:9159	6679926	11	True				
ANR	6681502	AssignmentExpression	dp = & x86_64_table [ dp -> op [ 1 ] . bytemode ] [ index ]		6679926	0		=			
ANR	6681503	Identifier	dp		6679926	0					
ANR	6681504	UnaryOperationExpression	& x86_64_table [ dp -> op [ 1 ] . bytemode ] [ index ]		6679926	1					
ANR	6681505	UnaryOperator	&		6679926	0					
ANR	6681506	ArrayIndexing	x86_64_table [ dp -> op [ 1 ] . bytemode ] [ index ]		6679926	1					
ANR	6681507	ArrayIndexing	x86_64_table [ dp -> op [ 1 ] . bytemode ]		6679926	0					
ANR	6681508	Identifier	x86_64_table		6679926	0					
ANR	6681509	MemberAccess	dp -> op [ 1 ] . bytemode		6679926	1					
ANR	6681510	ArrayIndexing	dp -> op [ 1 ]		6679926	0					
ANR	6681511	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681512	Identifier	dp		6679926	0					
ANR	6681513	Identifier	op		6679926	1					
ANR	6681514	PrimaryExpression	1		6679926	1					
ANR	6681515	Identifier	bytemode		6679926	1					
ANR	6681516	Identifier	index		6679926	1					
ANR	6681517	BreakStatement	break ;	695:7:9169:9174	6679926	12	True				
ANR	6681518	Label	default :	699:5:9184:9191	6679926	13	True				
ANR	6681519	Identifier	default		6679926	0					
ANR	6681520	ExpressionStatement	oappend ( INTERNAL_DISASSEMBLER_ERROR )	701:7:9201:9238	6679926	14	True				
ANR	6681521	CallExpression	oappend ( INTERNAL_DISASSEMBLER_ERROR )		6679926	0					
ANR	6681522	Callee	oappend		6679926	0					
ANR	6681523	Identifier	oappend		6679926	0					
ANR	6681524	ArgumentList	INTERNAL_DISASSEMBLER_ERROR		6679926	1					
ANR	6681525	Argument	INTERNAL_DISASSEMBLER_ERROR		6679926	0					
ANR	6681526	Identifier	INTERNAL_DISASSEMBLER_ERROR		6679926	0					
ANR	6681527	BreakStatement	break ;	703:7:9248:9253	6679926	15	True				
ANR	6681528	IfStatement	"if ( putop ( dp -> name , sizeflag ) == 0 )"		6679926	2					
ANR	6681529	Condition	"putop ( dp -> name , sizeflag ) == 0"	711:10:9280:9310	6679926	0	True				
ANR	6681530	EqualityExpression	"putop ( dp -> name , sizeflag ) == 0"		6679926	0		==			
ANR	6681531	CallExpression	"putop ( dp -> name , sizeflag )"		6679926	0					
ANR	6681532	Callee	putop		6679926	0					
ANR	6681533	Identifier	putop		6679926	0					
ANR	6681534	ArgumentList	dp -> name		6679926	1					
ANR	6681535	Argument	dp -> name		6679926	0					
ANR	6681536	PtrMemberAccess	dp -> name		6679926	0					
ANR	6681537	Identifier	dp		6679926	0					
ANR	6681538	Identifier	name		6679926	1					
ANR	6681539	Argument	sizeflag		6679926	1					
ANR	6681540	Identifier	sizeflag		6679926	0					
ANR	6681541	PrimaryExpression	0		6679926	1					
ANR	6681542	CompoundStatement		711:8:9272:9272	6679926	1					
ANR	6681543	ForStatement	for ( i = 0 ; i < MAX_OPERANDS ; ++ i )		6679926	0					
ANR	6681544	ForInit	i = 0 ;	715:8:9333:9338	6679926	0	True				
ANR	6681545	AssignmentExpression	i = 0		6679926	0		=			
ANR	6681546	Identifier	i		6679926	0					
ANR	6681547	PrimaryExpression	0		6679926	1					
ANR	6681548	Condition	i < MAX_OPERANDS	715:15:9340:9355	6679926	1	True				
ANR	6681549	RelationalExpression	i < MAX_OPERANDS		6679926	0		<			
ANR	6681550	Identifier	i		6679926	0					
ANR	6681551	Identifier	MAX_OPERANDS		6679926	1					
ANR	6681552	UnaryExpression	++ i	715:33:9358:9360	6679926	2	True				
ANR	6681553	IncDec	++		6679926	0					
ANR	6681554	Identifier	i		6679926	1					
ANR	6681555	CompoundStatement		715:5:9319:9319	6679926	3					
ANR	6681556	ExpressionStatement	obufp = op_out [ i ]	719:7:9379:9396	6679926	0	True				
ANR	6681557	AssignmentExpression	obufp = op_out [ i ]		6679926	0		=			
ANR	6681558	Identifier	obufp		6679926	0					
ANR	6681559	ArrayIndexing	op_out [ i ]		6679926	1					
ANR	6681560	Identifier	op_out		6679926	0					
ANR	6681561	Identifier	i		6679926	1					
ANR	6681562	ExpressionStatement	op_ad = MAX_OPERANDS - 1 - i	721:7:9406:9434	6679926	1	True				
ANR	6681563	AssignmentExpression	op_ad = MAX_OPERANDS - 1 - i		6679926	0		=			
ANR	6681564	Identifier	op_ad		6679926	0					
ANR	6681565	AdditiveExpression	MAX_OPERANDS - 1 - i		6679926	1		-			
ANR	6681566	Identifier	MAX_OPERANDS		6679926	0					
ANR	6681567	AdditiveExpression	1 - i		6679926	1		-			
ANR	6681568	PrimaryExpression	1		6679926	0					
ANR	6681569	Identifier	i		6679926	1					
ANR	6681570	IfStatement	if ( dp -> op [ i ] . rtn )		6679926	2					
ANR	6681571	Condition	dp -> op [ i ] . rtn	723:11:9448:9460	6679926	0	True				
ANR	6681572	MemberAccess	dp -> op [ i ] . rtn		6679926	0					
ANR	6681573	ArrayIndexing	dp -> op [ i ]		6679926	0					
ANR	6681574	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681575	Identifier	dp		6679926	0					
ANR	6681576	Identifier	op		6679926	1					
ANR	6681577	Identifier	i		6679926	1					
ANR	6681578	Identifier	rtn		6679926	1					
ANR	6681579	ExpressionStatement	"( * dp -> op [ i ] . rtn ) ( dp -> op [ i ] . bytemode , sizeflag )"	725:2:9466:9513	6679926	1	True				
ANR	6681580	CallExpression	"( * dp -> op [ i ] . rtn ) ( dp -> op [ i ] . bytemode , sizeflag )"		6679926	0					
ANR	6681581	Callee	* dp -> op [ i ] . rtn		6679926	0					
ANR	6681582	UnaryOperationExpression	* dp -> op [ i ] . rtn		6679926	0					
ANR	6681583	UnaryOperator	*		6679926	0					
ANR	6681584	MemberAccess	dp -> op [ i ] . rtn		6679926	1					
ANR	6681585	ArrayIndexing	dp -> op [ i ]		6679926	0					
ANR	6681586	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681587	Identifier	dp		6679926	0					
ANR	6681588	Identifier	op		6679926	1					
ANR	6681589	Identifier	i		6679926	1					
ANR	6681590	Identifier	rtn		6679926	1					
ANR	6681591	ArgumentList	dp -> op [ i ] . bytemode		6679926	1					
ANR	6681592	Argument	dp -> op [ i ] . bytemode		6679926	0					
ANR	6681593	MemberAccess	dp -> op [ i ] . bytemode		6679926	0					
ANR	6681594	ArrayIndexing	dp -> op [ i ]		6679926	0					
ANR	6681595	PtrMemberAccess	dp -> op		6679926	0					
ANR	6681596	Identifier	dp		6679926	0					
ANR	6681597	Identifier	op		6679926	1					
ANR	6681598	Identifier	i		6679926	1					
ANR	6681599	Identifier	bytemode		6679926	1					
ANR	6681600	Argument	sizeflag		6679926	1					
ANR	6681601	Identifier	sizeflag		6679926	0					
ANR	6681602	IfStatement	if ( ( prefixes & ~used_prefixes ) != 0 )		6679926	45					
ANR	6681603	Condition	( prefixes & ~used_prefixes ) != 0	743:6:9784:9815	6679926	0	True				
ANR	6681604	EqualityExpression	( prefixes & ~used_prefixes ) != 0		6679926	0		!=			
ANR	6681605	BitAndExpression	prefixes & ~used_prefixes		6679926	0		&			
ANR	6681606	Identifier	prefixes		6679926	0					
ANR	6681607	Identifier	~used_prefixes		6679926	1					
ANR	6681608	PrimaryExpression	0		6679926	1					
ANR	6681609	CompoundStatement		745:6:9782:9798	6679926	1					
ANR	6681610	IdentifierDeclStatement	const char * name ;	747:6:9832:9848	6679926	0	True				
ANR	6681611	IdentifierDecl	* name		6679926	0					
ANR	6681612	IdentifierDeclType	const char *		6679926	0					
ANR	6681613	Identifier	name		6679926	1					
ANR	6681614	ExpressionStatement	"name = prefix_name ( priv . the_buffer [ 0 ] , priv . orig_sizeflag )"	751:6:9859:9918	6679926	1	True				
ANR	6681615	AssignmentExpression	"name = prefix_name ( priv . the_buffer [ 0 ] , priv . orig_sizeflag )"		6679926	0		=			
ANR	6681616	Identifier	name		6679926	0					
ANR	6681617	CallExpression	"prefix_name ( priv . the_buffer [ 0 ] , priv . orig_sizeflag )"		6679926	1					
ANR	6681618	Callee	prefix_name		6679926	0					
ANR	6681619	Identifier	prefix_name		6679926	0					
ANR	6681620	ArgumentList	priv . the_buffer [ 0 ]		6679926	1					
ANR	6681621	Argument	priv . the_buffer [ 0 ]		6679926	0					
ANR	6681622	ArrayIndexing	priv . the_buffer [ 0 ]		6679926	0					
ANR	6681623	MemberAccess	priv . the_buffer		6679926	0					
ANR	6681624	Identifier	priv		6679926	0					
ANR	6681625	Identifier	the_buffer		6679926	1					
ANR	6681626	PrimaryExpression	0		6679926	1					
ANR	6681627	Argument	priv . orig_sizeflag		6679926	1					
ANR	6681628	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6681629	Identifier	priv		6679926	0					
ANR	6681630	Identifier	orig_sizeflag		6679926	1					
ANR	6681631	IfStatement	if ( name == NULL )		6679926	2					
ANR	6681632	Condition	name == NULL	753:10:9931:9942	6679926	0	True				
ANR	6681633	EqualityExpression	name == NULL		6679926	0		==			
ANR	6681634	Identifier	name		6679926	0					
ANR	6681635	Identifier	NULL		6679926	1					
ANR	6681636	ExpressionStatement	name = INTERNAL_DISASSEMBLER_ERROR	755:1:9947:9981	6679926	1	True				
ANR	6681637	AssignmentExpression	name = INTERNAL_DISASSEMBLER_ERROR		6679926	0		=			
ANR	6681638	Identifier	name		6679926	0					
ANR	6681639	Identifier	INTERNAL_DISASSEMBLER_ERROR		6679926	1					
ANR	6681640	ExpressionStatement	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , name )"	757:6:9990:10038	6679926	3	True				
ANR	6681641	CallExpression	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , name )"		6679926	0					
ANR	6681642	Callee	* info -> fprintf_func		6679926	0					
ANR	6681643	UnaryOperationExpression	* info -> fprintf_func		6679926	0					
ANR	6681644	UnaryOperator	*		6679926	0					
ANR	6681645	PtrMemberAccess	info -> fprintf_func		6679926	1					
ANR	6681646	Identifier	info		6679926	0					
ANR	6681647	Identifier	fprintf_func		6679926	1					
ANR	6681648	ArgumentList	info -> stream		6679926	1					
ANR	6681649	Argument	info -> stream		6679926	0					
ANR	6681650	PtrMemberAccess	info -> stream		6679926	0					
ANR	6681651	Identifier	info		6679926	0					
ANR	6681652	Identifier	stream		6679926	1					
ANR	6681653	Argument	"""%s"""		6679926	1					
ANR	6681654	PrimaryExpression	"""%s"""		6679926	0					
ANR	6681655	Argument	name		6679926	2					
ANR	6681656	Identifier	name		6679926	0					
ANR	6681657	ReturnStatement	return 1 ;	759:6:10047:10055	6679926	4	True				
ANR	6681658	PrimaryExpression	1		6679926	0					
ANR	6681659	IfStatement	if ( rex & ~rex_used )		6679926	46					
ANR	6681660	Condition	rex & ~rex_used	763:6:10071:10085	6679926	0	True				
ANR	6681661	BitAndExpression	rex & ~rex_used		6679926	0		&			
ANR	6681662	Identifier	rex		6679926	0					
ANR	6681663	Identifier	~rex_used		6679926	1					
ANR	6681664	CompoundStatement		765:6:10052:10068	6679926	1					
ANR	6681665	IdentifierDeclStatement	const char * name ;	767:6:10102:10118	6679926	0	True				
ANR	6681666	IdentifierDecl	* name		6679926	0					
ANR	6681667	IdentifierDeclType	const char *		6679926	0					
ANR	6681668	Identifier	name		6679926	1					
ANR	6681669	ExpressionStatement	"name = prefix_name ( rex | 0x40 , priv . orig_sizeflag )"	769:6:10127:10178	6679926	1	True				
ANR	6681670	AssignmentExpression	"name = prefix_name ( rex | 0x40 , priv . orig_sizeflag )"		6679926	0		=			
ANR	6681671	Identifier	name		6679926	0					
ANR	6681672	CallExpression	"prefix_name ( rex | 0x40 , priv . orig_sizeflag )"		6679926	1					
ANR	6681673	Callee	prefix_name		6679926	0					
ANR	6681674	Identifier	prefix_name		6679926	0					
ANR	6681675	ArgumentList	rex | 0x40		6679926	1					
ANR	6681676	Argument	rex | 0x40		6679926	0					
ANR	6681677	InclusiveOrExpression	rex | 0x40		6679926	0		|			
ANR	6681678	Identifier	rex		6679926	0					
ANR	6681679	PrimaryExpression	0x40		6679926	1					
ANR	6681680	Argument	priv . orig_sizeflag		6679926	1					
ANR	6681681	MemberAccess	priv . orig_sizeflag		6679926	0					
ANR	6681682	Identifier	priv		6679926	0					
ANR	6681683	Identifier	orig_sizeflag		6679926	1					
ANR	6681684	IfStatement	if ( name == NULL )		6679926	2					
ANR	6681685	Condition	name == NULL	771:10:10191:10202	6679926	0	True				
ANR	6681686	EqualityExpression	name == NULL		6679926	0		==			
ANR	6681687	Identifier	name		6679926	0					
ANR	6681688	Identifier	NULL		6679926	1					
ANR	6681689	ExpressionStatement	name = INTERNAL_DISASSEMBLER_ERROR	773:1:10207:10241	6679926	1	True				
ANR	6681690	AssignmentExpression	name = INTERNAL_DISASSEMBLER_ERROR		6679926	0		=			
ANR	6681691	Identifier	name		6679926	0					
ANR	6681692	Identifier	INTERNAL_DISASSEMBLER_ERROR		6679926	1					
ANR	6681693	ExpressionStatement	"( * info -> fprintf_func ) ( info -> stream , ""%s "" , name )"	775:6:10250:10299	6679926	3	True				
ANR	6681694	CallExpression	"( * info -> fprintf_func ) ( info -> stream , ""%s "" , name )"		6679926	0					
ANR	6681695	Callee	* info -> fprintf_func		6679926	0					
ANR	6681696	UnaryOperationExpression	* info -> fprintf_func		6679926	0					
ANR	6681697	UnaryOperator	*		6679926	0					
ANR	6681698	PtrMemberAccess	info -> fprintf_func		6679926	1					
ANR	6681699	Identifier	info		6679926	0					
ANR	6681700	Identifier	fprintf_func		6679926	1					
ANR	6681701	ArgumentList	info -> stream		6679926	1					
ANR	6681702	Argument	info -> stream		6679926	0					
ANR	6681703	PtrMemberAccess	info -> stream		6679926	0					
ANR	6681704	Identifier	info		6679926	0					
ANR	6681705	Identifier	stream		6679926	1					
ANR	6681706	Argument	"""%s """		6679926	1					
ANR	6681707	PrimaryExpression	"""%s """		6679926	0					
ANR	6681708	Argument	name		6679926	2					
ANR	6681709	Identifier	name		6679926	0					
ANR	6681710	ExpressionStatement	obufp = obuf + strlen ( obuf )	781:2:10313:10341	6679926	47	True				
ANR	6681711	AssignmentExpression	obufp = obuf + strlen ( obuf )		6679926	0		=			
ANR	6681712	Identifier	obufp		6679926	0					
ANR	6681713	AdditiveExpression	obuf + strlen ( obuf )		6679926	1		+			
ANR	6681714	Identifier	obuf		6679926	0					
ANR	6681715	CallExpression	strlen ( obuf )		6679926	1					
ANR	6681716	Callee	strlen		6679926	0					
ANR	6681717	Identifier	strlen		6679926	0					
ANR	6681718	ArgumentList	obuf		6679926	1					
ANR	6681719	Argument	obuf		6679926	0					
ANR	6681720	Identifier	obuf		6679926	0					
ANR	6681721	ForStatement	for ( i = strlen ( obuf ) ; i < 6 ; i ++ )		6679926	48					
ANR	6681722	ForInit	i = strlen ( obuf ) ;	783:7:10351:10368	6679926	0	True				
ANR	6681723	AssignmentExpression	i = strlen ( obuf )		6679926	0		=			
ANR	6681724	Identifier	i		6679926	0					
ANR	6681725	CallExpression	strlen ( obuf )		6679926	1					
ANR	6681726	Callee	strlen		6679926	0					
ANR	6681727	Identifier	strlen		6679926	0					
ANR	6681728	ArgumentList	obuf		6679926	1					
ANR	6681729	Argument	obuf		6679926	0					
ANR	6681730	Identifier	obuf		6679926	0					
ANR	6681731	Condition	i < 6	783:26:10370:10374	6679926	1	True				
ANR	6681732	RelationalExpression	i < 6		6679926	0		<			
ANR	6681733	Identifier	i		6679926	0					
ANR	6681734	PrimaryExpression	6		6679926	1					
ANR	6681735	PostIncDecOperationExpression	i ++	783:33:10377:10379	6679926	2	True				
ANR	6681736	Identifier	i		6679926	0					
ANR	6681737	IncDec	++		6679926	1					
ANR	6681738	ExpressionStatement	"oappend ( "" "" )"	785:4:10387:10400	6679926	3	True				
ANR	6681739	CallExpression	"oappend ( "" "" )"		6679926	0					
ANR	6681740	Callee	oappend		6679926	0					
ANR	6681741	Identifier	oappend		6679926	0					
ANR	6681742	ArgumentList	""" """		6679926	1					
ANR	6681743	Argument	""" """		6679926	0					
ANR	6681744	PrimaryExpression	""" """		6679926	0					
ANR	6681745	ExpressionStatement	"oappend ( "" "" )"	787:2:10405:10418	6679926	49	True				
ANR	6681746	CallExpression	"oappend ( "" "" )"		6679926	0					
ANR	6681747	Callee	oappend		6679926	0					
ANR	6681748	Identifier	oappend		6679926	0					
ANR	6681749	ArgumentList	""" """		6679926	1					
ANR	6681750	Argument	""" """		6679926	0					
ANR	6681751	PrimaryExpression	""" """		6679926	0					
ANR	6681752	ExpressionStatement	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , obuf )"	789:2:10423:10471	6679926	50	True				
ANR	6681753	CallExpression	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , obuf )"		6679926	0					
ANR	6681754	Callee	* info -> fprintf_func		6679926	0					
ANR	6681755	UnaryOperationExpression	* info -> fprintf_func		6679926	0					
ANR	6681756	UnaryOperator	*		6679926	0					
ANR	6681757	PtrMemberAccess	info -> fprintf_func		6679926	1					
ANR	6681758	Identifier	info		6679926	0					
ANR	6681759	Identifier	fprintf_func		6679926	1					
ANR	6681760	ArgumentList	info -> stream		6679926	1					
ANR	6681761	Argument	info -> stream		6679926	0					
ANR	6681762	PtrMemberAccess	info -> stream		6679926	0					
ANR	6681763	Identifier	info		6679926	0					
ANR	6681764	Identifier	stream		6679926	1					
ANR	6681765	Argument	"""%s"""		6679926	1					
ANR	6681766	PrimaryExpression	"""%s"""		6679926	0					
ANR	6681767	Argument	obuf		6679926	2					
ANR	6681768	Identifier	obuf		6679926	0					
ANR	6681769	IfStatement	if ( intel_syntax || two_source_ops )		6679926	51					
ANR	6681770	Condition	intel_syntax || two_source_ops	797:6:10639:10668	6679926	0	True				
ANR	6681771	OrExpression	intel_syntax || two_source_ops		6679926	0		||			
ANR	6681772	Identifier	intel_syntax		6679926	0					
ANR	6681773	Identifier	two_source_ops		6679926	1					
ANR	6681774	CompoundStatement		799:6:10635:10649	6679926	1					
ANR	6681775	IdentifierDeclStatement	bfd_vma riprel ;	801:6:10685:10699	6679926	0	True				
ANR	6681776	IdentifierDecl	riprel		6679926	0					
ANR	6681777	IdentifierDeclType	bfd_vma		6679926	0					
ANR	6681778	Identifier	riprel		6679926	1					
ANR	6681779	ForStatement	for ( i = 0 ; i < MAX_OPERANDS ; ++ i )		6679926	1					
ANR	6681780	ForInit	i = 0 ;	805:11:10715:10720	6679926	0	True				
ANR	6681781	AssignmentExpression	i = 0		6679926	0		=			
ANR	6681782	Identifier	i		6679926	0					
ANR	6681783	PrimaryExpression	0		6679926	1					
ANR	6681784	Condition	i < MAX_OPERANDS	805:18:10722:10737	6679926	1	True				
ANR	6681785	RelationalExpression	i < MAX_OPERANDS		6679926	0		<			
ANR	6681786	Identifier	i		6679926	0					
ANR	6681787	Identifier	MAX_OPERANDS		6679926	1					
ANR	6681788	UnaryExpression	++ i	805:36:10740:10742	6679926	2	True				
ANR	6681789	IncDec	++		6679926	0					
ANR	6681790	Identifier	i		6679926	1					
ANR	6681791	ExpressionStatement	op_txt [ i ] = op_out [ i ]	807:8:10754:10775	6679926	3	True				
ANR	6681792	AssignmentExpression	op_txt [ i ] = op_out [ i ]		6679926	0		=			
ANR	6681793	ArrayIndexing	op_txt [ i ]		6679926	0					
ANR	6681794	Identifier	op_txt		6679926	0					
ANR	6681795	Identifier	i		6679926	1					
ANR	6681796	ArrayIndexing	op_out [ i ]		6679926	1					
ANR	6681797	Identifier	op_out		6679926	0					
ANR	6681798	Identifier	i		6679926	1					
ANR	6681799	ForStatement	for ( i = 0 ; i < ( MAX_OPERANDS >> 1 ) ; ++ i )		6679926	2					
ANR	6681800	ForInit	i = 0 ;	811:11:10791:10796	6679926	0	True				
ANR	6681801	AssignmentExpression	i = 0		6679926	0		=			
ANR	6681802	Identifier	i		6679926	0					
ANR	6681803	PrimaryExpression	0		6679926	1					
ANR	6681804	Condition	i < ( MAX_OPERANDS >> 1 )	811:18:10798:10820	6679926	1	True				
ANR	6681805	RelationalExpression	i < ( MAX_OPERANDS >> 1 )		6679926	0		<			
ANR	6681806	Identifier	i		6679926	0					
ANR	6681807	ShiftExpression	MAX_OPERANDS >> 1		6679926	1		>>			
ANR	6681808	Identifier	MAX_OPERANDS		6679926	0					
ANR	6681809	PrimaryExpression	1		6679926	1					
ANR	6681810	UnaryExpression	++ i	811:43:10823:10825	6679926	2	True				
ANR	6681811	IncDec	++		6679926	0					
ANR	6681812	Identifier	i		6679926	1					
ANR	6681813	CompoundStatement		811:1:10780:10780	6679926	3					
ANR	6681814	ExpressionStatement	op_ad = op_index [ i ]	815:10:10843:10862	6679926	0	True				
ANR	6681815	AssignmentExpression	op_ad = op_index [ i ]		6679926	0		=			
ANR	6681816	Identifier	op_ad		6679926	0					
ANR	6681817	ArrayIndexing	op_index [ i ]		6679926	1					
ANR	6681818	Identifier	op_index		6679926	0					
ANR	6681819	Identifier	i		6679926	1					
ANR	6681820	ExpressionStatement	op_index [ i ] = op_index [ MAX_OPERANDS - 1 - i ]	817:10:10875:10919	6679926	1	True				
ANR	6681821	AssignmentExpression	op_index [ i ] = op_index [ MAX_OPERANDS - 1 - i ]		6679926	0		=			
ANR	6681822	ArrayIndexing	op_index [ i ]		6679926	0					
ANR	6681823	Identifier	op_index		6679926	0					
ANR	6681824	Identifier	i		6679926	1					
ANR	6681825	ArrayIndexing	op_index [ MAX_OPERANDS - 1 - i ]		6679926	1					
ANR	6681826	Identifier	op_index		6679926	0					
ANR	6681827	AdditiveExpression	MAX_OPERANDS - 1 - i		6679926	1		-			
ANR	6681828	Identifier	MAX_OPERANDS		6679926	0					
ANR	6681829	AdditiveExpression	1 - i		6679926	1		-			
ANR	6681830	PrimaryExpression	1		6679926	0					
ANR	6681831	Identifier	i		6679926	1					
ANR	6681832	ExpressionStatement	op_index [ MAX_OPERANDS - 1 - i ] = op_ad	819:10:10932:10970	6679926	2	True				
ANR	6681833	AssignmentExpression	op_index [ MAX_OPERANDS - 1 - i ] = op_ad		6679926	0		=			
ANR	6681834	ArrayIndexing	op_index [ MAX_OPERANDS - 1 - i ]		6679926	0					
ANR	6681835	Identifier	op_index		6679926	0					
ANR	6681836	AdditiveExpression	MAX_OPERANDS - 1 - i		6679926	1		-			
ANR	6681837	Identifier	MAX_OPERANDS		6679926	0					
ANR	6681838	AdditiveExpression	1 - i		6679926	1		-			
ANR	6681839	PrimaryExpression	1		6679926	0					
ANR	6681840	Identifier	i		6679926	1					
ANR	6681841	Identifier	op_ad		6679926	1					
ANR	6681842	ExpressionStatement	riprel = op_riprel [ i ]	821:3:10976:10997	6679926	3	True				
ANR	6681843	AssignmentExpression	riprel = op_riprel [ i ]		6679926	0		=			
ANR	6681844	Identifier	riprel		6679926	0					
ANR	6681845	ArrayIndexing	op_riprel [ i ]		6679926	1					
ANR	6681846	Identifier	op_riprel		6679926	0					
ANR	6681847	Identifier	i		6679926	1					
ANR	6681848	ExpressionStatement	op_riprel [ i ] = op_riprel [ MAX_OPERANDS - 1 - i ]	823:3:11003:11050	6679926	4	True				
ANR	6681849	AssignmentExpression	op_riprel [ i ] = op_riprel [ MAX_OPERANDS - 1 - i ]		6679926	0		=			
ANR	6681850	ArrayIndexing	op_riprel [ i ]		6679926	0					
ANR	6681851	Identifier	op_riprel		6679926	0					
ANR	6681852	Identifier	i		6679926	1					
ANR	6681853	ArrayIndexing	op_riprel [ MAX_OPERANDS - 1 - i ]		6679926	1					
ANR	6681854	Identifier	op_riprel		6679926	0					
ANR	6681855	AdditiveExpression	MAX_OPERANDS - 1 - i		6679926	1		-			
ANR	6681856	Identifier	MAX_OPERANDS		6679926	0					
ANR	6681857	AdditiveExpression	1 - i		6679926	1		-			
ANR	6681858	PrimaryExpression	1		6679926	0					
ANR	6681859	Identifier	i		6679926	1					
ANR	6681860	ExpressionStatement	op_riprel [ MAX_OPERANDS - 1 - i ] = riprel	825:3:11056:11096	6679926	5	True				
ANR	6681861	AssignmentExpression	op_riprel [ MAX_OPERANDS - 1 - i ] = riprel		6679926	0		=			
ANR	6681862	ArrayIndexing	op_riprel [ MAX_OPERANDS - 1 - i ]		6679926	0					
ANR	6681863	Identifier	op_riprel		6679926	0					
ANR	6681864	AdditiveExpression	MAX_OPERANDS - 1 - i		6679926	1		-			
ANR	6681865	Identifier	MAX_OPERANDS		6679926	0					
ANR	6681866	AdditiveExpression	1 - i		6679926	1		-			
ANR	6681867	PrimaryExpression	1		6679926	0					
ANR	6681868	Identifier	i		6679926	1					
ANR	6681869	Identifier	riprel		6679926	1					
ANR	6681870	ElseStatement	else		6679926	0					
ANR	6681871	CompoundStatement		831:4:11072:11072	6679926	0					
ANR	6681872	ForStatement	for ( i = 0 ; i < MAX_OPERANDS ; ++ i )		6679926	0					
ANR	6681873	ForInit	i = 0 ;	835:11:11136:11141	6679926	0	True				
ANR	6681874	AssignmentExpression	i = 0		6679926	0		=			
ANR	6681875	Identifier	i		6679926	0					
ANR	6681876	PrimaryExpression	0		6679926	1					
ANR	6681877	Condition	i < MAX_OPERANDS	835:18:11143:11158	6679926	1	True				
ANR	6681878	RelationalExpression	i < MAX_OPERANDS		6679926	0		<			
ANR	6681879	Identifier	i		6679926	0					
ANR	6681880	Identifier	MAX_OPERANDS		6679926	1					
ANR	6681881	UnaryExpression	++ i	835:36:11161:11163	6679926	2	True				
ANR	6681882	IncDec	++		6679926	0					
ANR	6681883	Identifier	i		6679926	1					
ANR	6681884	ExpressionStatement	op_txt [ MAX_OPERANDS - 1 - i ] = op_out [ i ]	837:8:11175:11215	6679926	3	True				
ANR	6681885	AssignmentExpression	op_txt [ MAX_OPERANDS - 1 - i ] = op_out [ i ]		6679926	0		=			
ANR	6681886	ArrayIndexing	op_txt [ MAX_OPERANDS - 1 - i ]		6679926	0					
ANR	6681887	Identifier	op_txt		6679926	0					
ANR	6681888	AdditiveExpression	MAX_OPERANDS - 1 - i		6679926	1		-			
ANR	6681889	Identifier	MAX_OPERANDS		6679926	0					
ANR	6681890	AdditiveExpression	1 - i		6679926	1		-			
ANR	6681891	PrimaryExpression	1		6679926	0					
ANR	6681892	Identifier	i		6679926	1					
ANR	6681893	ArrayIndexing	op_out [ i ]		6679926	1					
ANR	6681894	Identifier	op_out		6679926	0					
ANR	6681895	Identifier	i		6679926	1					
ANR	6681896	ExpressionStatement	needcomma = 0	843:2:11229:11242	6679926	52	True				
ANR	6681897	AssignmentExpression	needcomma = 0		6679926	0		=			
ANR	6681898	Identifier	needcomma		6679926	0					
ANR	6681899	PrimaryExpression	0		6679926	1					
ANR	6681900	ForStatement	for ( i = 0 ; i < MAX_OPERANDS ; ++ i )		6679926	53					
ANR	6681901	ForInit	i = 0 ;	845:7:11252:11257	6679926	0	True				
ANR	6681902	AssignmentExpression	i = 0		6679926	0		=			
ANR	6681903	Identifier	i		6679926	0					
ANR	6681904	PrimaryExpression	0		6679926	1					
ANR	6681905	Condition	i < MAX_OPERANDS	845:14:11259:11274	6679926	1	True				
ANR	6681906	RelationalExpression	i < MAX_OPERANDS		6679926	0		<			
ANR	6681907	Identifier	i		6679926	0					
ANR	6681908	Identifier	MAX_OPERANDS		6679926	1					
ANR	6681909	UnaryExpression	++ i	845:32:11277:11279	6679926	2	True				
ANR	6681910	IncDec	++		6679926	0					
ANR	6681911	Identifier	i		6679926	1					
ANR	6681912	IfStatement	if ( * op_txt [ i ] )		6679926	3					
ANR	6681913	Condition	* op_txt [ i ]	847:8:11291:11300	6679926	0	True				
ANR	6681914	UnaryOperationExpression	* op_txt [ i ]		6679926	0					
ANR	6681915	UnaryOperator	*		6679926	0					
ANR	6681916	ArrayIndexing	op_txt [ i ]		6679926	1					
ANR	6681917	Identifier	op_txt		6679926	0					
ANR	6681918	Identifier	i		6679926	1					
ANR	6681919	CompoundStatement		847:6:11260:11260	6679926	1					
ANR	6681920	IfStatement	if ( needcomma )		6679926	0					
ANR	6681921	Condition	needcomma	851:5:11318:11326	6679926	0	True				
ANR	6681922	Identifier	needcomma		6679926	0					
ANR	6681923	ExpressionStatement	"( * info -> fprintf_func ) ( info -> stream , "","" )"	853:3:11333:11374	6679926	1	True				
ANR	6681924	CallExpression	"( * info -> fprintf_func ) ( info -> stream , "","" )"		6679926	0					
ANR	6681925	Callee	* info -> fprintf_func		6679926	0					
ANR	6681926	UnaryOperationExpression	* info -> fprintf_func		6679926	0					
ANR	6681927	UnaryOperator	*		6679926	0					
ANR	6681928	PtrMemberAccess	info -> fprintf_func		6679926	1					
ANR	6681929	Identifier	info		6679926	0					
ANR	6681930	Identifier	fprintf_func		6679926	1					
ANR	6681931	ArgumentList	info -> stream		6679926	1					
ANR	6681932	Argument	info -> stream		6679926	0					
ANR	6681933	PtrMemberAccess	info -> stream		6679926	0					
ANR	6681934	Identifier	info		6679926	0					
ANR	6681935	Identifier	stream		6679926	1					
ANR	6681936	Argument	""","""		6679926	1					
ANR	6681937	PrimaryExpression	""","""		6679926	0					
ANR	6681938	IfStatement	if ( op_index [ i ] != - 1 && ! op_riprel [ i ] )		6679926	1					
ANR	6681939	Condition	op_index [ i ] != - 1 && ! op_riprel [ i ]	855:5:11382:11415	6679926	0	True				
ANR	6681940	AndExpression	op_index [ i ] != - 1 && ! op_riprel [ i ]		6679926	0		&&			
ANR	6681941	EqualityExpression	op_index [ i ] != - 1		6679926	0		!=			
ANR	6681942	ArrayIndexing	op_index [ i ]		6679926	0					
ANR	6681943	Identifier	op_index		6679926	0					
ANR	6681944	Identifier	i		6679926	1					
ANR	6681945	UnaryOperationExpression	- 1		6679926	1					
ANR	6681946	UnaryOperator	-		6679926	0					
ANR	6681947	PrimaryExpression	1		6679926	1					
ANR	6681948	UnaryOperationExpression	! op_riprel [ i ]		6679926	1					
ANR	6681949	UnaryOperator	!		6679926	0					
ANR	6681950	ArrayIndexing	op_riprel [ i ]		6679926	1					
ANR	6681951	Identifier	op_riprel		6679926	0					
ANR	6681952	Identifier	i		6679926	1					
ANR	6681953	ExpressionStatement	"( * info -> print_address_func ) ( ( bfd_vma ) op_address [ op_index [ i ] ] , info )"	857:3:11422:11491	6679926	1	True				
ANR	6681954	CallExpression	"( * info -> print_address_func ) ( ( bfd_vma ) op_address [ op_index [ i ] ] , info )"		6679926	0					
ANR	6681955	Callee	* info -> print_address_func		6679926	0					
ANR	6681956	UnaryOperationExpression	* info -> print_address_func		6679926	0					
ANR	6681957	UnaryOperator	*		6679926	0					
ANR	6681958	PtrMemberAccess	info -> print_address_func		6679926	1					
ANR	6681959	Identifier	info		6679926	0					
ANR	6681960	Identifier	print_address_func		6679926	1					
ANR	6681961	ArgumentList	( bfd_vma ) op_address [ op_index [ i ] ]		6679926	1					
ANR	6681962	Argument	( bfd_vma ) op_address [ op_index [ i ] ]		6679926	0					
ANR	6681963	CastExpression	( bfd_vma ) op_address [ op_index [ i ] ]		6679926	0					
ANR	6681964	CastTarget	bfd_vma		6679926	0					
ANR	6681965	ArrayIndexing	op_address [ op_index [ i ] ]		6679926	1					
ANR	6681966	Identifier	op_address		6679926	0					
ANR	6681967	ArrayIndexing	op_index [ i ]		6679926	1					
ANR	6681968	Identifier	op_index		6679926	0					
ANR	6681969	Identifier	i		6679926	1					
ANR	6681970	Argument	info		6679926	1					
ANR	6681971	Identifier	info		6679926	0					
ANR	6681972	ElseStatement	else		6679926	0					
ANR	6681973	ExpressionStatement	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , op_txt [ i ] )"	861:3:11504:11557	6679926	0	True				
ANR	6681974	CallExpression	"( * info -> fprintf_func ) ( info -> stream , ""%s"" , op_txt [ i ] )"		6679926	0					
ANR	6681975	Callee	* info -> fprintf_func		6679926	0					
ANR	6681976	UnaryOperationExpression	* info -> fprintf_func		6679926	0					
ANR	6681977	UnaryOperator	*		6679926	0					
ANR	6681978	PtrMemberAccess	info -> fprintf_func		6679926	1					
ANR	6681979	Identifier	info		6679926	0					
ANR	6681980	Identifier	fprintf_func		6679926	1					
ANR	6681981	ArgumentList	info -> stream		6679926	1					
ANR	6681982	Argument	info -> stream		6679926	0					
ANR	6681983	PtrMemberAccess	info -> stream		6679926	0					
ANR	6681984	Identifier	info		6679926	0					
ANR	6681985	Identifier	stream		6679926	1					
ANR	6681986	Argument	"""%s"""		6679926	1					
ANR	6681987	PrimaryExpression	"""%s"""		6679926	0					
ANR	6681988	Argument	op_txt [ i ]		6679926	2					
ANR	6681989	ArrayIndexing	op_txt [ i ]		6679926	0					
ANR	6681990	Identifier	op_txt		6679926	0					
ANR	6681991	Identifier	i		6679926	1					
ANR	6681992	ExpressionStatement	needcomma = 1	863:1:11561:11574	6679926	2	True				
ANR	6681993	AssignmentExpression	needcomma = 1		6679926	0		=			
ANR	6681994	Identifier	needcomma		6679926	0					
ANR	6681995	PrimaryExpression	1		6679926	1					
ANR	6681996	ForStatement	for ( i = 0 ; i < MAX_OPERANDS ; i ++ )		6679926	54					
ANR	6681997	ForInit	i = 0 ;	869:7:11595:11600	6679926	0	True				
ANR	6681998	AssignmentExpression	i = 0		6679926	0		=			
ANR	6681999	Identifier	i		6679926	0					
ANR	6682000	PrimaryExpression	0		6679926	1					
ANR	6682001	Condition	i < MAX_OPERANDS	869:14:11602:11617	6679926	1	True				
ANR	6682002	RelationalExpression	i < MAX_OPERANDS		6679926	0		<			
ANR	6682003	Identifier	i		6679926	0					
ANR	6682004	Identifier	MAX_OPERANDS		6679926	1					
ANR	6682005	PostIncDecOperationExpression	i ++	869:32:11620:11622	6679926	2	True				
ANR	6682006	Identifier	i		6679926	0					
ANR	6682007	IncDec	++		6679926	1					
ANR	6682008	IfStatement	if ( op_index [ i ] != - 1 && op_riprel [ i ] )		6679926	3					
ANR	6682009	Condition	op_index [ i ] != - 1 && op_riprel [ i ]	871:8:11634:11666	6679926	0	True				
ANR	6682010	AndExpression	op_index [ i ] != - 1 && op_riprel [ i ]		6679926	0		&&			
ANR	6682011	EqualityExpression	op_index [ i ] != - 1		6679926	0		!=			
ANR	6682012	ArrayIndexing	op_index [ i ]		6679926	0					
ANR	6682013	Identifier	op_index		6679926	0					
ANR	6682014	Identifier	i		6679926	1					
ANR	6682015	UnaryOperationExpression	- 1		6679926	1					
ANR	6682016	UnaryOperator	-		6679926	0					
ANR	6682017	PrimaryExpression	1		6679926	1					
ANR	6682018	ArrayIndexing	op_riprel [ i ]		6679926	1					
ANR	6682019	Identifier	op_riprel		6679926	0					
ANR	6682020	Identifier	i		6679926	1					
ANR	6682021	CompoundStatement		871:6:11626:11626	6679926	1					
ANR	6682022	ExpressionStatement	"( * info -> fprintf_func ) ( info -> stream , ""        # "" )"	875:1:11680:11730	6679926	0	True				
ANR	6682023	CallExpression	"( * info -> fprintf_func ) ( info -> stream , ""        # "" )"		6679926	0					
ANR	6682024	Callee	* info -> fprintf_func		6679926	0					
ANR	6682025	UnaryOperationExpression	* info -> fprintf_func		6679926	0					
ANR	6682026	UnaryOperator	*		6679926	0					
ANR	6682027	PtrMemberAccess	info -> fprintf_func		6679926	1					
ANR	6682028	Identifier	info		6679926	0					
ANR	6682029	Identifier	fprintf_func		6679926	1					
ANR	6682030	ArgumentList	info -> stream		6679926	1					
ANR	6682031	Argument	info -> stream		6679926	0					
ANR	6682032	PtrMemberAccess	info -> stream		6679926	0					
ANR	6682033	Identifier	info		6679926	0					
ANR	6682034	Identifier	stream		6679926	1					
ANR	6682035	Argument	"""        # """		6679926	1					
ANR	6682036	PrimaryExpression	"""        # """		6679926	0					
ANR	6682037	ExpressionStatement	"( * info -> print_address_func ) ( ( bfd_vma ) ( start_pc + codep - start_codep + op_address [ op_index [ i ] ] ) , info )"	877:1:11734:11845	6679926	1	True				
ANR	6682038	CallExpression	"( * info -> print_address_func ) ( ( bfd_vma ) ( start_pc + codep - start_codep + op_address [ op_index [ i ] ] ) , info )"		6679926	0					
ANR	6682039	Callee	* info -> print_address_func		6679926	0					
ANR	6682040	UnaryOperationExpression	* info -> print_address_func		6679926	0					
ANR	6682041	UnaryOperator	*		6679926	0					
ANR	6682042	PtrMemberAccess	info -> print_address_func		6679926	1					
ANR	6682043	Identifier	info		6679926	0					
ANR	6682044	Identifier	print_address_func		6679926	1					
ANR	6682045	ArgumentList	( bfd_vma ) ( start_pc + codep - start_codep + op_address [ op_index [ i ] ] )		6679926	1					
ANR	6682046	Argument	( bfd_vma ) ( start_pc + codep - start_codep + op_address [ op_index [ i ] ] )		6679926	0					
ANR	6682047	CastExpression	( bfd_vma ) ( start_pc + codep - start_codep + op_address [ op_index [ i ] ] )		6679926	0					
ANR	6682048	CastTarget	bfd_vma		6679926	0					
ANR	6682049	AdditiveExpression	start_pc + codep - start_codep + op_address [ op_index [ i ] ]		6679926	1		+			
ANR	6682050	Identifier	start_pc		6679926	0					
ANR	6682051	AdditiveExpression	codep - start_codep + op_address [ op_index [ i ] ]		6679926	1		-			
ANR	6682052	Identifier	codep		6679926	0					
ANR	6682053	AdditiveExpression	start_codep + op_address [ op_index [ i ] ]		6679926	1		+			
ANR	6682054	Identifier	start_codep		6679926	0					
ANR	6682055	ArrayIndexing	op_address [ op_index [ i ] ]		6679926	1					
ANR	6682056	Identifier	op_address		6679926	0					
ANR	6682057	ArrayIndexing	op_index [ i ]		6679926	1					
ANR	6682058	Identifier	op_index		6679926	0					
ANR	6682059	Identifier	i		6679926	1					
ANR	6682060	Argument	info		6679926	1					
ANR	6682061	Identifier	info		6679926	0					
ANR	6682062	BreakStatement	break ;	881:1:11849:11854	6679926	2	True				
ANR	6682063	ReturnStatement	return codep - priv . the_buffer ;	885:2:11868:11898	6679926	55	True				
ANR	6682064	AdditiveExpression	codep - priv . the_buffer		6679926	0		-			
ANR	6682065	Identifier	codep		6679926	0					
ANR	6682066	MemberAccess	priv . the_buffer		6679926	1					
ANR	6682067	Identifier	priv		6679926	0					
ANR	6682068	Identifier	the_buffer		6679926	1					
ANR	6682069	Identifier	print_insn		6679926	1					
ANR	6682070	ParameterList	"bfd_vma pc , disassemble_info * info"		6679926	2					
ANR	6682071	Parameter	bfd_vma pc	1:12:12:21	6679926	0	True				
ANR	6682072	ParameterType	bfd_vma		6679926	0					
ANR	6682073	Identifier	pc		6679926	1					
ANR	6682074	Parameter	disassemble_info * info	1:24:24:45	6679926	1	True				
ANR	6682075	ParameterType	disassemble_info *		6679926	0					
ANR	6682076	Identifier	info		6679926	1					
ANR	6682077	CFGEntryNode	ENTRY		6679926		True				
ANR	6682078	CFGExitNode	EXIT		6679926		True				
ANR	6682079	Symbol	priv . insn_start		6679926						
ANR	6682080	Symbol	names32		6679926						
ANR	6682081	Symbol	prefix_name		6679926						
ANR	6682082	Symbol	v_mode		6679926						
ANR	6682083	Symbol	obufp		6679926						
ANR	6682084	Symbol	att_names8rex		6679926						
ANR	6682085	Symbol	dp -> name		6679926						
ANR	6682086	Symbol	open_char		6679926						
ANR	6682087	Symbol	* twobyte_uses_REPZ_prefix		6679926						
ANR	6682088	Symbol	strchr		6679926						
ANR	6682089	Symbol	modrm . reg		6679926						
ANR	6682090	Symbol	mode_32bit		6679926						
ANR	6682091	Symbol	info -> fprintf_func		6679926						
ANR	6682092	Symbol	PREFIX_FWAIT		6679926						
ANR	6682093	Symbol	bfd_mach_x86_64		6679926						
ANR	6682094	Symbol	SUFFIX_ALWAYS		6679926						
ANR	6682095	Symbol	* x86_64_table		6679926						
ANR	6682096	Symbol	* onebyte_has_modrm		6679926						
ANR	6682097	Symbol	strncmp		6679926						
ANR	6682098	Symbol	op_ad		6679926						
ANR	6682099	Symbol	~DFLAG		6679926						
ANR	6682100	Symbol	* * * dp		6679926						
ANR	6682101	Symbol	* threebyte_0x3a_uses_DATA_prefix		6679926						
ANR	6682102	Symbol	priv . orig_sizeflag		6679926						
ANR	6682103	Symbol	mode_64bit		6679926						
ANR	6682104	Symbol	PREFIX_DATA		6679926						
ANR	6682105	Symbol	dp -> op [ 2 ] . bytemode		6679926						
ANR	6682106	Symbol	grps		6679926						
ANR	6682107	Symbol	~used_prefixes		6679926						
ANR	6682108	Symbol	bfd_mach_i386_i386		6679926						
ANR	6682109	Symbol	intel_names64		6679926						
ANR	6682110	Symbol	* MAX_OPERANDS		6679926						
ANR	6682111	Symbol	* op_index		6679926						
ANR	6682112	Symbol	threebyte_0x38_uses_REPNZ_prefix		6679926						
ANR	6682113	Symbol	loop_jcxz_mode		6679926						
ANR	6682114	Symbol	* dp -> op		6679926						
ANR	6682115	Symbol	index		6679926						
ANR	6682116	Symbol	* * op_index		6679926						
ANR	6682117	Symbol	close_char		6679926						
ANR	6682118	Symbol	att_names32		6679926						
ANR	6682119	Symbol	* prefix_user_table		6679926						
ANR	6682120	Symbol	op_out		6679926						
ANR	6682121	Symbol	used_prefixes		6679926						
ANR	6682122	Symbol	twobyte_has_modrm		6679926						
ANR	6682123	Symbol	insn_codep		6679926						
ANR	6682124	Symbol	bfd_mach_i386_i8086		6679926						
ANR	6682125	Symbol	twobyte_uses_REPNZ_prefix		6679926						
ANR	6682126	Symbol	priv . max_fetched		6679926						
ANR	6682127	Symbol	* twobyte_uses_REPNZ_prefix		6679926						
ANR	6682128	Symbol	PREFIX_REPZ		6679926						
ANR	6682129	Symbol	names8rex		6679926						
ANR	6682130	Symbol	threebyte_0x38_uses_REPZ_prefix		6679926						
ANR	6682131	Symbol	* * dp -> op		6679926						
ANR	6682132	Symbol	sigsetjmp		6679926						
ANR	6682133	Symbol	* twobyte_uses_DATA_prefix		6679926						
ANR	6682134	Symbol	dis386_twobyte		6679926						
ANR	6682135	Symbol	names_seg		6679926						
ANR	6682136	Symbol	rex_used		6679926						
ANR	6682137	Symbol	* priv		6679926						
ANR	6682138	Symbol	priv . the_buffer		6679926						
ANR	6682139	Symbol	prefix_user_table		6679926						
ANR	6682140	Symbol	start_codep		6679926						
ANR	6682141	Symbol	att_names64		6679926						
ANR	6682142	Symbol	info -> stream		6679926						
ANR	6682143	Symbol	* dp		6679926						
ANR	6682144	Symbol	putop		6679926						
ANR	6682145	Symbol	PREFIX_ADDR		6679926						
ANR	6682146	Symbol	separator_char		6679926						
ANR	6682147	Symbol	dp -> op [ 1 ] . bytemode		6679926						
ANR	6682148	Symbol	uses_DATA_prefix		6679926						
ANR	6682149	Symbol	* codep ++		6679926						
ANR	6682150	Symbol	* op_riprel		6679926						
ANR	6682151	Symbol	* op_txt [ i ]		6679926						
ANR	6682152	Symbol	att_names_seg		6679926						
ANR	6682153	Symbol	dp -> op [ i ] . rtn		6679926						
ANR	6682154	Symbol	cond_jump_mode		6679926						
ANR	6682155	Symbol	riprel		6679926						
ANR	6682156	Symbol	info -> private_data		6679926						
ANR	6682157	Symbol	i		6679926						
ANR	6682158	Symbol	INTERNAL_DISASSEMBLER_ERROR		6679926						
ANR	6682159	Symbol	sizeflag		6679926						
ANR	6682160	Symbol	DFLAG		6679926						
ANR	6682161	Symbol	intel_names8		6679926						
ANR	6682162	Symbol	FLOATCODE		6679926						
ANR	6682163	Symbol	p		6679926						
ANR	6682164	Symbol	need_modrm		6679926						
ANR	6682165	Symbol	two_source_ops		6679926						
ANR	6682166	Symbol	PREFIX_VEX_0F38		6679926						
ANR	6682167	Symbol	* obuf		6679926						
ANR	6682168	Symbol	op_address		6679926						
ANR	6682169	Symbol	PREFIX_VEX_0F		6679926						
ANR	6682170	Symbol	twobyte_uses_DATA_prefix		6679926						
ANR	6682171	Symbol	* info		6679926						
ANR	6682172	Symbol	PREFIX_REPNZ		6679926						
ANR	6682173	Symbol	uses_REPZ_prefix		6679926						
ANR	6682174	Symbol	intel_names32		6679926						
ANR	6682175	Symbol	scale_char		6679926						
ANR	6682176	Symbol	dis386		6679926						
ANR	6682177	Symbol	codep		6679926						
ANR	6682178	Symbol	* op		6679926						
ANR	6682179	Symbol	op_index		6679926						
ANR	6682180	Symbol	mode_16bit		6679926						
ANR	6682181	Symbol	intel_names8rex		6679926						
ANR	6682182	Symbol	PREFIX_LOCK		6679926						
ANR	6682183	Symbol	dp		6679926						
ANR	6682184	Symbol	att_index16		6679926						
ANR	6682185	Symbol	start_pc		6679926						
ANR	6682186	Symbol	PREFIX_VEX_0F3A		6679926						
ANR	6682187	Symbol	modrm		6679926						
ANR	6682188	Symbol	info -> bytes_per_line		6679926						
ANR	6682189	Symbol	MAX_OPERANDS		6679926						
ANR	6682190	Symbol	strlen		6679926						
ANR	6682191	Symbol	* priv . the_buffer		6679926						
ANR	6682192	Symbol	threebyte_0x3a_uses_REPZ_prefix		6679926						
ANR	6682193	Symbol	twobyte_uses_REPZ_prefix		6679926						
ANR	6682194	Symbol	~rex_used		6679926						
ANR	6682195	Symbol	bfd_mach_i386_i386_intel_syntax		6679926						
ANR	6682196	Symbol	obuf		6679926						
ANR	6682197	Symbol	dp -> op [ 0 ] . bytemode		6679926						
ANR	6682198	Symbol	AFLAG		6679926						
ANR	6682199	Symbol	modrm . mod		6679926						
ANR	6682200	Symbol	uses_REPNZ_prefix		6679926						
ANR	6682201	Symbol	priv		6679926						
ANR	6682202	Symbol	threebyte_0x3a_uses_REPNZ_prefix		6679926						
ANR	6682203	Symbol	intel_syntax		6679926						
ANR	6682204	Symbol	* three_byte_table		6679926						
ANR	6682205	Symbol	info		6679926						
ANR	6682206	Symbol	needcomma		6679926						
ANR	6682207	Symbol	IS_3BYTE_OPCODE		6679926						
ANR	6682208	Symbol	* dp -> op [ 1 ] . bytemode		6679926						
ANR	6682209	Symbol	* * i		6679926						
ANR	6682210	Symbol	priv . bailout		6679926						
ANR	6682211	Symbol	NULL		6679926						
ANR	6682212	Symbol	index16		6679926						
ANR	6682213	Symbol	rex		6679926						
ANR	6682214	Symbol	names64		6679926						
ANR	6682215	Symbol	& priv		6679926						
ANR	6682216	Symbol	* threebyte_0x38_uses_DATA_prefix		6679926						
ANR	6682217	Symbol	x86_64_table		6679926						
ANR	6682218	Symbol	* codep		6679926						
ANR	6682219	Symbol	threebyte_0x3a_uses_DATA_prefix		6679926						
ANR	6682220	Symbol	intel_names_seg		6679926						
ANR	6682221	Symbol	* op_txt		6679926						
ANR	6682222	Symbol	address_mode		6679926						
ANR	6682223	Symbol	* threebyte_0x38_uses_REPZ_prefix		6679926						
ANR	6682224	Symbol	modrm . rm		6679926						
ANR	6682225	Symbol	name		6679926						
ANR	6682226	Symbol	intel_names16		6679926						
ANR	6682227	Symbol	threebyte		6679926						
ANR	6682228	Symbol	* threebyte_0x3a_uses_REPNZ_prefix		6679926						
ANR	6682229	Symbol	three_byte_table		6679926						
ANR	6682230	Symbol	att_names8		6679926						
ANR	6682231	Symbol	* * op_out		6679926						
ANR	6682232	Symbol	uses_LOCK_prefix		6679926						
ANR	6682233	Symbol	names16		6679926						
ANR	6682234	Symbol	names8		6679926						
ANR	6682235	Symbol	~0x02		6679926						
ANR	6682236	Symbol	* * codep		6679926						
ANR	6682237	Symbol	op_txt		6679926						
ANR	6682238	Symbol	onebyte_has_modrm		6679926						
ANR	6682239	Symbol	info -> print_address_func		6679926						
ANR	6682240	Symbol	~AFLAG		6679926						
ANR	6682241	Symbol	bfd_mach_x86_64_intel_syntax		6679926						
ANR	6682242	Symbol	op_riprel		6679926						
ANR	6682243	Symbol	threebyte_0x38_uses_DATA_prefix		6679926						
ANR	6682244	Symbol	* op_out		6679926						
ANR	6682245	Symbol	op		6679926						
ANR	6682246	Symbol	info -> disassembler_options		6679926						
ANR	6682247	Symbol	info -> mach		6679926						
ANR	6682248	Symbol	* op_address		6679926						
ANR	6682249	Symbol	the_info		6679926						
ANR	6682250	Symbol	* * op_txt		6679926						
ANR	6682251	Symbol	att_names16		6679926						
ANR	6682252	Symbol	* threebyte_0x38_uses_REPNZ_prefix		6679926						
ANR	6682253	Symbol	dp -> op [ i ] . bytemode		6679926						
ANR	6682254	Symbol	prefixes		6679926						
ANR	6682255	Symbol	* twobyte_has_modrm		6679926						
ANR	6682256	Symbol	pc		6679926						
ANR	6682257	Symbol	* i		6679926						
ANR	6682258	Symbol	* threebyte_0x3a_uses_REPZ_prefix		6679926						
ANR	6682259	Symbol	* p		6679926						
ANR	6682260	Symbol	* * dp		6679926						
ANR	6682261	Symbol	* grps		6679926						
ANR	6682262	Symbol	* threebyte		6679926						
ANR	6682263	Symbol	dp -> op		6679926						
ANR	6682264	Symbol	intel_index16		6679926						
