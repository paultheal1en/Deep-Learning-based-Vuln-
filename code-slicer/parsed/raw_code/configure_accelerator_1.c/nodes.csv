command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1396844	File	/home/p4ultr4n/workplace/ReVeal/raw_code/configure_accelerator_1.c								
ANR	1396845	Function	configure_accelerator	1:0:0:1895							
ANR	1396846	FunctionDef	configure_accelerator ()		1396845	0					
ANR	1396847	CompoundStatement		3:0:40:1895	1396845	0					
ANR	1396848	IdentifierDeclStatement	const char * p = NULL ;	5:4:47:67	1396845	0	True				
ANR	1396849	IdentifierDecl	* p = NULL		1396845	0					
ANR	1396850	IdentifierDeclType	const char *		1396845	0					
ANR	1396851	Identifier	p		1396845	1					
ANR	1396852	AssignmentExpression	* p = NULL		1396845	2		=			
ANR	1396853	Identifier	NULL		1396845	0					
ANR	1396854	Identifier	NULL		1396845	1					
ANR	1396855	IdentifierDeclStatement	char buf [ 10 ] ;	7:4:74:86	1396845	1	True				
ANR	1396856	IdentifierDecl	buf [ 10 ]		1396845	0					
ANR	1396857	IdentifierDeclType	char [ 10 ]		1396845	0					
ANR	1396858	Identifier	buf		1396845	1					
ANR	1396859	PrimaryExpression	10		1396845	2					
ANR	1396860	IdentifierDeclStatement	"int i , ret ;"	9:4:93:103	1396845	2	True				
ANR	1396861	IdentifierDecl	i		1396845	0					
ANR	1396862	IdentifierDeclType	int		1396845	0					
ANR	1396863	Identifier	i		1396845	1					
ANR	1396864	IdentifierDecl	ret		1396845	1					
ANR	1396865	IdentifierDeclType	int		1396845	0					
ANR	1396866	Identifier	ret		1396845	1					
ANR	1396867	IdentifierDeclStatement	bool accel_initialised = false ;	11:4:110:140	1396845	3	True				
ANR	1396868	IdentifierDecl	accel_initialised = false		1396845	0					
ANR	1396869	IdentifierDeclType	bool		1396845	0					
ANR	1396870	Identifier	accel_initialised		1396845	1					
ANR	1396871	AssignmentExpression	accel_initialised = false		1396845	2		=			
ANR	1396872	Identifier	false		1396845	0					
ANR	1396873	Identifier	false		1396845	1					
ANR	1396874	IdentifierDeclStatement	bool init_failed = false ;	13:4:147:171	1396845	4	True				
ANR	1396875	IdentifierDecl	init_failed = false		1396845	0					
ANR	1396876	IdentifierDeclType	bool		1396845	0					
ANR	1396877	Identifier	init_failed		1396845	1					
ANR	1396878	AssignmentExpression	init_failed = false		1396845	2		=			
ANR	1396879	Identifier	false		1396845	0					
ANR	1396880	Identifier	false		1396845	1					
ANR	1396881	IdentifierDeclStatement	"QemuOptsList * list = qemu_find_opts ( ""machine"" ) ;"	17:4:180:226	1396845	5	True				
ANR	1396882	IdentifierDecl	"* list = qemu_find_opts ( ""machine"" )"		1396845	0					
ANR	1396883	IdentifierDeclType	QemuOptsList *		1396845	0					
ANR	1396884	Identifier	list		1396845	1					
ANR	1396885	AssignmentExpression	"* list = qemu_find_opts ( ""machine"" )"		1396845	2		=			
ANR	1396886	Identifier	list		1396845	0					
ANR	1396887	CallExpression	"qemu_find_opts ( ""machine"" )"		1396845	1					
ANR	1396888	Callee	qemu_find_opts		1396845	0					
ANR	1396889	Identifier	qemu_find_opts		1396845	0					
ANR	1396890	ArgumentList	"""machine"""		1396845	1					
ANR	1396891	Argument	"""machine"""		1396845	0					
ANR	1396892	PrimaryExpression	"""machine"""		1396845	0					
ANR	1396893	IfStatement	if ( ! QTAILQ_EMPTY ( & list -> head ) )		1396845	6					
ANR	1396894	Condition	! QTAILQ_EMPTY ( & list -> head )	19:8:237:262	1396845	0	True				
ANR	1396895	UnaryOperationExpression	! QTAILQ_EMPTY ( & list -> head )		1396845	0					
ANR	1396896	UnaryOperator	!		1396845	0					
ANR	1396897	CallExpression	QTAILQ_EMPTY ( & list -> head )		1396845	1					
ANR	1396898	Callee	QTAILQ_EMPTY		1396845	0					
ANR	1396899	Identifier	QTAILQ_EMPTY		1396845	0					
ANR	1396900	ArgumentList	& list -> head		1396845	1					
ANR	1396901	Argument	& list -> head		1396845	0					
ANR	1396902	UnaryOperationExpression	& list -> head		1396845	0					
ANR	1396903	UnaryOperator	&		1396845	0					
ANR	1396904	PtrMemberAccess	list -> head		1396845	1					
ANR	1396905	Identifier	list		1396845	0					
ANR	1396906	Identifier	head		1396845	1					
ANR	1396907	CompoundStatement		17:36:224:224	1396845	1					
ANR	1396908	ExpressionStatement	"p = qemu_opt_get ( QTAILQ_FIRST ( & list -> head ) , ""accel"" )"	21:8:276:328	1396845	0	True				
ANR	1396909	AssignmentExpression	"p = qemu_opt_get ( QTAILQ_FIRST ( & list -> head ) , ""accel"" )"		1396845	0		=			
ANR	1396910	Identifier	p		1396845	0					
ANR	1396911	CallExpression	"qemu_opt_get ( QTAILQ_FIRST ( & list -> head ) , ""accel"" )"		1396845	1					
ANR	1396912	Callee	qemu_opt_get		1396845	0					
ANR	1396913	Identifier	qemu_opt_get		1396845	0					
ANR	1396914	ArgumentList	QTAILQ_FIRST ( & list -> head )		1396845	1					
ANR	1396915	Argument	QTAILQ_FIRST ( & list -> head )		1396845	0					
ANR	1396916	CallExpression	QTAILQ_FIRST ( & list -> head )		1396845	0					
ANR	1396917	Callee	QTAILQ_FIRST		1396845	0					
ANR	1396918	Identifier	QTAILQ_FIRST		1396845	0					
ANR	1396919	ArgumentList	& list -> head		1396845	1					
ANR	1396920	Argument	& list -> head		1396845	0					
ANR	1396921	UnaryOperationExpression	& list -> head		1396845	0					
ANR	1396922	UnaryOperator	&		1396845	0					
ANR	1396923	PtrMemberAccess	list -> head		1396845	1					
ANR	1396924	Identifier	list		1396845	0					
ANR	1396925	Identifier	head		1396845	1					
ANR	1396926	Argument	"""accel"""		1396845	1					
ANR	1396927	PrimaryExpression	"""accel"""		1396845	0					
ANR	1396928	IfStatement	if ( p == NULL )		1396845	7					
ANR	1396929	Condition	p == NULL	27:8:348:356	1396845	0	True				
ANR	1396930	EqualityExpression	p == NULL		1396845	0		==			
ANR	1396931	Identifier	p		1396845	0					
ANR	1396932	Identifier	NULL		1396845	1					
ANR	1396933	CompoundStatement		25:19:318:318	1396845	1					
ANR	1396934	ExpressionStatement	"p = ""tcg"""	31:8:420:429	1396845	0	True				
ANR	1396935	AssignmentExpression	"p = ""tcg"""		1396845	0		=			
ANR	1396936	Identifier	p		1396845	0					
ANR	1396937	PrimaryExpression	"""tcg"""		1396845	1					
ANR	1396938	WhileStatement	while ( ! accel_initialised && * p != '\\0' )		1396845	8					
ANR	1396939	Condition	! accel_initialised && * p != '\\0'	37:11:452:483	1396845	0	True				
ANR	1396940	AndExpression	! accel_initialised && * p != '\\0'		1396845	0		&&			
ANR	1396941	UnaryOperationExpression	! accel_initialised		1396845	0					
ANR	1396942	UnaryOperator	!		1396845	0					
ANR	1396943	Identifier	accel_initialised		1396845	1					
ANR	1396944	EqualityExpression	* p != '\\0'		1396845	1		!=			
ANR	1396945	UnaryOperationExpression	* p		1396845	0					
ANR	1396946	UnaryOperator	*		1396845	0					
ANR	1396947	Identifier	p		1396845	1					
ANR	1396948	PrimaryExpression	'\\0'		1396845	1					
ANR	1396949	CompoundStatement		35:45:445:445	1396845	1					
ANR	1396950	IfStatement	if ( * p == ':' )		1396845	0					
ANR	1396951	Condition	* p == ':'	39:12:501:509	1396845	0	True				
ANR	1396952	EqualityExpression	* p == ':'		1396845	0		==			
ANR	1396953	UnaryOperationExpression	* p		1396845	0					
ANR	1396954	UnaryOperator	*		1396845	0					
ANR	1396955	Identifier	p		1396845	1					
ANR	1396956	PrimaryExpression	':'		1396845	1					
ANR	1396957	CompoundStatement		37:23:471:471	1396845	1					
ANR	1396958	ExpressionStatement	p ++	41:12:527:530	1396845	0	True				
ANR	1396959	PostIncDecOperationExpression	p ++		1396845	0					
ANR	1396960	Identifier	p		1396845	0					
ANR	1396961	IncDec	++		1396845	1					
ANR	1396962	ExpressionStatement	"p = get_opt_name ( buf , sizeof ( buf ) , p , ':' )"	45:8:552:595	1396845	1	True				
ANR	1396963	AssignmentExpression	"p = get_opt_name ( buf , sizeof ( buf ) , p , ':' )"		1396845	0		=			
ANR	1396964	Identifier	p		1396845	0					
ANR	1396965	CallExpression	"get_opt_name ( buf , sizeof ( buf ) , p , ':' )"		1396845	1					
ANR	1396966	Callee	get_opt_name		1396845	0					
ANR	1396967	Identifier	get_opt_name		1396845	0					
ANR	1396968	ArgumentList	buf		1396845	1					
ANR	1396969	Argument	buf		1396845	0					
ANR	1396970	Identifier	buf		1396845	0					
ANR	1396971	Argument	sizeof ( buf )		1396845	1					
ANR	1396972	SizeofExpression	sizeof ( buf )		1396845	0					
ANR	1396973	Sizeof	sizeof		1396845	0					
ANR	1396974	SizeofOperand	buf		1396845	1					
ANR	1396975	Argument	p		1396845	2					
ANR	1396976	Identifier	p		1396845	0					
ANR	1396977	Argument	':'		1396845	3					
ANR	1396978	PrimaryExpression	':'		1396845	0					
ANR	1396979	ForStatement	for ( i = 0 ; i < ARRAY_SIZE ( accel_list ) ; i ++ )		1396845	2					
ANR	1396980	ForInit	i = 0 ;	47:13:611:616	1396845	0	True				
ANR	1396981	AssignmentExpression	i = 0		1396845	0		=			
ANR	1396982	Identifier	i		1396845	0					
ANR	1396983	PrimaryExpression	0		1396845	1					
ANR	1396984	Condition	i < ARRAY_SIZE ( accel_list )	47:20:618:643	1396845	1	True				
ANR	1396985	RelationalExpression	i < ARRAY_SIZE ( accel_list )		1396845	0		<			
ANR	1396986	Identifier	i		1396845	0					
ANR	1396987	CallExpression	ARRAY_SIZE ( accel_list )		1396845	1					
ANR	1396988	Callee	ARRAY_SIZE		1396845	0					
ANR	1396989	Identifier	ARRAY_SIZE		1396845	0					
ANR	1396990	ArgumentList	accel_list		1396845	1					
ANR	1396991	Argument	accel_list		1396845	0					
ANR	1396992	Identifier	accel_list		1396845	0					
ANR	1396993	PostIncDecOperationExpression	i ++	47:48:646:648	1396845	2	True				
ANR	1396994	Identifier	i		1396845	0					
ANR	1396995	IncDec	++		1396845	1					
ANR	1396996	CompoundStatement		45:53:610:610	1396845	3					
ANR	1396997	IfStatement	"if ( strcmp ( accel_list [ i ] . opt_name , buf ) == 0 )"		1396845	0					
ANR	1396998	Condition	"strcmp ( accel_list [ i ] . opt_name , buf ) == 0"	49:16:670:709	1396845	0	True				
ANR	1396999	EqualityExpression	"strcmp ( accel_list [ i ] . opt_name , buf ) == 0"		1396845	0		==			
ANR	1397000	CallExpression	"strcmp ( accel_list [ i ] . opt_name , buf )"		1396845	0					
ANR	1397001	Callee	strcmp		1396845	0					
ANR	1397002	Identifier	strcmp		1396845	0					
ANR	1397003	ArgumentList	accel_list [ i ] . opt_name		1396845	1					
ANR	1397004	Argument	accel_list [ i ] . opt_name		1396845	0					
ANR	1397005	MemberAccess	accel_list [ i ] . opt_name		1396845	0					
ANR	1397006	ArrayIndexing	accel_list [ i ]		1396845	0					
ANR	1397007	Identifier	accel_list		1396845	0					
ANR	1397008	Identifier	i		1396845	1					
ANR	1397009	Identifier	opt_name		1396845	1					
ANR	1397010	Argument	buf		1396845	1					
ANR	1397011	Identifier	buf		1396845	0					
ANR	1397012	PrimaryExpression	0		1396845	1					
ANR	1397013	CompoundStatement		47:58:671:671	1396845	1					
ANR	1397014	IfStatement	if ( ! accel_list [ i ] . available ( ) )		1396845	0					
ANR	1397015	Condition	! accel_list [ i ] . available ( )	51:20:735:760	1396845	0	True				
ANR	1397016	UnaryOperationExpression	! accel_list [ i ] . available ( )		1396845	0					
ANR	1397017	UnaryOperator	!		1396845	0					
ANR	1397018	CallExpression	accel_list [ i ] . available ( )		1396845	1					
ANR	1397019	Callee	accel_list [ i ] . available		1396845	0					
ANR	1397020	MemberAccess	accel_list [ i ] . available		1396845	0					
ANR	1397021	ArrayIndexing	accel_list [ i ]		1396845	0					
ANR	1397022	Identifier	accel_list		1396845	0					
ANR	1397023	Identifier	i		1396845	1					
ANR	1397024	Identifier	available		1396845	1					
ANR	1397025	ArgumentList			1396845	1					
ANR	1397026	CompoundStatement		49:48:722:722	1396845	1					
ANR	1397027	ExpressionStatement	"printf ( ""%s not supported for this target\\n"" , accel_list [ i ] . name )"	53:20:786:878	1396845	0	True				
ANR	1397028	CallExpression	"printf ( ""%s not supported for this target\\n"" , accel_list [ i ] . name )"		1396845	0					
ANR	1397029	Callee	printf		1396845	0					
ANR	1397030	Identifier	printf		1396845	0					
ANR	1397031	ArgumentList	"""%s not supported for this target\\n"""		1396845	1					
ANR	1397032	Argument	"""%s not supported for this target\\n"""		1396845	0					
ANR	1397033	PrimaryExpression	"""%s not supported for this target\\n"""		1396845	0					
ANR	1397034	Argument	accel_list [ i ] . name		1396845	1					
ANR	1397035	MemberAccess	accel_list [ i ] . name		1396845	0					
ANR	1397036	ArrayIndexing	accel_list [ i ]		1396845	0					
ANR	1397037	Identifier	accel_list		1396845	0					
ANR	1397038	Identifier	i		1396845	1					
ANR	1397039	Identifier	name		1396845	1					
ANR	1397040	ContinueStatement	continue ;	57:20:901:909	1396845	1	True				
ANR	1397041	ExpressionStatement	* ( accel_list [ i ] . allowed ) = true	61:16:947:978	1396845	1	True				
ANR	1397042	AssignmentExpression	* ( accel_list [ i ] . allowed ) = true		1396845	0		=			
ANR	1397043	UnaryOperationExpression	* ( accel_list [ i ] . allowed )		1396845	0					
ANR	1397044	UnaryOperator	*		1396845	0					
ANR	1397045	MemberAccess	accel_list [ i ] . allowed		1396845	1					
ANR	1397046	ArrayIndexing	accel_list [ i ]		1396845	0					
ANR	1397047	Identifier	accel_list		1396845	0					
ANR	1397048	Identifier	i		1396845	1					
ANR	1397049	Identifier	allowed		1396845	1					
ANR	1397050	Identifier	true		1396845	1					
ANR	1397051	ExpressionStatement	ret = accel_list [ i ] . init ( )	63:16:997:1023	1396845	2	True				
ANR	1397052	AssignmentExpression	ret = accel_list [ i ] . init ( )		1396845	0		=			
ANR	1397053	Identifier	ret		1396845	0					
ANR	1397054	CallExpression	accel_list [ i ] . init ( )		1396845	1					
ANR	1397055	Callee	accel_list [ i ] . init		1396845	0					
ANR	1397056	MemberAccess	accel_list [ i ] . init		1396845	0					
ANR	1397057	ArrayIndexing	accel_list [ i ]		1396845	0					
ANR	1397058	Identifier	accel_list		1396845	0					
ANR	1397059	Identifier	i		1396845	1					
ANR	1397060	Identifier	init		1396845	1					
ANR	1397061	ArgumentList			1396845	1					
ANR	1397062	IfStatement	if ( ret < 0 )		1396845	3					
ANR	1397063	Condition	ret < 0	65:20:1046:1052	1396845	0	True				
ANR	1397064	RelationalExpression	ret < 0		1396845	0		<			
ANR	1397065	Identifier	ret		1396845	0					
ANR	1397066	PrimaryExpression	0		1396845	1					
ANR	1397067	CompoundStatement		63:29:1014:1014	1396845	1					
ANR	1397068	ExpressionStatement	init_failed = true	67:20:1078:1096	1396845	0	True				
ANR	1397069	AssignmentExpression	init_failed = true		1396845	0		=			
ANR	1397070	Identifier	init_failed		1396845	0					
ANR	1397071	Identifier	true		1396845	1					
ANR	1397072	ExpressionStatement	"fprintf ( stderr , ""failed to initialize %s: %s\\n"" , accel_list [ i ] . name , strerror ( - ret ) )"	69:20:1119:1261	1396845	1	True				
ANR	1397073	CallExpression	"fprintf ( stderr , ""failed to initialize %s: %s\\n"" , accel_list [ i ] . name , strerror ( - ret ) )"		1396845	0					
ANR	1397074	Callee	fprintf		1396845	0					
ANR	1397075	Identifier	fprintf		1396845	0					
ANR	1397076	ArgumentList	stderr		1396845	1					
ANR	1397077	Argument	stderr		1396845	0					
ANR	1397078	Identifier	stderr		1396845	0					
ANR	1397079	Argument	"""failed to initialize %s: %s\\n"""		1396845	1					
ANR	1397080	PrimaryExpression	"""failed to initialize %s: %s\\n"""		1396845	0					
ANR	1397081	Argument	accel_list [ i ] . name		1396845	2					
ANR	1397082	MemberAccess	accel_list [ i ] . name		1396845	0					
ANR	1397083	ArrayIndexing	accel_list [ i ]		1396845	0					
ANR	1397084	Identifier	accel_list		1396845	0					
ANR	1397085	Identifier	i		1396845	1					
ANR	1397086	Identifier	name		1396845	1					
ANR	1397087	Argument	strerror ( - ret )		1396845	3					
ANR	1397088	CallExpression	strerror ( - ret )		1396845	0					
ANR	1397089	Callee	strerror		1396845	0					
ANR	1397090	Identifier	strerror		1396845	0					
ANR	1397091	ArgumentList	- ret		1396845	1					
ANR	1397092	Argument	- ret		1396845	0					
ANR	1397093	UnaryOperationExpression	- ret		1396845	0					
ANR	1397094	UnaryOperator	-		1396845	0					
ANR	1397095	Identifier	ret		1396845	1					
ANR	1397096	ExpressionStatement	* ( accel_list [ i ] . allowed ) = false	75:20:1284:1316	1396845	2	True				
ANR	1397097	AssignmentExpression	* ( accel_list [ i ] . allowed ) = false		1396845	0		=			
ANR	1397098	UnaryOperationExpression	* ( accel_list [ i ] . allowed )		1396845	0					
ANR	1397099	UnaryOperator	*		1396845	0					
ANR	1397100	MemberAccess	accel_list [ i ] . allowed		1396845	1					
ANR	1397101	ArrayIndexing	accel_list [ i ]		1396845	0					
ANR	1397102	Identifier	accel_list		1396845	0					
ANR	1397103	Identifier	i		1396845	1					
ANR	1397104	Identifier	allowed		1396845	1					
ANR	1397105	Identifier	false		1396845	1					
ANR	1397106	ElseStatement	else		1396845	0					
ANR	1397107	CompoundStatement		75:23:1301:1301	1396845	0					
ANR	1397108	ExpressionStatement	accel_initialised = true	79:20:1365:1389	1396845	0	True				
ANR	1397109	AssignmentExpression	accel_initialised = true		1396845	0		=			
ANR	1397110	Identifier	accel_initialised		1396845	0					
ANR	1397111	Identifier	true		1396845	1					
ANR	1397112	BreakStatement	break ;	83:16:1427:1432	1396845	4	True				
ANR	1397113	IfStatement	if ( i == ARRAY_SIZE ( accel_list ) )		1396845	3					
ANR	1397114	Condition	i == ARRAY_SIZE ( accel_list )	89:12:1473:1499	1396845	0	True				
ANR	1397115	EqualityExpression	i == ARRAY_SIZE ( accel_list )		1396845	0		==			
ANR	1397116	Identifier	i		1396845	0					
ANR	1397117	CallExpression	ARRAY_SIZE ( accel_list )		1396845	1					
ANR	1397118	Callee	ARRAY_SIZE		1396845	0					
ANR	1397119	Identifier	ARRAY_SIZE		1396845	0					
ANR	1397120	ArgumentList	accel_list		1396845	1					
ANR	1397121	Argument	accel_list		1396845	0					
ANR	1397122	Identifier	accel_list		1396845	0					
ANR	1397123	CompoundStatement		87:41:1461:1461	1396845	1					
ANR	1397124	ExpressionStatement	"fprintf ( stderr , ""\\""%s\\"" accelerator does not exist.\\n"" , buf )"	91:12:1517:1577	1396845	0	True				
ANR	1397125	CallExpression	"fprintf ( stderr , ""\\""%s\\"" accelerator does not exist.\\n"" , buf )"		1396845	0					
ANR	1397126	Callee	fprintf		1396845	0					
ANR	1397127	Identifier	fprintf		1396845	0					
ANR	1397128	ArgumentList	stderr		1396845	1					
ANR	1397129	Argument	stderr		1396845	0					
ANR	1397130	Identifier	stderr		1396845	0					
ANR	1397131	Argument	"""\\""%s\\"" accelerator does not exist.\\n"""		1396845	1					
ANR	1397132	PrimaryExpression	"""\\""%s\\"" accelerator does not exist.\\n"""		1396845	0					
ANR	1397133	Argument	buf		1396845	2					
ANR	1397134	Identifier	buf		1396845	0					
ANR	1397135	IfStatement	if ( ! accel_initialised )		1396845	9					
ANR	1397136	Condition	! accel_initialised	99:8:1608:1625	1396845	0	True				
ANR	1397137	UnaryOperationExpression	! accel_initialised		1396845	0					
ANR	1397138	UnaryOperator	!		1396845	0					
ANR	1397139	Identifier	accel_initialised		1396845	1					
ANR	1397140	CompoundStatement		97:28:1587:1587	1396845	1					
ANR	1397141	IfStatement	if ( ! init_failed )		1396845	0					
ANR	1397142	Condition	! init_failed	101:12:1643:1654	1396845	0	True				
ANR	1397143	UnaryOperationExpression	! init_failed		1396845	0					
ANR	1397144	UnaryOperator	!		1396845	0					
ANR	1397145	Identifier	init_failed		1396845	1					
ANR	1397146	CompoundStatement		99:26:1616:1616	1396845	1					
ANR	1397147	ExpressionStatement	"fprintf ( stderr , ""No accelerator found!\\n"" )"	103:12:1672:1714	1396845	0	True				
ANR	1397148	CallExpression	"fprintf ( stderr , ""No accelerator found!\\n"" )"		1396845	0					
ANR	1397149	Callee	fprintf		1396845	0					
ANR	1397150	Identifier	fprintf		1396845	0					
ANR	1397151	ArgumentList	stderr		1396845	1					
ANR	1397152	Argument	stderr		1396845	0					
ANR	1397153	Identifier	stderr		1396845	0					
ANR	1397154	Argument	"""No accelerator found!\\n"""		1396845	1					
ANR	1397155	PrimaryExpression	"""No accelerator found!\\n"""		1396845	0					
ANR	1397156	ExpressionStatement	exit ( 1 )	107:8:1736:1743	1396845	1	True				
ANR	1397157	CallExpression	exit ( 1 )		1396845	0					
ANR	1397158	Callee	exit		1396845	0					
ANR	1397159	Identifier	exit		1396845	0					
ANR	1397160	ArgumentList	1		1396845	1					
ANR	1397161	Argument	1		1396845	0					
ANR	1397162	PrimaryExpression	1		1396845	0					
ANR	1397163	IfStatement	if ( init_failed )		1396845	10					
ANR	1397164	Condition	init_failed	113:8:1763:1773	1396845	0	True				
ANR	1397165	Identifier	init_failed		1396845	0					
ANR	1397166	CompoundStatement		111:21:1735:1735	1396845	1					
ANR	1397167	ExpressionStatement	"fprintf ( stderr , ""Back to %s accelerator.\\n"" , accel_list [ i ] . name )"	115:8:1787:1851	1396845	0	True				
ANR	1397168	CallExpression	"fprintf ( stderr , ""Back to %s accelerator.\\n"" , accel_list [ i ] . name )"		1396845	0					
ANR	1397169	Callee	fprintf		1396845	0					
ANR	1397170	Identifier	fprintf		1396845	0					
ANR	1397171	ArgumentList	stderr		1396845	1					
ANR	1397172	Argument	stderr		1396845	0					
ANR	1397173	Identifier	stderr		1396845	0					
ANR	1397174	Argument	"""Back to %s accelerator.\\n"""		1396845	1					
ANR	1397175	PrimaryExpression	"""Back to %s accelerator.\\n"""		1396845	0					
ANR	1397176	Argument	accel_list [ i ] . name		1396845	2					
ANR	1397177	MemberAccess	accel_list [ i ] . name		1396845	0					
ANR	1397178	ArrayIndexing	accel_list [ i ]		1396845	0					
ANR	1397179	Identifier	accel_list		1396845	0					
ANR	1397180	Identifier	i		1396845	1					
ANR	1397181	Identifier	name		1396845	1					
ANR	1397182	ReturnStatement	return ! accel_initialised ;	121:4:1867:1892	1396845	11	True				
ANR	1397183	UnaryOperationExpression	! accel_initialised		1396845	0					
ANR	1397184	UnaryOperator	!		1396845	0					
ANR	1397185	Identifier	accel_initialised		1396845	1					
ANR	1397186	ReturnType	static int		1396845	1					
ANR	1397187	Identifier	configure_accelerator		1396845	2					
ANR	1397188	ParameterList			1396845	3					
ANR	1397189	CFGEntryNode	ENTRY		1396845		True				
ANR	1397190	CFGExitNode	EXIT		1396845		True				
ANR	1397191	Symbol	qemu_find_opts		1396845						
ANR	1397192	Symbol	qemu_opt_get		1396845						
ANR	1397193	Symbol	accel_list [ i ] . opt_name		1396845						
ANR	1397194	Symbol	& list -> head		1396845						
ANR	1397195	Symbol	QTAILQ_FIRST		1396845						
ANR	1397196	Symbol	QTAILQ_EMPTY		1396845						
ANR	1397197	Symbol	accel_initialised		1396845						
ANR	1397198	Symbol	* accel_list [ i ] . allowed		1396845						
ANR	1397199	Symbol	ret		1396845						
ANR	1397200	Symbol	ARRAY_SIZE		1396845						
ANR	1397201	Symbol	strcmp		1396845						
ANR	1397202	Symbol	accel_list [ i ] . available		1396845						
ANR	1397203	Symbol	* * i		1396845						
ANR	1397204	Symbol	NULL		1396845						
ANR	1397205	Symbol	* accel_list		1396845						
ANR	1397206	Symbol	false		1396845						
ANR	1397207	Symbol	i		1396845						
ANR	1397208	Symbol	accel_list [ i ] . init		1396845						
ANR	1397209	Symbol	list		1396845						
ANR	1397210	Symbol	stderr		1396845						
ANR	1397211	Symbol	* * accel_list		1396845						
ANR	1397212	Symbol	accel_list [ i ] . name		1396845						
ANR	1397213	Symbol	p		1396845						
ANR	1397214	Symbol	init_failed		1396845						
ANR	1397215	Symbol	strerror		1396845						
ANR	1397216	Symbol	buf		1396845						
ANR	1397217	Symbol	* i		1396845						
ANR	1397218	Symbol	accel_list		1396845						
ANR	1397219	Symbol	* ( accel_list [ i ] . allowed )		1396845						
ANR	1397220	Symbol	true		1396845						
ANR	1397221	Symbol	* p		1396845						
ANR	1397222	Symbol	get_opt_name		1396845						
ANR	1397223	Symbol	accel_list [ i ] . allowed		1396845						
