command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2895539	File	/home/p4ultr4n/workplace/ReVeal/raw_code/dxt5_block_internal_1.c								
ANR	2895540	Function	dxt5_block_internal	1:0:0:1645							
ANR	2895541	FunctionDef	"dxt5_block_internal (uint8_t * dst , ptrdiff_t stride , const uint8_t * block)"		2895540	0					
ANR	2895542	CompoundStatement		5:0:134:1645	2895540	0					
ANR	2895543	IdentifierDeclStatement	"int x , y ;"	7:4:141:149	2895540	0	True				
ANR	2895544	IdentifierDecl	x		2895540	0					
ANR	2895545	IdentifierDeclType	int		2895540	0					
ANR	2895546	Identifier	x		2895540	1					
ANR	2895547	IdentifierDecl	y		2895540	1					
ANR	2895548	IdentifierDeclType	int		2895540	0					
ANR	2895549	Identifier	y		2895540	1					
ANR	2895550	IdentifierDeclStatement	uint32_t colors [ 4 ] ;	9:4:156:174	2895540	1	True				
ANR	2895551	IdentifierDecl	colors [ 4 ]		2895540	0					
ANR	2895552	IdentifierDeclType	uint32_t [ 4 ]		2895540	0					
ANR	2895553	Identifier	colors		2895540	1					
ANR	2895554	PrimaryExpression	4		2895540	2					
ANR	2895555	IdentifierDeclStatement	uint8_t alpha_indices [ 16 ] ;	11:4:181:206	2895540	2	True				
ANR	2895556	IdentifierDecl	alpha_indices [ 16 ]		2895540	0					
ANR	2895557	IdentifierDeclType	uint8_t [ 16 ]		2895540	0					
ANR	2895558	Identifier	alpha_indices		2895540	1					
ANR	2895559	PrimaryExpression	16		2895540	2					
ANR	2895560	IdentifierDeclStatement	uint16_t color0 = AV_RL16 ( block + 8 ) ;	13:4:213:249	2895540	3	True				
ANR	2895561	IdentifierDecl	color0 = AV_RL16 ( block + 8 )		2895540	0					
ANR	2895562	IdentifierDeclType	uint16_t		2895540	0					
ANR	2895563	Identifier	color0		2895540	1					
ANR	2895564	AssignmentExpression	color0 = AV_RL16 ( block + 8 )		2895540	2		=			
ANR	2895565	Identifier	color0		2895540	0					
ANR	2895566	CallExpression	AV_RL16 ( block + 8 )		2895540	1					
ANR	2895567	Callee	AV_RL16		2895540	0					
ANR	2895568	Identifier	AV_RL16		2895540	0					
ANR	2895569	ArgumentList	block + 8		2895540	1					
ANR	2895570	Argument	block + 8		2895540	0					
ANR	2895571	AdditiveExpression	block + 8		2895540	0		+			
ANR	2895572	Identifier	block		2895540	0					
ANR	2895573	PrimaryExpression	8		2895540	1					
ANR	2895574	IdentifierDeclStatement	uint16_t color1 = AV_RL16 ( block + 10 ) ;	15:4:256:293	2895540	4	True				
ANR	2895575	IdentifierDecl	color1 = AV_RL16 ( block + 10 )		2895540	0					
ANR	2895576	IdentifierDeclType	uint16_t		2895540	0					
ANR	2895577	Identifier	color1		2895540	1					
ANR	2895578	AssignmentExpression	color1 = AV_RL16 ( block + 10 )		2895540	2		=			
ANR	2895579	Identifier	color1		2895540	0					
ANR	2895580	CallExpression	AV_RL16 ( block + 10 )		2895540	1					
ANR	2895581	Callee	AV_RL16		2895540	0					
ANR	2895582	Identifier	AV_RL16		2895540	0					
ANR	2895583	ArgumentList	block + 10		2895540	1					
ANR	2895584	Argument	block + 10		2895540	0					
ANR	2895585	AdditiveExpression	block + 10		2895540	0		+			
ANR	2895586	Identifier	block		2895540	0					
ANR	2895587	PrimaryExpression	10		2895540	1					
ANR	2895588	IdentifierDeclStatement	uint32_t code = AV_RL32 ( block + 12 ) ;	17:4:300:337	2895540	5	True				
ANR	2895589	IdentifierDecl	code = AV_RL32 ( block + 12 )		2895540	0					
ANR	2895590	IdentifierDeclType	uint32_t		2895540	0					
ANR	2895591	Identifier	code		2895540	1					
ANR	2895592	AssignmentExpression	code = AV_RL32 ( block + 12 )		2895540	2		=			
ANR	2895593	Identifier	code		2895540	0					
ANR	2895594	CallExpression	AV_RL32 ( block + 12 )		2895540	1					
ANR	2895595	Callee	AV_RL32		2895540	0					
ANR	2895596	Identifier	AV_RL32		2895540	0					
ANR	2895597	ArgumentList	block + 12		2895540	1					
ANR	2895598	Argument	block + 12		2895540	0					
ANR	2895599	AdditiveExpression	block + 12		2895540	0		+			
ANR	2895600	Identifier	block		2895540	0					
ANR	2895601	PrimaryExpression	12		2895540	1					
ANR	2895602	IdentifierDeclStatement	uint8_t alpha0 = * ( block ) ;	19:4:344:370	2895540	6	True				
ANR	2895603	IdentifierDecl	alpha0 = * ( block )		2895540	0					
ANR	2895604	IdentifierDeclType	uint8_t		2895540	0					
ANR	2895605	Identifier	alpha0		2895540	1					
ANR	2895606	AssignmentExpression	alpha0 = * ( block )		2895540	2		=			
ANR	2895607	Identifier	alpha0		2895540	0					
ANR	2895608	UnaryOperationExpression	* ( block )		2895540	1					
ANR	2895609	UnaryOperator	*		2895540	0					
ANR	2895610	Identifier	block		2895540	1					
ANR	2895611	IdentifierDeclStatement	uint8_t alpha1 = * ( block + 1 ) ;	21:4:377:407	2895540	7	True				
ANR	2895612	IdentifierDecl	alpha1 = * ( block + 1 )		2895540	0					
ANR	2895613	IdentifierDeclType	uint8_t		2895540	0					
ANR	2895614	Identifier	alpha1		2895540	1					
ANR	2895615	AssignmentExpression	alpha1 = * ( block + 1 )		2895540	2		=			
ANR	2895616	Identifier	alpha1		2895540	0					
ANR	2895617	UnaryOperationExpression	* ( block + 1 )		2895540	1					
ANR	2895618	UnaryOperator	*		2895540	0					
ANR	2895619	AdditiveExpression	block + 1		2895540	1		+			
ANR	2895620	Identifier	block		2895540	0					
ANR	2895621	PrimaryExpression	1		2895540	1					
ANR	2895622	ExpressionStatement	"decompress_indices ( alpha_indices , block + 2 )"	25:4:416:460	2895540	8	True				
ANR	2895623	CallExpression	"decompress_indices ( alpha_indices , block + 2 )"		2895540	0					
ANR	2895624	Callee	decompress_indices		2895540	0					
ANR	2895625	Identifier	decompress_indices		2895540	0					
ANR	2895626	ArgumentList	alpha_indices		2895540	1					
ANR	2895627	Argument	alpha_indices		2895540	0					
ANR	2895628	Identifier	alpha_indices		2895540	0					
ANR	2895629	Argument	block + 2		2895540	1					
ANR	2895630	AdditiveExpression	block + 2		2895540	0		+			
ANR	2895631	Identifier	block		2895540	0					
ANR	2895632	PrimaryExpression	2		2895540	1					
ANR	2895633	ExpressionStatement	"extract_color ( colors , color0 , color1 , 1 , 0 )"	29:4:469:512	2895540	9	True				
ANR	2895634	CallExpression	"extract_color ( colors , color0 , color1 , 1 , 0 )"		2895540	0					
ANR	2895635	Callee	extract_color		2895540	0					
ANR	2895636	Identifier	extract_color		2895540	0					
ANR	2895637	ArgumentList	colors		2895540	1					
ANR	2895638	Argument	colors		2895540	0					
ANR	2895639	Identifier	colors		2895540	0					
ANR	2895640	Argument	color0		2895540	1					
ANR	2895641	Identifier	color0		2895540	0					
ANR	2895642	Argument	color1		2895540	2					
ANR	2895643	Identifier	color1		2895540	0					
ANR	2895644	Argument	1		2895540	3					
ANR	2895645	PrimaryExpression	1		2895540	0					
ANR	2895646	Argument	0		2895540	4					
ANR	2895647	PrimaryExpression	0		2895540	0					
ANR	2895648	ForStatement	for ( y = 0 ; y < 4 ; y ++ )		2895540	10					
ANR	2895649	ForInit	y = 0 ;	33:9:526:531	2895540	0	True				
ANR	2895650	AssignmentExpression	y = 0		2895540	0		=			
ANR	2895651	Identifier	y		2895540	0					
ANR	2895652	PrimaryExpression	0		2895540	1					
ANR	2895653	Condition	y < 4	33:16:533:537	2895540	1	True				
ANR	2895654	RelationalExpression	y < 4		2895540	0		<			
ANR	2895655	Identifier	y		2895540	0					
ANR	2895656	PrimaryExpression	4		2895540	1					
ANR	2895657	PostIncDecOperationExpression	y ++	33:23:540:542	2895540	2	True				
ANR	2895658	Identifier	y		2895540	0					
ANR	2895659	IncDec	++		2895540	1					
ANR	2895660	CompoundStatement		29:28:410:410	2895540	3					
ANR	2895661	ForStatement	for ( x = 0 ; x < 4 ; x ++ )		2895540	0					
ANR	2895662	ForInit	x = 0 ;	35:13:561:566	2895540	0	True				
ANR	2895663	AssignmentExpression	x = 0		2895540	0		=			
ANR	2895664	Identifier	x		2895540	0					
ANR	2895665	PrimaryExpression	0		2895540	1					
ANR	2895666	Condition	x < 4	35:20:568:572	2895540	1	True				
ANR	2895667	RelationalExpression	x < 4		2895540	0		<			
ANR	2895668	Identifier	x		2895540	0					
ANR	2895669	PrimaryExpression	4		2895540	1					
ANR	2895670	PostIncDecOperationExpression	x ++	35:27:575:577	2895540	2	True				
ANR	2895671	Identifier	x		2895540	0					
ANR	2895672	IncDec	++		2895540	1					
ANR	2895673	CompoundStatement		37:12:545:558	2895540	3					
ANR	2895674	IdentifierDeclStatement	int alpha_code = alpha_indices [ x + y * 4 ] ;	37:12:595:636	2895540	0	True				
ANR	2895675	IdentifierDecl	alpha_code = alpha_indices [ x + y * 4 ]		2895540	0					
ANR	2895676	IdentifierDeclType	int		2895540	0					
ANR	2895677	Identifier	alpha_code		2895540	1					
ANR	2895678	AssignmentExpression	alpha_code = alpha_indices [ x + y * 4 ]		2895540	2		=			
ANR	2895679	Identifier	alpha_code		2895540	0					
ANR	2895680	ArrayIndexing	alpha_indices [ x + y * 4 ]		2895540	1					
ANR	2895681	Identifier	alpha_indices		2895540	0					
ANR	2895682	AdditiveExpression	x + y * 4		2895540	1		+			
ANR	2895683	Identifier	x		2895540	0					
ANR	2895684	MultiplicativeExpression	y * 4		2895540	1		*			
ANR	2895685	Identifier	y		2895540	0					
ANR	2895686	PrimaryExpression	4		2895540	1					
ANR	2895687	IdentifierDeclStatement	uint32_t pixel ;	39:12:651:665	2895540	1	True				
ANR	2895688	IdentifierDecl	pixel		2895540	0					
ANR	2895689	IdentifierDeclType	uint32_t		2895540	0					
ANR	2895690	Identifier	pixel		2895540	1					
ANR	2895691	IdentifierDeclStatement	uint8_t alpha ;	41:12:680:693	2895540	2	True				
ANR	2895692	IdentifierDecl	alpha		2895540	0					
ANR	2895693	IdentifierDeclType	uint8_t		2895540	0					
ANR	2895694	Identifier	alpha		2895540	1					
ANR	2895695	IfStatement	if ( alpha_code == 0 )		2895540	3					
ANR	2895696	Condition	alpha_code == 0	45:16:714:728	2895540	0	True				
ANR	2895697	EqualityExpression	alpha_code == 0		2895540	0		==			
ANR	2895698	Identifier	alpha_code		2895540	0					
ANR	2895699	PrimaryExpression	0		2895540	1					
ANR	2895700	CompoundStatement		41:33:596:596	2895540	1					
ANR	2895701	ExpressionStatement	alpha = alpha0	47:16:750:764	2895540	0	True				
ANR	2895702	AssignmentExpression	alpha = alpha0		2895540	0		=			
ANR	2895703	Identifier	alpha		2895540	0					
ANR	2895704	Identifier	alpha0		2895540	1					
ANR	2895705	ElseStatement	else		2895540	0					
ANR	2895706	IfStatement	if ( alpha_code == 1 )		2895540	0					
ANR	2895707	Condition	alpha_code == 1	49:23:790:804	2895540	0	True				
ANR	2895708	EqualityExpression	alpha_code == 1		2895540	0		==			
ANR	2895709	Identifier	alpha_code		2895540	0					
ANR	2895710	PrimaryExpression	1		2895540	1					
ANR	2895711	CompoundStatement		45:40:672:672	2895540	1					
ANR	2895712	ExpressionStatement	alpha = alpha1	51:16:826:840	2895540	0	True				
ANR	2895713	AssignmentExpression	alpha = alpha1		2895540	0		=			
ANR	2895714	Identifier	alpha		2895540	0					
ANR	2895715	Identifier	alpha1		2895540	1					
ANR	2895716	ElseStatement	else		2895540	0					
ANR	2895717	CompoundStatement		49:19:727:727	2895540	0					
ANR	2895718	IfStatement	if ( alpha0 > alpha1 )		2895540	0					
ANR	2895719	Condition	alpha0 > alpha1	55:20:885:899	2895540	0	True				
ANR	2895720	RelationalExpression	alpha0 > alpha1		2895540	0		>			
ANR	2895721	Identifier	alpha0		2895540	0					
ANR	2895722	Identifier	alpha1		2895540	1					
ANR	2895723	CompoundStatement		51:37:767:767	2895540	1					
ANR	2895724	ExpressionStatement	alpha = ( uint8_t ) ( ( ( 8 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1 ) / 7 )	57:20:925:1045	2895540	0	True				
ANR	2895725	AssignmentExpression	alpha = ( uint8_t ) ( ( ( 8 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1 ) / 7 )		2895540	0		=			
ANR	2895726	Identifier	alpha		2895540	0					
ANR	2895727	CastExpression	( uint8_t ) ( ( ( 8 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1 ) / 7 )		2895540	1					
ANR	2895728	CastTarget	uint8_t		2895540	0					
ANR	2895729	MultiplicativeExpression	( ( 8 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1 ) / 7		2895540	1		/			
ANR	2895730	AdditiveExpression	( 8 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1		2895540	0		+			
ANR	2895731	MultiplicativeExpression	( 8 - alpha_code ) * alpha0		2895540	0		*			
ANR	2895732	AdditiveExpression	8 - alpha_code		2895540	0		-			
ANR	2895733	PrimaryExpression	8		2895540	0					
ANR	2895734	Identifier	alpha_code		2895540	1					
ANR	2895735	Identifier	alpha0		2895540	1					
ANR	2895736	MultiplicativeExpression	( alpha_code - 1 ) * alpha1		2895540	1		*			
ANR	2895737	AdditiveExpression	alpha_code - 1		2895540	0		-			
ANR	2895738	Identifier	alpha_code		2895540	0					
ANR	2895739	PrimaryExpression	1		2895540	1					
ANR	2895740	Identifier	alpha1		2895540	1					
ANR	2895741	PrimaryExpression	7		2895540	1					
ANR	2895742	ElseStatement	else		2895540	0					
ANR	2895743	CompoundStatement		57:23:936:936	2895540	0					
ANR	2895744	IfStatement	if ( alpha_code == 6 )		2895540	0					
ANR	2895745	Condition	alpha_code == 6	63:24:1098:1112	2895540	0	True				
ANR	2895746	EqualityExpression	alpha_code == 6		2895540	0		==			
ANR	2895747	Identifier	alpha_code		2895540	0					
ANR	2895748	PrimaryExpression	6		2895540	1					
ANR	2895749	CompoundStatement		59:41:980:980	2895540	1					
ANR	2895750	ExpressionStatement	alpha = 0	65:24:1142:1151	2895540	0	True				
ANR	2895751	AssignmentExpression	alpha = 0		2895540	0		=			
ANR	2895752	Identifier	alpha		2895540	0					
ANR	2895753	PrimaryExpression	0		2895540	1					
ANR	2895754	ElseStatement	else		2895540	0					
ANR	2895755	IfStatement	if ( alpha_code == 7 )		2895540	0					
ANR	2895756	Condition	alpha_code == 7	67:31:1185:1199	2895540	0	True				
ANR	2895757	EqualityExpression	alpha_code == 7		2895540	0		==			
ANR	2895758	Identifier	alpha_code		2895540	0					
ANR	2895759	PrimaryExpression	7		2895540	1					
ANR	2895760	CompoundStatement		63:48:1067:1067	2895540	1					
ANR	2895761	ExpressionStatement	alpha = 255	69:24:1229:1240	2895540	0	True				
ANR	2895762	AssignmentExpression	alpha = 255		2895540	0		=			
ANR	2895763	Identifier	alpha		2895540	0					
ANR	2895764	PrimaryExpression	255		2895540	1					
ANR	2895765	ElseStatement	else		2895540	0					
ANR	2895766	CompoundStatement		67:27:1135:1135	2895540	0					
ANR	2895767	ExpressionStatement	alpha = ( uint8_t ) ( ( ( 6 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1 ) / 5 )	73:24:1297:1421	2895540	0	True				
ANR	2895768	AssignmentExpression	alpha = ( uint8_t ) ( ( ( 6 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1 ) / 5 )		2895540	0		=			
ANR	2895769	Identifier	alpha		2895540	0					
ANR	2895770	CastExpression	( uint8_t ) ( ( ( 6 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1 ) / 5 )		2895540	1					
ANR	2895771	CastTarget	uint8_t		2895540	0					
ANR	2895772	MultiplicativeExpression	( ( 6 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1 ) / 5		2895540	1		/			
ANR	2895773	AdditiveExpression	( 6 - alpha_code ) * alpha0 + ( alpha_code - 1 ) * alpha1		2895540	0		+			
ANR	2895774	MultiplicativeExpression	( 6 - alpha_code ) * alpha0		2895540	0		*			
ANR	2895775	AdditiveExpression	6 - alpha_code		2895540	0		-			
ANR	2895776	PrimaryExpression	6		2895540	0					
ANR	2895777	Identifier	alpha_code		2895540	1					
ANR	2895778	Identifier	alpha0		2895540	1					
ANR	2895779	MultiplicativeExpression	( alpha_code - 1 ) * alpha1		2895540	1		*			
ANR	2895780	AdditiveExpression	alpha_code - 1		2895540	0		-			
ANR	2895781	Identifier	alpha_code		2895540	0					
ANR	2895782	PrimaryExpression	1		2895540	1					
ANR	2895783	Identifier	alpha1		2895540	1					
ANR	2895784	PrimaryExpression	5		2895540	1					
ANR	2895785	ExpressionStatement	pixel = colors [ code & 3 ] | ( alpha << 24 )	83:12:1493:1533	2895540	4	True				
ANR	2895786	AssignmentExpression	pixel = colors [ code & 3 ] | ( alpha << 24 )		2895540	0		=			
ANR	2895787	Identifier	pixel		2895540	0					
ANR	2895788	InclusiveOrExpression	colors [ code & 3 ] | ( alpha << 24 )		2895540	1		|			
ANR	2895789	ArrayIndexing	colors [ code & 3 ]		2895540	0					
ANR	2895790	Identifier	colors		2895540	0					
ANR	2895791	BitAndExpression	code & 3		2895540	1		&			
ANR	2895792	Identifier	code		2895540	0					
ANR	2895793	PrimaryExpression	3		2895540	1					
ANR	2895794	ShiftExpression	alpha << 24		2895540	1		<<			
ANR	2895795	Identifier	alpha		2895540	0					
ANR	2895796	PrimaryExpression	24		2895540	1					
ANR	2895797	ExpressionStatement	code >>= 2	85:12:1548:1558	2895540	5	True				
ANR	2895798	AssignmentExpression	code >>= 2		2895540	0		>>=			
ANR	2895799	Identifier	code		2895540	0					
ANR	2895800	PrimaryExpression	2		2895540	1					
ANR	2895801	ExpressionStatement	"AV_WL32 ( dst + x * 4 , pixel )"	87:12:1573:1600	2895540	6	True				
ANR	2895802	CallExpression	"AV_WL32 ( dst + x * 4 , pixel )"		2895540	0					
ANR	2895803	Callee	AV_WL32		2895540	0					
ANR	2895804	Identifier	AV_WL32		2895540	0					
ANR	2895805	ArgumentList	dst + x * 4		2895540	1					
ANR	2895806	Argument	dst + x * 4		2895540	0					
ANR	2895807	AdditiveExpression	dst + x * 4		2895540	0		+			
ANR	2895808	Identifier	dst		2895540	0					
ANR	2895809	MultiplicativeExpression	x * 4		2895540	1		*			
ANR	2895810	Identifier	x		2895540	0					
ANR	2895811	PrimaryExpression	4		2895540	1					
ANR	2895812	Argument	pixel		2895540	1					
ANR	2895813	Identifier	pixel		2895540	0					
ANR	2895814	ExpressionStatement	dst += stride	91:8:1622:1635	2895540	1	True				
ANR	2895815	AssignmentExpression	dst += stride		2895540	0		+=			
ANR	2895816	Identifier	dst		2895540	0					
ANR	2895817	Identifier	stride		2895540	1					
ANR	2895818	ReturnType	static inline void		2895540	1					
ANR	2895819	Identifier	dxt5_block_internal		2895540	2					
ANR	2895820	ParameterList	"uint8_t * dst , ptrdiff_t stride , const uint8_t * block"		2895540	3					
ANR	2895821	Parameter	uint8_t * dst	1:39:39:50	2895540	0	True				
ANR	2895822	ParameterType	uint8_t *		2895540	0					
ANR	2895823	Identifier	dst		2895540	1					
ANR	2895824	Parameter	ptrdiff_t stride	1:53:53:68	2895540	1	True				
ANR	2895825	ParameterType	ptrdiff_t		2895540	0					
ANR	2895826	Identifier	stride		2895540	1					
ANR	2895827	Parameter	const uint8_t * block	3:39:111:130	2895540	2	True				
ANR	2895828	ParameterType	const uint8_t *		2895540	0					
ANR	2895829	Identifier	block		2895540	1					
ANR	2895830	CFGEntryNode	ENTRY		2895540		True				
ANR	2895831	CFGExitNode	EXIT		2895540		True				
ANR	2895832	Symbol	* x		2895540						
ANR	2895833	Symbol	code		2895540						
ANR	2895834	Symbol	* y		2895540						
ANR	2895835	Symbol	alpha_code		2895540						
ANR	2895836	Symbol	dst		2895540						
ANR	2895837	Symbol	alpha_indices		2895540						
ANR	2895838	Symbol	stride		2895540						
ANR	2895839	Symbol	colors		2895540						
ANR	2895840	Symbol	color1		2895540						
ANR	2895841	Symbol	* colors		2895540						
ANR	2895842	Symbol	color0		2895540						
ANR	2895843	Symbol	* alpha_indices		2895540						
ANR	2895844	Symbol	alpha		2895540						
ANR	2895845	Symbol	block		2895540						
ANR	2895846	Symbol	pixel		2895540						
ANR	2895847	Symbol	* ( block )		2895540						
ANR	2895848	Symbol	* block		2895540						
ANR	2895849	Symbol	AV_RL32		2895540						
ANR	2895850	Symbol	* ( block + 1 )		2895540						
ANR	2895851	Symbol	x		2895540						
ANR	2895852	Symbol	y		2895540						
ANR	2895853	Symbol	alpha0		2895540						
ANR	2895854	Symbol	* code		2895540						
ANR	2895855	Symbol	AV_RL16		2895540						
ANR	2895856	Symbol	alpha1		2895540						
