command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	349727	File	/home/p4ultr4n/workplace/ReVeal/raw_code/ac3_decode_frame_03_0.c								
ANR	349728	Function	ac3_decode_frame	1:0:0:5602							
ANR	349729	FunctionDef	"ac3_decode_frame (AVCodecContext * avctx , void * data , int * data_size , uint8_t * buf , int buf_size)"		349728	0					
ANR	349730	CompoundStatement		3:0:109:5602	349728	0					
ANR	349731	IdentifierDeclStatement	AC3DecodeContext * ctx = ( AC3DecodeContext * ) avctx -> priv_data ;	5:4:116:176	349728	0	True				
ANR	349732	IdentifierDecl	* ctx = ( AC3DecodeContext * ) avctx -> priv_data		349728	0					
ANR	349733	IdentifierDeclType	AC3DecodeContext *		349728	0					
ANR	349734	Identifier	ctx		349728	1					
ANR	349735	AssignmentExpression	* ctx = ( AC3DecodeContext * ) avctx -> priv_data		349728	2		=			
ANR	349736	Identifier	ctx		349728	0					
ANR	349737	CastExpression	( AC3DecodeContext * ) avctx -> priv_data		349728	1					
ANR	349738	CastTarget	AC3DecodeContext *		349728	0					
ANR	349739	PtrMemberAccess	avctx -> priv_data		349728	1					
ANR	349740	Identifier	avctx		349728	0					
ANR	349741	Identifier	priv_data		349728	1					
ANR	349742	IdentifierDeclStatement	ac3_audio_block * ab = & ctx -> audio_block ;	7:4:183:222	349728	1	True				
ANR	349743	IdentifierDecl	* ab = & ctx -> audio_block		349728	0					
ANR	349744	IdentifierDeclType	ac3_audio_block *		349728	0					
ANR	349745	Identifier	ab		349728	1					
ANR	349746	AssignmentExpression	* ab = & ctx -> audio_block		349728	2		=			
ANR	349747	Identifier	ab		349728	0					
ANR	349748	UnaryOperationExpression	& ctx -> audio_block		349728	1					
ANR	349749	UnaryOperator	&		349728	0					
ANR	349750	PtrMemberAccess	ctx -> audio_block		349728	1					
ANR	349751	Identifier	ctx		349728	0					
ANR	349752	Identifier	audio_block		349728	1					
ANR	349753	IdentifierDeclStatement	int frame_start ;	9:4:229:244	349728	2	True				
ANR	349754	IdentifierDecl	frame_start		349728	0					
ANR	349755	IdentifierDeclType	int		349728	0					
ANR	349756	Identifier	frame_start		349728	1					
ANR	349757	IdentifierDeclStatement	"int i , j , k , l , value ;"	11:4:251:272	349728	3	True				
ANR	349758	IdentifierDecl	i		349728	0					
ANR	349759	IdentifierDeclType	int		349728	0					
ANR	349760	Identifier	i		349728	1					
ANR	349761	IdentifierDecl	j		349728	1					
ANR	349762	IdentifierDeclType	int		349728	0					
ANR	349763	Identifier	j		349728	1					
ANR	349764	IdentifierDecl	k		349728	2					
ANR	349765	IdentifierDeclType	int		349728	0					
ANR	349766	Identifier	k		349728	1					
ANR	349767	IdentifierDecl	l		349728	3					
ANR	349768	IdentifierDeclType	int		349728	0					
ANR	349769	Identifier	l		349728	1					
ANR	349770	IdentifierDecl	value		349728	4					
ANR	349771	IdentifierDeclType	int		349728	0					
ANR	349772	Identifier	value		349728	1					
ANR	349773	IdentifierDeclStatement	"float tmp_block_first_half [ 128 ] , tmp_block_second_half [ 128 ] ;"	13:4:279:338	349728	4	True				
ANR	349774	IdentifierDecl	tmp_block_first_half [ 128 ]		349728	0					
ANR	349775	IdentifierDeclType	float [ 128 ]		349728	0					
ANR	349776	Identifier	tmp_block_first_half		349728	1					
ANR	349777	PrimaryExpression	128		349728	2					
ANR	349778	IdentifierDecl	tmp_block_second_half [ 128 ]		349728	1					
ANR	349779	IdentifierDeclType	float [ 128 ]		349728	0					
ANR	349780	Identifier	tmp_block_second_half		349728	1					
ANR	349781	PrimaryExpression	128		349728	2					
ANR	349782	IdentifierDeclStatement	int16_t * out_samples = ( int16_t * ) data ;	15:4:345:383	349728	5	True				
ANR	349783	IdentifierDecl	* out_samples = ( int16_t * ) data		349728	0					
ANR	349784	IdentifierDeclType	int16_t *		349728	0					
ANR	349785	Identifier	out_samples		349728	1					
ANR	349786	AssignmentExpression	* out_samples = ( int16_t * ) data		349728	2		=			
ANR	349787	Identifier	out_samples		349728	0					
ANR	349788	CastExpression	( int16_t * ) data		349728	1					
ANR	349789	CastTarget	int16_t *		349728	0					
ANR	349790	Identifier	data		349728	1					
ANR	349791	IdentifierDeclStatement	int nfchans ;	17:4:390:401	349728	6	True				
ANR	349792	IdentifierDecl	nfchans		349728	0					
ANR	349793	IdentifierDeclType	int		349728	0					
ANR	349794	Identifier	nfchans		349728	1					
ANR	349795	ExpressionStatement	"frame_start = ac3_synchronize ( buf , buf_size )"	23:4:440:484	349728	7	True				
ANR	349796	AssignmentExpression	"frame_start = ac3_synchronize ( buf , buf_size )"		349728	0		=			
ANR	349797	Identifier	frame_start		349728	0					
ANR	349798	CallExpression	"ac3_synchronize ( buf , buf_size )"		349728	1					
ANR	349799	Callee	ac3_synchronize		349728	0					
ANR	349800	Identifier	ac3_synchronize		349728	0					
ANR	349801	ArgumentList	buf		349728	1					
ANR	349802	Argument	buf		349728	0					
ANR	349803	Identifier	buf		349728	0					
ANR	349804	Argument	buf_size		349728	1					
ANR	349805	Identifier	buf_size		349728	0					
ANR	349806	IfStatement	if ( frame_start == - 1 )		349728	8					
ANR	349807	Condition	frame_start == - 1	25:8:495:511	349728	0	True				
ANR	349808	EqualityExpression	frame_start == - 1		349728	0		==			
ANR	349809	Identifier	frame_start		349728	0					
ANR	349810	UnaryOperationExpression	- 1		349728	1					
ANR	349811	UnaryOperator	-		349728	0					
ANR	349812	PrimaryExpression	1		349728	1					
ANR	349813	CompoundStatement		23:27:404:404	349728	1					
ANR	349814	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""frame is not synchronized\\n"" )"	27:8:525:583	349728	0	True				
ANR	349815	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""frame is not synchronized\\n"" )"		349728	0					
ANR	349816	Callee	av_log		349728	0					
ANR	349817	Identifier	av_log		349728	0					
ANR	349818	ArgumentList	avctx		349728	1					
ANR	349819	Argument	avctx		349728	0					
ANR	349820	Identifier	avctx		349728	0					
ANR	349821	Argument	AV_LOG_ERROR		349728	1					
ANR	349822	Identifier	AV_LOG_ERROR		349728	0					
ANR	349823	Argument	"""frame is not synchronized\\n"""		349728	2					
ANR	349824	PrimaryExpression	"""frame is not synchronized\\n"""		349728	0					
ANR	349825	ExpressionStatement	* data_size = 0	29:8:594:608	349728	1	True				
ANR	349826	AssignmentExpression	* data_size = 0		349728	0		=			
ANR	349827	UnaryOperationExpression	* data_size		349728	0					
ANR	349828	UnaryOperator	*		349728	0					
ANR	349829	Identifier	data_size		349728	1					
ANR	349830	PrimaryExpression	0		349728	1					
ANR	349831	ReturnStatement	return buf_size ;	31:8:619:634	349728	2	True				
ANR	349832	Identifier	buf_size		349728	0					
ANR	349833	ExpressionStatement	"init_get_bits ( & ( ctx -> gb ) , buf + frame_start , ( buf_size - frame_start ) * 8 )"	39:4:721:795	349728	9	True				
ANR	349834	CallExpression	"init_get_bits ( & ( ctx -> gb ) , buf + frame_start , ( buf_size - frame_start ) * 8 )"		349728	0					
ANR	349835	Callee	init_get_bits		349728	0					
ANR	349836	Identifier	init_get_bits		349728	0					
ANR	349837	ArgumentList	& ( ctx -> gb )		349728	1					
ANR	349838	Argument	& ( ctx -> gb )		349728	0					
ANR	349839	UnaryOperationExpression	& ( ctx -> gb )		349728	0					
ANR	349840	UnaryOperator	&		349728	0					
ANR	349841	PtrMemberAccess	ctx -> gb		349728	1					
ANR	349842	Identifier	ctx		349728	0					
ANR	349843	Identifier	gb		349728	1					
ANR	349844	Argument	buf + frame_start		349728	1					
ANR	349845	AdditiveExpression	buf + frame_start		349728	0		+			
ANR	349846	Identifier	buf		349728	0					
ANR	349847	Identifier	frame_start		349728	1					
ANR	349848	Argument	( buf_size - frame_start ) * 8		349728	2					
ANR	349849	MultiplicativeExpression	( buf_size - frame_start ) * 8		349728	0		*			
ANR	349850	AdditiveExpression	buf_size - frame_start		349728	0		-			
ANR	349851	Identifier	buf_size		349728	0					
ANR	349852	Identifier	frame_start		349728	1					
ANR	349853	PrimaryExpression	8		349728	1					
ANR	349854	IfStatement	if ( ! ac3_parse_sync_info ( ctx ) )		349728	10					
ANR	349855	Condition	! ac3_parse_sync_info ( ctx )	47:8:920:944	349728	0	True				
ANR	349856	UnaryOperationExpression	! ac3_parse_sync_info ( ctx )		349728	0					
ANR	349857	UnaryOperator	!		349728	0					
ANR	349858	CallExpression	ac3_parse_sync_info ( ctx )		349728	1					
ANR	349859	Callee	ac3_parse_sync_info		349728	0					
ANR	349860	Identifier	ac3_parse_sync_info		349728	0					
ANR	349861	ArgumentList	ctx		349728	1					
ANR	349862	Argument	ctx		349728	0					
ANR	349863	Identifier	ctx		349728	0					
ANR	349864	CompoundStatement		45:35:837:837	349728	1					
ANR	349865	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""\\n"" )"	49:8:958:991	349728	0	True				
ANR	349866	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""\\n"" )"		349728	0					
ANR	349867	Callee	av_log		349728	0					
ANR	349868	Identifier	av_log		349728	0					
ANR	349869	ArgumentList	avctx		349728	1					
ANR	349870	Argument	avctx		349728	0					
ANR	349871	Identifier	avctx		349728	0					
ANR	349872	Argument	AV_LOG_ERROR		349728	1					
ANR	349873	Identifier	AV_LOG_ERROR		349728	0					
ANR	349874	Argument	"""\\n"""		349728	2					
ANR	349875	PrimaryExpression	"""\\n"""		349728	0					
ANR	349876	ExpressionStatement	* data_size = 0	51:8:1002:1016	349728	1	True				
ANR	349877	AssignmentExpression	* data_size = 0		349728	0		=			
ANR	349878	UnaryOperationExpression	* data_size		349728	0					
ANR	349879	UnaryOperator	*		349728	0					
ANR	349880	Identifier	data_size		349728	1					
ANR	349881	PrimaryExpression	0		349728	1					
ANR	349882	ReturnStatement	return - 1 ;	53:8:1027:1036	349728	2	True				
ANR	349883	UnaryOperationExpression	- 1		349728	0					
ANR	349884	UnaryOperator	-		349728	0					
ANR	349885	PrimaryExpression	1		349728	1					
ANR	349886	IfStatement	if ( ac3_parse_bsi ( ctx ) )		349728	11					
ANR	349887	Condition	ac3_parse_bsi ( ctx )	75:8:1286:1303	349728	0	True				
ANR	349888	CallExpression	ac3_parse_bsi ( ctx )		349728	0					
ANR	349889	Callee	ac3_parse_bsi		349728	0					
ANR	349890	Identifier	ac3_parse_bsi		349728	0					
ANR	349891	ArgumentList	ctx		349728	1					
ANR	349892	Argument	ctx		349728	0					
ANR	349893	Identifier	ctx		349728	0					
ANR	349894	CompoundStatement		73:28:1196:1196	349728	1					
ANR	349895	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""bsid is not valid\\n"" )"	77:8:1317:1367	349728	0	True				
ANR	349896	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""bsid is not valid\\n"" )"		349728	0					
ANR	349897	Callee	av_log		349728	0					
ANR	349898	Identifier	av_log		349728	0					
ANR	349899	ArgumentList	avctx		349728	1					
ANR	349900	Argument	avctx		349728	0					
ANR	349901	Identifier	avctx		349728	0					
ANR	349902	Argument	AV_LOG_ERROR		349728	1					
ANR	349903	Identifier	AV_LOG_ERROR		349728	0					
ANR	349904	Argument	"""bsid is not valid\\n"""		349728	2					
ANR	349905	PrimaryExpression	"""bsid is not valid\\n"""		349728	0					
ANR	349906	ExpressionStatement	* data_size = 0	79:8:1378:1392	349728	1	True				
ANR	349907	AssignmentExpression	* data_size = 0		349728	0		=			
ANR	349908	UnaryOperationExpression	* data_size		349728	0					
ANR	349909	UnaryOperator	*		349728	0					
ANR	349910	Identifier	data_size		349728	1					
ANR	349911	PrimaryExpression	0		349728	1					
ANR	349912	ReturnStatement	return - 1 ;	81:8:1403:1412	349728	2	True				
ANR	349913	UnaryOperationExpression	- 1		349728	0					
ANR	349914	UnaryOperator	-		349728	0					
ANR	349915	PrimaryExpression	1		349728	1					
ANR	349916	ForStatement	for ( i = 0 ; i < MAX_BLOCKS ; i ++ )		349728	12					
ANR	349917	ForInit	i = 0 ;	87:9:1433:1438	349728	0	True				
ANR	349918	AssignmentExpression	i = 0		349728	0		=			
ANR	349919	Identifier	i		349728	0					
ANR	349920	PrimaryExpression	0		349728	1					
ANR	349921	Condition	i < MAX_BLOCKS	87:16:1440:1453	349728	1	True				
ANR	349922	RelationalExpression	i < MAX_BLOCKS		349728	0		<			
ANR	349923	Identifier	i		349728	0					
ANR	349924	Identifier	MAX_BLOCKS		349728	1					
ANR	349925	PostIncDecOperationExpression	i ++	87:32:1456:1458	349728	2	True				
ANR	349926	Identifier	i		349728	0					
ANR	349927	IncDec	++		349728	1					
ANR	349928	ExpressionStatement	"memset ( ctx -> delay [ i ] , 0 , sizeof ( ctx -> delay [ i ] ) )"	89:8:1470:1517	349728	3	True				
ANR	349929	CallExpression	"memset ( ctx -> delay [ i ] , 0 , sizeof ( ctx -> delay [ i ] ) )"		349728	0					
ANR	349930	Callee	memset		349728	0					
ANR	349931	Identifier	memset		349728	0					
ANR	349932	ArgumentList	ctx -> delay [ i ]		349728	1					
ANR	349933	Argument	ctx -> delay [ i ]		349728	0					
ANR	349934	ArrayIndexing	ctx -> delay [ i ]		349728	0					
ANR	349935	PtrMemberAccess	ctx -> delay		349728	0					
ANR	349936	Identifier	ctx		349728	0					
ANR	349937	Identifier	delay		349728	1					
ANR	349938	Identifier	i		349728	1					
ANR	349939	Argument	0		349728	1					
ANR	349940	PrimaryExpression	0		349728	0					
ANR	349941	Argument	sizeof ( ctx -> delay [ i ] )		349728	2					
ANR	349942	SizeofExpression	sizeof ( ctx -> delay [ i ] )		349728	0					
ANR	349943	Sizeof	sizeof		349728	0					
ANR	349944	ArrayIndexing	ctx -> delay [ i ]		349728	1					
ANR	349945	PtrMemberAccess	ctx -> delay		349728	0					
ANR	349946	Identifier	ctx		349728	0					
ANR	349947	Identifier	delay		349728	1					
ANR	349948	Identifier	i		349728	1					
ANR	349949	ExpressionStatement	avctx -> sample_rate = ctx -> sync_info . sampling_rate	91:4:1524:1573	349728	13	True				
ANR	349950	AssignmentExpression	avctx -> sample_rate = ctx -> sync_info . sampling_rate		349728	0		=			
ANR	349951	PtrMemberAccess	avctx -> sample_rate		349728	0					
ANR	349952	Identifier	avctx		349728	0					
ANR	349953	Identifier	sample_rate		349728	1					
ANR	349954	MemberAccess	ctx -> sync_info . sampling_rate		349728	1					
ANR	349955	PtrMemberAccess	ctx -> sync_info		349728	0					
ANR	349956	Identifier	ctx		349728	0					
ANR	349957	Identifier	sync_info		349728	1					
ANR	349958	Identifier	sampling_rate		349728	1					
ANR	349959	ExpressionStatement	avctx -> bit_rate = ctx -> sync_info . bit_rate	93:4:1580:1621	349728	14	True				
ANR	349960	AssignmentExpression	avctx -> bit_rate = ctx -> sync_info . bit_rate		349728	0		=			
ANR	349961	PtrMemberAccess	avctx -> bit_rate		349728	0					
ANR	349962	Identifier	avctx		349728	0					
ANR	349963	Identifier	bit_rate		349728	1					
ANR	349964	MemberAccess	ctx -> sync_info . bit_rate		349728	1					
ANR	349965	PtrMemberAccess	ctx -> sync_info		349728	0					
ANR	349966	Identifier	ctx		349728	0					
ANR	349967	Identifier	sync_info		349728	1					
ANR	349968	Identifier	bit_rate		349728	1					
ANR	349969	IfStatement	if ( avctx -> channels == 0 )		349728	15					
ANR	349970	Condition	avctx -> channels == 0	95:8:1632:1651	349728	0	True				
ANR	349971	EqualityExpression	avctx -> channels == 0		349728	0		==			
ANR	349972	PtrMemberAccess	avctx -> channels		349728	0					
ANR	349973	Identifier	avctx		349728	0					
ANR	349974	Identifier	channels		349728	1					
ANR	349975	PrimaryExpression	0		349728	1					
ANR	349976	CompoundStatement		93:30:1544:1544	349728	1					
ANR	349977	ExpressionStatement	ctx -> output = AC3_OUTPUT_UNMODIFIED	99:8:1757:1792	349728	0	True				
ANR	349978	AssignmentExpression	ctx -> output = AC3_OUTPUT_UNMODIFIED		349728	0		=			
ANR	349979	PtrMemberAccess	ctx -> output		349728	0					
ANR	349980	Identifier	ctx		349728	0					
ANR	349981	Identifier	output		349728	1					
ANR	349982	Identifier	AC3_OUTPUT_UNMODIFIED		349728	1					
ANR	349983	ElseStatement	else		349728	0					
ANR	349984	IfStatement	if ( ( ctx -> bsi . nfchans + ( ( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0 ) ) < avctx -> channels )		349728	0					
ANR	349985	Condition	( ctx -> bsi . nfchans + ( ( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0 ) ) < avctx -> channels	103:13:1815:1895	349728	0	True				
ANR	349986	RelationalExpression	( ctx -> bsi . nfchans + ( ( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0 ) ) < avctx -> channels		349728	0		<			
ANR	349987	AdditiveExpression	ctx -> bsi . nfchans + ( ( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0 )		349728	0		+			
ANR	349988	MemberAccess	ctx -> bsi . nfchans		349728	0					
ANR	349989	PtrMemberAccess	ctx -> bsi		349728	0					
ANR	349990	Identifier	ctx		349728	0					
ANR	349991	Identifier	bsi		349728	1					
ANR	349992	Identifier	nfchans		349728	1					
ANR	349993	ConditionalExpression	( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0		349728	1					
ANR	349994	Condition	ctx -> bsi . flags & AC3_BSI_LFEON		349728	0					
ANR	349995	BitAndExpression	ctx -> bsi . flags & AC3_BSI_LFEON		349728	0		&			
ANR	349996	MemberAccess	ctx -> bsi . flags		349728	0					
ANR	349997	PtrMemberAccess	ctx -> bsi		349728	0					
ANR	349998	Identifier	ctx		349728	0					
ANR	349999	Identifier	bsi		349728	1					
ANR	350000	Identifier	flags		349728	1					
ANR	350001	Identifier	AC3_BSI_LFEON		349728	1					
ANR	350002	PrimaryExpression	1		349728	1					
ANR	350003	PrimaryExpression	0		349728	2					
ANR	350004	PtrMemberAccess	avctx -> channels		349728	1					
ANR	350005	Identifier	avctx		349728	0					
ANR	350006	Identifier	channels		349728	1					
ANR	350007	CompoundStatement		101:96:1788:1788	349728	1					
ANR	350008	ExpressionStatement	"av_log ( avctx , AV_LOG_INFO , ""ac3_decoder: AC3 Source Channels Are Less Then Specified %d: Output to %d Channels\\n"" , avctx -> channels , ( ctx -> bsi . nfchans + ( ( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0 ) ) )"	105:8:1909:2122	349728	0	True				
ANR	350009	CallExpression	"av_log ( avctx , AV_LOG_INFO , ""ac3_decoder: AC3 Source Channels Are Less Then Specified %d: Output to %d Channels\\n"" , avctx -> channels , ( ctx -> bsi . nfchans + ( ( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0 ) ) )"		349728	0					
ANR	350010	Callee	av_log		349728	0					
ANR	350011	Identifier	av_log		349728	0					
ANR	350012	ArgumentList	avctx		349728	1					
ANR	350013	Argument	avctx		349728	0					
ANR	350014	Identifier	avctx		349728	0					
ANR	350015	Argument	AV_LOG_INFO		349728	1					
ANR	350016	Identifier	AV_LOG_INFO		349728	0					
ANR	350017	Argument	"""ac3_decoder: AC3 Source Channels Are Less Then Specified %d: Output to %d Channels\\n"""		349728	2					
ANR	350018	PrimaryExpression	"""ac3_decoder: AC3 Source Channels Are Less Then Specified %d: Output to %d Channels\\n"""		349728	0					
ANR	350019	Argument	avctx -> channels		349728	3					
ANR	350020	PtrMemberAccess	avctx -> channels		349728	0					
ANR	350021	Identifier	avctx		349728	0					
ANR	350022	Identifier	channels		349728	1					
ANR	350023	Argument	ctx -> bsi . nfchans + ( ( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0 )		349728	4					
ANR	350024	AdditiveExpression	ctx -> bsi . nfchans + ( ( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0 )		349728	0		+			
ANR	350025	MemberAccess	ctx -> bsi . nfchans		349728	0					
ANR	350026	PtrMemberAccess	ctx -> bsi		349728	0					
ANR	350027	Identifier	ctx		349728	0					
ANR	350028	Identifier	bsi		349728	1					
ANR	350029	Identifier	nfchans		349728	1					
ANR	350030	ConditionalExpression	( ctx -> bsi . flags & AC3_BSI_LFEON ) ? 1 : 0		349728	1					
ANR	350031	Condition	ctx -> bsi . flags & AC3_BSI_LFEON		349728	0					
ANR	350032	BitAndExpression	ctx -> bsi . flags & AC3_BSI_LFEON		349728	0		&			
ANR	350033	MemberAccess	ctx -> bsi . flags		349728	0					
ANR	350034	PtrMemberAccess	ctx -> bsi		349728	0					
ANR	350035	Identifier	ctx		349728	0					
ANR	350036	Identifier	bsi		349728	1					
ANR	350037	Identifier	flags		349728	1					
ANR	350038	Identifier	AC3_BSI_LFEON		349728	1					
ANR	350039	PrimaryExpression	1		349728	1					
ANR	350040	PrimaryExpression	0		349728	2					
ANR	350041	ExpressionStatement	ctx -> output = AC3_OUTPUT_UNMODIFIED	111:8:2225:2260	349728	1	True				
ANR	350042	AssignmentExpression	ctx -> output = AC3_OUTPUT_UNMODIFIED		349728	0		=			
ANR	350043	PtrMemberAccess	ctx -> output		349728	0					
ANR	350044	Identifier	ctx		349728	0					
ANR	350045	Identifier	output		349728	1					
ANR	350046	Identifier	AC3_OUTPUT_UNMODIFIED		349728	1					
ANR	350047	ElseStatement	else		349728	0					
ANR	350048	IfStatement	if ( avctx -> channels == 1 )		349728	0					
ANR	350049	Condition	avctx -> channels == 1	115:13:2283:2302	349728	0	True				
ANR	350050	EqualityExpression	avctx -> channels == 1		349728	0		==			
ANR	350051	PtrMemberAccess	avctx -> channels		349728	0					
ANR	350052	Identifier	avctx		349728	0					
ANR	350053	Identifier	channels		349728	1					
ANR	350054	PrimaryExpression	1		349728	1					
ANR	350055	CompoundStatement		113:35:2195:2195	349728	1					
ANR	350056	ExpressionStatement	ctx -> output = AC3_OUTPUT_MONO	117:8:2316:2345	349728	0	True				
ANR	350057	AssignmentExpression	ctx -> output = AC3_OUTPUT_MONO		349728	0		=			
ANR	350058	PtrMemberAccess	ctx -> output		349728	0					
ANR	350059	Identifier	ctx		349728	0					
ANR	350060	Identifier	output		349728	1					
ANR	350061	Identifier	AC3_OUTPUT_MONO		349728	1					
ANR	350062	ElseStatement	else		349728	0					
ANR	350063	IfStatement	if ( avctx -> channels == 2 )		349728	0					
ANR	350064	Condition	avctx -> channels == 2	119:15:2363:2382	349728	0	True				
ANR	350065	EqualityExpression	avctx -> channels == 2		349728	0		==			
ANR	350066	PtrMemberAccess	avctx -> channels		349728	0					
ANR	350067	Identifier	avctx		349728	0					
ANR	350068	Identifier	channels		349728	1					
ANR	350069	PrimaryExpression	2		349728	1					
ANR	350070	CompoundStatement		117:37:2275:2275	349728	1					
ANR	350071	IfStatement	if ( ctx -> bsi . dsurmod == 0x02 )		349728	0					
ANR	350072	Condition	ctx -> bsi . dsurmod == 0x02	121:12:2400:2423	349728	0	True				
ANR	350073	EqualityExpression	ctx -> bsi . dsurmod == 0x02		349728	0		==			
ANR	350074	MemberAccess	ctx -> bsi . dsurmod		349728	0					
ANR	350075	PtrMemberAccess	ctx -> bsi		349728	0					
ANR	350076	Identifier	ctx		349728	0					
ANR	350077	Identifier	bsi		349728	1					
ANR	350078	Identifier	dsurmod		349728	1					
ANR	350079	PrimaryExpression	0x02		349728	1					
ANR	350080	ExpressionStatement	ctx -> output = AC3_OUTPUT_DOLBY	123:12:2439:2469	349728	1	True				
ANR	350081	AssignmentExpression	ctx -> output = AC3_OUTPUT_DOLBY		349728	0		=			
ANR	350082	PtrMemberAccess	ctx -> output		349728	0					
ANR	350083	Identifier	ctx		349728	0					
ANR	350084	Identifier	output		349728	1					
ANR	350085	Identifier	AC3_OUTPUT_DOLBY		349728	1					
ANR	350086	ElseStatement	else		349728	0					
ANR	350087	ExpressionStatement	ctx -> output = AC3_OUTPUT_STEREO	127:12:2498:2529	349728	0	True				
ANR	350088	AssignmentExpression	ctx -> output = AC3_OUTPUT_STEREO		349728	0		=			
ANR	350089	PtrMemberAccess	ctx -> output		349728	0					
ANR	350090	Identifier	ctx		349728	0					
ANR	350091	Identifier	output		349728	1					
ANR	350092	Identifier	AC3_OUTPUT_STEREO		349728	1					
ANR	350093	ExpressionStatement	"av_log ( avctx , AV_LOG_INFO , ""channels = %d \\t bit rate = %d \\t sampling rate = %d \\n"" , avctx -> channels , avctx -> sample_rate , avctx -> bit_rate )"	135:4:2547:2686	349728	16	True				
ANR	350094	CallExpression	"av_log ( avctx , AV_LOG_INFO , ""channels = %d \\t bit rate = %d \\t sampling rate = %d \\n"" , avctx -> channels , avctx -> sample_rate , avctx -> bit_rate )"		349728	0					
ANR	350095	Callee	av_log		349728	0					
ANR	350096	Identifier	av_log		349728	0					
ANR	350097	ArgumentList	avctx		349728	1					
ANR	350098	Argument	avctx		349728	0					
ANR	350099	Identifier	avctx		349728	0					
ANR	350100	Argument	AV_LOG_INFO		349728	1					
ANR	350101	Identifier	AV_LOG_INFO		349728	0					
ANR	350102	Argument	"""channels = %d \\t bit rate = %d \\t sampling rate = %d \\n"""		349728	2					
ANR	350103	PrimaryExpression	"""channels = %d \\t bit rate = %d \\t sampling rate = %d \\n"""		349728	0					
ANR	350104	Argument	avctx -> channels		349728	3					
ANR	350105	PtrMemberAccess	avctx -> channels		349728	0					
ANR	350106	Identifier	avctx		349728	0					
ANR	350107	Identifier	channels		349728	1					
ANR	350108	Argument	avctx -> sample_rate		349728	4					
ANR	350109	PtrMemberAccess	avctx -> sample_rate		349728	0					
ANR	350110	Identifier	avctx		349728	0					
ANR	350111	Identifier	sample_rate		349728	1					
ANR	350112	Argument	avctx -> bit_rate		349728	5					
ANR	350113	PtrMemberAccess	avctx -> bit_rate		349728	0					
ANR	350114	Identifier	avctx		349728	0					
ANR	350115	Identifier	bit_rate		349728	1					
ANR	350116	ExpressionStatement	* data_size = 0	141:4:2726:2740	349728	17	True				
ANR	350117	AssignmentExpression	* data_size = 0		349728	0		=			
ANR	350118	UnaryOperationExpression	* data_size		349728	0					
ANR	350119	UnaryOperator	*		349728	0					
ANR	350120	Identifier	data_size		349728	1					
ANR	350121	PrimaryExpression	0		349728	1					
ANR	350122	ForStatement	for ( i = 0 ; i < 6 ; i ++ )		349728	18					
ANR	350123	ForInit	i = 0 ;	143:9:2752:2757	349728	0	True				
ANR	350124	AssignmentExpression	i = 0		349728	0		=			
ANR	350125	Identifier	i		349728	0					
ANR	350126	PrimaryExpression	0		349728	1					
ANR	350127	Condition	i < 6	143:16:2759:2763	349728	1	True				
ANR	350128	RelationalExpression	i < 6		349728	0		<			
ANR	350129	Identifier	i		349728	0					
ANR	350130	PrimaryExpression	6		349728	1					
ANR	350131	PostIncDecOperationExpression	i ++	143:23:2766:2768	349728	2	True				
ANR	350132	Identifier	i		349728	0					
ANR	350133	IncDec	++		349728	1					
ANR	350134	CompoundStatement		141:28:2661:2661	349728	3					
ANR	350135	IfStatement	"if ( ac3_parse_audio_block ( ctx , i ) )"		349728	0					
ANR	350136	Condition	"ac3_parse_audio_block ( ctx , i )"	145:12:2786:2814	349728	0	True				
ANR	350137	CallExpression	"ac3_parse_audio_block ( ctx , i )"		349728	0					
ANR	350138	Callee	ac3_parse_audio_block		349728	0					
ANR	350139	Identifier	ac3_parse_audio_block		349728	0					
ANR	350140	ArgumentList	ctx		349728	1					
ANR	350141	Argument	ctx		349728	0					
ANR	350142	Identifier	ctx		349728	0					
ANR	350143	Argument	i		349728	1					
ANR	350144	Identifier	i		349728	0					
ANR	350145	CompoundStatement		143:43:2707:2707	349728	1					
ANR	350146	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""error parsing the audio block\\n"" )"	147:12:2832:2894	349728	0	True				
ANR	350147	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""error parsing the audio block\\n"" )"		349728	0					
ANR	350148	Callee	av_log		349728	0					
ANR	350149	Identifier	av_log		349728	0					
ANR	350150	ArgumentList	avctx		349728	1					
ANR	350151	Argument	avctx		349728	0					
ANR	350152	Identifier	avctx		349728	0					
ANR	350153	Argument	AV_LOG_ERROR		349728	1					
ANR	350154	Identifier	AV_LOG_ERROR		349728	0					
ANR	350155	Argument	"""error parsing the audio block\\n"""		349728	2					
ANR	350156	PrimaryExpression	"""error parsing the audio block\\n"""		349728	0					
ANR	350157	ExpressionStatement	* data_size = 0	149:12:2909:2923	349728	1	True				
ANR	350158	AssignmentExpression	* data_size = 0		349728	0		=			
ANR	350159	UnaryOperationExpression	* data_size		349728	0					
ANR	350160	UnaryOperator	*		349728	0					
ANR	350161	Identifier	data_size		349728	1					
ANR	350162	PrimaryExpression	0		349728	1					
ANR	350163	ReturnStatement	return - 1 ;	151:12:2938:2947	349728	2	True				
ANR	350164	UnaryOperationExpression	- 1		349728	0					
ANR	350165	UnaryOperator	-		349728	0					
ANR	350166	PrimaryExpression	1		349728	1					
ANR	350167	ExpressionStatement	"av_log ( NULL , AV_LOG_INFO , ""doing imdct\\n"" )"	157:8:2971:3013	349728	1	True				
ANR	350168	CallExpression	"av_log ( NULL , AV_LOG_INFO , ""doing imdct\\n"" )"		349728	0					
ANR	350169	Callee	av_log		349728	0					
ANR	350170	Identifier	av_log		349728	0					
ANR	350171	ArgumentList	NULL		349728	1					
ANR	350172	Argument	NULL		349728	0					
ANR	350173	Identifier	NULL		349728	0					
ANR	350174	Argument	AV_LOG_INFO		349728	1					
ANR	350175	Identifier	AV_LOG_INFO		349728	0					
ANR	350176	Argument	"""doing imdct\\n"""		349728	2					
ANR	350177	PrimaryExpression	"""doing imdct\\n"""		349728	0					
ANR	350178	IfStatement	if ( ctx -> bsi . flags & AC3_BSI_LFEON )		349728	2					
ANR	350179	Condition	ctx -> bsi . flags & AC3_BSI_LFEON	161:12:3030:3059	349728	0	True				
ANR	350180	BitAndExpression	ctx -> bsi . flags & AC3_BSI_LFEON		349728	0		&			
ANR	350181	MemberAccess	ctx -> bsi . flags		349728	0					
ANR	350182	PtrMemberAccess	ctx -> bsi		349728	0					
ANR	350183	Identifier	ctx		349728	0					
ANR	350184	Identifier	bsi		349728	1					
ANR	350185	Identifier	flags		349728	1					
ANR	350186	Identifier	AC3_BSI_LFEON		349728	1					
ANR	350187	CompoundStatement		159:44:2952:2952	349728	1					
ANR	350188	ExpressionStatement	"ff_imdct_calc ( & ctx -> imdct_ctx_512 , ctx -> tmp_output , ab -> transform_coeffs [ 0 ] , ctx -> tmp_imdct )"	163:12:3077:3169	349728	0	True				
ANR	350189	CallExpression	"ff_imdct_calc ( & ctx -> imdct_ctx_512 , ctx -> tmp_output , ab -> transform_coeffs [ 0 ] , ctx -> tmp_imdct )"		349728	0					
ANR	350190	Callee	ff_imdct_calc		349728	0					
ANR	350191	Identifier	ff_imdct_calc		349728	0					
ANR	350192	ArgumentList	& ctx -> imdct_ctx_512		349728	1					
ANR	350193	Argument	& ctx -> imdct_ctx_512		349728	0					
ANR	350194	UnaryOperationExpression	& ctx -> imdct_ctx_512		349728	0					
ANR	350195	UnaryOperator	&		349728	0					
ANR	350196	PtrMemberAccess	ctx -> imdct_ctx_512		349728	1					
ANR	350197	Identifier	ctx		349728	0					
ANR	350198	Identifier	imdct_ctx_512		349728	1					
ANR	350199	Argument	ctx -> tmp_output		349728	1					
ANR	350200	PtrMemberAccess	ctx -> tmp_output		349728	0					
ANR	350201	Identifier	ctx		349728	0					
ANR	350202	Identifier	tmp_output		349728	1					
ANR	350203	Argument	ab -> transform_coeffs [ 0 ]		349728	2					
ANR	350204	ArrayIndexing	ab -> transform_coeffs [ 0 ]		349728	0					
ANR	350205	PtrMemberAccess	ab -> transform_coeffs		349728	0					
ANR	350206	Identifier	ab		349728	0					
ANR	350207	Identifier	transform_coeffs		349728	1					
ANR	350208	PrimaryExpression	0		349728	1					
ANR	350209	Argument	ctx -> tmp_imdct		349728	3					
ANR	350210	PtrMemberAccess	ctx -> tmp_imdct		349728	0					
ANR	350211	Identifier	ctx		349728	0					
ANR	350212	Identifier	tmp_imdct		349728	1					
ANR	350213	ForStatement	for ( l = 0 ; l < 256 ; l ++ )		349728	1					
ANR	350214	ForInit	l = 0 ;	165:17:3189:3194	349728	0	True				
ANR	350215	AssignmentExpression	l = 0		349728	0		=			
ANR	350216	Identifier	l		349728	0					
ANR	350217	PrimaryExpression	0		349728	1					
ANR	350218	Condition	l < 256	165:24:3196:3202	349728	1	True				
ANR	350219	RelationalExpression	l < 256		349728	0		<			
ANR	350220	Identifier	l		349728	0					
ANR	350221	PrimaryExpression	256		349728	1					
ANR	350222	PostIncDecOperationExpression	l ++	165:33:3205:3207	349728	2	True				
ANR	350223	Identifier	l		349728	0					
ANR	350224	IncDec	++		349728	1					
ANR	350225	ExpressionStatement	ab -> block_output [ 0 ] [ l ] = ctx -> tmp_output [ l ] * window [ l ] + ctx -> delay [ 0 ] [ l ] * window [ 255 - l ]	167:16:3227:3318	349728	3	True				
ANR	350226	AssignmentExpression	ab -> block_output [ 0 ] [ l ] = ctx -> tmp_output [ l ] * window [ l ] + ctx -> delay [ 0 ] [ l ] * window [ 255 - l ]		349728	0		=			
ANR	350227	ArrayIndexing	ab -> block_output [ 0 ] [ l ]		349728	0					
ANR	350228	ArrayIndexing	ab -> block_output [ 0 ]		349728	0					
ANR	350229	PtrMemberAccess	ab -> block_output		349728	0					
ANR	350230	Identifier	ab		349728	0					
ANR	350231	Identifier	block_output		349728	1					
ANR	350232	PrimaryExpression	0		349728	1					
ANR	350233	Identifier	l		349728	1					
ANR	350234	AdditiveExpression	ctx -> tmp_output [ l ] * window [ l ] + ctx -> delay [ 0 ] [ l ] * window [ 255 - l ]		349728	1		+			
ANR	350235	MultiplicativeExpression	ctx -> tmp_output [ l ] * window [ l ]		349728	0		*			
ANR	350236	ArrayIndexing	ctx -> tmp_output [ l ]		349728	0					
ANR	350237	PtrMemberAccess	ctx -> tmp_output		349728	0					
ANR	350238	Identifier	ctx		349728	0					
ANR	350239	Identifier	tmp_output		349728	1					
ANR	350240	Identifier	l		349728	1					
ANR	350241	ArrayIndexing	window [ l ]		349728	1					
ANR	350242	Identifier	window		349728	0					
ANR	350243	Identifier	l		349728	1					
ANR	350244	MultiplicativeExpression	ctx -> delay [ 0 ] [ l ] * window [ 255 - l ]		349728	1		*			
ANR	350245	ArrayIndexing	ctx -> delay [ 0 ] [ l ]		349728	0					
ANR	350246	ArrayIndexing	ctx -> delay [ 0 ]		349728	0					
ANR	350247	PtrMemberAccess	ctx -> delay		349728	0					
ANR	350248	Identifier	ctx		349728	0					
ANR	350249	Identifier	delay		349728	1					
ANR	350250	PrimaryExpression	0		349728	1					
ANR	350251	Identifier	l		349728	1					
ANR	350252	ArrayIndexing	window [ 255 - l ]		349728	1					
ANR	350253	Identifier	window		349728	0					
ANR	350254	AdditiveExpression	255 - l		349728	1		-			
ANR	350255	PrimaryExpression	255		349728	0					
ANR	350256	Identifier	l		349728	1					
ANR	350257	ExpressionStatement	"memcpy ( ctx -> delay [ 0 ] , ctx -> tmp_output + 256 , sizeof ( ctx -> delay [ 0 ] ) )"	169:12:3333:3400	349728	2	True				
ANR	350258	CallExpression	"memcpy ( ctx -> delay [ 0 ] , ctx -> tmp_output + 256 , sizeof ( ctx -> delay [ 0 ] ) )"		349728	0					
ANR	350259	Callee	memcpy		349728	0					
ANR	350260	Identifier	memcpy		349728	0					
ANR	350261	ArgumentList	ctx -> delay [ 0 ]		349728	1					
ANR	350262	Argument	ctx -> delay [ 0 ]		349728	0					
ANR	350263	ArrayIndexing	ctx -> delay [ 0 ]		349728	0					
ANR	350264	PtrMemberAccess	ctx -> delay		349728	0					
ANR	350265	Identifier	ctx		349728	0					
ANR	350266	Identifier	delay		349728	1					
ANR	350267	PrimaryExpression	0		349728	1					
ANR	350268	Argument	ctx -> tmp_output + 256		349728	1					
ANR	350269	AdditiveExpression	ctx -> tmp_output + 256		349728	0		+			
ANR	350270	PtrMemberAccess	ctx -> tmp_output		349728	0					
ANR	350271	Identifier	ctx		349728	0					
ANR	350272	Identifier	tmp_output		349728	1					
ANR	350273	PrimaryExpression	256		349728	1					
ANR	350274	Argument	sizeof ( ctx -> delay [ 0 ] )		349728	2					
ANR	350275	SizeofExpression	sizeof ( ctx -> delay [ 0 ] )		349728	0					
ANR	350276	Sizeof	sizeof		349728	0					
ANR	350277	ArrayIndexing	ctx -> delay [ 0 ]		349728	1					
ANR	350278	PtrMemberAccess	ctx -> delay		349728	0					
ANR	350279	Identifier	ctx		349728	0					
ANR	350280	Identifier	delay		349728	1					
ANR	350281	PrimaryExpression	0		349728	1					
ANR	350282	ForStatement	for ( j = 0 ; j < ctx -> bsi . nfchans ; j ++ )		349728	3					
ANR	350283	ForInit	j = 0 ;	175:13:3429:3434	349728	0	True				
ANR	350284	AssignmentExpression	j = 0		349728	0		=			
ANR	350285	Identifier	j		349728	0					
ANR	350286	PrimaryExpression	0		349728	1					
ANR	350287	Condition	j < ctx -> bsi . nfchans	175:20:3436:3455	349728	1	True				
ANR	350288	RelationalExpression	j < ctx -> bsi . nfchans		349728	0		<			
ANR	350289	Identifier	j		349728	0					
ANR	350290	MemberAccess	ctx -> bsi . nfchans		349728	1					
ANR	350291	PtrMemberAccess	ctx -> bsi		349728	0					
ANR	350292	Identifier	ctx		349728	0					
ANR	350293	Identifier	bsi		349728	1					
ANR	350294	Identifier	nfchans		349728	1					
ANR	350295	PostIncDecOperationExpression	j ++	175:42:3458:3460	349728	2	True				
ANR	350296	Identifier	j		349728	0					
ANR	350297	IncDec	++		349728	1					
ANR	350298	CompoundStatement		173:47:3353:3353	349728	3					
ANR	350299	IfStatement	if ( ctx -> audio_block . blksw & ( 1 << j ) )		349728	0					
ANR	350300	Condition	ctx -> audio_block . blksw & ( 1 << j )	177:16:3482:3514	349728	0	True				
ANR	350301	BitAndExpression	ctx -> audio_block . blksw & ( 1 << j )		349728	0		&			
ANR	350302	MemberAccess	ctx -> audio_block . blksw		349728	0					
ANR	350303	PtrMemberAccess	ctx -> audio_block		349728	0					
ANR	350304	Identifier	ctx		349728	0					
ANR	350305	Identifier	audio_block		349728	1					
ANR	350306	Identifier	blksw		349728	1					
ANR	350307	ShiftExpression	1 << j		349728	1		<<			
ANR	350308	PrimaryExpression	1		349728	0					
ANR	350309	Identifier	j		349728	1					
ANR	350310	CompoundStatement		175:51:3407:3407	349728	1					
ANR	350311	ForStatement	for ( k = 0 ; k < 128 ; k ++ )		349728	0					
ANR	350312	ForInit	k = 0 ;	179:21:3541:3546	349728	0	True				
ANR	350313	AssignmentExpression	k = 0		349728	0		=			
ANR	350314	Identifier	k		349728	0					
ANR	350315	PrimaryExpression	0		349728	1					
ANR	350316	Condition	k < 128	179:28:3548:3554	349728	1	True				
ANR	350317	RelationalExpression	k < 128		349728	0		<			
ANR	350318	Identifier	k		349728	0					
ANR	350319	PrimaryExpression	128		349728	1					
ANR	350320	PostIncDecOperationExpression	k ++	179:37:3557:3559	349728	2	True				
ANR	350321	Identifier	k		349728	0					
ANR	350322	IncDec	++		349728	1					
ANR	350323	CompoundStatement		177:42:3452:3452	349728	3					
ANR	350324	ExpressionStatement	tmp_block_first_half [ k ] = ab -> transform_coeffs [ j + 1 ] [ 2 * k ]	181:20:3585:3645	349728	0	True				
ANR	350325	AssignmentExpression	tmp_block_first_half [ k ] = ab -> transform_coeffs [ j + 1 ] [ 2 * k ]		349728	0		=			
ANR	350326	ArrayIndexing	tmp_block_first_half [ k ]		349728	0					
ANR	350327	Identifier	tmp_block_first_half		349728	0					
ANR	350328	Identifier	k		349728	1					
ANR	350329	ArrayIndexing	ab -> transform_coeffs [ j + 1 ] [ 2 * k ]		349728	1					
ANR	350330	ArrayIndexing	ab -> transform_coeffs [ j + 1 ]		349728	0					
ANR	350331	PtrMemberAccess	ab -> transform_coeffs		349728	0					
ANR	350332	Identifier	ab		349728	0					
ANR	350333	Identifier	transform_coeffs		349728	1					
ANR	350334	AdditiveExpression	j + 1		349728	1		+			
ANR	350335	Identifier	j		349728	0					
ANR	350336	PrimaryExpression	1		349728	1					
ANR	350337	MultiplicativeExpression	2 * k		349728	1		*			
ANR	350338	PrimaryExpression	2		349728	0					
ANR	350339	Identifier	k		349728	1					
ANR	350340	ExpressionStatement	tmp_block_second_half [ k ] = ab -> transform_coeffs [ j + 1 ] [ 2 * k + 1 ]	183:20:3668:3733	349728	1	True				
ANR	350341	AssignmentExpression	tmp_block_second_half [ k ] = ab -> transform_coeffs [ j + 1 ] [ 2 * k + 1 ]		349728	0		=			
ANR	350342	ArrayIndexing	tmp_block_second_half [ k ]		349728	0					
ANR	350343	Identifier	tmp_block_second_half		349728	0					
ANR	350344	Identifier	k		349728	1					
ANR	350345	ArrayIndexing	ab -> transform_coeffs [ j + 1 ] [ 2 * k + 1 ]		349728	1					
ANR	350346	ArrayIndexing	ab -> transform_coeffs [ j + 1 ]		349728	0					
ANR	350347	PtrMemberAccess	ab -> transform_coeffs		349728	0					
ANR	350348	Identifier	ab		349728	0					
ANR	350349	Identifier	transform_coeffs		349728	1					
ANR	350350	AdditiveExpression	j + 1		349728	1		+			
ANR	350351	Identifier	j		349728	0					
ANR	350352	PrimaryExpression	1		349728	1					
ANR	350353	AdditiveExpression	2 * k + 1		349728	1		+			
ANR	350354	MultiplicativeExpression	2 * k		349728	0		*			
ANR	350355	PrimaryExpression	2		349728	0					
ANR	350356	Identifier	k		349728	1					
ANR	350357	PrimaryExpression	1		349728	1					
ANR	350358	ExpressionStatement	"ff_imdct_calc ( & ctx -> imdct_ctx_256 , ctx -> tmp_output , tmp_block_first_half , ctx -> tmp_imdct )"	187:16:3771:3860	349728	1	True				
ANR	350359	CallExpression	"ff_imdct_calc ( & ctx -> imdct_ctx_256 , ctx -> tmp_output , tmp_block_first_half , ctx -> tmp_imdct )"		349728	0					
ANR	350360	Callee	ff_imdct_calc		349728	0					
ANR	350361	Identifier	ff_imdct_calc		349728	0					
ANR	350362	ArgumentList	& ctx -> imdct_ctx_256		349728	1					
ANR	350363	Argument	& ctx -> imdct_ctx_256		349728	0					
ANR	350364	UnaryOperationExpression	& ctx -> imdct_ctx_256		349728	0					
ANR	350365	UnaryOperator	&		349728	0					
ANR	350366	PtrMemberAccess	ctx -> imdct_ctx_256		349728	1					
ANR	350367	Identifier	ctx		349728	0					
ANR	350368	Identifier	imdct_ctx_256		349728	1					
ANR	350369	Argument	ctx -> tmp_output		349728	1					
ANR	350370	PtrMemberAccess	ctx -> tmp_output		349728	0					
ANR	350371	Identifier	ctx		349728	0					
ANR	350372	Identifier	tmp_output		349728	1					
ANR	350373	Argument	tmp_block_first_half		349728	2					
ANR	350374	Identifier	tmp_block_first_half		349728	0					
ANR	350375	Argument	ctx -> tmp_imdct		349728	3					
ANR	350376	PtrMemberAccess	ctx -> tmp_imdct		349728	0					
ANR	350377	Identifier	ctx		349728	0					
ANR	350378	Identifier	tmp_imdct		349728	1					
ANR	350379	ForStatement	for ( l = 0 ; l < 256 ; l ++ )		349728	2					
ANR	350380	ForInit	l = 0 ;	189:21:3884:3889	349728	0	True				
ANR	350381	AssignmentExpression	l = 0		349728	0		=			
ANR	350382	Identifier	l		349728	0					
ANR	350383	PrimaryExpression	0		349728	1					
ANR	350384	Condition	l < 256	189:28:3891:3897	349728	1	True				
ANR	350385	RelationalExpression	l < 256		349728	0		<			
ANR	350386	Identifier	l		349728	0					
ANR	350387	PrimaryExpression	256		349728	1					
ANR	350388	PostIncDecOperationExpression	l ++	189:37:3900:3902	349728	2	True				
ANR	350389	Identifier	l		349728	0					
ANR	350390	IncDec	++		349728	1					
ANR	350391	ExpressionStatement	ab -> block_output [ j + 1 ] [ l ] = ctx -> tmp_output [ l ] * window [ l ] + ctx -> delay [ j + 1 ] [ l ] * window [ 255 - l ]	191:20:3926:4026	349728	3	True				
ANR	350392	AssignmentExpression	ab -> block_output [ j + 1 ] [ l ] = ctx -> tmp_output [ l ] * window [ l ] + ctx -> delay [ j + 1 ] [ l ] * window [ 255 - l ]		349728	0		=			
ANR	350393	ArrayIndexing	ab -> block_output [ j + 1 ] [ l ]		349728	0					
ANR	350394	ArrayIndexing	ab -> block_output [ j + 1 ]		349728	0					
ANR	350395	PtrMemberAccess	ab -> block_output		349728	0					
ANR	350396	Identifier	ab		349728	0					
ANR	350397	Identifier	block_output		349728	1					
ANR	350398	AdditiveExpression	j + 1		349728	1		+			
ANR	350399	Identifier	j		349728	0					
ANR	350400	PrimaryExpression	1		349728	1					
ANR	350401	Identifier	l		349728	1					
ANR	350402	AdditiveExpression	ctx -> tmp_output [ l ] * window [ l ] + ctx -> delay [ j + 1 ] [ l ] * window [ 255 - l ]		349728	1		+			
ANR	350403	MultiplicativeExpression	ctx -> tmp_output [ l ] * window [ l ]		349728	0		*			
ANR	350404	ArrayIndexing	ctx -> tmp_output [ l ]		349728	0					
ANR	350405	PtrMemberAccess	ctx -> tmp_output		349728	0					
ANR	350406	Identifier	ctx		349728	0					
ANR	350407	Identifier	tmp_output		349728	1					
ANR	350408	Identifier	l		349728	1					
ANR	350409	ArrayIndexing	window [ l ]		349728	1					
ANR	350410	Identifier	window		349728	0					
ANR	350411	Identifier	l		349728	1					
ANR	350412	MultiplicativeExpression	ctx -> delay [ j + 1 ] [ l ] * window [ 255 - l ]		349728	1		*			
ANR	350413	ArrayIndexing	ctx -> delay [ j + 1 ] [ l ]		349728	0					
ANR	350414	ArrayIndexing	ctx -> delay [ j + 1 ]		349728	0					
ANR	350415	PtrMemberAccess	ctx -> delay		349728	0					
ANR	350416	Identifier	ctx		349728	0					
ANR	350417	Identifier	delay		349728	1					
ANR	350418	AdditiveExpression	j + 1		349728	1		+			
ANR	350419	Identifier	j		349728	0					
ANR	350420	PrimaryExpression	1		349728	1					
ANR	350421	Identifier	l		349728	1					
ANR	350422	ArrayIndexing	window [ 255 - l ]		349728	1					
ANR	350423	Identifier	window		349728	0					
ANR	350424	AdditiveExpression	255 - l		349728	1		-			
ANR	350425	PrimaryExpression	255		349728	0					
ANR	350426	Identifier	l		349728	1					
ANR	350427	ExpressionStatement	"ff_imdct_calc ( & ctx -> imdct_ctx_256 , ctx -> delay [ j + 1 ] , tmp_block_second_half , ctx -> tmp_imdct )"	193:16:4045:4137	349728	3	True				
ANR	350428	CallExpression	"ff_imdct_calc ( & ctx -> imdct_ctx_256 , ctx -> delay [ j + 1 ] , tmp_block_second_half , ctx -> tmp_imdct )"		349728	0					
ANR	350429	Callee	ff_imdct_calc		349728	0					
ANR	350430	Identifier	ff_imdct_calc		349728	0					
ANR	350431	ArgumentList	& ctx -> imdct_ctx_256		349728	1					
ANR	350432	Argument	& ctx -> imdct_ctx_256		349728	0					
ANR	350433	UnaryOperationExpression	& ctx -> imdct_ctx_256		349728	0					
ANR	350434	UnaryOperator	&		349728	0					
ANR	350435	PtrMemberAccess	ctx -> imdct_ctx_256		349728	1					
ANR	350436	Identifier	ctx		349728	0					
ANR	350437	Identifier	imdct_ctx_256		349728	1					
ANR	350438	Argument	ctx -> delay [ j + 1 ]		349728	1					
ANR	350439	ArrayIndexing	ctx -> delay [ j + 1 ]		349728	0					
ANR	350440	PtrMemberAccess	ctx -> delay		349728	0					
ANR	350441	Identifier	ctx		349728	0					
ANR	350442	Identifier	delay		349728	1					
ANR	350443	AdditiveExpression	j + 1		349728	1		+			
ANR	350444	Identifier	j		349728	0					
ANR	350445	PrimaryExpression	1		349728	1					
ANR	350446	Argument	tmp_block_second_half		349728	2					
ANR	350447	Identifier	tmp_block_second_half		349728	0					
ANR	350448	Argument	ctx -> tmp_imdct		349728	3					
ANR	350449	PtrMemberAccess	ctx -> tmp_imdct		349728	0					
ANR	350450	Identifier	ctx		349728	0					
ANR	350451	Identifier	tmp_imdct		349728	1					
ANR	350452	ElseStatement	else		349728	0					
ANR	350453	CompoundStatement		193:19:4049:4049	349728	0					
ANR	350454	ExpressionStatement	"ff_imdct_calc ( & ctx -> imdct_ctx_512 , ctx -> tmp_output , ab -> transform_coeffs [ j + 1 ] , ctx -> tmp_imdct )"	197:16:4178:4274	349728	0	True				
ANR	350455	CallExpression	"ff_imdct_calc ( & ctx -> imdct_ctx_512 , ctx -> tmp_output , ab -> transform_coeffs [ j + 1 ] , ctx -> tmp_imdct )"		349728	0					
ANR	350456	Callee	ff_imdct_calc		349728	0					
ANR	350457	Identifier	ff_imdct_calc		349728	0					
ANR	350458	ArgumentList	& ctx -> imdct_ctx_512		349728	1					
ANR	350459	Argument	& ctx -> imdct_ctx_512		349728	0					
ANR	350460	UnaryOperationExpression	& ctx -> imdct_ctx_512		349728	0					
ANR	350461	UnaryOperator	&		349728	0					
ANR	350462	PtrMemberAccess	ctx -> imdct_ctx_512		349728	1					
ANR	350463	Identifier	ctx		349728	0					
ANR	350464	Identifier	imdct_ctx_512		349728	1					
ANR	350465	Argument	ctx -> tmp_output		349728	1					
ANR	350466	PtrMemberAccess	ctx -> tmp_output		349728	0					
ANR	350467	Identifier	ctx		349728	0					
ANR	350468	Identifier	tmp_output		349728	1					
ANR	350469	Argument	ab -> transform_coeffs [ j + 1 ]		349728	2					
ANR	350470	ArrayIndexing	ab -> transform_coeffs [ j + 1 ]		349728	0					
ANR	350471	PtrMemberAccess	ab -> transform_coeffs		349728	0					
ANR	350472	Identifier	ab		349728	0					
ANR	350473	Identifier	transform_coeffs		349728	1					
ANR	350474	AdditiveExpression	j + 1		349728	1		+			
ANR	350475	Identifier	j		349728	0					
ANR	350476	PrimaryExpression	1		349728	1					
ANR	350477	Argument	ctx -> tmp_imdct		349728	3					
ANR	350478	PtrMemberAccess	ctx -> tmp_imdct		349728	0					
ANR	350479	Identifier	ctx		349728	0					
ANR	350480	Identifier	tmp_imdct		349728	1					
ANR	350481	ForStatement	for ( l = 0 ; l < 256 ; l ++ )		349728	1					
ANR	350482	ForInit	l = 0 ;	199:21:4298:4303	349728	0	True				
ANR	350483	AssignmentExpression	l = 0		349728	0		=			
ANR	350484	Identifier	l		349728	0					
ANR	350485	PrimaryExpression	0		349728	1					
ANR	350486	Condition	l < 256	199:28:4305:4311	349728	1	True				
ANR	350487	RelationalExpression	l < 256		349728	0		<			
ANR	350488	Identifier	l		349728	0					
ANR	350489	PrimaryExpression	256		349728	1					
ANR	350490	PostIncDecOperationExpression	l ++	199:37:4314:4316	349728	2	True				
ANR	350491	Identifier	l		349728	0					
ANR	350492	IncDec	++		349728	1					
ANR	350493	ExpressionStatement	ab -> block_output [ j + 1 ] [ l ] = ctx -> tmp_output [ l ] * window [ l ] + ctx -> delay [ j + 1 ] [ l ] * window [ 255 - l ]	201:20:4340:4440	349728	3	True				
ANR	350494	AssignmentExpression	ab -> block_output [ j + 1 ] [ l ] = ctx -> tmp_output [ l ] * window [ l ] + ctx -> delay [ j + 1 ] [ l ] * window [ 255 - l ]		349728	0		=			
ANR	350495	ArrayIndexing	ab -> block_output [ j + 1 ] [ l ]		349728	0					
ANR	350496	ArrayIndexing	ab -> block_output [ j + 1 ]		349728	0					
ANR	350497	PtrMemberAccess	ab -> block_output		349728	0					
ANR	350498	Identifier	ab		349728	0					
ANR	350499	Identifier	block_output		349728	1					
ANR	350500	AdditiveExpression	j + 1		349728	1		+			
ANR	350501	Identifier	j		349728	0					
ANR	350502	PrimaryExpression	1		349728	1					
ANR	350503	Identifier	l		349728	1					
ANR	350504	AdditiveExpression	ctx -> tmp_output [ l ] * window [ l ] + ctx -> delay [ j + 1 ] [ l ] * window [ 255 - l ]		349728	1		+			
ANR	350505	MultiplicativeExpression	ctx -> tmp_output [ l ] * window [ l ]		349728	0		*			
ANR	350506	ArrayIndexing	ctx -> tmp_output [ l ]		349728	0					
ANR	350507	PtrMemberAccess	ctx -> tmp_output		349728	0					
ANR	350508	Identifier	ctx		349728	0					
ANR	350509	Identifier	tmp_output		349728	1					
ANR	350510	Identifier	l		349728	1					
ANR	350511	ArrayIndexing	window [ l ]		349728	1					
ANR	350512	Identifier	window		349728	0					
ANR	350513	Identifier	l		349728	1					
ANR	350514	MultiplicativeExpression	ctx -> delay [ j + 1 ] [ l ] * window [ 255 - l ]		349728	1		*			
ANR	350515	ArrayIndexing	ctx -> delay [ j + 1 ] [ l ]		349728	0					
ANR	350516	ArrayIndexing	ctx -> delay [ j + 1 ]		349728	0					
ANR	350517	PtrMemberAccess	ctx -> delay		349728	0					
ANR	350518	Identifier	ctx		349728	0					
ANR	350519	Identifier	delay		349728	1					
ANR	350520	AdditiveExpression	j + 1		349728	1		+			
ANR	350521	Identifier	j		349728	0					
ANR	350522	PrimaryExpression	1		349728	1					
ANR	350523	Identifier	l		349728	1					
ANR	350524	ArrayIndexing	window [ 255 - l ]		349728	1					
ANR	350525	Identifier	window		349728	0					
ANR	350526	AdditiveExpression	255 - l		349728	1		-			
ANR	350527	PrimaryExpression	255		349728	0					
ANR	350528	Identifier	l		349728	1					
ANR	350529	ExpressionStatement	"memcpy ( ctx -> delay [ j + 1 ] , ctx -> tmp_output + 256 , sizeof ( ctx -> delay [ j + 1 ] ) )"	203:16:4459:4534	349728	2	True				
ANR	350530	CallExpression	"memcpy ( ctx -> delay [ j + 1 ] , ctx -> tmp_output + 256 , sizeof ( ctx -> delay [ j + 1 ] ) )"		349728	0					
ANR	350531	Callee	memcpy		349728	0					
ANR	350532	Identifier	memcpy		349728	0					
ANR	350533	ArgumentList	ctx -> delay [ j + 1 ]		349728	1					
ANR	350534	Argument	ctx -> delay [ j + 1 ]		349728	0					
ANR	350535	ArrayIndexing	ctx -> delay [ j + 1 ]		349728	0					
ANR	350536	PtrMemberAccess	ctx -> delay		349728	0					
ANR	350537	Identifier	ctx		349728	0					
ANR	350538	Identifier	delay		349728	1					
ANR	350539	AdditiveExpression	j + 1		349728	1		+			
ANR	350540	Identifier	j		349728	0					
ANR	350541	PrimaryExpression	1		349728	1					
ANR	350542	Argument	ctx -> tmp_output + 256		349728	1					
ANR	350543	AdditiveExpression	ctx -> tmp_output + 256		349728	0		+			
ANR	350544	PtrMemberAccess	ctx -> tmp_output		349728	0					
ANR	350545	Identifier	ctx		349728	0					
ANR	350546	Identifier	tmp_output		349728	1					
ANR	350547	PrimaryExpression	256		349728	1					
ANR	350548	Argument	sizeof ( ctx -> delay [ j + 1 ] )		349728	2					
ANR	350549	SizeofExpression	sizeof ( ctx -> delay [ j + 1 ] )		349728	0					
ANR	350550	Sizeof	sizeof		349728	0					
ANR	350551	ArrayIndexing	ctx -> delay [ j + 1 ]		349728	1					
ANR	350552	PtrMemberAccess	ctx -> delay		349728	0					
ANR	350553	Identifier	ctx		349728	0					
ANR	350554	Identifier	delay		349728	1					
ANR	350555	AdditiveExpression	j + 1		349728	1		+			
ANR	350556	Identifier	j		349728	0					
ANR	350557	PrimaryExpression	1		349728	1					
ANR	350558	IfStatement	if ( ctx -> bsi . flags & AC3_BSI_LFEON )		349728	4					
ANR	350559	Condition	ctx -> bsi . flags & AC3_BSI_LFEON	209:12:4575:4604	349728	0	True				
ANR	350560	BitAndExpression	ctx -> bsi . flags & AC3_BSI_LFEON		349728	0		&			
ANR	350561	MemberAccess	ctx -> bsi . flags		349728	0					
ANR	350562	PtrMemberAccess	ctx -> bsi		349728	0					
ANR	350563	Identifier	ctx		349728	0					
ANR	350564	Identifier	bsi		349728	1					
ANR	350565	Identifier	flags		349728	1					
ANR	350566	Identifier	AC3_BSI_LFEON		349728	1					
ANR	350567	CompoundStatement		207:44:4497:4497	349728	1					
ANR	350568	ForStatement	for ( l = 0 ; l < 256 ; l ++ )		349728	0					
ANR	350569	ForInit	l = 0 ;	211:17:4627:4632	349728	0	True				
ANR	350570	AssignmentExpression	l = 0		349728	0		=			
ANR	350571	Identifier	l		349728	0					
ANR	350572	PrimaryExpression	0		349728	1					
ANR	350573	Condition	l < 256	211:24:4634:4640	349728	1	True				
ANR	350574	RelationalExpression	l < 256		349728	0		<			
ANR	350575	Identifier	l		349728	0					
ANR	350576	PrimaryExpression	256		349728	1					
ANR	350577	PostIncDecOperationExpression	l ++	211:33:4643:4645	349728	2	True				
ANR	350578	Identifier	l		349728	0					
ANR	350579	IncDec	++		349728	1					
ANR	350580	CompoundStatement		209:38:4538:4538	349728	3					
ANR	350581	ExpressionStatement	value = lrint ( ab -> block_output [ 0 ] [ l ] )	213:16:4667:4704	349728	0	True				
ANR	350582	AssignmentExpression	value = lrint ( ab -> block_output [ 0 ] [ l ] )		349728	0		=			
ANR	350583	Identifier	value		349728	0					
ANR	350584	CallExpression	lrint ( ab -> block_output [ 0 ] [ l ] )		349728	1					
ANR	350585	Callee	lrint		349728	0					
ANR	350586	Identifier	lrint		349728	0					
ANR	350587	ArgumentList	ab -> block_output [ 0 ] [ l ]		349728	1					
ANR	350588	Argument	ab -> block_output [ 0 ] [ l ]		349728	0					
ANR	350589	ArrayIndexing	ab -> block_output [ 0 ] [ l ]		349728	0					
ANR	350590	ArrayIndexing	ab -> block_output [ 0 ]		349728	0					
ANR	350591	PtrMemberAccess	ab -> block_output		349728	0					
ANR	350592	Identifier	ab		349728	0					
ANR	350593	Identifier	block_output		349728	1					
ANR	350594	PrimaryExpression	0		349728	1					
ANR	350595	Identifier	l		349728	1					
ANR	350596	IfStatement	if ( value < - 32768 )		349728	1					
ANR	350597	Condition	value < - 32768	215:20:4727:4740	349728	0	True				
ANR	350598	RelationalExpression	value < - 32768		349728	0		<			
ANR	350599	Identifier	value		349728	0					
ANR	350600	UnaryOperationExpression	- 32768		349728	1					
ANR	350601	UnaryOperator	-		349728	0					
ANR	350602	PrimaryExpression	32768		349728	1					
ANR	350603	ExpressionStatement	value = - 32768	217:20:4764:4778	349728	1	True				
ANR	350604	AssignmentExpression	value = - 32768		349728	0		=			
ANR	350605	Identifier	value		349728	0					
ANR	350606	UnaryOperationExpression	- 32768		349728	1					
ANR	350607	UnaryOperator	-		349728	0					
ANR	350608	PrimaryExpression	32768		349728	1					
ANR	350609	ElseStatement	else		349728	0					
ANR	350610	IfStatement	if ( value > 32767 )		349728	0					
ANR	350611	Condition	value > 32767	219:25:4806:4818	349728	0	True				
ANR	350612	RelationalExpression	value > 32767		349728	0		>			
ANR	350613	Identifier	value		349728	0					
ANR	350614	PrimaryExpression	32767		349728	1					
ANR	350615	ExpressionStatement	value = 32767	221:20:4842:4855	349728	1	True				
ANR	350616	AssignmentExpression	value = 32767		349728	0		=			
ANR	350617	Identifier	value		349728	0					
ANR	350618	PrimaryExpression	32767		349728	1					
ANR	350619	ExpressionStatement	* ( out_samples ++ ) = value	223:16:4874:4898	349728	2	True				
ANR	350620	AssignmentExpression	* ( out_samples ++ ) = value		349728	0		=			
ANR	350621	UnaryOperationExpression	* ( out_samples ++ )		349728	0					
ANR	350622	UnaryOperator	*		349728	0					
ANR	350623	PostIncDecOperationExpression	out_samples ++		349728	1					
ANR	350624	Identifier	out_samples		349728	0					
ANR	350625	IncDec	++		349728	1					
ANR	350626	Identifier	value		349728	1					
ANR	350627	ExpressionStatement	* data_size += 256 * sizeof ( int16_t )	227:12:4928:4963	349728	1	True				
ANR	350628	AssignmentExpression	* data_size += 256 * sizeof ( int16_t )		349728	0		+=			
ANR	350629	UnaryOperationExpression	* data_size		349728	0					
ANR	350630	UnaryOperator	*		349728	0					
ANR	350631	Identifier	data_size		349728	1					
ANR	350632	MultiplicativeExpression	256 * sizeof ( int16_t )		349728	1		*			
ANR	350633	PrimaryExpression	256		349728	0					
ANR	350634	SizeofExpression	sizeof ( int16_t )		349728	1					
ANR	350635	Sizeof	sizeof		349728	0					
ANR	350636	SizeofOperand	int16_t		349728	1					
ANR	350637	ExpressionStatement	do_downmix ( ctx )	231:8:4985:5000	349728	5	True				
ANR	350638	CallExpression	do_downmix ( ctx )		349728	0					
ANR	350639	Callee	do_downmix		349728	0					
ANR	350640	Identifier	do_downmix		349728	0					
ANR	350641	ArgumentList	ctx		349728	1					
ANR	350642	Argument	ctx		349728	0					
ANR	350643	Identifier	ctx		349728	0					
ANR	350644	IfStatement	if ( ctx -> output == AC3_OUTPUT_UNMODIFIED )		349728	6					
ANR	350645	Condition	ctx -> output == AC3_OUTPUT_UNMODIFIED	233:12:5015:5050	349728	0	True				
ANR	350646	EqualityExpression	ctx -> output == AC3_OUTPUT_UNMODIFIED		349728	0		==			
ANR	350647	PtrMemberAccess	ctx -> output		349728	0					
ANR	350648	Identifier	ctx		349728	0					
ANR	350649	Identifier	output		349728	1					
ANR	350650	Identifier	AC3_OUTPUT_UNMODIFIED		349728	1					
ANR	350651	ExpressionStatement	nfchans = ctx -> bsi . nfchans	235:12:5066:5092	349728	1	True				
ANR	350652	AssignmentExpression	nfchans = ctx -> bsi . nfchans		349728	0		=			
ANR	350653	Identifier	nfchans		349728	0					
ANR	350654	MemberAccess	ctx -> bsi . nfchans		349728	1					
ANR	350655	PtrMemberAccess	ctx -> bsi		349728	0					
ANR	350656	Identifier	ctx		349728	0					
ANR	350657	Identifier	bsi		349728	1					
ANR	350658	Identifier	nfchans		349728	1					
ANR	350659	ElseStatement	else		349728	0					
ANR	350660	ExpressionStatement	nfchans = avctx -> channels	239:12:5121:5146	349728	0	True				
ANR	350661	AssignmentExpression	nfchans = avctx -> channels		349728	0		=			
ANR	350662	Identifier	nfchans		349728	0					
ANR	350663	PtrMemberAccess	avctx -> channels		349728	1					
ANR	350664	Identifier	avctx		349728	0					
ANR	350665	Identifier	channels		349728	1					
ANR	350666	ForStatement	for ( k = 0 ; k < nfchans ; k ++ )		349728	7					
ANR	350667	ForInit	k = 0 ;	241:13:5162:5167	349728	0	True				
ANR	350668	AssignmentExpression	k = 0		349728	0		=			
ANR	350669	Identifier	k		349728	0					
ANR	350670	PrimaryExpression	0		349728	1					
ANR	350671	Condition	k < nfchans	241:20:5169:5179	349728	1	True				
ANR	350672	RelationalExpression	k < nfchans		349728	0		<			
ANR	350673	Identifier	k		349728	0					
ANR	350674	Identifier	nfchans		349728	1					
ANR	350675	PostIncDecOperationExpression	k ++	241:33:5182:5184	349728	2	True				
ANR	350676	Identifier	k		349728	0					
ANR	350677	IncDec	++		349728	1					
ANR	350678	ForStatement	for ( l = 0 ; l < 256 ; l ++ )		349728	3					
ANR	350679	ForInit	l = 0 ;	243:17:5205:5210	349728	0	True				
ANR	350680	AssignmentExpression	l = 0		349728	0		=			
ANR	350681	Identifier	l		349728	0					
ANR	350682	PrimaryExpression	0		349728	1					
ANR	350683	Condition	l < 256	243:24:5212:5218	349728	1	True				
ANR	350684	RelationalExpression	l < 256		349728	0		<			
ANR	350685	Identifier	l		349728	0					
ANR	350686	PrimaryExpression	256		349728	1					
ANR	350687	PostIncDecOperationExpression	l ++	243:33:5221:5223	349728	2	True				
ANR	350688	Identifier	l		349728	0					
ANR	350689	IncDec	++		349728	1					
ANR	350690	CompoundStatement		241:38:5116:5116	349728	3					
ANR	350691	ExpressionStatement	value = lrint ( ab -> block_output [ k + 1 ] [ l ] )	245:16:5245:5286	349728	0	True				
ANR	350692	AssignmentExpression	value = lrint ( ab -> block_output [ k + 1 ] [ l ] )		349728	0		=			
ANR	350693	Identifier	value		349728	0					
ANR	350694	CallExpression	lrint ( ab -> block_output [ k + 1 ] [ l ] )		349728	1					
ANR	350695	Callee	lrint		349728	0					
ANR	350696	Identifier	lrint		349728	0					
ANR	350697	ArgumentList	ab -> block_output [ k + 1 ] [ l ]		349728	1					
ANR	350698	Argument	ab -> block_output [ k + 1 ] [ l ]		349728	0					
ANR	350699	ArrayIndexing	ab -> block_output [ k + 1 ] [ l ]		349728	0					
ANR	350700	ArrayIndexing	ab -> block_output [ k + 1 ]		349728	0					
ANR	350701	PtrMemberAccess	ab -> block_output		349728	0					
ANR	350702	Identifier	ab		349728	0					
ANR	350703	Identifier	block_output		349728	1					
ANR	350704	AdditiveExpression	k + 1		349728	1		+			
ANR	350705	Identifier	k		349728	0					
ANR	350706	PrimaryExpression	1		349728	1					
ANR	350707	Identifier	l		349728	1					
ANR	350708	IfStatement	if ( value < - 32768 )		349728	1					
ANR	350709	Condition	value < - 32768	247:20:5309:5322	349728	0	True				
ANR	350710	RelationalExpression	value < - 32768		349728	0		<			
ANR	350711	Identifier	value		349728	0					
ANR	350712	UnaryOperationExpression	- 32768		349728	1					
ANR	350713	UnaryOperator	-		349728	0					
ANR	350714	PrimaryExpression	32768		349728	1					
ANR	350715	ExpressionStatement	value = - 32768	249:20:5346:5360	349728	1	True				
ANR	350716	AssignmentExpression	value = - 32768		349728	0		=			
ANR	350717	Identifier	value		349728	0					
ANR	350718	UnaryOperationExpression	- 32768		349728	1					
ANR	350719	UnaryOperator	-		349728	0					
ANR	350720	PrimaryExpression	32768		349728	1					
ANR	350721	ElseStatement	else		349728	0					
ANR	350722	IfStatement	if ( value > 32767 )		349728	0					
ANR	350723	Condition	value > 32767	251:25:5388:5400	349728	0	True				
ANR	350724	RelationalExpression	value > 32767		349728	0		>			
ANR	350725	Identifier	value		349728	0					
ANR	350726	PrimaryExpression	32767		349728	1					
ANR	350727	ExpressionStatement	value = 32767	253:20:5424:5437	349728	1	True				
ANR	350728	AssignmentExpression	value = 32767		349728	0		=			
ANR	350729	Identifier	value		349728	0					
ANR	350730	PrimaryExpression	32767		349728	1					
ANR	350731	ExpressionStatement	* ( out_samples ++ ) = value	255:16:5456:5480	349728	2	True				
ANR	350732	AssignmentExpression	* ( out_samples ++ ) = value		349728	0		=			
ANR	350733	UnaryOperationExpression	* ( out_samples ++ )		349728	0					
ANR	350734	UnaryOperator	*		349728	0					
ANR	350735	PostIncDecOperationExpression	out_samples ++		349728	1					
ANR	350736	Identifier	out_samples		349728	0					
ANR	350737	IncDec	++		349728	1					
ANR	350738	Identifier	value		349728	1					
ANR	350739	ExpressionStatement	* data_size += nfchans * 256 * sizeof ( int16_t )	259:8:5506:5552	349728	8	True				
ANR	350740	AssignmentExpression	* data_size += nfchans * 256 * sizeof ( int16_t )		349728	0		+=			
ANR	350741	UnaryOperationExpression	* data_size		349728	0					
ANR	350742	UnaryOperator	*		349728	0					
ANR	350743	Identifier	data_size		349728	1					
ANR	350744	MultiplicativeExpression	nfchans * 256 * sizeof ( int16_t )		349728	1		*			
ANR	350745	Identifier	nfchans		349728	0					
ANR	350746	MultiplicativeExpression	256 * sizeof ( int16_t )		349728	1		*			
ANR	350747	PrimaryExpression	256		349728	0					
ANR	350748	SizeofExpression	sizeof ( int16_t )		349728	1					
ANR	350749	Sizeof	sizeof		349728	0					
ANR	350750	SizeofOperand	int16_t		349728	1					
ANR	350751	ReturnStatement	return ctx -> sync_info . framesize ;	265:4:5568:5599	349728	19	True				
ANR	350752	MemberAccess	ctx -> sync_info . framesize		349728	0					
ANR	350753	PtrMemberAccess	ctx -> sync_info		349728	0					
ANR	350754	Identifier	ctx		349728	0					
ANR	350755	Identifier	sync_info		349728	1					
ANR	350756	Identifier	framesize		349728	1					
ANR	350757	ReturnType	static int		349728	1					
ANR	350758	Identifier	ac3_decode_frame		349728	2					
ANR	350759	ParameterList	"AVCodecContext * avctx , void * data , int * data_size , uint8_t * buf , int buf_size"		349728	3					
ANR	350760	Parameter	AVCodecContext * avctx	1:28:28:49	349728	0	True				
ANR	350761	ParameterType	AVCodecContext *		349728	0					
ANR	350762	Identifier	avctx		349728	1					
ANR	350763	Parameter	void * data	1:52:52:61	349728	1	True				
ANR	350764	ParameterType	void *		349728	0					
ANR	350765	Identifier	data		349728	1					
ANR	350766	Parameter	int * data_size	1:64:64:77	349728	2	True				
ANR	350767	ParameterType	int *		349728	0					
ANR	350768	Identifier	data_size		349728	1					
ANR	350769	Parameter	uint8_t * buf	1:80:80:91	349728	3	True				
ANR	350770	ParameterType	uint8_t *		349728	0					
ANR	350771	Identifier	buf		349728	1					
ANR	350772	Parameter	int buf_size	1:94:94:105	349728	4	True				
ANR	350773	ParameterType	int		349728	0					
ANR	350774	Identifier	buf_size		349728	1					
ANR	350775	CFGEntryNode	ENTRY		349728		True				
ANR	350776	CFGExitNode	EXIT		349728		True				
ANR	350777	Symbol	tmp_block_first_half		349728						
ANR	350778	Symbol	data		349728						
ANR	350779	Symbol	& ctx -> imdct_ctx_512		349728						
ANR	350780	Symbol	* ( out_samples ++ )		349728						
ANR	350781	Symbol	* * ctx -> delay		349728						
ANR	350782	Symbol	* data_size		349728						
ANR	350783	Symbol	& ctx -> audio_block		349728						
ANR	350784	Symbol	frame_start		349728						
ANR	350785	Symbol	lrint		349728						
ANR	350786	Symbol	* * ab		349728						
ANR	350787	Symbol	avctx -> channels		349728						
ANR	350788	Symbol	ctx -> sync_info		349728						
ANR	350789	Symbol	ctx -> bsi . nfchans		349728						
ANR	350790	Symbol	ctx -> tmp_imdct		349728						
ANR	350791	Symbol	AC3_BSI_LFEON		349728						
ANR	350792	Symbol	tmp_block_second_half		349728						
ANR	350793	Symbol	ab -> block_output		349728						
ANR	350794	Symbol	data_size		349728						
ANR	350795	Symbol	* * k		349728						
ANR	350796	Symbol	ab		349728						
ANR	350797	Symbol	AC3_OUTPUT_STEREO		349728						
ANR	350798	Symbol	* * j		349728						
ANR	350799	Symbol	MAX_BLOCKS		349728						
ANR	350800	Symbol	NULL		349728						
ANR	350801	Symbol	buf_size		349728						
ANR	350802	Symbol	ctx		349728						
ANR	350803	Symbol	ctx -> sync_info . bit_rate		349728						
ANR	350804	Symbol	* avctx		349728						
ANR	350805	Symbol	avctx -> bit_rate		349728						
ANR	350806	Symbol	nfchans		349728						
ANR	350807	Symbol	ab -> transform_coeffs		349728						
ANR	350808	Symbol	AC3_OUTPUT_UNMODIFIED		349728						
ANR	350809	Symbol	ctx -> sync_info . sampling_rate		349728						
ANR	350810	Symbol	AV_LOG_INFO		349728						
ANR	350811	Symbol	* tmp_block_first_half		349728						
ANR	350812	Symbol	* * ab -> transform_coeffs		349728						
ANR	350813	Symbol	& ctx -> imdct_ctx_256		349728						
ANR	350814	Symbol	* ab		349728						
ANR	350815	Symbol	ac3_parse_sync_info		349728						
ANR	350816	Symbol	* ab -> transform_coeffs		349728						
ANR	350817	Symbol	& ctx -> gb		349728						
ANR	350818	Symbol	AC3_OUTPUT_MONO		349728						
ANR	350819	Symbol	ctx -> tmp_output		349728						
ANR	350820	Symbol	* ab -> block_output		349728						
ANR	350821	Symbol	ac3_parse_bsi		349728						
ANR	350822	Symbol	* ctx -> delay		349728						
ANR	350823	Symbol	avctx		349728						
ANR	350824	Symbol	ac3_synchronize		349728						
ANR	350825	Symbol	ctx -> delay		349728						
ANR	350826	Symbol	value		349728						
ANR	350827	Symbol	ctx -> output		349728						
ANR	350828	Symbol	* window		349728						
ANR	350829	Symbol	ctx -> bsi		349728						
ANR	350830	Symbol	AV_LOG_ERROR		349728						
ANR	350831	Symbol	* * * ctx		349728						
ANR	350832	Symbol	i		349728						
ANR	350833	Symbol	* ctx -> tmp_output		349728						
ANR	350834	Symbol	j		349728						
ANR	350835	Symbol	* * ab -> block_output		349728						
ANR	350836	Symbol	k		349728						
ANR	350837	Symbol	out_samples		349728						
ANR	350838	Symbol	ac3_parse_audio_block		349728						
ANR	350839	Symbol	avctx -> priv_data		349728						
ANR	350840	Symbol	l		349728						
ANR	350841	Symbol	avctx -> sample_rate		349728						
ANR	350842	Symbol	* ctx		349728						
ANR	350843	Symbol	ctx -> sync_info . framesize		349728						
ANR	350844	Symbol	buf		349728						
ANR	350845	Symbol	* i		349728						
ANR	350846	Symbol	* j		349728						
ANR	350847	Symbol	* k		349728						
ANR	350848	Symbol	* l		349728						
ANR	350849	Symbol	ctx -> bsi . dsurmod		349728						
ANR	350850	Symbol	AC3_OUTPUT_DOLBY		349728						
ANR	350851	Symbol	* * * ab		349728						
ANR	350852	Symbol	ctx -> audio_block		349728						
ANR	350853	Symbol	ctx -> audio_block . blksw		349728						
ANR	350854	Symbol	* * ctx		349728						
ANR	350855	Symbol	window		349728						
ANR	350856	Symbol	* tmp_block_second_half		349728						
ANR	350857	Symbol	ctx -> bsi . flags		349728						
