command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	580282	File	/home/p4ultr4n/workplace/ReVeal/raw_code/apply_dependent_coupling_fixed_1.c								
ANR	580283	Function	apply_dependent_coupling_fixed	1:0:0:2397							
ANR	580284	FunctionDef	"apply_dependent_coupling_fixed (AACContext * ac , SingleChannelElement * target , ChannelElement * cce , int index)"		580283	0					
ANR	580285	CompoundStatement		7:0:198:2397	580283	0					
ANR	580286	IdentifierDeclStatement	IndividualChannelStream * ics = & cce -> ch [ 0 ] . ics ;	9:4:205:251	580283	0	True				
ANR	580287	IdentifierDecl	* ics = & cce -> ch [ 0 ] . ics		580283	0					
ANR	580288	IdentifierDeclType	IndividualChannelStream *		580283	0					
ANR	580289	Identifier	ics		580283	1					
ANR	580290	AssignmentExpression	* ics = & cce -> ch [ 0 ] . ics		580283	2		=			
ANR	580291	Identifier	ics		580283	0					
ANR	580292	UnaryOperationExpression	& cce -> ch [ 0 ] . ics		580283	1					
ANR	580293	UnaryOperator	&		580283	0					
ANR	580294	MemberAccess	cce -> ch [ 0 ] . ics		580283	1					
ANR	580295	ArrayIndexing	cce -> ch [ 0 ]		580283	0					
ANR	580296	PtrMemberAccess	cce -> ch		580283	0					
ANR	580297	Identifier	cce		580283	0					
ANR	580298	Identifier	ch		580283	1					
ANR	580299	PrimaryExpression	0		580283	1					
ANR	580300	Identifier	ics		580283	1					
ANR	580301	IdentifierDeclStatement	const uint16_t * offsets = ics -> swb_offset ;	11:4:258:299	580283	1	True				
ANR	580302	IdentifierDecl	* offsets = ics -> swb_offset		580283	0					
ANR	580303	IdentifierDeclType	const uint16_t *		580283	0					
ANR	580304	Identifier	offsets		580283	1					
ANR	580305	AssignmentExpression	* offsets = ics -> swb_offset		580283	2		=			
ANR	580306	Identifier	offsets		580283	0					
ANR	580307	PtrMemberAccess	ics -> swb_offset		580283	1					
ANR	580308	Identifier	ics		580283	0					
ANR	580309	Identifier	swb_offset		580283	1					
ANR	580310	IdentifierDeclStatement	int * dest = target -> coeffs ;	13:4:306:332	580283	2	True				
ANR	580311	IdentifierDecl	* dest = target -> coeffs		580283	0					
ANR	580312	IdentifierDeclType	int *		580283	0					
ANR	580313	Identifier	dest		580283	1					
ANR	580314	AssignmentExpression	* dest = target -> coeffs		580283	2		=			
ANR	580315	Identifier	dest		580283	0					
ANR	580316	PtrMemberAccess	target -> coeffs		580283	1					
ANR	580317	Identifier	target		580283	0					
ANR	580318	Identifier	coeffs		580283	1					
ANR	580319	IdentifierDeclStatement	const int * src = cce -> ch [ 0 ] . coeffs ;	15:4:339:373	580283	3	True				
ANR	580320	IdentifierDecl	* src = cce -> ch [ 0 ] . coeffs		580283	0					
ANR	580321	IdentifierDeclType	const int *		580283	0					
ANR	580322	Identifier	src		580283	1					
ANR	580323	AssignmentExpression	* src = cce -> ch [ 0 ] . coeffs		580283	2		=			
ANR	580324	Identifier	src		580283	0					
ANR	580325	MemberAccess	cce -> ch [ 0 ] . coeffs		580283	1					
ANR	580326	ArrayIndexing	cce -> ch [ 0 ]		580283	0					
ANR	580327	PtrMemberAccess	cce -> ch		580283	0					
ANR	580328	Identifier	cce		580283	0					
ANR	580329	Identifier	ch		580283	1					
ANR	580330	PrimaryExpression	0		580283	1					
ANR	580331	Identifier	coeffs		580283	1					
ANR	580332	IdentifierDeclStatement	"int g , i , group , k , idx = 0 ;"	17:4:380:407	580283	4	True				
ANR	580333	IdentifierDecl	g		580283	0					
ANR	580334	IdentifierDeclType	int		580283	0					
ANR	580335	Identifier	g		580283	1					
ANR	580336	IdentifierDecl	i		580283	1					
ANR	580337	IdentifierDeclType	int		580283	0					
ANR	580338	Identifier	i		580283	1					
ANR	580339	IdentifierDecl	group		580283	2					
ANR	580340	IdentifierDeclType	int		580283	0					
ANR	580341	Identifier	group		580283	1					
ANR	580342	IdentifierDecl	k		580283	3					
ANR	580343	IdentifierDeclType	int		580283	0					
ANR	580344	Identifier	k		580283	1					
ANR	580345	IdentifierDecl	idx = 0		580283	4					
ANR	580346	IdentifierDeclType	int		580283	0					
ANR	580347	Identifier	idx		580283	1					
ANR	580348	AssignmentExpression	idx = 0		580283	2		=			
ANR	580349	Identifier	idx		580283	0					
ANR	580350	PrimaryExpression	0		580283	1					
ANR	580351	IfStatement	if ( ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP )		580283	5					
ANR	580352	Condition	ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP	19:8:418:458	580283	0	True				
ANR	580353	EqualityExpression	ac -> oc [ 1 ] . m4ac . object_type == AOT_AAC_LTP		580283	0		==			
ANR	580354	MemberAccess	ac -> oc [ 1 ] . m4ac . object_type		580283	0					
ANR	580355	MemberAccess	ac -> oc [ 1 ] . m4ac		580283	0					
ANR	580356	ArrayIndexing	ac -> oc [ 1 ]		580283	0					
ANR	580357	PtrMemberAccess	ac -> oc		580283	0					
ANR	580358	Identifier	ac		580283	0					
ANR	580359	Identifier	oc		580283	1					
ANR	580360	PrimaryExpression	1		580283	1					
ANR	580361	Identifier	m4ac		580283	1					
ANR	580362	Identifier	object_type		580283	1					
ANR	580363	Identifier	AOT_AAC_LTP		580283	1					
ANR	580364	CompoundStatement		13:51:262:262	580283	1					
ANR	580365	ExpressionStatement	"av_log ( ac -> avctx , AV_LOG_ERROR , ""Dependent coupling is not supported together with LTP\\n"" )"	21:8:472:578	580283	0	True				
ANR	580366	CallExpression	"av_log ( ac -> avctx , AV_LOG_ERROR , ""Dependent coupling is not supported together with LTP\\n"" )"		580283	0					
ANR	580367	Callee	av_log		580283	0					
ANR	580368	Identifier	av_log		580283	0					
ANR	580369	ArgumentList	ac -> avctx		580283	1					
ANR	580370	Argument	ac -> avctx		580283	0					
ANR	580371	PtrMemberAccess	ac -> avctx		580283	0					
ANR	580372	Identifier	ac		580283	0					
ANR	580373	Identifier	avctx		580283	1					
ANR	580374	Argument	AV_LOG_ERROR		580283	1					
ANR	580375	Identifier	AV_LOG_ERROR		580283	0					
ANR	580376	Argument	"""Dependent coupling is not supported together with LTP\\n"""		580283	2					
ANR	580377	PrimaryExpression	"""Dependent coupling is not supported together with LTP\\n"""		580283	0					
ANR	580378	ReturnStatement	return ;	25:8:589:595	580283	1	True				
ANR	580379	ForStatement	for ( g = 0 ; g < ics -> num_window_groups ; g ++ )		580283	6					
ANR	580380	ForInit	g = 0 ;	29:9:614:619	580283	0	True				
ANR	580381	AssignmentExpression	g = 0		580283	0		=			
ANR	580382	Identifier	g		580283	0					
ANR	580383	PrimaryExpression	0		580283	1					
ANR	580384	Condition	g < ics -> num_window_groups	29:16:621:646	580283	1	True				
ANR	580385	RelationalExpression	g < ics -> num_window_groups		580283	0		<			
ANR	580386	Identifier	g		580283	0					
ANR	580387	PtrMemberAccess	ics -> num_window_groups		580283	1					
ANR	580388	Identifier	ics		580283	0					
ANR	580389	Identifier	num_window_groups		580283	1					
ANR	580390	PostIncDecOperationExpression	g ++	29:44:649:651	580283	2	True				
ANR	580391	Identifier	g		580283	0					
ANR	580392	IncDec	++		580283	1					
ANR	580393	CompoundStatement		23:49:455:455	580283	3					
ANR	580394	ForStatement	"for ( i = 0 ; i < ics -> max_sfb ; i ++ , idx ++ )"		580283	0					
ANR	580395	ForInit	i = 0 ;	31:13:670:675	580283	0	True				
ANR	580396	AssignmentExpression	i = 0		580283	0		=			
ANR	580397	Identifier	i		580283	0					
ANR	580398	PrimaryExpression	0		580283	1					
ANR	580399	Condition	i < ics -> max_sfb	31:20:677:692	580283	1	True				
ANR	580400	RelationalExpression	i < ics -> max_sfb		580283	0		<			
ANR	580401	Identifier	i		580283	0					
ANR	580402	PtrMemberAccess	ics -> max_sfb		580283	1					
ANR	580403	Identifier	ics		580283	0					
ANR	580404	Identifier	max_sfb		580283	1					
ANR	580405	Expression	"i ++ , idx ++"	31:38:695:704	580283	2	True				
ANR	580406	PostIncDecOperationExpression	i ++		580283	0					
ANR	580407	Identifier	i		580283	0					
ANR	580408	IncDec	++		580283	1					
ANR	580409	PostIncDecOperationExpression	idx ++		580283	1					
ANR	580410	Identifier	idx		580283	0					
ANR	580411	IncDec	++		580283	1					
ANR	580412	CompoundStatement		25:50:508:508	580283	3					
ANR	580413	IfStatement	if ( cce -> ch [ 0 ] . band_type [ idx ] != ZERO_BT )		580283	0					
ANR	580414	Condition	cce -> ch [ 0 ] . band_type [ idx ] != ZERO_BT	33:16:726:761	580283	0	True				
ANR	580415	EqualityExpression	cce -> ch [ 0 ] . band_type [ idx ] != ZERO_BT		580283	0		!=			
ANR	580416	ArrayIndexing	cce -> ch [ 0 ] . band_type [ idx ]		580283	0					
ANR	580417	MemberAccess	cce -> ch [ 0 ] . band_type		580283	0					
ANR	580418	ArrayIndexing	cce -> ch [ 0 ]		580283	0					
ANR	580419	PtrMemberAccess	cce -> ch		580283	0					
ANR	580420	Identifier	cce		580283	0					
ANR	580421	Identifier	ch		580283	1					
ANR	580422	PrimaryExpression	0		580283	1					
ANR	580423	Identifier	band_type		580283	1					
ANR	580424	Identifier	idx		580283	1					
ANR	580425	Identifier	ZERO_BT		580283	1					
ANR	580426	CompoundStatement		31:16:646:670	580283	1					
ANR	580427	IdentifierDeclStatement	const int gain = cce -> coup . gain [ index ] [ idx ] ;	35:16:783:826	580283	0	True				
ANR	580428	IdentifierDecl	gain = cce -> coup . gain [ index ] [ idx ]		580283	0					
ANR	580429	IdentifierDeclType	const int		580283	0					
ANR	580430	Identifier	gain		580283	1					
ANR	580431	AssignmentExpression	gain = cce -> coup . gain [ index ] [ idx ]		580283	2		=			
ANR	580432	Identifier	gain		580283	0					
ANR	580433	ArrayIndexing	cce -> coup . gain [ index ] [ idx ]		580283	1					
ANR	580434	ArrayIndexing	cce -> coup . gain [ index ]		580283	0					
ANR	580435	MemberAccess	cce -> coup . gain		580283	0					
ANR	580436	PtrMemberAccess	cce -> coup		580283	0					
ANR	580437	Identifier	cce		580283	0					
ANR	580438	Identifier	coup		580283	1					
ANR	580439	Identifier	gain		580283	1					
ANR	580440	Identifier	index		580283	1					
ANR	580441	Identifier	idx		580283	1					
ANR	580442	IdentifierDeclStatement	"int shift , round , c , tmp ;"	37:16:845:869	580283	1	True				
ANR	580443	IdentifierDecl	shift		580283	0					
ANR	580444	IdentifierDeclType	int		580283	0					
ANR	580445	Identifier	shift		580283	1					
ANR	580446	IdentifierDecl	round		580283	1					
ANR	580447	IdentifierDeclType	int		580283	0					
ANR	580448	Identifier	round		580283	1					
ANR	580449	IdentifierDecl	c		580283	2					
ANR	580450	IdentifierDeclType	int		580283	0					
ANR	580451	Identifier	c		580283	1					
ANR	580452	IdentifierDecl	tmp		580283	3					
ANR	580453	IdentifierDeclType	int		580283	0					
ANR	580454	Identifier	tmp		580283	1					
ANR	580455	IfStatement	if ( gain < 0 )		580283	2					
ANR	580456	Condition	gain < 0	41:20:894:901	580283	0	True				
ANR	580457	RelationalExpression	gain < 0		580283	0		<			
ANR	580458	Identifier	gain		580283	0					
ANR	580459	PrimaryExpression	0		580283	1					
ANR	580460	CompoundStatement		35:30:705:705	580283	1					
ANR	580461	ExpressionStatement	c = - cce_scale_fixed [ - gain & 7 ]	43:20:927:958	580283	0	True				
ANR	580462	AssignmentExpression	c = - cce_scale_fixed [ - gain & 7 ]		580283	0		=			
ANR	580463	Identifier	c		580283	0					
ANR	580464	UnaryOperationExpression	- cce_scale_fixed [ - gain & 7 ]		580283	1					
ANR	580465	UnaryOperator	-		580283	0					
ANR	580466	ArrayIndexing	cce_scale_fixed [ - gain & 7 ]		580283	1					
ANR	580467	Identifier	cce_scale_fixed		580283	0					
ANR	580468	BitAndExpression	- gain & 7		580283	1		&			
ANR	580469	UnaryOperationExpression	- gain		580283	0					
ANR	580470	UnaryOperator	-		580283	0					
ANR	580471	Identifier	gain		580283	1					
ANR	580472	PrimaryExpression	7		580283	1					
ANR	580473	ExpressionStatement	shift = ( - gain - 1024 ) >> 3	45:20:981:1006	580283	1	True				
ANR	580474	AssignmentExpression	shift = ( - gain - 1024 ) >> 3		580283	0		=			
ANR	580475	Identifier	shift		580283	0					
ANR	580476	ShiftExpression	( - gain - 1024 ) >> 3		580283	1		>>			
ANR	580477	AdditiveExpression	- gain - 1024		580283	0		-			
ANR	580478	UnaryOperationExpression	- gain		580283	0					
ANR	580479	UnaryOperator	-		580283	0					
ANR	580480	Identifier	gain		580283	1					
ANR	580481	PrimaryExpression	1024		580283	1					
ANR	580482	PrimaryExpression	3		580283	1					
ANR	580483	ElseStatement	else		580283	0					
ANR	580484	CompoundStatement		43:21:850:850	580283	0					
ANR	580485	ExpressionStatement	c = cce_scale_fixed [ gain & 7 ]	51:20:1072:1101	580283	0	True				
ANR	580486	AssignmentExpression	c = cce_scale_fixed [ gain & 7 ]		580283	0		=			
ANR	580487	Identifier	c		580283	0					
ANR	580488	ArrayIndexing	cce_scale_fixed [ gain & 7 ]		580283	1					
ANR	580489	Identifier	cce_scale_fixed		580283	0					
ANR	580490	BitAndExpression	gain & 7		580283	1		&			
ANR	580491	Identifier	gain		580283	0					
ANR	580492	PrimaryExpression	7		580283	1					
ANR	580493	ExpressionStatement	shift = ( gain - 1024 ) >> 3	53:20:1124:1148	580283	1	True				
ANR	580494	AssignmentExpression	shift = ( gain - 1024 ) >> 3		580283	0		=			
ANR	580495	Identifier	shift		580283	0					
ANR	580496	ShiftExpression	( gain - 1024 ) >> 3		580283	1		>>			
ANR	580497	AdditiveExpression	gain - 1024		580283	0		-			
ANR	580498	Identifier	gain		580283	0					
ANR	580499	PrimaryExpression	1024		580283	1					
ANR	580500	PrimaryExpression	3		580283	1					
ANR	580501	IfStatement	if ( shift < - 31 )		580283	3					
ANR	580502	Condition	shift < - 31	59:20:1192:1202	580283	0	True				
ANR	580503	RelationalExpression	shift < - 31		580283	0		<			
ANR	580504	Identifier	shift		580283	0					
ANR	580505	UnaryOperationExpression	- 31		580283	1					
ANR	580506	UnaryOperator	-		580283	0					
ANR	580507	PrimaryExpression	31		580283	1					
ANR	580508	CompoundStatement		53:33:1006:1006	580283	1					
ANR	580509	ElseStatement	else		580283	0					
ANR	580510	IfStatement	if ( shift < 0 )		580283	0					
ANR	580511	Condition	shift < 0	63:27:1273:1281	580283	0	True				
ANR	580512	RelationalExpression	shift < 0		580283	0		<			
ANR	580513	Identifier	shift		580283	0					
ANR	580514	PrimaryExpression	0		580283	1					
ANR	580515	CompoundStatement		57:38:1085:1085	580283	1					
ANR	580516	ExpressionStatement	shift = - shift	65:20:1307:1321	580283	0	True				
ANR	580517	AssignmentExpression	shift = - shift		580283	0		=			
ANR	580518	Identifier	shift		580283	0					
ANR	580519	UnaryOperationExpression	- shift		580283	1					
ANR	580520	UnaryOperator	-		580283	0					
ANR	580521	Identifier	shift		580283	1					
ANR	580522	ExpressionStatement	round = 1 << ( shift - 1 )	67:20:1344:1368	580283	1	True				
ANR	580523	AssignmentExpression	round = 1 << ( shift - 1 )		580283	0		=			
ANR	580524	Identifier	round		580283	0					
ANR	580525	ShiftExpression	1 << ( shift - 1 )		580283	1		<<			
ANR	580526	PrimaryExpression	1		580283	0					
ANR	580527	AdditiveExpression	shift - 1		580283	1		-			
ANR	580528	Identifier	shift		580283	0					
ANR	580529	PrimaryExpression	1		580283	1					
ANR	580530	ForStatement	for ( group = 0 ; group < ics -> group_len [ g ] ; group ++ )		580283	2					
ANR	580531	ForInit	group = 0 ;	71:25:1398:1407	580283	0	True				
ANR	580532	AssignmentExpression	group = 0		580283	0		=			
ANR	580533	Identifier	group		580283	0					
ANR	580534	PrimaryExpression	0		580283	1					
ANR	580535	Condition	group < ics -> group_len [ g ]	71:36:1409:1433	580283	1	True				
ANR	580536	RelationalExpression	group < ics -> group_len [ g ]		580283	0		<			
ANR	580537	Identifier	group		580283	0					
ANR	580538	ArrayIndexing	ics -> group_len [ g ]		580283	1					
ANR	580539	PtrMemberAccess	ics -> group_len		580283	0					
ANR	580540	Identifier	ics		580283	0					
ANR	580541	Identifier	group_len		580283	1					
ANR	580542	Identifier	g		580283	1					
ANR	580543	PostIncDecOperationExpression	group ++	71:63:1436:1442	580283	2	True				
ANR	580544	Identifier	group		580283	0					
ANR	580545	IncDec	++		580283	1					
ANR	580546	CompoundStatement		65:72:1246:1246	580283	3					
ANR	580547	ForStatement	for ( k = offsets [ i ] ; k < offsets [ i + 1 ] ; k ++ )		580283	0					
ANR	580548	ForInit	k = offsets [ i ] ;	73:29:1477:1491	580283	0	True				
ANR	580549	AssignmentExpression	k = offsets [ i ]		580283	0		=			
ANR	580550	Identifier	k		580283	0					
ANR	580551	ArrayIndexing	offsets [ i ]		580283	1					
ANR	580552	Identifier	offsets		580283	0					
ANR	580553	Identifier	i		580283	1					
ANR	580554	Condition	k < offsets [ i + 1 ]	73:45:1493:1510	580283	1	True				
ANR	580555	RelationalExpression	k < offsets [ i + 1 ]		580283	0		<			
ANR	580556	Identifier	k		580283	0					
ANR	580557	ArrayIndexing	offsets [ i + 1 ]		580283	1					
ANR	580558	Identifier	offsets		580283	0					
ANR	580559	AdditiveExpression	i + 1		580283	1		+			
ANR	580560	Identifier	i		580283	0					
ANR	580561	PrimaryExpression	1		580283	1					
ANR	580562	PostIncDecOperationExpression	k ++	73:65:1513:1515	580283	2	True				
ANR	580563	Identifier	k		580283	0					
ANR	580564	IncDec	++		580283	1					
ANR	580565	CompoundStatement		67:70:1319:1319	580283	3					
ANR	580566	ExpressionStatement	tmp = ( int ) ( ( ( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000 ) >> 37 )	75:28:1549:1669	580283	0	True				
ANR	580567	AssignmentExpression	tmp = ( int ) ( ( ( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000 ) >> 37 )		580283	0		=			
ANR	580568	Identifier	tmp		580283	0					
ANR	580569	CastExpression	( int ) ( ( ( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000 ) >> 37 )		580283	1					
ANR	580570	CastTarget	int		580283	0					
ANR	580571	ShiftExpression	( ( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000 ) >> 37		580283	1		>>			
ANR	580572	AdditiveExpression	( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000		580283	0		+			
ANR	580573	MultiplicativeExpression	( int64_t ) src [ group * 128 + k ] * c		580283	0		*			
ANR	580574	CastExpression	( int64_t ) src [ group * 128 + k ]		580283	0					
ANR	580575	CastTarget	int64_t		580283	0					
ANR	580576	ArrayIndexing	src [ group * 128 + k ]		580283	1					
ANR	580577	Identifier	src		580283	0					
ANR	580578	AdditiveExpression	group * 128 + k		580283	1		+			
ANR	580579	MultiplicativeExpression	group * 128		580283	0		*			
ANR	580580	Identifier	group		580283	0					
ANR	580581	PrimaryExpression	128		580283	1					
ANR	580582	Identifier	k		580283	1					
ANR	580583	Identifier	c		580283	1					
ANR	580584	CastExpression	( int64_t ) 0x1000000000		580283	1					
ANR	580585	CastTarget	int64_t		580283	0					
ANR	580586	PrimaryExpression	0x1000000000		580283	1					
ANR	580587	PrimaryExpression	37		580283	1					
ANR	580588	ExpressionStatement	dest [ group * 128 + k ] += ( tmp + round ) >> shift	79:28:1700:1747	580283	1	True				
ANR	580589	AssignmentExpression	dest [ group * 128 + k ] += ( tmp + round ) >> shift		580283	0		+=			
ANR	580590	ArrayIndexing	dest [ group * 128 + k ]		580283	0					
ANR	580591	Identifier	dest		580283	0					
ANR	580592	AdditiveExpression	group * 128 + k		580283	1		+			
ANR	580593	MultiplicativeExpression	group * 128		580283	0		*			
ANR	580594	Identifier	group		580283	0					
ANR	580595	PrimaryExpression	128		580283	1					
ANR	580596	Identifier	k		580283	1					
ANR	580597	ShiftExpression	( tmp + round ) >> shift		580283	1		>>			
ANR	580598	AdditiveExpression	tmp + round		580283	0		+			
ANR	580599	Identifier	tmp		580283	0					
ANR	580600	Identifier	round		580283	1					
ANR	580601	Identifier	shift		580283	1					
ANR	580602	ElseStatement	else		580283	0					
ANR	580603	CompoundStatement		81:21:1641:1641	580283	0					
ANR	580604	ForStatement	for ( group = 0 ; group < ics -> group_len [ g ] ; group ++ )		580283	0					
ANR	580605	ForInit	group = 0 ;	89:25:1868:1877	580283	0	True				
ANR	580606	AssignmentExpression	group = 0		580283	0		=			
ANR	580607	Identifier	group		580283	0					
ANR	580608	PrimaryExpression	0		580283	1					
ANR	580609	Condition	group < ics -> group_len [ g ]	89:36:1879:1903	580283	1	True				
ANR	580610	RelationalExpression	group < ics -> group_len [ g ]		580283	0		<			
ANR	580611	Identifier	group		580283	0					
ANR	580612	ArrayIndexing	ics -> group_len [ g ]		580283	1					
ANR	580613	PtrMemberAccess	ics -> group_len		580283	0					
ANR	580614	Identifier	ics		580283	0					
ANR	580615	Identifier	group_len		580283	1					
ANR	580616	Identifier	g		580283	1					
ANR	580617	PostIncDecOperationExpression	group ++	89:63:1906:1912	580283	2	True				
ANR	580618	Identifier	group		580283	0					
ANR	580619	IncDec	++		580283	1					
ANR	580620	CompoundStatement		83:72:1716:1716	580283	3					
ANR	580621	ForStatement	for ( k = offsets [ i ] ; k < offsets [ i + 1 ] ; k ++ )		580283	0					
ANR	580622	ForInit	k = offsets [ i ] ;	91:29:1947:1961	580283	0	True				
ANR	580623	AssignmentExpression	k = offsets [ i ]		580283	0		=			
ANR	580624	Identifier	k		580283	0					
ANR	580625	ArrayIndexing	offsets [ i ]		580283	1					
ANR	580626	Identifier	offsets		580283	0					
ANR	580627	Identifier	i		580283	1					
ANR	580628	Condition	k < offsets [ i + 1 ]	91:45:1963:1980	580283	1	True				
ANR	580629	RelationalExpression	k < offsets [ i + 1 ]		580283	0		<			
ANR	580630	Identifier	k		580283	0					
ANR	580631	ArrayIndexing	offsets [ i + 1 ]		580283	1					
ANR	580632	Identifier	offsets		580283	0					
ANR	580633	AdditiveExpression	i + 1		580283	1		+			
ANR	580634	Identifier	i		580283	0					
ANR	580635	PrimaryExpression	1		580283	1					
ANR	580636	PostIncDecOperationExpression	k ++	91:65:1983:1985	580283	2	True				
ANR	580637	Identifier	k		580283	0					
ANR	580638	IncDec	++		580283	1					
ANR	580639	CompoundStatement		85:70:1789:1789	580283	3					
ANR	580640	ExpressionStatement	tmp = ( int ) ( ( ( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000 ) >> 37 )	93:28:2019:2140	580283	0	True				
ANR	580641	AssignmentExpression	tmp = ( int ) ( ( ( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000 ) >> 37 )		580283	0		=			
ANR	580642	Identifier	tmp		580283	0					
ANR	580643	CastExpression	( int ) ( ( ( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000 ) >> 37 )		580283	1					
ANR	580644	CastTarget	int		580283	0					
ANR	580645	ShiftExpression	( ( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000 ) >> 37		580283	1		>>			
ANR	580646	AdditiveExpression	( int64_t ) src [ group * 128 + k ] * c + ( int64_t ) 0x1000000000		580283	0		+			
ANR	580647	MultiplicativeExpression	( int64_t ) src [ group * 128 + k ] * c		580283	0		*			
ANR	580648	CastExpression	( int64_t ) src [ group * 128 + k ]		580283	0					
ANR	580649	CastTarget	int64_t		580283	0					
ANR	580650	ArrayIndexing	src [ group * 128 + k ]		580283	1					
ANR	580651	Identifier	src		580283	0					
ANR	580652	AdditiveExpression	group * 128 + k		580283	1		+			
ANR	580653	MultiplicativeExpression	group * 128		580283	0		*			
ANR	580654	Identifier	group		580283	0					
ANR	580655	PrimaryExpression	128		580283	1					
ANR	580656	Identifier	k		580283	1					
ANR	580657	Identifier	c		580283	1					
ANR	580658	CastExpression	( int64_t ) 0x1000000000		580283	1					
ANR	580659	CastTarget	int64_t		580283	0					
ANR	580660	PrimaryExpression	0x1000000000		580283	1					
ANR	580661	PrimaryExpression	37		580283	1					
ANR	580662	ExpressionStatement	dest [ group * 128 + k ] += tmp << shift	97:28:2171:2208	580283	1	True				
ANR	580663	AssignmentExpression	dest [ group * 128 + k ] += tmp << shift		580283	0		+=			
ANR	580664	ArrayIndexing	dest [ group * 128 + k ]		580283	0					
ANR	580665	Identifier	dest		580283	0					
ANR	580666	AdditiveExpression	group * 128 + k		580283	1		+			
ANR	580667	MultiplicativeExpression	group * 128		580283	0		*			
ANR	580668	Identifier	group		580283	0					
ANR	580669	PrimaryExpression	128		580283	1					
ANR	580670	Identifier	k		580283	1					
ANR	580671	ShiftExpression	tmp << shift		580283	1		<<			
ANR	580672	Identifier	tmp		580283	0					
ANR	580673	Identifier	shift		580283	1					
ANR	580674	ExpressionStatement	dest += ics -> group_len [ g ] * 128	109:8:2314:2345	580283	1	True				
ANR	580675	AssignmentExpression	dest += ics -> group_len [ g ] * 128		580283	0		+=			
ANR	580676	Identifier	dest		580283	0					
ANR	580677	MultiplicativeExpression	ics -> group_len [ g ] * 128		580283	1		*			
ANR	580678	ArrayIndexing	ics -> group_len [ g ]		580283	0					
ANR	580679	PtrMemberAccess	ics -> group_len		580283	0					
ANR	580680	Identifier	ics		580283	0					
ANR	580681	Identifier	group_len		580283	1					
ANR	580682	Identifier	g		580283	1					
ANR	580683	PrimaryExpression	128		580283	1					
ANR	580684	ExpressionStatement	src += ics -> group_len [ g ] * 128	111:8:2356:2387	580283	2	True				
ANR	580685	AssignmentExpression	src += ics -> group_len [ g ] * 128		580283	0		+=			
ANR	580686	Identifier	src		580283	0					
ANR	580687	MultiplicativeExpression	ics -> group_len [ g ] * 128		580283	1		*			
ANR	580688	ArrayIndexing	ics -> group_len [ g ]		580283	0					
ANR	580689	PtrMemberAccess	ics -> group_len		580283	0					
ANR	580690	Identifier	ics		580283	0					
ANR	580691	Identifier	group_len		580283	1					
ANR	580692	Identifier	g		580283	1					
ANR	580693	PrimaryExpression	128		580283	1					
ANR	580694	ReturnType	static void		580283	1					
ANR	580695	Identifier	apply_dependent_coupling_fixed		580283	2					
ANR	580696	ParameterList	"AACContext * ac , SingleChannelElement * target , ChannelElement * cce , int index"		580283	3					
ANR	580697	Parameter	AACContext * ac	1:43:43:56	580283	0	True				
ANR	580698	ParameterType	AACContext *		580283	0					
ANR	580699	Identifier	ac		580283	1					
ANR	580700	Parameter	SingleChannelElement * target	3:37:97:124	580283	1	True				
ANR	580701	ParameterType	SingleChannelElement *		580283	0					
ANR	580702	Identifier	target		580283	1					
ANR	580703	Parameter	ChannelElement * cce	5:37:165:183	580283	2	True				
ANR	580704	ParameterType	ChannelElement *		580283	0					
ANR	580705	Identifier	cce		580283	1					
ANR	580706	Parameter	int index	5:58:186:194	580283	3	True				
ANR	580707	ParameterType	int		580283	0					
ANR	580708	Identifier	index		580283	1					
ANR	580709	CFGEntryNode	ENTRY		580283		True				
ANR	580710	CFGExitNode	EXIT		580283		True				
ANR	580711	Symbol	* * * cce		580283						
ANR	580712	Symbol	cce		580283						
ANR	580713	Symbol	* cce -> coup . gain		580283						
ANR	580714	Symbol	* index		580283						
ANR	580715	Symbol	shift		580283						
ANR	580716	Symbol	cce_scale_fixed		580283						
ANR	580717	Symbol	& cce -> ch [ 0 ] . ics		580283						
ANR	580718	Symbol	dest		580283						
ANR	580719	Symbol	* * ac		580283						
ANR	580720	Symbol	* src		580283						
ANR	580721	Symbol	ZERO_BT		580283						
ANR	580722	Symbol	* * cce -> ch		580283						
ANR	580723	Symbol	ics -> num_window_groups		580283						
ANR	580724	Symbol	tmp		580283						
ANR	580725	Symbol	ics		580283						
ANR	580726	Symbol	* idx		580283						
ANR	580727	Symbol	group		580283						
ANR	580728	Symbol	ac		580283						
ANR	580729	Symbol	* cce -> ch		580283						
ANR	580730	Symbol	cce -> ch [ 0 ] . coeffs		580283						
ANR	580731	Symbol	* cce -> ch [ 0 ] . band_type		580283						
ANR	580732	Symbol	ac -> oc [ 1 ] . m4ac		580283						
ANR	580733	Symbol	AOT_AAC_LTP		580283						
ANR	580734	Symbol	* cce_scale_fixed		580283						
ANR	580735	Symbol	index		580283						
ANR	580736	Symbol	ac -> oc		580283						
ANR	580737	Symbol	* gain		580283						
ANR	580738	Symbol	* * cce -> coup		580283						
ANR	580739	Symbol	target -> coeffs		580283						
ANR	580740	Symbol	cce -> coup . gain		580283						
ANR	580741	Symbol	idx		580283						
ANR	580742	Symbol	* ics -> group_len		580283						
ANR	580743	Symbol	* dest		580283						
ANR	580744	Symbol	cce -> coup		580283						
ANR	580745	Symbol	* group		580283						
ANR	580746	Symbol	cce -> ch		580283						
ANR	580747	Symbol	* ac		580283						
ANR	580748	Symbol	gain		580283						
ANR	580749	Symbol	* cce		580283						
ANR	580750	Symbol	ics -> group_len		580283						
ANR	580751	Symbol	* * cce -> coup . gain		580283						
ANR	580752	Symbol	ics -> swb_offset		580283						
ANR	580753	Symbol	* * cce		580283						
ANR	580754	Symbol	* * index		580283						
ANR	580755	Symbol	* offsets		580283						
ANR	580756	Symbol	* cce -> coup		580283						
ANR	580757	Symbol	c		580283						
ANR	580758	Symbol	AV_LOG_ERROR		580283						
ANR	580759	Symbol	src		580283						
ANR	580760	Symbol	g		580283						
ANR	580761	Symbol	i		580283						
ANR	580762	Symbol	k		580283						
ANR	580763	Symbol	cce -> ch [ 0 ] . band_type		580283						
ANR	580764	Symbol	* * ics		580283						
ANR	580765	Symbol	target		580283						
ANR	580766	Symbol	* target		580283						
ANR	580767	Symbol	ics -> max_sfb		580283						
ANR	580768	Symbol	* g		580283						
ANR	580769	Symbol	* i		580283						
ANR	580770	Symbol	round		580283						
ANR	580771	Symbol	offsets		580283						
ANR	580772	Symbol	* k		580283						
ANR	580773	Symbol	ac -> oc [ 1 ] . m4ac . object_type		580283						
ANR	580774	Symbol	* ics		580283						
ANR	580775	Symbol	* ac -> oc		580283						
ANR	580776	Symbol	ac -> avctx		580283						
