command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5565793	File	/home/p4ultr4n/workplace/ReVeal/raw_code/monitor_init_02_0.c								
ANR	5565794	Function	monitor_init	1:0:0:716							
ANR	5565795	FunctionDef	"monitor_init (CharDriverState * chr , int flags)"		5565794	0					
ANR	5565796	CompoundStatement		3:0:52:716	5565794	0					
ANR	5565797	Statement	static	5:4:59:64	5565794	0	True				
ANR	5565798	IdentifierDeclStatement	int is_first_init = 1 ;	5:11:66:87	5565794	1	True				
ANR	5565799	IdentifierDecl	is_first_init = 1		5565794	0					
ANR	5565800	IdentifierDeclType	int		5565794	0					
ANR	5565801	Identifier	is_first_init		5565794	1					
ANR	5565802	AssignmentExpression	is_first_init = 1		5565794	2		=			
ANR	5565803	Identifier	is_first_init		5565794	0					
ANR	5565804	PrimaryExpression	1		5565794	1					
ANR	5565805	IdentifierDeclStatement	Monitor * mon ;	7:4:94:106	5565794	2	True				
ANR	5565806	IdentifierDecl	* mon		5565794	0					
ANR	5565807	IdentifierDeclType	Monitor *		5565794	0					
ANR	5565808	Identifier	mon		5565794	1					
ANR	5565809	IfStatement	if ( is_first_init )		5565794	3					
ANR	5565810	Condition	is_first_init	11:8:119:131	5565794	0	True				
ANR	5565811	Identifier	is_first_init		5565794	0					
ANR	5565812	CompoundStatement		9:23:81:81	5565794	1					
ANR	5565813	ExpressionStatement	"key_timer = qemu_new_timer ( vm_clock , release_keys , NULL )"	13:8:145:201	5565794	0	True				
ANR	5565814	AssignmentExpression	"key_timer = qemu_new_timer ( vm_clock , release_keys , NULL )"		5565794	0		=			
ANR	5565815	Identifier	key_timer		5565794	0					
ANR	5565816	CallExpression	"qemu_new_timer ( vm_clock , release_keys , NULL )"		5565794	1					
ANR	5565817	Callee	qemu_new_timer		5565794	0					
ANR	5565818	Identifier	qemu_new_timer		5565794	0					
ANR	5565819	ArgumentList	vm_clock		5565794	1					
ANR	5565820	Argument	vm_clock		5565794	0					
ANR	5565821	Identifier	vm_clock		5565794	0					
ANR	5565822	Argument	release_keys		5565794	1					
ANR	5565823	Identifier	release_keys		5565794	0					
ANR	5565824	Argument	NULL		5565794	2					
ANR	5565825	Identifier	NULL		5565794	0					
ANR	5565826	ExpressionStatement	is_first_init = 0	15:8:212:229	5565794	1	True				
ANR	5565827	AssignmentExpression	is_first_init = 0		5565794	0		=			
ANR	5565828	Identifier	is_first_init		5565794	0					
ANR	5565829	PrimaryExpression	0		5565794	1					
ANR	5565830	ExpressionStatement	mon = qemu_mallocz ( sizeof ( * mon ) )	21:4:245:277	5565794	4	True				
ANR	5565831	AssignmentExpression	mon = qemu_mallocz ( sizeof ( * mon ) )		5565794	0		=			
ANR	5565832	Identifier	mon		5565794	0					
ANR	5565833	CallExpression	qemu_mallocz ( sizeof ( * mon ) )		5565794	1					
ANR	5565834	Callee	qemu_mallocz		5565794	0					
ANR	5565835	Identifier	qemu_mallocz		5565794	0					
ANR	5565836	ArgumentList	sizeof ( * mon )		5565794	1					
ANR	5565837	Argument	sizeof ( * mon )		5565794	0					
ANR	5565838	SizeofExpression	sizeof ( * mon )		5565794	0					
ANR	5565839	Sizeof	sizeof		5565794	0					
ANR	5565840	UnaryOperationExpression	* mon		5565794	1					
ANR	5565841	UnaryOperator	*		5565794	0					
ANR	5565842	Identifier	mon		5565794	1					
ANR	5565843	ExpressionStatement	mon -> chr = chr	25:4:286:300	5565794	5	True				
ANR	5565844	AssignmentExpression	mon -> chr = chr		5565794	0		=			
ANR	5565845	PtrMemberAccess	mon -> chr		5565794	0					
ANR	5565846	Identifier	mon		5565794	0					
ANR	5565847	Identifier	chr		5565794	1					
ANR	5565848	Identifier	chr		5565794	1					
ANR	5565849	ExpressionStatement	mon -> flags = flags	27:4:307:325	5565794	6	True				
ANR	5565850	AssignmentExpression	mon -> flags = flags		5565794	0		=			
ANR	5565851	PtrMemberAccess	mon -> flags		5565794	0					
ANR	5565852	Identifier	mon		5565794	0					
ANR	5565853	Identifier	flags		5565794	1					
ANR	5565854	Identifier	flags		5565794	1					
ANR	5565855	IfStatement	if ( flags & MONITOR_USE_READLINE )		5565794	7					
ANR	5565856	Condition	flags & MONITOR_USE_READLINE	29:8:336:363	5565794	0	True				
ANR	5565857	BitAndExpression	flags & MONITOR_USE_READLINE		5565794	0		&			
ANR	5565858	Identifier	flags		5565794	0					
ANR	5565859	Identifier	MONITOR_USE_READLINE		5565794	1					
ANR	5565860	CompoundStatement		27:38:313:313	5565794	1					
ANR	5565861	ExpressionStatement	"mon -> rs = readline_init ( mon , monitor_find_completion )"	31:8:377:430	5565794	0	True				
ANR	5565862	AssignmentExpression	"mon -> rs = readline_init ( mon , monitor_find_completion )"		5565794	0		=			
ANR	5565863	PtrMemberAccess	mon -> rs		5565794	0					
ANR	5565864	Identifier	mon		5565794	0					
ANR	5565865	Identifier	rs		5565794	1					
ANR	5565866	CallExpression	"readline_init ( mon , monitor_find_completion )"		5565794	1					
ANR	5565867	Callee	readline_init		5565794	0					
ANR	5565868	Identifier	readline_init		5565794	0					
ANR	5565869	ArgumentList	mon		5565794	1					
ANR	5565870	Argument	mon		5565794	0					
ANR	5565871	Identifier	mon		5565794	0					
ANR	5565872	Argument	monitor_find_completion		5565794	1					
ANR	5565873	Identifier	monitor_find_completion		5565794	0					
ANR	5565874	ExpressionStatement	"monitor_read_command ( mon , 0 )"	33:8:441:469	5565794	1	True				
ANR	5565875	CallExpression	"monitor_read_command ( mon , 0 )"		5565794	0					
ANR	5565876	Callee	monitor_read_command		5565794	0					
ANR	5565877	Identifier	monitor_read_command		5565794	0					
ANR	5565878	ArgumentList	mon		5565794	1					
ANR	5565879	Argument	mon		5565794	0					
ANR	5565880	Identifier	mon		5565794	0					
ANR	5565881	Argument	0		5565794	1					
ANR	5565882	PrimaryExpression	0		5565794	0					
ANR	5565883	ExpressionStatement	"qemu_chr_add_handlers ( chr , monitor_can_read , monitor_read , monitor_event , mon )"	39:4:485:590	5565794	8	True				
ANR	5565884	CallExpression	"qemu_chr_add_handlers ( chr , monitor_can_read , monitor_read , monitor_event , mon )"		5565794	0					
ANR	5565885	Callee	qemu_chr_add_handlers		5565794	0					
ANR	5565886	Identifier	qemu_chr_add_handlers		5565794	0					
ANR	5565887	ArgumentList	chr		5565794	1					
ANR	5565888	Argument	chr		5565794	0					
ANR	5565889	Identifier	chr		5565794	0					
ANR	5565890	Argument	monitor_can_read		5565794	1					
ANR	5565891	Identifier	monitor_can_read		5565794	0					
ANR	5565892	Argument	monitor_read		5565794	2					
ANR	5565893	Identifier	monitor_read		5565794	0					
ANR	5565894	Argument	monitor_event		5565794	3					
ANR	5565895	Identifier	monitor_event		5565794	0					
ANR	5565896	Argument	mon		5565794	4					
ANR	5565897	Identifier	mon		5565794	0					
ANR	5565898	ExpressionStatement	"LIST_INSERT_HEAD ( & mon_list , mon , entry )"	45:4:599:638	5565794	9	True				
ANR	5565899	CallExpression	"LIST_INSERT_HEAD ( & mon_list , mon , entry )"		5565794	0					
ANR	5565900	Callee	LIST_INSERT_HEAD		5565794	0					
ANR	5565901	Identifier	LIST_INSERT_HEAD		5565794	0					
ANR	5565902	ArgumentList	& mon_list		5565794	1					
ANR	5565903	Argument	& mon_list		5565794	0					
ANR	5565904	UnaryOperationExpression	& mon_list		5565794	0					
ANR	5565905	UnaryOperator	&		5565794	0					
ANR	5565906	Identifier	mon_list		5565794	1					
ANR	5565907	Argument	mon		5565794	1					
ANR	5565908	Identifier	mon		5565794	0					
ANR	5565909	Argument	entry		5565794	2					
ANR	5565910	Identifier	entry		5565794	0					
ANR	5565911	IfStatement	if ( ! cur_mon || ( flags & MONITOR_IS_DEFAULT ) )		5565794	10					
ANR	5565912	Condition	! cur_mon || ( flags & MONITOR_IS_DEFAULT )	47:8:649:688	5565794	0	True				
ANR	5565913	OrExpression	! cur_mon || ( flags & MONITOR_IS_DEFAULT )		5565794	0		||			
ANR	5565914	UnaryOperationExpression	! cur_mon		5565794	0					
ANR	5565915	UnaryOperator	!		5565794	0					
ANR	5565916	Identifier	cur_mon		5565794	1					
ANR	5565917	BitAndExpression	flags & MONITOR_IS_DEFAULT		5565794	1		&			
ANR	5565918	Identifier	flags		5565794	0					
ANR	5565919	Identifier	MONITOR_IS_DEFAULT		5565794	1					
ANR	5565920	ExpressionStatement	cur_mon = mon	49:8:700:713	5565794	1	True				
ANR	5565921	AssignmentExpression	cur_mon = mon		5565794	0		=			
ANR	5565922	Identifier	cur_mon		5565794	0					
ANR	5565923	Identifier	mon		5565794	1					
ANR	5565924	ReturnType	void		5565794	1					
ANR	5565925	Identifier	monitor_init		5565794	2					
ANR	5565926	ParameterList	"CharDriverState * chr , int flags"		5565794	3					
ANR	5565927	Parameter	CharDriverState * chr	1:18:18:37	5565794	0	True				
ANR	5565928	ParameterType	CharDriverState *		5565794	0					
ANR	5565929	Identifier	chr		5565794	1					
ANR	5565930	Parameter	int flags	1:40:40:48	5565794	1	True				
ANR	5565931	ParameterType	int		5565794	0					
ANR	5565932	Identifier	flags		5565794	1					
ANR	5565933	CFGEntryNode	ENTRY		5565794		True				
ANR	5565934	CFGExitNode	EXIT		5565794		True				
ANR	5565935	Symbol	& mon_list		5565794						
ANR	5565936	Symbol	NULL		5565794						
ANR	5565937	Symbol	mon -> flags		5565794						
ANR	5565938	Symbol	flags		5565794						
ANR	5565939	Symbol	MONITOR_USE_READLINE		5565794						
ANR	5565940	Symbol	monitor_can_read		5565794						
ANR	5565941	Symbol	MONITOR_IS_DEFAULT		5565794						
ANR	5565942	Symbol	chr		5565794						
ANR	5565943	Symbol	mon		5565794						
ANR	5565944	Symbol	cur_mon		5565794						
ANR	5565945	Symbol	mon -> chr		5565794						
ANR	5565946	Symbol	readline_init		5565794						
ANR	5565947	Symbol	entry		5565794						
ANR	5565948	Symbol	vm_clock		5565794						
ANR	5565949	Symbol	qemu_new_timer		5565794						
ANR	5565950	Symbol	key_timer		5565794						
ANR	5565951	Symbol	* mon		5565794						
ANR	5565952	Symbol	monitor_event		5565794						
ANR	5565953	Symbol	mon -> rs		5565794						
ANR	5565954	Symbol	is_first_init		5565794						
ANR	5565955	Symbol	release_keys		5565794						
ANR	5565956	Symbol	monitor_read		5565794						
ANR	5565957	Symbol	monitor_find_completion		5565794						
ANR	5565958	Symbol	qemu_mallocz		5565794						
