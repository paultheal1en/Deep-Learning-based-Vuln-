command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8321808	File	/home/p4ultr4n/workplace/ReVeal/raw_code/term_handle_command_0.c								
ANR	8321809	Function	term_handle_command	1:0:0:1073							
ANR	8321810	FunctionDef	term_handle_command (char * cmdline)		8321809	0					
ANR	8321811	CompoundStatement		3:0:48:1073	8321809	0					
ANR	8321812	IdentifierDeclStatement	"char * p , * pstart ;"	5:4:55:71	8321809	0	True				
ANR	8321813	IdentifierDecl	* p		8321809	0					
ANR	8321814	IdentifierDeclType	char *		8321809	0					
ANR	8321815	Identifier	p		8321809	1					
ANR	8321816	IdentifierDecl	* pstart		8321809	1					
ANR	8321817	IdentifierDeclType	char *		8321809	0					
ANR	8321818	Identifier	pstart		8321809	1					
ANR	8321819	IdentifierDeclStatement	int argc ;	7:4:78:86	8321809	1	True				
ANR	8321820	IdentifierDecl	argc		8321809	0					
ANR	8321821	IdentifierDeclType	int		8321809	0					
ANR	8321822	Identifier	argc		8321809	1					
ANR	8321823	IdentifierDeclStatement	const char * args [ MAX_ARGS + 1 ] ;	9:4:93:123	8321809	2	True				
ANR	8321824	IdentifierDecl	* args [ MAX_ARGS + 1 ]		8321809	0					
ANR	8321825	IdentifierDeclType	const char * [ MAX_ARGS + 1 ]		8321809	0					
ANR	8321826	Identifier	args		8321809	1					
ANR	8321827	AdditiveExpression	MAX_ARGS + 1		8321809	2		+			
ANR	8321828	Identifier	MAX_ARGS		8321809	0					
ANR	8321829	PrimaryExpression	1		8321809	1					
ANR	8321830	IdentifierDeclStatement	term_cmd_t * cmd ;	11:4:130:145	8321809	3	True				
ANR	8321831	IdentifierDecl	* cmd		8321809	0					
ANR	8321832	IdentifierDeclType	term_cmd_t *		8321809	0					
ANR	8321833	Identifier	cmd		8321809	1					
ANR	8321834	ExpressionStatement	"term_printf ( ""command='%s'\\n"" , cmdline )"	17:4:168:206	8321809	4	True				
ANR	8321835	CallExpression	"term_printf ( ""command='%s'\\n"" , cmdline )"		8321809	0					
ANR	8321836	Callee	term_printf		8321809	0					
ANR	8321837	Identifier	term_printf		8321809	0					
ANR	8321838	ArgumentList	"""command='%s'\\n"""		8321809	1					
ANR	8321839	Argument	"""command='%s'\\n"""		8321809	0					
ANR	8321840	PrimaryExpression	"""command='%s'\\n"""		8321809	0					
ANR	8321841	Argument	cmdline		8321809	1					
ANR	8321842	Identifier	cmdline		8321809	0					
ANR	8321843	ExpressionStatement	argc = 0	25:4:261:269	8321809	5	True				
ANR	8321844	AssignmentExpression	argc = 0		8321809	0		=			
ANR	8321845	Identifier	argc		8321809	0					
ANR	8321846	PrimaryExpression	0		8321809	1					
ANR	8321847	ExpressionStatement	p = cmdline	27:4:276:287	8321809	6	True				
ANR	8321848	AssignmentExpression	p = cmdline		8321809	0		=			
ANR	8321849	Identifier	p		8321809	0					
ANR	8321850	Identifier	cmdline		8321809	1					
ANR	8321851	ForStatement	for ( ; ; )		8321809	7					
ANR	8321852	CompoundStatement		27:12:253:253	8321809	0					
ANR	8321853	WhileStatement	while ( isspace ( * p ) )		8321809	0					
ANR	8321854	Condition	isspace ( * p )	31:15:320:330	8321809	0	True				
ANR	8321855	CallExpression	isspace ( * p )		8321809	0					
ANR	8321856	Callee	isspace		8321809	0					
ANR	8321857	Identifier	isspace		8321809	0					
ANR	8321858	ArgumentList	* p		8321809	1					
ANR	8321859	Argument	* p		8321809	0					
ANR	8321860	UnaryOperationExpression	* p		8321809	0					
ANR	8321861	UnaryOperator	*		8321809	0					
ANR	8321862	Identifier	p		8321809	1					
ANR	8321863	ExpressionStatement	p ++	33:12:346:349	8321809	1	True				
ANR	8321864	PostIncDecOperationExpression	p ++		8321809	0					
ANR	8321865	Identifier	p		8321809	0					
ANR	8321866	IncDec	++		8321809	1					
ANR	8321867	IfStatement	if ( * p == '\\0' )		8321809	1					
ANR	8321868	Condition	* p == '\\0'	35:12:364:373	8321809	0	True				
ANR	8321869	EqualityExpression	* p == '\\0'		8321809	0		==			
ANR	8321870	UnaryOperationExpression	* p		8321809	0					
ANR	8321871	UnaryOperator	*		8321809	0					
ANR	8321872	Identifier	p		8321809	1					
ANR	8321873	PrimaryExpression	'\\0'		8321809	1					
ANR	8321874	BreakStatement	break ;	37:12:389:394	8321809	1	True				
ANR	8321875	ExpressionStatement	pstart = p	39:8:405:415	8321809	2	True				
ANR	8321876	AssignmentExpression	pstart = p		8321809	0		=			
ANR	8321877	Identifier	pstart		8321809	0					
ANR	8321878	Identifier	p		8321809	1					
ANR	8321879	WhileStatement	while ( * p != '\\0' && ! isspace ( * p ) )		8321809	3					
ANR	8321880	Condition	* p != '\\0' && ! isspace ( * p )	41:15:433:458	8321809	0	True				
ANR	8321881	AndExpression	* p != '\\0' && ! isspace ( * p )		8321809	0		&&			
ANR	8321882	EqualityExpression	* p != '\\0'		8321809	0		!=			
ANR	8321883	UnaryOperationExpression	* p		8321809	0					
ANR	8321884	UnaryOperator	*		8321809	0					
ANR	8321885	Identifier	p		8321809	1					
ANR	8321886	PrimaryExpression	'\\0'		8321809	1					
ANR	8321887	UnaryOperationExpression	! isspace ( * p )		8321809	1					
ANR	8321888	UnaryOperator	!		8321809	0					
ANR	8321889	CallExpression	isspace ( * p )		8321809	1					
ANR	8321890	Callee	isspace		8321809	0					
ANR	8321891	Identifier	isspace		8321809	0					
ANR	8321892	ArgumentList	* p		8321809	1					
ANR	8321893	Argument	* p		8321809	0					
ANR	8321894	UnaryOperationExpression	* p		8321809	0					
ANR	8321895	UnaryOperator	*		8321809	0					
ANR	8321896	Identifier	p		8321809	1					
ANR	8321897	ExpressionStatement	p ++	43:12:474:477	8321809	1	True				
ANR	8321898	PostIncDecOperationExpression	p ++		8321809	0					
ANR	8321899	Identifier	p		8321809	0					
ANR	8321900	IncDec	++		8321809	1					
ANR	8321901	ExpressionStatement	args [ argc ] = pstart	45:8:488:507	8321809	4	True				
ANR	8321902	AssignmentExpression	args [ argc ] = pstart		8321809	0		=			
ANR	8321903	ArrayIndexing	args [ argc ]		8321809	0					
ANR	8321904	Identifier	args		8321809	0					
ANR	8321905	Identifier	argc		8321809	1					
ANR	8321906	Identifier	pstart		8321809	1					
ANR	8321907	ExpressionStatement	argc ++	47:8:518:524	8321809	5	True				
ANR	8321908	PostIncDecOperationExpression	argc ++		8321809	0					
ANR	8321909	Identifier	argc		8321809	0					
ANR	8321910	IncDec	++		8321809	1					
ANR	8321911	IfStatement	if ( argc >= MAX_ARGS )		8321809	6					
ANR	8321912	Condition	argc >= MAX_ARGS	49:12:539:554	8321809	0	True				
ANR	8321913	RelationalExpression	argc >= MAX_ARGS		8321809	0		>=			
ANR	8321914	Identifier	argc		8321809	0					
ANR	8321915	Identifier	MAX_ARGS		8321809	1					
ANR	8321916	BreakStatement	break ;	51:12:570:575	8321809	1	True				
ANR	8321917	IfStatement	if ( * p == '\\0' )		8321809	7					
ANR	8321918	Condition	* p == '\\0'	53:12:590:599	8321809	0	True				
ANR	8321919	EqualityExpression	* p == '\\0'		8321809	0		==			
ANR	8321920	UnaryOperationExpression	* p		8321809	0					
ANR	8321921	UnaryOperator	*		8321809	0					
ANR	8321922	Identifier	p		8321809	1					
ANR	8321923	PrimaryExpression	'\\0'		8321809	1					
ANR	8321924	BreakStatement	break ;	55:12:615:620	8321809	1	True				
ANR	8321925	ExpressionStatement	* p ++ = '\\0'	57:8:631:642	8321809	8	True				
ANR	8321926	AssignmentExpression	* p ++ = '\\0'		8321809	0		=			
ANR	8321927	UnaryOperationExpression	* p ++		8321809	0					
ANR	8321928	UnaryOperator	*		8321809	0					
ANR	8321929	PostIncDecOperationExpression	p ++		8321809	1					
ANR	8321930	Identifier	p		8321809	0					
ANR	8321931	IncDec	++		8321809	1					
ANR	8321932	PrimaryExpression	'\\0'		8321809	1					
ANR	8321933	ExpressionStatement	args [ argc ] = NULL	61:4:656:673	8321809	8	True				
ANR	8321934	AssignmentExpression	args [ argc ] = NULL		8321809	0		=			
ANR	8321935	ArrayIndexing	args [ argc ]		8321809	0					
ANR	8321936	Identifier	args		8321809	0					
ANR	8321937	Identifier	argc		8321809	1					
ANR	8321938	Identifier	NULL		8321809	1					
ANR	8321939	ForStatement	for ( i = 0 ; i < argc ; i ++ )		8321809	9					
ANR	8321940	ForInit	i = 0 ;	65:8:698:701	8321809	0	True				
ANR	8321941	AssignmentExpression	i = 0		8321809	0		=			
ANR	8321942	Identifier	i		8321809	0					
ANR	8321943	PrimaryExpression	0		8321809	1					
ANR	8321944	Condition	i < argc	65:12:702:707	8321809	1	True				
ANR	8321945	RelationalExpression	i < argc		8321809	0		<			
ANR	8321946	Identifier	i		8321809	0					
ANR	8321947	Identifier	argc		8321809	1					
ANR	8321948	PostIncDecOperationExpression	i ++	65:19:709:711	8321809	2	True				
ANR	8321949	Identifier	i		8321809	0					
ANR	8321950	IncDec	++		8321809	1					
ANR	8321951	CompoundStatement		63:24:665:665	8321809	3					
ANR	8321952	ExpressionStatement	"term_printf ( "" '%s'"" , args [ i ] )"	67:8:725:754	8321809	0	True				
ANR	8321953	CallExpression	"term_printf ( "" '%s'"" , args [ i ] )"		8321809	0					
ANR	8321954	Callee	term_printf		8321809	0					
ANR	8321955	Identifier	term_printf		8321809	0					
ANR	8321956	ArgumentList	""" '%s'"""		8321809	1					
ANR	8321957	Argument	""" '%s'"""		8321809	0					
ANR	8321958	PrimaryExpression	""" '%s'"""		8321809	0					
ANR	8321959	Argument	args [ i ]		8321809	1					
ANR	8321960	ArrayIndexing	args [ i ]		8321809	0					
ANR	8321961	Identifier	args		8321809	0					
ANR	8321962	Identifier	i		8321809	1					
ANR	8321963	ExpressionStatement	"term_printf ( ""\\n"" )"	71:4:768:785	8321809	10	True				
ANR	8321964	CallExpression	"term_printf ( ""\\n"" )"		8321809	0					
ANR	8321965	Callee	term_printf		8321809	0					
ANR	8321966	Identifier	term_printf		8321809	0					
ANR	8321967	ArgumentList	"""\\n"""		8321809	1					
ANR	8321968	Argument	"""\\n"""		8321809	0					
ANR	8321969	PrimaryExpression	"""\\n"""		8321809	0					
ANR	8321970	IfStatement	if ( argc <= 0 )		8321809	11					
ANR	8321971	Condition	argc <= 0	75:8:804:812	8321809	0	True				
ANR	8321972	RelationalExpression	argc <= 0		8321809	0		<=			
ANR	8321973	Identifier	argc		8321809	0					
ANR	8321974	PrimaryExpression	0		8321809	1					
ANR	8321975	ReturnStatement	return ;	77:8:824:830	8321809	1	True				
ANR	8321976	ForStatement	for ( cmd = term_cmds ; cmd -> name != NULL ; cmd ++ )		8321809	12					
ANR	8321977	ForInit	cmd = term_cmds ;	79:8:841:856	8321809	0	True				
ANR	8321978	AssignmentExpression	cmd = term_cmds		8321809	0		=			
ANR	8321979	Identifier	cmd		8321809	0					
ANR	8321980	Identifier	term_cmds		8321809	1					
ANR	8321981	Condition	cmd -> name != NULL	79:25:858:874	8321809	1	True				
ANR	8321982	EqualityExpression	cmd -> name != NULL		8321809	0		!=			
ANR	8321983	PtrMemberAccess	cmd -> name		8321809	0					
ANR	8321984	Identifier	cmd		8321809	0					
ANR	8321985	Identifier	name		8321809	1					
ANR	8321986	Identifier	NULL		8321809	1					
ANR	8321987	PostIncDecOperationExpression	cmd ++	79:44:877:881	8321809	2	True				
ANR	8321988	Identifier	cmd		8321809	0					
ANR	8321989	IncDec	++		8321809	1					
ANR	8321990	CompoundStatement		77:51:835:835	8321809	3					
ANR	8321991	IfStatement	"if ( compare_cmd ( args [ 0 ] , cmd -> name ) )"		8321809	0					
ANR	8321992	Condition	"compare_cmd ( args [ 0 ] , cmd -> name )"	81:12:899:929	8321809	0	True				
ANR	8321993	CallExpression	"compare_cmd ( args [ 0 ] , cmd -> name )"		8321809	0					
ANR	8321994	Callee	compare_cmd		8321809	0					
ANR	8321995	Identifier	compare_cmd		8321809	0					
ANR	8321996	ArgumentList	args [ 0 ]		8321809	1					
ANR	8321997	Argument	args [ 0 ]		8321809	0					
ANR	8321998	ArrayIndexing	args [ 0 ]		8321809	0					
ANR	8321999	Identifier	args		8321809	0					
ANR	8322000	PrimaryExpression	0		8321809	1					
ANR	8322001	Argument	cmd -> name		8321809	1					
ANR	8322002	PtrMemberAccess	cmd -> name		8321809	0					
ANR	8322003	Identifier	cmd		8321809	0					
ANR	8322004	Identifier	name		8321809	1					
ANR	8322005	GotoStatement	goto found ;	83:12:946:956	8321809	1	True				
ANR	8322006	Identifier	found		8321809	0					
ANR	8322007	ExpressionStatement	"term_printf ( ""unknown command: '%s'\\n"" , args [ 0 ] )"	87:4:970:1017	8321809	13	True				
ANR	8322008	CallExpression	"term_printf ( ""unknown command: '%s'\\n"" , args [ 0 ] )"		8321809	0					
ANR	8322009	Callee	term_printf		8321809	0					
ANR	8322010	Identifier	term_printf		8321809	0					
ANR	8322011	ArgumentList	"""unknown command: '%s'\\n"""		8321809	1					
ANR	8322012	Argument	"""unknown command: '%s'\\n"""		8321809	0					
ANR	8322013	PrimaryExpression	"""unknown command: '%s'\\n"""		8321809	0					
ANR	8322014	Argument	args [ 0 ]		8321809	1					
ANR	8322015	ArrayIndexing	args [ 0 ]		8321809	0					
ANR	8322016	Identifier	args		8321809	0					
ANR	8322017	PrimaryExpression	0		8321809	1					
ANR	8322018	ReturnStatement	return ;	89:4:1024:1030	8321809	14	True				
ANR	8322019	Label	found :	91:1:1034:1039	8321809	15	True				
ANR	8322020	Identifier	found		8321809	0					
ANR	8322021	ExpressionStatement	"cmd -> handler ( argc , args )"	93:4:1046:1070	8321809	16	True				
ANR	8322022	CallExpression	"cmd -> handler ( argc , args )"		8321809	0					
ANR	8322023	Callee	cmd -> handler		8321809	0					
ANR	8322024	PtrMemberAccess	cmd -> handler		8321809	0					
ANR	8322025	Identifier	cmd		8321809	0					
ANR	8322026	Identifier	handler		8321809	1					
ANR	8322027	ArgumentList	argc		8321809	1					
ANR	8322028	Argument	argc		8321809	0					
ANR	8322029	Identifier	argc		8321809	0					
ANR	8322030	Argument	args		8321809	1					
ANR	8322031	Identifier	args		8321809	0					
ANR	8322032	ReturnType	static void		8321809	1					
ANR	8322033	Identifier	term_handle_command		8321809	2					
ANR	8322034	ParameterList	char * cmdline		8321809	3					
ANR	8322035	Parameter	char * cmdline	1:32:32:44	8321809	0	True				
ANR	8322036	ParameterType	char *		8321809	0					
ANR	8322037	Identifier	cmdline		8321809	1					
ANR	8322038	CFGEntryNode	ENTRY		8321809		True				
ANR	8322039	CFGExitNode	EXIT		8321809		True				
ANR	8322040	InfiniteForNode	true		8321809		True				
ANR	8322041	Symbol	argc		8321809						
ANR	8322042	Symbol	NULL		8321809						
ANR	8322043	Symbol	term_cmds		8321809						
ANR	8322044	Symbol	cmd -> name		8321809						
ANR	8322045	Symbol	* p ++		8321809						
ANR	8322046	Symbol	isspace		8321809						
ANR	8322047	Symbol	i		8321809						
ANR	8322048	Symbol	MAX_ARGS		8321809						
ANR	8322049	Symbol	* args		8321809						
ANR	8322050	Symbol	p		8321809						
ANR	8322051	Symbol	args		8321809						
ANR	8322052	Symbol	compare_cmd		8321809						
ANR	8322053	Symbol	cmdline		8321809						
ANR	8322054	Symbol	* i		8321809						
ANR	8322055	Symbol	* p		8321809						
ANR	8322056	Symbol	pstart		8321809						
ANR	8322057	Symbol	cmd		8321809						
ANR	8322058	Symbol	* cmd		8321809						
ANR	8322059	Symbol	* argc		8321809						
