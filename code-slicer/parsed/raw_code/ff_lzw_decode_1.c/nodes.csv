command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3529116	File	/home/p4ultr4n/workplace/ReVeal/raw_code/ff_lzw_decode_1.c								
ANR	3529117	Function	ff_lzw_decode	1:0:0:1620							
ANR	3529118	FunctionDef	"ff_lzw_decode (LZWState * p , uint8_t * buf , int len)"		3529117	0					
ANR	3529119	CompoundStatement		1:53:53:1620	3529117	0					
ANR	3529120	IdentifierDeclStatement	"int l , c , code , oc , fc ;"	3:4:60:82	3529117	0	True				
ANR	3529121	IdentifierDecl	l		3529117	0					
ANR	3529122	IdentifierDeclType	int		3529117	0					
ANR	3529123	Identifier	l		3529117	1					
ANR	3529124	IdentifierDecl	c		3529117	1					
ANR	3529125	IdentifierDeclType	int		3529117	0					
ANR	3529126	Identifier	c		3529117	1					
ANR	3529127	IdentifierDecl	code		3529117	2					
ANR	3529128	IdentifierDeclType	int		3529117	0					
ANR	3529129	Identifier	code		3529117	1					
ANR	3529130	IdentifierDecl	oc		3529117	3					
ANR	3529131	IdentifierDeclType	int		3529117	0					
ANR	3529132	Identifier	oc		3529117	1					
ANR	3529133	IdentifierDecl	fc		3529117	4					
ANR	3529134	IdentifierDeclType	int		3529117	0					
ANR	3529135	Identifier	fc		3529117	1					
ANR	3529136	IdentifierDeclStatement	uint8_t * sp ;	5:4:89:100	3529117	1	True				
ANR	3529137	IdentifierDecl	* sp		3529117	0					
ANR	3529138	IdentifierDeclType	uint8_t *		3529117	0					
ANR	3529139	Identifier	sp		3529117	1					
ANR	3529140	IdentifierDeclStatement	struct LZWState * s = ( struct LZWState * ) p ;	7:4:107:148	3529117	2	True				
ANR	3529141	IdentifierDecl	* s = ( struct LZWState * ) p		3529117	0					
ANR	3529142	IdentifierDeclType	struct LZWState *		3529117	0					
ANR	3529143	Identifier	s		3529117	1					
ANR	3529144	AssignmentExpression	* s = ( struct LZWState * ) p		3529117	2		=			
ANR	3529145	Identifier	s		3529117	0					
ANR	3529146	CastExpression	( struct LZWState * ) p		3529117	1					
ANR	3529147	CastTarget	struct LZWState *		3529117	0					
ANR	3529148	Identifier	p		3529117	1					
ANR	3529149	IfStatement	if ( s -> end_code < 0 )		3529117	3					
ANR	3529150	Condition	s -> end_code < 0	11:8:161:175	3529117	0	True				
ANR	3529151	RelationalExpression	s -> end_code < 0		3529117	0		<			
ANR	3529152	PtrMemberAccess	s -> end_code		3529117	0					
ANR	3529153	Identifier	s		3529117	0					
ANR	3529154	Identifier	end_code		3529117	1					
ANR	3529155	PrimaryExpression	0		3529117	1					
ANR	3529156	ReturnStatement	return 0 ;	13:8:187:195	3529117	1	True				
ANR	3529157	PrimaryExpression	0		3529117	0					
ANR	3529158	ExpressionStatement	l = len	17:4:204:211	3529117	4	True				
ANR	3529159	AssignmentExpression	l = len		3529117	0		=			
ANR	3529160	Identifier	l		3529117	0					
ANR	3529161	Identifier	len		3529117	1					
ANR	3529162	ExpressionStatement	sp = s -> sp	19:4:218:228	3529117	5	True				
ANR	3529163	AssignmentExpression	sp = s -> sp		3529117	0		=			
ANR	3529164	Identifier	sp		3529117	0					
ANR	3529165	PtrMemberAccess	s -> sp		3529117	1					
ANR	3529166	Identifier	s		3529117	0					
ANR	3529167	Identifier	sp		3529117	1					
ANR	3529168	ExpressionStatement	oc = s -> oc	21:4:235:245	3529117	6	True				
ANR	3529169	AssignmentExpression	oc = s -> oc		3529117	0		=			
ANR	3529170	Identifier	oc		3529117	0					
ANR	3529171	PtrMemberAccess	s -> oc		3529117	1					
ANR	3529172	Identifier	s		3529117	0					
ANR	3529173	Identifier	oc		3529117	1					
ANR	3529174	ExpressionStatement	fc = s -> fc	23:4:252:262	3529117	7	True				
ANR	3529175	AssignmentExpression	fc = s -> fc		3529117	0		=			
ANR	3529176	Identifier	fc		3529117	0					
ANR	3529177	PtrMemberAccess	s -> fc		3529117	1					
ANR	3529178	Identifier	s		3529117	0					
ANR	3529179	Identifier	fc		3529117	1					
ANR	3529180	ForStatement	for ( ; ; )		3529117	8					
ANR	3529181	CompoundStatement		27:13:226:226	3529117	0					
ANR	3529182	WhileStatement	while ( sp > s -> stack )		3529117	0					
ANR	3529183	Condition	sp > s -> stack	29:15:298:310	3529117	0	True				
ANR	3529184	RelationalExpression	sp > s -> stack		3529117	0		>			
ANR	3529185	Identifier	sp		3529117	0					
ANR	3529186	PtrMemberAccess	s -> stack		3529117	1					
ANR	3529187	Identifier	s		3529117	0					
ANR	3529188	Identifier	stack		3529117	1					
ANR	3529189	CompoundStatement		29:30:259:259	3529117	1					
ANR	3529190	ExpressionStatement	* buf ++ = * ( -- sp )	31:12:328:344	3529117	0	True				
ANR	3529191	AssignmentExpression	* buf ++ = * ( -- sp )		3529117	0		=			
ANR	3529192	UnaryOperationExpression	* buf ++		3529117	0					
ANR	3529193	UnaryOperator	*		3529117	0					
ANR	3529194	PostIncDecOperationExpression	buf ++		3529117	1					
ANR	3529195	Identifier	buf		3529117	0					
ANR	3529196	IncDec	++		3529117	1					
ANR	3529197	UnaryOperationExpression	* ( -- sp )		3529117	1					
ANR	3529198	UnaryOperator	*		3529117	0					
ANR	3529199	UnaryExpression	-- sp		3529117	1					
ANR	3529200	IncDec	--		3529117	0					
ANR	3529201	Identifier	sp		3529117	1					
ANR	3529202	IfStatement	if ( ( -- l ) == 0 )		3529117	1					
ANR	3529203	Condition	( -- l ) == 0	33:16:363:372	3529117	0	True				
ANR	3529204	EqualityExpression	( -- l ) == 0		3529117	0		==			
ANR	3529205	UnaryExpression	-- l		3529117	0					
ANR	3529206	IncDec	--		3529117	0					
ANR	3529207	Identifier	l		3529117	1					
ANR	3529208	PrimaryExpression	0		3529117	1					
ANR	3529209	GotoStatement	goto the_end ;	35:16:392:404	3529117	1	True				
ANR	3529210	Identifier	the_end		3529117	0					
ANR	3529211	ExpressionStatement	c = lzw_get_code ( s )	39:8:426:445	3529117	1	True				
ANR	3529212	AssignmentExpression	c = lzw_get_code ( s )		3529117	0		=			
ANR	3529213	Identifier	c		3529117	0					
ANR	3529214	CallExpression	lzw_get_code ( s )		3529117	1					
ANR	3529215	Callee	lzw_get_code		3529117	0					
ANR	3529216	Identifier	lzw_get_code		3529117	0					
ANR	3529217	ArgumentList	s		3529117	1					
ANR	3529218	Argument	s		3529117	0					
ANR	3529219	Identifier	s		3529117	0					
ANR	3529220	IfStatement	if ( c == s -> end_code )		3529117	2					
ANR	3529221	Condition	c == s -> end_code	41:12:460:475	3529117	0	True				
ANR	3529222	EqualityExpression	c == s -> end_code		3529117	0		==			
ANR	3529223	Identifier	c		3529117	0					
ANR	3529224	PtrMemberAccess	s -> end_code		3529117	1					
ANR	3529225	Identifier	s		3529117	0					
ANR	3529226	Identifier	end_code		3529117	1					
ANR	3529227	CompoundStatement		41:30:424:424	3529117	1					
ANR	3529228	ExpressionStatement	s -> end_code = - 1	43:12:493:509	3529117	0	True				
ANR	3529229	AssignmentExpression	s -> end_code = - 1		3529117	0		=			
ANR	3529230	PtrMemberAccess	s -> end_code		3529117	0					
ANR	3529231	Identifier	s		3529117	0					
ANR	3529232	Identifier	end_code		3529117	1					
ANR	3529233	UnaryOperationExpression	- 1		3529117	1					
ANR	3529234	UnaryOperator	-		3529117	0					
ANR	3529235	PrimaryExpression	1		3529117	1					
ANR	3529236	BreakStatement	break ;	45:12:524:529	3529117	1	True				
ANR	3529237	ElseStatement	else		3529117	0					
ANR	3529238	IfStatement	if ( c == s -> clear_code )		3529117	0					
ANR	3529239	Condition	c == s -> clear_code	47:19:551:568	3529117	0	True				
ANR	3529240	EqualityExpression	c == s -> clear_code		3529117	0		==			
ANR	3529241	Identifier	c		3529117	0					
ANR	3529242	PtrMemberAccess	s -> clear_code		3529117	1					
ANR	3529243	Identifier	s		3529117	0					
ANR	3529244	Identifier	clear_code		3529117	1					
ANR	3529245	CompoundStatement		47:39:517:517	3529117	1					
ANR	3529246	ExpressionStatement	s -> cursize = s -> codesize + 1	49:12:586:614	3529117	0	True				
ANR	3529247	AssignmentExpression	s -> cursize = s -> codesize + 1		3529117	0		=			
ANR	3529248	PtrMemberAccess	s -> cursize		3529117	0					
ANR	3529249	Identifier	s		3529117	0					
ANR	3529250	Identifier	cursize		3529117	1					
ANR	3529251	AdditiveExpression	s -> codesize + 1		3529117	1		+			
ANR	3529252	PtrMemberAccess	s -> codesize		3529117	0					
ANR	3529253	Identifier	s		3529117	0					
ANR	3529254	Identifier	codesize		3529117	1					
ANR	3529255	PrimaryExpression	1		3529117	1					
ANR	3529256	ExpressionStatement	s -> curmask = mask [ s -> cursize ]	51:12:629:658	3529117	1	True				
ANR	3529257	AssignmentExpression	s -> curmask = mask [ s -> cursize ]		3529117	0		=			
ANR	3529258	PtrMemberAccess	s -> curmask		3529117	0					
ANR	3529259	Identifier	s		3529117	0					
ANR	3529260	Identifier	curmask		3529117	1					
ANR	3529261	ArrayIndexing	mask [ s -> cursize ]		3529117	1					
ANR	3529262	Identifier	mask		3529117	0					
ANR	3529263	PtrMemberAccess	s -> cursize		3529117	1					
ANR	3529264	Identifier	s		3529117	0					
ANR	3529265	Identifier	cursize		3529117	1					
ANR	3529266	ExpressionStatement	s -> slot = s -> newcodes	53:12:673:694	3529117	2	True				
ANR	3529267	AssignmentExpression	s -> slot = s -> newcodes		3529117	0		=			
ANR	3529268	PtrMemberAccess	s -> slot		3529117	0					
ANR	3529269	Identifier	s		3529117	0					
ANR	3529270	Identifier	slot		3529117	1					
ANR	3529271	PtrMemberAccess	s -> newcodes		3529117	1					
ANR	3529272	Identifier	s		3529117	0					
ANR	3529273	Identifier	newcodes		3529117	1					
ANR	3529274	ExpressionStatement	s -> top_slot = 1 << s -> cursize	55:12:709:738	3529117	3	True				
ANR	3529275	AssignmentExpression	s -> top_slot = 1 << s -> cursize		3529117	0		=			
ANR	3529276	PtrMemberAccess	s -> top_slot		3529117	0					
ANR	3529277	Identifier	s		3529117	0					
ANR	3529278	Identifier	top_slot		3529117	1					
ANR	3529279	ShiftExpression	1 << s -> cursize		3529117	1		<<			
ANR	3529280	PrimaryExpression	1		3529117	0					
ANR	3529281	PtrMemberAccess	s -> cursize		3529117	1					
ANR	3529282	Identifier	s		3529117	0					
ANR	3529283	Identifier	cursize		3529117	1					
ANR	3529284	ExpressionStatement	fc = oc = - 1	57:12:753:763	3529117	4	True				
ANR	3529285	AssignmentExpression	fc = oc = - 1		3529117	0		=			
ANR	3529286	Identifier	fc		3529117	0					
ANR	3529287	AssignmentExpression	oc = - 1		3529117	1		=			
ANR	3529288	Identifier	oc		3529117	0					
ANR	3529289	UnaryOperationExpression	- 1		3529117	1					
ANR	3529290	UnaryOperator	-		3529117	0					
ANR	3529291	PrimaryExpression	1		3529117	1					
ANR	3529292	ElseStatement	else		3529117	0					
ANR	3529293	CompoundStatement		59:15:727:727	3529117	0					
ANR	3529294	ExpressionStatement	code = c	61:12:796:804	3529117	0	True				
ANR	3529295	AssignmentExpression	code = c		3529117	0		=			
ANR	3529296	Identifier	code		3529117	0					
ANR	3529297	Identifier	c		3529117	1					
ANR	3529298	IfStatement	if ( code >= s -> slot )		3529117	1					
ANR	3529299	Condition	code >= s -> slot	63:16:823:837	3529117	0	True				
ANR	3529300	RelationalExpression	code >= s -> slot		3529117	0		>=			
ANR	3529301	Identifier	code		3529117	0					
ANR	3529302	PtrMemberAccess	s -> slot		3529117	1					
ANR	3529303	Identifier	s		3529117	0					
ANR	3529304	Identifier	slot		3529117	1					
ANR	3529305	CompoundStatement		63:33:786:786	3529117	1					
ANR	3529306	ExpressionStatement	* sp ++ = fc	65:16:859:869	3529117	0	True				
ANR	3529307	AssignmentExpression	* sp ++ = fc		3529117	0		=			
ANR	3529308	UnaryOperationExpression	* sp ++		3529117	0					
ANR	3529309	UnaryOperator	*		3529117	0					
ANR	3529310	PostIncDecOperationExpression	sp ++		3529117	1					
ANR	3529311	Identifier	sp		3529117	0					
ANR	3529312	IncDec	++		3529117	1					
ANR	3529313	Identifier	fc		3529117	1					
ANR	3529314	ExpressionStatement	code = oc	67:16:888:897	3529117	1	True				
ANR	3529315	AssignmentExpression	code = oc		3529117	0		=			
ANR	3529316	Identifier	code		3529117	0					
ANR	3529317	Identifier	oc		3529117	1					
ANR	3529318	WhileStatement	while ( code >= s -> newcodes )		3529117	2					
ANR	3529319	Condition	code >= s -> newcodes	71:19:934:952	3529117	0	True				
ANR	3529320	RelationalExpression	code >= s -> newcodes		3529117	0		>=			
ANR	3529321	Identifier	code		3529117	0					
ANR	3529322	PtrMemberAccess	s -> newcodes		3529117	1					
ANR	3529323	Identifier	s		3529117	0					
ANR	3529324	Identifier	newcodes		3529117	1					
ANR	3529325	CompoundStatement		71:40:901:901	3529117	1					
ANR	3529326	ExpressionStatement	* sp ++ = s -> suffix [ code ]	73:16:974:997	3529117	0	True				
ANR	3529327	AssignmentExpression	* sp ++ = s -> suffix [ code ]		3529117	0		=			
ANR	3529328	UnaryOperationExpression	* sp ++		3529117	0					
ANR	3529329	UnaryOperator	*		3529117	0					
ANR	3529330	PostIncDecOperationExpression	sp ++		3529117	1					
ANR	3529331	Identifier	sp		3529117	0					
ANR	3529332	IncDec	++		3529117	1					
ANR	3529333	ArrayIndexing	s -> suffix [ code ]		3529117	1					
ANR	3529334	PtrMemberAccess	s -> suffix		3529117	0					
ANR	3529335	Identifier	s		3529117	0					
ANR	3529336	Identifier	suffix		3529117	1					
ANR	3529337	Identifier	code		3529117	1					
ANR	3529338	ExpressionStatement	code = s -> prefix [ code ]	75:16:1016:1038	3529117	1	True				
ANR	3529339	AssignmentExpression	code = s -> prefix [ code ]		3529117	0		=			
ANR	3529340	Identifier	code		3529117	0					
ANR	3529341	ArrayIndexing	s -> prefix [ code ]		3529117	1					
ANR	3529342	PtrMemberAccess	s -> prefix		3529117	0					
ANR	3529343	Identifier	s		3529117	0					
ANR	3529344	Identifier	prefix		3529117	1					
ANR	3529345	Identifier	code		3529117	1					
ANR	3529346	ExpressionStatement	* sp ++ = code	79:12:1068:1080	3529117	3	True				
ANR	3529347	AssignmentExpression	* sp ++ = code		3529117	0		=			
ANR	3529348	UnaryOperationExpression	* sp ++		3529117	0					
ANR	3529349	UnaryOperator	*		3529117	0					
ANR	3529350	PostIncDecOperationExpression	sp ++		3529117	1					
ANR	3529351	Identifier	sp		3529117	0					
ANR	3529352	IncDec	++		3529117	1					
ANR	3529353	Identifier	code		3529117	1					
ANR	3529354	IfStatement	if ( s -> slot < s -> top_slot && oc >= 0 )		3529117	4					
ANR	3529355	Condition	s -> slot < s -> top_slot && oc >= 0	81:16:1099:1128	3529117	0	True				
ANR	3529356	AndExpression	s -> slot < s -> top_slot && oc >= 0		3529117	0		&&			
ANR	3529357	RelationalExpression	s -> slot < s -> top_slot		3529117	0		<			
ANR	3529358	PtrMemberAccess	s -> slot		3529117	0					
ANR	3529359	Identifier	s		3529117	0					
ANR	3529360	Identifier	slot		3529117	1					
ANR	3529361	PtrMemberAccess	s -> top_slot		3529117	1					
ANR	3529362	Identifier	s		3529117	0					
ANR	3529363	Identifier	top_slot		3529117	1					
ANR	3529364	RelationalExpression	oc >= 0		3529117	1		>=			
ANR	3529365	Identifier	oc		3529117	0					
ANR	3529366	PrimaryExpression	0		3529117	1					
ANR	3529367	CompoundStatement		81:48:1077:1077	3529117	1					
ANR	3529368	ExpressionStatement	s -> suffix [ s -> slot ] = code	83:16:1150:1175	3529117	0	True				
ANR	3529369	AssignmentExpression	s -> suffix [ s -> slot ] = code		3529117	0		=			
ANR	3529370	ArrayIndexing	s -> suffix [ s -> slot ]		3529117	0					
ANR	3529371	PtrMemberAccess	s -> suffix		3529117	0					
ANR	3529372	Identifier	s		3529117	0					
ANR	3529373	Identifier	suffix		3529117	1					
ANR	3529374	PtrMemberAccess	s -> slot		3529117	1					
ANR	3529375	Identifier	s		3529117	0					
ANR	3529376	Identifier	slot		3529117	1					
ANR	3529377	Identifier	code		3529117	1					
ANR	3529378	ExpressionStatement	s -> prefix [ s -> slot ++ ] = oc	85:16:1194:1219	3529117	1	True				
ANR	3529379	AssignmentExpression	s -> prefix [ s -> slot ++ ] = oc		3529117	0		=			
ANR	3529380	ArrayIndexing	s -> prefix [ s -> slot ++ ]		3529117	0					
ANR	3529381	PtrMemberAccess	s -> prefix		3529117	0					
ANR	3529382	Identifier	s		3529117	0					
ANR	3529383	Identifier	prefix		3529117	1					
ANR	3529384	PostIncDecOperationExpression	s -> slot ++		3529117	1					
ANR	3529385	PtrMemberAccess	s -> slot		3529117	0					
ANR	3529386	Identifier	s		3529117	0					
ANR	3529387	Identifier	slot		3529117	1					
ANR	3529388	IncDec	++		3529117	1					
ANR	3529389	Identifier	oc		3529117	1					
ANR	3529390	ExpressionStatement	fc = code	89:12:1249:1258	3529117	5	True				
ANR	3529391	AssignmentExpression	fc = code		3529117	0		=			
ANR	3529392	Identifier	fc		3529117	0					
ANR	3529393	Identifier	code		3529117	1					
ANR	3529394	ExpressionStatement	oc = c	91:12:1273:1279	3529117	6	True				
ANR	3529395	AssignmentExpression	oc = c		3529117	0		=			
ANR	3529396	Identifier	oc		3529117	0					
ANR	3529397	Identifier	c		3529117	1					
ANR	3529398	IfStatement	if ( s -> slot >= s -> top_slot - s -> extra_slot )		3529117	7					
ANR	3529399	Condition	s -> slot >= s -> top_slot - s -> extra_slot	93:16:1298:1335	3529117	0	True				
ANR	3529400	RelationalExpression	s -> slot >= s -> top_slot - s -> extra_slot		3529117	0		>=			
ANR	3529401	PtrMemberAccess	s -> slot		3529117	0					
ANR	3529402	Identifier	s		3529117	0					
ANR	3529403	Identifier	slot		3529117	1					
ANR	3529404	AdditiveExpression	s -> top_slot - s -> extra_slot		3529117	1		-			
ANR	3529405	PtrMemberAccess	s -> top_slot		3529117	0					
ANR	3529406	Identifier	s		3529117	0					
ANR	3529407	Identifier	top_slot		3529117	1					
ANR	3529408	PtrMemberAccess	s -> extra_slot		3529117	1					
ANR	3529409	Identifier	s		3529117	0					
ANR	3529410	Identifier	extra_slot		3529117	1					
ANR	3529411	CompoundStatement		93:56:1284:1284	3529117	1					
ANR	3529412	IfStatement	if ( s -> cursize < LZW_MAXBITS )		3529117	0					
ANR	3529413	Condition	s -> cursize < LZW_MAXBITS	95:20:1361:1384	3529117	0	True				
ANR	3529414	RelationalExpression	s -> cursize < LZW_MAXBITS		3529117	0		<			
ANR	3529415	PtrMemberAccess	s -> cursize		3529117	0					
ANR	3529416	Identifier	s		3529117	0					
ANR	3529417	Identifier	cursize		3529117	1					
ANR	3529418	Identifier	LZW_MAXBITS		3529117	1					
ANR	3529419	CompoundStatement		95:46:1333:1333	3529117	1					
ANR	3529420	ExpressionStatement	s -> top_slot <<= 1	97:20:1410:1427	3529117	0	True				
ANR	3529421	AssignmentExpression	s -> top_slot <<= 1		3529117	0		<<=			
ANR	3529422	PtrMemberAccess	s -> top_slot		3529117	0					
ANR	3529423	Identifier	s		3529117	0					
ANR	3529424	Identifier	top_slot		3529117	1					
ANR	3529425	PrimaryExpression	1		3529117	1					
ANR	3529426	ExpressionStatement	s -> curmask = mask [ ++ s -> cursize ]	99:20:1450:1481	3529117	1	True				
ANR	3529427	AssignmentExpression	s -> curmask = mask [ ++ s -> cursize ]		3529117	0		=			
ANR	3529428	PtrMemberAccess	s -> curmask		3529117	0					
ANR	3529429	Identifier	s		3529117	0					
ANR	3529430	Identifier	curmask		3529117	1					
ANR	3529431	ArrayIndexing	mask [ ++ s -> cursize ]		3529117	1					
ANR	3529432	Identifier	mask		3529117	0					
ANR	3529433	UnaryExpression	++ s -> cursize		3529117	1					
ANR	3529434	IncDec	++		3529117	0					
ANR	3529435	PtrMemberAccess	s -> cursize		3529117	1					
ANR	3529436	Identifier	s		3529117	0					
ANR	3529437	Identifier	cursize		3529117	1					
ANR	3529438	Label	the_end :	109:2:1538:1545	3529117	9	True				
ANR	3529439	Identifier	the_end		3529117	0					
ANR	3529440	ExpressionStatement	s -> sp = sp	111:4:1552:1562	3529117	10	True				
ANR	3529441	AssignmentExpression	s -> sp = sp		3529117	0		=			
ANR	3529442	PtrMemberAccess	s -> sp		3529117	0					
ANR	3529443	Identifier	s		3529117	0					
ANR	3529444	Identifier	sp		3529117	1					
ANR	3529445	Identifier	sp		3529117	1					
ANR	3529446	ExpressionStatement	s -> oc = oc	113:4:1569:1579	3529117	11	True				
ANR	3529447	AssignmentExpression	s -> oc = oc		3529117	0		=			
ANR	3529448	PtrMemberAccess	s -> oc		3529117	0					
ANR	3529449	Identifier	s		3529117	0					
ANR	3529450	Identifier	oc		3529117	1					
ANR	3529451	Identifier	oc		3529117	1					
ANR	3529452	ExpressionStatement	s -> fc = fc	115:4:1586:1596	3529117	12	True				
ANR	3529453	AssignmentExpression	s -> fc = fc		3529117	0		=			
ANR	3529454	PtrMemberAccess	s -> fc		3529117	0					
ANR	3529455	Identifier	s		3529117	0					
ANR	3529456	Identifier	fc		3529117	1					
ANR	3529457	Identifier	fc		3529117	1					
ANR	3529458	ReturnStatement	return len - l ;	117:4:1603:1617	3529117	13	True				
ANR	3529459	AdditiveExpression	len - l		3529117	0		-			
ANR	3529460	Identifier	len		3529117	0					
ANR	3529461	Identifier	l		3529117	1					
ANR	3529462	ReturnType	int		3529117	1					
ANR	3529463	Identifier	ff_lzw_decode		3529117	2					
ANR	3529464	ParameterList	"LZWState * p , uint8_t * buf , int len"		3529117	3					
ANR	3529465	Parameter	LZWState * p	1:18:18:28	3529117	0	True				
ANR	3529466	ParameterType	LZWState *		3529117	0					
ANR	3529467	Identifier	p		3529117	1					
ANR	3529468	Parameter	uint8_t * buf	1:31:31:42	3529117	1	True				
ANR	3529469	ParameterType	uint8_t *		3529117	0					
ANR	3529470	Identifier	buf		3529117	1					
ANR	3529471	Parameter	int len	1:45:45:51	3529117	2	True				
ANR	3529472	ParameterType	int		3529117	0					
ANR	3529473	Identifier	len		3529117	1					
ANR	3529474	CFGEntryNode	ENTRY		3529117		True				
ANR	3529475	CFGExitNode	EXIT		3529117		True				
ANR	3529476	InfiniteForNode	true		3529117		True				
ANR	3529477	Symbol	* sp		3529117						
ANR	3529478	Symbol	s -> fc		3529117						
ANR	3529479	Symbol	s -> newcodes		3529117						
ANR	3529480	Symbol	s -> slot		3529117						
ANR	3529481	Symbol	code		3529117						
ANR	3529482	Symbol	* mask		3529117						
ANR	3529483	Symbol	s -> top_slot		3529117						
ANR	3529484	Symbol	lzw_get_code		3529117						
ANR	3529485	Symbol	s -> suffix		3529117						
ANR	3529486	Symbol	len		3529117						
ANR	3529487	Symbol	oc		3529117						
ANR	3529488	Symbol	* * s		3529117						
ANR	3529489	Symbol	sp		3529117						
ANR	3529490	Symbol	s -> end_code		3529117						
ANR	3529491	Symbol	mask		3529117						
ANR	3529492	Symbol	* s -> cursize		3529117						
ANR	3529493	Symbol	s -> sp		3529117						
ANR	3529494	Symbol	s -> prefix		3529117						
ANR	3529495	Symbol	c		3529117						
ANR	3529496	Symbol	s -> curmask		3529117						
ANR	3529497	Symbol	* sp ++		3529117						
ANR	3529498	Symbol	s -> oc		3529117						
ANR	3529499	Symbol	l		3529117						
ANR	3529500	Symbol	s -> stack		3529117						
ANR	3529501	Symbol	s -> cursize		3529117						
ANR	3529502	Symbol	* s -> suffix		3529117						
ANR	3529503	Symbol	s -> extra_slot		3529117						
ANR	3529504	Symbol	p		3529117						
ANR	3529505	Symbol	* buf ++		3529117						
ANR	3529506	Symbol	buf		3529117						
ANR	3529507	Symbol	s		3529117						
ANR	3529508	Symbol	* s -> prefix		3529117						
ANR	3529509	Symbol	s -> clear_code		3529117						
ANR	3529510	Symbol	fc		3529117						
ANR	3529511	Symbol	* s		3529117						
ANR	3529512	Symbol	* ( -- sp )		3529117						
ANR	3529513	Symbol	s -> codesize		3529117						
ANR	3529514	Symbol	* code		3529117						
ANR	3529515	Symbol	* s -> slot		3529117						
ANR	3529516	Symbol	LZW_MAXBITS		3529117						
