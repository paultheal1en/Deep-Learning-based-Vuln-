command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3110467	File	/home/p4ultr4n/workplace/ReVeal/raw_code/expr_unary_1.c								
ANR	3110468	Function	expr_unary	1:0:0:2060							
ANR	3110469	FunctionDef	expr_unary (Monitor * mon)		3110468	0					
ANR	3110470	CompoundStatement		3:0:41:2060	3110468	0					
ANR	3110471	IdentifierDeclStatement	int64_t n ;	5:4:48:57	3110468	0	True				
ANR	3110472	IdentifierDecl	n		3110468	0					
ANR	3110473	IdentifierDeclType	int64_t		3110468	0					
ANR	3110474	Identifier	n		3110468	1					
ANR	3110475	IdentifierDeclStatement	char * p ;	7:4:64:71	3110468	1	True				
ANR	3110476	IdentifierDecl	* p		3110468	0					
ANR	3110477	IdentifierDeclType	char *		3110468	0					
ANR	3110478	Identifier	p		3110468	1					
ANR	3110479	IdentifierDeclStatement	int ret ;	9:4:78:85	3110468	2	True				
ANR	3110480	IdentifierDecl	ret		3110468	0					
ANR	3110481	IdentifierDeclType	int		3110468	0					
ANR	3110482	Identifier	ret		3110468	1					
ANR	3110483	SwitchStatement	switch ( * pch )		3110468	3					
ANR	3110484	Condition	* pch	13:11:101:104	3110468	0	True				
ANR	3110485	UnaryOperationExpression	* pch		3110468	0					
ANR	3110486	UnaryOperator	*		3110468	0					
ANR	3110487	Identifier	pch		3110468	1					
ANR	3110488	CompoundStatement		11:17:65:65	3110468	1					
ANR	3110489	Label	case '+' :	15:4:114:122	3110468	0	True				
ANR	3110490	ExpressionStatement	next ( )	17:8:133:139	3110468	1	True				
ANR	3110491	CallExpression	next ( )		3110468	0					
ANR	3110492	Callee	next		3110468	0					
ANR	3110493	Identifier	next		3110468	0					
ANR	3110494	ArgumentList			3110468	1					
ANR	3110495	ExpressionStatement	n = expr_unary ( mon )	19:8:150:169	3110468	2	True				
ANR	3110496	AssignmentExpression	n = expr_unary ( mon )		3110468	0		=			
ANR	3110497	Identifier	n		3110468	0					
ANR	3110498	CallExpression	expr_unary ( mon )		3110468	1					
ANR	3110499	Callee	expr_unary		3110468	0					
ANR	3110500	Identifier	expr_unary		3110468	0					
ANR	3110501	ArgumentList	mon		3110468	1					
ANR	3110502	Argument	mon		3110468	0					
ANR	3110503	Identifier	mon		3110468	0					
ANR	3110504	BreakStatement	break ;	21:8:180:185	3110468	3	True				
ANR	3110505	Label	case '-' :	23:4:192:200	3110468	4	True				
ANR	3110506	ExpressionStatement	next ( )	25:8:211:217	3110468	5	True				
ANR	3110507	CallExpression	next ( )		3110468	0					
ANR	3110508	Callee	next		3110468	0					
ANR	3110509	Identifier	next		3110468	0					
ANR	3110510	ArgumentList			3110468	1					
ANR	3110511	ExpressionStatement	n = - expr_unary ( mon )	27:8:228:248	3110468	6	True				
ANR	3110512	AssignmentExpression	n = - expr_unary ( mon )		3110468	0		=			
ANR	3110513	Identifier	n		3110468	0					
ANR	3110514	UnaryOperationExpression	- expr_unary ( mon )		3110468	1					
ANR	3110515	UnaryOperator	-		3110468	0					
ANR	3110516	CallExpression	expr_unary ( mon )		3110468	1					
ANR	3110517	Callee	expr_unary		3110468	0					
ANR	3110518	Identifier	expr_unary		3110468	0					
ANR	3110519	ArgumentList	mon		3110468	1					
ANR	3110520	Argument	mon		3110468	0					
ANR	3110521	Identifier	mon		3110468	0					
ANR	3110522	BreakStatement	break ;	29:8:259:264	3110468	7	True				
ANR	3110523	Label	case '~' :	31:4:271:279	3110468	8	True				
ANR	3110524	ExpressionStatement	next ( )	33:8:290:296	3110468	9	True				
ANR	3110525	CallExpression	next ( )		3110468	0					
ANR	3110526	Callee	next		3110468	0					
ANR	3110527	Identifier	next		3110468	0					
ANR	3110528	ArgumentList			3110468	1					
ANR	3110529	ExpressionStatement	n = ~expr_unary ( mon )	35:8:307:327	3110468	10	True				
ANR	3110530	AssignmentExpression	n = ~expr_unary ( mon )		3110468	0		=			
ANR	3110531	Identifier	n		3110468	0					
ANR	3110532	CallExpression	~expr_unary ( mon )		3110468	1					
ANR	3110533	Callee	~expr_unary		3110468	0					
ANR	3110534	Identifier	~expr_unary		3110468	0					
ANR	3110535	ArgumentList	mon		3110468	1					
ANR	3110536	Argument	mon		3110468	0					
ANR	3110537	Identifier	mon		3110468	0					
ANR	3110538	BreakStatement	break ;	37:8:338:343	3110468	11	True				
ANR	3110539	Label	case '(' :	39:4:350:358	3110468	12	True				
ANR	3110540	ExpressionStatement	next ( )	41:8:369:375	3110468	13	True				
ANR	3110541	CallExpression	next ( )		3110468	0					
ANR	3110542	Callee	next		3110468	0					
ANR	3110543	Identifier	next		3110468	0					
ANR	3110544	ArgumentList			3110468	1					
ANR	3110545	ExpressionStatement	n = expr_sum ( mon )	43:8:386:403	3110468	14	True				
ANR	3110546	AssignmentExpression	n = expr_sum ( mon )		3110468	0		=			
ANR	3110547	Identifier	n		3110468	0					
ANR	3110548	CallExpression	expr_sum ( mon )		3110468	1					
ANR	3110549	Callee	expr_sum		3110468	0					
ANR	3110550	Identifier	expr_sum		3110468	0					
ANR	3110551	ArgumentList	mon		3110468	1					
ANR	3110552	Argument	mon		3110468	0					
ANR	3110553	Identifier	mon		3110468	0					
ANR	3110554	IfStatement	if ( * pch != ')' )		3110468	15					
ANR	3110555	Condition	* pch != ')'	45:12:418:428	3110468	0	True				
ANR	3110556	EqualityExpression	* pch != ')'		3110468	0		!=			
ANR	3110557	UnaryOperationExpression	* pch		3110468	0					
ANR	3110558	UnaryOperator	*		3110468	0					
ANR	3110559	Identifier	pch		3110468	1					
ANR	3110560	PrimaryExpression	')'		3110468	1					
ANR	3110561	CompoundStatement		43:25:389:389	3110468	1					
ANR	3110562	ExpressionStatement	"expr_error ( mon , ""')' expected"" )"	47:12:446:477	3110468	0	True				
ANR	3110563	CallExpression	"expr_error ( mon , ""')' expected"" )"		3110468	0					
ANR	3110564	Callee	expr_error		3110468	0					
ANR	3110565	Identifier	expr_error		3110468	0					
ANR	3110566	ArgumentList	mon		3110468	1					
ANR	3110567	Argument	mon		3110468	0					
ANR	3110568	Identifier	mon		3110468	0					
ANR	3110569	Argument	"""')' expected"""		3110468	1					
ANR	3110570	PrimaryExpression	"""')' expected"""		3110468	0					
ANR	3110571	ExpressionStatement	next ( )	51:8:499:505	3110468	16	True				
ANR	3110572	CallExpression	next ( )		3110468	0					
ANR	3110573	Callee	next		3110468	0					
ANR	3110574	Identifier	next		3110468	0					
ANR	3110575	ArgumentList			3110468	1					
ANR	3110576	BreakStatement	break ;	53:8:516:521	3110468	17	True				
ANR	3110577	Label	case '\\'' :	55:4:528:537	3110468	18	True				
ANR	3110578	ExpressionStatement	pch ++	57:8:548:553	3110468	19	True				
ANR	3110579	PostIncDecOperationExpression	pch ++		3110468	0					
ANR	3110580	Identifier	pch		3110468	0					
ANR	3110581	IncDec	++		3110468	1					
ANR	3110582	IfStatement	if ( * pch == '\\0' )		3110468	20					
ANR	3110583	Condition	* pch == '\\0'	59:12:568:579	3110468	0	True				
ANR	3110584	EqualityExpression	* pch == '\\0'		3110468	0		==			
ANR	3110585	UnaryOperationExpression	* pch		3110468	0					
ANR	3110586	UnaryOperator	*		3110468	0					
ANR	3110587	Identifier	pch		3110468	1					
ANR	3110588	PrimaryExpression	'\\0'		3110468	1					
ANR	3110589	ExpressionStatement	"expr_error ( mon , ""character constant expected"" )"	61:12:595:641	3110468	1	True				
ANR	3110590	CallExpression	"expr_error ( mon , ""character constant expected"" )"		3110468	0					
ANR	3110591	Callee	expr_error		3110468	0					
ANR	3110592	Identifier	expr_error		3110468	0					
ANR	3110593	ArgumentList	mon		3110468	1					
ANR	3110594	Argument	mon		3110468	0					
ANR	3110595	Identifier	mon		3110468	0					
ANR	3110596	Argument	"""character constant expected"""		3110468	1					
ANR	3110597	PrimaryExpression	"""character constant expected"""		3110468	0					
ANR	3110598	ExpressionStatement	n = * pch	63:8:652:660	3110468	21	True				
ANR	3110599	AssignmentExpression	n = * pch		3110468	0		=			
ANR	3110600	Identifier	n		3110468	0					
ANR	3110601	UnaryOperationExpression	* pch		3110468	1					
ANR	3110602	UnaryOperator	*		3110468	0					
ANR	3110603	Identifier	pch		3110468	1					
ANR	3110604	ExpressionStatement	pch ++	65:8:671:676	3110468	22	True				
ANR	3110605	PostIncDecOperationExpression	pch ++		3110468	0					
ANR	3110606	Identifier	pch		3110468	0					
ANR	3110607	IncDec	++		3110468	1					
ANR	3110608	IfStatement	if ( * pch != '\\'' )		3110468	23					
ANR	3110609	Condition	* pch != '\\''	67:12:691:702	3110468	0	True				
ANR	3110610	EqualityExpression	* pch != '\\''		3110468	0		!=			
ANR	3110611	UnaryOperationExpression	* pch		3110468	0					
ANR	3110612	UnaryOperator	*		3110468	0					
ANR	3110613	Identifier	pch		3110468	1					
ANR	3110614	PrimaryExpression	'\\''		3110468	1					
ANR	3110615	ExpressionStatement	"expr_error ( mon , ""missing terminating \\' character"" )"	69:12:718:769	3110468	1	True				
ANR	3110616	CallExpression	"expr_error ( mon , ""missing terminating \\' character"" )"		3110468	0					
ANR	3110617	Callee	expr_error		3110468	0					
ANR	3110618	Identifier	expr_error		3110468	0					
ANR	3110619	ArgumentList	mon		3110468	1					
ANR	3110620	Argument	mon		3110468	0					
ANR	3110621	Identifier	mon		3110468	0					
ANR	3110622	Argument	"""missing terminating \\' character"""		3110468	1					
ANR	3110623	PrimaryExpression	"""missing terminating \\' character"""		3110468	0					
ANR	3110624	ExpressionStatement	next ( )	71:8:780:786	3110468	24	True				
ANR	3110625	CallExpression	next ( )		3110468	0					
ANR	3110626	Callee	next		3110468	0					
ANR	3110627	Identifier	next		3110468	0					
ANR	3110628	ArgumentList			3110468	1					
ANR	3110629	BreakStatement	break ;	73:8:797:802	3110468	25	True				
ANR	3110630	Label	case '$' :	75:4:809:817	3110468	26	True				
ANR	3110631	CompoundStatement		79:12:833:850	3110468	27					
ANR	3110632	IdentifierDeclStatement	"char buf [ 128 ] , * q ;"	79:12:843:860	3110468	0	True				
ANR	3110633	IdentifierDecl	buf [ 128 ]		3110468	0					
ANR	3110634	IdentifierDeclType	char [ 128 ]		3110468	0					
ANR	3110635	Identifier	buf		3110468	1					
ANR	3110636	PrimaryExpression	128		3110468	2					
ANR	3110637	IdentifierDecl	* q		3110468	1					
ANR	3110638	IdentifierDeclType	char *		3110468	0					
ANR	3110639	Identifier	q		3110468	1					
ANR	3110640	IdentifierDeclStatement	target_long reg = 0 ;	81:12:875:892	3110468	1	True				
ANR	3110641	IdentifierDecl	reg = 0		3110468	0					
ANR	3110642	IdentifierDeclType	target_long		3110468	0					
ANR	3110643	Identifier	reg		3110468	1					
ANR	3110644	AssignmentExpression	reg = 0		3110468	2		=			
ANR	3110645	Identifier	reg		3110468	0					
ANR	3110646	PrimaryExpression	0		3110468	1					
ANR	3110647	ExpressionStatement	pch ++	85:12:909:914	3110468	2	True				
ANR	3110648	PostIncDecOperationExpression	pch ++		3110468	0					
ANR	3110649	Identifier	pch		3110468	0					
ANR	3110650	IncDec	++		3110468	1					
ANR	3110651	ExpressionStatement	q = buf	87:12:929:936	3110468	3	True				
ANR	3110652	AssignmentExpression	q = buf		3110468	0		=			
ANR	3110653	Identifier	q		3110468	0					
ANR	3110654	Identifier	buf		3110468	1					
ANR	3110655	WhileStatement	while ( ( * pch >= 'a' && * pch <= 'z' ) || ( * pch >= 'A' && * pch <= 'Z' ) || ( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.' )		3110468	4					
ANR	3110656	Condition	( * pch >= 'a' && * pch <= 'z' ) || ( * pch >= 'A' && * pch <= 'Z' ) || ( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.'	89:19:958:1139	3110468	0	True				
ANR	3110657	OrExpression	( * pch >= 'a' && * pch <= 'z' ) || ( * pch >= 'A' && * pch <= 'Z' ) || ( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.'		3110468	0		||			
ANR	3110658	AndExpression	* pch >= 'a' && * pch <= 'z'		3110468	0		&&			
ANR	3110659	RelationalExpression	* pch >= 'a'		3110468	0		>=			
ANR	3110660	UnaryOperationExpression	* pch		3110468	0					
ANR	3110661	UnaryOperator	*		3110468	0					
ANR	3110662	Identifier	pch		3110468	1					
ANR	3110663	PrimaryExpression	'a'		3110468	1					
ANR	3110664	RelationalExpression	* pch <= 'z'		3110468	1		<=			
ANR	3110665	UnaryOperationExpression	* pch		3110468	0					
ANR	3110666	UnaryOperator	*		3110468	0					
ANR	3110667	Identifier	pch		3110468	1					
ANR	3110668	PrimaryExpression	'z'		3110468	1					
ANR	3110669	OrExpression	( * pch >= 'A' && * pch <= 'Z' ) || ( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.'		3110468	1		||			
ANR	3110670	AndExpression	* pch >= 'A' && * pch <= 'Z'		3110468	0		&&			
ANR	3110671	RelationalExpression	* pch >= 'A'		3110468	0		>=			
ANR	3110672	UnaryOperationExpression	* pch		3110468	0					
ANR	3110673	UnaryOperator	*		3110468	0					
ANR	3110674	Identifier	pch		3110468	1					
ANR	3110675	PrimaryExpression	'A'		3110468	1					
ANR	3110676	RelationalExpression	* pch <= 'Z'		3110468	1		<=			
ANR	3110677	UnaryOperationExpression	* pch		3110468	0					
ANR	3110678	UnaryOperator	*		3110468	0					
ANR	3110679	Identifier	pch		3110468	1					
ANR	3110680	PrimaryExpression	'Z'		3110468	1					
ANR	3110681	OrExpression	( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.'		3110468	1		||			
ANR	3110682	AndExpression	* pch >= '0' && * pch <= '9'		3110468	0		&&			
ANR	3110683	RelationalExpression	* pch >= '0'		3110468	0		>=			
ANR	3110684	UnaryOperationExpression	* pch		3110468	0					
ANR	3110685	UnaryOperator	*		3110468	0					
ANR	3110686	Identifier	pch		3110468	1					
ANR	3110687	PrimaryExpression	'0'		3110468	1					
ANR	3110688	RelationalExpression	* pch <= '9'		3110468	1		<=			
ANR	3110689	UnaryOperationExpression	* pch		3110468	0					
ANR	3110690	UnaryOperator	*		3110468	0					
ANR	3110691	Identifier	pch		3110468	1					
ANR	3110692	PrimaryExpression	'9'		3110468	1					
ANR	3110693	OrExpression	* pch == '_' || * pch == '.'		3110468	1		||			
ANR	3110694	EqualityExpression	* pch == '_'		3110468	0		==			
ANR	3110695	UnaryOperationExpression	* pch		3110468	0					
ANR	3110696	UnaryOperator	*		3110468	0					
ANR	3110697	Identifier	pch		3110468	1					
ANR	3110698	PrimaryExpression	'_'		3110468	1					
ANR	3110699	EqualityExpression	* pch == '.'		3110468	1		==			
ANR	3110700	UnaryOperationExpression	* pch		3110468	0					
ANR	3110701	UnaryOperator	*		3110468	0					
ANR	3110702	Identifier	pch		3110468	1					
ANR	3110703	PrimaryExpression	'.'		3110468	1					
ANR	3110704	CompoundStatement		93:47:1100:1100	3110468	1					
ANR	3110705	IfStatement	if ( ( q - buf ) < sizeof ( buf ) - 1 )		3110468	0					
ANR	3110706	Condition	( q - buf ) < sizeof ( buf ) - 1	97:20:1165:1191	3110468	0	True				
ANR	3110707	RelationalExpression	( q - buf ) < sizeof ( buf ) - 1		3110468	0		<			
ANR	3110708	AdditiveExpression	q - buf		3110468	0		-			
ANR	3110709	Identifier	q		3110468	0					
ANR	3110710	Identifier	buf		3110468	1					
ANR	3110711	AdditiveExpression	sizeof ( buf ) - 1		3110468	1		-			
ANR	3110712	SizeofExpression	sizeof ( buf )		3110468	0					
ANR	3110713	Sizeof	sizeof		3110468	0					
ANR	3110714	SizeofOperand	buf		3110468	1					
ANR	3110715	PrimaryExpression	1		3110468	1					
ANR	3110716	ExpressionStatement	* q ++ = * pch	99:20:1215:1226	3110468	1	True				
ANR	3110717	AssignmentExpression	* q ++ = * pch		3110468	0		=			
ANR	3110718	UnaryOperationExpression	* q ++		3110468	0					
ANR	3110719	UnaryOperator	*		3110468	0					
ANR	3110720	PostIncDecOperationExpression	q ++		3110468	1					
ANR	3110721	Identifier	q		3110468	0					
ANR	3110722	IncDec	++		3110468	1					
ANR	3110723	UnaryOperationExpression	* pch		3110468	1					
ANR	3110724	UnaryOperator	*		3110468	0					
ANR	3110725	Identifier	pch		3110468	1					
ANR	3110726	ExpressionStatement	pch ++	101:16:1245:1250	3110468	1	True				
ANR	3110727	PostIncDecOperationExpression	pch ++		3110468	0					
ANR	3110728	Identifier	pch		3110468	0					
ANR	3110729	IncDec	++		3110468	1					
ANR	3110730	WhileStatement	while ( qemu_isspace ( * pch ) )		3110468	5					
ANR	3110731	Condition	qemu_isspace ( * pch )	105:19:1287:1304	3110468	0	True				
ANR	3110732	CallExpression	qemu_isspace ( * pch )		3110468	0					
ANR	3110733	Callee	qemu_isspace		3110468	0					
ANR	3110734	Identifier	qemu_isspace		3110468	0					
ANR	3110735	ArgumentList	* pch		3110468	1					
ANR	3110736	Argument	* pch		3110468	0					
ANR	3110737	UnaryOperationExpression	* pch		3110468	0					
ANR	3110738	UnaryOperator	*		3110468	0					
ANR	3110739	Identifier	pch		3110468	1					
ANR	3110740	ExpressionStatement	pch ++	107:16:1324:1329	3110468	1	True				
ANR	3110741	PostIncDecOperationExpression	pch ++		3110468	0					
ANR	3110742	Identifier	pch		3110468	0					
ANR	3110743	IncDec	++		3110468	1					
ANR	3110744	ExpressionStatement	* q = 0	109:12:1344:1350	3110468	6	True				
ANR	3110745	AssignmentExpression	* q = 0		3110468	0		=			
ANR	3110746	UnaryOperationExpression	* q		3110468	0					
ANR	3110747	UnaryOperator	*		3110468	0					
ANR	3110748	Identifier	q		3110468	1					
ANR	3110749	PrimaryExpression	0		3110468	1					
ANR	3110750	ExpressionStatement	"ret = get_monitor_def ( & reg , buf )"	111:12:1365:1397	3110468	7	True				
ANR	3110751	AssignmentExpression	"ret = get_monitor_def ( & reg , buf )"		3110468	0		=			
ANR	3110752	Identifier	ret		3110468	0					
ANR	3110753	CallExpression	"get_monitor_def ( & reg , buf )"		3110468	1					
ANR	3110754	Callee	get_monitor_def		3110468	0					
ANR	3110755	Identifier	get_monitor_def		3110468	0					
ANR	3110756	ArgumentList	& reg		3110468	1					
ANR	3110757	Argument	& reg		3110468	0					
ANR	3110758	UnaryOperationExpression	& reg		3110468	0					
ANR	3110759	UnaryOperator	&		3110468	0					
ANR	3110760	Identifier	reg		3110468	1					
ANR	3110761	Argument	buf		3110468	1					
ANR	3110762	Identifier	buf		3110468	0					
ANR	3110763	IfStatement	if ( ret == - 1 )		3110468	8					
ANR	3110764	Condition	ret == - 1	113:16:1416:1424	3110468	0	True				
ANR	3110765	EqualityExpression	ret == - 1		3110468	0		==			
ANR	3110766	Identifier	ret		3110468	0					
ANR	3110767	UnaryOperationExpression	- 1		3110468	1					
ANR	3110768	UnaryOperator	-		3110468	0					
ANR	3110769	PrimaryExpression	1		3110468	1					
ANR	3110770	ExpressionStatement	"expr_error ( mon , ""unknown register"" )"	115:16:1444:1479	3110468	1	True				
ANR	3110771	CallExpression	"expr_error ( mon , ""unknown register"" )"		3110468	0					
ANR	3110772	Callee	expr_error		3110468	0					
ANR	3110773	Identifier	expr_error		3110468	0					
ANR	3110774	ArgumentList	mon		3110468	1					
ANR	3110775	Argument	mon		3110468	0					
ANR	3110776	Identifier	mon		3110468	0					
ANR	3110777	Argument	"""unknown register"""		3110468	1					
ANR	3110778	PrimaryExpression	"""unknown register"""		3110468	0					
ANR	3110779	ElseStatement	else		3110468	0					
ANR	3110780	IfStatement	if ( ret == - 2 )		3110468	0					
ANR	3110781	Condition	ret == - 2	117:21:1503:1511	3110468	0	True				
ANR	3110782	EqualityExpression	ret == - 2		3110468	0		==			
ANR	3110783	Identifier	ret		3110468	0					
ANR	3110784	UnaryOperationExpression	- 2		3110468	1					
ANR	3110785	UnaryOperator	-		3110468	0					
ANR	3110786	PrimaryExpression	2		3110468	1					
ANR	3110787	ExpressionStatement	"expr_error ( mon , ""no cpu defined"" )"	119:16:1531:1564	3110468	1	True				
ANR	3110788	CallExpression	"expr_error ( mon , ""no cpu defined"" )"		3110468	0					
ANR	3110789	Callee	expr_error		3110468	0					
ANR	3110790	Identifier	expr_error		3110468	0					
ANR	3110791	ArgumentList	mon		3110468	1					
ANR	3110792	Argument	mon		3110468	0					
ANR	3110793	Identifier	mon		3110468	0					
ANR	3110794	Argument	"""no cpu defined"""		3110468	1					
ANR	3110795	PrimaryExpression	"""no cpu defined"""		3110468	0					
ANR	3110796	ExpressionStatement	n = reg	121:12:1579:1586	3110468	9	True				
ANR	3110797	AssignmentExpression	n = reg		3110468	0		=			
ANR	3110798	Identifier	n		3110468	0					
ANR	3110799	Identifier	reg		3110468	1					
ANR	3110800	BreakStatement	break ;	125:8:1608:1613	3110468	28	True				
ANR	3110801	Label	case '\\0' :	127:4:1620:1629	3110468	29	True				
ANR	3110802	ExpressionStatement	"expr_error ( mon , ""unexpected end of expression"" )"	129:8:1640:1687	3110468	30	True				
ANR	3110803	CallExpression	"expr_error ( mon , ""unexpected end of expression"" )"		3110468	0					
ANR	3110804	Callee	expr_error		3110468	0					
ANR	3110805	Identifier	expr_error		3110468	0					
ANR	3110806	ArgumentList	mon		3110468	1					
ANR	3110807	Argument	mon		3110468	0					
ANR	3110808	Identifier	mon		3110468	0					
ANR	3110809	Argument	"""unexpected end of expression"""		3110468	1					
ANR	3110810	PrimaryExpression	"""unexpected end of expression"""		3110468	0					
ANR	3110811	ExpressionStatement	n = 0	131:8:1698:1703	3110468	31	True				
ANR	3110812	AssignmentExpression	n = 0		3110468	0		=			
ANR	3110813	Identifier	n		3110468	0					
ANR	3110814	PrimaryExpression	0		3110468	1					
ANR	3110815	BreakStatement	break ;	133:8:1714:1719	3110468	32	True				
ANR	3110816	Label	default :	135:4:1726:1733	3110468	33	True				
ANR	3110817	Identifier	default		3110468	0					
ANR	3110818	ExpressionStatement	"n = strtoull ( pch , & p , 0 )"	139:8:1776:1800	3110468	34	True				
ANR	3110819	AssignmentExpression	"n = strtoull ( pch , & p , 0 )"		3110468	0		=			
ANR	3110820	Identifier	n		3110468	0					
ANR	3110821	CallExpression	"strtoull ( pch , & p , 0 )"		3110468	1					
ANR	3110822	Callee	strtoull		3110468	0					
ANR	3110823	Identifier	strtoull		3110468	0					
ANR	3110824	ArgumentList	pch		3110468	1					
ANR	3110825	Argument	pch		3110468	0					
ANR	3110826	Identifier	pch		3110468	0					
ANR	3110827	Argument	& p		3110468	1					
ANR	3110828	UnaryOperationExpression	& p		3110468	0					
ANR	3110829	UnaryOperator	&		3110468	0					
ANR	3110830	Identifier	p		3110468	1					
ANR	3110831	Argument	0		3110468	2					
ANR	3110832	PrimaryExpression	0		3110468	0					
ANR	3110833	IfStatement	if ( pch == p )		3110468	35					
ANR	3110834	Condition	pch == p	147:12:1864:1871	3110468	0	True				
ANR	3110835	EqualityExpression	pch == p		3110468	0		==			
ANR	3110836	Identifier	pch		3110468	0					
ANR	3110837	Identifier	p		3110468	1					
ANR	3110838	CompoundStatement		145:22:1832:1832	3110468	1					
ANR	3110839	ExpressionStatement	"expr_error ( mon , ""invalid char in expression"" )"	149:12:1889:1934	3110468	0	True				
ANR	3110840	CallExpression	"expr_error ( mon , ""invalid char in expression"" )"		3110468	0					
ANR	3110841	Callee	expr_error		3110468	0					
ANR	3110842	Identifier	expr_error		3110468	0					
ANR	3110843	ArgumentList	mon		3110468	1					
ANR	3110844	Argument	mon		3110468	0					
ANR	3110845	Identifier	mon		3110468	0					
ANR	3110846	Argument	"""invalid char in expression"""		3110468	1					
ANR	3110847	PrimaryExpression	"""invalid char in expression"""		3110468	0					
ANR	3110848	ExpressionStatement	pch = p	153:8:1956:1963	3110468	36	True				
ANR	3110849	AssignmentExpression	pch = p		3110468	0		=			
ANR	3110850	Identifier	pch		3110468	0					
ANR	3110851	Identifier	p		3110468	1					
ANR	3110852	WhileStatement	while ( qemu_isspace ( * pch ) )		3110468	37					
ANR	3110853	Condition	qemu_isspace ( * pch )	155:15:1981:1998	3110468	0	True				
ANR	3110854	CallExpression	qemu_isspace ( * pch )		3110468	0					
ANR	3110855	Callee	qemu_isspace		3110468	0					
ANR	3110856	Identifier	qemu_isspace		3110468	0					
ANR	3110857	ArgumentList	* pch		3110468	1					
ANR	3110858	Argument	* pch		3110468	0					
ANR	3110859	UnaryOperationExpression	* pch		3110468	0					
ANR	3110860	UnaryOperator	*		3110468	0					
ANR	3110861	Identifier	pch		3110468	1					
ANR	3110862	ExpressionStatement	pch ++	157:12:2014:2019	3110468	1	True				
ANR	3110863	PostIncDecOperationExpression	pch ++		3110468	0					
ANR	3110864	Identifier	pch		3110468	0					
ANR	3110865	IncDec	++		3110468	1					
ANR	3110866	BreakStatement	break ;	159:8:2030:2035	3110468	38	True				
ANR	3110867	ReturnStatement	return n ;	163:4:2049:2057	3110468	4	True				
ANR	3110868	Identifier	n		3110468	0					
ANR	3110869	ReturnType	static int64_t		3110468	1					
ANR	3110870	Identifier	expr_unary		3110468	2					
ANR	3110871	ParameterList	Monitor * mon		3110468	3					
ANR	3110872	Parameter	Monitor * mon	1:26:26:37	3110468	0	True				
ANR	3110873	ParameterType	Monitor *		3110468	0					
ANR	3110874	Identifier	mon		3110468	1					
ANR	3110875	CFGEntryNode	ENTRY		3110468		True				
ANR	3110876	CFGExitNode	EXIT		3110468		True				
ANR	3110877	Symbol	ret		3110468						
ANR	3110878	Symbol	* q ++		3110468						
ANR	3110879	Symbol	get_monitor_def		3110468						
ANR	3110880	Symbol	~expr_unary		3110468						
ANR	3110881	Symbol	mon		3110468						
ANR	3110882	Symbol	qemu_isspace		3110468						
ANR	3110883	Symbol	n		3110468						
ANR	3110884	Symbol	p		3110468						
ANR	3110885	Symbol	strtoull		3110468						
ANR	3110886	Symbol	q		3110468						
ANR	3110887	Symbol	buf		3110468						
ANR	3110888	Symbol	pch		3110468						
ANR	3110889	Symbol	expr_sum		3110468						
ANR	3110890	Symbol	reg		3110468						
ANR	3110891	Symbol	& p		3110468						
ANR	3110892	Symbol	* q		3110468						
ANR	3110893	Symbol	expr_unary		3110468						
ANR	3110894	Symbol	& reg		3110468						
ANR	3110895	Symbol	* pch		3110468						
