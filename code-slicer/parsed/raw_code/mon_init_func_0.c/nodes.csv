command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5558639	File	/home/p4ultr4n/workplace/ReVeal/raw_code/mon_init_func_0.c								
ANR	5558640	Function	mon_init_func	1:0:0:995							
ANR	5558641	FunctionDef	"mon_init_func (void * opaque , QemuOpts * opts , Error * * errp)"		5558640	0					
ANR	5558642	CompoundStatement		3:0:70:995	5558640	0					
ANR	5558643	IdentifierDeclStatement	CharDriverState * chr ;	5:4:77:97	5558640	0	True				
ANR	5558644	IdentifierDecl	* chr		5558640	0					
ANR	5558645	IdentifierDeclType	CharDriverState *		5558640	0					
ANR	5558646	Identifier	chr		5558640	1					
ANR	5558647	IdentifierDeclStatement	const char * chardev ;	7:4:104:123	5558640	1	True				
ANR	5558648	IdentifierDecl	* chardev		5558640	0					
ANR	5558649	IdentifierDeclType	const char *		5558640	0					
ANR	5558650	Identifier	chardev		5558640	1					
ANR	5558651	IdentifierDeclStatement	const char * mode ;	9:4:130:146	5558640	2	True				
ANR	5558652	IdentifierDecl	* mode		5558640	0					
ANR	5558653	IdentifierDeclType	const char *		5558640	0					
ANR	5558654	Identifier	mode		5558640	1					
ANR	5558655	IdentifierDeclStatement	int flags ;	11:4:153:162	5558640	3	True				
ANR	5558656	IdentifierDecl	flags		5558640	0					
ANR	5558657	IdentifierDeclType	int		5558640	0					
ANR	5558658	Identifier	flags		5558640	1					
ANR	5558659	ExpressionStatement	"mode = qemu_opt_get ( opts , ""mode"" )"	15:4:171:204	5558640	4	True				
ANR	5558660	AssignmentExpression	"mode = qemu_opt_get ( opts , ""mode"" )"		5558640	0		=			
ANR	5558661	Identifier	mode		5558640	0					
ANR	5558662	CallExpression	"qemu_opt_get ( opts , ""mode"" )"		5558640	1					
ANR	5558663	Callee	qemu_opt_get		5558640	0					
ANR	5558664	Identifier	qemu_opt_get		5558640	0					
ANR	5558665	ArgumentList	opts		5558640	1					
ANR	5558666	Argument	opts		5558640	0					
ANR	5558667	Identifier	opts		5558640	0					
ANR	5558668	Argument	"""mode"""		5558640	1					
ANR	5558669	PrimaryExpression	"""mode"""		5558640	0					
ANR	5558670	IfStatement	if ( mode == NULL )		5558640	5					
ANR	5558671	Condition	mode == NULL	17:8:215:226	5558640	0	True				
ANR	5558672	EqualityExpression	mode == NULL		5558640	0		==			
ANR	5558673	Identifier	mode		5558640	0					
ANR	5558674	Identifier	NULL		5558640	1					
ANR	5558675	CompoundStatement		15:22:158:158	5558640	1					
ANR	5558676	ExpressionStatement	"mode = ""readline"""	19:8:240:257	5558640	0	True				
ANR	5558677	AssignmentExpression	"mode = ""readline"""		5558640	0		=			
ANR	5558678	Identifier	mode		5558640	0					
ANR	5558679	PrimaryExpression	"""readline"""		5558640	1					
ANR	5558680	IfStatement	"if ( strcmp ( mode , ""readline"" ) == 0 )"		5558640	6					
ANR	5558681	Condition	"strcmp ( mode , ""readline"" ) == 0"	23:8:275:303	5558640	0	True				
ANR	5558682	EqualityExpression	"strcmp ( mode , ""readline"" ) == 0"		5558640	0		==			
ANR	5558683	CallExpression	"strcmp ( mode , ""readline"" )"		5558640	0					
ANR	5558684	Callee	strcmp		5558640	0					
ANR	5558685	Identifier	strcmp		5558640	0					
ANR	5558686	ArgumentList	mode		5558640	1					
ANR	5558687	Argument	mode		5558640	0					
ANR	5558688	Identifier	mode		5558640	0					
ANR	5558689	Argument	"""readline"""		5558640	1					
ANR	5558690	PrimaryExpression	"""readline"""		5558640	0					
ANR	5558691	PrimaryExpression	0		5558640	1					
ANR	5558692	CompoundStatement		21:39:235:235	5558640	1					
ANR	5558693	ExpressionStatement	flags = MONITOR_USE_READLINE	25:8:317:345	5558640	0	True				
ANR	5558694	AssignmentExpression	flags = MONITOR_USE_READLINE		5558640	0		=			
ANR	5558695	Identifier	flags		5558640	0					
ANR	5558696	Identifier	MONITOR_USE_READLINE		5558640	1					
ANR	5558697	ElseStatement	else		5558640	0					
ANR	5558698	IfStatement	"if ( strcmp ( mode , ""control"" ) == 0 )"		5558640	0					
ANR	5558699	Condition	"strcmp ( mode , ""control"" ) == 0"	27:15:363:390	5558640	0	True				
ANR	5558700	EqualityExpression	"strcmp ( mode , ""control"" ) == 0"		5558640	0		==			
ANR	5558701	CallExpression	"strcmp ( mode , ""control"" )"		5558640	0					
ANR	5558702	Callee	strcmp		5558640	0					
ANR	5558703	Identifier	strcmp		5558640	0					
ANR	5558704	ArgumentList	mode		5558640	1					
ANR	5558705	Argument	mode		5558640	0					
ANR	5558706	Identifier	mode		5558640	0					
ANR	5558707	Argument	"""control"""		5558640	1					
ANR	5558708	PrimaryExpression	"""control"""		5558640	0					
ANR	5558709	PrimaryExpression	0		5558640	1					
ANR	5558710	CompoundStatement		25:45:322:322	5558640	1					
ANR	5558711	ExpressionStatement	flags = MONITOR_USE_CONTROL	29:8:404:431	5558640	0	True				
ANR	5558712	AssignmentExpression	flags = MONITOR_USE_CONTROL		5558640	0		=			
ANR	5558713	Identifier	flags		5558640	0					
ANR	5558714	Identifier	MONITOR_USE_CONTROL		5558640	1					
ANR	5558715	ElseStatement	else		5558640	0					
ANR	5558716	CompoundStatement		29:11:374:374	5558640	0					
ANR	5558717	ExpressionStatement	"fprintf ( stderr , ""unknown monitor mode \\""%s\\""\\n"" , mode )"	33:8:456:510	5558640	0	True				
ANR	5558718	CallExpression	"fprintf ( stderr , ""unknown monitor mode \\""%s\\""\\n"" , mode )"		5558640	0					
ANR	5558719	Callee	fprintf		5558640	0					
ANR	5558720	Identifier	fprintf		5558640	0					
ANR	5558721	ArgumentList	stderr		5558640	1					
ANR	5558722	Argument	stderr		5558640	0					
ANR	5558723	Identifier	stderr		5558640	0					
ANR	5558724	Argument	"""unknown monitor mode \\""%s\\""\\n"""		5558640	1					
ANR	5558725	PrimaryExpression	"""unknown monitor mode \\""%s\\""\\n"""		5558640	0					
ANR	5558726	Argument	mode		5558640	2					
ANR	5558727	Identifier	mode		5558640	0					
ANR	5558728	ExpressionStatement	exit ( 1 )	35:8:521:528	5558640	1	True				
ANR	5558729	CallExpression	exit ( 1 )		5558640	0					
ANR	5558730	Callee	exit		5558640	0					
ANR	5558731	Identifier	exit		5558640	0					
ANR	5558732	ArgumentList	1		5558640	1					
ANR	5558733	Argument	1		5558640	0					
ANR	5558734	PrimaryExpression	1		5558640	0					
ANR	5558735	IfStatement	"if ( qemu_opt_get_bool ( opts , ""pretty"" , 0 ) )"		5558640	7					
ANR	5558736	Condition	"qemu_opt_get_bool ( opts , ""pretty"" , 0 )"	41:8:548:583	5558640	0	True				
ANR	5558737	CallExpression	"qemu_opt_get_bool ( opts , ""pretty"" , 0 )"		5558640	0					
ANR	5558738	Callee	qemu_opt_get_bool		5558640	0					
ANR	5558739	Identifier	qemu_opt_get_bool		5558640	0					
ANR	5558740	ArgumentList	opts		5558640	1					
ANR	5558741	Argument	opts		5558640	0					
ANR	5558742	Identifier	opts		5558640	0					
ANR	5558743	Argument	"""pretty"""		5558640	1					
ANR	5558744	PrimaryExpression	"""pretty"""		5558640	0					
ANR	5558745	Argument	0		5558640	2					
ANR	5558746	PrimaryExpression	0		5558640	0					
ANR	5558747	ExpressionStatement	flags |= MONITOR_USE_PRETTY	43:8:595:622	5558640	1	True				
ANR	5558748	AssignmentExpression	flags |= MONITOR_USE_PRETTY		5558640	0		|=			
ANR	5558749	Identifier	flags		5558640	0					
ANR	5558750	Identifier	MONITOR_USE_PRETTY		5558640	1					
ANR	5558751	IfStatement	"if ( qemu_opt_get_bool ( opts , ""default"" , 0 ) )"		5558640	8					
ANR	5558752	Condition	"qemu_opt_get_bool ( opts , ""default"" , 0 )"	47:8:635:671	5558640	0	True				
ANR	5558753	CallExpression	"qemu_opt_get_bool ( opts , ""default"" , 0 )"		5558640	0					
ANR	5558754	Callee	qemu_opt_get_bool		5558640	0					
ANR	5558755	Identifier	qemu_opt_get_bool		5558640	0					
ANR	5558756	ArgumentList	opts		5558640	1					
ANR	5558757	Argument	opts		5558640	0					
ANR	5558758	Identifier	opts		5558640	0					
ANR	5558759	Argument	"""default"""		5558640	1					
ANR	5558760	PrimaryExpression	"""default"""		5558640	0					
ANR	5558761	Argument	0		5558640	2					
ANR	5558762	PrimaryExpression	0		5558640	0					
ANR	5558763	ExpressionStatement	flags |= MONITOR_IS_DEFAULT	49:8:683:710	5558640	1	True				
ANR	5558764	AssignmentExpression	flags |= MONITOR_IS_DEFAULT		5558640	0		|=			
ANR	5558765	Identifier	flags		5558640	0					
ANR	5558766	Identifier	MONITOR_IS_DEFAULT		5558640	1					
ANR	5558767	ExpressionStatement	"chardev = qemu_opt_get ( opts , ""chardev"" )"	53:4:719:758	5558640	9	True				
ANR	5558768	AssignmentExpression	"chardev = qemu_opt_get ( opts , ""chardev"" )"		5558640	0		=			
ANR	5558769	Identifier	chardev		5558640	0					
ANR	5558770	CallExpression	"qemu_opt_get ( opts , ""chardev"" )"		5558640	1					
ANR	5558771	Callee	qemu_opt_get		5558640	0					
ANR	5558772	Identifier	qemu_opt_get		5558640	0					
ANR	5558773	ArgumentList	opts		5558640	1					
ANR	5558774	Argument	opts		5558640	0					
ANR	5558775	Identifier	opts		5558640	0					
ANR	5558776	Argument	"""chardev"""		5558640	1					
ANR	5558777	PrimaryExpression	"""chardev"""		5558640	0					
ANR	5558778	ExpressionStatement	chr = qemu_chr_find ( chardev )	55:4:765:793	5558640	10	True				
ANR	5558779	AssignmentExpression	chr = qemu_chr_find ( chardev )		5558640	0		=			
ANR	5558780	Identifier	chr		5558640	0					
ANR	5558781	CallExpression	qemu_chr_find ( chardev )		5558640	1					
ANR	5558782	Callee	qemu_chr_find		5558640	0					
ANR	5558783	Identifier	qemu_chr_find		5558640	0					
ANR	5558784	ArgumentList	chardev		5558640	1					
ANR	5558785	Argument	chardev		5558640	0					
ANR	5558786	Identifier	chardev		5558640	0					
ANR	5558787	IfStatement	if ( chr == NULL )		5558640	11					
ANR	5558788	Condition	chr == NULL	57:8:804:814	5558640	0	True				
ANR	5558789	EqualityExpression	chr == NULL		5558640	0		==			
ANR	5558790	Identifier	chr		5558640	0					
ANR	5558791	Identifier	NULL		5558640	1					
ANR	5558792	CompoundStatement		55:21:746:746	5558640	1					
ANR	5558793	ExpressionStatement	"fprintf ( stderr , ""chardev \\""%s\\"" not found\\n"" , chardev )"	59:8:828:882	5558640	0	True				
ANR	5558794	CallExpression	"fprintf ( stderr , ""chardev \\""%s\\"" not found\\n"" , chardev )"		5558640	0					
ANR	5558795	Callee	fprintf		5558640	0					
ANR	5558796	Identifier	fprintf		5558640	0					
ANR	5558797	ArgumentList	stderr		5558640	1					
ANR	5558798	Argument	stderr		5558640	0					
ANR	5558799	Identifier	stderr		5558640	0					
ANR	5558800	Argument	"""chardev \\""%s\\"" not found\\n"""		5558640	1					
ANR	5558801	PrimaryExpression	"""chardev \\""%s\\"" not found\\n"""		5558640	0					
ANR	5558802	Argument	chardev		5558640	2					
ANR	5558803	Identifier	chardev		5558640	0					
ANR	5558804	ExpressionStatement	exit ( 1 )	61:8:893:900	5558640	1	True				
ANR	5558805	CallExpression	exit ( 1 )		5558640	0					
ANR	5558806	Callee	exit		5558640	0					
ANR	5558807	Identifier	exit		5558640	0					
ANR	5558808	ArgumentList	1		5558640	1					
ANR	5558809	Argument	1		5558640	0					
ANR	5558810	PrimaryExpression	1		5558640	0					
ANR	5558811	ExpressionStatement	qemu_chr_fe_claim_no_fail ( chr )	67:4:916:946	5558640	12	True				
ANR	5558812	CallExpression	qemu_chr_fe_claim_no_fail ( chr )		5558640	0					
ANR	5558813	Callee	qemu_chr_fe_claim_no_fail		5558640	0					
ANR	5558814	Identifier	qemu_chr_fe_claim_no_fail		5558640	0					
ANR	5558815	ArgumentList	chr		5558640	1					
ANR	5558816	Argument	chr		5558640	0					
ANR	5558817	Identifier	chr		5558640	0					
ANR	5558818	ExpressionStatement	"monitor_init ( chr , flags )"	69:4:953:977	5558640	13	True				
ANR	5558819	CallExpression	"monitor_init ( chr , flags )"		5558640	0					
ANR	5558820	Callee	monitor_init		5558640	0					
ANR	5558821	Identifier	monitor_init		5558640	0					
ANR	5558822	ArgumentList	chr		5558640	1					
ANR	5558823	Argument	chr		5558640	0					
ANR	5558824	Identifier	chr		5558640	0					
ANR	5558825	Argument	flags		5558640	1					
ANR	5558826	Identifier	flags		5558640	0					
ANR	5558827	ReturnStatement	return 0 ;	71:4:984:992	5558640	14	True				
ANR	5558828	PrimaryExpression	0		5558640	0					
ANR	5558829	ReturnType	static int		5558640	1					
ANR	5558830	Identifier	mon_init_func		5558640	2					
ANR	5558831	ParameterList	"void * opaque , QemuOpts * opts , Error * * errp"		5558640	3					
ANR	5558832	Parameter	void * opaque	1:25:25:36	5558640	0	True				
ANR	5558833	ParameterType	void *		5558640	0					
ANR	5558834	Identifier	opaque		5558640	1					
ANR	5558835	Parameter	QemuOpts * opts	1:39:39:52	5558640	1	True				
ANR	5558836	ParameterType	QemuOpts *		5558640	0					
ANR	5558837	Identifier	opts		5558640	1					
ANR	5558838	Parameter	Error * * errp	1:55:55:66	5558640	2	True				
ANR	5558839	ParameterType	Error * *		5558640	0					
ANR	5558840	Identifier	errp		5558640	1					
ANR	5558841	CFGEntryNode	ENTRY		5558640		True				
ANR	5558842	CFGExitNode	EXIT		5558640		True				
ANR	5558843	Symbol	strcmp		5558640						
ANR	5558844	Symbol	opaque		5558640						
ANR	5558845	Symbol	NULL		5558640						
ANR	5558846	Symbol	errp		5558640						
ANR	5558847	Symbol	qemu_opt_get		5558640						
ANR	5558848	Symbol	flags		5558640						
ANR	5558849	Symbol	MONITOR_USE_READLINE		5558640						
ANR	5558850	Symbol	MONITOR_IS_DEFAULT		5558640						
ANR	5558851	Symbol	chr		5558640						
ANR	5558852	Symbol	stderr		5558640						
ANR	5558853	Symbol	mode		5558640						
ANR	5558854	Symbol	chardev		5558640						
ANR	5558855	Symbol	opts		5558640						
ANR	5558856	Symbol	MONITOR_USE_CONTROL		5558640						
ANR	5558857	Symbol	MONITOR_USE_PRETTY		5558640						
ANR	5558858	Symbol	qemu_opt_get_bool		5558640						
ANR	5558859	Symbol	qemu_chr_find		5558640						
