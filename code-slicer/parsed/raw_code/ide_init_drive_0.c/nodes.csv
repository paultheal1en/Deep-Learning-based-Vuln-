command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4801047	File	/home/p4ultr4n/workplace/ReVeal/raw_code/ide_init_drive_0.c								
ANR	4801048	Function	ide_init_drive	1:0:0:2174							
ANR	4801049	FunctionDef	"ide_init_drive (IDEState * s , BlockBackend * blk , IDEDriveKind kind , const char * version , const char * serial , const char * model , uint64_t wwn , uint32_t cylinders , uint32_t heads , uint32_t secs , int chs_trans)"		4801048	0					
ANR	4801050	CompoundStatement		11:0:291:2174	4801048	0					
ANR	4801051	IdentifierDeclStatement	uint64_t nb_sectors ;	13:4:298:317	4801048	0	True				
ANR	4801052	IdentifierDecl	nb_sectors		4801048	0					
ANR	4801053	IdentifierDeclType	uint64_t		4801048	0					
ANR	4801054	Identifier	nb_sectors		4801048	1					
ANR	4801055	ExpressionStatement	s -> blk = blk	17:4:326:338	4801048	1	True				
ANR	4801056	AssignmentExpression	s -> blk = blk		4801048	0		=			
ANR	4801057	PtrMemberAccess	s -> blk		4801048	0					
ANR	4801058	Identifier	s		4801048	0					
ANR	4801059	Identifier	blk		4801048	1					
ANR	4801060	Identifier	blk		4801048	1					
ANR	4801061	ExpressionStatement	s -> drive_kind = kind	19:4:345:365	4801048	2	True				
ANR	4801062	AssignmentExpression	s -> drive_kind = kind		4801048	0		=			
ANR	4801063	PtrMemberAccess	s -> drive_kind		4801048	0					
ANR	4801064	Identifier	s		4801048	0					
ANR	4801065	Identifier	drive_kind		4801048	1					
ANR	4801066	Identifier	kind		4801048	1					
ANR	4801067	ExpressionStatement	"blk_get_geometry ( blk , & nb_sectors )"	23:4:374:408	4801048	3	True				
ANR	4801068	CallExpression	"blk_get_geometry ( blk , & nb_sectors )"		4801048	0					
ANR	4801069	Callee	blk_get_geometry		4801048	0					
ANR	4801070	Identifier	blk_get_geometry		4801048	0					
ANR	4801071	ArgumentList	blk		4801048	1					
ANR	4801072	Argument	blk		4801048	0					
ANR	4801073	Identifier	blk		4801048	0					
ANR	4801074	Argument	& nb_sectors		4801048	1					
ANR	4801075	UnaryOperationExpression	& nb_sectors		4801048	0					
ANR	4801076	UnaryOperator	&		4801048	0					
ANR	4801077	Identifier	nb_sectors		4801048	1					
ANR	4801078	ExpressionStatement	s -> cylinders = cylinders	25:4:415:439	4801048	4	True				
ANR	4801079	AssignmentExpression	s -> cylinders = cylinders		4801048	0		=			
ANR	4801080	PtrMemberAccess	s -> cylinders		4801048	0					
ANR	4801081	Identifier	s		4801048	0					
ANR	4801082	Identifier	cylinders		4801048	1					
ANR	4801083	Identifier	cylinders		4801048	1					
ANR	4801084	ExpressionStatement	s -> heads = heads	27:4:446:462	4801048	5	True				
ANR	4801085	AssignmentExpression	s -> heads = heads		4801048	0		=			
ANR	4801086	PtrMemberAccess	s -> heads		4801048	0					
ANR	4801087	Identifier	s		4801048	0					
ANR	4801088	Identifier	heads		4801048	1					
ANR	4801089	Identifier	heads		4801048	1					
ANR	4801090	ExpressionStatement	s -> sectors = secs	29:4:469:486	4801048	6	True				
ANR	4801091	AssignmentExpression	s -> sectors = secs		4801048	0		=			
ANR	4801092	PtrMemberAccess	s -> sectors		4801048	0					
ANR	4801093	Identifier	s		4801048	0					
ANR	4801094	Identifier	sectors		4801048	1					
ANR	4801095	Identifier	secs		4801048	1					
ANR	4801096	ExpressionStatement	s -> chs_trans = chs_trans	31:4:493:517	4801048	7	True				
ANR	4801097	AssignmentExpression	s -> chs_trans = chs_trans		4801048	0		=			
ANR	4801098	PtrMemberAccess	s -> chs_trans		4801048	0					
ANR	4801099	Identifier	s		4801048	0					
ANR	4801100	Identifier	chs_trans		4801048	1					
ANR	4801101	Identifier	chs_trans		4801048	1					
ANR	4801102	ExpressionStatement	s -> nb_sectors = nb_sectors	33:4:524:550	4801048	8	True				
ANR	4801103	AssignmentExpression	s -> nb_sectors = nb_sectors		4801048	0		=			
ANR	4801104	PtrMemberAccess	s -> nb_sectors		4801048	0					
ANR	4801105	Identifier	s		4801048	0					
ANR	4801106	Identifier	nb_sectors		4801048	1					
ANR	4801107	Identifier	nb_sectors		4801048	1					
ANR	4801108	ExpressionStatement	s -> wwn = wwn	35:4:557:569	4801048	9	True				
ANR	4801109	AssignmentExpression	s -> wwn = wwn		4801048	0		=			
ANR	4801110	PtrMemberAccess	s -> wwn		4801048	0					
ANR	4801111	Identifier	s		4801048	0					
ANR	4801112	Identifier	wwn		4801048	1					
ANR	4801113	Identifier	wwn		4801048	1					
ANR	4801114	ExpressionStatement	s -> smart_enabled = 1	41:4:670:690	4801048	10	True				
ANR	4801115	AssignmentExpression	s -> smart_enabled = 1		4801048	0		=			
ANR	4801116	PtrMemberAccess	s -> smart_enabled		4801048	0					
ANR	4801117	Identifier	s		4801048	0					
ANR	4801118	Identifier	smart_enabled		4801048	1					
ANR	4801119	PrimaryExpression	1		4801048	1					
ANR	4801120	ExpressionStatement	s -> smart_autosave = 1	43:4:697:718	4801048	11	True				
ANR	4801121	AssignmentExpression	s -> smart_autosave = 1		4801048	0		=			
ANR	4801122	PtrMemberAccess	s -> smart_autosave		4801048	0					
ANR	4801123	Identifier	s		4801048	0					
ANR	4801124	Identifier	smart_autosave		4801048	1					
ANR	4801125	PrimaryExpression	1		4801048	1					
ANR	4801126	ExpressionStatement	s -> smart_errors = 0	45:4:725:744	4801048	12	True				
ANR	4801127	AssignmentExpression	s -> smart_errors = 0		4801048	0		=			
ANR	4801128	PtrMemberAccess	s -> smart_errors		4801048	0					
ANR	4801129	Identifier	s		4801048	0					
ANR	4801130	Identifier	smart_errors		4801048	1					
ANR	4801131	PrimaryExpression	0		4801048	1					
ANR	4801132	ExpressionStatement	s -> smart_selftest_count = 0	47:4:751:778	4801048	13	True				
ANR	4801133	AssignmentExpression	s -> smart_selftest_count = 0		4801048	0		=			
ANR	4801134	PtrMemberAccess	s -> smart_selftest_count		4801048	0					
ANR	4801135	Identifier	s		4801048	0					
ANR	4801136	Identifier	smart_selftest_count		4801048	1					
ANR	4801137	PrimaryExpression	0		4801048	1					
ANR	4801138	IfStatement	if ( kind == IDE_CD )		4801048	14					
ANR	4801139	Condition	kind == IDE_CD	49:8:789:802	4801048	0	True				
ANR	4801140	EqualityExpression	kind == IDE_CD		4801048	0		==			
ANR	4801141	Identifier	kind		4801048	0					
ANR	4801142	Identifier	IDE_CD		4801048	1					
ANR	4801143	CompoundStatement		39:24:513:513	4801048	1					
ANR	4801144	ExpressionStatement	"blk_set_dev_ops ( blk , & ide_cd_block_ops , s )"	51:8:816:858	4801048	0	True				
ANR	4801145	CallExpression	"blk_set_dev_ops ( blk , & ide_cd_block_ops , s )"		4801048	0					
ANR	4801146	Callee	blk_set_dev_ops		4801048	0					
ANR	4801147	Identifier	blk_set_dev_ops		4801048	0					
ANR	4801148	ArgumentList	blk		4801048	1					
ANR	4801149	Argument	blk		4801048	0					
ANR	4801150	Identifier	blk		4801048	0					
ANR	4801151	Argument	& ide_cd_block_ops		4801048	1					
ANR	4801152	UnaryOperationExpression	& ide_cd_block_ops		4801048	0					
ANR	4801153	UnaryOperator	&		4801048	0					
ANR	4801154	Identifier	ide_cd_block_ops		4801048	1					
ANR	4801155	Argument	s		4801048	2					
ANR	4801156	Identifier	s		4801048	0					
ANR	4801157	ExpressionStatement	"blk_set_guest_block_size ( blk , 2048 )"	53:8:869:904	4801048	1	True				
ANR	4801158	CallExpression	"blk_set_guest_block_size ( blk , 2048 )"		4801048	0					
ANR	4801159	Callee	blk_set_guest_block_size		4801048	0					
ANR	4801160	Identifier	blk_set_guest_block_size		4801048	0					
ANR	4801161	ArgumentList	blk		4801048	1					
ANR	4801162	Argument	blk		4801048	0					
ANR	4801163	Identifier	blk		4801048	0					
ANR	4801164	Argument	2048		4801048	1					
ANR	4801165	PrimaryExpression	2048		4801048	0					
ANR	4801166	ElseStatement	else		4801048	0					
ANR	4801167	CompoundStatement		45:11:626:626	4801048	0					
ANR	4801168	IfStatement	if ( ! blk_is_inserted ( s -> blk ) )		4801048	0					
ANR	4801169	Condition	! blk_is_inserted ( s -> blk )	57:12:933:956	4801048	0	True				
ANR	4801170	UnaryOperationExpression	! blk_is_inserted ( s -> blk )		4801048	0					
ANR	4801171	UnaryOperator	!		4801048	0					
ANR	4801172	CallExpression	blk_is_inserted ( s -> blk )		4801048	1					
ANR	4801173	Callee	blk_is_inserted		4801048	0					
ANR	4801174	Identifier	blk_is_inserted		4801048	0					
ANR	4801175	ArgumentList	s -> blk		4801048	1					
ANR	4801176	Argument	s -> blk		4801048	0					
ANR	4801177	PtrMemberAccess	s -> blk		4801048	0					
ANR	4801178	Identifier	s		4801048	0					
ANR	4801179	Identifier	blk		4801048	1					
ANR	4801180	CompoundStatement		47:38:667:667	4801048	1					
ANR	4801181	ExpressionStatement	"error_report ( ""Device needs media, but drive is empty"" )"	59:12:974:1028	4801048	0	True				
ANR	4801182	CallExpression	"error_report ( ""Device needs media, but drive is empty"" )"		4801048	0					
ANR	4801183	Callee	error_report		4801048	0					
ANR	4801184	Identifier	error_report		4801048	0					
ANR	4801185	ArgumentList	"""Device needs media, but drive is empty"""		4801048	1					
ANR	4801186	Argument	"""Device needs media, but drive is empty"""		4801048	0					
ANR	4801187	PrimaryExpression	"""Device needs media, but drive is empty"""		4801048	0					
ANR	4801188	ReturnStatement	return - 1 ;	61:12:1043:1052	4801048	1	True				
ANR	4801189	UnaryOperationExpression	- 1		4801048	0					
ANR	4801190	UnaryOperator	-		4801048	0					
ANR	4801191	PrimaryExpression	1		4801048	1					
ANR	4801192	IfStatement	if ( blk_is_read_only ( blk ) )		4801048	1					
ANR	4801193	Condition	blk_is_read_only ( blk )	65:12:1078:1098	4801048	0	True				
ANR	4801194	CallExpression	blk_is_read_only ( blk )		4801048	0					
ANR	4801195	Callee	blk_is_read_only		4801048	0					
ANR	4801196	Identifier	blk_is_read_only		4801048	0					
ANR	4801197	ArgumentList	blk		4801048	1					
ANR	4801198	Argument	blk		4801048	0					
ANR	4801199	Identifier	blk		4801048	0					
ANR	4801200	CompoundStatement		55:35:809:809	4801048	1					
ANR	4801201	ExpressionStatement	"error_report ( ""Can't use a read-only drive"" )"	67:12:1116:1159	4801048	0	True				
ANR	4801202	CallExpression	"error_report ( ""Can't use a read-only drive"" )"		4801048	0					
ANR	4801203	Callee	error_report		4801048	0					
ANR	4801204	Identifier	error_report		4801048	0					
ANR	4801205	ArgumentList	"""Can't use a read-only drive"""		4801048	1					
ANR	4801206	Argument	"""Can't use a read-only drive"""		4801048	0					
ANR	4801207	PrimaryExpression	"""Can't use a read-only drive"""		4801048	0					
ANR	4801208	ReturnStatement	return - 1 ;	69:12:1174:1183	4801048	1	True				
ANR	4801209	UnaryOperationExpression	- 1		4801048	0					
ANR	4801210	UnaryOperator	-		4801048	0					
ANR	4801211	PrimaryExpression	1		4801048	1					
ANR	4801212	ExpressionStatement	"blk_set_dev_ops ( blk , & ide_hd_block_ops , s )"	73:8:1205:1247	4801048	2	True				
ANR	4801213	CallExpression	"blk_set_dev_ops ( blk , & ide_hd_block_ops , s )"		4801048	0					
ANR	4801214	Callee	blk_set_dev_ops		4801048	0					
ANR	4801215	Identifier	blk_set_dev_ops		4801048	0					
ANR	4801216	ArgumentList	blk		4801048	1					
ANR	4801217	Argument	blk		4801048	0					
ANR	4801218	Identifier	blk		4801048	0					
ANR	4801219	Argument	& ide_hd_block_ops		4801048	1					
ANR	4801220	UnaryOperationExpression	& ide_hd_block_ops		4801048	0					
ANR	4801221	UnaryOperator	&		4801048	0					
ANR	4801222	Identifier	ide_hd_block_ops		4801048	1					
ANR	4801223	Argument	s		4801048	2					
ANR	4801224	Identifier	s		4801048	0					
ANR	4801225	IfStatement	if ( serial )		4801048	15					
ANR	4801226	Condition	serial	77:8:1265:1270	4801048	0	True				
ANR	4801227	Identifier	serial		4801048	0					
ANR	4801228	CompoundStatement		67:16:981:981	4801048	1					
ANR	4801229	ExpressionStatement	"pstrcpy ( s -> drive_serial_str , sizeof ( s -> drive_serial_str ) , serial )"	79:8:1284:1349	4801048	0	True				
ANR	4801230	CallExpression	"pstrcpy ( s -> drive_serial_str , sizeof ( s -> drive_serial_str ) , serial )"		4801048	0					
ANR	4801231	Callee	pstrcpy		4801048	0					
ANR	4801232	Identifier	pstrcpy		4801048	0					
ANR	4801233	ArgumentList	s -> drive_serial_str		4801048	1					
ANR	4801234	Argument	s -> drive_serial_str		4801048	0					
ANR	4801235	PtrMemberAccess	s -> drive_serial_str		4801048	0					
ANR	4801236	Identifier	s		4801048	0					
ANR	4801237	Identifier	drive_serial_str		4801048	1					
ANR	4801238	Argument	sizeof ( s -> drive_serial_str )		4801048	1					
ANR	4801239	SizeofExpression	sizeof ( s -> drive_serial_str )		4801048	0					
ANR	4801240	Sizeof	sizeof		4801048	0					
ANR	4801241	PtrMemberAccess	s -> drive_serial_str		4801048	1					
ANR	4801242	Identifier	s		4801048	0					
ANR	4801243	Identifier	drive_serial_str		4801048	1					
ANR	4801244	Argument	serial		4801048	2					
ANR	4801245	Identifier	serial		4801048	0					
ANR	4801246	ElseStatement	else		4801048	0					
ANR	4801247	CompoundStatement		71:11:1071:1071	4801048	0					
ANR	4801248	ExpressionStatement	"snprintf ( s -> drive_serial_str , sizeof ( s -> drive_serial_str ) , ""QM%05d"" , s -> drive_serial )"	83:8:1374:1477	4801048	0	True				
ANR	4801249	CallExpression	"snprintf ( s -> drive_serial_str , sizeof ( s -> drive_serial_str ) , ""QM%05d"" , s -> drive_serial )"		4801048	0					
ANR	4801250	Callee	snprintf		4801048	0					
ANR	4801251	Identifier	snprintf		4801048	0					
ANR	4801252	ArgumentList	s -> drive_serial_str		4801048	1					
ANR	4801253	Argument	s -> drive_serial_str		4801048	0					
ANR	4801254	PtrMemberAccess	s -> drive_serial_str		4801048	0					
ANR	4801255	Identifier	s		4801048	0					
ANR	4801256	Identifier	drive_serial_str		4801048	1					
ANR	4801257	Argument	sizeof ( s -> drive_serial_str )		4801048	1					
ANR	4801258	SizeofExpression	sizeof ( s -> drive_serial_str )		4801048	0					
ANR	4801259	Sizeof	sizeof		4801048	0					
ANR	4801260	PtrMemberAccess	s -> drive_serial_str		4801048	1					
ANR	4801261	Identifier	s		4801048	0					
ANR	4801262	Identifier	drive_serial_str		4801048	1					
ANR	4801263	Argument	"""QM%05d"""		4801048	2					
ANR	4801264	PrimaryExpression	"""QM%05d"""		4801048	0					
ANR	4801265	Argument	s -> drive_serial		4801048	3					
ANR	4801266	PtrMemberAccess	s -> drive_serial		4801048	0					
ANR	4801267	Identifier	s		4801048	0					
ANR	4801268	Identifier	drive_serial		4801048	1					
ANR	4801269	IfStatement	if ( model )		4801048	16					
ANR	4801270	Condition	model	89:8:1495:1499	4801048	0	True				
ANR	4801271	Identifier	model		4801048	0					
ANR	4801272	CompoundStatement		79:15:1210:1210	4801048	1					
ANR	4801273	ExpressionStatement	"pstrcpy ( s -> drive_model_str , sizeof ( s -> drive_model_str ) , model )"	91:8:1513:1575	4801048	0	True				
ANR	4801274	CallExpression	"pstrcpy ( s -> drive_model_str , sizeof ( s -> drive_model_str ) , model )"		4801048	0					
ANR	4801275	Callee	pstrcpy		4801048	0					
ANR	4801276	Identifier	pstrcpy		4801048	0					
ANR	4801277	ArgumentList	s -> drive_model_str		4801048	1					
ANR	4801278	Argument	s -> drive_model_str		4801048	0					
ANR	4801279	PtrMemberAccess	s -> drive_model_str		4801048	0					
ANR	4801280	Identifier	s		4801048	0					
ANR	4801281	Identifier	drive_model_str		4801048	1					
ANR	4801282	Argument	sizeof ( s -> drive_model_str )		4801048	1					
ANR	4801283	SizeofExpression	sizeof ( s -> drive_model_str )		4801048	0					
ANR	4801284	Sizeof	sizeof		4801048	0					
ANR	4801285	PtrMemberAccess	s -> drive_model_str		4801048	1					
ANR	4801286	Identifier	s		4801048	0					
ANR	4801287	Identifier	drive_model_str		4801048	1					
ANR	4801288	Argument	model		4801048	2					
ANR	4801289	Identifier	model		4801048	0					
ANR	4801290	ElseStatement	else		4801048	0					
ANR	4801291	CompoundStatement		83:11:1297:1297	4801048	0					
ANR	4801292	SwitchStatement	switch ( kind )		4801048	0					
ANR	4801293	Condition	kind	95:16:1608:1611	4801048	0	True				
ANR	4801294	Identifier	kind		4801048	0					
ANR	4801295	CompoundStatement		85:22:1322:1322	4801048	1					
ANR	4801296	Label	case IDE_CD :	97:8:1625:1636	4801048	0	True				
ANR	4801297	Identifier	IDE_CD		4801048	0					
ANR	4801298	ExpressionStatement	"strcpy ( s -> drive_model_str , ""QEMU DVD-ROM"" )"	99:12:1651:1693	4801048	1	True				
ANR	4801299	CallExpression	"strcpy ( s -> drive_model_str , ""QEMU DVD-ROM"" )"		4801048	0					
ANR	4801300	Callee	strcpy		4801048	0					
ANR	4801301	Identifier	strcpy		4801048	0					
ANR	4801302	ArgumentList	s -> drive_model_str		4801048	1					
ANR	4801303	Argument	s -> drive_model_str		4801048	0					
ANR	4801304	PtrMemberAccess	s -> drive_model_str		4801048	0					
ANR	4801305	Identifier	s		4801048	0					
ANR	4801306	Identifier	drive_model_str		4801048	1					
ANR	4801307	Argument	"""QEMU DVD-ROM"""		4801048	1					
ANR	4801308	PrimaryExpression	"""QEMU DVD-ROM"""		4801048	0					
ANR	4801309	BreakStatement	break ;	101:12:1708:1713	4801048	2	True				
ANR	4801310	Label	case IDE_CFATA :	103:8:1724:1738	4801048	3	True				
ANR	4801311	Identifier	IDE_CFATA		4801048	0					
ANR	4801312	ExpressionStatement	"strcpy ( s -> drive_model_str , ""QEMU MICRODRIVE"" )"	105:12:1753:1798	4801048	4	True				
ANR	4801313	CallExpression	"strcpy ( s -> drive_model_str , ""QEMU MICRODRIVE"" )"		4801048	0					
ANR	4801314	Callee	strcpy		4801048	0					
ANR	4801315	Identifier	strcpy		4801048	0					
ANR	4801316	ArgumentList	s -> drive_model_str		4801048	1					
ANR	4801317	Argument	s -> drive_model_str		4801048	0					
ANR	4801318	PtrMemberAccess	s -> drive_model_str		4801048	0					
ANR	4801319	Identifier	s		4801048	0					
ANR	4801320	Identifier	drive_model_str		4801048	1					
ANR	4801321	Argument	"""QEMU MICRODRIVE"""		4801048	1					
ANR	4801322	PrimaryExpression	"""QEMU MICRODRIVE"""		4801048	0					
ANR	4801323	BreakStatement	break ;	107:12:1813:1818	4801048	5	True				
ANR	4801324	Label	default :	109:8:1829:1836	4801048	6	True				
ANR	4801325	Identifier	default		4801048	0					
ANR	4801326	ExpressionStatement	"strcpy ( s -> drive_model_str , ""QEMU HARDDISK"" )"	111:12:1851:1894	4801048	7	True				
ANR	4801327	CallExpression	"strcpy ( s -> drive_model_str , ""QEMU HARDDISK"" )"		4801048	0					
ANR	4801328	Callee	strcpy		4801048	0					
ANR	4801329	Identifier	strcpy		4801048	0					
ANR	4801330	ArgumentList	s -> drive_model_str		4801048	1					
ANR	4801331	Argument	s -> drive_model_str		4801048	0					
ANR	4801332	PtrMemberAccess	s -> drive_model_str		4801048	0					
ANR	4801333	Identifier	s		4801048	0					
ANR	4801334	Identifier	drive_model_str		4801048	1					
ANR	4801335	Argument	"""QEMU HARDDISK"""		4801048	1					
ANR	4801336	PrimaryExpression	"""QEMU HARDDISK"""		4801048	0					
ANR	4801337	BreakStatement	break ;	113:12:1909:1914	4801048	8	True				
ANR	4801338	IfStatement	if ( version )		4801048	17					
ANR	4801339	Condition	version	121:8:1945:1951	4801048	0	True				
ANR	4801340	Identifier	version		4801048	0					
ANR	4801341	CompoundStatement		111:17:1662:1662	4801048	1					
ANR	4801342	ExpressionStatement	"pstrcpy ( s -> version , sizeof ( s -> version ) , version )"	123:8:1965:2013	4801048	0	True				
ANR	4801343	CallExpression	"pstrcpy ( s -> version , sizeof ( s -> version ) , version )"		4801048	0					
ANR	4801344	Callee	pstrcpy		4801048	0					
ANR	4801345	Identifier	pstrcpy		4801048	0					
ANR	4801346	ArgumentList	s -> version		4801048	1					
ANR	4801347	Argument	s -> version		4801048	0					
ANR	4801348	PtrMemberAccess	s -> version		4801048	0					
ANR	4801349	Identifier	s		4801048	0					
ANR	4801350	Identifier	version		4801048	1					
ANR	4801351	Argument	sizeof ( s -> version )		4801048	1					
ANR	4801352	SizeofExpression	sizeof ( s -> version )		4801048	0					
ANR	4801353	Sizeof	sizeof		4801048	0					
ANR	4801354	PtrMemberAccess	s -> version		4801048	1					
ANR	4801355	Identifier	s		4801048	0					
ANR	4801356	Identifier	version		4801048	1					
ANR	4801357	Argument	version		4801048	2					
ANR	4801358	Identifier	version		4801048	0					
ANR	4801359	ElseStatement	else		4801048	0					
ANR	4801360	CompoundStatement		115:11:1735:1735	4801048	0					
ANR	4801361	ExpressionStatement	"pstrcpy ( s -> version , sizeof ( s -> version ) , qemu_get_version ( ) )"	127:8:2038:2097	4801048	0	True				
ANR	4801362	CallExpression	"pstrcpy ( s -> version , sizeof ( s -> version ) , qemu_get_version ( ) )"		4801048	0					
ANR	4801363	Callee	pstrcpy		4801048	0					
ANR	4801364	Identifier	pstrcpy		4801048	0					
ANR	4801365	ArgumentList	s -> version		4801048	1					
ANR	4801366	Argument	s -> version		4801048	0					
ANR	4801367	PtrMemberAccess	s -> version		4801048	0					
ANR	4801368	Identifier	s		4801048	0					
ANR	4801369	Identifier	version		4801048	1					
ANR	4801370	Argument	sizeof ( s -> version )		4801048	1					
ANR	4801371	SizeofExpression	sizeof ( s -> version )		4801048	0					
ANR	4801372	Sizeof	sizeof		4801048	0					
ANR	4801373	PtrMemberAccess	s -> version		4801048	1					
ANR	4801374	Identifier	s		4801048	0					
ANR	4801375	Identifier	version		4801048	1					
ANR	4801376	Argument	qemu_get_version ( )		4801048	2					
ANR	4801377	CallExpression	qemu_get_version ( )		4801048	0					
ANR	4801378	Callee	qemu_get_version		4801048	0					
ANR	4801379	Identifier	qemu_get_version		4801048	0					
ANR	4801380	ArgumentList			4801048	1					
ANR	4801381	ExpressionStatement	ide_reset ( s )	133:4:2113:2125	4801048	18	True				
ANR	4801382	CallExpression	ide_reset ( s )		4801048	0					
ANR	4801383	Callee	ide_reset		4801048	0					
ANR	4801384	Identifier	ide_reset		4801048	0					
ANR	4801385	ArgumentList	s		4801048	1					
ANR	4801386	Argument	s		4801048	0					
ANR	4801387	Identifier	s		4801048	0					
ANR	4801388	ExpressionStatement	blk_iostatus_enable ( blk )	135:4:2132:2156	4801048	19	True				
ANR	4801389	CallExpression	blk_iostatus_enable ( blk )		4801048	0					
ANR	4801390	Callee	blk_iostatus_enable		4801048	0					
ANR	4801391	Identifier	blk_iostatus_enable		4801048	0					
ANR	4801392	ArgumentList	blk		4801048	1					
ANR	4801393	Argument	blk		4801048	0					
ANR	4801394	Identifier	blk		4801048	0					
ANR	4801395	ReturnStatement	return 0 ;	137:4:2163:2171	4801048	20	True				
ANR	4801396	PrimaryExpression	0		4801048	0					
ANR	4801397	ReturnType	int		4801048	1					
ANR	4801398	Identifier	ide_init_drive		4801048	2					
ANR	4801399	ParameterList	"IDEState * s , BlockBackend * blk , IDEDriveKind kind , const char * version , const char * serial , const char * model , uint64_t wwn , uint32_t cylinders , uint32_t heads , uint32_t secs , int chs_trans"		4801048	3					
ANR	4801400	Parameter	IDEState * s	1:19:19:29	4801048	0	True				
ANR	4801401	ParameterType	IDEState *		4801048	0					
ANR	4801402	Identifier	s		4801048	1					
ANR	4801403	Parameter	BlockBackend * blk	1:32:32:48	4801048	1	True				
ANR	4801404	ParameterType	BlockBackend *		4801048	0					
ANR	4801405	Identifier	blk		4801048	1					
ANR	4801406	Parameter	IDEDriveKind kind	1:51:51:67	4801048	2	True				
ANR	4801407	ParameterType	IDEDriveKind		4801048	0					
ANR	4801408	Identifier	kind		4801048	1					
ANR	4801409	Parameter	const char * version	3:19:90:108	4801048	3	True				
ANR	4801410	ParameterType	const char *		4801048	0					
ANR	4801411	Identifier	version		4801048	1					
ANR	4801412	Parameter	const char * serial	3:40:111:128	4801048	4	True				
ANR	4801413	ParameterType	const char *		4801048	0					
ANR	4801414	Identifier	serial		4801048	1					
ANR	4801415	Parameter	const char * model	3:60:131:147	4801048	5	True				
ANR	4801416	ParameterType	const char *		4801048	0					
ANR	4801417	Identifier	model		4801048	1					
ANR	4801418	Parameter	uint64_t wwn	5:19:170:181	4801048	6	True				
ANR	4801419	ParameterType	uint64_t		4801048	0					
ANR	4801420	Identifier	wwn		4801048	1					
ANR	4801421	Parameter	uint32_t cylinders	7:19:204:221	4801048	7	True				
ANR	4801422	ParameterType	uint32_t		4801048	0					
ANR	4801423	Identifier	cylinders		4801048	1					
ANR	4801424	Parameter	uint32_t heads	7:39:224:237	4801048	8	True				
ANR	4801425	ParameterType	uint32_t		4801048	0					
ANR	4801426	Identifier	heads		4801048	1					
ANR	4801427	Parameter	uint32_t secs	7:55:240:252	4801048	9	True				
ANR	4801428	ParameterType	uint32_t		4801048	0					
ANR	4801429	Identifier	secs		4801048	1					
ANR	4801430	Parameter	int chs_trans	9:19:275:287	4801048	10	True				
ANR	4801431	ParameterType	int		4801048	0					
ANR	4801432	Identifier	chs_trans		4801048	1					
ANR	4801433	CFGEntryNode	ENTRY		4801048		True				
ANR	4801434	CFGExitNode	EXIT		4801048		True				
ANR	4801435	Symbol	s -> drive_model_str		4801048						
ANR	4801436	Symbol	nb_sectors		4801048						
ANR	4801437	Symbol	chs_trans		4801048						
ANR	4801438	Symbol	s -> cylinders		4801048						
ANR	4801439	Symbol	IDE_CD		4801048						
ANR	4801440	Symbol	s -> drive_serial		4801048						
ANR	4801441	Symbol	& nb_sectors		4801048						
ANR	4801442	Symbol	s -> nb_sectors		4801048						
ANR	4801443	Symbol	blk_is_read_only		4801048						
ANR	4801444	Symbol	s -> version		4801048						
ANR	4801445	Symbol	s -> blk		4801048						
ANR	4801446	Symbol	& ide_cd_block_ops		4801048						
ANR	4801447	Symbol	wwn		4801048						
ANR	4801448	Symbol	s -> drive_serial_str		4801048						
ANR	4801449	Symbol	s -> drive_kind		4801048						
ANR	4801450	Symbol	blk_is_inserted		4801048						
ANR	4801451	Symbol	s -> heads		4801048						
ANR	4801452	Symbol	qemu_get_version		4801048						
ANR	4801453	Symbol	model		4801048						
ANR	4801454	Symbol	s -> wwn		4801048						
ANR	4801455	Symbol	s -> sectors		4801048						
ANR	4801456	Symbol	blk		4801048						
ANR	4801457	Symbol	kind		4801048						
ANR	4801458	Symbol	s -> chs_trans		4801048						
ANR	4801459	Symbol	s -> smart_enabled		4801048						
ANR	4801460	Symbol	version		4801048						
ANR	4801461	Symbol	cylinders		4801048						
ANR	4801462	Symbol	s -> smart_selftest_count		4801048						
ANR	4801463	Symbol	s		4801048						
ANR	4801464	Symbol	serial		4801048						
ANR	4801465	Symbol	s -> smart_autosave		4801048						
ANR	4801466	Symbol	secs		4801048						
ANR	4801467	Symbol	& ide_hd_block_ops		4801048						
ANR	4801468	Symbol	heads		4801048						
ANR	4801469	Symbol	* s		4801048						
ANR	4801470	Symbol	s -> smart_errors		4801048						
