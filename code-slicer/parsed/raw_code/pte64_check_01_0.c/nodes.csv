command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6761167	File	/home/p4ultr4n/workplace/ReVeal/raw_code/pte64_check_01_0.c								
ANR	6761168	Function	pte64_check	1:0:0:1511							
ANR	6761169	FunctionDef	"pte64_check (struct mmu_ctx_hash64 * ctx , target_ulong pte0 , target_ulong pte1 , int h , int rwx)"		6761168	0					
ANR	6761170	CompoundStatement		5:0:130:1511	6761168	0					
ANR	6761171	IdentifierDeclStatement	target_ulong mmask ;	7:4:137:155	6761168	0	True				
ANR	6761172	IdentifierDecl	mmask		6761168	0					
ANR	6761173	IdentifierDeclType	target_ulong		6761168	0					
ANR	6761174	Identifier	mmask		6761168	1					
ANR	6761175	IdentifierDeclStatement	"int access , ret , pp ;"	9:4:162:181	6761168	1	True				
ANR	6761176	IdentifierDecl	access		6761168	0					
ANR	6761177	IdentifierDeclType	int		6761168	0					
ANR	6761178	Identifier	access		6761168	1					
ANR	6761179	IdentifierDecl	ret		6761168	1					
ANR	6761180	IdentifierDeclType	int		6761168	0					
ANR	6761181	Identifier	ret		6761168	1					
ANR	6761182	IdentifierDecl	pp		6761168	2					
ANR	6761183	IdentifierDeclType	int		6761168	0					
ANR	6761184	Identifier	pp		6761168	1					
ANR	6761185	ExpressionStatement	ret = - 1	13:4:190:198	6761168	2	True				
ANR	6761186	AssignmentExpression	ret = - 1		6761168	0		=			
ANR	6761187	Identifier	ret		6761168	0					
ANR	6761188	UnaryOperationExpression	- 1		6761168	1					
ANR	6761189	UnaryOperator	-		6761168	0					
ANR	6761190	PrimaryExpression	1		6761168	1					
ANR	6761191	IfStatement	if ( ( pte0 & HPTE64_V_VALID ) && ( h == ! ! ( pte0 & HPTE64_V_SECONDARY ) ) )		6761168	3					
ANR	6761192	Condition	( pte0 & HPTE64_V_VALID ) && ( h == ! ! ( pte0 & HPTE64_V_SECONDARY ) )	17:8:251:313	6761168	0	True				
ANR	6761193	AndExpression	( pte0 & HPTE64_V_VALID ) && ( h == ! ! ( pte0 & HPTE64_V_SECONDARY ) )		6761168	0		&&			
ANR	6761194	BitAndExpression	pte0 & HPTE64_V_VALID		6761168	0		&			
ANR	6761195	Identifier	pte0		6761168	0					
ANR	6761196	Identifier	HPTE64_V_VALID		6761168	1					
ANR	6761197	EqualityExpression	h == ! ! ( pte0 & HPTE64_V_SECONDARY )		6761168	1		==			
ANR	6761198	Identifier	h		6761168	0					
ANR	6761199	UnaryOperationExpression	! ! ( pte0 & HPTE64_V_SECONDARY )		6761168	1					
ANR	6761200	UnaryOperator	!		6761168	0					
ANR	6761201	UnaryOperationExpression	! ( pte0 & HPTE64_V_SECONDARY )		6761168	1					
ANR	6761202	UnaryOperator	!		6761168	0					
ANR	6761203	BitAndExpression	pte0 & HPTE64_V_SECONDARY		6761168	1		&			
ANR	6761204	Identifier	pte0		6761168	0					
ANR	6761205	Identifier	HPTE64_V_SECONDARY		6761168	1					
ANR	6761206	CompoundStatement		15:8:196:203	6761168	1					
ANR	6761207	IdentifierDeclStatement	bool nx ;	19:8:327:334	6761168	0	True				
ANR	6761208	IdentifierDecl	nx		6761168	0					
ANR	6761209	IdentifierDeclType	bool		6761168	0					
ANR	6761210	Identifier	nx		6761168	1					
ANR	6761211	ExpressionStatement	mmask = PTE64_CHECK_MASK	25:8:379:403	6761168	1	True				
ANR	6761212	AssignmentExpression	mmask = PTE64_CHECK_MASK		6761168	0		=			
ANR	6761213	Identifier	mmask		6761168	0					
ANR	6761214	Identifier	PTE64_CHECK_MASK		6761168	1					
ANR	6761215	ExpressionStatement	pp = ( pte1 & HPTE64_R_PP ) | ( ( pte1 & HPTE64_R_PP0 ) >> 61 )	27:8:414:471	6761168	2	True				
ANR	6761216	AssignmentExpression	pp = ( pte1 & HPTE64_R_PP ) | ( ( pte1 & HPTE64_R_PP0 ) >> 61 )		6761168	0		=			
ANR	6761217	Identifier	pp		6761168	0					
ANR	6761218	InclusiveOrExpression	( pte1 & HPTE64_R_PP ) | ( ( pte1 & HPTE64_R_PP0 ) >> 61 )		6761168	1		|			
ANR	6761219	BitAndExpression	pte1 & HPTE64_R_PP		6761168	0		&			
ANR	6761220	Identifier	pte1		6761168	0					
ANR	6761221	Identifier	HPTE64_R_PP		6761168	1					
ANR	6761222	ShiftExpression	( pte1 & HPTE64_R_PP0 ) >> 61		6761168	1		>>			
ANR	6761223	BitAndExpression	pte1 & HPTE64_R_PP0		6761168	0		&			
ANR	6761224	Identifier	pte1		6761168	0					
ANR	6761225	Identifier	HPTE64_R_PP0		6761168	1					
ANR	6761226	PrimaryExpression	61		6761168	1					
ANR	6761227	ExpressionStatement	nx = ( pte1 & HPTE64_R_N ) || ( pte1 & HPTE64_R_G )	31:8:545:592	6761168	3	True				
ANR	6761228	AssignmentExpression	nx = ( pte1 & HPTE64_R_N ) || ( pte1 & HPTE64_R_G )		6761168	0		=			
ANR	6761229	Identifier	nx		6761168	0					
ANR	6761230	OrExpression	( pte1 & HPTE64_R_N ) || ( pte1 & HPTE64_R_G )		6761168	1		||			
ANR	6761231	BitAndExpression	pte1 & HPTE64_R_N		6761168	0		&			
ANR	6761232	Identifier	pte1		6761168	0					
ANR	6761233	Identifier	HPTE64_R_N		6761168	1					
ANR	6761234	BitAndExpression	pte1 & HPTE64_R_G		6761168	1		&			
ANR	6761235	Identifier	pte1		6761168	0					
ANR	6761236	Identifier	HPTE64_R_G		6761168	1					
ANR	6761237	IfStatement	"if ( HPTE64_V_COMPARE ( pte0 , ctx -> ptem ) )"		6761168	4					
ANR	6761238	Condition	"HPTE64_V_COMPARE ( pte0 , ctx -> ptem )"	33:12:607:639	6761168	0	True				
ANR	6761239	CallExpression	"HPTE64_V_COMPARE ( pte0 , ctx -> ptem )"		6761168	0					
ANR	6761240	Callee	HPTE64_V_COMPARE		6761168	0					
ANR	6761241	Identifier	HPTE64_V_COMPARE		6761168	0					
ANR	6761242	ArgumentList	pte0		6761168	1					
ANR	6761243	Argument	pte0		6761168	0					
ANR	6761244	Identifier	pte0		6761168	0					
ANR	6761245	Argument	ctx -> ptem		6761168	1					
ANR	6761246	PtrMemberAccess	ctx -> ptem		6761168	0					
ANR	6761247	Identifier	ctx		6761168	0					
ANR	6761248	Identifier	ptem		6761168	1					
ANR	6761249	CompoundStatement		29:47:511:511	6761168	1					
ANR	6761250	Statement	if	35:12:657:658	6761168	0	True				
ANR	6761251	Statement	(	35:15:660:660	6761168	1	True				
ANR	6761252	Statement	ctx	35:16:661:663	6761168	2	True				
ANR	6761253	Statement	->	35:19:664:665	6761168	3	True				
ANR	6761254	Statement	raddr	35:21:666:670	6761168	4	True				
ANR	6761255	Statement	!=	35:27:672:673	6761168	5	True				
ANR	6761256	Statement	(	35:30:675:675	6761168	6	True				
ANR	6761257	Statement	hwaddr	35:31:676:681	6761168	7	True				
ANR	6761258	Statement	)	35:37:682:682	6761168	8	True				
ANR	6761259	Statement	-	35:38:683:683	6761168	9	True				
ANR	6761260	Statement	1UL	35:39:684:686	6761168	10	True				
ANR	6761261	Statement	L	35:42:687:687	6761168	11	True				
ANR	6761262	Statement	)	35:43:688:688	6761168	12	True				
ANR	6761263	CompoundStatement		31:45:559:559	6761168	13					
ANR	6761264	IfStatement	if ( ( ctx -> raddr & mmask ) != ( pte1 & mmask ) )		6761168	0					
ANR	6761265	Condition	( ctx -> raddr & mmask ) != ( pte1 & mmask )	39:20:781:818	6761168	0	True				
ANR	6761266	EqualityExpression	( ctx -> raddr & mmask ) != ( pte1 & mmask )		6761168	0		!=			
ANR	6761267	BitAndExpression	ctx -> raddr & mmask		6761168	0		&			
ANR	6761268	PtrMemberAccess	ctx -> raddr		6761168	0					
ANR	6761269	Identifier	ctx		6761168	0					
ANR	6761270	Identifier	raddr		6761168	1					
ANR	6761271	Identifier	mmask		6761168	1					
ANR	6761272	BitAndExpression	pte1 & mmask		6761168	1		&			
ANR	6761273	Identifier	pte1		6761168	0					
ANR	6761274	Identifier	mmask		6761168	1					
ANR	6761275	CompoundStatement		35:60:690:690	6761168	1					
ANR	6761276	ExpressionStatement	"qemu_log ( ""Bad RPN/WIMG/PP\\n"" )"	41:20:844:873	6761168	0	True				
ANR	6761277	CallExpression	"qemu_log ( ""Bad RPN/WIMG/PP\\n"" )"		6761168	0					
ANR	6761278	Callee	qemu_log		6761168	0					
ANR	6761279	Identifier	qemu_log		6761168	0					
ANR	6761280	ArgumentList	"""Bad RPN/WIMG/PP\\n"""		6761168	1					
ANR	6761281	Argument	"""Bad RPN/WIMG/PP\\n"""		6761168	0					
ANR	6761282	PrimaryExpression	"""Bad RPN/WIMG/PP\\n"""		6761168	0					
ANR	6761283	ReturnStatement	return - 3 ;	43:20:896:905	6761168	1	True				
ANR	6761284	UnaryOperationExpression	- 3		6761168	0					
ANR	6761285	UnaryOperator	-		6761168	0					
ANR	6761286	PrimaryExpression	3		6761168	1					
ANR	6761287	ExpressionStatement	"access = ppc_hash64_pp_check ( ctx -> key , pp , nx )"	51:12:995:1041	6761168	14	True				
ANR	6761288	AssignmentExpression	"access = ppc_hash64_pp_check ( ctx -> key , pp , nx )"		6761168	0		=			
ANR	6761289	Identifier	access		6761168	0					
ANR	6761290	CallExpression	"ppc_hash64_pp_check ( ctx -> key , pp , nx )"		6761168	1					
ANR	6761291	Callee	ppc_hash64_pp_check		6761168	0					
ANR	6761292	Identifier	ppc_hash64_pp_check		6761168	0					
ANR	6761293	ArgumentList	ctx -> key		6761168	1					
ANR	6761294	Argument	ctx -> key		6761168	0					
ANR	6761295	PtrMemberAccess	ctx -> key		6761168	0					
ANR	6761296	Identifier	ctx		6761168	0					
ANR	6761297	Identifier	key		6761168	1					
ANR	6761298	Argument	pp		6761168	1					
ANR	6761299	Identifier	pp		6761168	0					
ANR	6761300	Argument	nx		6761168	2					
ANR	6761301	Identifier	nx		6761168	0					
ANR	6761302	ExpressionStatement	ctx -> raddr = pte1	55:12:1110:1127	6761168	15	True				
ANR	6761303	AssignmentExpression	ctx -> raddr = pte1		6761168	0		=			
ANR	6761304	PtrMemberAccess	ctx -> raddr		6761168	0					
ANR	6761305	Identifier	ctx		6761168	0					
ANR	6761306	Identifier	raddr		6761168	1					
ANR	6761307	Identifier	pte1		6761168	1					
ANR	6761308	ExpressionStatement	ctx -> prot = access	57:12:1142:1160	6761168	16	True				
ANR	6761309	AssignmentExpression	ctx -> prot = access		6761168	0		=			
ANR	6761310	PtrMemberAccess	ctx -> prot		6761168	0					
ANR	6761311	Identifier	ctx		6761168	0					
ANR	6761312	Identifier	prot		6761168	1					
ANR	6761313	Identifier	access		6761168	1					
ANR	6761314	ExpressionStatement	"ret = ppc_hash64_check_prot ( ctx -> prot , rwx )"	59:12:1175:1218	6761168	17	True				
ANR	6761315	AssignmentExpression	"ret = ppc_hash64_check_prot ( ctx -> prot , rwx )"		6761168	0		=			
ANR	6761316	Identifier	ret		6761168	0					
ANR	6761317	CallExpression	"ppc_hash64_check_prot ( ctx -> prot , rwx )"		6761168	1					
ANR	6761318	Callee	ppc_hash64_check_prot		6761168	0					
ANR	6761319	Identifier	ppc_hash64_check_prot		6761168	0					
ANR	6761320	ArgumentList	ctx -> prot		6761168	1					
ANR	6761321	Argument	ctx -> prot		6761168	0					
ANR	6761322	PtrMemberAccess	ctx -> prot		6761168	0					
ANR	6761323	Identifier	ctx		6761168	0					
ANR	6761324	Identifier	prot		6761168	1					
ANR	6761325	Argument	rwx		6761168	1					
ANR	6761326	Identifier	rwx		6761168	0					
ANR	6761327	IfStatement	if ( ret == 0 )		6761168	18					
ANR	6761328	Condition	ret == 0	61:16:1237:1244	6761168	0	True				
ANR	6761329	EqualityExpression	ret == 0		6761168	0		==			
ANR	6761330	Identifier	ret		6761168	0					
ANR	6761331	PrimaryExpression	0		6761168	1					
ANR	6761332	CompoundStatement		57:26:1116:1116	6761168	1					
ANR	6761333	ExpressionStatement	"LOG_MMU ( ""PTE access granted !\\n"" )"	65:16:1304:1337	6761168	0	True				
ANR	6761334	CallExpression	"LOG_MMU ( ""PTE access granted !\\n"" )"		6761168	0					
ANR	6761335	Callee	LOG_MMU		6761168	0					
ANR	6761336	Identifier	LOG_MMU		6761168	0					
ANR	6761337	ArgumentList	"""PTE access granted !\\n"""		6761168	1					
ANR	6761338	Argument	"""PTE access granted !\\n"""		6761168	0					
ANR	6761339	PrimaryExpression	"""PTE access granted !\\n"""		6761168	0					
ANR	6761340	ElseStatement	else		6761168	0					
ANR	6761341	CompoundStatement		63:19:1228:1228	6761168	0					
ANR	6761342	ExpressionStatement	"LOG_MMU ( ""PTE access rejected\\n"" )"	71:16:1424:1456	6761168	0	True				
ANR	6761343	CallExpression	"LOG_MMU ( ""PTE access rejected\\n"" )"		6761168	0					
ANR	6761344	Callee	LOG_MMU		6761168	0					
ANR	6761345	Identifier	LOG_MMU		6761168	0					
ANR	6761346	ArgumentList	"""PTE access rejected\\n"""		6761168	1					
ANR	6761347	Argument	"""PTE access rejected\\n"""		6761168	0					
ANR	6761348	PrimaryExpression	"""PTE access rejected\\n"""		6761168	0					
ANR	6761349	ReturnStatement	return ret ;	81:4:1498:1508	6761168	4	True				
ANR	6761350	Identifier	ret		6761168	0					
ANR	6761351	ReturnType	static int		6761168	1					
ANR	6761352	Identifier	pte64_check		6761168	2					
ANR	6761353	ParameterList	"struct mmu_ctx_hash64 * ctx , target_ulong pte0 , target_ulong pte1 , int h , int rwx"		6761168	3					
ANR	6761354	Parameter	struct mmu_ctx_hash64 * ctx	1:23:23:48	6761168	0	True				
ANR	6761355	ParameterType	struct mmu_ctx_hash64 *		6761168	0					
ANR	6761356	Identifier	ctx		6761168	1					
ANR	6761357	Parameter	target_ulong pte0	1:51:51:67	6761168	1	True				
ANR	6761358	ParameterType	target_ulong		6761168	0					
ANR	6761359	Identifier	pte0		6761168	1					
ANR	6761360	Parameter	target_ulong pte1	3:23:94:110	6761168	2	True				
ANR	6761361	ParameterType	target_ulong		6761168	0					
ANR	6761362	Identifier	pte1		6761168	1					
ANR	6761363	Parameter	int h	3:42:113:117	6761168	3	True				
ANR	6761364	ParameterType	int		6761168	0					
ANR	6761365	Identifier	h		6761168	1					
ANR	6761366	Parameter	int rwx	3:49:120:126	6761168	4	True				
ANR	6761367	ParameterType	int		6761168	0					
ANR	6761368	Identifier	rwx		6761168	1					
ANR	6761369	CFGEntryNode	ENTRY		6761168		True				
ANR	6761370	CFGExitNode	EXIT		6761168		True				
ANR	6761371	Symbol	pp		6761168						
ANR	6761372	Symbol	HPTE64_V_SECONDARY		6761168						
ANR	6761373	Symbol	access		6761168						
ANR	6761374	Symbol	pte1		6761168						
ANR	6761375	Symbol	HPTE64_V_COMPARE		6761168						
ANR	6761376	Symbol	ctx -> key		6761168						
ANR	6761377	Symbol	nx		6761168						
ANR	6761378	Symbol	HPTE64_R_PP		6761168						
ANR	6761379	Symbol	rwx		6761168						
ANR	6761380	Symbol	ctx -> prot		6761168						
ANR	6761381	Symbol	PTE64_CHECK_MASK		6761168						
ANR	6761382	Symbol	ppc_hash64_check_prot		6761168						
ANR	6761383	Symbol	pte0		6761168						
ANR	6761384	Symbol	ret		6761168						
ANR	6761385	Symbol	ctx		6761168						
ANR	6761386	Symbol	h		6761168						
ANR	6761387	Symbol	mmask		6761168						
ANR	6761388	Symbol	ctx -> ptem		6761168						
ANR	6761389	Symbol	* ctx		6761168						
ANR	6761390	Symbol	HPTE64_V_VALID		6761168						
ANR	6761391	Symbol	ppc_hash64_pp_check		6761168						
ANR	6761392	Symbol	HPTE64_R_PP0		6761168						
ANR	6761393	Symbol	HPTE64_R_N		6761168						
ANR	6761394	Symbol	HPTE64_R_G		6761168						
ANR	6761395	Symbol	ctx -> raddr		6761168						
