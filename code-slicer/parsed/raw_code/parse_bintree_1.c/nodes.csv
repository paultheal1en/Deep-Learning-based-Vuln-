command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6305972	File	/home/p4ultr4n/workplace/ReVeal/raw_code/parse_bintree_1.c								
ANR	6305973	Function	parse_bintree	1:0:0:3459							
ANR	6305974	FunctionDef	"parse_bintree (Indeo3DecodeContext * ctx , AVCodecContext * avctx , Plane * plane , int code , Cell * ref_cell , const int depth , const int strip_width)"		6305973	0					
ANR	6305975	CompoundStatement		7:0:207:3459	6305973	0					
ANR	6305976	IdentifierDeclStatement	Cell curr_cell ;	9:4:214:231	6305973	0	True				
ANR	6305977	IdentifierDecl	curr_cell		6305973	0					
ANR	6305978	IdentifierDeclType	Cell		6305973	0					
ANR	6305979	Identifier	curr_cell		6305973	1					
ANR	6305980	IdentifierDeclStatement	int bytes_used ;	11:4:238:256	6305973	1	True				
ANR	6305981	IdentifierDecl	bytes_used		6305973	0					
ANR	6305982	IdentifierDeclType	int		6305973	0					
ANR	6305983	Identifier	bytes_used		6305973	1					
ANR	6305984	IfStatement	if ( depth <= 0 )		6305973	2					
ANR	6305985	Condition	depth <= 0	15:8:269:278	6305973	0	True				
ANR	6305986	RelationalExpression	depth <= 0		6305973	0		<=			
ANR	6305987	Identifier	depth		6305973	0					
ANR	6305988	PrimaryExpression	0		6305973	1					
ANR	6305989	CompoundStatement		9:20:73:73	6305973	1					
ANR	6305990	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Stack overflow (corrupted binary tree)!\\n"" )"	17:8:292:364	6305973	0	True				
ANR	6305991	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Stack overflow (corrupted binary tree)!\\n"" )"		6305973	0					
ANR	6305992	Callee	av_log		6305973	0					
ANR	6305993	Identifier	av_log		6305973	0					
ANR	6305994	ArgumentList	avctx		6305973	1					
ANR	6305995	Argument	avctx		6305973	0					
ANR	6305996	Identifier	avctx		6305973	0					
ANR	6305997	Argument	AV_LOG_ERROR		6305973	1					
ANR	6305998	Identifier	AV_LOG_ERROR		6305973	0					
ANR	6305999	Argument	"""Stack overflow (corrupted binary tree)!\\n"""		6305973	2					
ANR	6306000	PrimaryExpression	"""Stack overflow (corrupted binary tree)!\\n"""		6305973	0					
ANR	6306001	ReturnStatement	return AVERROR_INVALIDDATA ;	19:8:375:401	6305973	1	True				
ANR	6306002	Identifier	AVERROR_INVALIDDATA		6305973	0					
ANR	6306003	ExpressionStatement	curr_cell = * ref_cell	25:4:437:458	6305973	3	True				
ANR	6306004	AssignmentExpression	curr_cell = * ref_cell		6305973	0		=			
ANR	6306005	Identifier	curr_cell		6305973	0					
ANR	6306006	UnaryOperationExpression	* ref_cell		6305973	1					
ANR	6306007	UnaryOperator	*		6305973	0					
ANR	6306008	Identifier	ref_cell		6305973	1					
ANR	6306009	IfStatement	if ( code == H_SPLIT )		6305973	4					
ANR	6306010	Condition	code == H_SPLIT	27:8:490:504	6305973	0	True				
ANR	6306011	EqualityExpression	code == H_SPLIT		6305973	0		==			
ANR	6306012	Identifier	code		6305973	0					
ANR	6306013	Identifier	H_SPLIT		6305973	1					
ANR	6306014	CompoundStatement		21:25:299:299	6305973	1					
ANR	6306015	ExpressionStatement	"SPLIT_CELL ( ref_cell -> height , curr_cell . height )"	29:8:518:564	6305973	0	True				
ANR	6306016	CallExpression	"SPLIT_CELL ( ref_cell -> height , curr_cell . height )"		6305973	0					
ANR	6306017	Callee	SPLIT_CELL		6305973	0					
ANR	6306018	Identifier	SPLIT_CELL		6305973	0					
ANR	6306019	ArgumentList	ref_cell -> height		6305973	1					
ANR	6306020	Argument	ref_cell -> height		6305973	0					
ANR	6306021	PtrMemberAccess	ref_cell -> height		6305973	0					
ANR	6306022	Identifier	ref_cell		6305973	0					
ANR	6306023	Identifier	height		6305973	1					
ANR	6306024	Argument	curr_cell . height		6305973	1					
ANR	6306025	MemberAccess	curr_cell . height		6305973	0					
ANR	6306026	Identifier	curr_cell		6305973	0					
ANR	6306027	Identifier	height		6305973	1					
ANR	6306028	ExpressionStatement	ref_cell -> ypos += curr_cell . height	31:8:575:611	6305973	1	True				
ANR	6306029	AssignmentExpression	ref_cell -> ypos += curr_cell . height		6305973	0		+=			
ANR	6306030	PtrMemberAccess	ref_cell -> ypos		6305973	0					
ANR	6306031	Identifier	ref_cell		6305973	0					
ANR	6306032	Identifier	ypos		6305973	1					
ANR	6306033	MemberAccess	curr_cell . height		6305973	1					
ANR	6306034	Identifier	curr_cell		6305973	0					
ANR	6306035	Identifier	height		6305973	1					
ANR	6306036	ExpressionStatement	ref_cell -> height -= curr_cell . height	33:8:622:658	6305973	2	True				
ANR	6306037	AssignmentExpression	ref_cell -> height -= curr_cell . height		6305973	0		-=			
ANR	6306038	PtrMemberAccess	ref_cell -> height		6305973	0					
ANR	6306039	Identifier	ref_cell		6305973	0					
ANR	6306040	Identifier	height		6305973	1					
ANR	6306041	MemberAccess	curr_cell . height		6305973	1					
ANR	6306042	Identifier	curr_cell		6305973	0					
ANR	6306043	Identifier	height		6305973	1					
ANR	6306044	ElseStatement	else		6305973	0					
ANR	6306045	IfStatement	if ( code == V_SPLIT )		6305973	0					
ANR	6306046	Condition	code == V_SPLIT	35:15:676:690	6305973	0	True				
ANR	6306047	EqualityExpression	code == V_SPLIT		6305973	0		==			
ANR	6306048	Identifier	code		6305973	0					
ANR	6306049	Identifier	V_SPLIT		6305973	1					
ANR	6306050	CompoundStatement		29:32:485:485	6305973	1					
ANR	6306051	IfStatement	if ( curr_cell . width > strip_width )		6305973	0					
ANR	6306052	Condition	curr_cell . width > strip_width	37:12:708:736	6305973	0	True				
ANR	6306053	RelationalExpression	curr_cell . width > strip_width		6305973	0		>			
ANR	6306054	MemberAccess	curr_cell . width		6305973	0					
ANR	6306055	Identifier	curr_cell		6305973	0					
ANR	6306056	Identifier	width		6305973	1					
ANR	6306057	Identifier	strip_width		6305973	1					
ANR	6306058	CompoundStatement		31:43:531:531	6305973	1					
ANR	6306059	ExpressionStatement	curr_cell . width = ( curr_cell . width <= ( strip_width << 1 ) ? 1 : 2 ) * strip_width	41:12:785:864	6305973	0	True				
ANR	6306060	AssignmentExpression	curr_cell . width = ( curr_cell . width <= ( strip_width << 1 ) ? 1 : 2 ) * strip_width		6305973	0		=			
ANR	6306061	MemberAccess	curr_cell . width		6305973	0					
ANR	6306062	Identifier	curr_cell		6305973	0					
ANR	6306063	Identifier	width		6305973	1					
ANR	6306064	MultiplicativeExpression	( curr_cell . width <= ( strip_width << 1 ) ? 1 : 2 ) * strip_width		6305973	1		*			
ANR	6306065	ConditionalExpression	curr_cell . width <= ( strip_width << 1 ) ? 1 : 2		6305973	0					
ANR	6306066	Condition	curr_cell . width <= ( strip_width << 1 )		6305973	0					
ANR	6306067	RelationalExpression	curr_cell . width <= ( strip_width << 1 )		6305973	0		<=			
ANR	6306068	MemberAccess	curr_cell . width		6305973	0					
ANR	6306069	Identifier	curr_cell		6305973	0					
ANR	6306070	Identifier	width		6305973	1					
ANR	6306071	ShiftExpression	strip_width << 1		6305973	1		<<			
ANR	6306072	Identifier	strip_width		6305973	0					
ANR	6306073	PrimaryExpression	1		6305973	1					
ANR	6306074	PrimaryExpression	1		6305973	1					
ANR	6306075	PrimaryExpression	2		6305973	2					
ANR	6306076	Identifier	strip_width		6305973	1					
ANR	6306077	ElseStatement	else		6305973	0					
ANR	6306078	ExpressionStatement	"SPLIT_CELL ( ref_cell -> width , curr_cell . width )"	45:12:895:939	6305973	0	True				
ANR	6306079	CallExpression	"SPLIT_CELL ( ref_cell -> width , curr_cell . width )"		6305973	0					
ANR	6306080	Callee	SPLIT_CELL		6305973	0					
ANR	6306081	Identifier	SPLIT_CELL		6305973	0					
ANR	6306082	ArgumentList	ref_cell -> width		6305973	1					
ANR	6306083	Argument	ref_cell -> width		6305973	0					
ANR	6306084	PtrMemberAccess	ref_cell -> width		6305973	0					
ANR	6306085	Identifier	ref_cell		6305973	0					
ANR	6306086	Identifier	width		6305973	1					
ANR	6306087	Argument	curr_cell . width		6305973	1					
ANR	6306088	MemberAccess	curr_cell . width		6305973	0					
ANR	6306089	Identifier	curr_cell		6305973	0					
ANR	6306090	Identifier	width		6305973	1					
ANR	6306091	ExpressionStatement	ref_cell -> xpos += curr_cell . width	47:8:950:984	6305973	1	True				
ANR	6306092	AssignmentExpression	ref_cell -> xpos += curr_cell . width		6305973	0		+=			
ANR	6306093	PtrMemberAccess	ref_cell -> xpos		6305973	0					
ANR	6306094	Identifier	ref_cell		6305973	0					
ANR	6306095	Identifier	xpos		6305973	1					
ANR	6306096	MemberAccess	curr_cell . width		6305973	1					
ANR	6306097	Identifier	curr_cell		6305973	0					
ANR	6306098	Identifier	width		6305973	1					
ANR	6306099	ExpressionStatement	ref_cell -> width -= curr_cell . width	49:8:995:1029	6305973	2	True				
ANR	6306100	AssignmentExpression	ref_cell -> width -= curr_cell . width		6305973	0		-=			
ANR	6306101	PtrMemberAccess	ref_cell -> width		6305973	0					
ANR	6306102	Identifier	ref_cell		6305973	0					
ANR	6306103	Identifier	width		6305973	1					
ANR	6306104	MemberAccess	curr_cell . width		6305973	1					
ANR	6306105	Identifier	curr_cell		6305973	0					
ANR	6306106	Identifier	width		6305973	1					
ANR	6306107	WhileStatement	while ( get_bits_left ( & ctx -> gb ) >= 2 )		6305973	5					
ANR	6306108	Condition	get_bits_left ( & ctx -> gb ) >= 2	55:11:1052:1079	6305973	0	True				
ANR	6306109	RelationalExpression	get_bits_left ( & ctx -> gb ) >= 2		6305973	0		>=			
ANR	6306110	CallExpression	get_bits_left ( & ctx -> gb )		6305973	0					
ANR	6306111	Callee	get_bits_left		6305973	0					
ANR	6306112	Identifier	get_bits_left		6305973	0					
ANR	6306113	ArgumentList	& ctx -> gb		6305973	1					
ANR	6306114	Argument	& ctx -> gb		6305973	0					
ANR	6306115	UnaryOperationExpression	& ctx -> gb		6305973	0					
ANR	6306116	UnaryOperator	&		6305973	0					
ANR	6306117	PtrMemberAccess	ctx -> gb		6305973	1					
ANR	6306118	Identifier	ctx		6305973	0					
ANR	6306119	Identifier	gb		6305973	1					
ANR	6306120	PrimaryExpression	2		6305973	1					
ANR	6306121	CompoundStatement		49:41:874:874	6305973	1					
ANR	6306122	ExpressionStatement	RESYNC_BITSTREAM	57:8:1117:1133	6305973	0	True				
ANR	6306123	Identifier	RESYNC_BITSTREAM		6305973	0					
ANR	6306124	SwitchStatement	"switch ( code = get_bits ( & ctx -> gb , 2 ) )"		6305973	1					
ANR	6306125	Condition	"code = get_bits ( & ctx -> gb , 2 )"	59:16:1152:1179	6305973	0	True				
ANR	6306126	AssignmentExpression	"code = get_bits ( & ctx -> gb , 2 )"		6305973	0		=			
ANR	6306127	Identifier	code		6305973	0					
ANR	6306128	CallExpression	"get_bits ( & ctx -> gb , 2 )"		6305973	1					
ANR	6306129	Callee	get_bits		6305973	0					
ANR	6306130	Identifier	get_bits		6305973	0					
ANR	6306131	ArgumentList	& ctx -> gb		6305973	1					
ANR	6306132	Argument	& ctx -> gb		6305973	0					
ANR	6306133	UnaryOperationExpression	& ctx -> gb		6305973	0					
ANR	6306134	UnaryOperator	&		6305973	0					
ANR	6306135	PtrMemberAccess	ctx -> gb		6305973	1					
ANR	6306136	Identifier	ctx		6305973	0					
ANR	6306137	Identifier	gb		6305973	1					
ANR	6306138	Argument	2		6305973	1					
ANR	6306139	PrimaryExpression	2		6305973	0					
ANR	6306140	CompoundStatement		53:46:974:974	6305973	1					
ANR	6306141	Label	case H_SPLIT :	61:8:1193:1205	6305973	0	True				
ANR	6306142	Identifier	H_SPLIT		6305973	0					
ANR	6306143	Label	case V_SPLIT :	63:8:1216:1228	6305973	1	True				
ANR	6306144	Identifier	V_SPLIT		6305973	0					
ANR	6306145	IfStatement	"if ( parse_bintree ( ctx , avctx , plane , code , & curr_cell , depth - 1 , strip_width ) )"		6305973	2					
ANR	6306146	Condition	"parse_bintree ( ctx , avctx , plane , code , & curr_cell , depth - 1 , strip_width )"	65:16:1247:1320	6305973	0	True				
ANR	6306147	CallExpression	"parse_bintree ( ctx , avctx , plane , code , & curr_cell , depth - 1 , strip_width )"		6305973	0					
ANR	6306148	Callee	parse_bintree		6305973	0					
ANR	6306149	Identifier	parse_bintree		6305973	0					
ANR	6306150	ArgumentList	ctx		6305973	1					
ANR	6306151	Argument	ctx		6305973	0					
ANR	6306152	Identifier	ctx		6305973	0					
ANR	6306153	Argument	avctx		6305973	1					
ANR	6306154	Identifier	avctx		6305973	0					
ANR	6306155	Argument	plane		6305973	2					
ANR	6306156	Identifier	plane		6305973	0					
ANR	6306157	Argument	code		6305973	3					
ANR	6306158	Identifier	code		6305973	0					
ANR	6306159	Argument	& curr_cell		6305973	4					
ANR	6306160	UnaryOperationExpression	& curr_cell		6305973	0					
ANR	6306161	UnaryOperator	&		6305973	0					
ANR	6306162	Identifier	curr_cell		6305973	1					
ANR	6306163	Argument	depth - 1		6305973	5					
ANR	6306164	AdditiveExpression	depth - 1		6305973	0		-			
ANR	6306165	Identifier	depth		6305973	0					
ANR	6306166	PrimaryExpression	1		6305973	1					
ANR	6306167	Argument	strip_width		6305973	6					
ANR	6306168	Identifier	strip_width		6305973	0					
ANR	6306169	ReturnStatement	return AVERROR_INVALIDDATA ;	67:16:1340:1366	6305973	1	True				
ANR	6306170	Identifier	AVERROR_INVALIDDATA		6305973	0					
ANR	6306171	BreakStatement	break ;	69:12:1381:1386	6305973	3	True				
ANR	6306172	Label	case INTRA_NULL :	71:8:1397:1412	6305973	4	True				
ANR	6306173	Identifier	INTRA_NULL		6305973	0					
ANR	6306174	IfStatement	if ( ! curr_cell . tree )		6305973	5					
ANR	6306175	Condition	! curr_cell . tree	73:16:1431:1445	6305973	0	True				
ANR	6306176	UnaryOperationExpression	! curr_cell . tree		6305973	0					
ANR	6306177	UnaryOperator	!		6305973	0					
ANR	6306178	MemberAccess	curr_cell . tree		6305973	1					
ANR	6306179	Identifier	curr_cell		6305973	0					
ANR	6306180	Identifier	tree		6305973	1					
ANR	6306181	CompoundStatement		67:33:1240:1240	6305973	1					
ANR	6306182	ExpressionStatement	curr_cell . mv_ptr = 0	75:16:1492:1512	6305973	0	True				
ANR	6306183	AssignmentExpression	curr_cell . mv_ptr = 0		6305973	0		=			
ANR	6306184	MemberAccess	curr_cell . mv_ptr		6305973	0					
ANR	6306185	Identifier	curr_cell		6305973	0					
ANR	6306186	Identifier	mv_ptr		6305973	1					
ANR	6306187	PrimaryExpression	0		6305973	1					
ANR	6306188	ExpressionStatement	curr_cell . tree = 1	77:16:1569:1589	6305973	1	True				
ANR	6306189	AssignmentExpression	curr_cell . tree = 1		6305973	0		=			
ANR	6306190	MemberAccess	curr_cell . tree		6305973	0					
ANR	6306191	Identifier	curr_cell		6305973	0					
ANR	6306192	Identifier	tree		6305973	1					
ANR	6306193	PrimaryExpression	1		6305973	1					
ANR	6306194	ElseStatement	else		6305973	0					
ANR	6306195	CompoundStatement		73:19:1427:1427	6305973	0					
ANR	6306196	ExpressionStatement	RESYNC_BITSTREAM	81:16:1678:1694	6305973	0	True				
ANR	6306197	Identifier	RESYNC_BITSTREAM		6305973	0					
ANR	6306198	ExpressionStatement	"code = get_bits ( & ctx -> gb , 2 )"	83:16:1713:1741	6305973	1	True				
ANR	6306199	AssignmentExpression	"code = get_bits ( & ctx -> gb , 2 )"		6305973	0		=			
ANR	6306200	Identifier	code		6305973	0					
ANR	6306201	CallExpression	"get_bits ( & ctx -> gb , 2 )"		6305973	1					
ANR	6306202	Callee	get_bits		6305973	0					
ANR	6306203	Identifier	get_bits		6305973	0					
ANR	6306204	ArgumentList	& ctx -> gb		6305973	1					
ANR	6306205	Argument	& ctx -> gb		6305973	0					
ANR	6306206	UnaryOperationExpression	& ctx -> gb		6305973	0					
ANR	6306207	UnaryOperator	&		6305973	0					
ANR	6306208	PtrMemberAccess	ctx -> gb		6305973	1					
ANR	6306209	Identifier	ctx		6305973	0					
ANR	6306210	Identifier	gb		6305973	1					
ANR	6306211	Argument	2		6305973	1					
ANR	6306212	PrimaryExpression	2		6305973	0					
ANR	6306213	IfStatement	if ( code >= 2 )		6305973	2					
ANR	6306214	Condition	code >= 2	85:20:1764:1772	6305973	0	True				
ANR	6306215	RelationalExpression	code >= 2		6305973	0		>=			
ANR	6306216	Identifier	code		6305973	0					
ANR	6306217	PrimaryExpression	2		6305973	1					
ANR	6306218	CompoundStatement		79:31:1567:1567	6305973	1					
ANR	6306219	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Invalid VQ_NULL code: %d\\n"" , code )"	87:20:1798:1861	6305973	0	True				
ANR	6306220	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Invalid VQ_NULL code: %d\\n"" , code )"		6305973	0					
ANR	6306221	Callee	av_log		6305973	0					
ANR	6306222	Identifier	av_log		6305973	0					
ANR	6306223	ArgumentList	avctx		6305973	1					
ANR	6306224	Argument	avctx		6305973	0					
ANR	6306225	Identifier	avctx		6305973	0					
ANR	6306226	Argument	AV_LOG_ERROR		6305973	1					
ANR	6306227	Identifier	AV_LOG_ERROR		6305973	0					
ANR	6306228	Argument	"""Invalid VQ_NULL code: %d\\n"""		6305973	2					
ANR	6306229	PrimaryExpression	"""Invalid VQ_NULL code: %d\\n"""		6305973	0					
ANR	6306230	Argument	code		6305973	3					
ANR	6306231	Identifier	code		6305973	0					
ANR	6306232	ReturnStatement	return AVERROR_INVALIDDATA ;	89:20:1884:1910	6305973	1	True				
ANR	6306233	Identifier	AVERROR_INVALIDDATA		6305973	0					
ANR	6306234	IfStatement	if ( code == 1 )		6305973	3					
ANR	6306235	Condition	code == 1	93:20:1952:1960	6305973	0	True				
ANR	6306236	EqualityExpression	code == 1		6305973	0		==			
ANR	6306237	Identifier	code		6305973	0					
ANR	6306238	PrimaryExpression	1		6305973	1					
ANR	6306239	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""SkipCell procedure not implemented yet!\\n"" )"	95:20:1984:2056	6305973	1	True				
ANR	6306240	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""SkipCell procedure not implemented yet!\\n"" )"		6305973	0					
ANR	6306241	Callee	av_log		6305973	0					
ANR	6306242	Identifier	av_log		6305973	0					
ANR	6306243	ArgumentList	avctx		6305973	1					
ANR	6306244	Argument	avctx		6305973	0					
ANR	6306245	Identifier	avctx		6305973	0					
ANR	6306246	Argument	AV_LOG_ERROR		6305973	1					
ANR	6306247	Identifier	AV_LOG_ERROR		6305973	0					
ANR	6306248	Argument	"""SkipCell procedure not implemented yet!\\n"""		6305973	2					
ANR	6306249	PrimaryExpression	"""SkipCell procedure not implemented yet!\\n"""		6305973	0					
ANR	6306250	Statement	CHECK_CELL	99:16:2077:2086	6305973	4	True				
ANR	6306251	IfStatement	if ( ! curr_cell . mv_ptr )		6305973	5					
ANR	6306252	Condition	! curr_cell . mv_ptr	101:20:2109:2125	6305973	0	True				
ANR	6306253	UnaryOperationExpression	! curr_cell . mv_ptr		6305973	0					
ANR	6306254	UnaryOperator	!		6305973	0					
ANR	6306255	MemberAccess	curr_cell . mv_ptr		6305973	1					
ANR	6306256	Identifier	curr_cell		6305973	0					
ANR	6306257	Identifier	mv_ptr		6305973	1					
ANR	6306258	ReturnStatement	return AVERROR_INVALIDDATA ;	103:20:2149:2175	6305973	1	True				
ANR	6306259	Identifier	AVERROR_INVALIDDATA		6305973	0					
ANR	6306260	ExpressionStatement	"copy_cell ( ctx , plane , & curr_cell )"	105:16:2194:2227	6305973	6	True				
ANR	6306261	CallExpression	"copy_cell ( ctx , plane , & curr_cell )"		6305973	0					
ANR	6306262	Callee	copy_cell		6305973	0					
ANR	6306263	Identifier	copy_cell		6305973	0					
ANR	6306264	ArgumentList	ctx		6305973	1					
ANR	6306265	Argument	ctx		6305973	0					
ANR	6306266	Identifier	ctx		6305973	0					
ANR	6306267	Argument	plane		6305973	1					
ANR	6306268	Identifier	plane		6305973	0					
ANR	6306269	Argument	& curr_cell		6305973	2					
ANR	6306270	UnaryOperationExpression	& curr_cell		6305973	0					
ANR	6306271	UnaryOperator	&		6305973	0					
ANR	6306272	Identifier	curr_cell		6305973	1					
ANR	6306273	ReturnStatement	return 0 ;	107:16:2246:2254	6305973	7	True				
ANR	6306274	PrimaryExpression	0		6305973	0					
ANR	6306275	BreakStatement	break ;	111:12:2284:2289	6305973	6	True				
ANR	6306276	Label	case INTER_DATA :	113:8:2300:2315	6305973	7	True				
ANR	6306277	Identifier	INTER_DATA		6305973	0					
ANR	6306278	IfStatement	if ( ! curr_cell . tree )		6305973	8					
ANR	6306279	Condition	! curr_cell . tree	115:16:2334:2348	6305973	0	True				
ANR	6306280	UnaryOperationExpression	! curr_cell . tree		6305973	0					
ANR	6306281	UnaryOperator	!		6305973	0					
ANR	6306282	MemberAccess	curr_cell . tree		6305973	1					
ANR	6306283	Identifier	curr_cell		6305973	0					
ANR	6306284	Identifier	tree		6305973	1					
ANR	6306285	CompoundStatement		109:33:2143:2143	6305973	1					
ANR	6306286	IfStatement	if ( ! ctx -> need_resync )		6305973	0					
ANR	6306287	Condition	! ctx -> need_resync	119:20:2482:2498	6305973	0	True				
ANR	6306288	UnaryOperationExpression	! ctx -> need_resync		6305973	0					
ANR	6306289	UnaryOperator	!		6305973	0					
ANR	6306290	PtrMemberAccess	ctx -> need_resync		6305973	1					
ANR	6306291	Identifier	ctx		6305973	0					
ANR	6306292	Identifier	need_resync		6305973	1					
ANR	6306293	ExpressionStatement	ctx -> next_cell_data = & ctx -> gb . buffer [ ( get_bits_count ( & ctx -> gb ) + 7 ) >> 3 ]	121:20:2522:2596	6305973	1	True				
ANR	6306294	AssignmentExpression	ctx -> next_cell_data = & ctx -> gb . buffer [ ( get_bits_count ( & ctx -> gb ) + 7 ) >> 3 ]		6305973	0		=			
ANR	6306295	PtrMemberAccess	ctx -> next_cell_data		6305973	0					
ANR	6306296	Identifier	ctx		6305973	0					
ANR	6306297	Identifier	next_cell_data		6305973	1					
ANR	6306298	UnaryOperationExpression	& ctx -> gb . buffer [ ( get_bits_count ( & ctx -> gb ) + 7 ) >> 3 ]		6305973	1					
ANR	6306299	UnaryOperator	&		6305973	0					
ANR	6306300	ArrayIndexing	ctx -> gb . buffer [ ( get_bits_count ( & ctx -> gb ) + 7 ) >> 3 ]		6305973	1					
ANR	6306301	MemberAccess	ctx -> gb . buffer		6305973	0					
ANR	6306302	PtrMemberAccess	ctx -> gb		6305973	0					
ANR	6306303	Identifier	ctx		6305973	0					
ANR	6306304	Identifier	gb		6305973	1					
ANR	6306305	Identifier	buffer		6305973	1					
ANR	6306306	ShiftExpression	( get_bits_count ( & ctx -> gb ) + 7 ) >> 3		6305973	1		>>			
ANR	6306307	AdditiveExpression	get_bits_count ( & ctx -> gb ) + 7		6305973	0		+			
ANR	6306308	CallExpression	get_bits_count ( & ctx -> gb )		6305973	0					
ANR	6306309	Callee	get_bits_count		6305973	0					
ANR	6306310	Identifier	get_bits_count		6305973	0					
ANR	6306311	ArgumentList	& ctx -> gb		6305973	1					
ANR	6306312	Argument	& ctx -> gb		6305973	0					
ANR	6306313	UnaryOperationExpression	& ctx -> gb		6305973	0					
ANR	6306314	UnaryOperator	&		6305973	0					
ANR	6306315	PtrMemberAccess	ctx -> gb		6305973	1					
ANR	6306316	Identifier	ctx		6305973	0					
ANR	6306317	Identifier	gb		6305973	1					
ANR	6306318	PrimaryExpression	7		6305973	1					
ANR	6306319	PrimaryExpression	3		6305973	1					
ANR	6306320	ExpressionStatement	curr_cell . mv_ptr = & ctx -> mc_vectors [ * ( ctx -> next_cell_data ++ ) << 1 ]	123:16:2615:2681	6305973	1	True				
ANR	6306321	AssignmentExpression	curr_cell . mv_ptr = & ctx -> mc_vectors [ * ( ctx -> next_cell_data ++ ) << 1 ]		6305973	0		=			
ANR	6306322	MemberAccess	curr_cell . mv_ptr		6305973	0					
ANR	6306323	Identifier	curr_cell		6305973	0					
ANR	6306324	Identifier	mv_ptr		6305973	1					
ANR	6306325	UnaryOperationExpression	& ctx -> mc_vectors [ * ( ctx -> next_cell_data ++ ) << 1 ]		6305973	1					
ANR	6306326	UnaryOperator	&		6305973	0					
ANR	6306327	ArrayIndexing	ctx -> mc_vectors [ * ( ctx -> next_cell_data ++ ) << 1 ]		6305973	1					
ANR	6306328	PtrMemberAccess	ctx -> mc_vectors		6305973	0					
ANR	6306329	Identifier	ctx		6305973	0					
ANR	6306330	Identifier	mc_vectors		6305973	1					
ANR	6306331	ShiftExpression	* ( ctx -> next_cell_data ++ ) << 1		6305973	1		<<			
ANR	6306332	UnaryOperationExpression	* ( ctx -> next_cell_data ++ )		6305973	0					
ANR	6306333	UnaryOperator	*		6305973	0					
ANR	6306334	PostIncDecOperationExpression	ctx -> next_cell_data ++		6305973	1					
ANR	6306335	PtrMemberAccess	ctx -> next_cell_data		6305973	0					
ANR	6306336	Identifier	ctx		6305973	0					
ANR	6306337	Identifier	next_cell_data		6305973	1					
ANR	6306338	IncDec	++		6305973	1					
ANR	6306339	PrimaryExpression	1		6305973	1					
ANR	6306340	ExpressionStatement	curr_cell . tree = 1	125:16:2700:2720	6305973	2	True				
ANR	6306341	AssignmentExpression	curr_cell . tree = 1		6305973	0		=			
ANR	6306342	MemberAccess	curr_cell . tree		6305973	0					
ANR	6306343	Identifier	curr_cell		6305973	0					
ANR	6306344	Identifier	tree		6305973	1					
ANR	6306345	PrimaryExpression	1		6305973	1					
ANR	6306346	ExpressionStatement	UPDATE_BITPOS ( 8 )	127:16:2763:2779	6305973	3	True				
ANR	6306347	CallExpression	UPDATE_BITPOS ( 8 )		6305973	0					
ANR	6306348	Callee	UPDATE_BITPOS		6305973	0					
ANR	6306349	Identifier	UPDATE_BITPOS		6305973	0					
ANR	6306350	ArgumentList	8		6305973	1					
ANR	6306351	Argument	8		6305973	0					
ANR	6306352	PrimaryExpression	8		6305973	0					
ANR	6306353	ElseStatement	else		6305973	0					
ANR	6306354	CompoundStatement		131:16:2775:2937	6305973	0					
ANR	6306355	IfStatement	if ( ! ctx -> need_resync )		6305973	0					
ANR	6306356	Condition	! ctx -> need_resync	131:20:2848:2864	6305973	0	True				
ANR	6306357	UnaryOperationExpression	! ctx -> need_resync		6305973	0					
ANR	6306358	UnaryOperator	!		6305973	0					
ANR	6306359	PtrMemberAccess	ctx -> need_resync		6305973	1					
ANR	6306360	Identifier	ctx		6305973	0					
ANR	6306361	Identifier	need_resync		6305973	1					
ANR	6306362	ExpressionStatement	ctx -> next_cell_data = & ctx -> gb . buffer [ ( get_bits_count ( & ctx -> gb ) + 7 ) >> 3 ]	133:20:2888:2962	6305973	1	True				
ANR	6306363	AssignmentExpression	ctx -> next_cell_data = & ctx -> gb . buffer [ ( get_bits_count ( & ctx -> gb ) + 7 ) >> 3 ]		6305973	0		=			
ANR	6306364	PtrMemberAccess	ctx -> next_cell_data		6305973	0					
ANR	6306365	Identifier	ctx		6305973	0					
ANR	6306366	Identifier	next_cell_data		6305973	1					
ANR	6306367	UnaryOperationExpression	& ctx -> gb . buffer [ ( get_bits_count ( & ctx -> gb ) + 7 ) >> 3 ]		6305973	1					
ANR	6306368	UnaryOperator	&		6305973	0					
ANR	6306369	ArrayIndexing	ctx -> gb . buffer [ ( get_bits_count ( & ctx -> gb ) + 7 ) >> 3 ]		6305973	1					
ANR	6306370	MemberAccess	ctx -> gb . buffer		6305973	0					
ANR	6306371	PtrMemberAccess	ctx -> gb		6305973	0					
ANR	6306372	Identifier	ctx		6305973	0					
ANR	6306373	Identifier	gb		6305973	1					
ANR	6306374	Identifier	buffer		6305973	1					
ANR	6306375	ShiftExpression	( get_bits_count ( & ctx -> gb ) + 7 ) >> 3		6305973	1		>>			
ANR	6306376	AdditiveExpression	get_bits_count ( & ctx -> gb ) + 7		6305973	0		+			
ANR	6306377	CallExpression	get_bits_count ( & ctx -> gb )		6305973	0					
ANR	6306378	Callee	get_bits_count		6305973	0					
ANR	6306379	Identifier	get_bits_count		6305973	0					
ANR	6306380	ArgumentList	& ctx -> gb		6305973	1					
ANR	6306381	Argument	& ctx -> gb		6305973	0					
ANR	6306382	UnaryOperationExpression	& ctx -> gb		6305973	0					
ANR	6306383	UnaryOperator	&		6305973	0					
ANR	6306384	PtrMemberAccess	ctx -> gb		6305973	1					
ANR	6306385	Identifier	ctx		6305973	0					
ANR	6306386	Identifier	gb		6305973	1					
ANR	6306387	PrimaryExpression	7		6305973	1					
ANR	6306388	PrimaryExpression	3		6305973	1					
ANR	6306389	IdentifierDeclStatement	"CHECK_CELL bytes_used = decode_cell ( ctx , avctx , plane , & curr_cell , ctx -> next_cell_data , ctx -> last_byte ) ;"	137:16:2983:3145	6305973	1	True				
ANR	6306390	IdentifierDecl	"bytes_used = decode_cell ( ctx , avctx , plane , & curr_cell , ctx -> next_cell_data , ctx -> last_byte )"		6305973	0					
ANR	6306391	IdentifierDeclType	CHECK_CELL		6305973	0					
ANR	6306392	Identifier	bytes_used		6305973	1					
ANR	6306393	AssignmentExpression	"bytes_used = decode_cell ( ctx , avctx , plane , & curr_cell , ctx -> next_cell_data , ctx -> last_byte )"		6305973	2		=			
ANR	6306394	Identifier	bytes_used		6305973	0					
ANR	6306395	CallExpression	"decode_cell ( ctx , avctx , plane , & curr_cell , ctx -> next_cell_data , ctx -> last_byte )"		6305973	1					
ANR	6306396	Callee	decode_cell		6305973	0					
ANR	6306397	Identifier	decode_cell		6305973	0					
ANR	6306398	ArgumentList	ctx		6305973	1					
ANR	6306399	Argument	ctx		6305973	0					
ANR	6306400	Identifier	ctx		6305973	0					
ANR	6306401	Argument	avctx		6305973	1					
ANR	6306402	Identifier	avctx		6305973	0					
ANR	6306403	Argument	plane		6305973	2					
ANR	6306404	Identifier	plane		6305973	0					
ANR	6306405	Argument	& curr_cell		6305973	3					
ANR	6306406	UnaryOperationExpression	& curr_cell		6305973	0					
ANR	6306407	UnaryOperator	&		6305973	0					
ANR	6306408	Identifier	curr_cell		6305973	1					
ANR	6306409	Argument	ctx -> next_cell_data		6305973	4					
ANR	6306410	PtrMemberAccess	ctx -> next_cell_data		6305973	0					
ANR	6306411	Identifier	ctx		6305973	0					
ANR	6306412	Identifier	next_cell_data		6305973	1					
ANR	6306413	Argument	ctx -> last_byte		6305973	5					
ANR	6306414	PtrMemberAccess	ctx -> last_byte		6305973	0					
ANR	6306415	Identifier	ctx		6305973	0					
ANR	6306416	Identifier	last_byte		6305973	1					
ANR	6306417	IfStatement	if ( bytes_used < 0 )		6305973	2					
ANR	6306418	Condition	bytes_used < 0	143:20:3168:3181	6305973	0	True				
ANR	6306419	RelationalExpression	bytes_used < 0		6305973	0		<			
ANR	6306420	Identifier	bytes_used		6305973	0					
ANR	6306421	PrimaryExpression	0		6305973	1					
ANR	6306422	ReturnStatement	return AVERROR_INVALIDDATA ;	145:20:3205:3231	6305973	1	True				
ANR	6306423	Identifier	AVERROR_INVALIDDATA		6305973	0					
ANR	6306424	ExpressionStatement	UPDATE_BITPOS ( bytes_used << 3 )	149:16:3252:3282	6305973	3	True				
ANR	6306425	CallExpression	UPDATE_BITPOS ( bytes_used << 3 )		6305973	0					
ANR	6306426	Callee	UPDATE_BITPOS		6305973	0					
ANR	6306427	Identifier	UPDATE_BITPOS		6305973	0					
ANR	6306428	ArgumentList	bytes_used << 3		6305973	1					
ANR	6306429	Argument	bytes_used << 3		6305973	0					
ANR	6306430	ShiftExpression	bytes_used << 3		6305973	0		<<			
ANR	6306431	Identifier	bytes_used		6305973	0					
ANR	6306432	PrimaryExpression	3		6305973	1					
ANR	6306433	ExpressionStatement	ctx -> next_cell_data += bytes_used	151:16:3301:3334	6305973	4	True				
ANR	6306434	AssignmentExpression	ctx -> next_cell_data += bytes_used		6305973	0		+=			
ANR	6306435	PtrMemberAccess	ctx -> next_cell_data		6305973	0					
ANR	6306436	Identifier	ctx		6305973	0					
ANR	6306437	Identifier	next_cell_data		6305973	1					
ANR	6306438	Identifier	bytes_used		6305973	1					
ANR	6306439	ReturnStatement	return 0 ;	153:16:3353:3361	6305973	5	True				
ANR	6306440	PrimaryExpression	0		6305973	0					
ANR	6306441	BreakStatement	break ;	157:12:3391:3396	6305973	9	True				
ANR	6306442	ReturnStatement	return AVERROR_INVALIDDATA ;	165:4:3430:3456	6305973	6	True				
ANR	6306443	Identifier	AVERROR_INVALIDDATA		6305973	0					
ANR	6306444	ReturnType	static int		6305973	1					
ANR	6306445	Identifier	parse_bintree		6305973	2					
ANR	6306446	ParameterList	"Indeo3DecodeContext * ctx , AVCodecContext * avctx , Plane * plane , int code , Cell * ref_cell , const int depth , const int strip_width"		6305973	3					
ANR	6306447	Parameter	Indeo3DecodeContext * ctx	1:25:25:48	6305973	0	True				
ANR	6306448	ParameterType	Indeo3DecodeContext *		6305973	0					
ANR	6306449	Identifier	ctx		6305973	1					
ANR	6306450	Parameter	AVCodecContext * avctx	1:51:51:71	6305973	1	True				
ANR	6306451	ParameterType	AVCodecContext *		6305973	0					
ANR	6306452	Identifier	avctx		6305973	1					
ANR	6306453	Parameter	Plane * plane	3:25:100:111	6305973	2	True				
ANR	6306454	ParameterType	Plane *		6305973	0					
ANR	6306455	Identifier	plane		6305973	1					
ANR	6306456	Parameter	int code	3:39:114:121	6305973	3	True				
ANR	6306457	ParameterType	int		6305973	0					
ANR	6306458	Identifier	code		6305973	1					
ANR	6306459	Parameter	Cell * ref_cell	3:49:124:137	6305973	4	True				
ANR	6306460	ParameterType	Cell *		6305973	0					
ANR	6306461	Identifier	ref_cell		6305973	1					
ANR	6306462	Parameter	const int depth	5:25:166:180	6305973	5	True				
ANR	6306463	ParameterType	const int		6305973	0					
ANR	6306464	Identifier	depth		6305973	1					
ANR	6306465	Parameter	const int strip_width	5:42:183:203	6305973	6	True				
ANR	6306466	ParameterType	const int		6305973	0					
ANR	6306467	Identifier	strip_width		6305973	1					
ANR	6306468	CFGEntryNode	ENTRY		6305973		True				
ANR	6306469	CFGExitNode	EXIT		6305973		True				
ANR	6306470	Symbol	plane		6305973						
ANR	6306471	Symbol	curr_cell . tree		6305973						
ANR	6306472	Symbol	parse_bintree		6305973						
ANR	6306473	Symbol	code		6305973						
ANR	6306474	Symbol	get_bits		6305973						
ANR	6306475	Symbol	ref_cell -> ypos		6305973						
ANR	6306476	Symbol	decode_cell		6305973						
ANR	6306477	Symbol	& ctx -> gb		6305973						
ANR	6306478	Symbol	curr_cell . height		6305973						
ANR	6306479	Symbol	ref_cell -> width		6305973						
ANR	6306480	Symbol	ctx -> last_byte		6305973						
ANR	6306481	Symbol	ref_cell -> height		6305973						
ANR	6306482	Symbol	get_bits_left		6305973						
ANR	6306483	Symbol	ctx -> next_cell_data		6305973						
ANR	6306484	Symbol	curr_cell . mv_ptr		6305973						
ANR	6306485	Symbol	ctx -> need_resync		6305973						
ANR	6306486	Symbol	bytes_used		6305973						
ANR	6306487	Symbol	ctx -> mc_vectors		6305973						
ANR	6306488	Symbol	curr_cell		6305973						
ANR	6306489	Symbol	H_SPLIT		6305973						
ANR	6306490	Symbol	curr_cell . width		6305973						
ANR	6306491	Symbol	avctx		6305973						
ANR	6306492	Symbol	ref_cell		6305973						
ANR	6306493	Symbol	AV_LOG_ERROR		6305973						
ANR	6306494	Symbol	ctx -> gb . buffer		6305973						
ANR	6306495	Symbol	ctx		6305973						
ANR	6306496	Symbol	ref_cell -> xpos		6305973						
ANR	6306497	Symbol	* ref_cell		6305973						
ANR	6306498	Symbol	& curr_cell		6305973						
ANR	6306499	Symbol	get_bits_count		6305973						
ANR	6306500	Symbol	ctx -> gb		6305973						
ANR	6306501	Symbol	* ( ctx -> next_cell_data ++ )		6305973						
ANR	6306502	Symbol	* ctx		6305973						
ANR	6306503	Symbol	depth		6305973						
ANR	6306504	Symbol	strip_width		6305973						
ANR	6306505	Symbol	AVERROR_INVALIDDATA		6305973						
ANR	6306506	Symbol	V_SPLIT		6305973						
