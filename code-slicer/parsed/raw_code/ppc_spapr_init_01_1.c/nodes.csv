command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6643905	File	/home/p4ultr4n/workplace/ReVeal/raw_code/ppc_spapr_init_01_1.c								
ANR	6643906	Function	ppc_spapr_init	1:0:0:8127							
ANR	6643907	FunctionDef	"ppc_spapr_init (ram_addr_t ram_size , const char * boot_device , const char * kernel_filename , const char * kernel_cmdline , const char * initrd_filename , const char * cpu_model)"		6643906	0					
ANR	6643908	CompoundStatement		7:0:317:8127	6643906	0					
ANR	6643909	IdentifierDeclStatement	PowerPCCPU * cpu ;	8:4:323:338	6643906	0	True				
ANR	6643910	IdentifierDecl	* cpu		6643906	0					
ANR	6643911	IdentifierDeclType	PowerPCCPU *		6643906	0					
ANR	6643912	Identifier	cpu		6643906	1					
ANR	6643913	IdentifierDeclStatement	CPUPPCState * env ;	9:4:344:360	6643906	1	True				
ANR	6643914	IdentifierDecl	* env		6643906	0					
ANR	6643915	IdentifierDeclType	CPUPPCState *		6643906	0					
ANR	6643916	Identifier	env		6643906	1					
ANR	6643917	IdentifierDeclStatement	int i ;	10:4:366:371	6643906	2	True				
ANR	6643918	IdentifierDecl	i		6643906	0					
ANR	6643919	IdentifierDeclType	int		6643906	0					
ANR	6643920	Identifier	i		6643906	1					
ANR	6643921	IdentifierDeclStatement	MemoryRegion * sysmem = get_system_memory ( ) ;	11:4:377:419	6643906	3	True				
ANR	6643922	IdentifierDecl	* sysmem = get_system_memory ( )		6643906	0					
ANR	6643923	IdentifierDeclType	MemoryRegion *		6643906	0					
ANR	6643924	Identifier	sysmem		6643906	1					
ANR	6643925	AssignmentExpression	* sysmem = get_system_memory ( )		6643906	2		=			
ANR	6643926	Identifier	sysmem		6643906	0					
ANR	6643927	CallExpression	get_system_memory ( )		6643906	1					
ANR	6643928	Callee	get_system_memory		6643906	0					
ANR	6643929	Identifier	get_system_memory		6643906	0					
ANR	6643930	ArgumentList			6643906	1					
ANR	6643931	IdentifierDeclStatement	"MemoryRegion * ram = g_new ( MemoryRegion , 1 ) ;"	12:4:425:467	6643906	4	True				
ANR	6643932	IdentifierDecl	"* ram = g_new ( MemoryRegion , 1 )"		6643906	0					
ANR	6643933	IdentifierDeclType	MemoryRegion *		6643906	0					
ANR	6643934	Identifier	ram		6643906	1					
ANR	6643935	AssignmentExpression	"* ram = g_new ( MemoryRegion , 1 )"		6643906	2		=			
ANR	6643936	Identifier	ram		6643906	0					
ANR	6643937	CallExpression	"g_new ( MemoryRegion , 1 )"		6643906	1					
ANR	6643938	Callee	g_new		6643906	0					
ANR	6643939	Identifier	g_new		6643906	0					
ANR	6643940	ArgumentList	MemoryRegion		6643906	1					
ANR	6643941	Argument	MemoryRegion		6643906	0					
ANR	6643942	Identifier	MemoryRegion		6643906	0					
ANR	6643943	Argument	1		6643906	1					
ANR	6643944	PrimaryExpression	1		6643906	0					
ANR	6643945	IdentifierDeclStatement	"target_phys_addr_t rma_alloc_size , rma_size ;"	13:4:473:516	6643906	5	True				
ANR	6643946	IdentifierDecl	rma_alloc_size		6643906	0					
ANR	6643947	IdentifierDeclType	target_phys_addr_t		6643906	0					
ANR	6643948	Identifier	rma_alloc_size		6643906	1					
ANR	6643949	IdentifierDecl	rma_size		6643906	1					
ANR	6643950	IdentifierDeclType	target_phys_addr_t		6643906	0					
ANR	6643951	Identifier	rma_size		6643906	1					
ANR	6643952	IdentifierDeclStatement	uint32_t initrd_base = 0 ;	14:4:522:546	6643906	6	True				
ANR	6643953	IdentifierDecl	initrd_base = 0		6643906	0					
ANR	6643954	IdentifierDeclType	uint32_t		6643906	0					
ANR	6643955	Identifier	initrd_base		6643906	1					
ANR	6643956	AssignmentExpression	initrd_base = 0		6643906	2		=			
ANR	6643957	Identifier	initrd_base		6643906	0					
ANR	6643958	PrimaryExpression	0		6643906	1					
ANR	6643959	IdentifierDeclStatement	"long kernel_size = 0 , initrd_size = 0 ;"	15:4:552:589	6643906	7	True				
ANR	6643960	IdentifierDecl	kernel_size = 0		6643906	0					
ANR	6643961	IdentifierDeclType	long		6643906	0					
ANR	6643962	Identifier	kernel_size		6643906	1					
ANR	6643963	AssignmentExpression	kernel_size = 0		6643906	2		=			
ANR	6643964	Identifier	kernel_size		6643906	0					
ANR	6643965	PrimaryExpression	0		6643906	1					
ANR	6643966	IdentifierDecl	initrd_size = 0		6643906	1					
ANR	6643967	IdentifierDeclType	long		6643906	0					
ANR	6643968	Identifier	initrd_size		6643906	1					
ANR	6643969	AssignmentExpression	initrd_size = 0		6643906	2		=			
ANR	6643970	Identifier	initrd_size		6643906	0					
ANR	6643971	PrimaryExpression	0		6643906	1					
ANR	6643972	IdentifierDeclStatement	"long load_limit , rtas_limit , fw_size ;"	16:4:595:631	6643906	8	True				
ANR	6643973	IdentifierDecl	load_limit		6643906	0					
ANR	6643974	IdentifierDeclType	long		6643906	0					
ANR	6643975	Identifier	load_limit		6643906	1					
ANR	6643976	IdentifierDecl	rtas_limit		6643906	1					
ANR	6643977	IdentifierDeclType	long		6643906	0					
ANR	6643978	Identifier	rtas_limit		6643906	1					
ANR	6643979	IdentifierDecl	fw_size		6643906	2					
ANR	6643980	IdentifierDeclType	long		6643906	0					
ANR	6643981	Identifier	fw_size		6643906	1					
ANR	6643982	IdentifierDeclStatement	long pteg_shift = 17 ;	17:4:637:657	6643906	9	True				
ANR	6643983	IdentifierDecl	pteg_shift = 17		6643906	0					
ANR	6643984	IdentifierDeclType	long		6643906	0					
ANR	6643985	Identifier	pteg_shift		6643906	1					
ANR	6643986	AssignmentExpression	pteg_shift = 17		6643906	2		=			
ANR	6643987	Identifier	pteg_shift		6643906	0					
ANR	6643988	PrimaryExpression	17		6643906	1					
ANR	6643989	IdentifierDeclStatement	char * filename ;	18:4:663:677	6643906	10	True				
ANR	6643990	IdentifierDecl	* filename		6643906	0					
ANR	6643991	IdentifierDeclType	char *		6643906	0					
ANR	6643992	Identifier	filename		6643906	1					
ANR	6643993	ExpressionStatement	spapr = g_malloc0 ( sizeof ( * spapr ) )	19:4:683:716	6643906	11	True				
ANR	6643994	AssignmentExpression	spapr = g_malloc0 ( sizeof ( * spapr ) )		6643906	0		=			
ANR	6643995	Identifier	spapr		6643906	0					
ANR	6643996	CallExpression	g_malloc0 ( sizeof ( * spapr ) )		6643906	1					
ANR	6643997	Callee	g_malloc0		6643906	0					
ANR	6643998	Identifier	g_malloc0		6643906	0					
ANR	6643999	ArgumentList	sizeof ( * spapr )		6643906	1					
ANR	6644000	Argument	sizeof ( * spapr )		6643906	0					
ANR	6644001	SizeofExpression	sizeof ( * spapr )		6643906	0					
ANR	6644002	Sizeof	sizeof		6643906	0					
ANR	6644003	UnaryOperationExpression	* spapr		6643906	1					
ANR	6644004	UnaryOperator	*		6643906	0					
ANR	6644005	Identifier	spapr		6643906	1					
ANR	6644006	ExpressionStatement	QLIST_INIT ( & spapr -> phbs )	20:4:722:746	6643906	12	True				
ANR	6644007	CallExpression	QLIST_INIT ( & spapr -> phbs )		6643906	0					
ANR	6644008	Callee	QLIST_INIT		6643906	0					
ANR	6644009	Identifier	QLIST_INIT		6643906	0					
ANR	6644010	ArgumentList	& spapr -> phbs		6643906	1					
ANR	6644011	Argument	& spapr -> phbs		6643906	0					
ANR	6644012	UnaryOperationExpression	& spapr -> phbs		6643906	0					
ANR	6644013	UnaryOperator	&		6643906	0					
ANR	6644014	PtrMemberAccess	spapr -> phbs		6643906	1					
ANR	6644015	Identifier	spapr		6643906	0					
ANR	6644016	Identifier	phbs		6643906	1					
ANR	6644017	ExpressionStatement	cpu_ppc_hypercall = emulate_spapr_hypercall	21:4:752:795	6643906	13	True				
ANR	6644018	AssignmentExpression	cpu_ppc_hypercall = emulate_spapr_hypercall		6643906	0		=			
ANR	6644019	Identifier	cpu_ppc_hypercall		6643906	0					
ANR	6644020	Identifier	emulate_spapr_hypercall		6643906	1					
ANR	6644021	ExpressionStatement	"rma_alloc_size = kvmppc_alloc_rma ( ""ppc_spapr.rma"" , sysmem )"	23:4:837:895	6643906	14	True				
ANR	6644022	AssignmentExpression	"rma_alloc_size = kvmppc_alloc_rma ( ""ppc_spapr.rma"" , sysmem )"		6643906	0		=			
ANR	6644023	Identifier	rma_alloc_size		6643906	0					
ANR	6644024	CallExpression	"kvmppc_alloc_rma ( ""ppc_spapr.rma"" , sysmem )"		6643906	1					
ANR	6644025	Callee	kvmppc_alloc_rma		6643906	0					
ANR	6644026	Identifier	kvmppc_alloc_rma		6643906	0					
ANR	6644027	ArgumentList	"""ppc_spapr.rma"""		6643906	1					
ANR	6644028	Argument	"""ppc_spapr.rma"""		6643906	0					
ANR	6644029	PrimaryExpression	"""ppc_spapr.rma"""		6643906	0					
ANR	6644030	Argument	sysmem		6643906	1					
ANR	6644031	Identifier	sysmem		6643906	0					
ANR	6644032	IfStatement	if ( rma_alloc_size == - 1 )		6643906	15					
ANR	6644033	Condition	rma_alloc_size == - 1	24:8:905:924	6643906	0	True				
ANR	6644034	EqualityExpression	rma_alloc_size == - 1		6643906	0		==			
ANR	6644035	Identifier	rma_alloc_size		6643906	0					
ANR	6644036	UnaryOperationExpression	- 1		6643906	1					
ANR	6644037	UnaryOperator	-		6643906	0					
ANR	6644038	PrimaryExpression	1		6643906	1					
ANR	6644039	CompoundStatement		18:30:609:609	6643906	1					
ANR	6644040	ExpressionStatement	"hw_error ( ""qemu: Unable to create RMA\\n"" )"	25:8:937:977	6643906	0	True				
ANR	6644041	CallExpression	"hw_error ( ""qemu: Unable to create RMA\\n"" )"		6643906	0					
ANR	6644042	Callee	hw_error		6643906	0					
ANR	6644043	Identifier	hw_error		6643906	0					
ANR	6644044	ArgumentList	"""qemu: Unable to create RMA\\n"""		6643906	1					
ANR	6644045	Argument	"""qemu: Unable to create RMA\\n"""		6643906	0					
ANR	6644046	PrimaryExpression	"""qemu: Unable to create RMA\\n"""		6643906	0					
ANR	6644047	ExpressionStatement	exit ( 1 )	26:8:987:994	6643906	1	True				
ANR	6644048	CallExpression	exit ( 1 )		6643906	0					
ANR	6644049	Callee	exit		6643906	0					
ANR	6644050	Identifier	exit		6643906	0					
ANR	6644051	ArgumentList	1		6643906	1					
ANR	6644052	Argument	1		6643906	0					
ANR	6644053	PrimaryExpression	1		6643906	0					
ANR	6644054	IfStatement	if ( rma_alloc_size && ( rma_alloc_size < ram_size ) )		6643906	16					
ANR	6644055	Condition	rma_alloc_size && ( rma_alloc_size < ram_size )	28:8:1010:1054	6643906	0	True				
ANR	6644056	AndExpression	rma_alloc_size && ( rma_alloc_size < ram_size )		6643906	0		&&			
ANR	6644057	Identifier	rma_alloc_size		6643906	0					
ANR	6644058	RelationalExpression	rma_alloc_size < ram_size		6643906	1		<			
ANR	6644059	Identifier	rma_alloc_size		6643906	0					
ANR	6644060	Identifier	ram_size		6643906	1					
ANR	6644061	CompoundStatement		22:55:739:739	6643906	1					
ANR	6644062	ExpressionStatement	rma_size = rma_alloc_size	29:8:1067:1092	6643906	0	True				
ANR	6644063	AssignmentExpression	rma_size = rma_alloc_size		6643906	0		=			
ANR	6644064	Identifier	rma_size		6643906	0					
ANR	6644065	Identifier	rma_alloc_size		6643906	1					
ANR	6644066	ElseStatement	else		6643906	0					
ANR	6644067	CompoundStatement		24:11:787:787	6643906	0					
ANR	6644068	ExpressionStatement	rma_size = ram_size	31:8:1115:1134	6643906	0	True				
ANR	6644069	AssignmentExpression	rma_size = ram_size		6643906	0		=			
ANR	6644070	Identifier	rma_size		6643906	0					
ANR	6644071	Identifier	ram_size		6643906	1					
ANR	6644072	ExpressionStatement	"rtas_limit = MIN ( rma_size , 0x80000000 )"	36:4:1350:1388	6643906	17	True				
ANR	6644073	AssignmentExpression	"rtas_limit = MIN ( rma_size , 0x80000000 )"		6643906	0		=			
ANR	6644074	Identifier	rtas_limit		6643906	0					
ANR	6644075	CallExpression	"MIN ( rma_size , 0x80000000 )"		6643906	1					
ANR	6644076	Callee	MIN		6643906	0					
ANR	6644077	Identifier	MIN		6643906	0					
ANR	6644078	ArgumentList	rma_size		6643906	1					
ANR	6644079	Argument	rma_size		6643906	0					
ANR	6644080	Identifier	rma_size		6643906	0					
ANR	6644081	Argument	0x80000000		6643906	1					
ANR	6644082	PrimaryExpression	0x80000000		6643906	0					
ANR	6644083	ExpressionStatement	spapr -> rtas_addr = rtas_limit - RTAS_MAX_SIZE	37:4:1394:1439	6643906	18	True				
ANR	6644084	AssignmentExpression	spapr -> rtas_addr = rtas_limit - RTAS_MAX_SIZE		6643906	0		=			
ANR	6644085	PtrMemberAccess	spapr -> rtas_addr		6643906	0					
ANR	6644086	Identifier	spapr		6643906	0					
ANR	6644087	Identifier	rtas_addr		6643906	1					
ANR	6644088	AdditiveExpression	rtas_limit - RTAS_MAX_SIZE		6643906	1		-			
ANR	6644089	Identifier	rtas_limit		6643906	0					
ANR	6644090	Identifier	RTAS_MAX_SIZE		6643906	1					
ANR	6644091	ExpressionStatement	spapr -> fdt_addr = spapr -> rtas_addr - FDT_MAX_SIZE	38:4:1445:1494	6643906	19	True				
ANR	6644092	AssignmentExpression	spapr -> fdt_addr = spapr -> rtas_addr - FDT_MAX_SIZE		6643906	0		=			
ANR	6644093	PtrMemberAccess	spapr -> fdt_addr		6643906	0					
ANR	6644094	Identifier	spapr		6643906	0					
ANR	6644095	Identifier	fdt_addr		6643906	1					
ANR	6644096	AdditiveExpression	spapr -> rtas_addr - FDT_MAX_SIZE		6643906	1		-			
ANR	6644097	PtrMemberAccess	spapr -> rtas_addr		6643906	0					
ANR	6644098	Identifier	spapr		6643906	0					
ANR	6644099	Identifier	rtas_addr		6643906	1					
ANR	6644100	Identifier	FDT_MAX_SIZE		6643906	1					
ANR	6644101	ExpressionStatement	load_limit = spapr -> fdt_addr - FW_OVERHEAD	39:4:1500:1542	6643906	20	True				
ANR	6644102	AssignmentExpression	load_limit = spapr -> fdt_addr - FW_OVERHEAD		6643906	0		=			
ANR	6644103	Identifier	load_limit		6643906	0					
ANR	6644104	AdditiveExpression	spapr -> fdt_addr - FW_OVERHEAD		6643906	1		-			
ANR	6644105	PtrMemberAccess	spapr -> fdt_addr		6643906	0					
ANR	6644106	Identifier	spapr		6643906	0					
ANR	6644107	Identifier	fdt_addr		6643906	1					
ANR	6644108	Identifier	FW_OVERHEAD		6643906	1					
ANR	6644109	IfStatement	if ( cpu_model == NULL )		6643906	21					
ANR	6644110	Condition	cpu_model == NULL	41:8:1572:1588	6643906	0	True				
ANR	6644111	EqualityExpression	cpu_model == NULL		6643906	0		==			
ANR	6644112	Identifier	cpu_model		6643906	0					
ANR	6644113	Identifier	NULL		6643906	1					
ANR	6644114	CompoundStatement		35:27:1273:1273	6643906	1					
ANR	6644115	ExpressionStatement	"cpu_model = kvm_enabled ( ) ? ""host"" : ""POWER7"""	42:8:1601:1646	6643906	0	True				
ANR	6644116	AssignmentExpression	"cpu_model = kvm_enabled ( ) ? ""host"" : ""POWER7"""		6643906	0		=			
ANR	6644117	Identifier	cpu_model		6643906	0					
ANR	6644118	ConditionalExpression	"kvm_enabled ( ) ? ""host"" : ""POWER7"""		6643906	1					
ANR	6644119	Condition	kvm_enabled ( )		6643906	0					
ANR	6644120	CallExpression	kvm_enabled ( )		6643906	0					
ANR	6644121	Callee	kvm_enabled		6643906	0					
ANR	6644122	Identifier	kvm_enabled		6643906	0					
ANR	6644123	ArgumentList			6643906	1					
ANR	6644124	PrimaryExpression	"""host"""		6643906	1					
ANR	6644125	PrimaryExpression	"""POWER7"""		6643906	2					
ANR	6644126	ForStatement	for ( i = 0 ; i < smp_cpus ; i ++ )		6643906	22					
ANR	6644127	ForInit	i = 0 ;	44:9:1663:1668	6643906	0	True				
ANR	6644128	AssignmentExpression	i = 0		6643906	0		=			
ANR	6644129	Identifier	i		6643906	0					
ANR	6644130	PrimaryExpression	0		6643906	1					
ANR	6644131	Condition	i < smp_cpus	44:16:1670:1681	6643906	1	True				
ANR	6644132	RelationalExpression	i < smp_cpus		6643906	0		<			
ANR	6644133	Identifier	i		6643906	0					
ANR	6644134	Identifier	smp_cpus		6643906	1					
ANR	6644135	PostIncDecOperationExpression	i ++	44:30:1684:1686	6643906	2	True				
ANR	6644136	Identifier	i		6643906	0					
ANR	6644137	IncDec	++		6643906	1					
ANR	6644138	CompoundStatement		38:35:1371:1371	6643906	3					
ANR	6644139	ExpressionStatement	cpu = cpu_ppc_init ( cpu_model )	45:8:1699:1728	6643906	0	True				
ANR	6644140	AssignmentExpression	cpu = cpu_ppc_init ( cpu_model )		6643906	0		=			
ANR	6644141	Identifier	cpu		6643906	0					
ANR	6644142	CallExpression	cpu_ppc_init ( cpu_model )		6643906	1					
ANR	6644143	Callee	cpu_ppc_init		6643906	0					
ANR	6644144	Identifier	cpu_ppc_init		6643906	0					
ANR	6644145	ArgumentList	cpu_model		6643906	1					
ANR	6644146	Argument	cpu_model		6643906	0					
ANR	6644147	Identifier	cpu_model		6643906	0					
ANR	6644148	IfStatement	if ( cpu == NULL )		6643906	1					
ANR	6644149	Condition	cpu == NULL	46:12:1742:1752	6643906	0	True				
ANR	6644150	EqualityExpression	cpu == NULL		6643906	0		==			
ANR	6644151	Identifier	cpu		6643906	0					
ANR	6644152	Identifier	NULL		6643906	1					
ANR	6644153	CompoundStatement		40:25:1437:1437	6643906	1					
ANR	6644154	ExpressionStatement	"fprintf ( stderr , ""Unable to find PowerPC CPU definition\\n"" )"	47:12:1769:1827	6643906	0	True				
ANR	6644155	CallExpression	"fprintf ( stderr , ""Unable to find PowerPC CPU definition\\n"" )"		6643906	0					
ANR	6644156	Callee	fprintf		6643906	0					
ANR	6644157	Identifier	fprintf		6643906	0					
ANR	6644158	ArgumentList	stderr		6643906	1					
ANR	6644159	Argument	stderr		6643906	0					
ANR	6644160	Identifier	stderr		6643906	0					
ANR	6644161	Argument	"""Unable to find PowerPC CPU definition\\n"""		6643906	1					
ANR	6644162	PrimaryExpression	"""Unable to find PowerPC CPU definition\\n"""		6643906	0					
ANR	6644163	ExpressionStatement	exit ( 1 )	48:12:1841:1848	6643906	1	True				
ANR	6644164	CallExpression	exit ( 1 )		6643906	0					
ANR	6644165	Callee	exit		6643906	0					
ANR	6644166	Identifier	exit		6643906	0					
ANR	6644167	ArgumentList	1		6643906	1					
ANR	6644168	Argument	1		6643906	0					
ANR	6644169	PrimaryExpression	1		6643906	0					
ANR	6644170	ExpressionStatement	env = & cpu -> env	50:8:1868:1883	6643906	2	True				
ANR	6644171	AssignmentExpression	env = & cpu -> env		6643906	0		=			
ANR	6644172	Identifier	env		6643906	0					
ANR	6644173	UnaryOperationExpression	& cpu -> env		6643906	1					
ANR	6644174	UnaryOperator	&		6643906	0					
ANR	6644175	PtrMemberAccess	cpu -> env		6643906	1					
ANR	6644176	Identifier	cpu		6643906	0					
ANR	6644177	Identifier	env		6643906	1					
ANR	6644178	ExpressionStatement	"cpu_ppc_tb_init ( env , TIMEBASE_FREQ )"	52:8:1942:1977	6643906	3	True				
ANR	6644179	CallExpression	"cpu_ppc_tb_init ( env , TIMEBASE_FREQ )"		6643906	0					
ANR	6644180	Callee	cpu_ppc_tb_init		6643906	0					
ANR	6644181	Identifier	cpu_ppc_tb_init		6643906	0					
ANR	6644182	ArgumentList	env		6643906	1					
ANR	6644183	Argument	env		6643906	0					
ANR	6644184	Identifier	env		6643906	0					
ANR	6644185	Argument	TIMEBASE_FREQ		6643906	1					
ANR	6644186	Identifier	TIMEBASE_FREQ		6643906	0					
ANR	6644187	ExpressionStatement	"qemu_register_reset ( spapr_cpu_reset , cpu )"	53:8:1987:2028	6643906	4	True				
ANR	6644188	CallExpression	"qemu_register_reset ( spapr_cpu_reset , cpu )"		6643906	0					
ANR	6644189	Callee	qemu_register_reset		6643906	0					
ANR	6644190	Identifier	qemu_register_reset		6643906	0					
ANR	6644191	ArgumentList	spapr_cpu_reset		6643906	1					
ANR	6644192	Argument	spapr_cpu_reset		6643906	0					
ANR	6644193	Identifier	spapr_cpu_reset		6643906	0					
ANR	6644194	Argument	cpu		6643906	1					
ANR	6644195	Identifier	cpu		6643906	0					
ANR	6644196	ExpressionStatement	env -> hreset_vector = 0x60	54:8:2038:2063	6643906	5	True				
ANR	6644197	AssignmentExpression	env -> hreset_vector = 0x60		6643906	0		=			
ANR	6644198	PtrMemberAccess	env -> hreset_vector		6643906	0					
ANR	6644199	Identifier	env		6643906	0					
ANR	6644200	Identifier	hreset_vector		6643906	1					
ANR	6644201	PrimaryExpression	0x60		6643906	1					
ANR	6644202	ExpressionStatement	env -> hreset_excp_prefix = 0	55:8:2073:2100	6643906	6	True				
ANR	6644203	AssignmentExpression	env -> hreset_excp_prefix = 0		6643906	0		=			
ANR	6644204	PtrMemberAccess	env -> hreset_excp_prefix		6643906	0					
ANR	6644205	Identifier	env		6643906	0					
ANR	6644206	Identifier	hreset_excp_prefix		6643906	1					
ANR	6644207	PrimaryExpression	0		6643906	1					
ANR	6644208	ExpressionStatement	env -> gpr [ 3 ] = env -> cpu_index	56:8:2110:2138	6643906	7	True				
ANR	6644209	AssignmentExpression	env -> gpr [ 3 ] = env -> cpu_index		6643906	0		=			
ANR	6644210	ArrayIndexing	env -> gpr [ 3 ]		6643906	0					
ANR	6644211	PtrMemberAccess	env -> gpr		6643906	0					
ANR	6644212	Identifier	env		6643906	0					
ANR	6644213	Identifier	gpr		6643906	1					
ANR	6644214	PrimaryExpression	3		6643906	1					
ANR	6644215	PtrMemberAccess	env -> cpu_index		6643906	1					
ANR	6644216	Identifier	env		6643906	0					
ANR	6644217	Identifier	cpu_index		6643906	1					
ANR	6644218	ExpressionStatement	spapr -> ram_limit = ram_size	59:4:2173:2200	6643906	23	True				
ANR	6644219	AssignmentExpression	spapr -> ram_limit = ram_size		6643906	0		=			
ANR	6644220	PtrMemberAccess	spapr -> ram_limit		6643906	0					
ANR	6644221	Identifier	spapr		6643906	0					
ANR	6644222	Identifier	ram_limit		6643906	1					
ANR	6644223	Identifier	ram_size		6643906	1					
ANR	6644224	IfStatement	if ( spapr -> ram_limit > rma_alloc_size )		6643906	24					
ANR	6644225	Condition	spapr -> ram_limit > rma_alloc_size	60:8:2210:2242	6643906	0	True				
ANR	6644226	RelationalExpression	spapr -> ram_limit > rma_alloc_size		6643906	0		>			
ANR	6644227	PtrMemberAccess	spapr -> ram_limit		6643906	0					
ANR	6644228	Identifier	spapr		6643906	0					
ANR	6644229	Identifier	ram_limit		6643906	1					
ANR	6644230	Identifier	rma_alloc_size		6643906	1					
ANR	6644231	CompoundStatement		56:8:1986:2044	6643906	1					
ANR	6644232	IdentifierDeclStatement	ram_addr_t nonrma_base = rma_alloc_size ;	61:8:2255:2294	6643906	0	True				
ANR	6644233	IdentifierDecl	nonrma_base = rma_alloc_size		6643906	0					
ANR	6644234	IdentifierDeclType	ram_addr_t		6643906	0					
ANR	6644235	Identifier	nonrma_base		6643906	1					
ANR	6644236	AssignmentExpression	nonrma_base = rma_alloc_size		6643906	2		=			
ANR	6644237	Identifier	rma_alloc_size		6643906	0					
ANR	6644238	Identifier	rma_alloc_size		6643906	1					
ANR	6644239	IdentifierDeclStatement	ram_addr_t nonrma_size = spapr -> ram_limit - rma_alloc_size ;	62:8:2304:2362	6643906	1	True				
ANR	6644240	IdentifierDecl	nonrma_size = spapr -> ram_limit - rma_alloc_size		6643906	0					
ANR	6644241	IdentifierDeclType	ram_addr_t		6643906	0					
ANR	6644242	Identifier	nonrma_size		6643906	1					
ANR	6644243	AssignmentExpression	nonrma_size = spapr -> ram_limit - rma_alloc_size		6643906	2		=			
ANR	6644244	Identifier	nonrma_size		6643906	0					
ANR	6644245	AdditiveExpression	spapr -> ram_limit - rma_alloc_size		6643906	1		-			
ANR	6644246	PtrMemberAccess	spapr -> ram_limit		6643906	0					
ANR	6644247	Identifier	spapr		6643906	0					
ANR	6644248	Identifier	ram_limit		6643906	1					
ANR	6644249	Identifier	rma_alloc_size		6643906	1					
ANR	6644250	ExpressionStatement	"memory_region_init_ram ( ram , ""ppc_spapr.ram"" , nonrma_size )"	63:8:2372:2429	6643906	2	True				
ANR	6644251	CallExpression	"memory_region_init_ram ( ram , ""ppc_spapr.ram"" , nonrma_size )"		6643906	0					
ANR	6644252	Callee	memory_region_init_ram		6643906	0					
ANR	6644253	Identifier	memory_region_init_ram		6643906	0					
ANR	6644254	ArgumentList	ram		6643906	1					
ANR	6644255	Argument	ram		6643906	0					
ANR	6644256	Identifier	ram		6643906	0					
ANR	6644257	Argument	"""ppc_spapr.ram"""		6643906	1					
ANR	6644258	PrimaryExpression	"""ppc_spapr.ram"""		6643906	0					
ANR	6644259	Argument	nonrma_size		6643906	2					
ANR	6644260	Identifier	nonrma_size		6643906	0					
ANR	6644261	ExpressionStatement	vmstate_register_ram_global ( ram )	64:8:2439:2471	6643906	3	True				
ANR	6644262	CallExpression	vmstate_register_ram_global ( ram )		6643906	0					
ANR	6644263	Callee	vmstate_register_ram_global		6643906	0					
ANR	6644264	Identifier	vmstate_register_ram_global		6643906	0					
ANR	6644265	ArgumentList	ram		6643906	1					
ANR	6644266	Argument	ram		6643906	0					
ANR	6644267	Identifier	ram		6643906	0					
ANR	6644268	ExpressionStatement	"memory_region_add_subregion ( sysmem , nonrma_base , ram )"	65:8:2481:2534	6643906	4	True				
ANR	6644269	CallExpression	"memory_region_add_subregion ( sysmem , nonrma_base , ram )"		6643906	0					
ANR	6644270	Callee	memory_region_add_subregion		6643906	0					
ANR	6644271	Identifier	memory_region_add_subregion		6643906	0					
ANR	6644272	ArgumentList	sysmem		6643906	1					
ANR	6644273	Argument	sysmem		6643906	0					
ANR	6644274	Identifier	sysmem		6643906	0					
ANR	6644275	Argument	nonrma_base		6643906	1					
ANR	6644276	Identifier	nonrma_base		6643906	0					
ANR	6644277	Argument	ram		6643906	2					
ANR	6644278	Identifier	ram		6643906	0					
ANR	6644279	Statement	spapr	70:4:2695:2699	6643906	25	True				
ANR	6644280	Statement	->	70:9:2700:2701	6643906	26	True				
ANR	6644281	Statement	htab_size	70:11:2702:2710	6643906	27	True				
ANR	6644282	Statement	=	70:21:2712:2712	6643906	28	True				
ANR	6644283	Statement	1UL	70:23:2714:2716	6643906	29	True				
ANR	6644284	ExpressionStatement	L << ( pteg_shift + 7 )	70:26:2717:2738	6643906	30	True				
ANR	6644285	ShiftExpression	L << ( pteg_shift + 7 )		6643906	0		<<			
ANR	6644286	Identifier	L		6643906	0					
ANR	6644287	AdditiveExpression	pteg_shift + 7		6643906	1		+			
ANR	6644288	Identifier	pteg_shift		6643906	0					
ANR	6644289	PrimaryExpression	7		6643906	1					
ANR	6644290	ExpressionStatement	"spapr -> htab = qemu_memalign ( spapr -> htab_size , spapr -> htab_size )"	71:4:2744:2807	6643906	31	True				
ANR	6644291	AssignmentExpression	"spapr -> htab = qemu_memalign ( spapr -> htab_size , spapr -> htab_size )"		6643906	0		=			
ANR	6644292	PtrMemberAccess	spapr -> htab		6643906	0					
ANR	6644293	Identifier	spapr		6643906	0					
ANR	6644294	Identifier	htab		6643906	1					
ANR	6644295	CallExpression	"qemu_memalign ( spapr -> htab_size , spapr -> htab_size )"		6643906	1					
ANR	6644296	Callee	qemu_memalign		6643906	0					
ANR	6644297	Identifier	qemu_memalign		6643906	0					
ANR	6644298	ArgumentList	spapr -> htab_size		6643906	1					
ANR	6644299	Argument	spapr -> htab_size		6643906	0					
ANR	6644300	PtrMemberAccess	spapr -> htab_size		6643906	0					
ANR	6644301	Identifier	spapr		6643906	0					
ANR	6644302	Identifier	htab_size		6643906	1					
ANR	6644303	Argument	spapr -> htab_size		6643906	1					
ANR	6644304	PtrMemberAccess	spapr -> htab_size		6643906	0					
ANR	6644305	Identifier	spapr		6643906	0					
ANR	6644306	Identifier	htab_size		6643906	1					
ANR	6644307	ForStatement	for ( env = first_cpu ; env != NULL ; env = env -> next_cpu )		6643906	32					
ANR	6644308	ForInit	env = first_cpu ;	72:9:2818:2833	6643906	0	True				
ANR	6644309	AssignmentExpression	env = first_cpu		6643906	0		=			
ANR	6644310	Identifier	env		6643906	0					
ANR	6644311	Identifier	first_cpu		6643906	1					
ANR	6644312	Condition	env != NULL	72:26:2835:2845	6643906	1	True				
ANR	6644313	EqualityExpression	env != NULL		6643906	0		!=			
ANR	6644314	Identifier	env		6643906	0					
ANR	6644315	Identifier	NULL		6643906	1					
ANR	6644316	AssignmentExpression	env = env -> next_cpu	72:39:2848:2866	6643906	2	True	=			
ANR	6644317	Identifier	env		6643906	0					
ANR	6644318	PtrMemberAccess	env -> next_cpu		6643906	1					
ANR	6644319	Identifier	env		6643906	0					
ANR	6644320	Identifier	next_cpu		6643906	1					
ANR	6644321	CompoundStatement		66:60:2551:2551	6643906	3					
ANR	6644322	ExpressionStatement	env -> external_htab = spapr -> htab	73:8:2879:2911	6643906	0	True				
ANR	6644323	AssignmentExpression	env -> external_htab = spapr -> htab		6643906	0		=			
ANR	6644324	PtrMemberAccess	env -> external_htab		6643906	0					
ANR	6644325	Identifier	env		6643906	0					
ANR	6644326	Identifier	external_htab		6643906	1					
ANR	6644327	PtrMemberAccess	spapr -> htab		6643906	1					
ANR	6644328	Identifier	spapr		6643906	0					
ANR	6644329	Identifier	htab		6643906	1					
ANR	6644330	ExpressionStatement	env -> htab_base = - 1	74:8:2921:2940	6643906	1	True				
ANR	6644331	AssignmentExpression	env -> htab_base = - 1		6643906	0		=			
ANR	6644332	PtrMemberAccess	env -> htab_base		6643906	0					
ANR	6644333	Identifier	env		6643906	0					
ANR	6644334	Identifier	htab_base		6643906	1					
ANR	6644335	UnaryOperationExpression	- 1		6643906	1					
ANR	6644336	UnaryOperator	-		6643906	0					
ANR	6644337	PrimaryExpression	1		6643906	1					
ANR	6644338	ExpressionStatement	env -> htab_mask = spapr -> htab_size - 1	75:8:2950:2987	6643906	2	True				
ANR	6644339	AssignmentExpression	env -> htab_mask = spapr -> htab_size - 1		6643906	0		=			
ANR	6644340	PtrMemberAccess	env -> htab_mask		6643906	0					
ANR	6644341	Identifier	env		6643906	0					
ANR	6644342	Identifier	htab_mask		6643906	1					
ANR	6644343	AdditiveExpression	spapr -> htab_size - 1		6643906	1		-			
ANR	6644344	PtrMemberAccess	spapr -> htab_size		6643906	0					
ANR	6644345	Identifier	spapr		6643906	0					
ANR	6644346	Identifier	htab_size		6643906	1					
ANR	6644347	PrimaryExpression	1		6643906	1					
ANR	6644348	ExpressionStatement	env -> spr [ SPR_SDR1 ] = ( unsigned long ) spapr -> htab | ( ( pteg_shift + 7 ) - 18 )	77:8:3044:3146	6643906	3	True				
ANR	6644349	AssignmentExpression	env -> spr [ SPR_SDR1 ] = ( unsigned long ) spapr -> htab | ( ( pteg_shift + 7 ) - 18 )		6643906	0		=			
ANR	6644350	ArrayIndexing	env -> spr [ SPR_SDR1 ]		6643906	0					
ANR	6644351	PtrMemberAccess	env -> spr		6643906	0					
ANR	6644352	Identifier	env		6643906	0					
ANR	6644353	Identifier	spr		6643906	1					
ANR	6644354	Identifier	SPR_SDR1		6643906	1					
ANR	6644355	InclusiveOrExpression	( unsigned long ) spapr -> htab | ( ( pteg_shift + 7 ) - 18 )		6643906	1		|			
ANR	6644356	CastExpression	( unsigned long ) spapr -> htab		6643906	0					
ANR	6644357	CastTarget	unsigned long		6643906	0					
ANR	6644358	PtrMemberAccess	spapr -> htab		6643906	1					
ANR	6644359	Identifier	spapr		6643906	0					
ANR	6644360	Identifier	htab		6643906	1					
ANR	6644361	AdditiveExpression	( pteg_shift + 7 ) - 18		6643906	1		-			
ANR	6644362	AdditiveExpression	pteg_shift + 7		6643906	0		+			
ANR	6644363	Identifier	pteg_shift		6643906	0					
ANR	6644364	PrimaryExpression	7		6643906	1					
ANR	6644365	PrimaryExpression	18		6643906	1					
ANR	6644366	ExpressionStatement	env -> spr [ SPR_HIOR ] = 0	79:8:3156:3178	6643906	4	True				
ANR	6644367	AssignmentExpression	env -> spr [ SPR_HIOR ] = 0		6643906	0		=			
ANR	6644368	ArrayIndexing	env -> spr [ SPR_HIOR ]		6643906	0					
ANR	6644369	PtrMemberAccess	env -> spr		6643906	0					
ANR	6644370	Identifier	env		6643906	0					
ANR	6644371	Identifier	spr		6643906	1					
ANR	6644372	Identifier	SPR_HIOR		6643906	1					
ANR	6644373	PrimaryExpression	0		6643906	1					
ANR	6644374	IfStatement	if ( kvm_enabled ( ) )		6643906	5					
ANR	6644375	Condition	kvm_enabled ( )	80:12:3192:3204	6643906	0	True				
ANR	6644376	CallExpression	kvm_enabled ( )		6643906	0					
ANR	6644377	Callee	kvm_enabled		6643906	0					
ANR	6644378	Identifier	kvm_enabled		6643906	0					
ANR	6644379	ArgumentList			6643906	1					
ANR	6644380	CompoundStatement		74:27:2889:2889	6643906	1					
ANR	6644381	ExpressionStatement	kvmppc_set_papr ( env )	81:12:3221:3241	6643906	0	True				
ANR	6644382	CallExpression	kvmppc_set_papr ( env )		6643906	0					
ANR	6644383	Callee	kvmppc_set_papr		6643906	0					
ANR	6644384	Identifier	kvmppc_set_papr		6643906	0					
ANR	6644385	ArgumentList	env		6643906	1					
ANR	6644386	Argument	env		6643906	0					
ANR	6644387	Identifier	env		6643906	0					
ANR	6644388	ExpressionStatement	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , ""spapr-rtas.bin"" )"	84:4:3263:3327	6643906	33	True				
ANR	6644389	AssignmentExpression	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , ""spapr-rtas.bin"" )"		6643906	0		=			
ANR	6644390	Identifier	filename		6643906	0					
ANR	6644391	CallExpression	"qemu_find_file ( QEMU_FILE_TYPE_BIOS , ""spapr-rtas.bin"" )"		6643906	1					
ANR	6644392	Callee	qemu_find_file		6643906	0					
ANR	6644393	Identifier	qemu_find_file		6643906	0					
ANR	6644394	ArgumentList	QEMU_FILE_TYPE_BIOS		6643906	1					
ANR	6644395	Argument	QEMU_FILE_TYPE_BIOS		6643906	0					
ANR	6644396	Identifier	QEMU_FILE_TYPE_BIOS		6643906	0					
ANR	6644397	Argument	"""spapr-rtas.bin"""		6643906	1					
ANR	6644398	PrimaryExpression	"""spapr-rtas.bin"""		6643906	0					
ANR	6644399	ExpressionStatement	"spapr -> rtas_size = load_image_targphys ( filename , spapr -> rtas_addr , rtas_limit - spapr -> rtas_addr )"	85:4:3333:3473	6643906	34	True				
ANR	6644400	AssignmentExpression	"spapr -> rtas_size = load_image_targphys ( filename , spapr -> rtas_addr , rtas_limit - spapr -> rtas_addr )"		6643906	0		=			
ANR	6644401	PtrMemberAccess	spapr -> rtas_size		6643906	0					
ANR	6644402	Identifier	spapr		6643906	0					
ANR	6644403	Identifier	rtas_size		6643906	1					
ANR	6644404	CallExpression	"load_image_targphys ( filename , spapr -> rtas_addr , rtas_limit - spapr -> rtas_addr )"		6643906	1					
ANR	6644405	Callee	load_image_targphys		6643906	0					
ANR	6644406	Identifier	load_image_targphys		6643906	0					
ANR	6644407	ArgumentList	filename		6643906	1					
ANR	6644408	Argument	filename		6643906	0					
ANR	6644409	Identifier	filename		6643906	0					
ANR	6644410	Argument	spapr -> rtas_addr		6643906	1					
ANR	6644411	PtrMemberAccess	spapr -> rtas_addr		6643906	0					
ANR	6644412	Identifier	spapr		6643906	0					
ANR	6644413	Identifier	rtas_addr		6643906	1					
ANR	6644414	Argument	rtas_limit - spapr -> rtas_addr		6643906	2					
ANR	6644415	AdditiveExpression	rtas_limit - spapr -> rtas_addr		6643906	0		-			
ANR	6644416	Identifier	rtas_limit		6643906	0					
ANR	6644417	PtrMemberAccess	spapr -> rtas_addr		6643906	1					
ANR	6644418	Identifier	spapr		6643906	0					
ANR	6644419	Identifier	rtas_addr		6643906	1					
ANR	6644420	IfStatement	if ( spapr -> rtas_size < 0 )		6643906	35					
ANR	6644421	Condition	spapr -> rtas_size < 0	87:8:3483:3502	6643906	0	True				
ANR	6644422	RelationalExpression	spapr -> rtas_size < 0		6643906	0		<			
ANR	6644423	PtrMemberAccess	spapr -> rtas_size		6643906	0					
ANR	6644424	Identifier	spapr		6643906	0					
ANR	6644425	Identifier	rtas_size		6643906	1					
ANR	6644426	PrimaryExpression	0		6643906	1					
ANR	6644427	CompoundStatement		81:30:3187:3187	6643906	1					
ANR	6644428	ExpressionStatement	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"	88:8:3515:3574	6643906	0	True				
ANR	6644429	CallExpression	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"		6643906	0					
ANR	6644430	Callee	hw_error		6643906	0					
ANR	6644431	Identifier	hw_error		6643906	0					
ANR	6644432	ArgumentList	"""qemu: could not load LPAR rtas '%s'\\n"""		6643906	1					
ANR	6644433	Argument	"""qemu: could not load LPAR rtas '%s'\\n"""		6643906	0					
ANR	6644434	PrimaryExpression	"""qemu: could not load LPAR rtas '%s'\\n"""		6643906	0					
ANR	6644435	Argument	filename		6643906	1					
ANR	6644436	Identifier	filename		6643906	0					
ANR	6644437	ExpressionStatement	exit ( 1 )	89:8:3584:3591	6643906	1	True				
ANR	6644438	CallExpression	exit ( 1 )		6643906	0					
ANR	6644439	Callee	exit		6643906	0					
ANR	6644440	Identifier	exit		6643906	0					
ANR	6644441	ArgumentList	1		6643906	1					
ANR	6644442	Argument	1		6643906	0					
ANR	6644443	PrimaryExpression	1		6643906	0					
ANR	6644444	IfStatement	if ( spapr -> rtas_size > RTAS_MAX_SIZE )		6643906	36					
ANR	6644445	Condition	spapr -> rtas_size > RTAS_MAX_SIZE	91:8:3607:3638	6643906	0	True				
ANR	6644446	RelationalExpression	spapr -> rtas_size > RTAS_MAX_SIZE		6643906	0		>			
ANR	6644447	PtrMemberAccess	spapr -> rtas_size		6643906	0					
ANR	6644448	Identifier	spapr		6643906	0					
ANR	6644449	Identifier	rtas_size		6643906	1					
ANR	6644450	Identifier	RTAS_MAX_SIZE		6643906	1					
ANR	6644451	CompoundStatement		85:42:3323:3323	6643906	1					
ANR	6644452	ExpressionStatement	"hw_error ( ""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"" , spapr -> rtas_size , RTAS_MAX_SIZE )"	92:8:3651:3755	6643906	0	True				
ANR	6644453	CallExpression	"hw_error ( ""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"" , spapr -> rtas_size , RTAS_MAX_SIZE )"		6643906	0					
ANR	6644454	Callee	hw_error		6643906	0					
ANR	6644455	Identifier	hw_error		6643906	0					
ANR	6644456	ArgumentList	"""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"""		6643906	1					
ANR	6644457	Argument	"""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"""		6643906	0					
ANR	6644458	PrimaryExpression	"""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"""		6643906	0					
ANR	6644459	Argument	spapr -> rtas_size		6643906	1					
ANR	6644460	PtrMemberAccess	spapr -> rtas_size		6643906	0					
ANR	6644461	Identifier	spapr		6643906	0					
ANR	6644462	Identifier	rtas_size		6643906	1					
ANR	6644463	Argument	RTAS_MAX_SIZE		6643906	2					
ANR	6644464	Identifier	RTAS_MAX_SIZE		6643906	0					
ANR	6644465	ExpressionStatement	exit ( 1 )	94:8:3765:3772	6643906	1	True				
ANR	6644466	CallExpression	exit ( 1 )		6643906	0					
ANR	6644467	Callee	exit		6643906	0					
ANR	6644468	Identifier	exit		6643906	0					
ANR	6644469	ArgumentList	1		6643906	1					
ANR	6644470	Argument	1		6643906	0					
ANR	6644471	PrimaryExpression	1		6643906	0					
ANR	6644472	ExpressionStatement	g_free ( filename )	96:4:3784:3800	6643906	37	True				
ANR	6644473	CallExpression	g_free ( filename )		6643906	0					
ANR	6644474	Callee	g_free		6643906	0					
ANR	6644475	Identifier	g_free		6643906	0					
ANR	6644476	ArgumentList	filename		6643906	1					
ANR	6644477	Argument	filename		6643906	0					
ANR	6644478	Identifier	filename		6643906	0					
ANR	6644479	ExpressionStatement	spapr -> icp = xics_system_init ( XICS_IRQS )	98:4:3844:3884	6643906	38	True				
ANR	6644480	AssignmentExpression	spapr -> icp = xics_system_init ( XICS_IRQS )		6643906	0		=			
ANR	6644481	PtrMemberAccess	spapr -> icp		6643906	0					
ANR	6644482	Identifier	spapr		6643906	0					
ANR	6644483	Identifier	icp		6643906	1					
ANR	6644484	CallExpression	xics_system_init ( XICS_IRQS )		6643906	1					
ANR	6644485	Callee	xics_system_init		6643906	0					
ANR	6644486	Identifier	xics_system_init		6643906	0					
ANR	6644487	ArgumentList	XICS_IRQS		6643906	1					
ANR	6644488	Argument	XICS_IRQS		6643906	0					
ANR	6644489	Identifier	XICS_IRQS		6643906	0					
ANR	6644490	ExpressionStatement	spapr -> next_irq = 16	99:4:3890:3910	6643906	39	True				
ANR	6644491	AssignmentExpression	spapr -> next_irq = 16		6643906	0		=			
ANR	6644492	PtrMemberAccess	spapr -> next_irq		6643906	0					
ANR	6644493	Identifier	spapr		6643906	0					
ANR	6644494	Identifier	next_irq		6643906	1					
ANR	6644495	PrimaryExpression	16		6643906	1					
ANR	6644496	ExpressionStatement	spapr -> vio_bus = spapr_vio_bus_init ( )	101:4:3941:3978	6643906	40	True				
ANR	6644497	AssignmentExpression	spapr -> vio_bus = spapr_vio_bus_init ( )		6643906	0		=			
ANR	6644498	PtrMemberAccess	spapr -> vio_bus		6643906	0					
ANR	6644499	Identifier	spapr		6643906	0					
ANR	6644500	Identifier	vio_bus		6643906	1					
ANR	6644501	CallExpression	spapr_vio_bus_init ( )		6643906	1					
ANR	6644502	Callee	spapr_vio_bus_init		6643906	0					
ANR	6644503	Identifier	spapr_vio_bus_init		6643906	0					
ANR	6644504	ArgumentList			6643906	1					
ANR	6644505	ForStatement	for ( i = 0 ; i < MAX_SERIAL_PORTS ; i ++ )		6643906	41					
ANR	6644506	ForInit	i = 0 ;	102:9:3989:3994	6643906	0	True				
ANR	6644507	AssignmentExpression	i = 0		6643906	0		=			
ANR	6644508	Identifier	i		6643906	0					
ANR	6644509	PrimaryExpression	0		6643906	1					
ANR	6644510	Condition	i < MAX_SERIAL_PORTS	102:16:3996:4015	6643906	1	True				
ANR	6644511	RelationalExpression	i < MAX_SERIAL_PORTS		6643906	0		<			
ANR	6644512	Identifier	i		6643906	0					
ANR	6644513	Identifier	MAX_SERIAL_PORTS		6643906	1					
ANR	6644514	PostIncDecOperationExpression	i ++	102:38:4018:4020	6643906	2	True				
ANR	6644515	Identifier	i		6643906	0					
ANR	6644516	IncDec	++		6643906	1					
ANR	6644517	CompoundStatement		96:43:3705:3705	6643906	3					
ANR	6644518	IfStatement	if ( serial_hds [ i ] )		6643906	0					
ANR	6644519	Condition	serial_hds [ i ]	103:12:4037:4049	6643906	0	True				
ANR	6644520	ArrayIndexing	serial_hds [ i ]		6643906	0					
ANR	6644521	Identifier	serial_hds		6643906	0					
ANR	6644522	Identifier	i		6643906	1					
ANR	6644523	CompoundStatement		97:27:3734:3734	6643906	1					
ANR	6644524	ExpressionStatement	"spapr_vty_create ( spapr -> vio_bus , serial_hds [ i ] )"	104:12:4066:4113	6643906	0	True				
ANR	6644525	CallExpression	"spapr_vty_create ( spapr -> vio_bus , serial_hds [ i ] )"		6643906	0					
ANR	6644526	Callee	spapr_vty_create		6643906	0					
ANR	6644527	Identifier	spapr_vty_create		6643906	0					
ANR	6644528	ArgumentList	spapr -> vio_bus		6643906	1					
ANR	6644529	Argument	spapr -> vio_bus		6643906	0					
ANR	6644530	PtrMemberAccess	spapr -> vio_bus		6643906	0					
ANR	6644531	Identifier	spapr		6643906	0					
ANR	6644532	Identifier	vio_bus		6643906	1					
ANR	6644533	Argument	serial_hds [ i ]		6643906	1					
ANR	6644534	ArrayIndexing	serial_hds [ i ]		6643906	0					
ANR	6644535	Identifier	serial_hds		6643906	0					
ANR	6644536	Identifier	i		6643906	1					
ANR	6644537	ExpressionStatement	"spapr_create_phb ( spapr , ""pci"" , SPAPR_PCI_BUID , SPAPR_PCI_MEM_WIN_ADDR , SPAPR_PCI_MEM_WIN_SIZE , SPAPR_PCI_IO_WIN_ADDR )"	108:4:4156:4336	6643906	42	True				
ANR	6644538	CallExpression	"spapr_create_phb ( spapr , ""pci"" , SPAPR_PCI_BUID , SPAPR_PCI_MEM_WIN_ADDR , SPAPR_PCI_MEM_WIN_SIZE , SPAPR_PCI_IO_WIN_ADDR )"		6643906	0					
ANR	6644539	Callee	spapr_create_phb		6643906	0					
ANR	6644540	Identifier	spapr_create_phb		6643906	0					
ANR	6644541	ArgumentList	spapr		6643906	1					
ANR	6644542	Argument	spapr		6643906	0					
ANR	6644543	Identifier	spapr		6643906	0					
ANR	6644544	Argument	"""pci"""		6643906	1					
ANR	6644545	PrimaryExpression	"""pci"""		6643906	0					
ANR	6644546	Argument	SPAPR_PCI_BUID		6643906	2					
ANR	6644547	Identifier	SPAPR_PCI_BUID		6643906	0					
ANR	6644548	Argument	SPAPR_PCI_MEM_WIN_ADDR		6643906	3					
ANR	6644549	Identifier	SPAPR_PCI_MEM_WIN_ADDR		6643906	0					
ANR	6644550	Argument	SPAPR_PCI_MEM_WIN_SIZE		6643906	4					
ANR	6644551	Identifier	SPAPR_PCI_MEM_WIN_SIZE		6643906	0					
ANR	6644552	Argument	SPAPR_PCI_IO_WIN_ADDR		6643906	5					
ANR	6644553	Identifier	SPAPR_PCI_IO_WIN_ADDR		6643906	0					
ANR	6644554	ForStatement	for ( i = 0 ; i < nb_nics ; i ++ )		6643906	43					
ANR	6644555	ForInit	i = 0 ;	112:9:4347:4352	6643906	0	True				
ANR	6644556	AssignmentExpression	i = 0		6643906	0		=			
ANR	6644557	Identifier	i		6643906	0					
ANR	6644558	PrimaryExpression	0		6643906	1					
ANR	6644559	Condition	i < nb_nics	112:16:4354:4364	6643906	1	True				
ANR	6644560	RelationalExpression	i < nb_nics		6643906	0		<			
ANR	6644561	Identifier	i		6643906	0					
ANR	6644562	Identifier	nb_nics		6643906	1					
ANR	6644563	PostIncDecOperationExpression	i ++	112:29:4367:4369	6643906	2	True				
ANR	6644564	Identifier	i		6643906	0					
ANR	6644565	IncDec	++		6643906	1					
ANR	6644566	CompoundStatement		107:8:4064:4090	6643906	3					
ANR	6644567	IdentifierDeclStatement	NICInfo * nd = & nd_table [ i ] ;	113:8:4382:4408	6643906	0	True				
ANR	6644568	IdentifierDecl	* nd = & nd_table [ i ]		6643906	0					
ANR	6644569	IdentifierDeclType	NICInfo *		6643906	0					
ANR	6644570	Identifier	nd		6643906	1					
ANR	6644571	AssignmentExpression	* nd = & nd_table [ i ]		6643906	2		=			
ANR	6644572	Identifier	nd		6643906	0					
ANR	6644573	UnaryOperationExpression	& nd_table [ i ]		6643906	1					
ANR	6644574	UnaryOperator	&		6643906	0					
ANR	6644575	ArrayIndexing	nd_table [ i ]		6643906	1					
ANR	6644576	Identifier	nd_table		6643906	0					
ANR	6644577	Identifier	i		6643906	1					
ANR	6644578	IfStatement	if ( ! nd -> model )		6643906	1					
ANR	6644579	Condition	! nd -> model	114:12:4422:4431	6643906	0	True				
ANR	6644580	UnaryOperationExpression	! nd -> model		6643906	0					
ANR	6644581	UnaryOperator	!		6643906	0					
ANR	6644582	PtrMemberAccess	nd -> model		6643906	1					
ANR	6644583	Identifier	nd		6643906	0					
ANR	6644584	Identifier	model		6643906	1					
ANR	6644585	CompoundStatement		108:24:4116:4116	6643906	1					
ANR	6644586	ExpressionStatement	"nd -> model = g_strdup ( ""ibmveth"" )"	115:12:4448:4479	6643906	0	True				
ANR	6644587	AssignmentExpression	"nd -> model = g_strdup ( ""ibmveth"" )"		6643906	0		=			
ANR	6644588	PtrMemberAccess	nd -> model		6643906	0					
ANR	6644589	Identifier	nd		6643906	0					
ANR	6644590	Identifier	model		6643906	1					
ANR	6644591	CallExpression	"g_strdup ( ""ibmveth"" )"		6643906	1					
ANR	6644592	Callee	g_strdup		6643906	0					
ANR	6644593	Identifier	g_strdup		6643906	0					
ANR	6644594	ArgumentList	"""ibmveth"""		6643906	1					
ANR	6644595	Argument	"""ibmveth"""		6643906	0					
ANR	6644596	PrimaryExpression	"""ibmveth"""		6643906	0					
ANR	6644597	IfStatement	"if ( strcmp ( nd -> model , ""ibmveth"" ) == 0 )"		6643906	2					
ANR	6644598	Condition	"strcmp ( nd -> model , ""ibmveth"" ) == 0"	117:12:4503:4535	6643906	0	True				
ANR	6644599	EqualityExpression	"strcmp ( nd -> model , ""ibmveth"" ) == 0"		6643906	0		==			
ANR	6644600	CallExpression	"strcmp ( nd -> model , ""ibmveth"" )"		6643906	0					
ANR	6644601	Callee	strcmp		6643906	0					
ANR	6644602	Identifier	strcmp		6643906	0					
ANR	6644603	ArgumentList	nd -> model		6643906	1					
ANR	6644604	Argument	nd -> model		6643906	0					
ANR	6644605	PtrMemberAccess	nd -> model		6643906	0					
ANR	6644606	Identifier	nd		6643906	0					
ANR	6644607	Identifier	model		6643906	1					
ANR	6644608	Argument	"""ibmveth"""		6643906	1					
ANR	6644609	PrimaryExpression	"""ibmveth"""		6643906	0					
ANR	6644610	PrimaryExpression	0		6643906	1					
ANR	6644611	CompoundStatement		111:47:4220:4220	6643906	1					
ANR	6644612	ExpressionStatement	"spapr_vlan_create ( spapr -> vio_bus , nd )"	118:12:4552:4589	6643906	0	True				
ANR	6644613	CallExpression	"spapr_vlan_create ( spapr -> vio_bus , nd )"		6643906	0					
ANR	6644614	Callee	spapr_vlan_create		6643906	0					
ANR	6644615	Identifier	spapr_vlan_create		6643906	0					
ANR	6644616	ArgumentList	spapr -> vio_bus		6643906	1					
ANR	6644617	Argument	spapr -> vio_bus		6643906	0					
ANR	6644618	PtrMemberAccess	spapr -> vio_bus		6643906	0					
ANR	6644619	Identifier	spapr		6643906	0					
ANR	6644620	Identifier	vio_bus		6643906	1					
ANR	6644621	Argument	nd		6643906	1					
ANR	6644622	Identifier	nd		6643906	0					
ANR	6644623	ElseStatement	else		6643906	0					
ANR	6644624	CompoundStatement		113:15:4288:4288	6643906	0					
ANR	6644625	ExpressionStatement	"pci_nic_init_nofail ( & nd_table [ i ] , nd -> model , NULL )"	120:12:4620:4670	6643906	0	True				
ANR	6644626	CallExpression	"pci_nic_init_nofail ( & nd_table [ i ] , nd -> model , NULL )"		6643906	0					
ANR	6644627	Callee	pci_nic_init_nofail		6643906	0					
ANR	6644628	Identifier	pci_nic_init_nofail		6643906	0					
ANR	6644629	ArgumentList	& nd_table [ i ]		6643906	1					
ANR	6644630	Argument	& nd_table [ i ]		6643906	0					
ANR	6644631	UnaryOperationExpression	& nd_table [ i ]		6643906	0					
ANR	6644632	UnaryOperator	&		6643906	0					
ANR	6644633	ArrayIndexing	nd_table [ i ]		6643906	1					
ANR	6644634	Identifier	nd_table		6643906	0					
ANR	6644635	Identifier	i		6643906	1					
ANR	6644636	Argument	nd -> model		6643906	1					
ANR	6644637	PtrMemberAccess	nd -> model		6643906	0					
ANR	6644638	Identifier	nd		6643906	0					
ANR	6644639	Identifier	model		6643906	1					
ANR	6644640	Argument	NULL		6643906	2					
ANR	6644641	Identifier	NULL		6643906	0					
ANR	6644642	ForStatement	for ( i = 0 ; i <= drive_get_max_bus ( IF_SCSI ) ; i ++ )		6643906	44					
ANR	6644643	ForInit	i = 0 ;	123:9:4697:4702	6643906	0	True				
ANR	6644644	AssignmentExpression	i = 0		6643906	0		=			
ANR	6644645	Identifier	i		6643906	0					
ANR	6644646	PrimaryExpression	0		6643906	1					
ANR	6644647	Condition	i <= drive_get_max_bus ( IF_SCSI )	123:16:4704:4734	6643906	1	True				
ANR	6644648	RelationalExpression	i <= drive_get_max_bus ( IF_SCSI )		6643906	0		<=			
ANR	6644649	Identifier	i		6643906	0					
ANR	6644650	CallExpression	drive_get_max_bus ( IF_SCSI )		6643906	1					
ANR	6644651	Callee	drive_get_max_bus		6643906	0					
ANR	6644652	Identifier	drive_get_max_bus		6643906	0					
ANR	6644653	ArgumentList	IF_SCSI		6643906	1					
ANR	6644654	Argument	IF_SCSI		6643906	0					
ANR	6644655	Identifier	IF_SCSI		6643906	0					
ANR	6644656	PostIncDecOperationExpression	i ++	123:49:4737:4739	6643906	2	True				
ANR	6644657	Identifier	i		6643906	0					
ANR	6644658	IncDec	++		6643906	1					
ANR	6644659	CompoundStatement		117:54:4424:4424	6643906	3					
ANR	6644660	ExpressionStatement	spapr_vscsi_create ( spapr -> vio_bus )	124:8:4752:4786	6643906	0	True				
ANR	6644661	CallExpression	spapr_vscsi_create ( spapr -> vio_bus )		6643906	0					
ANR	6644662	Callee	spapr_vscsi_create		6643906	0					
ANR	6644663	Identifier	spapr_vscsi_create		6643906	0					
ANR	6644664	ArgumentList	spapr -> vio_bus		6643906	1					
ANR	6644665	Argument	spapr -> vio_bus		6643906	0					
ANR	6644666	PtrMemberAccess	spapr -> vio_bus		6643906	0					
ANR	6644667	Identifier	spapr		6643906	0					
ANR	6644668	Identifier	vio_bus		6643906	1					
ANR	6644669	IfStatement	if ( rma_size < ( MIN_RMA_SLOF << 20 ) )		6643906	45					
ANR	6644670	Condition	rma_size < ( MIN_RMA_SLOF << 20 )	126:8:4802:4832	6643906	0	True				
ANR	6644671	RelationalExpression	rma_size < ( MIN_RMA_SLOF << 20 )		6643906	0		<			
ANR	6644672	Identifier	rma_size		6643906	0					
ANR	6644673	ShiftExpression	MIN_RMA_SLOF << 20		6643906	1		<<			
ANR	6644674	Identifier	MIN_RMA_SLOF		6643906	0					
ANR	6644675	PrimaryExpression	20		6643906	1					
ANR	6644676	CompoundStatement		120:41:4517:4517	6643906	1					
ANR	6644677	Statement	fprintf	127:8:4845:4851	6643906	0	True				
ANR	6644678	Statement	(	127:15:4852:4852	6643906	1	True				
ANR	6644679	Statement	stderr	127:16:4853:4858	6643906	2	True				
ANR	6644680	Statement	","	127:22:4859:4859	6643906	3	True				
ANR	6644681	Statement	"""qemu: pSeries SLOF firmware requires >= """	127:24:4861:4902	6643906	4	True				
ANR	6644682	Statement	"""%ldM guest RMA (Real Mode Area memory)\\n"""	128:16:4920:4961	6643906	5	True				
ANR	6644683	Statement	","	128:58:4962:4962	6643906	6	True				
ANR	6644684	Statement	MIN_RMA_SLOF	128:60:4964:4975	6643906	7	True				
ANR	6644685	Statement	)	128:72:4976:4976	6643906	8	True				
ANR	6644686	ExpressionStatement		128:73:4977:4977	6643906	9	True				
ANR	6644687	ExpressionStatement	exit ( 1 )	129:8:4987:4994	6643906	10	True				
ANR	6644688	CallExpression	exit ( 1 )		6643906	0					
ANR	6644689	Callee	exit		6643906	0					
ANR	6644690	Identifier	exit		6643906	0					
ANR	6644691	ArgumentList	1		6643906	1					
ANR	6644692	Argument	1		6643906	0					
ANR	6644693	PrimaryExpression	1		6643906	0					
ANR	6644694	ExpressionStatement	"fprintf ( stderr , ""sPAPR memory map:\\n"" )"	131:4:5006:5044	6643906	46	True				
ANR	6644695	CallExpression	"fprintf ( stderr , ""sPAPR memory map:\\n"" )"		6643906	0					
ANR	6644696	Callee	fprintf		6643906	0					
ANR	6644697	Identifier	fprintf		6643906	0					
ANR	6644698	ArgumentList	stderr		6643906	1					
ANR	6644699	Argument	stderr		6643906	0					
ANR	6644700	Identifier	stderr		6643906	0					
ANR	6644701	Argument	"""sPAPR memory map:\\n"""		6643906	1					
ANR	6644702	PrimaryExpression	"""sPAPR memory map:\\n"""		6643906	0					
ANR	6644703	ExpressionStatement	"fprintf ( stderr , ""RTAS                 : 0x%08lx..%08lx\\n"" , ( unsigned long ) spapr -> rtas_addr , ( unsigned long ) ( spapr -> rtas_addr + spapr -> rtas_size - 1 ) )"	132:4:5050:5223	6643906	47	True				
ANR	6644704	CallExpression	"fprintf ( stderr , ""RTAS                 : 0x%08lx..%08lx\\n"" , ( unsigned long ) spapr -> rtas_addr , ( unsigned long ) ( spapr -> rtas_addr + spapr -> rtas_size - 1 ) )"		6643906	0					
ANR	6644705	Callee	fprintf		6643906	0					
ANR	6644706	Identifier	fprintf		6643906	0					
ANR	6644707	ArgumentList	stderr		6643906	1					
ANR	6644708	Argument	stderr		6643906	0					
ANR	6644709	Identifier	stderr		6643906	0					
ANR	6644710	Argument	"""RTAS                 : 0x%08lx..%08lx\\n"""		6643906	1					
ANR	6644711	PrimaryExpression	"""RTAS                 : 0x%08lx..%08lx\\n"""		6643906	0					
ANR	6644712	Argument	( unsigned long ) spapr -> rtas_addr		6643906	2					
ANR	6644713	CastExpression	( unsigned long ) spapr -> rtas_addr		6643906	0					
ANR	6644714	CastTarget	unsigned long		6643906	0					
ANR	6644715	PtrMemberAccess	spapr -> rtas_addr		6643906	1					
ANR	6644716	Identifier	spapr		6643906	0					
ANR	6644717	Identifier	rtas_addr		6643906	1					
ANR	6644718	Argument	( unsigned long ) ( spapr -> rtas_addr + spapr -> rtas_size - 1 )		6643906	3					
ANR	6644719	CastExpression	( unsigned long ) ( spapr -> rtas_addr + spapr -> rtas_size - 1 )		6643906	0					
ANR	6644720	CastTarget	unsigned long		6643906	0					
ANR	6644721	AdditiveExpression	spapr -> rtas_addr + spapr -> rtas_size - 1		6643906	1		+			
ANR	6644722	PtrMemberAccess	spapr -> rtas_addr		6643906	0					
ANR	6644723	Identifier	spapr		6643906	0					
ANR	6644724	Identifier	rtas_addr		6643906	1					
ANR	6644725	AdditiveExpression	spapr -> rtas_size - 1		6643906	1		-			
ANR	6644726	PtrMemberAccess	spapr -> rtas_size		6643906	0					
ANR	6644727	Identifier	spapr		6643906	0					
ANR	6644728	Identifier	rtas_size		6643906	1					
ANR	6644729	PrimaryExpression	1		6643906	1					
ANR	6644730	ExpressionStatement	"fprintf ( stderr , ""FDT                  : 0x%08lx..%08lx\\n"" , ( unsigned long ) spapr -> fdt_addr , ( unsigned long ) ( spapr -> fdt_addr + FDT_MAX_SIZE - 1 ) )"	135:4:5229:5396	6643906	48	True				
ANR	6644731	CallExpression	"fprintf ( stderr , ""FDT                  : 0x%08lx..%08lx\\n"" , ( unsigned long ) spapr -> fdt_addr , ( unsigned long ) ( spapr -> fdt_addr + FDT_MAX_SIZE - 1 ) )"		6643906	0					
ANR	6644732	Callee	fprintf		6643906	0					
ANR	6644733	Identifier	fprintf		6643906	0					
ANR	6644734	ArgumentList	stderr		6643906	1					
ANR	6644735	Argument	stderr		6643906	0					
ANR	6644736	Identifier	stderr		6643906	0					
ANR	6644737	Argument	"""FDT                  : 0x%08lx..%08lx\\n"""		6643906	1					
ANR	6644738	PrimaryExpression	"""FDT                  : 0x%08lx..%08lx\\n"""		6643906	0					
ANR	6644739	Argument	( unsigned long ) spapr -> fdt_addr		6643906	2					
ANR	6644740	CastExpression	( unsigned long ) spapr -> fdt_addr		6643906	0					
ANR	6644741	CastTarget	unsigned long		6643906	0					
ANR	6644742	PtrMemberAccess	spapr -> fdt_addr		6643906	1					
ANR	6644743	Identifier	spapr		6643906	0					
ANR	6644744	Identifier	fdt_addr		6643906	1					
ANR	6644745	Argument	( unsigned long ) ( spapr -> fdt_addr + FDT_MAX_SIZE - 1 )		6643906	3					
ANR	6644746	CastExpression	( unsigned long ) ( spapr -> fdt_addr + FDT_MAX_SIZE - 1 )		6643906	0					
ANR	6644747	CastTarget	unsigned long		6643906	0					
ANR	6644748	AdditiveExpression	spapr -> fdt_addr + FDT_MAX_SIZE - 1		6643906	1		+			
ANR	6644749	PtrMemberAccess	spapr -> fdt_addr		6643906	0					
ANR	6644750	Identifier	spapr		6643906	0					
ANR	6644751	Identifier	fdt_addr		6643906	1					
ANR	6644752	AdditiveExpression	FDT_MAX_SIZE - 1		6643906	1		-			
ANR	6644753	Identifier	FDT_MAX_SIZE		6643906	0					
ANR	6644754	PrimaryExpression	1		6643906	1					
ANR	6644755	IfStatement	if ( kernel_filename )		6643906	49					
ANR	6644756	Condition	kernel_filename	138:8:5406:5420	6643906	0	True				
ANR	6644757	Identifier	kernel_filename		6643906	0					
ANR	6644758	CompoundStatement		133:8:5115:5135	6643906	1					
ANR	6644759	IdentifierDeclStatement	uint64_t lowaddr = 0 ;	139:8:5433:5453	6643906	0	True				
ANR	6644760	IdentifierDecl	lowaddr = 0		6643906	0					
ANR	6644761	IdentifierDeclType	uint64_t		6643906	0					
ANR	6644762	Identifier	lowaddr		6643906	1					
ANR	6644763	AssignmentExpression	lowaddr = 0		6643906	2		=			
ANR	6644764	Identifier	lowaddr		6643906	0					
ANR	6644765	PrimaryExpression	0		6643906	1					
ANR	6644766	ExpressionStatement	"kernel_size = load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 1 , ELF_MACHINE , 0 )"	140:8:5463:5606	6643906	1	True				
ANR	6644767	AssignmentExpression	"kernel_size = load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 1 , ELF_MACHINE , 0 )"		6643906	0		=			
ANR	6644768	Identifier	kernel_size		6643906	0					
ANR	6644769	CallExpression	"load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 1 , ELF_MACHINE , 0 )"		6643906	1					
ANR	6644770	Callee	load_elf		6643906	0					
ANR	6644771	Identifier	load_elf		6643906	0					
ANR	6644772	ArgumentList	kernel_filename		6643906	1					
ANR	6644773	Argument	kernel_filename		6643906	0					
ANR	6644774	Identifier	kernel_filename		6643906	0					
ANR	6644775	Argument	translate_kernel_address		6643906	1					
ANR	6644776	Identifier	translate_kernel_address		6643906	0					
ANR	6644777	Argument	NULL		6643906	2					
ANR	6644778	Identifier	NULL		6643906	0					
ANR	6644779	Argument	NULL		6643906	3					
ANR	6644780	Identifier	NULL		6643906	0					
ANR	6644781	Argument	& lowaddr		6643906	4					
ANR	6644782	UnaryOperationExpression	& lowaddr		6643906	0					
ANR	6644783	UnaryOperator	&		6643906	0					
ANR	6644784	Identifier	lowaddr		6643906	1					
ANR	6644785	Argument	NULL		6643906	5					
ANR	6644786	Identifier	NULL		6643906	0					
ANR	6644787	Argument	1		6643906	6					
ANR	6644788	PrimaryExpression	1		6643906	0					
ANR	6644789	Argument	ELF_MACHINE		6643906	7					
ANR	6644790	Identifier	ELF_MACHINE		6643906	0					
ANR	6644791	Argument	0		6643906	8					
ANR	6644792	PrimaryExpression	0		6643906	0					
ANR	6644793	IfStatement	if ( kernel_size < 0 )		6643906	2					
ANR	6644794	Condition	kernel_size < 0	142:12:5620:5634	6643906	0	True				
ANR	6644795	RelationalExpression	kernel_size < 0		6643906	0		<			
ANR	6644796	Identifier	kernel_size		6643906	0					
ANR	6644797	PrimaryExpression	0		6643906	1					
ANR	6644798	CompoundStatement		136:29:5319:5319	6643906	1					
ANR	6644799	ExpressionStatement	"kernel_size = load_image_targphys ( kernel_filename , KERNEL_LOAD_ADDR , load_limit - KERNEL_LOAD_ADDR )"	143:12:5651:5842	6643906	0	True				
ANR	6644800	AssignmentExpression	"kernel_size = load_image_targphys ( kernel_filename , KERNEL_LOAD_ADDR , load_limit - KERNEL_LOAD_ADDR )"		6643906	0		=			
ANR	6644801	Identifier	kernel_size		6643906	0					
ANR	6644802	CallExpression	"load_image_targphys ( kernel_filename , KERNEL_LOAD_ADDR , load_limit - KERNEL_LOAD_ADDR )"		6643906	1					
ANR	6644803	Callee	load_image_targphys		6643906	0					
ANR	6644804	Identifier	load_image_targphys		6643906	0					
ANR	6644805	ArgumentList	kernel_filename		6643906	1					
ANR	6644806	Argument	kernel_filename		6643906	0					
ANR	6644807	Identifier	kernel_filename		6643906	0					
ANR	6644808	Argument	KERNEL_LOAD_ADDR		6643906	1					
ANR	6644809	Identifier	KERNEL_LOAD_ADDR		6643906	0					
ANR	6644810	Argument	load_limit - KERNEL_LOAD_ADDR		6643906	2					
ANR	6644811	AdditiveExpression	load_limit - KERNEL_LOAD_ADDR		6643906	0		-			
ANR	6644812	Identifier	load_limit		6643906	0					
ANR	6644813	Identifier	KERNEL_LOAD_ADDR		6643906	1					
ANR	6644814	IfStatement	if ( kernel_size < 0 )		6643906	3					
ANR	6644815	Condition	kernel_size < 0	147:12:5866:5880	6643906	0	True				
ANR	6644816	RelationalExpression	kernel_size < 0		6643906	0		<			
ANR	6644817	Identifier	kernel_size		6643906	0					
ANR	6644818	PrimaryExpression	0		6643906	1					
ANR	6644819	CompoundStatement		141:29:5565:5565	6643906	1					
ANR	6644820	ExpressionStatement	"fprintf ( stderr , ""qemu: could not load kernel '%s'\\n"" , kernel_filename )"	148:12:5897:5987	6643906	0	True				
ANR	6644821	CallExpression	"fprintf ( stderr , ""qemu: could not load kernel '%s'\\n"" , kernel_filename )"		6643906	0					
ANR	6644822	Callee	fprintf		6643906	0					
ANR	6644823	Identifier	fprintf		6643906	0					
ANR	6644824	ArgumentList	stderr		6643906	1					
ANR	6644825	Argument	stderr		6643906	0					
ANR	6644826	Identifier	stderr		6643906	0					
ANR	6644827	Argument	"""qemu: could not load kernel '%s'\\n"""		6643906	1					
ANR	6644828	PrimaryExpression	"""qemu: could not load kernel '%s'\\n"""		6643906	0					
ANR	6644829	Argument	kernel_filename		6643906	2					
ANR	6644830	Identifier	kernel_filename		6643906	0					
ANR	6644831	ExpressionStatement	exit ( 1 )	150:12:6001:6008	6643906	1	True				
ANR	6644832	CallExpression	exit ( 1 )		6643906	0					
ANR	6644833	Callee	exit		6643906	0					
ANR	6644834	Identifier	exit		6643906	0					
ANR	6644835	ArgumentList	1		6643906	1					
ANR	6644836	Argument	1		6643906	0					
ANR	6644837	PrimaryExpression	1		6643906	0					
ANR	6644838	ExpressionStatement	"fprintf ( stderr , ""Kernel               : 0x%08x..%08lx\\n"" , KERNEL_LOAD_ADDR , KERNEL_LOAD_ADDR + kernel_size - 1 )"	152:8:6028:6155	6643906	4	True				
ANR	6644839	CallExpression	"fprintf ( stderr , ""Kernel               : 0x%08x..%08lx\\n"" , KERNEL_LOAD_ADDR , KERNEL_LOAD_ADDR + kernel_size - 1 )"		6643906	0					
ANR	6644840	Callee	fprintf		6643906	0					
ANR	6644841	Identifier	fprintf		6643906	0					
ANR	6644842	ArgumentList	stderr		6643906	1					
ANR	6644843	Argument	stderr		6643906	0					
ANR	6644844	Identifier	stderr		6643906	0					
ANR	6644845	Argument	"""Kernel               : 0x%08x..%08lx\\n"""		6643906	1					
ANR	6644846	PrimaryExpression	"""Kernel               : 0x%08x..%08lx\\n"""		6643906	0					
ANR	6644847	Argument	KERNEL_LOAD_ADDR		6643906	2					
ANR	6644848	Identifier	KERNEL_LOAD_ADDR		6643906	0					
ANR	6644849	Argument	KERNEL_LOAD_ADDR + kernel_size - 1		6643906	3					
ANR	6644850	AdditiveExpression	KERNEL_LOAD_ADDR + kernel_size - 1		6643906	0		+			
ANR	6644851	Identifier	KERNEL_LOAD_ADDR		6643906	0					
ANR	6644852	AdditiveExpression	kernel_size - 1		6643906	1		-			
ANR	6644853	Identifier	kernel_size		6643906	0					
ANR	6644854	PrimaryExpression	1		6643906	1					
ANR	6644855	IfStatement	if ( initrd_filename )		6643906	5					
ANR	6644856	Condition	initrd_filename	155:12:6195:6209	6643906	0	True				
ANR	6644857	Identifier	initrd_filename		6643906	0					
ANR	6644858	CompoundStatement		149:29:5894:5894	6643906	1					
ANR	6644859	ExpressionStatement	initrd_base = ( KERNEL_LOAD_ADDR + kernel_size + 0x1ffff ) & ~0xffff	159:12:6377:6443	6643906	0	True				
ANR	6644860	AssignmentExpression	initrd_base = ( KERNEL_LOAD_ADDR + kernel_size + 0x1ffff ) & ~0xffff		6643906	0		=			
ANR	6644861	Identifier	initrd_base		6643906	0					
ANR	6644862	BitAndExpression	( KERNEL_LOAD_ADDR + kernel_size + 0x1ffff ) & ~0xffff		6643906	1		&			
ANR	6644863	AdditiveExpression	KERNEL_LOAD_ADDR + kernel_size + 0x1ffff		6643906	0		+			
ANR	6644864	Identifier	KERNEL_LOAD_ADDR		6643906	0					
ANR	6644865	AdditiveExpression	kernel_size + 0x1ffff		6643906	1		+			
ANR	6644866	Identifier	kernel_size		6643906	0					
ANR	6644867	PrimaryExpression	0x1ffff		6643906	1					
ANR	6644868	Identifier	~0xffff		6643906	1					
ANR	6644869	ExpressionStatement	"initrd_size = load_image_targphys ( initrd_filename , initrd_base , load_limit - initrd_base )"	160:12:6457:6592	6643906	1	True				
ANR	6644870	AssignmentExpression	"initrd_size = load_image_targphys ( initrd_filename , initrd_base , load_limit - initrd_base )"		6643906	0		=			
ANR	6644871	Identifier	initrd_size		6643906	0					
ANR	6644872	CallExpression	"load_image_targphys ( initrd_filename , initrd_base , load_limit - initrd_base )"		6643906	1					
ANR	6644873	Callee	load_image_targphys		6643906	0					
ANR	6644874	Identifier	load_image_targphys		6643906	0					
ANR	6644875	ArgumentList	initrd_filename		6643906	1					
ANR	6644876	Argument	initrd_filename		6643906	0					
ANR	6644877	Identifier	initrd_filename		6643906	0					
ANR	6644878	Argument	initrd_base		6643906	1					
ANR	6644879	Identifier	initrd_base		6643906	0					
ANR	6644880	Argument	load_limit - initrd_base		6643906	2					
ANR	6644881	AdditiveExpression	load_limit - initrd_base		6643906	0		-			
ANR	6644882	Identifier	load_limit		6643906	0					
ANR	6644883	Identifier	initrd_base		6643906	1					
ANR	6644884	IfStatement	if ( initrd_size < 0 )		6643906	2					
ANR	6644885	Condition	initrd_size < 0	162:16:6610:6624	6643906	0	True				
ANR	6644886	RelationalExpression	initrd_size < 0		6643906	0		<			
ANR	6644887	Identifier	initrd_size		6643906	0					
ANR	6644888	PrimaryExpression	0		6643906	1					
ANR	6644889	CompoundStatement		156:33:6309:6309	6643906	1					
ANR	6644890	ExpressionStatement	"fprintf ( stderr , ""qemu: could not load initial ram disk '%s'\\n"" , initrd_filename )"	163:16:6645:6749	6643906	0	True				
ANR	6644891	CallExpression	"fprintf ( stderr , ""qemu: could not load initial ram disk '%s'\\n"" , initrd_filename )"		6643906	0					
ANR	6644892	Callee	fprintf		6643906	0					
ANR	6644893	Identifier	fprintf		6643906	0					
ANR	6644894	ArgumentList	stderr		6643906	1					
ANR	6644895	Argument	stderr		6643906	0					
ANR	6644896	Identifier	stderr		6643906	0					
ANR	6644897	Argument	"""qemu: could not load initial ram disk '%s'\\n"""		6643906	1					
ANR	6644898	PrimaryExpression	"""qemu: could not load initial ram disk '%s'\\n"""		6643906	0					
ANR	6644899	Argument	initrd_filename		6643906	2					
ANR	6644900	Identifier	initrd_filename		6643906	0					
ANR	6644901	ExpressionStatement	exit ( 1 )	165:16:6767:6774	6643906	1	True				
ANR	6644902	CallExpression	exit ( 1 )		6643906	0					
ANR	6644903	Callee	exit		6643906	0					
ANR	6644904	Identifier	exit		6643906	0					
ANR	6644905	ArgumentList	1		6643906	1					
ANR	6644906	Argument	1		6643906	0					
ANR	6644907	PrimaryExpression	1		6643906	0					
ANR	6644908	ExpressionStatement	"fprintf ( stderr , ""Ramdisk              : 0x%08lx..%08lx\\n"" , ( long ) initrd_base , ( long ) ( initrd_base + initrd_size - 1 ) )"	167:12:6802:6938	6643906	3	True				
ANR	6644909	CallExpression	"fprintf ( stderr , ""Ramdisk              : 0x%08lx..%08lx\\n"" , ( long ) initrd_base , ( long ) ( initrd_base + initrd_size - 1 ) )"		6643906	0					
ANR	6644910	Callee	fprintf		6643906	0					
ANR	6644911	Identifier	fprintf		6643906	0					
ANR	6644912	ArgumentList	stderr		6643906	1					
ANR	6644913	Argument	stderr		6643906	0					
ANR	6644914	Identifier	stderr		6643906	0					
ANR	6644915	Argument	"""Ramdisk              : 0x%08lx..%08lx\\n"""		6643906	1					
ANR	6644916	PrimaryExpression	"""Ramdisk              : 0x%08lx..%08lx\\n"""		6643906	0					
ANR	6644917	Argument	( long ) initrd_base		6643906	2					
ANR	6644918	CastExpression	( long ) initrd_base		6643906	0					
ANR	6644919	CastTarget	long		6643906	0					
ANR	6644920	Identifier	initrd_base		6643906	1					
ANR	6644921	Argument	( long ) ( initrd_base + initrd_size - 1 )		6643906	3					
ANR	6644922	CastExpression	( long ) ( initrd_base + initrd_size - 1 )		6643906	0					
ANR	6644923	CastTarget	long		6643906	0					
ANR	6644924	AdditiveExpression	initrd_base + initrd_size - 1		6643906	1		+			
ANR	6644925	Identifier	initrd_base		6643906	0					
ANR	6644926	AdditiveExpression	initrd_size - 1		6643906	1		-			
ANR	6644927	Identifier	initrd_size		6643906	0					
ANR	6644928	PrimaryExpression	1		6643906	1					
ANR	6644929	ElseStatement	else		6643906	0					
ANR	6644930	CompoundStatement		163:15:6637:6637	6643906	0					
ANR	6644931	ExpressionStatement	initrd_base = 0	170:12:6969:6984	6643906	0	True				
ANR	6644932	AssignmentExpression	initrd_base = 0		6643906	0		=			
ANR	6644933	Identifier	initrd_base		6643906	0					
ANR	6644934	PrimaryExpression	0		6643906	1					
ANR	6644935	ExpressionStatement	initrd_size = 0	171:12:6998:7013	6643906	1	True				
ANR	6644936	AssignmentExpression	initrd_size = 0		6643906	0		=			
ANR	6644937	Identifier	initrd_size		6643906	0					
ANR	6644938	PrimaryExpression	0		6643906	1					
ANR	6644939	ExpressionStatement	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , FW_FILE_NAME )"	174:4:7035:7095	6643906	50	True				
ANR	6644940	AssignmentExpression	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , FW_FILE_NAME )"		6643906	0		=			
ANR	6644941	Identifier	filename		6643906	0					
ANR	6644942	CallExpression	"qemu_find_file ( QEMU_FILE_TYPE_BIOS , FW_FILE_NAME )"		6643906	1					
ANR	6644943	Callee	qemu_find_file		6643906	0					
ANR	6644944	Identifier	qemu_find_file		6643906	0					
ANR	6644945	ArgumentList	QEMU_FILE_TYPE_BIOS		6643906	1					
ANR	6644946	Argument	QEMU_FILE_TYPE_BIOS		6643906	0					
ANR	6644947	Identifier	QEMU_FILE_TYPE_BIOS		6643906	0					
ANR	6644948	Argument	FW_FILE_NAME		6643906	1					
ANR	6644949	Identifier	FW_FILE_NAME		6643906	0					
ANR	6644950	ExpressionStatement	"fw_size = load_image_targphys ( filename , 0 , FW_MAX_SIZE )"	175:4:7101:7156	6643906	51	True				
ANR	6644951	AssignmentExpression	"fw_size = load_image_targphys ( filename , 0 , FW_MAX_SIZE )"		6643906	0		=			
ANR	6644952	Identifier	fw_size		6643906	0					
ANR	6644953	CallExpression	"load_image_targphys ( filename , 0 , FW_MAX_SIZE )"		6643906	1					
ANR	6644954	Callee	load_image_targphys		6643906	0					
ANR	6644955	Identifier	load_image_targphys		6643906	0					
ANR	6644956	ArgumentList	filename		6643906	1					
ANR	6644957	Argument	filename		6643906	0					
ANR	6644958	Identifier	filename		6643906	0					
ANR	6644959	Argument	0		6643906	1					
ANR	6644960	PrimaryExpression	0		6643906	0					
ANR	6644961	Argument	FW_MAX_SIZE		6643906	2					
ANR	6644962	Identifier	FW_MAX_SIZE		6643906	0					
ANR	6644963	IfStatement	if ( fw_size < 0 )		6643906	52					
ANR	6644964	Condition	fw_size < 0	176:8:7166:7176	6643906	0	True				
ANR	6644965	RelationalExpression	fw_size < 0		6643906	0		<			
ANR	6644966	Identifier	fw_size		6643906	0					
ANR	6644967	PrimaryExpression	0		6643906	1					
ANR	6644968	CompoundStatement		170:21:6861:6861	6643906	1					
ANR	6644969	ExpressionStatement	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"	177:8:7189:7248	6643906	0	True				
ANR	6644970	CallExpression	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"		6643906	0					
ANR	6644971	Callee	hw_error		6643906	0					
ANR	6644972	Identifier	hw_error		6643906	0					
ANR	6644973	ArgumentList	"""qemu: could not load LPAR rtas '%s'\\n"""		6643906	1					
ANR	6644974	Argument	"""qemu: could not load LPAR rtas '%s'\\n"""		6643906	0					
ANR	6644975	PrimaryExpression	"""qemu: could not load LPAR rtas '%s'\\n"""		6643906	0					
ANR	6644976	Argument	filename		6643906	1					
ANR	6644977	Identifier	filename		6643906	0					
ANR	6644978	ExpressionStatement	exit ( 1 )	178:8:7258:7265	6643906	1	True				
ANR	6644979	CallExpression	exit ( 1 )		6643906	0					
ANR	6644980	Callee	exit		6643906	0					
ANR	6644981	Identifier	exit		6643906	0					
ANR	6644982	ArgumentList	1		6643906	1					
ANR	6644983	Argument	1		6643906	0					
ANR	6644984	PrimaryExpression	1		6643906	0					
ANR	6644985	ExpressionStatement	g_free ( filename )	180:4:7277:7293	6643906	53	True				
ANR	6644986	CallExpression	g_free ( filename )		6643906	0					
ANR	6644987	Callee	g_free		6643906	0					
ANR	6644988	Identifier	g_free		6643906	0					
ANR	6644989	ArgumentList	filename		6643906	1					
ANR	6644990	Argument	filename		6643906	0					
ANR	6644991	Identifier	filename		6643906	0					
ANR	6644992	ExpressionStatement	"fprintf ( stderr , ""Firmware load        : 0x%08x..%08lx\\n"" , 0 , fw_size )"	181:4:7299:7380	6643906	54	True				
ANR	6644993	CallExpression	"fprintf ( stderr , ""Firmware load        : 0x%08x..%08lx\\n"" , 0 , fw_size )"		6643906	0					
ANR	6644994	Callee	fprintf		6643906	0					
ANR	6644995	Identifier	fprintf		6643906	0					
ANR	6644996	ArgumentList	stderr		6643906	1					
ANR	6644997	Argument	stderr		6643906	0					
ANR	6644998	Identifier	stderr		6643906	0					
ANR	6644999	Argument	"""Firmware load        : 0x%08x..%08lx\\n"""		6643906	1					
ANR	6645000	PrimaryExpression	"""Firmware load        : 0x%08x..%08lx\\n"""		6643906	0					
ANR	6645001	Argument	0		6643906	2					
ANR	6645002	PrimaryExpression	0		6643906	0					
ANR	6645003	Argument	fw_size		6643906	3					
ANR	6645004	Identifier	fw_size		6643906	0					
ANR	6645005	ExpressionStatement	"fprintf ( stderr , ""Firmware runtime     : 0x%08lx..%08lx\\n"" , load_limit , ( unsigned long ) spapr -> fdt_addr )"	183:4:7386:7500	6643906	55	True				
ANR	6645006	CallExpression	"fprintf ( stderr , ""Firmware runtime     : 0x%08lx..%08lx\\n"" , load_limit , ( unsigned long ) spapr -> fdt_addr )"		6643906	0					
ANR	6645007	Callee	fprintf		6643906	0					
ANR	6645008	Identifier	fprintf		6643906	0					
ANR	6645009	ArgumentList	stderr		6643906	1					
ANR	6645010	Argument	stderr		6643906	0					
ANR	6645011	Identifier	stderr		6643906	0					
ANR	6645012	Argument	"""Firmware runtime     : 0x%08lx..%08lx\\n"""		6643906	1					
ANR	6645013	PrimaryExpression	"""Firmware runtime     : 0x%08lx..%08lx\\n"""		6643906	0					
ANR	6645014	Argument	load_limit		6643906	2					
ANR	6645015	Identifier	load_limit		6643906	0					
ANR	6645016	Argument	( unsigned long ) spapr -> fdt_addr		6643906	3					
ANR	6645017	CastExpression	( unsigned long ) spapr -> fdt_addr		6643906	0					
ANR	6645018	CastTarget	unsigned long		6643906	0					
ANR	6645019	PtrMemberAccess	spapr -> fdt_addr		6643906	1					
ANR	6645020	Identifier	spapr		6643906	0					
ANR	6645021	Identifier	fdt_addr		6643906	1					
ANR	6645022	ExpressionStatement	spapr -> entry_point = 0x100	185:4:7506:7532	6643906	56	True				
ANR	6645023	AssignmentExpression	spapr -> entry_point = 0x100		6643906	0		=			
ANR	6645024	PtrMemberAccess	spapr -> entry_point		6643906	0					
ANR	6645025	Identifier	spapr		6643906	0					
ANR	6645026	Identifier	entry_point		6643906	1					
ANR	6645027	PrimaryExpression	0x100		6643906	1					
ANR	6645028	ForStatement	for ( env = first_cpu ; env != NULL ; env = env -> next_cpu )		6643906	57					
ANR	6645029	ForInit	env = first_cpu ;	187:9:7601:7616	6643906	0	True				
ANR	6645030	AssignmentExpression	env = first_cpu		6643906	0		=			
ANR	6645031	Identifier	env		6643906	0					
ANR	6645032	Identifier	first_cpu		6643906	1					
ANR	6645033	Condition	env != NULL	187:26:7618:7628	6643906	1	True				
ANR	6645034	EqualityExpression	env != NULL		6643906	0		!=			
ANR	6645035	Identifier	env		6643906	0					
ANR	6645036	Identifier	NULL		6643906	1					
ANR	6645037	AssignmentExpression	env = env -> next_cpu	187:39:7631:7649	6643906	2	True	=			
ANR	6645038	Identifier	env		6643906	0					
ANR	6645039	PtrMemberAccess	env -> next_cpu		6643906	1					
ANR	6645040	Identifier	env		6643906	0					
ANR	6645041	Identifier	next_cpu		6643906	1					
ANR	6645042	CompoundStatement		181:60:7334:7334	6643906	3					
ANR	6645043	ExpressionStatement	env -> halted = 1	188:8:7662:7677	6643906	0	True				
ANR	6645044	AssignmentExpression	env -> halted = 1		6643906	0		=			
ANR	6645045	PtrMemberAccess	env -> halted		6643906	0					
ANR	6645046	Identifier	env		6643906	0					
ANR	6645047	Identifier	halted		6643906	1					
ANR	6645048	PrimaryExpression	1		6643906	1					
ANR	6645049	ExpressionStatement	"spapr -> fdt_skel = spapr_create_fdt_skel ( cpu_model , rma_size , initrd_base , initrd_size , kernel_size , boot_device , kernel_cmdline , pteg_shift + 7 )"	191:4:7723:8043	6643906	58	True				
ANR	6645050	AssignmentExpression	"spapr -> fdt_skel = spapr_create_fdt_skel ( cpu_model , rma_size , initrd_base , initrd_size , kernel_size , boot_device , kernel_cmdline , pteg_shift + 7 )"		6643906	0		=			
ANR	6645051	PtrMemberAccess	spapr -> fdt_skel		6643906	0					
ANR	6645052	Identifier	spapr		6643906	0					
ANR	6645053	Identifier	fdt_skel		6643906	1					
ANR	6645054	CallExpression	"spapr_create_fdt_skel ( cpu_model , rma_size , initrd_base , initrd_size , kernel_size , boot_device , kernel_cmdline , pteg_shift + 7 )"		6643906	1					
ANR	6645055	Callee	spapr_create_fdt_skel		6643906	0					
ANR	6645056	Identifier	spapr_create_fdt_skel		6643906	0					
ANR	6645057	ArgumentList	cpu_model		6643906	1					
ANR	6645058	Argument	cpu_model		6643906	0					
ANR	6645059	Identifier	cpu_model		6643906	0					
ANR	6645060	Argument	rma_size		6643906	1					
ANR	6645061	Identifier	rma_size		6643906	0					
ANR	6645062	Argument	initrd_base		6643906	2					
ANR	6645063	Identifier	initrd_base		6643906	0					
ANR	6645064	Argument	initrd_size		6643906	3					
ANR	6645065	Identifier	initrd_size		6643906	0					
ANR	6645066	Argument	kernel_size		6643906	4					
ANR	6645067	Identifier	kernel_size		6643906	0					
ANR	6645068	Argument	boot_device		6643906	5					
ANR	6645069	Identifier	boot_device		6643906	0					
ANR	6645070	Argument	kernel_cmdline		6643906	6					
ANR	6645071	Identifier	kernel_cmdline		6643906	0					
ANR	6645072	Argument	pteg_shift + 7		6643906	7					
ANR	6645073	AdditiveExpression	pteg_shift + 7		6643906	0		+			
ANR	6645074	Identifier	pteg_shift		6643906	0					
ANR	6645075	PrimaryExpression	7		6643906	1					
ANR	6645076	ExpressionStatement	assert ( spapr -> fdt_skel != NULL )	196:4:8049:8080	6643906	59	True				
ANR	6645077	CallExpression	assert ( spapr -> fdt_skel != NULL )		6643906	0					
ANR	6645078	Callee	assert		6643906	0					
ANR	6645079	Identifier	assert		6643906	0					
ANR	6645080	ArgumentList	spapr -> fdt_skel != NULL		6643906	1					
ANR	6645081	Argument	spapr -> fdt_skel != NULL		6643906	0					
ANR	6645082	EqualityExpression	spapr -> fdt_skel != NULL		6643906	0		!=			
ANR	6645083	PtrMemberAccess	spapr -> fdt_skel		6643906	0					
ANR	6645084	Identifier	spapr		6643906	0					
ANR	6645085	Identifier	fdt_skel		6643906	1					
ANR	6645086	Identifier	NULL		6643906	1					
ANR	6645087	ExpressionStatement	"qemu_register_reset ( spapr_reset , spapr )"	197:4:8086:8125	6643906	60	True				
ANR	6645088	CallExpression	"qemu_register_reset ( spapr_reset , spapr )"		6643906	0					
ANR	6645089	Callee	qemu_register_reset		6643906	0					
ANR	6645090	Identifier	qemu_register_reset		6643906	0					
ANR	6645091	ArgumentList	spapr_reset		6643906	1					
ANR	6645092	Argument	spapr_reset		6643906	0					
ANR	6645093	Identifier	spapr_reset		6643906	0					
ANR	6645094	Argument	spapr		6643906	1					
ANR	6645095	Identifier	spapr		6643906	0					
ANR	6645096	ReturnType	static void		6643906	1					
ANR	6645097	Identifier	ppc_spapr_init		6643906	2					
ANR	6645098	ParameterList	"ram_addr_t ram_size , const char * boot_device , const char * kernel_filename , const char * kernel_cmdline , const char * initrd_filename , const char * cpu_model"		6643906	3					
ANR	6645099	Parameter	ram_addr_t ram_size	1:27:27:45	6643906	0	True				
ANR	6645100	ParameterType	ram_addr_t		6643906	0					
ANR	6645101	Identifier	ram_size		6643906	1					
ANR	6645102	Parameter	const char * boot_device	2:27:75:97	6643906	1	True				
ANR	6645103	ParameterType	const char *		6643906	0					
ANR	6645104	Identifier	boot_device		6643906	1					
ANR	6645105	Parameter	const char * kernel_filename	3:27:127:153	6643906	2	True				
ANR	6645106	ParameterType	const char *		6643906	0					
ANR	6645107	Identifier	kernel_filename		6643906	1					
ANR	6645108	Parameter	const char * kernel_cmdline	4:27:183:208	6643906	3	True				
ANR	6645109	ParameterType	const char *		6643906	0					
ANR	6645110	Identifier	kernel_cmdline		6643906	1					
ANR	6645111	Parameter	const char * initrd_filename	5:27:238:264	6643906	4	True				
ANR	6645112	ParameterType	const char *		6643906	0					
ANR	6645113	Identifier	initrd_filename		6643906	1					
ANR	6645114	Parameter	const char * cpu_model	6:27:294:314	6643906	5	True				
ANR	6645115	ParameterType	const char *		6643906	0					
ANR	6645116	Identifier	cpu_model		6643906	1					
ANR	6645117	CFGEntryNode	ENTRY		6643906		True				
ANR	6645118	CFGExitNode	EXIT		6643906		True				
ANR	6645119	Symbol	lowaddr		6643906						
ANR	6645120	Symbol	rtas_limit		6643906						
ANR	6645121	Symbol	load_limit		6643906						
ANR	6645122	Symbol	drive_get_max_bus		6643906						
ANR	6645123	Symbol	* SPR_SDR1		6643906						
ANR	6645124	Symbol	cpu_ppc_hypercall		6643906						
ANR	6645125	Symbol	env -> external_htab		6643906						
ANR	6645126	Symbol	g_new		6643906						
ANR	6645127	Symbol	env -> hreset_vector		6643906						
ANR	6645128	Symbol	spapr_reset		6643906						
ANR	6645129	Symbol	ram		6643906						
ANR	6645130	Symbol	kvmppc_alloc_rma		6643906						
ANR	6645131	Symbol	spapr_create_fdt_skel		6643906						
ANR	6645132	Symbol	SPAPR_PCI_MEM_WIN_SIZE		6643906						
ANR	6645133	Symbol	MemoryRegion		6643906						
ANR	6645134	Symbol	spapr		6643906						
ANR	6645135	Symbol	nonrma_size		6643906						
ANR	6645136	Symbol	SPR_HIOR		6643906						
ANR	6645137	Symbol	SPAPR_PCI_MEM_WIN_ADDR		6643906						
ANR	6645138	Symbol	TIMEBASE_FREQ		6643906						
ANR	6645139	Symbol	filename		6643906						
ANR	6645140	Symbol	MIN		6643906						
ANR	6645141	Symbol	* * env		6643906						
ANR	6645142	Symbol	RTAS_MAX_SIZE		6643906						
ANR	6645143	Symbol	spapr -> fdt_addr		6643906						
ANR	6645144	Symbol	spapr_cpu_reset		6643906						
ANR	6645145	Symbol	spapr -> fdt_skel		6643906						
ANR	6645146	Symbol	FW_MAX_SIZE		6643906						
ANR	6645147	Symbol	cpu_model		6643906						
ANR	6645148	Symbol	load_image_targphys		6643906						
ANR	6645149	Symbol	kvm_enabled		6643906						
ANR	6645150	Symbol	nd_table		6643906						
ANR	6645151	Symbol	rma_size		6643906						
ANR	6645152	Symbol	get_system_memory		6643906						
ANR	6645153	Symbol	xics_system_init		6643906						
ANR	6645154	Symbol	i		6643906						
ANR	6645155	Symbol	FDT_MAX_SIZE		6643906						
ANR	6645156	Symbol	first_cpu		6643906						
ANR	6645157	Symbol	env -> spr		6643906						
ANR	6645158	Symbol	FW_FILE_NAME		6643906						
ANR	6645159	Symbol	ram_size		6643906						
ANR	6645160	Symbol	cpu_ppc_init		6643906						
ANR	6645161	Symbol	emulate_spapr_hypercall		6643906						
ANR	6645162	Symbol	nonrma_base		6643906						
ANR	6645163	Symbol	FW_OVERHEAD		6643906						
ANR	6645164	Symbol	kernel_filename		6643906						
ANR	6645165	Symbol	env -> gpr		6643906						
ANR	6645166	Symbol	serial_hds		6643906						
ANR	6645167	Symbol	spapr -> next_irq		6643906						
ANR	6645168	Symbol	* nd		6643906						
ANR	6645169	Symbol	nb_nics		6643906						
ANR	6645170	Symbol	env -> halted		6643906						
ANR	6645171	Symbol	rma_alloc_size		6643906						
ANR	6645172	Symbol	nd -> model		6643906						
ANR	6645173	Symbol	spapr -> rtas_size		6643906						
ANR	6645174	Symbol	MIN_RMA_SLOF		6643906						
ANR	6645175	Symbol	spapr -> icp		6643906						
ANR	6645176	Symbol	SPAPR_PCI_IO_WIN_ADDR		6643906						
ANR	6645177	Symbol	fw_size		6643906						
ANR	6645178	Symbol	spapr -> htab_size		6643906						
ANR	6645179	Symbol	XICS_IRQS		6643906						
ANR	6645180	Symbol	spapr -> rtas_addr		6643906						
ANR	6645181	Symbol	pteg_shift		6643906						
ANR	6645182	Symbol	env -> htab_mask		6643906						
ANR	6645183	Symbol	env -> cpu_index		6643906						
ANR	6645184	Symbol	* SPR_HIOR		6643906						
ANR	6645185	Symbol	kernel_size		6643906						
ANR	6645186	Symbol	strcmp		6643906						
ANR	6645187	Symbol	smp_cpus		6643906						
ANR	6645188	Symbol	NULL		6643906						
ANR	6645189	Symbol	initrd_base		6643906						
ANR	6645190	Symbol	* env		6643906						
ANR	6645191	Symbol	cpu		6643906						
ANR	6645192	Symbol	QEMU_FILE_TYPE_BIOS		6643906						
ANR	6645193	Symbol	spapr_vio_bus_init		6643906						
ANR	6645194	Symbol	KERNEL_LOAD_ADDR		6643906						
ANR	6645195	Symbol	stderr		6643906						
ANR	6645196	Symbol	nd		6643906						
ANR	6645197	Symbol	boot_device		6643906						
ANR	6645198	Symbol	env -> htab_base		6643906						
ANR	6645199	Symbol	g_malloc0		6643906						
ANR	6645200	Symbol	load_elf		6643906						
ANR	6645201	Symbol	translate_kernel_address		6643906						
ANR	6645202	Symbol	~0xffff		6643906						
ANR	6645203	Symbol	kernel_cmdline		6643906						
ANR	6645204	Symbol	spapr -> entry_point		6643906						
ANR	6645205	Symbol	initrd_filename		6643906						
ANR	6645206	Symbol	initrd_size		6643906						
ANR	6645207	Symbol	SPAPR_PCI_BUID		6643906						
ANR	6645208	Symbol	ELF_MACHINE		6643906						
ANR	6645209	Symbol	env -> next_cpu		6643906						
ANR	6645210	Symbol	SPR_SDR1		6643906						
ANR	6645211	Symbol	g_strdup		6643906						
ANR	6645212	Symbol	& lowaddr		6643906						
ANR	6645213	Symbol	* spapr		6643906						
ANR	6645214	Symbol	qemu_find_file		6643906						
ANR	6645215	Symbol	spapr -> vio_bus		6643906						
ANR	6645216	Symbol	MAX_SERIAL_PORTS		6643906						
ANR	6645217	Symbol	& spapr -> phbs		6643906						
ANR	6645218	Symbol	env		6643906						
ANR	6645219	Symbol	& cpu -> env		6643906						
ANR	6645220	Symbol	* serial_hds		6643906						
ANR	6645221	Symbol	* env -> gpr		6643906						
ANR	6645222	Symbol	env -> hreset_excp_prefix		6643906						
ANR	6645223	Symbol	qemu_memalign		6643906						
ANR	6645224	Symbol	* i		6643906						
ANR	6645225	Symbol	IF_SCSI		6643906						
ANR	6645226	Symbol	sysmem		6643906						
ANR	6645227	Symbol	spapr -> htab		6643906						
ANR	6645228	Symbol	spapr -> ram_limit		6643906						
ANR	6645229	Symbol	* env -> spr		6643906						
