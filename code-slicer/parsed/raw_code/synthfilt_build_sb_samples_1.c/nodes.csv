command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8158784	File	/home/p4ultr4n/workplace/ReVeal/raw_code/synthfilt_build_sb_samples_1.c								
ANR	8158785	Function	synthfilt_build_sb_samples	1:0:0:7277							
ANR	8158786	FunctionDef	"synthfilt_build_sb_samples (QDM2Context * q , GetBitContext * gb , int length , int sb_min , int sb_max)"		8158785	0					
ANR	8158787	CompoundStatement		3:0:112:7277	8158785	0					
ANR	8158788	IdentifierDeclStatement	"int sb , j , k , n , ch , run , channels ;"	5:4:119:153	8158785	0	True				
ANR	8158789	IdentifierDecl	sb		8158785	0					
ANR	8158790	IdentifierDeclType	int		8158785	0					
ANR	8158791	Identifier	sb		8158785	1					
ANR	8158792	IdentifierDecl	j		8158785	1					
ANR	8158793	IdentifierDeclType	int		8158785	0					
ANR	8158794	Identifier	j		8158785	1					
ANR	8158795	IdentifierDecl	k		8158785	2					
ANR	8158796	IdentifierDeclType	int		8158785	0					
ANR	8158797	Identifier	k		8158785	1					
ANR	8158798	IdentifierDecl	n		8158785	3					
ANR	8158799	IdentifierDeclType	int		8158785	0					
ANR	8158800	Identifier	n		8158785	1					
ANR	8158801	IdentifierDecl	ch		8158785	4					
ANR	8158802	IdentifierDeclType	int		8158785	0					
ANR	8158803	Identifier	ch		8158785	1					
ANR	8158804	IdentifierDecl	run		8158785	5					
ANR	8158805	IdentifierDeclType	int		8158785	0					
ANR	8158806	Identifier	run		8158785	1					
ANR	8158807	IdentifierDecl	channels		8158785	6					
ANR	8158808	IdentifierDeclType	int		8158785	0					
ANR	8158809	Identifier	channels		8158785	1					
ANR	8158810	IdentifierDeclStatement	"int joined_stereo , zero_encoding , chs ;"	7:4:160:197	8158785	1	True				
ANR	8158811	IdentifierDecl	joined_stereo		8158785	0					
ANR	8158812	IdentifierDeclType	int		8158785	0					
ANR	8158813	Identifier	joined_stereo		8158785	1					
ANR	8158814	IdentifierDecl	zero_encoding		8158785	1					
ANR	8158815	IdentifierDeclType	int		8158785	0					
ANR	8158816	Identifier	zero_encoding		8158785	1					
ANR	8158817	IdentifierDecl	chs		8158785	2					
ANR	8158818	IdentifierDeclType	int		8158785	0					
ANR	8158819	Identifier	chs		8158785	1					
ANR	8158820	IdentifierDeclStatement	int type34_first ;	9:4:204:220	8158785	2	True				
ANR	8158821	IdentifierDecl	type34_first		8158785	0					
ANR	8158822	IdentifierDeclType	int		8158785	0					
ANR	8158823	Identifier	type34_first		8158785	1					
ANR	8158824	IdentifierDeclStatement	float type34_div = 0 ;	11:4:227:247	8158785	3	True				
ANR	8158825	IdentifierDecl	type34_div = 0		8158785	0					
ANR	8158826	IdentifierDeclType	float		8158785	0					
ANR	8158827	Identifier	type34_div		8158785	1					
ANR	8158828	AssignmentExpression	type34_div = 0		8158785	2		=			
ANR	8158829	Identifier	type34_div		8158785	0					
ANR	8158830	PrimaryExpression	0		8158785	1					
ANR	8158831	IdentifierDeclStatement	float type34_predictor ;	13:4:254:276	8158785	4	True				
ANR	8158832	IdentifierDecl	type34_predictor		8158785	0					
ANR	8158833	IdentifierDeclType	float		8158785	0					
ANR	8158834	Identifier	type34_predictor		8158785	1					
ANR	8158835	IdentifierDeclStatement	"float samples [ 10 ] , sign_bits [ 16 ] ;"	15:4:283:315	8158785	5	True				
ANR	8158836	IdentifierDecl	samples [ 10 ]		8158785	0					
ANR	8158837	IdentifierDeclType	float [ 10 ]		8158785	0					
ANR	8158838	Identifier	samples		8158785	1					
ANR	8158839	PrimaryExpression	10		8158785	2					
ANR	8158840	IdentifierDecl	sign_bits [ 16 ]		8158785	1					
ANR	8158841	IdentifierDeclType	float [ 16 ]		8158785	0					
ANR	8158842	Identifier	sign_bits		8158785	1					
ANR	8158843	PrimaryExpression	16		8158785	2					
ANR	8158844	IfStatement	if ( length == 0 )		8158785	6					
ANR	8158845	Condition	length == 0	19:8:328:338	8158785	0	True				
ANR	8158846	EqualityExpression	length == 0		8158785	0		==			
ANR	8158847	Identifier	length		8158785	0					
ANR	8158848	PrimaryExpression	0		8158785	1					
ANR	8158849	CompoundStatement		17:21:228:228	8158785	1					
ANR	8158850	ForStatement	for ( sb = sb_min ; sb < sb_max ; sb ++ )		8158785	0					
ANR	8158851	ForInit	sb = sb_min ;	23:13:390:399	8158785	0	True				
ANR	8158852	AssignmentExpression	sb = sb_min		8158785	0		=			
ANR	8158853	Identifier	sb		8158785	0					
ANR	8158854	Identifier	sb_min		8158785	1					
ANR	8158855	Condition	sb < sb_max	23:24:401:411	8158785	1	True				
ANR	8158856	RelationalExpression	sb < sb_max		8158785	0		<			
ANR	8158857	Identifier	sb		8158785	0					
ANR	8158858	Identifier	sb_max		8158785	1					
ANR	8158859	PostIncDecOperationExpression	sb ++	23:37:414:417	8158785	2	True				
ANR	8158860	Identifier	sb		8158785	0					
ANR	8158861	IncDec	++		8158785	1					
ANR	8158862	ExpressionStatement	"build_sb_samples_from_noise ( q , sb )"	25:12:433:468	8158785	3	True				
ANR	8158863	CallExpression	"build_sb_samples_from_noise ( q , sb )"		8158785	0					
ANR	8158864	Callee	build_sb_samples_from_noise		8158785	0					
ANR	8158865	Identifier	build_sb_samples_from_noise		8158785	0					
ANR	8158866	ArgumentList	q		8158785	1					
ANR	8158867	Argument	q		8158785	0					
ANR	8158868	Identifier	q		8158785	0					
ANR	8158869	Argument	sb		8158785	1					
ANR	8158870	Identifier	sb		8158785	0					
ANR	8158871	ReturnStatement	return ;	29:8:481:487	8158785	1	True				
ANR	8158872	ForStatement	for ( sb = sb_min ; sb < sb_max ; sb ++ )		8158785	7					
ANR	8158873	ForInit	sb = sb_min ;	35:9:508:519	8158785	0	True				
ANR	8158874	AssignmentExpression	sb = sb_min		8158785	0		=			
ANR	8158875	Identifier	sb		8158785	0					
ANR	8158876	Identifier	sb_min		8158785	1					
ANR	8158877	Condition	sb < sb_max	35:22:521:531	8158785	1	True				
ANR	8158878	RelationalExpression	sb < sb_max		8158785	0		<			
ANR	8158879	Identifier	sb		8158785	0					
ANR	8158880	Identifier	sb_max		8158785	1					
ANR	8158881	PostIncDecOperationExpression	sb ++	35:35:534:537	8158785	2	True				
ANR	8158882	Identifier	sb		8158785	0					
ANR	8158883	IncDec	++		8158785	1					
ANR	8158884	CompoundStatement		33:41:427:427	8158785	3					
ANR	8158885	ExpressionStatement	FIX_NOISE_IDX ( q -> noise_idx )	37:8:551:578	8158785	0	True				
ANR	8158886	CallExpression	FIX_NOISE_IDX ( q -> noise_idx )		8158785	0					
ANR	8158887	Callee	FIX_NOISE_IDX		8158785	0					
ANR	8158888	Identifier	FIX_NOISE_IDX		8158785	0					
ANR	8158889	ArgumentList	q -> noise_idx		8158785	1					
ANR	8158890	Argument	q -> noise_idx		8158785	0					
ANR	8158891	PtrMemberAccess	q -> noise_idx		8158785	0					
ANR	8158892	Identifier	q		8158785	0					
ANR	8158893	Identifier	noise_idx		8158785	1					
ANR	8158894	ExpressionStatement	channels = q -> nb_channels	41:8:591:616	8158785	1	True				
ANR	8158895	AssignmentExpression	channels = q -> nb_channels		8158785	0		=			
ANR	8158896	Identifier	channels		8158785	0					
ANR	8158897	PtrMemberAccess	q -> nb_channels		8158785	1					
ANR	8158898	Identifier	q		8158785	0					
ANR	8158899	Identifier	nb_channels		8158785	1					
ANR	8158900	IfStatement	if ( q -> nb_channels <= 1 || sb < 12 )		8158785	2					
ANR	8158901	Condition	q -> nb_channels <= 1 || sb < 12	45:12:633:662	8158785	0	True				
ANR	8158902	OrExpression	q -> nb_channels <= 1 || sb < 12		8158785	0		||			
ANR	8158903	RelationalExpression	q -> nb_channels <= 1		8158785	0		<=			
ANR	8158904	PtrMemberAccess	q -> nb_channels		8158785	0					
ANR	8158905	Identifier	q		8158785	0					
ANR	8158906	Identifier	nb_channels		8158785	1					
ANR	8158907	PrimaryExpression	1		8158785	1					
ANR	8158908	RelationalExpression	sb < 12		8158785	1		<			
ANR	8158909	Identifier	sb		8158785	0					
ANR	8158910	PrimaryExpression	12		8158785	1					
ANR	8158911	ExpressionStatement	joined_stereo = 0	47:12:678:695	8158785	1	True				
ANR	8158912	AssignmentExpression	joined_stereo = 0		8158785	0		=			
ANR	8158913	Identifier	joined_stereo		8158785	0					
ANR	8158914	PrimaryExpression	0		8158785	1					
ANR	8158915	ElseStatement	else		8158785	0					
ANR	8158916	IfStatement	if ( sb >= 24 )		8158785	0					
ANR	8158917	Condition	sb >= 24	49:17:715:722	8158785	0	True				
ANR	8158918	RelationalExpression	sb >= 24		8158785	0		>=			
ANR	8158919	Identifier	sb		8158785	0					
ANR	8158920	PrimaryExpression	24		8158785	1					
ANR	8158921	ExpressionStatement	joined_stereo = 1	51:12:738:755	8158785	1	True				
ANR	8158922	AssignmentExpression	joined_stereo = 1		8158785	0		=			
ANR	8158923	Identifier	joined_stereo		8158785	0					
ANR	8158924	PrimaryExpression	1		8158785	1					
ANR	8158925	ElseStatement	else		8158785	0					
ANR	8158926	ExpressionStatement	joined_stereo = ( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0	55:12:784:845	8158785	0	True				
ANR	8158927	AssignmentExpression	joined_stereo = ( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0		8158785	0		=			
ANR	8158928	Identifier	joined_stereo		8158785	0					
ANR	8158929	ConditionalExpression	( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0		8158785	1					
ANR	8158930	Condition	get_bits_left ( gb ) >= 1		8158785	0					
ANR	8158931	RelationalExpression	get_bits_left ( gb ) >= 1		8158785	0		>=			
ANR	8158932	CallExpression	get_bits_left ( gb )		8158785	0					
ANR	8158933	Callee	get_bits_left		8158785	0					
ANR	8158934	Identifier	get_bits_left		8158785	0					
ANR	8158935	ArgumentList	gb		8158785	1					
ANR	8158936	Argument	gb		8158785	0					
ANR	8158937	Identifier	gb		8158785	0					
ANR	8158938	PrimaryExpression	1		8158785	1					
ANR	8158939	CallExpression	get_bits1 ( gb )		8158785	1					
ANR	8158940	Callee	get_bits1		8158785	0					
ANR	8158941	Identifier	get_bits1		8158785	0					
ANR	8158942	ArgumentList	gb		8158785	1					
ANR	8158943	Argument	gb		8158785	0					
ANR	8158944	Identifier	gb		8158785	0					
ANR	8158945	PrimaryExpression	0		8158785	2					
ANR	8158946	IfStatement	if ( joined_stereo )		8158785	3					
ANR	8158947	Condition	joined_stereo	59:12:862:874	8158785	0	True				
ANR	8158948	Identifier	joined_stereo		8158785	0					
ANR	8158949	CompoundStatement		57:27:764:764	8158785	1					
ANR	8158950	IfStatement	if ( get_bits_left ( gb ) >= 16 )		8158785	0					
ANR	8158951	Condition	get_bits_left ( gb ) >= 16	61:16:896:918	8158785	0	True				
ANR	8158952	RelationalExpression	get_bits_left ( gb ) >= 16		8158785	0		>=			
ANR	8158953	CallExpression	get_bits_left ( gb )		8158785	0					
ANR	8158954	Callee	get_bits_left		8158785	0					
ANR	8158955	Identifier	get_bits_left		8158785	0					
ANR	8158956	ArgumentList	gb		8158785	1					
ANR	8158957	Argument	gb		8158785	0					
ANR	8158958	Identifier	gb		8158785	0					
ANR	8158959	PrimaryExpression	16		8158785	1					
ANR	8158960	ForStatement	for ( j = 0 ; j < 16 ; j ++ )		8158785	1					
ANR	8158961	ForInit	j = 0 ;	63:21:943:948	8158785	0	True				
ANR	8158962	AssignmentExpression	j = 0		8158785	0		=			
ANR	8158963	Identifier	j		8158785	0					
ANR	8158964	PrimaryExpression	0		8158785	1					
ANR	8158965	Condition	j < 16	63:28:950:955	8158785	1	True				
ANR	8158966	RelationalExpression	j < 16		8158785	0		<			
ANR	8158967	Identifier	j		8158785	0					
ANR	8158968	PrimaryExpression	16		8158785	1					
ANR	8158969	PostIncDecOperationExpression	j ++	63:36:958:960	8158785	2	True				
ANR	8158970	Identifier	j		8158785	0					
ANR	8158971	IncDec	++		8158785	1					
ANR	8158972	ExpressionStatement	sign_bits [ j ] = get_bits1 ( gb )	65:20:984:1013	8158785	3	True				
ANR	8158973	AssignmentExpression	sign_bits [ j ] = get_bits1 ( gb )		8158785	0		=			
ANR	8158974	ArrayIndexing	sign_bits [ j ]		8158785	0					
ANR	8158975	Identifier	sign_bits		8158785	0					
ANR	8158976	Identifier	j		8158785	1					
ANR	8158977	CallExpression	get_bits1 ( gb )		8158785	1					
ANR	8158978	Callee	get_bits1		8158785	0					
ANR	8158979	Identifier	get_bits1		8158785	0					
ANR	8158980	ArgumentList	gb		8158785	1					
ANR	8158981	Argument	gb		8158785	0					
ANR	8158982	Identifier	gb		8158785	0					
ANR	8158983	ForStatement	for ( j = 0 ; j < 64 ; j ++ )		8158785	1					
ANR	8158984	ForInit	j = 0 ;	69:17:1035:1040	8158785	0	True				
ANR	8158985	AssignmentExpression	j = 0		8158785	0		=			
ANR	8158986	Identifier	j		8158785	0					
ANR	8158987	PrimaryExpression	0		8158785	1					
ANR	8158988	Condition	j < 64	69:24:1042:1047	8158785	1	True				
ANR	8158989	RelationalExpression	j < 64		8158785	0		<			
ANR	8158990	Identifier	j		8158785	0					
ANR	8158991	PrimaryExpression	64		8158785	1					
ANR	8158992	PostIncDecOperationExpression	j ++	69:32:1050:1052	8158785	2	True				
ANR	8158993	Identifier	j		8158785	0					
ANR	8158994	IncDec	++		8158785	1					
ANR	8158995	IfStatement	if ( q -> coding_method [ 1 ] [ sb ] [ j ] > q -> coding_method [ 0 ] [ sb ] [ j ] )		8158785	3					
ANR	8158996	Condition	q -> coding_method [ 1 ] [ sb ] [ j ] > q -> coding_method [ 0 ] [ sb ] [ j ]	71:20:1076:1130	8158785	0	True				
ANR	8158997	RelationalExpression	q -> coding_method [ 1 ] [ sb ] [ j ] > q -> coding_method [ 0 ] [ sb ] [ j ]		8158785	0		>			
ANR	8158998	ArrayIndexing	q -> coding_method [ 1 ] [ sb ] [ j ]		8158785	0					
ANR	8158999	ArrayIndexing	q -> coding_method [ 1 ] [ sb ]		8158785	0					
ANR	8159000	ArrayIndexing	q -> coding_method [ 1 ]		8158785	0					
ANR	8159001	PtrMemberAccess	q -> coding_method		8158785	0					
ANR	8159002	Identifier	q		8158785	0					
ANR	8159003	Identifier	coding_method		8158785	1					
ANR	8159004	PrimaryExpression	1		8158785	1					
ANR	8159005	Identifier	sb		8158785	1					
ANR	8159006	Identifier	j		8158785	1					
ANR	8159007	ArrayIndexing	q -> coding_method [ 0 ] [ sb ] [ j ]		8158785	1					
ANR	8159008	ArrayIndexing	q -> coding_method [ 0 ] [ sb ]		8158785	0					
ANR	8159009	ArrayIndexing	q -> coding_method [ 0 ]		8158785	0					
ANR	8159010	PtrMemberAccess	q -> coding_method		8158785	0					
ANR	8159011	Identifier	q		8158785	0					
ANR	8159012	Identifier	coding_method		8158785	1					
ANR	8159013	PrimaryExpression	0		8158785	1					
ANR	8159014	Identifier	sb		8158785	1					
ANR	8159015	Identifier	j		8158785	1					
ANR	8159016	ExpressionStatement	q -> coding_method [ 0 ] [ sb ] [ j ] = q -> coding_method [ 1 ] [ sb ] [ j ]	73:20:1154:1209	8158785	1	True				
ANR	8159017	AssignmentExpression	q -> coding_method [ 0 ] [ sb ] [ j ] = q -> coding_method [ 1 ] [ sb ] [ j ]		8158785	0		=			
ANR	8159018	ArrayIndexing	q -> coding_method [ 0 ] [ sb ] [ j ]		8158785	0					
ANR	8159019	ArrayIndexing	q -> coding_method [ 0 ] [ sb ]		8158785	0					
ANR	8159020	ArrayIndexing	q -> coding_method [ 0 ]		8158785	0					
ANR	8159021	PtrMemberAccess	q -> coding_method		8158785	0					
ANR	8159022	Identifier	q		8158785	0					
ANR	8159023	Identifier	coding_method		8158785	1					
ANR	8159024	PrimaryExpression	0		8158785	1					
ANR	8159025	Identifier	sb		8158785	1					
ANR	8159026	Identifier	j		8158785	1					
ANR	8159027	ArrayIndexing	q -> coding_method [ 1 ] [ sb ] [ j ]		8158785	1					
ANR	8159028	ArrayIndexing	q -> coding_method [ 1 ] [ sb ]		8158785	0					
ANR	8159029	ArrayIndexing	q -> coding_method [ 1 ]		8158785	0					
ANR	8159030	PtrMemberAccess	q -> coding_method		8158785	0					
ANR	8159031	Identifier	q		8158785	0					
ANR	8159032	Identifier	coding_method		8158785	1					
ANR	8159033	PrimaryExpression	1		8158785	1					
ANR	8159034	Identifier	sb		8158785	1					
ANR	8159035	Identifier	j		8158785	1					
ANR	8159036	ExpressionStatement	"fix_coding_method_array ( sb , q -> nb_channels , q -> coding_method )"	77:12:1226:1287	8158785	2	True				
ANR	8159037	CallExpression	"fix_coding_method_array ( sb , q -> nb_channels , q -> coding_method )"		8158785	0					
ANR	8159038	Callee	fix_coding_method_array		8158785	0					
ANR	8159039	Identifier	fix_coding_method_array		8158785	0					
ANR	8159040	ArgumentList	sb		8158785	1					
ANR	8159041	Argument	sb		8158785	0					
ANR	8159042	Identifier	sb		8158785	0					
ANR	8159043	Argument	q -> nb_channels		8158785	1					
ANR	8159044	PtrMemberAccess	q -> nb_channels		8158785	0					
ANR	8159045	Identifier	q		8158785	0					
ANR	8159046	Identifier	nb_channels		8158785	1					
ANR	8159047	Argument	q -> coding_method		8158785	2					
ANR	8159048	PtrMemberAccess	q -> coding_method		8158785	0					
ANR	8159049	Identifier	q		8158785	0					
ANR	8159050	Identifier	coding_method		8158785	1					
ANR	8159051	ExpressionStatement	channels = 1	79:12:1302:1314	8158785	3	True				
ANR	8159052	AssignmentExpression	channels = 1		8158785	0		=			
ANR	8159053	Identifier	channels		8158785	0					
ANR	8159054	PrimaryExpression	1		8158785	1					
ANR	8159055	ForStatement	for ( ch = 0 ; ch < channels ; ch ++ )		8158785	4					
ANR	8159056	ForInit	ch = 0 ;	85:13:1343:1349	8158785	0	True				
ANR	8159057	AssignmentExpression	ch = 0		8158785	0		=			
ANR	8159058	Identifier	ch		8158785	0					
ANR	8159059	PrimaryExpression	0		8158785	1					
ANR	8159060	Condition	ch < channels	85:21:1351:1363	8158785	1	True				
ANR	8159061	RelationalExpression	ch < channels		8158785	0		<			
ANR	8159062	Identifier	ch		8158785	0					
ANR	8159063	Identifier	channels		8158785	1					
ANR	8159064	PostIncDecOperationExpression	ch ++	85:36:1366:1369	8158785	2	True				
ANR	8159065	Identifier	ch		8158785	0					
ANR	8159066	IncDec	++		8158785	1					
ANR	8159067	CompoundStatement		83:42:1259:1259	8158785	3					
ANR	8159068	ExpressionStatement	zero_encoding = ( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0	87:12:1387:1447	8158785	0	True				
ANR	8159069	AssignmentExpression	zero_encoding = ( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0		8158785	0		=			
ANR	8159070	Identifier	zero_encoding		8158785	0					
ANR	8159071	ConditionalExpression	( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0		8158785	1					
ANR	8159072	Condition	get_bits_left ( gb ) >= 1		8158785	0					
ANR	8159073	RelationalExpression	get_bits_left ( gb ) >= 1		8158785	0		>=			
ANR	8159074	CallExpression	get_bits_left ( gb )		8158785	0					
ANR	8159075	Callee	get_bits_left		8158785	0					
ANR	8159076	Identifier	get_bits_left		8158785	0					
ANR	8159077	ArgumentList	gb		8158785	1					
ANR	8159078	Argument	gb		8158785	0					
ANR	8159079	Identifier	gb		8158785	0					
ANR	8159080	PrimaryExpression	1		8158785	1					
ANR	8159081	CallExpression	get_bits1 ( gb )		8158785	1					
ANR	8159082	Callee	get_bits1		8158785	0					
ANR	8159083	Identifier	get_bits1		8158785	0					
ANR	8159084	ArgumentList	gb		8158785	1					
ANR	8159085	Argument	gb		8158785	0					
ANR	8159086	Identifier	gb		8158785	0					
ANR	8159087	PrimaryExpression	0		8158785	2					
ANR	8159088	ExpressionStatement	type34_predictor = 0.0	89:12:1462:1484	8158785	1	True				
ANR	8159089	AssignmentExpression	type34_predictor = 0.0		8158785	0		=			
ANR	8159090	Identifier	type34_predictor		8158785	0					
ANR	8159091	PrimaryExpression	0.0		8158785	1					
ANR	8159092	ExpressionStatement	type34_first = 1	91:12:1499:1515	8158785	2	True				
ANR	8159093	AssignmentExpression	type34_first = 1		8158785	0		=			
ANR	8159094	Identifier	type34_first		8158785	0					
ANR	8159095	PrimaryExpression	1		8158785	1					
ANR	8159096	ForStatement	for ( j = 0 ; j < 128 ; )		8158785	3					
ANR	8159097	ForInit	j = 0 ;	95:17:1537:1542	8158785	0	True				
ANR	8159098	AssignmentExpression	j = 0		8158785	0		=			
ANR	8159099	Identifier	j		8158785	0					
ANR	8159100	PrimaryExpression	0		8158785	1					
ANR	8159101	Condition	j < 128	95:24:1544:1550	8158785	1	True				
ANR	8159102	RelationalExpression	j < 128		8158785	0		<			
ANR	8159103	Identifier	j		8158785	0					
ANR	8159104	PrimaryExpression	128		8158785	1					
ANR	8159105	CompoundStatement		93:35:1442:1442	8158785	2					
ANR	8159106	SwitchStatement	switch ( q -> coding_method [ ch ] [ sb ] [ j / 2 ] )		8158785	0					
ANR	8159107	Condition	q -> coding_method [ ch ] [ sb ] [ j / 2 ]	97:24:1582:1612	8158785	0	True				
ANR	8159108	ArrayIndexing	q -> coding_method [ ch ] [ sb ] [ j / 2 ]		8158785	0					
ANR	8159109	ArrayIndexing	q -> coding_method [ ch ] [ sb ]		8158785	0					
ANR	8159110	ArrayIndexing	q -> coding_method [ ch ]		8158785	0					
ANR	8159111	PtrMemberAccess	q -> coding_method		8158785	0					
ANR	8159112	Identifier	q		8158785	0					
ANR	8159113	Identifier	coding_method		8158785	1					
ANR	8159114	Identifier	ch		8158785	1					
ANR	8159115	Identifier	sb		8158785	1					
ANR	8159116	MultiplicativeExpression	j / 2		8158785	1		/			
ANR	8159117	Identifier	j		8158785	0					
ANR	8159118	PrimaryExpression	2		8158785	1					
ANR	8159119	CompoundStatement		95:57:1502:1502	8158785	1					
ANR	8159120	Label	case 8 :	99:20:1638:1644	8158785	0	True				
ANR	8159121	IfStatement	if ( get_bits_left ( gb ) >= 10 )		8158785	1					
ANR	8159122	Condition	get_bits_left ( gb ) >= 10	101:28:1675:1697	8158785	0	True				
ANR	8159123	RelationalExpression	get_bits_left ( gb ) >= 10		8158785	0		>=			
ANR	8159124	CallExpression	get_bits_left ( gb )		8158785	0					
ANR	8159125	Callee	get_bits_left		8158785	0					
ANR	8159126	Identifier	get_bits_left		8158785	0					
ANR	8159127	ArgumentList	gb		8158785	1					
ANR	8159128	Argument	gb		8158785	0					
ANR	8159129	Identifier	gb		8158785	0					
ANR	8159130	PrimaryExpression	10		8158785	1					
ANR	8159131	CompoundStatement		99:53:1587:1587	8158785	1					
ANR	8159132	IfStatement	if ( zero_encoding )		8158785	0					
ANR	8159133	Condition	zero_encoding	103:32:1735:1747	8158785	0	True				
ANR	8159134	Identifier	zero_encoding		8158785	0					
ANR	8159135	CompoundStatement		101:47:1637:1637	8158785	1					
ANR	8159136	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8158785	0					
ANR	8159137	ForInit	k = 0 ;	105:37:1790:1795	8158785	0	True				
ANR	8159138	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159139	Identifier	k		8158785	0					
ANR	8159140	PrimaryExpression	0		8158785	1					
ANR	8159141	Condition	k < 5	105:44:1797:1801	8158785	1	True				
ANR	8159142	RelationalExpression	k < 5		8158785	0		<			
ANR	8159143	Identifier	k		8158785	0					
ANR	8159144	PrimaryExpression	5		8158785	1					
ANR	8159145	PostIncDecOperationExpression	k ++	105:51:1804:1806	8158785	2	True				
ANR	8159146	Identifier	k		8158785	0					
ANR	8159147	IncDec	++		8158785	1					
ANR	8159148	CompoundStatement		103:56:1696:1696	8158785	3					
ANR	8159149	IfStatement	if ( ( j + 2 * k ) >= 128 )		8158785	0					
ANR	8159150	Condition	( j + 2 * k ) >= 128	107:40:1852:1869	8158785	0	True				
ANR	8159151	RelationalExpression	( j + 2 * k ) >= 128		8158785	0		>=			
ANR	8159152	AdditiveExpression	j + 2 * k		8158785	0		+			
ANR	8159153	Identifier	j		8158785	0					
ANR	8159154	MultiplicativeExpression	2 * k		8158785	1		*			
ANR	8159155	PrimaryExpression	2		8158785	0					
ANR	8159156	Identifier	k		8158785	1					
ANR	8159157	PrimaryExpression	128		8158785	1					
ANR	8159158	BreakStatement	break ;	109:40:1913:1918	8158785	1	True				
ANR	8159159	ExpressionStatement	samples [ 2 * k ] = get_bits1 ( gb ) ? dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ] : 0	111:36:1957:2040	8158785	1	True				
ANR	8159160	AssignmentExpression	samples [ 2 * k ] = get_bits1 ( gb ) ? dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ] : 0		8158785	0		=			
ANR	8159161	ArrayIndexing	samples [ 2 * k ]		8158785	0					
ANR	8159162	Identifier	samples		8158785	0					
ANR	8159163	MultiplicativeExpression	2 * k		8158785	1		*			
ANR	8159164	PrimaryExpression	2		8158785	0					
ANR	8159165	Identifier	k		8158785	1					
ANR	8159166	ConditionalExpression	get_bits1 ( gb ) ? dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ] : 0		8158785	1					
ANR	8159167	Condition	get_bits1 ( gb )		8158785	0					
ANR	8159168	CallExpression	get_bits1 ( gb )		8158785	0					
ANR	8159169	Callee	get_bits1		8158785	0					
ANR	8159170	Identifier	get_bits1		8158785	0					
ANR	8159171	ArgumentList	gb		8158785	1					
ANR	8159172	Argument	gb		8158785	0					
ANR	8159173	Identifier	gb		8158785	0					
ANR	8159174	ArrayIndexing	dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8158785	1					
ANR	8159175	ArrayIndexing	dequant_1bit [ joined_stereo ]		8158785	0					
ANR	8159176	Identifier	dequant_1bit		8158785	0					
ANR	8159177	Identifier	joined_stereo		8158785	1					
ANR	8159178	MultiplicativeExpression	2 * get_bits1 ( gb )		8158785	1		*			
ANR	8159179	PrimaryExpression	2		8158785	0					
ANR	8159180	CallExpression	get_bits1 ( gb )		8158785	1					
ANR	8159181	Callee	get_bits1		8158785	0					
ANR	8159182	Identifier	get_bits1		8158785	0					
ANR	8159183	ArgumentList	gb		8158785	1					
ANR	8159184	Argument	gb		8158785	0					
ANR	8159185	Identifier	gb		8158785	0					
ANR	8159186	PrimaryExpression	0		8158785	2					
ANR	8159187	ElseStatement	else		8158785	0					
ANR	8159188	CompoundStatement		113:35:2000:2000	8158785	0					
ANR	8159189	ExpressionStatement	"n = get_bits ( gb , 8 )"	117:32:2148:2167	8158785	0	True				
ANR	8159190	AssignmentExpression	"n = get_bits ( gb , 8 )"		8158785	0		=			
ANR	8159191	Identifier	n		8158785	0					
ANR	8159192	CallExpression	"get_bits ( gb , 8 )"		8158785	1					
ANR	8159193	Callee	get_bits		8158785	0					
ANR	8159194	Identifier	get_bits		8158785	0					
ANR	8159195	ArgumentList	gb		8158785	1					
ANR	8159196	Argument	gb		8158785	0					
ANR	8159197	Identifier	gb		8158785	0					
ANR	8159198	Argument	8		8158785	1					
ANR	8159199	PrimaryExpression	8		8158785	0					
ANR	8159200	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8158785	1					
ANR	8159201	ForInit	k = 0 ;	119:37:2207:2212	8158785	0	True				
ANR	8159202	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159203	Identifier	k		8158785	0					
ANR	8159204	PrimaryExpression	0		8158785	1					
ANR	8159205	Condition	k < 5	119:44:2214:2218	8158785	1	True				
ANR	8159206	RelationalExpression	k < 5		8158785	0		<			
ANR	8159207	Identifier	k		8158785	0					
ANR	8159208	PrimaryExpression	5		8158785	1					
ANR	8159209	PostIncDecOperationExpression	k ++	119:51:2221:2223	8158785	2	True				
ANR	8159210	Identifier	k		8158785	0					
ANR	8159211	IncDec	++		8158785	1					
ANR	8159212	ExpressionStatement	samples [ 2 * k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]	121:36:2263:2335	8158785	3	True				
ANR	8159213	AssignmentExpression	samples [ 2 * k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8158785	0		=			
ANR	8159214	ArrayIndexing	samples [ 2 * k ]		8158785	0					
ANR	8159215	Identifier	samples		8158785	0					
ANR	8159216	MultiplicativeExpression	2 * k		8158785	1		*			
ANR	8159217	PrimaryExpression	2		8158785	0					
ANR	8159218	Identifier	k		8158785	1					
ANR	8159219	ArrayIndexing	dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8158785	1					
ANR	8159220	ArrayIndexing	dequant_1bit [ joined_stereo ]		8158785	0					
ANR	8159221	Identifier	dequant_1bit		8158785	0					
ANR	8159222	Identifier	joined_stereo		8158785	1					
ANR	8159223	ArrayIndexing	random_dequant_index [ n ] [ k ]		8158785	1					
ANR	8159224	ArrayIndexing	random_dequant_index [ n ]		8158785	0					
ANR	8159225	Identifier	random_dequant_index		8158785	0					
ANR	8159226	Identifier	n		8158785	1					
ANR	8159227	Identifier	k		8158785	1					
ANR	8159228	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8158785	1					
ANR	8159229	ForInit	k = 0 ;	125:33:2402:2407	8158785	0	True				
ANR	8159230	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159231	Identifier	k		8158785	0					
ANR	8159232	PrimaryExpression	0		8158785	1					
ANR	8159233	Condition	k < 5	125:40:2409:2413	8158785	1	True				
ANR	8159234	RelationalExpression	k < 5		8158785	0		<			
ANR	8159235	Identifier	k		8158785	0					
ANR	8159236	PrimaryExpression	5		8158785	1					
ANR	8159237	PostIncDecOperationExpression	k ++	125:47:2416:2418	8158785	2	True				
ANR	8159238	Identifier	k		8158785	0					
ANR	8159239	IncDec	++		8158785	1					
ANR	8159240	ExpressionStatement	"samples [ 2 * k + 1 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	127:32:2454:2510	8158785	3	True				
ANR	8159241	AssignmentExpression	"samples [ 2 * k + 1 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	0		=			
ANR	8159242	ArrayIndexing	samples [ 2 * k + 1 ]		8158785	0					
ANR	8159243	Identifier	samples		8158785	0					
ANR	8159244	AdditiveExpression	2 * k + 1		8158785	1		+			
ANR	8159245	MultiplicativeExpression	2 * k		8158785	0		*			
ANR	8159246	PrimaryExpression	2		8158785	0					
ANR	8159247	Identifier	k		8158785	1					
ANR	8159248	PrimaryExpression	1		8158785	1					
ANR	8159249	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	1					
ANR	8159250	Callee	SB_DITHERING_NOISE		8158785	0					
ANR	8159251	Identifier	SB_DITHERING_NOISE		8158785	0					
ANR	8159252	ArgumentList	sb		8158785	1					
ANR	8159253	Argument	sb		8158785	0					
ANR	8159254	Identifier	sb		8158785	0					
ANR	8159255	Argument	q -> noise_idx		8158785	1					
ANR	8159256	PtrMemberAccess	q -> noise_idx		8158785	0					
ANR	8159257	Identifier	q		8158785	0					
ANR	8159258	Identifier	noise_idx		8158785	1					
ANR	8159259	ElseStatement	else		8158785	0					
ANR	8159260	CompoundStatement		127:31:2431:2431	8158785	0					
ANR	8159261	ForStatement	for ( k = 0 ; k < 10 ; k ++ )		8158785	0					
ANR	8159262	ForInit	k = 0 ;	131:33:2580:2585	8158785	0	True				
ANR	8159263	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159264	Identifier	k		8158785	0					
ANR	8159265	PrimaryExpression	0		8158785	1					
ANR	8159266	Condition	k < 10	131:40:2587:2592	8158785	1	True				
ANR	8159267	RelationalExpression	k < 10		8158785	0		<			
ANR	8159268	Identifier	k		8158785	0					
ANR	8159269	PrimaryExpression	10		8158785	1					
ANR	8159270	PostIncDecOperationExpression	k ++	131:48:2595:2597	8158785	2	True				
ANR	8159271	Identifier	k		8158785	0					
ANR	8159272	IncDec	++		8158785	1					
ANR	8159273	ExpressionStatement	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	133:32:2633:2681	8158785	3	True				
ANR	8159274	AssignmentExpression	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	0		=			
ANR	8159275	ArrayIndexing	samples [ k ]		8158785	0					
ANR	8159276	Identifier	samples		8158785	0					
ANR	8159277	Identifier	k		8158785	1					
ANR	8159278	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	1					
ANR	8159279	Callee	SB_DITHERING_NOISE		8158785	0					
ANR	8159280	Identifier	SB_DITHERING_NOISE		8158785	0					
ANR	8159281	ArgumentList	sb		8158785	1					
ANR	8159282	Argument	sb		8158785	0					
ANR	8159283	Identifier	sb		8158785	0					
ANR	8159284	Argument	q -> noise_idx		8158785	1					
ANR	8159285	PtrMemberAccess	q -> noise_idx		8158785	0					
ANR	8159286	Identifier	q		8158785	0					
ANR	8159287	Identifier	noise_idx		8158785	1					
ANR	8159288	ExpressionStatement	run = 10	137:24:2735:2743	8158785	2	True				
ANR	8159289	AssignmentExpression	run = 10		8158785	0		=			
ANR	8159290	Identifier	run		8158785	0					
ANR	8159291	PrimaryExpression	10		8158785	1					
ANR	8159292	BreakStatement	break ;	139:24:2770:2775	8158785	3	True				
ANR	8159293	Label	case 10 :	143:20:2800:2807	8158785	4	True				
ANR	8159294	IfStatement	if ( get_bits_left ( gb ) >= 1 )		8158785	5					
ANR	8159295	Condition	get_bits_left ( gb ) >= 1	145:28:2838:2859	8158785	0	True				
ANR	8159296	RelationalExpression	get_bits_left ( gb ) >= 1		8158785	0		>=			
ANR	8159297	CallExpression	get_bits_left ( gb )		8158785	0					
ANR	8159298	Callee	get_bits_left		8158785	0					
ANR	8159299	Identifier	get_bits_left		8158785	0					
ANR	8159300	ArgumentList	gb		8158785	1					
ANR	8159301	Argument	gb		8158785	0					
ANR	8159302	Identifier	gb		8158785	0					
ANR	8159303	PrimaryExpression	1		8158785	1					
ANR	8159304	CompoundStatement		145:28:2780:2794	8158785	1					
ANR	8159305	IdentifierDeclStatement	float f = 0.81 ;	147:28:2893:2907	8158785	0	True				
ANR	8159306	IdentifierDecl	f = 0.81		8158785	0					
ANR	8159307	IdentifierDeclType	float		8158785	0					
ANR	8159308	Identifier	f		8158785	1					
ANR	8159309	AssignmentExpression	f = 0.81		8158785	2		=			
ANR	8159310	Identifier	f		8158785	0					
ANR	8159311	PrimaryExpression	0.81		8158785	1					
ANR	8159312	IfStatement	if ( get_bits1 ( gb ) )		8158785	1					
ANR	8159313	Condition	get_bits1 ( gb )	151:32:2944:2956	8158785	0	True				
ANR	8159314	CallExpression	get_bits1 ( gb )		8158785	0					
ANR	8159315	Callee	get_bits1		8158785	0					
ANR	8159316	Identifier	get_bits1		8158785	0					
ANR	8159317	ArgumentList	gb		8158785	1					
ANR	8159318	Argument	gb		8158785	0					
ANR	8159319	Identifier	gb		8158785	0					
ANR	8159320	ExpressionStatement	f = - f	153:32:2992:2998	8158785	1	True				
ANR	8159321	AssignmentExpression	f = - f		8158785	0		=			
ANR	8159322	Identifier	f		8158785	0					
ANR	8159323	UnaryOperationExpression	- f		8158785	1					
ANR	8159324	UnaryOperator	-		8158785	0					
ANR	8159325	Identifier	f		8158785	1					
ANR	8159326	ExpressionStatement	f -= noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ] * 9.0 / 40.0	155:28:3029:3096	8158785	2	True				
ANR	8159327	AssignmentExpression	f -= noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ] * 9.0 / 40.0		8158785	0		-=			
ANR	8159328	Identifier	f		8158785	0					
ANR	8159329	MultiplicativeExpression	noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ] * 9.0 / 40.0		8158785	1		*			
ANR	8159330	ArrayIndexing	noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ]		8158785	0					
ANR	8159331	Identifier	noise_samples		8158785	0					
ANR	8159332	BitAndExpression	( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127		8158785	1		&			
ANR	8159333	MultiplicativeExpression	( sb + 1 ) * ( j + 5 * ch + 1 )		8158785	0		*			
ANR	8159334	AdditiveExpression	sb + 1		8158785	0		+			
ANR	8159335	Identifier	sb		8158785	0					
ANR	8159336	PrimaryExpression	1		8158785	1					
ANR	8159337	AdditiveExpression	j + 5 * ch + 1		8158785	1		+			
ANR	8159338	Identifier	j		8158785	0					
ANR	8159339	AdditiveExpression	5 * ch + 1		8158785	1		+			
ANR	8159340	MultiplicativeExpression	5 * ch		8158785	0		*			
ANR	8159341	PrimaryExpression	5		8158785	0					
ANR	8159342	Identifier	ch		8158785	1					
ANR	8159343	PrimaryExpression	1		8158785	1					
ANR	8159344	PrimaryExpression	127		8158785	1					
ANR	8159345	MultiplicativeExpression	9.0 / 40.0		8158785	1		/			
ANR	8159346	PrimaryExpression	9.0		8158785	0					
ANR	8159347	PrimaryExpression	40.0		8158785	1					
ANR	8159348	ExpressionStatement	samples [ 0 ] = f	157:28:3127:3141	8158785	3	True				
ANR	8159349	AssignmentExpression	samples [ 0 ] = f		8158785	0		=			
ANR	8159350	ArrayIndexing	samples [ 0 ]		8158785	0					
ANR	8159351	Identifier	samples		8158785	0					
ANR	8159352	PrimaryExpression	0		8158785	1					
ANR	8159353	Identifier	f		8158785	1					
ANR	8159354	ElseStatement	else		8158785	0					
ANR	8159355	CompoundStatement		157:31:3062:3062	8158785	0					
ANR	8159356	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	161:28:3206:3254	8158785	0	True				
ANR	8159357	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	0		=			
ANR	8159358	ArrayIndexing	samples [ 0 ]		8158785	0					
ANR	8159359	Identifier	samples		8158785	0					
ANR	8159360	PrimaryExpression	0		8158785	1					
ANR	8159361	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	1					
ANR	8159362	Callee	SB_DITHERING_NOISE		8158785	0					
ANR	8159363	Identifier	SB_DITHERING_NOISE		8158785	0					
ANR	8159364	ArgumentList	sb		8158785	1					
ANR	8159365	Argument	sb		8158785	0					
ANR	8159366	Identifier	sb		8158785	0					
ANR	8159367	Argument	q -> noise_idx		8158785	1					
ANR	8159368	PtrMemberAccess	q -> noise_idx		8158785	0					
ANR	8159369	Identifier	q		8158785	0					
ANR	8159370	Identifier	noise_idx		8158785	1					
ANR	8159371	ExpressionStatement	run = 1	165:24:3308:3315	8158785	6	True				
ANR	8159372	AssignmentExpression	run = 1		8158785	0		=			
ANR	8159373	Identifier	run		8158785	0					
ANR	8159374	PrimaryExpression	1		8158785	1					
ANR	8159375	BreakStatement	break ;	167:24:3342:3347	8158785	7	True				
ANR	8159376	Label	case 16 :	171:20:3372:3379	8158785	8	True				
ANR	8159377	IfStatement	if ( get_bits_left ( gb ) >= 10 )		8158785	9					
ANR	8159378	Condition	get_bits_left ( gb ) >= 10	173:28:3410:3432	8158785	0	True				
ANR	8159379	RelationalExpression	get_bits_left ( gb ) >= 10		8158785	0		>=			
ANR	8159380	CallExpression	get_bits_left ( gb )		8158785	0					
ANR	8159381	Callee	get_bits_left		8158785	0					
ANR	8159382	Identifier	get_bits_left		8158785	0					
ANR	8159383	ArgumentList	gb		8158785	1					
ANR	8159384	Argument	gb		8158785	0					
ANR	8159385	Identifier	gb		8158785	0					
ANR	8159386	PrimaryExpression	10		8158785	1					
ANR	8159387	CompoundStatement		171:53:3322:3322	8158785	1					
ANR	8159388	IfStatement	if ( zero_encoding )		8158785	0					
ANR	8159389	Condition	zero_encoding	175:32:3470:3482	8158785	0	True				
ANR	8159390	Identifier	zero_encoding		8158785	0					
ANR	8159391	CompoundStatement		173:47:3372:3372	8158785	1					
ANR	8159392	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8158785	0					
ANR	8159393	ForInit	k = 0 ;	177:37:3525:3530	8158785	0	True				
ANR	8159394	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159395	Identifier	k		8158785	0					
ANR	8159396	PrimaryExpression	0		8158785	1					
ANR	8159397	Condition	k < 5	177:44:3532:3536	8158785	1	True				
ANR	8159398	RelationalExpression	k < 5		8158785	0		<			
ANR	8159399	Identifier	k		8158785	0					
ANR	8159400	PrimaryExpression	5		8158785	1					
ANR	8159401	PostIncDecOperationExpression	k ++	177:51:3539:3541	8158785	2	True				
ANR	8159402	Identifier	k		8158785	0					
ANR	8159403	IncDec	++		8158785	1					
ANR	8159404	CompoundStatement		175:56:3431:3431	8158785	3					
ANR	8159405	IfStatement	if ( ( j + k ) >= 128 )		8158785	0					
ANR	8159406	Condition	( j + k ) >= 128	179:40:3587:3600	8158785	0	True				
ANR	8159407	RelationalExpression	( j + k ) >= 128		8158785	0		>=			
ANR	8159408	AdditiveExpression	j + k		8158785	0		+			
ANR	8159409	Identifier	j		8158785	0					
ANR	8159410	Identifier	k		8158785	1					
ANR	8159411	PrimaryExpression	128		8158785	1					
ANR	8159412	BreakStatement	break ;	181:40:3644:3649	8158785	1	True				
ANR	8159413	ExpressionStatement	samples [ k ] = ( get_bits1 ( gb ) == 0 ) ? 0 : dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]	183:36:3688:3774	8158785	1	True				
ANR	8159414	AssignmentExpression	samples [ k ] = ( get_bits1 ( gb ) == 0 ) ? 0 : dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8158785	0		=			
ANR	8159415	ArrayIndexing	samples [ k ]		8158785	0					
ANR	8159416	Identifier	samples		8158785	0					
ANR	8159417	Identifier	k		8158785	1					
ANR	8159418	ConditionalExpression	( get_bits1 ( gb ) == 0 ) ? 0 : dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8158785	1					
ANR	8159419	Condition	get_bits1 ( gb ) == 0		8158785	0					
ANR	8159420	EqualityExpression	get_bits1 ( gb ) == 0		8158785	0		==			
ANR	8159421	CallExpression	get_bits1 ( gb )		8158785	0					
ANR	8159422	Callee	get_bits1		8158785	0					
ANR	8159423	Identifier	get_bits1		8158785	0					
ANR	8159424	ArgumentList	gb		8158785	1					
ANR	8159425	Argument	gb		8158785	0					
ANR	8159426	Identifier	gb		8158785	0					
ANR	8159427	PrimaryExpression	0		8158785	1					
ANR	8159428	PrimaryExpression	0		8158785	1					
ANR	8159429	ArrayIndexing	dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8158785	2					
ANR	8159430	ArrayIndexing	dequant_1bit [ joined_stereo ]		8158785	0					
ANR	8159431	Identifier	dequant_1bit		8158785	0					
ANR	8159432	Identifier	joined_stereo		8158785	1					
ANR	8159433	MultiplicativeExpression	2 * get_bits1 ( gb )		8158785	1		*			
ANR	8159434	PrimaryExpression	2		8158785	0					
ANR	8159435	CallExpression	get_bits1 ( gb )		8158785	1					
ANR	8159436	Callee	get_bits1		8158785	0					
ANR	8159437	Identifier	get_bits1		8158785	0					
ANR	8159438	ArgumentList	gb		8158785	1					
ANR	8159439	Argument	gb		8158785	0					
ANR	8159440	Identifier	gb		8158785	0					
ANR	8159441	ElseStatement	else		8158785	0					
ANR	8159442	CompoundStatement		185:35:3734:3734	8158785	0					
ANR	8159443	ExpressionStatement	"n = get_bits ( gb , 8 )"	189:32:3882:3902	8158785	0	True				
ANR	8159444	AssignmentExpression	"n = get_bits ( gb , 8 )"		8158785	0		=			
ANR	8159445	Identifier	n		8158785	0					
ANR	8159446	CallExpression	"get_bits ( gb , 8 )"		8158785	1					
ANR	8159447	Callee	get_bits		8158785	0					
ANR	8159448	Identifier	get_bits		8158785	0					
ANR	8159449	ArgumentList	gb		8158785	1					
ANR	8159450	Argument	gb		8158785	0					
ANR	8159451	Identifier	gb		8158785	0					
ANR	8159452	Argument	8		8158785	1					
ANR	8159453	PrimaryExpression	8		8158785	0					
ANR	8159454	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8158785	1					
ANR	8159455	ForInit	k = 0 ;	191:37:3942:3947	8158785	0	True				
ANR	8159456	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159457	Identifier	k		8158785	0					
ANR	8159458	PrimaryExpression	0		8158785	1					
ANR	8159459	Condition	k < 5	191:44:3949:3953	8158785	1	True				
ANR	8159460	RelationalExpression	k < 5		8158785	0		<			
ANR	8159461	Identifier	k		8158785	0					
ANR	8159462	PrimaryExpression	5		8158785	1					
ANR	8159463	PostIncDecOperationExpression	k ++	191:51:3956:3958	8158785	2	True				
ANR	8159464	Identifier	k		8158785	0					
ANR	8159465	IncDec	++		8158785	1					
ANR	8159466	ExpressionStatement	samples [ k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]	193:36:3998:4066	8158785	3	True				
ANR	8159467	AssignmentExpression	samples [ k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8158785	0		=			
ANR	8159468	ArrayIndexing	samples [ k ]		8158785	0					
ANR	8159469	Identifier	samples		8158785	0					
ANR	8159470	Identifier	k		8158785	1					
ANR	8159471	ArrayIndexing	dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8158785	1					
ANR	8159472	ArrayIndexing	dequant_1bit [ joined_stereo ]		8158785	0					
ANR	8159473	Identifier	dequant_1bit		8158785	0					
ANR	8159474	Identifier	joined_stereo		8158785	1					
ANR	8159475	ArrayIndexing	random_dequant_index [ n ] [ k ]		8158785	1					
ANR	8159476	ArrayIndexing	random_dequant_index [ n ]		8158785	0					
ANR	8159477	Identifier	random_dequant_index		8158785	0					
ANR	8159478	Identifier	n		8158785	1					
ANR	8159479	Identifier	k		8158785	1					
ANR	8159480	ElseStatement	else		8158785	0					
ANR	8159481	CompoundStatement		195:31:4018:4018	8158785	0					
ANR	8159482	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8158785	0					
ANR	8159483	ForInit	k = 0 ;	199:33:4167:4172	8158785	0	True				
ANR	8159484	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159485	Identifier	k		8158785	0					
ANR	8159486	PrimaryExpression	0		8158785	1					
ANR	8159487	Condition	k < 5	199:40:4174:4178	8158785	1	True				
ANR	8159488	RelationalExpression	k < 5		8158785	0		<			
ANR	8159489	Identifier	k		8158785	0					
ANR	8159490	PrimaryExpression	5		8158785	1					
ANR	8159491	PostIncDecOperationExpression	k ++	199:47:4181:4183	8158785	2	True				
ANR	8159492	Identifier	k		8158785	0					
ANR	8159493	IncDec	++		8158785	1					
ANR	8159494	ExpressionStatement	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	201:32:4219:4267	8158785	3	True				
ANR	8159495	AssignmentExpression	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	0		=			
ANR	8159496	ArrayIndexing	samples [ k ]		8158785	0					
ANR	8159497	Identifier	samples		8158785	0					
ANR	8159498	Identifier	k		8158785	1					
ANR	8159499	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	1					
ANR	8159500	Callee	SB_DITHERING_NOISE		8158785	0					
ANR	8159501	Identifier	SB_DITHERING_NOISE		8158785	0					
ANR	8159502	ArgumentList	sb		8158785	1					
ANR	8159503	Argument	sb		8158785	0					
ANR	8159504	Identifier	sb		8158785	0					
ANR	8159505	Argument	q -> noise_idx		8158785	1					
ANR	8159506	PtrMemberAccess	q -> noise_idx		8158785	0					
ANR	8159507	Identifier	q		8158785	0					
ANR	8159508	Identifier	noise_idx		8158785	1					
ANR	8159509	ExpressionStatement	run = 5	205:24:4321:4328	8158785	10	True				
ANR	8159510	AssignmentExpression	run = 5		8158785	0		=			
ANR	8159511	Identifier	run		8158785	0					
ANR	8159512	PrimaryExpression	5		8158785	1					
ANR	8159513	BreakStatement	break ;	207:24:4355:4360	8158785	11	True				
ANR	8159514	Label	case 24 :	211:20:4385:4392	8158785	12	True				
ANR	8159515	IfStatement	if ( get_bits_left ( gb ) >= 7 )		8158785	13					
ANR	8159516	Condition	get_bits_left ( gb ) >= 7	213:28:4423:4444	8158785	0	True				
ANR	8159517	RelationalExpression	get_bits_left ( gb ) >= 7		8158785	0		>=			
ANR	8159518	CallExpression	get_bits_left ( gb )		8158785	0					
ANR	8159519	Callee	get_bits_left		8158785	0					
ANR	8159520	Identifier	get_bits_left		8158785	0					
ANR	8159521	ArgumentList	gb		8158785	1					
ANR	8159522	Argument	gb		8158785	0					
ANR	8159523	Identifier	gb		8158785	0					
ANR	8159524	PrimaryExpression	7		8158785	1					
ANR	8159525	CompoundStatement		211:52:4334:4334	8158785	1					
ANR	8159526	ExpressionStatement	"n = get_bits ( gb , 7 )"	215:28:4478:4497	8158785	0	True				
ANR	8159527	AssignmentExpression	"n = get_bits ( gb , 7 )"		8158785	0		=			
ANR	8159528	Identifier	n		8158785	0					
ANR	8159529	CallExpression	"get_bits ( gb , 7 )"		8158785	1					
ANR	8159530	Callee	get_bits		8158785	0					
ANR	8159531	Identifier	get_bits		8158785	0					
ANR	8159532	ArgumentList	gb		8158785	1					
ANR	8159533	Argument	gb		8158785	0					
ANR	8159534	Identifier	gb		8158785	0					
ANR	8159535	Argument	7		8158785	1					
ANR	8159536	PrimaryExpression	7		8158785	0					
ANR	8159537	ForStatement	for ( k = 0 ; k < 3 ; k ++ )		8158785	1					
ANR	8159538	ForInit	k = 0 ;	217:33:4533:4538	8158785	0	True				
ANR	8159539	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159540	Identifier	k		8158785	0					
ANR	8159541	PrimaryExpression	0		8158785	1					
ANR	8159542	Condition	k < 3	217:40:4540:4544	8158785	1	True				
ANR	8159543	RelationalExpression	k < 3		8158785	0		<			
ANR	8159544	Identifier	k		8158785	0					
ANR	8159545	PrimaryExpression	3		8158785	1					
ANR	8159546	PostIncDecOperationExpression	k ++	217:47:4547:4549	8158785	2	True				
ANR	8159547	Identifier	k		8158785	0					
ANR	8159548	IncDec	++		8158785	1					
ANR	8159549	ExpressionStatement	samples [ k ] = ( random_dequant_type24 [ n ] [ k ] - 2.0 ) * 0.5	219:32:4585:4639	8158785	3	True				
ANR	8159550	AssignmentExpression	samples [ k ] = ( random_dequant_type24 [ n ] [ k ] - 2.0 ) * 0.5		8158785	0		=			
ANR	8159551	ArrayIndexing	samples [ k ]		8158785	0					
ANR	8159552	Identifier	samples		8158785	0					
ANR	8159553	Identifier	k		8158785	1					
ANR	8159554	MultiplicativeExpression	( random_dequant_type24 [ n ] [ k ] - 2.0 ) * 0.5		8158785	1		*			
ANR	8159555	AdditiveExpression	random_dequant_type24 [ n ] [ k ] - 2.0		8158785	0		-			
ANR	8159556	ArrayIndexing	random_dequant_type24 [ n ] [ k ]		8158785	0					
ANR	8159557	ArrayIndexing	random_dequant_type24 [ n ]		8158785	0					
ANR	8159558	Identifier	random_dequant_type24		8158785	0					
ANR	8159559	Identifier	n		8158785	1					
ANR	8159560	Identifier	k		8158785	1					
ANR	8159561	PrimaryExpression	2.0		8158785	1					
ANR	8159562	PrimaryExpression	0.5		8158785	1					
ANR	8159563	ElseStatement	else		8158785	0					
ANR	8159564	CompoundStatement		219:31:4560:4560	8158785	0					
ANR	8159565	ForStatement	for ( k = 0 ; k < 3 ; k ++ )		8158785	0					
ANR	8159566	ForInit	k = 0 ;	223:33:4709:4714	8158785	0	True				
ANR	8159567	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159568	Identifier	k		8158785	0					
ANR	8159569	PrimaryExpression	0		8158785	1					
ANR	8159570	Condition	k < 3	223:40:4716:4720	8158785	1	True				
ANR	8159571	RelationalExpression	k < 3		8158785	0		<			
ANR	8159572	Identifier	k		8158785	0					
ANR	8159573	PrimaryExpression	3		8158785	1					
ANR	8159574	PostIncDecOperationExpression	k ++	223:47:4723:4725	8158785	2	True				
ANR	8159575	Identifier	k		8158785	0					
ANR	8159576	IncDec	++		8158785	1					
ANR	8159577	ExpressionStatement	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	225:32:4761:4809	8158785	3	True				
ANR	8159578	AssignmentExpression	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	0		=			
ANR	8159579	ArrayIndexing	samples [ k ]		8158785	0					
ANR	8159580	Identifier	samples		8158785	0					
ANR	8159581	Identifier	k		8158785	1					
ANR	8159582	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	1					
ANR	8159583	Callee	SB_DITHERING_NOISE		8158785	0					
ANR	8159584	Identifier	SB_DITHERING_NOISE		8158785	0					
ANR	8159585	ArgumentList	sb		8158785	1					
ANR	8159586	Argument	sb		8158785	0					
ANR	8159587	Identifier	sb		8158785	0					
ANR	8159588	Argument	q -> noise_idx		8158785	1					
ANR	8159589	PtrMemberAccess	q -> noise_idx		8158785	0					
ANR	8159590	Identifier	q		8158785	0					
ANR	8159591	Identifier	noise_idx		8158785	1					
ANR	8159592	ExpressionStatement	run = 3	229:24:4863:4870	8158785	14	True				
ANR	8159593	AssignmentExpression	run = 3		8158785	0		=			
ANR	8159594	Identifier	run		8158785	0					
ANR	8159595	PrimaryExpression	3		8158785	1					
ANR	8159596	BreakStatement	break ;	231:24:4897:4902	8158785	15	True				
ANR	8159597	Label	case 30 :	235:20:4927:4934	8158785	16	True				
ANR	8159598	IfStatement	if ( get_bits_left ( gb ) >= 4 )		8158785	17					
ANR	8159599	Condition	get_bits_left ( gb ) >= 4	237:28:4965:4986	8158785	0	True				
ANR	8159600	RelationalExpression	get_bits_left ( gb ) >= 4		8158785	0		>=			
ANR	8159601	CallExpression	get_bits_left ( gb )		8158785	0					
ANR	8159602	Callee	get_bits_left		8158785	0					
ANR	8159603	Identifier	get_bits_left		8158785	0					
ANR	8159604	ArgumentList	gb		8158785	1					
ANR	8159605	Argument	gb		8158785	0					
ANR	8159606	Identifier	gb		8158785	0					
ANR	8159607	PrimaryExpression	4		8158785	1					
ANR	8159608	ExpressionStatement	"samples [ 0 ] = type30_dequant [ qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 ) ]"	239:28:5018:5086	8158785	1	True				
ANR	8159609	AssignmentExpression	"samples [ 0 ] = type30_dequant [ qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 ) ]"		8158785	0		=			
ANR	8159610	ArrayIndexing	samples [ 0 ]		8158785	0					
ANR	8159611	Identifier	samples		8158785	0					
ANR	8159612	PrimaryExpression	0		8158785	1					
ANR	8159613	ArrayIndexing	"type30_dequant [ qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 ) ]"		8158785	1					
ANR	8159614	Identifier	type30_dequant		8158785	0					
ANR	8159615	CallExpression	"qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 )"		8158785	1					
ANR	8159616	Callee	qdm2_get_vlc		8158785	0					
ANR	8159617	Identifier	qdm2_get_vlc		8158785	0					
ANR	8159618	ArgumentList	gb		8158785	1					
ANR	8159619	Argument	gb		8158785	0					
ANR	8159620	Identifier	gb		8158785	0					
ANR	8159621	Argument	& vlc_tab_type30		8158785	1					
ANR	8159622	UnaryOperationExpression	& vlc_tab_type30		8158785	0					
ANR	8159623	UnaryOperator	&		8158785	0					
ANR	8159624	Identifier	vlc_tab_type30		8158785	1					
ANR	8159625	Argument	0		8158785	2					
ANR	8159626	PrimaryExpression	0		8158785	0					
ANR	8159627	Argument	1		8158785	3					
ANR	8159628	PrimaryExpression	1		8158785	0					
ANR	8159629	ElseStatement	else		8158785	0					
ANR	8159630	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	243:28:5147:5195	8158785	0	True				
ANR	8159631	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	0		=			
ANR	8159632	ArrayIndexing	samples [ 0 ]		8158785	0					
ANR	8159633	Identifier	samples		8158785	0					
ANR	8159634	PrimaryExpression	0		8158785	1					
ANR	8159635	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	1					
ANR	8159636	Callee	SB_DITHERING_NOISE		8158785	0					
ANR	8159637	Identifier	SB_DITHERING_NOISE		8158785	0					
ANR	8159638	ArgumentList	sb		8158785	1					
ANR	8159639	Argument	sb		8158785	0					
ANR	8159640	Identifier	sb		8158785	0					
ANR	8159641	Argument	q -> noise_idx		8158785	1					
ANR	8159642	PtrMemberAccess	q -> noise_idx		8158785	0					
ANR	8159643	Identifier	q		8158785	0					
ANR	8159644	Identifier	noise_idx		8158785	1					
ANR	8159645	ExpressionStatement	run = 1	247:24:5224:5231	8158785	18	True				
ANR	8159646	AssignmentExpression	run = 1		8158785	0		=			
ANR	8159647	Identifier	run		8158785	0					
ANR	8159648	PrimaryExpression	1		8158785	1					
ANR	8159649	BreakStatement	break ;	249:24:5258:5263	8158785	19	True				
ANR	8159650	Label	case 34 :	253:20:5288:5295	8158785	20	True				
ANR	8159651	IfStatement	if ( get_bits_left ( gb ) >= 7 )		8158785	21					
ANR	8159652	Condition	get_bits_left ( gb ) >= 7	255:28:5326:5347	8158785	0	True				
ANR	8159653	RelationalExpression	get_bits_left ( gb ) >= 7		8158785	0		>=			
ANR	8159654	CallExpression	get_bits_left ( gb )		8158785	0					
ANR	8159655	Callee	get_bits_left		8158785	0					
ANR	8159656	Identifier	get_bits_left		8158785	0					
ANR	8159657	ArgumentList	gb		8158785	1					
ANR	8159658	Argument	gb		8158785	0					
ANR	8159659	Identifier	gb		8158785	0					
ANR	8159660	PrimaryExpression	7		8158785	1					
ANR	8159661	CompoundStatement		253:52:5237:5237	8158785	1					
ANR	8159662	IfStatement	if ( type34_first )		8158785	0					
ANR	8159663	Condition	type34_first	257:32:5385:5396	8158785	0	True				
ANR	8159664	Identifier	type34_first		8158785	0					
ANR	8159665	CompoundStatement		255:46:5286:5286	8158785	1					
ANR	8159666	ExpressionStatement	"type34_div = ( float ) ( 1 << get_bits ( gb , 2 ) )"	259:32:5434:5476	8158785	0	True				
ANR	8159667	AssignmentExpression	"type34_div = ( float ) ( 1 << get_bits ( gb , 2 ) )"		8158785	0		=			
ANR	8159668	Identifier	type34_div		8158785	0					
ANR	8159669	CastExpression	"( float ) ( 1 << get_bits ( gb , 2 ) )"		8158785	1					
ANR	8159670	CastTarget	float		8158785	0					
ANR	8159671	ShiftExpression	"1 << get_bits ( gb , 2 )"		8158785	1		<<			
ANR	8159672	PrimaryExpression	1		8158785	0					
ANR	8159673	CallExpression	"get_bits ( gb , 2 )"		8158785	1					
ANR	8159674	Callee	get_bits		8158785	0					
ANR	8159675	Identifier	get_bits		8158785	0					
ANR	8159676	ArgumentList	gb		8158785	1					
ANR	8159677	Argument	gb		8158785	0					
ANR	8159678	Identifier	gb		8158785	0					
ANR	8159679	Argument	2		8158785	1					
ANR	8159680	PrimaryExpression	2		8158785	0					
ANR	8159681	ExpressionStatement	"samples [ 0 ] = ( ( float ) get_bits ( gb , 5 ) - 16.0 ) / 15.0"	261:32:5511:5562	8158785	1	True				
ANR	8159682	AssignmentExpression	"samples [ 0 ] = ( ( float ) get_bits ( gb , 5 ) - 16.0 ) / 15.0"		8158785	0		=			
ANR	8159683	ArrayIndexing	samples [ 0 ]		8158785	0					
ANR	8159684	Identifier	samples		8158785	0					
ANR	8159685	PrimaryExpression	0		8158785	1					
ANR	8159686	MultiplicativeExpression	"( ( float ) get_bits ( gb , 5 ) - 16.0 ) / 15.0"		8158785	1		/			
ANR	8159687	AdditiveExpression	"( float ) get_bits ( gb , 5 ) - 16.0"		8158785	0		-			
ANR	8159688	CastExpression	"( float ) get_bits ( gb , 5 )"		8158785	0					
ANR	8159689	CastTarget	float		8158785	0					
ANR	8159690	CallExpression	"get_bits ( gb , 5 )"		8158785	1					
ANR	8159691	Callee	get_bits		8158785	0					
ANR	8159692	Identifier	get_bits		8158785	0					
ANR	8159693	ArgumentList	gb		8158785	1					
ANR	8159694	Argument	gb		8158785	0					
ANR	8159695	Identifier	gb		8158785	0					
ANR	8159696	Argument	5		8158785	1					
ANR	8159697	PrimaryExpression	5		8158785	0					
ANR	8159698	PrimaryExpression	16.0		8158785	1					
ANR	8159699	PrimaryExpression	15.0		8158785	1					
ANR	8159700	ExpressionStatement	type34_predictor = samples [ 0 ]	263:32:5597:5626	8158785	2	True				
ANR	8159701	AssignmentExpression	type34_predictor = samples [ 0 ]		8158785	0		=			
ANR	8159702	Identifier	type34_predictor		8158785	0					
ANR	8159703	ArrayIndexing	samples [ 0 ]		8158785	1					
ANR	8159704	Identifier	samples		8158785	0					
ANR	8159705	PrimaryExpression	0		8158785	1					
ANR	8159706	ExpressionStatement	type34_first = 0	265:32:5661:5677	8158785	3	True				
ANR	8159707	AssignmentExpression	type34_first = 0		8158785	0		=			
ANR	8159708	Identifier	type34_first		8158785	0					
ANR	8159709	PrimaryExpression	0		8158785	1					
ANR	8159710	ElseStatement	else		8158785	0					
ANR	8159711	CompoundStatement		265:35:5602:5602	8158785	0					
ANR	8159712	ExpressionStatement	"samples [ 0 ] = type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ] / type34_div + type34_predictor"	269:32:5750:5848	8158785	0	True				
ANR	8159713	AssignmentExpression	"samples [ 0 ] = type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ] / type34_div + type34_predictor"		8158785	0		=			
ANR	8159714	ArrayIndexing	samples [ 0 ]		8158785	0					
ANR	8159715	Identifier	samples		8158785	0					
ANR	8159716	PrimaryExpression	0		8158785	1					
ANR	8159717	AdditiveExpression	"type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ] / type34_div + type34_predictor"		8158785	1		+			
ANR	8159718	MultiplicativeExpression	"type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ] / type34_div"		8158785	0		/			
ANR	8159719	ArrayIndexing	"type34_delta [ qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ]"		8158785	0					
ANR	8159720	Identifier	type34_delta		8158785	0					
ANR	8159721	CallExpression	"qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 )"		8158785	1					
ANR	8159722	Callee	qdm2_get_vlc		8158785	0					
ANR	8159723	Identifier	qdm2_get_vlc		8158785	0					
ANR	8159724	ArgumentList	gb		8158785	1					
ANR	8159725	Argument	gb		8158785	0					
ANR	8159726	Identifier	gb		8158785	0					
ANR	8159727	Argument	& vlc_tab_type34		8158785	1					
ANR	8159728	UnaryOperationExpression	& vlc_tab_type34		8158785	0					
ANR	8159729	UnaryOperator	&		8158785	0					
ANR	8159730	Identifier	vlc_tab_type34		8158785	1					
ANR	8159731	Argument	0		8158785	2					
ANR	8159732	PrimaryExpression	0		8158785	0					
ANR	8159733	Argument	1		8158785	3					
ANR	8159734	PrimaryExpression	1		8158785	0					
ANR	8159735	Identifier	type34_div		8158785	1					
ANR	8159736	Identifier	type34_predictor		8158785	1					
ANR	8159737	ExpressionStatement	type34_predictor = samples [ 0 ]	271:32:5883:5912	8158785	1	True				
ANR	8159738	AssignmentExpression	type34_predictor = samples [ 0 ]		8158785	0		=			
ANR	8159739	Identifier	type34_predictor		8158785	0					
ANR	8159740	ArrayIndexing	samples [ 0 ]		8158785	1					
ANR	8159741	Identifier	samples		8158785	0					
ANR	8159742	PrimaryExpression	0		8158785	1					
ANR	8159743	ElseStatement	else		8158785	0					
ANR	8159744	CompoundStatement		273:31:5864:5864	8158785	0					
ANR	8159745	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	277:28:6008:6056	8158785	0	True				
ANR	8159746	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	0		=			
ANR	8159747	ArrayIndexing	samples [ 0 ]		8158785	0					
ANR	8159748	Identifier	samples		8158785	0					
ANR	8159749	PrimaryExpression	0		8158785	1					
ANR	8159750	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	1					
ANR	8159751	Callee	SB_DITHERING_NOISE		8158785	0					
ANR	8159752	Identifier	SB_DITHERING_NOISE		8158785	0					
ANR	8159753	ArgumentList	sb		8158785	1					
ANR	8159754	Argument	sb		8158785	0					
ANR	8159755	Identifier	sb		8158785	0					
ANR	8159756	Argument	q -> noise_idx		8158785	1					
ANR	8159757	PtrMemberAccess	q -> noise_idx		8158785	0					
ANR	8159758	Identifier	q		8158785	0					
ANR	8159759	Identifier	noise_idx		8158785	1					
ANR	8159760	ExpressionStatement	run = 1	281:24:6110:6117	8158785	22	True				
ANR	8159761	AssignmentExpression	run = 1		8158785	0		=			
ANR	8159762	Identifier	run		8158785	0					
ANR	8159763	PrimaryExpression	1		8158785	1					
ANR	8159764	BreakStatement	break ;	283:24:6144:6149	8158785	23	True				
ANR	8159765	Label	default :	287:20:6174:6181	8158785	24	True				
ANR	8159766	Identifier	default		8158785	0					
ANR	8159767	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	289:24:6208:6256	8158785	25	True				
ANR	8159768	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	0		=			
ANR	8159769	ArrayIndexing	samples [ 0 ]		8158785	0					
ANR	8159770	Identifier	samples		8158785	0					
ANR	8159771	PrimaryExpression	0		8158785	1					
ANR	8159772	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8158785	1					
ANR	8159773	Callee	SB_DITHERING_NOISE		8158785	0					
ANR	8159774	Identifier	SB_DITHERING_NOISE		8158785	0					
ANR	8159775	ArgumentList	sb		8158785	1					
ANR	8159776	Argument	sb		8158785	0					
ANR	8159777	Identifier	sb		8158785	0					
ANR	8159778	Argument	q -> noise_idx		8158785	1					
ANR	8159779	PtrMemberAccess	q -> noise_idx		8158785	0					
ANR	8159780	Identifier	q		8158785	0					
ANR	8159781	Identifier	noise_idx		8158785	1					
ANR	8159782	ExpressionStatement	run = 1	291:24:6283:6290	8158785	26	True				
ANR	8159783	AssignmentExpression	run = 1		8158785	0		=			
ANR	8159784	Identifier	run		8158785	0					
ANR	8159785	PrimaryExpression	1		8158785	1					
ANR	8159786	BreakStatement	break ;	293:24:6317:6322	8158785	27	True				
ANR	8159787	IfStatement	if ( joined_stereo )		8158785	1					
ANR	8159788	Condition	joined_stereo	299:20:6366:6378	8158785	0	True				
ANR	8159789	Identifier	joined_stereo		8158785	0					
ANR	8159790	CompoundStatement		297:35:6268:6268	8158785	1					
ANR	8159791	Statement	float	301:20:6404:6408	8158785	0	True				
ANR	8159792	ExpressionStatement	tmp [ 10 ] [ MPA_MAX_CHANNELS ]	301:26:6410:6435	8158785	1	True				
ANR	8159793	ArrayIndexing	tmp [ 10 ] [ MPA_MAX_CHANNELS ]		8158785	0					
ANR	8159794	ArrayIndexing	tmp [ 10 ]		8158785	0					
ANR	8159795	Identifier	tmp		8158785	0					
ANR	8159796	PrimaryExpression	10		8158785	1					
ANR	8159797	Identifier	MPA_MAX_CHANNELS		8158785	1					
ANR	8159798	ForStatement	for ( k = 0 ; k < run ; k ++ )		8158785	2					
ANR	8159799	ForInit	k = 0 ;	305:25:6465:6470	8158785	0	True				
ANR	8159800	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159801	Identifier	k		8158785	0					
ANR	8159802	PrimaryExpression	0		8158785	1					
ANR	8159803	Condition	k < run	305:32:6472:6478	8158785	1	True				
ANR	8159804	RelationalExpression	k < run		8158785	0		<			
ANR	8159805	Identifier	k		8158785	0					
ANR	8159806	Identifier	run		8158785	1					
ANR	8159807	PostIncDecOperationExpression	k ++	305:41:6481:6483	8158785	2	True				
ANR	8159808	Identifier	k		8158785	0					
ANR	8159809	IncDec	++		8158785	1					
ANR	8159810	CompoundStatement		303:46:6373:6373	8158785	3					
ANR	8159811	ExpressionStatement	tmp [ k ] [ 0 ] = samples [ k ]	307:24:6513:6535	8158785	0	True				
ANR	8159812	AssignmentExpression	tmp [ k ] [ 0 ] = samples [ k ]		8158785	0		=			
ANR	8159813	ArrayIndexing	tmp [ k ] [ 0 ]		8158785	0					
ANR	8159814	ArrayIndexing	tmp [ k ]		8158785	0					
ANR	8159815	Identifier	tmp		8158785	0					
ANR	8159816	Identifier	k		8158785	1					
ANR	8159817	PrimaryExpression	0		8158785	1					
ANR	8159818	ArrayIndexing	samples [ k ]		8158785	1					
ANR	8159819	Identifier	samples		8158785	0					
ANR	8159820	Identifier	k		8158785	1					
ANR	8159821	ExpressionStatement	tmp [ k ] [ 1 ] = ( sign_bits [ ( j + k ) / 8 ] ) ? - samples [ k ] : samples [ k ]	309:24:6562:6625	8158785	1	True				
ANR	8159822	AssignmentExpression	tmp [ k ] [ 1 ] = ( sign_bits [ ( j + k ) / 8 ] ) ? - samples [ k ] : samples [ k ]		8158785	0		=			
ANR	8159823	ArrayIndexing	tmp [ k ] [ 1 ]		8158785	0					
ANR	8159824	ArrayIndexing	tmp [ k ]		8158785	0					
ANR	8159825	Identifier	tmp		8158785	0					
ANR	8159826	Identifier	k		8158785	1					
ANR	8159827	PrimaryExpression	1		8158785	1					
ANR	8159828	ConditionalExpression	( sign_bits [ ( j + k ) / 8 ] ) ? - samples [ k ] : samples [ k ]		8158785	1					
ANR	8159829	Condition	sign_bits [ ( j + k ) / 8 ]		8158785	0					
ANR	8159830	ArrayIndexing	sign_bits [ ( j + k ) / 8 ]		8158785	0					
ANR	8159831	Identifier	sign_bits		8158785	0					
ANR	8159832	MultiplicativeExpression	( j + k ) / 8		8158785	1		/			
ANR	8159833	AdditiveExpression	j + k		8158785	0		+			
ANR	8159834	Identifier	j		8158785	0					
ANR	8159835	Identifier	k		8158785	1					
ANR	8159836	PrimaryExpression	8		8158785	1					
ANR	8159837	UnaryOperationExpression	- samples [ k ]		8158785	1					
ANR	8159838	UnaryOperator	-		8158785	0					
ANR	8159839	ArrayIndexing	samples [ k ]		8158785	1					
ANR	8159840	Identifier	samples		8158785	0					
ANR	8159841	Identifier	k		8158785	1					
ANR	8159842	ArrayIndexing	samples [ k ]		8158785	2					
ANR	8159843	Identifier	samples		8158785	0					
ANR	8159844	Identifier	k		8158785	1					
ANR	8159845	ForStatement	for ( chs = 0 ; chs < q -> nb_channels ; chs ++ )		8158785	3					
ANR	8159846	ForInit	chs = 0 ;	313:25:6676:6683	8158785	0	True				
ANR	8159847	AssignmentExpression	chs = 0		8158785	0		=			
ANR	8159848	Identifier	chs		8158785	0					
ANR	8159849	PrimaryExpression	0		8158785	1					
ANR	8159850	Condition	chs < q -> nb_channels	313:34:6685:6704	8158785	1	True				
ANR	8159851	RelationalExpression	chs < q -> nb_channels		8158785	0		<			
ANR	8159852	Identifier	chs		8158785	0					
ANR	8159853	PtrMemberAccess	q -> nb_channels		8158785	1					
ANR	8159854	Identifier	q		8158785	0					
ANR	8159855	Identifier	nb_channels		8158785	1					
ANR	8159856	PostIncDecOperationExpression	chs ++	313:56:6707:6711	8158785	2	True				
ANR	8159857	Identifier	chs		8158785	0					
ANR	8159858	IncDec	++		8158785	1					
ANR	8159859	ForStatement	for ( k = 0 ; k < run ; k ++ )		8158785	3					
ANR	8159860	ForInit	k = 0 ;	315:29:6744:6749	8158785	0	True				
ANR	8159861	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159862	Identifier	k		8158785	0					
ANR	8159863	PrimaryExpression	0		8158785	1					
ANR	8159864	Condition	k < run	315:36:6751:6757	8158785	1	True				
ANR	8159865	RelationalExpression	k < run		8158785	0		<			
ANR	8159866	Identifier	k		8158785	0					
ANR	8159867	Identifier	run		8158785	1					
ANR	8159868	PostIncDecOperationExpression	k ++	315:45:6760:6762	8158785	2	True				
ANR	8159869	Identifier	k		8158785	0					
ANR	8159870	IncDec	++		8158785	1					
ANR	8159871	IfStatement	if ( ( j + k ) < 128 )		8158785	3					
ANR	8159872	Condition	( j + k ) < 128	317:32:6798:6810	8158785	0	True				
ANR	8159873	RelationalExpression	( j + k ) < 128		8158785	0		<			
ANR	8159874	AdditiveExpression	j + k		8158785	0		+			
ANR	8159875	Identifier	j		8158785	0					
ANR	8159876	Identifier	k		8158785	1					
ANR	8159877	PrimaryExpression	128		8158785	1					
ANR	8159878	ExpressionStatement	q -> sb_samples [ chs ] [ j + k ] [ sb ] = q -> tone_level [ chs ] [ sb ] [ ( ( j + k ) / 2 ) ] * tmp [ k ] [ chs ]	319:32:6846:6927	8158785	1	True				
ANR	8159879	AssignmentExpression	q -> sb_samples [ chs ] [ j + k ] [ sb ] = q -> tone_level [ chs ] [ sb ] [ ( ( j + k ) / 2 ) ] * tmp [ k ] [ chs ]		8158785	0		=			
ANR	8159880	ArrayIndexing	q -> sb_samples [ chs ] [ j + k ] [ sb ]		8158785	0					
ANR	8159881	ArrayIndexing	q -> sb_samples [ chs ] [ j + k ]		8158785	0					
ANR	8159882	ArrayIndexing	q -> sb_samples [ chs ]		8158785	0					
ANR	8159883	PtrMemberAccess	q -> sb_samples		8158785	0					
ANR	8159884	Identifier	q		8158785	0					
ANR	8159885	Identifier	sb_samples		8158785	1					
ANR	8159886	Identifier	chs		8158785	1					
ANR	8159887	AdditiveExpression	j + k		8158785	1		+			
ANR	8159888	Identifier	j		8158785	0					
ANR	8159889	Identifier	k		8158785	1					
ANR	8159890	Identifier	sb		8158785	1					
ANR	8159891	MultiplicativeExpression	q -> tone_level [ chs ] [ sb ] [ ( ( j + k ) / 2 ) ] * tmp [ k ] [ chs ]		8158785	1		*			
ANR	8159892	ArrayIndexing	q -> tone_level [ chs ] [ sb ] [ ( ( j + k ) / 2 ) ]		8158785	0					
ANR	8159893	ArrayIndexing	q -> tone_level [ chs ] [ sb ]		8158785	0					
ANR	8159894	ArrayIndexing	q -> tone_level [ chs ]		8158785	0					
ANR	8159895	PtrMemberAccess	q -> tone_level		8158785	0					
ANR	8159896	Identifier	q		8158785	0					
ANR	8159897	Identifier	tone_level		8158785	1					
ANR	8159898	Identifier	chs		8158785	1					
ANR	8159899	Identifier	sb		8158785	1					
ANR	8159900	MultiplicativeExpression	( j + k ) / 2		8158785	1		/			
ANR	8159901	AdditiveExpression	j + k		8158785	0		+			
ANR	8159902	Identifier	j		8158785	0					
ANR	8159903	Identifier	k		8158785	1					
ANR	8159904	PrimaryExpression	2		8158785	1					
ANR	8159905	ArrayIndexing	tmp [ k ] [ chs ]		8158785	1					
ANR	8159906	ArrayIndexing	tmp [ k ]		8158785	0					
ANR	8159907	Identifier	tmp		8158785	0					
ANR	8159908	Identifier	k		8158785	1					
ANR	8159909	Identifier	chs		8158785	1					
ANR	8159910	ElseStatement	else		8158785	0					
ANR	8159911	CompoundStatement		319:23:6840:6840	8158785	0					
ANR	8159912	ForStatement	for ( k = 0 ; k < run ; k ++ )		8158785	0					
ANR	8159913	ForInit	k = 0 ;	323:25:6981:6986	8158785	0	True				
ANR	8159914	AssignmentExpression	k = 0		8158785	0		=			
ANR	8159915	Identifier	k		8158785	0					
ANR	8159916	PrimaryExpression	0		8158785	1					
ANR	8159917	Condition	k < run	323:32:6988:6994	8158785	1	True				
ANR	8159918	RelationalExpression	k < run		8158785	0		<			
ANR	8159919	Identifier	k		8158785	0					
ANR	8159920	Identifier	run		8158785	1					
ANR	8159921	PostIncDecOperationExpression	k ++	323:41:6997:6999	8158785	2	True				
ANR	8159922	Identifier	k		8158785	0					
ANR	8159923	IncDec	++		8158785	1					
ANR	8159924	IfStatement	if ( ( j + k ) < 128 )		8158785	3					
ANR	8159925	Condition	( j + k ) < 128	325:28:7031:7043	8158785	0	True				
ANR	8159926	RelationalExpression	( j + k ) < 128		8158785	0		<			
ANR	8159927	AdditiveExpression	j + k		8158785	0		+			
ANR	8159928	Identifier	j		8158785	0					
ANR	8159929	Identifier	k		8158785	1					
ANR	8159930	PrimaryExpression	128		8158785	1					
ANR	8159931	ExpressionStatement	q -> sb_samples [ ch ] [ j + k ] [ sb ] = q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]	327:28:7075:7151	8158785	1	True				
ANR	8159932	AssignmentExpression	q -> sb_samples [ ch ] [ j + k ] [ sb ] = q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8158785	0		=			
ANR	8159933	ArrayIndexing	q -> sb_samples [ ch ] [ j + k ] [ sb ]		8158785	0					
ANR	8159934	ArrayIndexing	q -> sb_samples [ ch ] [ j + k ]		8158785	0					
ANR	8159935	ArrayIndexing	q -> sb_samples [ ch ]		8158785	0					
ANR	8159936	PtrMemberAccess	q -> sb_samples		8158785	0					
ANR	8159937	Identifier	q		8158785	0					
ANR	8159938	Identifier	sb_samples		8158785	1					
ANR	8159939	Identifier	ch		8158785	1					
ANR	8159940	AdditiveExpression	j + k		8158785	1		+			
ANR	8159941	Identifier	j		8158785	0					
ANR	8159942	Identifier	k		8158785	1					
ANR	8159943	Identifier	sb		8158785	1					
ANR	8159944	MultiplicativeExpression	q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8158785	1		*			
ANR	8159945	ArrayIndexing	q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ]		8158785	0					
ANR	8159946	ArrayIndexing	q -> tone_level [ ch ] [ sb ]		8158785	0					
ANR	8159947	ArrayIndexing	q -> tone_level [ ch ]		8158785	0					
ANR	8159948	PtrMemberAccess	q -> tone_level		8158785	0					
ANR	8159949	Identifier	q		8158785	0					
ANR	8159950	Identifier	tone_level		8158785	1					
ANR	8159951	Identifier	ch		8158785	1					
ANR	8159952	Identifier	sb		8158785	1					
ANR	8159953	MultiplicativeExpression	( j + k ) / 2		8158785	1		/			
ANR	8159954	AdditiveExpression	j + k		8158785	0		+			
ANR	8159955	Identifier	j		8158785	0					
ANR	8159956	Identifier	k		8158785	1					
ANR	8159957	PrimaryExpression	2		8158785	1					
ANR	8159958	ArrayIndexing	samples [ k ]		8158785	1					
ANR	8159959	Identifier	samples		8158785	0					
ANR	8159960	Identifier	k		8158785	1					
ANR	8159961	ExpressionStatement	j += run	333:16:7191:7199	8158785	2	True				
ANR	8159962	AssignmentExpression	j += run		8158785	0		+=			
ANR	8159963	Identifier	j		8158785	0					
ANR	8159964	Identifier	run		8158785	1					
ANR	8159965	ReturnType	static void		8158785	1					
ANR	8159966	Identifier	synthfilt_build_sb_samples		8158785	2					
ANR	8159967	ParameterList	"QDM2Context * q , GetBitContext * gb , int length , int sb_min , int sb_max"		8158785	3					
ANR	8159968	Parameter	QDM2Context * q	1:40:40:53	8158785	0	True				
ANR	8159969	ParameterType	QDM2Context *		8158785	0					
ANR	8159970	Identifier	q		8158785	1					
ANR	8159971	Parameter	GetBitContext * gb	1:56:56:72	8158785	1	True				
ANR	8159972	ParameterType	GetBitContext *		8158785	0					
ANR	8159973	Identifier	gb		8158785	1					
ANR	8159974	Parameter	int length	1:75:75:84	8158785	2	True				
ANR	8159975	ParameterType	int		8158785	0					
ANR	8159976	Identifier	length		8158785	1					
ANR	8159977	Parameter	int sb_min	1:87:87:96	8158785	3	True				
ANR	8159978	ParameterType	int		8158785	0					
ANR	8159979	Identifier	sb_min		8158785	1					
ANR	8159980	Parameter	int sb_max	1:99:99:108	8158785	4	True				
ANR	8159981	ParameterType	int		8158785	0					
ANR	8159982	Identifier	sb_max		8158785	1					
ANR	8159983	CFGEntryNode	ENTRY		8158785		True				
ANR	8159984	CFGExitNode	EXIT		8158785		True				
ANR	8159985	Symbol	qdm2_get_vlc		8158785						
ANR	8159986	Symbol	& vlc_tab_type30		8158785						
ANR	8159987	Symbol	MPA_MAX_CHANNELS		8158785						
ANR	8159988	Symbol	* * chs		8158785						
ANR	8159989	Symbol	SB_DITHERING_NOISE		8158785						
ANR	8159990	Symbol	* * * * q		8158785						
ANR	8159991	Symbol	get_bits		8158785						
ANR	8159992	Symbol	* ch		8158785						
ANR	8159993	Symbol	q -> coding_method		8158785						
ANR	8159994	Symbol	* type30_dequant		8158785						
ANR	8159995	Symbol	run		8158785						
ANR	8159996	Symbol	* * q -> coding_method		8158785						
ANR	8159997	Symbol	* random_dequant_type24		8158785						
ANR	8159998	Symbol	zero_encoding		8158785						
ANR	8159999	Symbol	sign_bits		8158785						
ANR	8160000	Symbol	* * dequant_1bit		8158785						
ANR	8160001	Symbol	* samples		8158785						
ANR	8160002	Symbol	* sb		8158785						
ANR	8160003	Symbol	tmp		8158785						
ANR	8160004	Symbol	* * random_dequant_type24		8158785						
ANR	8160005	Symbol	& vlc_tab_type34		8158785						
ANR	8160006	Symbol	type34_predictor		8158785						
ANR	8160007	Symbol	* * k		8158785						
ANR	8160008	Symbol	* * j		8158785						
ANR	8160009	Symbol	* * q -> tone_level		8158785						
ANR	8160010	Symbol	* type34_delta		8158785						
ANR	8160011	Symbol	get_bits1		8158785						
ANR	8160012	Symbol	type30_dequant		8158785						
ANR	8160013	Symbol	* joined_stereo		8158785						
ANR	8160014	Symbol	q -> tone_level		8158785						
ANR	8160015	Symbol	* * * q -> sb_samples		8158785						
ANR	8160016	Symbol	* * random_dequant_index		8158785						
ANR	8160017	Symbol	sb_min		8158785						
ANR	8160018	Symbol	dequant_1bit		8158785						
ANR	8160019	Symbol	samples		8158785						
ANR	8160020	Symbol	chs		8158785						
ANR	8160021	Symbol	* * * q		8158785						
ANR	8160022	Symbol	noise_samples		8158785						
ANR	8160023	Symbol	type34_delta		8158785						
ANR	8160024	Symbol	* * * n		8158785						
ANR	8160025	Symbol	channels		8158785						
ANR	8160026	Symbol	* dequant_1bit		8158785						
ANR	8160027	Symbol	* * sb		8158785						
ANR	8160028	Symbol	* q -> sb_samples		8158785						
ANR	8160029	Symbol	sb_max		8158785						
ANR	8160030	Symbol	q -> noise_idx		8158785						
ANR	8160031	Symbol	random_dequant_index		8158785						
ANR	8160032	Symbol	* * * ch		8158785						
ANR	8160033	Symbol	* tmp		8158785						
ANR	8160034	Symbol	* * * q -> coding_method		8158785						
ANR	8160035	Symbol	get_bits_left		8158785						
ANR	8160036	Symbol	sb		8158785						
ANR	8160037	Symbol	type34_first		8158785						
ANR	8160038	Symbol	* * ch		8158785						
ANR	8160039	Symbol	* get_bits1		8158785						
ANR	8160040	Symbol	* * q		8158785						
ANR	8160041	Symbol	gb		8158785						
ANR	8160042	Symbol	* * n		8158785						
ANR	8160043	Symbol	* sign_bits		8158785						
ANR	8160044	Symbol	* * * random_dequant_index		8158785						
ANR	8160045	Symbol	* noise_samples		8158785						
ANR	8160046	Symbol	type34_div		8158785						
ANR	8160047	Symbol	* * q -> sb_samples		8158785						
ANR	8160048	Symbol	ch		8158785						
ANR	8160049	Symbol	f		8158785						
ANR	8160050	Symbol	* chs		8158785						
ANR	8160051	Symbol	q -> sb_samples		8158785						
ANR	8160052	Symbol	length		8158785						
ANR	8160053	Symbol	* * * q -> tone_level		8158785						
ANR	8160054	Symbol	* * joined_stereo		8158785						
ANR	8160055	Symbol	j		8158785						
ANR	8160056	Symbol	k		8158785						
ANR	8160057	Symbol	* * tmp		8158785						
ANR	8160058	Symbol	* * * chs		8158785						
ANR	8160059	Symbol	random_dequant_type24		8158785						
ANR	8160060	Symbol	n		8158785						
ANR	8160061	Symbol	q		8158785						
ANR	8160062	Symbol	* qdm2_get_vlc		8158785						
ANR	8160063	Symbol	q -> nb_channels		8158785						
ANR	8160064	Symbol	* j		8158785						
ANR	8160065	Symbol	* q -> coding_method		8158785						
ANR	8160066	Symbol	* k		8158785						
ANR	8160067	Symbol	joined_stereo		8158785						
ANR	8160068	Symbol	* n		8158785						
ANR	8160069	Symbol	* q -> tone_level		8158785						
ANR	8160070	Symbol	* random_dequant_index		8158785						
ANR	8160071	Symbol	* q		8158785						
