command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3110036	File	/home/p4ultr4n/workplace/ReVeal/raw_code/expr_unary_0.c								
ANR	3110037	Function	expr_unary	1:0:0:2005							
ANR	3110038	FunctionDef	expr_unary (Monitor * mon)		3110037	0					
ANR	3110039	CompoundStatement		3:0:41:2005	3110037	0					
ANR	3110040	IdentifierDeclStatement	int64_t n ;	5:4:48:57	3110037	0	True				
ANR	3110041	IdentifierDecl	n		3110037	0					
ANR	3110042	IdentifierDeclType	int64_t		3110037	0					
ANR	3110043	Identifier	n		3110037	1					
ANR	3110044	IdentifierDeclStatement	char * p ;	7:4:64:71	3110037	1	True				
ANR	3110045	IdentifierDecl	* p		3110037	0					
ANR	3110046	IdentifierDeclType	char *		3110037	0					
ANR	3110047	Identifier	p		3110037	1					
ANR	3110048	IdentifierDeclStatement	int ret ;	9:4:78:85	3110037	2	True				
ANR	3110049	IdentifierDecl	ret		3110037	0					
ANR	3110050	IdentifierDeclType	int		3110037	0					
ANR	3110051	Identifier	ret		3110037	1					
ANR	3110052	SwitchStatement	switch ( * pch )		3110037	3					
ANR	3110053	Condition	* pch	13:11:101:104	3110037	0	True				
ANR	3110054	UnaryOperationExpression	* pch		3110037	0					
ANR	3110055	UnaryOperator	*		3110037	0					
ANR	3110056	Identifier	pch		3110037	1					
ANR	3110057	CompoundStatement		11:17:65:65	3110037	1					
ANR	3110058	Label	case '+' :	15:4:114:122	3110037	0	True				
ANR	3110059	ExpressionStatement	next ( )	17:8:133:139	3110037	1	True				
ANR	3110060	CallExpression	next ( )		3110037	0					
ANR	3110061	Callee	next		3110037	0					
ANR	3110062	Identifier	next		3110037	0					
ANR	3110063	ArgumentList			3110037	1					
ANR	3110064	ExpressionStatement	n = expr_unary ( mon )	19:8:150:169	3110037	2	True				
ANR	3110065	AssignmentExpression	n = expr_unary ( mon )		3110037	0		=			
ANR	3110066	Identifier	n		3110037	0					
ANR	3110067	CallExpression	expr_unary ( mon )		3110037	1					
ANR	3110068	Callee	expr_unary		3110037	0					
ANR	3110069	Identifier	expr_unary		3110037	0					
ANR	3110070	ArgumentList	mon		3110037	1					
ANR	3110071	Argument	mon		3110037	0					
ANR	3110072	Identifier	mon		3110037	0					
ANR	3110073	BreakStatement	break ;	21:8:180:185	3110037	3	True				
ANR	3110074	Label	case '-' :	23:4:192:200	3110037	4	True				
ANR	3110075	ExpressionStatement	next ( )	25:8:211:217	3110037	5	True				
ANR	3110076	CallExpression	next ( )		3110037	0					
ANR	3110077	Callee	next		3110037	0					
ANR	3110078	Identifier	next		3110037	0					
ANR	3110079	ArgumentList			3110037	1					
ANR	3110080	ExpressionStatement	n = - expr_unary ( mon )	27:8:228:248	3110037	6	True				
ANR	3110081	AssignmentExpression	n = - expr_unary ( mon )		3110037	0		=			
ANR	3110082	Identifier	n		3110037	0					
ANR	3110083	UnaryOperationExpression	- expr_unary ( mon )		3110037	1					
ANR	3110084	UnaryOperator	-		3110037	0					
ANR	3110085	CallExpression	expr_unary ( mon )		3110037	1					
ANR	3110086	Callee	expr_unary		3110037	0					
ANR	3110087	Identifier	expr_unary		3110037	0					
ANR	3110088	ArgumentList	mon		3110037	1					
ANR	3110089	Argument	mon		3110037	0					
ANR	3110090	Identifier	mon		3110037	0					
ANR	3110091	BreakStatement	break ;	29:8:259:264	3110037	7	True				
ANR	3110092	Label	case '~' :	31:4:271:279	3110037	8	True				
ANR	3110093	ExpressionStatement	next ( )	33:8:290:296	3110037	9	True				
ANR	3110094	CallExpression	next ( )		3110037	0					
ANR	3110095	Callee	next		3110037	0					
ANR	3110096	Identifier	next		3110037	0					
ANR	3110097	ArgumentList			3110037	1					
ANR	3110098	ExpressionStatement	n = ~expr_unary ( mon )	35:8:307:327	3110037	10	True				
ANR	3110099	AssignmentExpression	n = ~expr_unary ( mon )		3110037	0		=			
ANR	3110100	Identifier	n		3110037	0					
ANR	3110101	CallExpression	~expr_unary ( mon )		3110037	1					
ANR	3110102	Callee	~expr_unary		3110037	0					
ANR	3110103	Identifier	~expr_unary		3110037	0					
ANR	3110104	ArgumentList	mon		3110037	1					
ANR	3110105	Argument	mon		3110037	0					
ANR	3110106	Identifier	mon		3110037	0					
ANR	3110107	BreakStatement	break ;	37:8:338:343	3110037	11	True				
ANR	3110108	Label	case '(' :	39:4:350:358	3110037	12	True				
ANR	3110109	ExpressionStatement	next ( )	41:8:369:375	3110037	13	True				
ANR	3110110	CallExpression	next ( )		3110037	0					
ANR	3110111	Callee	next		3110037	0					
ANR	3110112	Identifier	next		3110037	0					
ANR	3110113	ArgumentList			3110037	1					
ANR	3110114	ExpressionStatement	n = expr_sum ( mon )	43:8:386:403	3110037	14	True				
ANR	3110115	AssignmentExpression	n = expr_sum ( mon )		3110037	0		=			
ANR	3110116	Identifier	n		3110037	0					
ANR	3110117	CallExpression	expr_sum ( mon )		3110037	1					
ANR	3110118	Callee	expr_sum		3110037	0					
ANR	3110119	Identifier	expr_sum		3110037	0					
ANR	3110120	ArgumentList	mon		3110037	1					
ANR	3110121	Argument	mon		3110037	0					
ANR	3110122	Identifier	mon		3110037	0					
ANR	3110123	IfStatement	if ( * pch != ')' )		3110037	15					
ANR	3110124	Condition	* pch != ')'	45:12:418:428	3110037	0	True				
ANR	3110125	EqualityExpression	* pch != ')'		3110037	0		!=			
ANR	3110126	UnaryOperationExpression	* pch		3110037	0					
ANR	3110127	UnaryOperator	*		3110037	0					
ANR	3110128	Identifier	pch		3110037	1					
ANR	3110129	PrimaryExpression	')'		3110037	1					
ANR	3110130	CompoundStatement		43:25:389:389	3110037	1					
ANR	3110131	ExpressionStatement	"expr_error ( mon , ""')' expected"" )"	47:12:446:477	3110037	0	True				
ANR	3110132	CallExpression	"expr_error ( mon , ""')' expected"" )"		3110037	0					
ANR	3110133	Callee	expr_error		3110037	0					
ANR	3110134	Identifier	expr_error		3110037	0					
ANR	3110135	ArgumentList	mon		3110037	1					
ANR	3110136	Argument	mon		3110037	0					
ANR	3110137	Identifier	mon		3110037	0					
ANR	3110138	Argument	"""')' expected"""		3110037	1					
ANR	3110139	PrimaryExpression	"""')' expected"""		3110037	0					
ANR	3110140	ExpressionStatement	next ( )	51:8:499:505	3110037	16	True				
ANR	3110141	CallExpression	next ( )		3110037	0					
ANR	3110142	Callee	next		3110037	0					
ANR	3110143	Identifier	next		3110037	0					
ANR	3110144	ArgumentList			3110037	1					
ANR	3110145	BreakStatement	break ;	53:8:516:521	3110037	17	True				
ANR	3110146	Label	case '\\'' :	55:4:528:537	3110037	18	True				
ANR	3110147	ExpressionStatement	pch ++	57:8:548:553	3110037	19	True				
ANR	3110148	PostIncDecOperationExpression	pch ++		3110037	0					
ANR	3110149	Identifier	pch		3110037	0					
ANR	3110150	IncDec	++		3110037	1					
ANR	3110151	IfStatement	if ( * pch == '\\0' )		3110037	20					
ANR	3110152	Condition	* pch == '\\0'	59:12:568:579	3110037	0	True				
ANR	3110153	EqualityExpression	* pch == '\\0'		3110037	0		==			
ANR	3110154	UnaryOperationExpression	* pch		3110037	0					
ANR	3110155	UnaryOperator	*		3110037	0					
ANR	3110156	Identifier	pch		3110037	1					
ANR	3110157	PrimaryExpression	'\\0'		3110037	1					
ANR	3110158	ExpressionStatement	"expr_error ( mon , ""character constant expected"" )"	61:12:595:641	3110037	1	True				
ANR	3110159	CallExpression	"expr_error ( mon , ""character constant expected"" )"		3110037	0					
ANR	3110160	Callee	expr_error		3110037	0					
ANR	3110161	Identifier	expr_error		3110037	0					
ANR	3110162	ArgumentList	mon		3110037	1					
ANR	3110163	Argument	mon		3110037	0					
ANR	3110164	Identifier	mon		3110037	0					
ANR	3110165	Argument	"""character constant expected"""		3110037	1					
ANR	3110166	PrimaryExpression	"""character constant expected"""		3110037	0					
ANR	3110167	ExpressionStatement	n = * pch	63:8:652:660	3110037	21	True				
ANR	3110168	AssignmentExpression	n = * pch		3110037	0		=			
ANR	3110169	Identifier	n		3110037	0					
ANR	3110170	UnaryOperationExpression	* pch		3110037	1					
ANR	3110171	UnaryOperator	*		3110037	0					
ANR	3110172	Identifier	pch		3110037	1					
ANR	3110173	ExpressionStatement	pch ++	65:8:671:676	3110037	22	True				
ANR	3110174	PostIncDecOperationExpression	pch ++		3110037	0					
ANR	3110175	Identifier	pch		3110037	0					
ANR	3110176	IncDec	++		3110037	1					
ANR	3110177	IfStatement	if ( * pch != '\\'' )		3110037	23					
ANR	3110178	Condition	* pch != '\\''	67:12:691:702	3110037	0	True				
ANR	3110179	EqualityExpression	* pch != '\\''		3110037	0		!=			
ANR	3110180	UnaryOperationExpression	* pch		3110037	0					
ANR	3110181	UnaryOperator	*		3110037	0					
ANR	3110182	Identifier	pch		3110037	1					
ANR	3110183	PrimaryExpression	'\\''		3110037	1					
ANR	3110184	ExpressionStatement	"expr_error ( mon , ""missing terminating \\' character"" )"	69:12:718:769	3110037	1	True				
ANR	3110185	CallExpression	"expr_error ( mon , ""missing terminating \\' character"" )"		3110037	0					
ANR	3110186	Callee	expr_error		3110037	0					
ANR	3110187	Identifier	expr_error		3110037	0					
ANR	3110188	ArgumentList	mon		3110037	1					
ANR	3110189	Argument	mon		3110037	0					
ANR	3110190	Identifier	mon		3110037	0					
ANR	3110191	Argument	"""missing terminating \\' character"""		3110037	1					
ANR	3110192	PrimaryExpression	"""missing terminating \\' character"""		3110037	0					
ANR	3110193	ExpressionStatement	next ( )	71:8:780:786	3110037	24	True				
ANR	3110194	CallExpression	next ( )		3110037	0					
ANR	3110195	Callee	next		3110037	0					
ANR	3110196	Identifier	next		3110037	0					
ANR	3110197	ArgumentList			3110037	1					
ANR	3110198	BreakStatement	break ;	73:8:797:802	3110037	25	True				
ANR	3110199	Label	case '$' :	75:4:809:817	3110037	26	True				
ANR	3110200	CompoundStatement		79:12:833:850	3110037	27					
ANR	3110201	IdentifierDeclStatement	"char buf [ 128 ] , * q ;"	79:12:843:860	3110037	0	True				
ANR	3110202	IdentifierDecl	buf [ 128 ]		3110037	0					
ANR	3110203	IdentifierDeclType	char [ 128 ]		3110037	0					
ANR	3110204	Identifier	buf		3110037	1					
ANR	3110205	PrimaryExpression	128		3110037	2					
ANR	3110206	IdentifierDecl	* q		3110037	1					
ANR	3110207	IdentifierDeclType	char *		3110037	0					
ANR	3110208	Identifier	q		3110037	1					
ANR	3110209	IdentifierDeclStatement	target_long reg = 0 ;	81:12:875:892	3110037	1	True				
ANR	3110210	IdentifierDecl	reg = 0		3110037	0					
ANR	3110211	IdentifierDeclType	target_long		3110037	0					
ANR	3110212	Identifier	reg		3110037	1					
ANR	3110213	AssignmentExpression	reg = 0		3110037	2		=			
ANR	3110214	Identifier	reg		3110037	0					
ANR	3110215	PrimaryExpression	0		3110037	1					
ANR	3110216	ExpressionStatement	pch ++	85:12:909:914	3110037	2	True				
ANR	3110217	PostIncDecOperationExpression	pch ++		3110037	0					
ANR	3110218	Identifier	pch		3110037	0					
ANR	3110219	IncDec	++		3110037	1					
ANR	3110220	ExpressionStatement	q = buf	87:12:929:936	3110037	3	True				
ANR	3110221	AssignmentExpression	q = buf		3110037	0		=			
ANR	3110222	Identifier	q		3110037	0					
ANR	3110223	Identifier	buf		3110037	1					
ANR	3110224	WhileStatement	while ( ( * pch >= 'a' && * pch <= 'z' ) || ( * pch >= 'A' && * pch <= 'Z' ) || ( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.' )		3110037	4					
ANR	3110225	Condition	( * pch >= 'a' && * pch <= 'z' ) || ( * pch >= 'A' && * pch <= 'Z' ) || ( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.'	89:19:958:1139	3110037	0	True				
ANR	3110226	OrExpression	( * pch >= 'a' && * pch <= 'z' ) || ( * pch >= 'A' && * pch <= 'Z' ) || ( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.'		3110037	0		||			
ANR	3110227	AndExpression	* pch >= 'a' && * pch <= 'z'		3110037	0		&&			
ANR	3110228	RelationalExpression	* pch >= 'a'		3110037	0		>=			
ANR	3110229	UnaryOperationExpression	* pch		3110037	0					
ANR	3110230	UnaryOperator	*		3110037	0					
ANR	3110231	Identifier	pch		3110037	1					
ANR	3110232	PrimaryExpression	'a'		3110037	1					
ANR	3110233	RelationalExpression	* pch <= 'z'		3110037	1		<=			
ANR	3110234	UnaryOperationExpression	* pch		3110037	0					
ANR	3110235	UnaryOperator	*		3110037	0					
ANR	3110236	Identifier	pch		3110037	1					
ANR	3110237	PrimaryExpression	'z'		3110037	1					
ANR	3110238	OrExpression	( * pch >= 'A' && * pch <= 'Z' ) || ( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.'		3110037	1		||			
ANR	3110239	AndExpression	* pch >= 'A' && * pch <= 'Z'		3110037	0		&&			
ANR	3110240	RelationalExpression	* pch >= 'A'		3110037	0		>=			
ANR	3110241	UnaryOperationExpression	* pch		3110037	0					
ANR	3110242	UnaryOperator	*		3110037	0					
ANR	3110243	Identifier	pch		3110037	1					
ANR	3110244	PrimaryExpression	'A'		3110037	1					
ANR	3110245	RelationalExpression	* pch <= 'Z'		3110037	1		<=			
ANR	3110246	UnaryOperationExpression	* pch		3110037	0					
ANR	3110247	UnaryOperator	*		3110037	0					
ANR	3110248	Identifier	pch		3110037	1					
ANR	3110249	PrimaryExpression	'Z'		3110037	1					
ANR	3110250	OrExpression	( * pch >= '0' && * pch <= '9' ) || * pch == '_' || * pch == '.'		3110037	1		||			
ANR	3110251	AndExpression	* pch >= '0' && * pch <= '9'		3110037	0		&&			
ANR	3110252	RelationalExpression	* pch >= '0'		3110037	0		>=			
ANR	3110253	UnaryOperationExpression	* pch		3110037	0					
ANR	3110254	UnaryOperator	*		3110037	0					
ANR	3110255	Identifier	pch		3110037	1					
ANR	3110256	PrimaryExpression	'0'		3110037	1					
ANR	3110257	RelationalExpression	* pch <= '9'		3110037	1		<=			
ANR	3110258	UnaryOperationExpression	* pch		3110037	0					
ANR	3110259	UnaryOperator	*		3110037	0					
ANR	3110260	Identifier	pch		3110037	1					
ANR	3110261	PrimaryExpression	'9'		3110037	1					
ANR	3110262	OrExpression	* pch == '_' || * pch == '.'		3110037	1		||			
ANR	3110263	EqualityExpression	* pch == '_'		3110037	0		==			
ANR	3110264	UnaryOperationExpression	* pch		3110037	0					
ANR	3110265	UnaryOperator	*		3110037	0					
ANR	3110266	Identifier	pch		3110037	1					
ANR	3110267	PrimaryExpression	'_'		3110037	1					
ANR	3110268	EqualityExpression	* pch == '.'		3110037	1		==			
ANR	3110269	UnaryOperationExpression	* pch		3110037	0					
ANR	3110270	UnaryOperator	*		3110037	0					
ANR	3110271	Identifier	pch		3110037	1					
ANR	3110272	PrimaryExpression	'.'		3110037	1					
ANR	3110273	CompoundStatement		93:47:1100:1100	3110037	1					
ANR	3110274	IfStatement	if ( ( q - buf ) < sizeof ( buf ) - 1 )		3110037	0					
ANR	3110275	Condition	( q - buf ) < sizeof ( buf ) - 1	97:20:1165:1191	3110037	0	True				
ANR	3110276	RelationalExpression	( q - buf ) < sizeof ( buf ) - 1		3110037	0		<			
ANR	3110277	AdditiveExpression	q - buf		3110037	0		-			
ANR	3110278	Identifier	q		3110037	0					
ANR	3110279	Identifier	buf		3110037	1					
ANR	3110280	AdditiveExpression	sizeof ( buf ) - 1		3110037	1		-			
ANR	3110281	SizeofExpression	sizeof ( buf )		3110037	0					
ANR	3110282	Sizeof	sizeof		3110037	0					
ANR	3110283	SizeofOperand	buf		3110037	1					
ANR	3110284	PrimaryExpression	1		3110037	1					
ANR	3110285	ExpressionStatement	* q ++ = * pch	99:20:1215:1226	3110037	1	True				
ANR	3110286	AssignmentExpression	* q ++ = * pch		3110037	0		=			
ANR	3110287	UnaryOperationExpression	* q ++		3110037	0					
ANR	3110288	UnaryOperator	*		3110037	0					
ANR	3110289	PostIncDecOperationExpression	q ++		3110037	1					
ANR	3110290	Identifier	q		3110037	0					
ANR	3110291	IncDec	++		3110037	1					
ANR	3110292	UnaryOperationExpression	* pch		3110037	1					
ANR	3110293	UnaryOperator	*		3110037	0					
ANR	3110294	Identifier	pch		3110037	1					
ANR	3110295	ExpressionStatement	pch ++	101:16:1245:1250	3110037	1	True				
ANR	3110296	PostIncDecOperationExpression	pch ++		3110037	0					
ANR	3110297	Identifier	pch		3110037	0					
ANR	3110298	IncDec	++		3110037	1					
ANR	3110299	WhileStatement	while ( qemu_isspace ( * pch ) )		3110037	5					
ANR	3110300	Condition	qemu_isspace ( * pch )	105:19:1287:1304	3110037	0	True				
ANR	3110301	CallExpression	qemu_isspace ( * pch )		3110037	0					
ANR	3110302	Callee	qemu_isspace		3110037	0					
ANR	3110303	Identifier	qemu_isspace		3110037	0					
ANR	3110304	ArgumentList	* pch		3110037	1					
ANR	3110305	Argument	* pch		3110037	0					
ANR	3110306	UnaryOperationExpression	* pch		3110037	0					
ANR	3110307	UnaryOperator	*		3110037	0					
ANR	3110308	Identifier	pch		3110037	1					
ANR	3110309	ExpressionStatement	pch ++	107:16:1324:1329	3110037	1	True				
ANR	3110310	PostIncDecOperationExpression	pch ++		3110037	0					
ANR	3110311	Identifier	pch		3110037	0					
ANR	3110312	IncDec	++		3110037	1					
ANR	3110313	ExpressionStatement	* q = 0	109:12:1344:1350	3110037	6	True				
ANR	3110314	AssignmentExpression	* q = 0		3110037	0		=			
ANR	3110315	UnaryOperationExpression	* q		3110037	0					
ANR	3110316	UnaryOperator	*		3110037	0					
ANR	3110317	Identifier	q		3110037	1					
ANR	3110318	PrimaryExpression	0		3110037	1					
ANR	3110319	ExpressionStatement	"ret = get_monitor_def ( & reg , buf )"	111:12:1365:1397	3110037	7	True				
ANR	3110320	AssignmentExpression	"ret = get_monitor_def ( & reg , buf )"		3110037	0		=			
ANR	3110321	Identifier	ret		3110037	0					
ANR	3110322	CallExpression	"get_monitor_def ( & reg , buf )"		3110037	1					
ANR	3110323	Callee	get_monitor_def		3110037	0					
ANR	3110324	Identifier	get_monitor_def		3110037	0					
ANR	3110325	ArgumentList	& reg		3110037	1					
ANR	3110326	Argument	& reg		3110037	0					
ANR	3110327	UnaryOperationExpression	& reg		3110037	0					
ANR	3110328	UnaryOperator	&		3110037	0					
ANR	3110329	Identifier	reg		3110037	1					
ANR	3110330	Argument	buf		3110037	1					
ANR	3110331	Identifier	buf		3110037	0					
ANR	3110332	IfStatement	if ( ret < 0 )		3110037	8					
ANR	3110333	Condition	ret < 0	113:16:1416:1422	3110037	0	True				
ANR	3110334	RelationalExpression	ret < 0		3110037	0		<			
ANR	3110335	Identifier	ret		3110037	0					
ANR	3110336	PrimaryExpression	0		3110037	1					
ANR	3110337	ExpressionStatement	"expr_error ( mon , ""unknown register"" )"	115:16:1442:1477	3110037	1	True				
ANR	3110338	CallExpression	"expr_error ( mon , ""unknown register"" )"		3110037	0					
ANR	3110339	Callee	expr_error		3110037	0					
ANR	3110340	Identifier	expr_error		3110037	0					
ANR	3110341	ArgumentList	mon		3110037	1					
ANR	3110342	Argument	mon		3110037	0					
ANR	3110343	Identifier	mon		3110037	0					
ANR	3110344	Argument	"""unknown register"""		3110037	1					
ANR	3110345	PrimaryExpression	"""unknown register"""		3110037	0					
ANR	3110346	ExpressionStatement	n = reg	117:12:1492:1499	3110037	9	True				
ANR	3110347	AssignmentExpression	n = reg		3110037	0		=			
ANR	3110348	Identifier	n		3110037	0					
ANR	3110349	Identifier	reg		3110037	1					
ANR	3110350	BreakStatement	break ;	121:8:1521:1526	3110037	28	True				
ANR	3110351	Label	case '\\0' :	123:4:1533:1542	3110037	29	True				
ANR	3110352	ExpressionStatement	"expr_error ( mon , ""unexpected end of expression"" )"	125:8:1553:1600	3110037	30	True				
ANR	3110353	CallExpression	"expr_error ( mon , ""unexpected end of expression"" )"		3110037	0					
ANR	3110354	Callee	expr_error		3110037	0					
ANR	3110355	Identifier	expr_error		3110037	0					
ANR	3110356	ArgumentList	mon		3110037	1					
ANR	3110357	Argument	mon		3110037	0					
ANR	3110358	Identifier	mon		3110037	0					
ANR	3110359	Argument	"""unexpected end of expression"""		3110037	1					
ANR	3110360	PrimaryExpression	"""unexpected end of expression"""		3110037	0					
ANR	3110361	ExpressionStatement	n = 0	127:8:1611:1616	3110037	31	True				
ANR	3110362	AssignmentExpression	n = 0		3110037	0		=			
ANR	3110363	Identifier	n		3110037	0					
ANR	3110364	PrimaryExpression	0		3110037	1					
ANR	3110365	BreakStatement	break ;	129:8:1627:1632	3110037	32	True				
ANR	3110366	Label	default :	131:4:1639:1646	3110037	33	True				
ANR	3110367	Identifier	default		3110037	0					
ANR	3110368	ExpressionStatement	errno = 0	133:8:1657:1666	3110037	34	True				
ANR	3110369	AssignmentExpression	errno = 0		3110037	0		=			
ANR	3110370	Identifier	errno		3110037	0					
ANR	3110371	PrimaryExpression	0		3110037	1					
ANR	3110372	ExpressionStatement	"n = strtoull ( pch , & p , 0 )"	135:8:1677:1701	3110037	35	True				
ANR	3110373	AssignmentExpression	"n = strtoull ( pch , & p , 0 )"		3110037	0		=			
ANR	3110374	Identifier	n		3110037	0					
ANR	3110375	CallExpression	"strtoull ( pch , & p , 0 )"		3110037	1					
ANR	3110376	Callee	strtoull		3110037	0					
ANR	3110377	Identifier	strtoull		3110037	0					
ANR	3110378	ArgumentList	pch		3110037	1					
ANR	3110379	Argument	pch		3110037	0					
ANR	3110380	Identifier	pch		3110037	0					
ANR	3110381	Argument	& p		3110037	1					
ANR	3110382	UnaryOperationExpression	& p		3110037	0					
ANR	3110383	UnaryOperator	&		3110037	0					
ANR	3110384	Identifier	p		3110037	1					
ANR	3110385	Argument	0		3110037	2					
ANR	3110386	PrimaryExpression	0		3110037	0					
ANR	3110387	IfStatement	if ( errno == ERANGE )		3110037	36					
ANR	3110388	Condition	errno == ERANGE	137:12:1716:1730	3110037	0	True				
ANR	3110389	EqualityExpression	errno == ERANGE		3110037	0		==			
ANR	3110390	Identifier	errno		3110037	0					
ANR	3110391	Identifier	ERANGE		3110037	1					
ANR	3110392	CompoundStatement		135:29:1691:1691	3110037	1					
ANR	3110393	ExpressionStatement	"expr_error ( mon , ""number too large"" )"	139:12:1748:1783	3110037	0	True				
ANR	3110394	CallExpression	"expr_error ( mon , ""number too large"" )"		3110037	0					
ANR	3110395	Callee	expr_error		3110037	0					
ANR	3110396	Identifier	expr_error		3110037	0					
ANR	3110397	ArgumentList	mon		3110037	1					
ANR	3110398	Argument	mon		3110037	0					
ANR	3110399	Identifier	mon		3110037	0					
ANR	3110400	Argument	"""number too large"""		3110037	1					
ANR	3110401	PrimaryExpression	"""number too large"""		3110037	0					
ANR	3110402	IfStatement	if ( pch == p )		3110037	37					
ANR	3110403	Condition	pch == p	143:12:1809:1816	3110037	0	True				
ANR	3110404	EqualityExpression	pch == p		3110037	0		==			
ANR	3110405	Identifier	pch		3110037	0					
ANR	3110406	Identifier	p		3110037	1					
ANR	3110407	CompoundStatement		141:22:1777:1777	3110037	1					
ANR	3110408	ExpressionStatement	"expr_error ( mon , ""invalid char in expression"" )"	145:12:1834:1879	3110037	0	True				
ANR	3110409	CallExpression	"expr_error ( mon , ""invalid char in expression"" )"		3110037	0					
ANR	3110410	Callee	expr_error		3110037	0					
ANR	3110411	Identifier	expr_error		3110037	0					
ANR	3110412	ArgumentList	mon		3110037	1					
ANR	3110413	Argument	mon		3110037	0					
ANR	3110414	Identifier	mon		3110037	0					
ANR	3110415	Argument	"""invalid char in expression"""		3110037	1					
ANR	3110416	PrimaryExpression	"""invalid char in expression"""		3110037	0					
ANR	3110417	ExpressionStatement	pch = p	149:8:1901:1908	3110037	38	True				
ANR	3110418	AssignmentExpression	pch = p		3110037	0		=			
ANR	3110419	Identifier	pch		3110037	0					
ANR	3110420	Identifier	p		3110037	1					
ANR	3110421	WhileStatement	while ( qemu_isspace ( * pch ) )		3110037	39					
ANR	3110422	Condition	qemu_isspace ( * pch )	151:15:1926:1943	3110037	0	True				
ANR	3110423	CallExpression	qemu_isspace ( * pch )		3110037	0					
ANR	3110424	Callee	qemu_isspace		3110037	0					
ANR	3110425	Identifier	qemu_isspace		3110037	0					
ANR	3110426	ArgumentList	* pch		3110037	1					
ANR	3110427	Argument	* pch		3110037	0					
ANR	3110428	UnaryOperationExpression	* pch		3110037	0					
ANR	3110429	UnaryOperator	*		3110037	0					
ANR	3110430	Identifier	pch		3110037	1					
ANR	3110431	ExpressionStatement	pch ++	153:12:1959:1964	3110037	1	True				
ANR	3110432	PostIncDecOperationExpression	pch ++		3110037	0					
ANR	3110433	Identifier	pch		3110037	0					
ANR	3110434	IncDec	++		3110037	1					
ANR	3110435	BreakStatement	break ;	155:8:1975:1980	3110037	40	True				
ANR	3110436	ReturnStatement	return n ;	159:4:1994:2002	3110037	4	True				
ANR	3110437	Identifier	n		3110037	0					
ANR	3110438	ReturnType	static int64_t		3110037	1					
ANR	3110439	Identifier	expr_unary		3110037	2					
ANR	3110440	ParameterList	Monitor * mon		3110037	3					
ANR	3110441	Parameter	Monitor * mon	1:26:26:37	3110037	0	True				
ANR	3110442	ParameterType	Monitor *		3110037	0					
ANR	3110443	Identifier	mon		3110037	1					
ANR	3110444	CFGEntryNode	ENTRY		3110037		True				
ANR	3110445	CFGExitNode	EXIT		3110037		True				
ANR	3110446	Symbol	ret		3110037						
ANR	3110447	Symbol	errno		3110037						
ANR	3110448	Symbol	* q ++		3110037						
ANR	3110449	Symbol	get_monitor_def		3110037						
ANR	3110450	Symbol	~expr_unary		3110037						
ANR	3110451	Symbol	mon		3110037						
ANR	3110452	Symbol	qemu_isspace		3110037						
ANR	3110453	Symbol	n		3110037						
ANR	3110454	Symbol	p		3110037						
ANR	3110455	Symbol	strtoull		3110037						
ANR	3110456	Symbol	q		3110037						
ANR	3110457	Symbol	buf		3110037						
ANR	3110458	Symbol	pch		3110037						
ANR	3110459	Symbol	expr_sum		3110037						
ANR	3110460	Symbol	reg		3110037						
ANR	3110461	Symbol	& p		3110037						
ANR	3110462	Symbol	ERANGE		3110037						
ANR	3110463	Symbol	* q		3110037						
ANR	3110464	Symbol	expr_unary		3110037						
ANR	3110465	Symbol	& reg		3110037						
ANR	3110466	Symbol	* pch		3110037						
