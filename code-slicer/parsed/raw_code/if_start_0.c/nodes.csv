command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4812488	File	/home/p4ultr4n/workplace/ReVeal/raw_code/if_start_0.c								
ANR	4812489	Function	if_start	1:0:0:1256							
ANR	4812490	FunctionDef	if_start ()		4812489	0					
ANR	4812491	CompoundStatement		3:0:16:1256	4812489	0					
ANR	4812492	IdentifierDeclStatement	"struct mbuf * ifm , * ifqt ;"	5:1:20:43	4812489	0	True				
ANR	4812493	IdentifierDecl	* ifm		4812489	0					
ANR	4812494	IdentifierDeclType	struct mbuf *		4812489	0					
ANR	4812495	Identifier	ifm		4812489	1					
ANR	4812496	IdentifierDecl	* ifqt		4812489	1					
ANR	4812497	IdentifierDeclType	struct mbuf *		4812489	0					
ANR	4812498	Identifier	ifqt		4812489	1					
ANR	4812499	ExpressionStatement	"DEBUG_CALL ( ""if_start"" )"	9:1:49:71	4812489	1	True				
ANR	4812500	CallExpression	"DEBUG_CALL ( ""if_start"" )"		4812489	0					
ANR	4812501	Callee	DEBUG_CALL		4812489	0					
ANR	4812502	Identifier	DEBUG_CALL		4812489	0					
ANR	4812503	ArgumentList	"""if_start"""		4812489	1					
ANR	4812504	Argument	"""if_start"""		4812489	0					
ANR	4812505	PrimaryExpression	"""if_start"""		4812489	0					
ANR	4812506	IfStatement	if ( if_queued == 0 )		4812489	2					
ANR	4812507	Condition	if_queued == 0	13:5:81:94	4812489	0	True				
ANR	4812508	EqualityExpression	if_queued == 0		4812489	0		==			
ANR	4812509	Identifier	if_queued		4812489	0					
ANR	4812510	PrimaryExpression	0		4812489	1					
ANR	4812511	ReturnStatement	return ;	15:4:102:108	4812489	1	True				
ANR	4812512	Label	again :	19:1:134:139	4812489	3	True				
ANR	4812513	Identifier	again		4812489	0					
ANR	4812514	IfStatement	if ( ! slirp_can_output ( ) )		4812489	4					
ANR	4812515	Condition	! slirp_can_output ( )	23:12:199:217	4812489	0	True				
ANR	4812516	UnaryOperationExpression	! slirp_can_output ( )		4812489	0					
ANR	4812517	UnaryOperator	!		4812489	0					
ANR	4812518	CallExpression	slirp_can_output ( )		4812489	1					
ANR	4812519	Callee	slirp_can_output		4812489	0					
ANR	4812520	Identifier	slirp_can_output		4812489	0					
ANR	4812521	ArgumentList			4812489	1					
ANR	4812522	ReturnStatement	return ;	25:12:233:239	4812489	1	True				
ANR	4812523	IfStatement	if ( if_fastq . ifq_next != & if_fastq )		4812489	5					
ANR	4812524	Condition	if_fastq . ifq_next != & if_fastq	37:5:367:396	4812489	0	True				
ANR	4812525	EqualityExpression	if_fastq . ifq_next != & if_fastq		4812489	0		!=			
ANR	4812526	MemberAccess	if_fastq . ifq_next		4812489	0					
ANR	4812527	Identifier	if_fastq		4812489	0					
ANR	4812528	Identifier	ifq_next		4812489	1					
ANR	4812529	UnaryOperationExpression	& if_fastq		4812489	1					
ANR	4812530	UnaryOperator	&		4812489	0					
ANR	4812531	Identifier	if_fastq		4812489	1					
ANR	4812532	CompoundStatement		35:37:382:382	4812489	1					
ANR	4812533	ExpressionStatement	ifm = if_fastq . ifq_next	39:2:404:427	4812489	0	True				
ANR	4812534	AssignmentExpression	ifm = if_fastq . ifq_next		4812489	0		=			
ANR	4812535	Identifier	ifm		4812489	0					
ANR	4812536	MemberAccess	if_fastq . ifq_next		4812489	1					
ANR	4812537	Identifier	if_fastq		4812489	0					
ANR	4812538	Identifier	ifq_next		4812489	1					
ANR	4812539	ElseStatement	else		4812489	0					
ANR	4812540	CompoundStatement		39:8:421:421	4812489	0					
ANR	4812541	IfStatement	if ( next_m != & if_batchq )		4812489	0					
ANR	4812542	Condition	next_m != & if_batchq	45:6:497:516	4812489	0	True				
ANR	4812543	EqualityExpression	next_m != & if_batchq		4812489	0		!=			
ANR	4812544	Identifier	next_m		4812489	0					
ANR	4812545	UnaryOperationExpression	& if_batchq		4812489	1					
ANR	4812546	UnaryOperator	&		4812489	0					
ANR	4812547	Identifier	if_batchq		4812489	1					
ANR	4812548	ExpressionStatement	ifm = next_m	47:5:525:537	4812489	1	True				
ANR	4812549	AssignmentExpression	ifm = next_m		4812489	0		=			
ANR	4812550	Identifier	ifm		4812489	0					
ANR	4812551	Identifier	next_m		4812489	1					
ANR	4812552	ElseStatement	else		4812489	0					
ANR	4812553	ExpressionStatement	ifm = if_batchq . ifq_next	51:5:553:577	4812489	0	True				
ANR	4812554	AssignmentExpression	ifm = if_batchq . ifq_next		4812489	0		=			
ANR	4812555	Identifier	ifm		4812489	0					
ANR	4812556	MemberAccess	if_batchq . ifq_next		4812489	1					
ANR	4812557	Identifier	if_batchq		4812489	0					
ANR	4812558	Identifier	ifq_next		4812489	1					
ANR	4812559	ExpressionStatement	next_m = ifm -> ifq_next	57:2:636:658	4812489	1	True				
ANR	4812560	AssignmentExpression	next_m = ifm -> ifq_next		4812489	0		=			
ANR	4812561	Identifier	next_m		4812489	0					
ANR	4812562	PtrMemberAccess	ifm -> ifq_next		4812489	1					
ANR	4812563	Identifier	ifm		4812489	0					
ANR	4812564	Identifier	ifq_next		4812489	1					
ANR	4812565	ExpressionStatement	ifqt = ifm -> ifq_prev	63:1:699:719	4812489	6	True				
ANR	4812566	AssignmentExpression	ifqt = ifm -> ifq_prev		4812489	0		=			
ANR	4812567	Identifier	ifqt		4812489	0					
ANR	4812568	PtrMemberAccess	ifm -> ifq_prev		4812489	1					
ANR	4812569	Identifier	ifm		4812489	0					
ANR	4812570	Identifier	ifq_prev		4812489	1					
ANR	4812571	ExpressionStatement	remque ( ifm )	65:1:723:734	4812489	7	True				
ANR	4812572	CallExpression	remque ( ifm )		4812489	0					
ANR	4812573	Callee	remque		4812489	0					
ANR	4812574	Identifier	remque		4812489	0					
ANR	4812575	ArgumentList	ifm		4812489	1					
ANR	4812576	Argument	ifm		4812489	0					
ANR	4812577	Identifier	ifm		4812489	0					
ANR	4812578	ExpressionStatement	-- if_queued	67:1:738:749	4812489	8	True				
ANR	4812579	UnaryExpression	-- if_queued		4812489	0					
ANR	4812580	IncDec	--		4812489	0					
ANR	4812581	Identifier	if_queued		4812489	1					
ANR	4812582	IfStatement	if ( ifm -> ifs_next != ifm )		4812489	9					
ANR	4812583	Condition	ifm -> ifs_next != ifm	73:5:825:867	4812489	0	True				
ANR	4812584	EqualityExpression	ifm -> ifs_next != ifm		4812489	0		!=			
ANR	4812585	PtrMemberAccess	ifm -> ifs_next		4812489	0					
ANR	4812586	Identifier	ifm		4812489	0					
ANR	4812587	Identifier	ifs_next		4812489	1					
ANR	4812588	Identifier	ifm		4812489	1					
ANR	4812589	CompoundStatement		71:50:853:853	4812489	1					
ANR	4812590	ExpressionStatement	"insque ( ifm -> ifs_next , ifqt )"	75:2:875:902	4812489	0	True				
ANR	4812591	CallExpression	"insque ( ifm -> ifs_next , ifqt )"		4812489	0					
ANR	4812592	Callee	insque		4812489	0					
ANR	4812593	Identifier	insque		4812489	0					
ANR	4812594	ArgumentList	ifm -> ifs_next		4812489	1					
ANR	4812595	Argument	ifm -> ifs_next		4812489	0					
ANR	4812596	PtrMemberAccess	ifm -> ifs_next		4812489	0					
ANR	4812597	Identifier	ifm		4812489	0					
ANR	4812598	Identifier	ifs_next		4812489	1					
ANR	4812599	Argument	ifqt		4812489	1					
ANR	4812600	Identifier	ifqt		4812489	0					
ANR	4812601	ExpressionStatement	ifs_remque ( ifm )	77:2:907:922	4812489	1	True				
ANR	4812602	CallExpression	ifs_remque ( ifm )		4812489	0					
ANR	4812603	Callee	ifs_remque		4812489	0					
ANR	4812604	Identifier	ifs_remque		4812489	0					
ANR	4812605	ArgumentList	ifm		4812489	1					
ANR	4812606	Argument	ifm		4812489	0					
ANR	4812607	Identifier	ifm		4812489	0					
ANR	4812608	IfStatement	if ( ifm -> ifq_so )		4812489	10					
ANR	4812609	Condition	ifm -> ifq_so	85:5:961:971	4812489	0	True				
ANR	4812610	PtrMemberAccess	ifm -> ifq_so		4812489	0					
ANR	4812611	Identifier	ifm		4812489	0					
ANR	4812612	Identifier	ifq_so		4812489	1					
ANR	4812613	CompoundStatement		83:18:957:957	4812489	1					
ANR	4812614	IfStatement	if ( -- ifm -> ifq_so -> so_queued == 0 )		4812489	0					
ANR	4812615	Condition	-- ifm -> ifq_so -> so_queued == 0	87:6:983:1011	4812489	0	True				
ANR	4812616	EqualityExpression	-- ifm -> ifq_so -> so_queued == 0		4812489	0		==			
ANR	4812617	UnaryExpression	-- ifm -> ifq_so -> so_queued		4812489	0					
ANR	4812618	IncDec	--		4812489	0					
ANR	4812619	PtrMemberAccess	ifm -> ifq_so -> so_queued		4812489	1					
ANR	4812620	PtrMemberAccess	ifm -> ifq_so		4812489	0					
ANR	4812621	Identifier	ifm		4812489	0					
ANR	4812622	Identifier	ifq_so		4812489	1					
ANR	4812623	Identifier	so_queued		4812489	1					
ANR	4812624	PrimaryExpression	0		4812489	1					
ANR	4812625	ExpressionStatement	ifm -> ifq_so -> so_nqueued = 0	91:5:1073:1100	4812489	1	True				
ANR	4812626	AssignmentExpression	ifm -> ifq_so -> so_nqueued = 0		4812489	0		=			
ANR	4812627	PtrMemberAccess	ifm -> ifq_so -> so_nqueued		4812489	0					
ANR	4812628	PtrMemberAccess	ifm -> ifq_so		4812489	0					
ANR	4812629	Identifier	ifm		4812489	0					
ANR	4812630	Identifier	ifq_so		4812489	1					
ANR	4812631	Identifier	so_nqueued		4812489	1					
ANR	4812632	PrimaryExpression	0		4812489	1					
ANR	4812633	ExpressionStatement	"if_encap ( ifm -> m_data , ifm -> m_len )"	99:8:1160:1193	4812489	11	True				
ANR	4812634	CallExpression	"if_encap ( ifm -> m_data , ifm -> m_len )"		4812489	0					
ANR	4812635	Callee	if_encap		4812489	0					
ANR	4812636	Identifier	if_encap		4812489	0					
ANR	4812637	ArgumentList	ifm -> m_data		4812489	1					
ANR	4812638	Argument	ifm -> m_data		4812489	0					
ANR	4812639	PtrMemberAccess	ifm -> m_data		4812489	0					
ANR	4812640	Identifier	ifm		4812489	0					
ANR	4812641	Identifier	m_data		4812489	1					
ANR	4812642	Argument	ifm -> m_len		4812489	1					
ANR	4812643	PtrMemberAccess	ifm -> m_len		4812489	0					
ANR	4812644	Identifier	ifm		4812489	0					
ANR	4812645	Identifier	m_len		4812489	1					
ANR	4812646	ExpressionStatement	m_free ( ifm )	103:8:1206:1217	4812489	12	True				
ANR	4812647	CallExpression	m_free ( ifm )		4812489	0					
ANR	4812648	Callee	m_free		4812489	0					
ANR	4812649	Identifier	m_free		4812489	0					
ANR	4812650	ArgumentList	ifm		4812489	1					
ANR	4812651	Argument	ifm		4812489	0					
ANR	4812652	Identifier	ifm		4812489	0					
ANR	4812653	IfStatement	if ( if_queued )		4812489	13					
ANR	4812654	Condition	if_queued	107:5:1227:1235	4812489	0	True				
ANR	4812655	Identifier	if_queued		4812489	0					
ANR	4812656	GotoStatement	goto again ;	109:4:1243:1253	4812489	1	True				
ANR	4812657	Identifier	again		4812489	0					
ANR	4812658	Identifier	if_start		4812489	1					
ANR	4812659	ParameterList			4812489	2					
ANR	4812660	CFGEntryNode	ENTRY		4812489		True				
ANR	4812661	CFGExitNode	EXIT		4812489		True				
ANR	4812662	Symbol	ifm -> ifq_next		4812489						
ANR	4812663	Symbol	* * ifm		4812489						
ANR	4812664	Symbol	* ifm		4812489						
ANR	4812665	Symbol	ifm -> m_len		4812489						
ANR	4812666	Symbol	ifm -> ifq_so		4812489						
ANR	4812667	Symbol	if_fastq		4812489						
ANR	4812668	Symbol	ifm -> m_data		4812489						
ANR	4812669	Symbol	if_batchq . ifq_next		4812489						
ANR	4812670	Symbol	ifm -> ifq_so -> so_queued		4812489						
ANR	4812671	Symbol	ifm		4812489						
ANR	4812672	Symbol	ifqt		4812489						
ANR	4812673	Symbol	ifm -> ifs_next		4812489						
ANR	4812674	Symbol	* ifm -> ifq_so		4812489						
ANR	4812675	Symbol	slirp_can_output		4812489						
ANR	4812676	Symbol	if_queued		4812489						
ANR	4812677	Symbol	if_batchq		4812489						
ANR	4812678	Symbol	if_fastq . ifq_next		4812489						
ANR	4812679	Symbol	ifm -> ifq_so -> so_nqueued		4812489						
ANR	4812680	Symbol	& if_batchq		4812489						
ANR	4812681	Symbol	next_m		4812489						
ANR	4812682	Symbol	ifm -> ifq_prev		4812489						
ANR	4812683	Symbol	& if_fastq		4812489						
