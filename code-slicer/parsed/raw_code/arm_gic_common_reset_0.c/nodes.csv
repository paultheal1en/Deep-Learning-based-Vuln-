command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	600858	File	/home/p4ultr4n/workplace/ReVeal/raw_code/arm_gic_common_reset_0.c								
ANR	600859	Function	arm_gic_common_reset	1:0:0:871							
ANR	600860	FunctionDef	arm_gic_common_reset (DeviceState * dev)		600859	0					
ANR	600861	CompoundStatement		3:0:52:871	600859	0					
ANR	600862	IdentifierDeclStatement	GICState * s = ARM_GIC_COMMON ( dev ) ;	5:4:59:92	600859	0	True				
ANR	600863	IdentifierDecl	* s = ARM_GIC_COMMON ( dev )		600859	0					
ANR	600864	IdentifierDeclType	GICState *		600859	0					
ANR	600865	Identifier	s		600859	1					
ANR	600866	AssignmentExpression	* s = ARM_GIC_COMMON ( dev )		600859	2		=			
ANR	600867	Identifier	s		600859	0					
ANR	600868	CallExpression	ARM_GIC_COMMON ( dev )		600859	1					
ANR	600869	Callee	ARM_GIC_COMMON		600859	0					
ANR	600870	Identifier	ARM_GIC_COMMON		600859	0					
ANR	600871	ArgumentList	dev		600859	1					
ANR	600872	Argument	dev		600859	0					
ANR	600873	Identifier	dev		600859	0					
ANR	600874	IdentifierDeclStatement	int i ;	7:4:99:104	600859	1	True				
ANR	600875	IdentifierDecl	i		600859	0					
ANR	600876	IdentifierDeclType	int		600859	0					
ANR	600877	Identifier	i		600859	1					
ANR	600878	ExpressionStatement	"memset ( s -> irq_state , 0 , GIC_MAXIRQ * sizeof ( gic_irq_state ) )"	9:4:111:170	600859	2	True				
ANR	600879	CallExpression	"memset ( s -> irq_state , 0 , GIC_MAXIRQ * sizeof ( gic_irq_state ) )"		600859	0					
ANR	600880	Callee	memset		600859	0					
ANR	600881	Identifier	memset		600859	0					
ANR	600882	ArgumentList	s -> irq_state		600859	1					
ANR	600883	Argument	s -> irq_state		600859	0					
ANR	600884	PtrMemberAccess	s -> irq_state		600859	0					
ANR	600885	Identifier	s		600859	0					
ANR	600886	Identifier	irq_state		600859	1					
ANR	600887	Argument	0		600859	1					
ANR	600888	PrimaryExpression	0		600859	0					
ANR	600889	Argument	GIC_MAXIRQ * sizeof ( gic_irq_state )		600859	2					
ANR	600890	MultiplicativeExpression	GIC_MAXIRQ * sizeof ( gic_irq_state )		600859	0		*			
ANR	600891	Identifier	GIC_MAXIRQ		600859	0					
ANR	600892	SizeofExpression	sizeof ( gic_irq_state )		600859	1					
ANR	600893	Sizeof	sizeof		600859	0					
ANR	600894	SizeofOperand	gic_irq_state		600859	1					
ANR	600895	ForStatement	for ( i = 0 ; i < s -> num_cpu ; i ++ )		600859	3					
ANR	600896	ForInit	i = 0 ;	11:9:182:188	600859	0	True				
ANR	600897	AssignmentExpression	i = 0		600859	0		=			
ANR	600898	Identifier	i		600859	0					
ANR	600899	PrimaryExpression	0		600859	1					
ANR	600900	Condition	i < s -> num_cpu	11:17:190:203	600859	1	True				
ANR	600901	RelationalExpression	i < s -> num_cpu		600859	0		<			
ANR	600902	Identifier	i		600859	0					
ANR	600903	PtrMemberAccess	s -> num_cpu		600859	1					
ANR	600904	Identifier	s		600859	0					
ANR	600905	Identifier	num_cpu		600859	1					
ANR	600906	PostIncDecOperationExpression	i ++	11:33:206:208	600859	2	True				
ANR	600907	Identifier	i		600859	0					
ANR	600908	IncDec	++		600859	1					
ANR	600909	CompoundStatement		9:38:158:158	600859	3					
ANR	600910	IfStatement	if ( s -> revision == REV_11MPCORE )		600859	0					
ANR	600911	Condition	s -> revision == REV_11MPCORE	13:12:226:252	600859	0	True				
ANR	600912	EqualityExpression	s -> revision == REV_11MPCORE		600859	0		==			
ANR	600913	PtrMemberAccess	s -> revision		600859	0					
ANR	600914	Identifier	s		600859	0					
ANR	600915	Identifier	revision		600859	1					
ANR	600916	Identifier	REV_11MPCORE		600859	1					
ANR	600917	CompoundStatement		11:41:202:202	600859	1					
ANR	600918	ExpressionStatement	s -> priority_mask [ i ] = 0xf0	15:12:270:296	600859	0	True				
ANR	600919	AssignmentExpression	s -> priority_mask [ i ] = 0xf0		600859	0		=			
ANR	600920	ArrayIndexing	s -> priority_mask [ i ]		600859	0					
ANR	600921	PtrMemberAccess	s -> priority_mask		600859	0					
ANR	600922	Identifier	s		600859	0					
ANR	600923	Identifier	priority_mask		600859	1					
ANR	600924	Identifier	i		600859	1					
ANR	600925	PrimaryExpression	0xf0		600859	1					
ANR	600926	ElseStatement	else		600859	0					
ANR	600927	CompoundStatement		15:15:261:261	600859	0					
ANR	600928	ExpressionStatement	s -> priority_mask [ i ] = 0	19:12:329:352	600859	0	True				
ANR	600929	AssignmentExpression	s -> priority_mask [ i ] = 0		600859	0		=			
ANR	600930	ArrayIndexing	s -> priority_mask [ i ]		600859	0					
ANR	600931	PtrMemberAccess	s -> priority_mask		600859	0					
ANR	600932	Identifier	s		600859	0					
ANR	600933	Identifier	priority_mask		600859	1					
ANR	600934	Identifier	i		600859	1					
ANR	600935	PrimaryExpression	0		600859	1					
ANR	600936	ExpressionStatement	s -> current_pending [ i ] = 1023	23:8:374:402	600859	1	True				
ANR	600937	AssignmentExpression	s -> current_pending [ i ] = 1023		600859	0		=			
ANR	600938	ArrayIndexing	s -> current_pending [ i ]		600859	0					
ANR	600939	PtrMemberAccess	s -> current_pending		600859	0					
ANR	600940	Identifier	s		600859	0					
ANR	600941	Identifier	current_pending		600859	1					
ANR	600942	Identifier	i		600859	1					
ANR	600943	PrimaryExpression	1023		600859	1					
ANR	600944	ExpressionStatement	s -> running_irq [ i ] = 1023	25:8:413:437	600859	2	True				
ANR	600945	AssignmentExpression	s -> running_irq [ i ] = 1023		600859	0		=			
ANR	600946	ArrayIndexing	s -> running_irq [ i ]		600859	0					
ANR	600947	PtrMemberAccess	s -> running_irq		600859	0					
ANR	600948	Identifier	s		600859	0					
ANR	600949	Identifier	running_irq		600859	1					
ANR	600950	Identifier	i		600859	1					
ANR	600951	PrimaryExpression	1023		600859	1					
ANR	600952	ExpressionStatement	s -> running_priority [ i ] = 0x100	27:8:448:478	600859	3	True				
ANR	600953	AssignmentExpression	s -> running_priority [ i ] = 0x100		600859	0		=			
ANR	600954	ArrayIndexing	s -> running_priority [ i ]		600859	0					
ANR	600955	PtrMemberAccess	s -> running_priority		600859	0					
ANR	600956	Identifier	s		600859	0					
ANR	600957	Identifier	running_priority		600859	1					
ANR	600958	Identifier	i		600859	1					
ANR	600959	PrimaryExpression	0x100		600859	1					
ANR	600960	ExpressionStatement	s -> cpu_enabled [ i ] = false	29:8:489:514	600859	4	True				
ANR	600961	AssignmentExpression	s -> cpu_enabled [ i ] = false		600859	0		=			
ANR	600962	ArrayIndexing	s -> cpu_enabled [ i ]		600859	0					
ANR	600963	PtrMemberAccess	s -> cpu_enabled		600859	0					
ANR	600964	Identifier	s		600859	0					
ANR	600965	Identifier	cpu_enabled		600859	1					
ANR	600966	Identifier	i		600859	1					
ANR	600967	Identifier	false		600859	1					
ANR	600968	ForStatement	for ( i = 0 ; i < GIC_NR_SGIS ; i ++ )		600859	4					
ANR	600969	ForInit	i = 0 ;	33:9:533:538	600859	0	True				
ANR	600970	AssignmentExpression	i = 0		600859	0		=			
ANR	600971	Identifier	i		600859	0					
ANR	600972	PrimaryExpression	0		600859	1					
ANR	600973	Condition	i < GIC_NR_SGIS	33:16:540:554	600859	1	True				
ANR	600974	RelationalExpression	i < GIC_NR_SGIS		600859	0		<			
ANR	600975	Identifier	i		600859	0					
ANR	600976	Identifier	GIC_NR_SGIS		600859	1					
ANR	600977	PostIncDecOperationExpression	i ++	33:33:557:559	600859	2	True				
ANR	600978	Identifier	i		600859	0					
ANR	600979	IncDec	++		600859	1					
ANR	600980	CompoundStatement		31:38:509:509	600859	3					
ANR	600981	ExpressionStatement	"GIC_SET_ENABLED ( i , ALL_CPU_MASK )"	35:8:573:605	600859	0	True				
ANR	600982	CallExpression	"GIC_SET_ENABLED ( i , ALL_CPU_MASK )"		600859	0					
ANR	600983	Callee	GIC_SET_ENABLED		600859	0					
ANR	600984	Identifier	GIC_SET_ENABLED		600859	0					
ANR	600985	ArgumentList	i		600859	1					
ANR	600986	Argument	i		600859	0					
ANR	600987	Identifier	i		600859	0					
ANR	600988	Argument	ALL_CPU_MASK		600859	1					
ANR	600989	Identifier	ALL_CPU_MASK		600859	0					
ANR	600990	ExpressionStatement	GIC_SET_EDGE_TRIGGER ( i )	37:8:616:639	600859	1	True				
ANR	600991	CallExpression	GIC_SET_EDGE_TRIGGER ( i )		600859	0					
ANR	600992	Callee	GIC_SET_EDGE_TRIGGER		600859	0					
ANR	600993	Identifier	GIC_SET_EDGE_TRIGGER		600859	0					
ANR	600994	ArgumentList	i		600859	1					
ANR	600995	Argument	i		600859	0					
ANR	600996	Identifier	i		600859	0					
ANR	600997	IfStatement	if ( s -> num_cpu == 1 )		600859	5					
ANR	600998	Condition	s -> num_cpu == 1	41:8:657:671	600859	0	True				
ANR	600999	EqualityExpression	s -> num_cpu == 1		600859	0		==			
ANR	601000	PtrMemberAccess	s -> num_cpu		600859	0					
ANR	601001	Identifier	s		600859	0					
ANR	601002	Identifier	num_cpu		600859	1					
ANR	601003	PrimaryExpression	1		600859	1					
ANR	601004	CompoundStatement		39:25:621:621	600859	1					
ANR	601005	ForStatement	for ( i = 0 ; i < GIC_MAXIRQ ; i ++ )		600859	0					
ANR	601006	ForInit	i = 0 ;	45:13:769:774	600859	0	True				
ANR	601007	AssignmentExpression	i = 0		600859	0		=			
ANR	601008	Identifier	i		600859	0					
ANR	601009	PrimaryExpression	0		600859	1					
ANR	601010	Condition	i < GIC_MAXIRQ	45:20:776:789	600859	1	True				
ANR	601011	RelationalExpression	i < GIC_MAXIRQ		600859	0		<			
ANR	601012	Identifier	i		600859	0					
ANR	601013	Identifier	GIC_MAXIRQ		600859	1					
ANR	601014	PostIncDecOperationExpression	i ++	45:36:792:794	600859	2	True				
ANR	601015	Identifier	i		600859	0					
ANR	601016	IncDec	++		600859	1					
ANR	601017	CompoundStatement		43:41:744:744	600859	3					
ANR	601018	ExpressionStatement	s -> irq_target [ i ] = 1	47:12:812:832	600859	0	True				
ANR	601019	AssignmentExpression	s -> irq_target [ i ] = 1		600859	0		=			
ANR	601020	ArrayIndexing	s -> irq_target [ i ]		600859	0					
ANR	601021	PtrMemberAccess	s -> irq_target		600859	0					
ANR	601022	Identifier	s		600859	0					
ANR	601023	Identifier	irq_target		600859	1					
ANR	601024	Identifier	i		600859	1					
ANR	601025	PrimaryExpression	1		600859	1					
ANR	601026	ExpressionStatement	s -> ctlr = 0	53:4:857:868	600859	6	True				
ANR	601027	AssignmentExpression	s -> ctlr = 0		600859	0		=			
ANR	601028	PtrMemberAccess	s -> ctlr		600859	0					
ANR	601029	Identifier	s		600859	0					
ANR	601030	Identifier	ctlr		600859	1					
ANR	601031	PrimaryExpression	0		600859	1					
ANR	601032	ReturnType	static void		600859	1					
ANR	601033	Identifier	arm_gic_common_reset		600859	2					
ANR	601034	ParameterList	DeviceState * dev		600859	3					
ANR	601035	Parameter	DeviceState * dev	1:33:33:48	600859	0	True				
ANR	601036	ParameterType	DeviceState *		600859	0					
ANR	601037	Identifier	dev		600859	1					
ANR	601038	CFGEntryNode	ENTRY		600859		True				
ANR	601039	CFGExitNode	EXIT		600859		True				
ANR	601040	Symbol	GIC_MAXIRQ		600859						
ANR	601041	Symbol	* s -> irq_target		600859						
ANR	601042	Symbol	s -> ctlr		600859						
ANR	601043	Symbol	ARM_GIC_COMMON		600859						
ANR	601044	Symbol	s -> num_cpu		600859						
ANR	601045	Symbol	* s -> current_pending		600859						
ANR	601046	Symbol	* s -> running_priority		600859						
ANR	601047	Symbol	s -> cpu_enabled		600859						
ANR	601048	Symbol	dev		600859						
ANR	601049	Symbol	* * s		600859						
ANR	601050	Symbol	s -> running_priority		600859						
ANR	601051	Symbol	* s -> running_irq		600859						
ANR	601052	Symbol	false		600859						
ANR	601053	Symbol	i		600859						
ANR	601054	Symbol	s -> running_irq		600859						
ANR	601055	Symbol	REV_11MPCORE		600859						
ANR	601056	Symbol	s -> revision		600859						
ANR	601057	Symbol	s -> priority_mask		600859						
ANR	601058	Symbol	s -> irq_target		600859						
ANR	601059	Symbol	s		600859						
ANR	601060	Symbol	* i		600859						
ANR	601061	Symbol	s -> irq_state		600859						
ANR	601062	Symbol	s -> current_pending		600859						
ANR	601063	Symbol	GIC_NR_SGIS		600859						
ANR	601064	Symbol	* s -> priority_mask		600859						
ANR	601065	Symbol	* s -> cpu_enabled		600859						
ANR	601066	Symbol	* s		600859						
ANR	601067	Symbol	ALL_CPU_MASK		600859						
