command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	9538549	File	/home/p4ultr4n/workplace/ReVeal/raw_code/xen_pt_msgctrl_reg_write_0.c								
ANR	9538550	Function	xen_pt_msgctrl_reg_write	1:0:0:2119							
ANR	9538551	FunctionDef	"xen_pt_msgctrl_reg_write (XenPCIPassthroughState * s , XenPTReg * cfg_entry , uint16_t * val , uint16_t dev_value , uint16_t valid_mask)"		9538550	0					
ANR	9538552	CompoundStatement		7:0:215:2119	9538550	0					
ANR	9538553	IdentifierDeclStatement	XenPTRegInfo * reg = cfg_entry -> reg ;	9:4:222:256	9538550	0	True				
ANR	9538554	IdentifierDecl	* reg = cfg_entry -> reg		9538550	0					
ANR	9538555	IdentifierDeclType	XenPTRegInfo *		9538550	0					
ANR	9538556	Identifier	reg		9538550	1					
ANR	9538557	AssignmentExpression	* reg = cfg_entry -> reg		9538550	2		=			
ANR	9538558	Identifier	reg		9538550	0					
ANR	9538559	PtrMemberAccess	cfg_entry -> reg		9538550	1					
ANR	9538560	Identifier	cfg_entry		9538550	0					
ANR	9538561	Identifier	reg		9538550	1					
ANR	9538562	IdentifierDeclStatement	XenPTMSI * msi = s -> msi ;	11:4:263:285	9538550	1	True				
ANR	9538563	IdentifierDecl	* msi = s -> msi		9538550	0					
ANR	9538564	IdentifierDeclType	XenPTMSI *		9538550	0					
ANR	9538565	Identifier	msi		9538550	1					
ANR	9538566	AssignmentExpression	* msi = s -> msi		9538550	2		=			
ANR	9538567	Identifier	msi		9538550	0					
ANR	9538568	PtrMemberAccess	s -> msi		9538550	1					
ANR	9538569	Identifier	s		9538550	0					
ANR	9538570	Identifier	msi		9538550	1					
ANR	9538571	IdentifierDeclStatement	uint16_t writable_mask = 0 ;	13:4:292:318	9538550	2	True				
ANR	9538572	IdentifierDecl	writable_mask = 0		9538550	0					
ANR	9538573	IdentifierDeclType	uint16_t		9538550	0					
ANR	9538574	Identifier	writable_mask		9538550	1					
ANR	9538575	AssignmentExpression	writable_mask = 0		9538550	2		=			
ANR	9538576	Identifier	writable_mask		9538550	0					
ANR	9538577	PrimaryExpression	0		9538550	1					
ANR	9538578	IdentifierDeclStatement	"uint16_t throughable_mask = get_throughable_mask ( s , reg , valid_mask ) ;"	15:4:325:393	9538550	3	True				
ANR	9538579	IdentifierDecl	"throughable_mask = get_throughable_mask ( s , reg , valid_mask )"		9538550	0					
ANR	9538580	IdentifierDeclType	uint16_t		9538550	0					
ANR	9538581	Identifier	throughable_mask		9538550	1					
ANR	9538582	AssignmentExpression	"throughable_mask = get_throughable_mask ( s , reg , valid_mask )"		9538550	2		=			
ANR	9538583	Identifier	throughable_mask		9538550	0					
ANR	9538584	CallExpression	"get_throughable_mask ( s , reg , valid_mask )"		9538550	1					
ANR	9538585	Callee	get_throughable_mask		9538550	0					
ANR	9538586	Identifier	get_throughable_mask		9538550	0					
ANR	9538587	ArgumentList	s		9538550	1					
ANR	9538588	Argument	s		9538550	0					
ANR	9538589	Identifier	s		9538550	0					
ANR	9538590	Argument	reg		9538550	1					
ANR	9538591	Identifier	reg		9538550	0					
ANR	9538592	Argument	valid_mask		9538550	2					
ANR	9538593	Identifier	valid_mask		9538550	0					
ANR	9538594	IfStatement	if ( * val & PCI_MSI_FLAGS_QSIZE )		9538550	4					
ANR	9538595	Condition	* val & PCI_MSI_FLAGS_QSIZE	21:8:455:480	9538550	0	True				
ANR	9538596	BitAndExpression	* val & PCI_MSI_FLAGS_QSIZE		9538550	0		&			
ANR	9538597	UnaryOperationExpression	* val		9538550	0					
ANR	9538598	UnaryOperator	*		9538550	0					
ANR	9538599	Identifier	val		9538550	1					
ANR	9538600	Identifier	PCI_MSI_FLAGS_QSIZE		9538550	1					
ANR	9538601	CompoundStatement		15:36:267:267	9538550	1					
ANR	9538602	ExpressionStatement	"XEN_PT_WARN ( & s -> dev , ""Tries to set more than 1 vector ctrl %x\\n"" , * val )"	23:8:494:565	9538550	0	True				
ANR	9538603	CallExpression	"XEN_PT_WARN ( & s -> dev , ""Tries to set more than 1 vector ctrl %x\\n"" , * val )"		9538550	0					
ANR	9538604	Callee	XEN_PT_WARN		9538550	0					
ANR	9538605	Identifier	XEN_PT_WARN		9538550	0					
ANR	9538606	ArgumentList	& s -> dev		9538550	1					
ANR	9538607	Argument	& s -> dev		9538550	0					
ANR	9538608	UnaryOperationExpression	& s -> dev		9538550	0					
ANR	9538609	UnaryOperator	&		9538550	0					
ANR	9538610	PtrMemberAccess	s -> dev		9538550	1					
ANR	9538611	Identifier	s		9538550	0					
ANR	9538612	Identifier	dev		9538550	1					
ANR	9538613	Argument	"""Tries to set more than 1 vector ctrl %x\\n"""		9538550	1					
ANR	9538614	PrimaryExpression	"""Tries to set more than 1 vector ctrl %x\\n"""		9538550	0					
ANR	9538615	Argument	* val		9538550	2					
ANR	9538616	UnaryOperationExpression	* val		9538550	0					
ANR	9538617	UnaryOperator	*		9538550	0					
ANR	9538618	Identifier	val		9538550	1					
ANR	9538619	ExpressionStatement	writable_mask = reg -> emu_mask & ~reg -> ro_mask & valid_mask	31:4:616:674	9538550	5	True				
ANR	9538620	AssignmentExpression	writable_mask = reg -> emu_mask & ~reg -> ro_mask & valid_mask		9538550	0		=			
ANR	9538621	Identifier	writable_mask		9538550	0					
ANR	9538622	BitAndExpression	reg -> emu_mask & ~reg -> ro_mask & valid_mask		9538550	1		&			
ANR	9538623	PtrMemberAccess	reg -> emu_mask		9538550	0					
ANR	9538624	Identifier	reg		9538550	0					
ANR	9538625	Identifier	emu_mask		9538550	1					
ANR	9538626	BitAndExpression	~reg -> ro_mask & valid_mask		9538550	1		&			
ANR	9538627	PtrMemberAccess	~reg -> ro_mask		9538550	0					
ANR	9538628	Identifier	~reg		9538550	0					
ANR	9538629	Identifier	ro_mask		9538550	1					
ANR	9538630	Identifier	valid_mask		9538550	1					
ANR	9538631	ExpressionStatement	"cfg_entry -> data = XEN_PT_MERGE_VALUE ( * val , cfg_entry -> data , writable_mask )"	33:4:681:755	9538550	6	True				
ANR	9538632	AssignmentExpression	"cfg_entry -> data = XEN_PT_MERGE_VALUE ( * val , cfg_entry -> data , writable_mask )"		9538550	0		=			
ANR	9538633	PtrMemberAccess	cfg_entry -> data		9538550	0					
ANR	9538634	Identifier	cfg_entry		9538550	0					
ANR	9538635	Identifier	data		9538550	1					
ANR	9538636	CallExpression	"XEN_PT_MERGE_VALUE ( * val , cfg_entry -> data , writable_mask )"		9538550	1					
ANR	9538637	Callee	XEN_PT_MERGE_VALUE		9538550	0					
ANR	9538638	Identifier	XEN_PT_MERGE_VALUE		9538550	0					
ANR	9538639	ArgumentList	* val		9538550	1					
ANR	9538640	Argument	* val		9538550	0					
ANR	9538641	UnaryOperationExpression	* val		9538550	0					
ANR	9538642	UnaryOperator	*		9538550	0					
ANR	9538643	Identifier	val		9538550	1					
ANR	9538644	Argument	cfg_entry -> data		9538550	1					
ANR	9538645	PtrMemberAccess	cfg_entry -> data		9538550	0					
ANR	9538646	Identifier	cfg_entry		9538550	0					
ANR	9538647	Identifier	data		9538550	1					
ANR	9538648	Argument	writable_mask		9538550	2					
ANR	9538649	Identifier	writable_mask		9538550	0					
ANR	9538650	ExpressionStatement	msi -> flags |= cfg_entry -> data & ~PCI_MSI_FLAGS_ENABLE	35:4:762:815	9538550	7	True				
ANR	9538651	AssignmentExpression	msi -> flags |= cfg_entry -> data & ~PCI_MSI_FLAGS_ENABLE		9538550	0		|=			
ANR	9538652	PtrMemberAccess	msi -> flags		9538550	0					
ANR	9538653	Identifier	msi		9538550	0					
ANR	9538654	Identifier	flags		9538550	1					
ANR	9538655	BitAndExpression	cfg_entry -> data & ~PCI_MSI_FLAGS_ENABLE		9538550	1		&			
ANR	9538656	PtrMemberAccess	cfg_entry -> data		9538550	0					
ANR	9538657	Identifier	cfg_entry		9538550	0					
ANR	9538658	Identifier	data		9538550	1					
ANR	9538659	Identifier	~PCI_MSI_FLAGS_ENABLE		9538550	1					
ANR	9538660	ExpressionStatement	"* val = XEN_PT_MERGE_VALUE ( * val , dev_value , throughable_mask )"	41:4:883:943	9538550	8	True				
ANR	9538661	AssignmentExpression	"* val = XEN_PT_MERGE_VALUE ( * val , dev_value , throughable_mask )"		9538550	0		=			
ANR	9538662	UnaryOperationExpression	* val		9538550	0					
ANR	9538663	UnaryOperator	*		9538550	0					
ANR	9538664	Identifier	val		9538550	1					
ANR	9538665	CallExpression	"XEN_PT_MERGE_VALUE ( * val , dev_value , throughable_mask )"		9538550	1					
ANR	9538666	Callee	XEN_PT_MERGE_VALUE		9538550	0					
ANR	9538667	Identifier	XEN_PT_MERGE_VALUE		9538550	0					
ANR	9538668	ArgumentList	* val		9538550	1					
ANR	9538669	Argument	* val		9538550	0					
ANR	9538670	UnaryOperationExpression	* val		9538550	0					
ANR	9538671	UnaryOperator	*		9538550	0					
ANR	9538672	Identifier	val		9538550	1					
ANR	9538673	Argument	dev_value		9538550	1					
ANR	9538674	Identifier	dev_value		9538550	0					
ANR	9538675	Argument	throughable_mask		9538550	2					
ANR	9538676	Identifier	throughable_mask		9538550	0					
ANR	9538677	IfStatement	if ( * val & PCI_MSI_FLAGS_ENABLE )		9538550	9					
ANR	9538678	Condition	* val & PCI_MSI_FLAGS_ENABLE	47:8:978:1004	9538550	0	True				
ANR	9538679	BitAndExpression	* val & PCI_MSI_FLAGS_ENABLE		9538550	0		&			
ANR	9538680	UnaryOperationExpression	* val		9538550	0					
ANR	9538681	UnaryOperator	*		9538550	0					
ANR	9538682	Identifier	val		9538550	1					
ANR	9538683	Identifier	PCI_MSI_FLAGS_ENABLE		9538550	1					
ANR	9538684	CompoundStatement		41:37:791:791	9538550	1					
ANR	9538685	IfStatement	if ( ! msi -> initialized )		9538550	0					
ANR	9538686	Condition	! msi -> initialized	51:12:1071:1087	9538550	0	True				
ANR	9538687	UnaryOperationExpression	! msi -> initialized		9538550	0					
ANR	9538688	UnaryOperator	!		9538550	0					
ANR	9538689	PtrMemberAccess	msi -> initialized		9538550	1					
ANR	9538690	Identifier	msi		9538550	0					
ANR	9538691	Identifier	initialized		9538550	1					
ANR	9538692	CompoundStatement		45:31:874:874	9538550	1					
ANR	9538693	ExpressionStatement	"XEN_PT_LOG ( & s -> dev , ""setup MSI (register: %x).\\n"" , * val )"	55:12:1142:1198	9538550	0	True				
ANR	9538694	CallExpression	"XEN_PT_LOG ( & s -> dev , ""setup MSI (register: %x).\\n"" , * val )"		9538550	0					
ANR	9538695	Callee	XEN_PT_LOG		9538550	0					
ANR	9538696	Identifier	XEN_PT_LOG		9538550	0					
ANR	9538697	ArgumentList	& s -> dev		9538550	1					
ANR	9538698	Argument	& s -> dev		9538550	0					
ANR	9538699	UnaryOperationExpression	& s -> dev		9538550	0					
ANR	9538700	UnaryOperator	&		9538550	0					
ANR	9538701	PtrMemberAccess	s -> dev		9538550	1					
ANR	9538702	Identifier	s		9538550	0					
ANR	9538703	Identifier	dev		9538550	1					
ANR	9538704	Argument	"""setup MSI (register: %x).\\n"""		9538550	1					
ANR	9538705	PrimaryExpression	"""setup MSI (register: %x).\\n"""		9538550	0					
ANR	9538706	Argument	* val		9538550	2					
ANR	9538707	UnaryOperationExpression	* val		9538550	0					
ANR	9538708	UnaryOperator	*		9538550	0					
ANR	9538709	Identifier	val		9538550	1					
ANR	9538710	IfStatement	if ( xen_pt_msi_setup ( s ) )		9538550	1					
ANR	9538711	Condition	xen_pt_msi_setup ( s )	57:16:1217:1235	9538550	0	True				
ANR	9538712	CallExpression	xen_pt_msi_setup ( s )		9538550	0					
ANR	9538713	Callee	xen_pt_msi_setup		9538550	0					
ANR	9538714	Identifier	xen_pt_msi_setup		9538550	0					
ANR	9538715	ArgumentList	s		9538550	1					
ANR	9538716	Argument	s		9538550	0					
ANR	9538717	Identifier	s		9538550	0					
ANR	9538718	CompoundStatement		51:37:1022:1022	9538550	1					
ANR	9538719	ExpressionStatement	* val &= ~PCI_MSI_FLAGS_ENABLE	69:16:1535:1564	9538550	0	True				
ANR	9538720	AssignmentExpression	* val &= ~PCI_MSI_FLAGS_ENABLE		9538550	0		&=			
ANR	9538721	UnaryOperationExpression	* val		9538550	0					
ANR	9538722	UnaryOperator	*		9538550	0					
ANR	9538723	Identifier	val		9538550	1					
ANR	9538724	Identifier	~PCI_MSI_FLAGS_ENABLE		9538550	1					
ANR	9538725	ExpressionStatement	"XEN_PT_WARN ( & s -> dev , ""Can not map MSI (register: %x)!\\n"" , * val )"	71:16:1583:1646	9538550	1	True				
ANR	9538726	CallExpression	"XEN_PT_WARN ( & s -> dev , ""Can not map MSI (register: %x)!\\n"" , * val )"		9538550	0					
ANR	9538727	Callee	XEN_PT_WARN		9538550	0					
ANR	9538728	Identifier	XEN_PT_WARN		9538550	0					
ANR	9538729	ArgumentList	& s -> dev		9538550	1					
ANR	9538730	Argument	& s -> dev		9538550	0					
ANR	9538731	UnaryOperationExpression	& s -> dev		9538550	0					
ANR	9538732	UnaryOperator	&		9538550	0					
ANR	9538733	PtrMemberAccess	s -> dev		9538550	1					
ANR	9538734	Identifier	s		9538550	0					
ANR	9538735	Identifier	dev		9538550	1					
ANR	9538736	Argument	"""Can not map MSI (register: %x)!\\n"""		9538550	1					
ANR	9538737	PrimaryExpression	"""Can not map MSI (register: %x)!\\n"""		9538550	0					
ANR	9538738	Argument	* val		9538550	2					
ANR	9538739	UnaryOperationExpression	* val		9538550	0					
ANR	9538740	UnaryOperator	*		9538550	0					
ANR	9538741	Identifier	val		9538550	1					
ANR	9538742	ReturnStatement	return 0 ;	73:16:1665:1673	9538550	2	True				
ANR	9538743	PrimaryExpression	0		9538550	0					
ANR	9538744	IfStatement	if ( xen_pt_msi_update ( s ) )		9538550	2					
ANR	9538745	Condition	xen_pt_msi_update ( s )	77:16:1707:1726	9538550	0	True				
ANR	9538746	CallExpression	xen_pt_msi_update ( s )		9538550	0					
ANR	9538747	Callee	xen_pt_msi_update		9538550	0					
ANR	9538748	Identifier	xen_pt_msi_update		9538550	0					
ANR	9538749	ArgumentList	s		9538550	1					
ANR	9538750	Argument	s		9538550	0					
ANR	9538751	Identifier	s		9538550	0					
ANR	9538752	CompoundStatement		71:38:1513:1513	9538550	1					
ANR	9538753	ExpressionStatement	* val &= ~PCI_MSI_FLAGS_ENABLE	79:16:1748:1777	9538550	0	True				
ANR	9538754	AssignmentExpression	* val &= ~PCI_MSI_FLAGS_ENABLE		9538550	0		&=			
ANR	9538755	UnaryOperationExpression	* val		9538550	0					
ANR	9538756	UnaryOperator	*		9538550	0					
ANR	9538757	Identifier	val		9538550	1					
ANR	9538758	Identifier	~PCI_MSI_FLAGS_ENABLE		9538550	1					
ANR	9538759	ExpressionStatement	"XEN_PT_WARN ( & s -> dev , ""Can not bind MSI (register: %x)!\\n"" , * val )"	81:16:1796:1860	9538550	1	True				
ANR	9538760	CallExpression	"XEN_PT_WARN ( & s -> dev , ""Can not bind MSI (register: %x)!\\n"" , * val )"		9538550	0					
ANR	9538761	Callee	XEN_PT_WARN		9538550	0					
ANR	9538762	Identifier	XEN_PT_WARN		9538550	0					
ANR	9538763	ArgumentList	& s -> dev		9538550	1					
ANR	9538764	Argument	& s -> dev		9538550	0					
ANR	9538765	UnaryOperationExpression	& s -> dev		9538550	0					
ANR	9538766	UnaryOperator	&		9538550	0					
ANR	9538767	PtrMemberAccess	s -> dev		9538550	1					
ANR	9538768	Identifier	s		9538550	0					
ANR	9538769	Identifier	dev		9538550	1					
ANR	9538770	Argument	"""Can not bind MSI (register: %x)!\\n"""		9538550	1					
ANR	9538771	PrimaryExpression	"""Can not bind MSI (register: %x)!\\n"""		9538550	0					
ANR	9538772	Argument	* val		9538550	2					
ANR	9538773	UnaryOperationExpression	* val		9538550	0					
ANR	9538774	UnaryOperator	*		9538550	0					
ANR	9538775	Identifier	val		9538550	1					
ANR	9538776	ReturnStatement	return 0 ;	83:16:1879:1887	9538550	2	True				
ANR	9538777	PrimaryExpression	0		9538550	0					
ANR	9538778	ExpressionStatement	msi -> initialized = true	87:12:1917:1940	9538550	3	True				
ANR	9538779	AssignmentExpression	msi -> initialized = true		9538550	0		=			
ANR	9538780	PtrMemberAccess	msi -> initialized		9538550	0					
ANR	9538781	Identifier	msi		9538550	0					
ANR	9538782	Identifier	initialized		9538550	1					
ANR	9538783	Identifier	true		9538550	1					
ANR	9538784	ExpressionStatement	msi -> mapped = true	89:12:1955:1973	9538550	4	True				
ANR	9538785	AssignmentExpression	msi -> mapped = true		9538550	0		=			
ANR	9538786	PtrMemberAccess	msi -> mapped		9538550	0					
ANR	9538787	Identifier	msi		9538550	0					
ANR	9538788	Identifier	mapped		9538550	1					
ANR	9538789	Identifier	true		9538550	1					
ANR	9538790	ExpressionStatement	msi -> flags |= PCI_MSI_FLAGS_ENABLE	93:8:1995:2029	9538550	1	True				
ANR	9538791	AssignmentExpression	msi -> flags |= PCI_MSI_FLAGS_ENABLE		9538550	0		|=			
ANR	9538792	PtrMemberAccess	msi -> flags		9538550	0					
ANR	9538793	Identifier	msi		9538550	0					
ANR	9538794	Identifier	flags		9538550	1					
ANR	9538795	Identifier	PCI_MSI_FLAGS_ENABLE		9538550	1					
ANR	9538796	ElseStatement	else		9538550	0					
ANR	9538797	IfStatement	if ( msi -> mapped )		9538550	0					
ANR	9538798	Condition	msi -> mapped	95:15:2047:2057	9538550	0	True				
ANR	9538799	PtrMemberAccess	msi -> mapped		9538550	0					
ANR	9538800	Identifier	msi		9538550	0					
ANR	9538801	Identifier	mapped		9538550	1					
ANR	9538802	CompoundStatement		89:28:1844:1844	9538550	1					
ANR	9538803	ExpressionStatement	xen_pt_msi_disable ( s )	97:8:2071:2092	9538550	0	True				
ANR	9538804	CallExpression	xen_pt_msi_disable ( s )		9538550	0					
ANR	9538805	Callee	xen_pt_msi_disable		9538550	0					
ANR	9538806	Identifier	xen_pt_msi_disable		9538550	0					
ANR	9538807	ArgumentList	s		9538550	1					
ANR	9538808	Argument	s		9538550	0					
ANR	9538809	Identifier	s		9538550	0					
ANR	9538810	ReturnStatement	return 0 ;	103:4:2108:2116	9538550	10	True				
ANR	9538811	PrimaryExpression	0		9538550	0					
ANR	9538812	ReturnType	static int		9538550	1					
ANR	9538813	Identifier	xen_pt_msgctrl_reg_write		9538550	2					
ANR	9538814	ParameterList	"XenPCIPassthroughState * s , XenPTReg * cfg_entry , uint16_t * val , uint16_t dev_value , uint16_t valid_mask"		9538550	3					
ANR	9538815	Parameter	XenPCIPassthroughState * s	1:36:36:60	9538550	0	True				
ANR	9538816	ParameterType	XenPCIPassthroughState *		9538550	0					
ANR	9538817	Identifier	s		9538550	1					
ANR	9538818	Parameter	XenPTReg * cfg_entry	3:36:100:118	9538550	1	True				
ANR	9538819	ParameterType	XenPTReg *		9538550	0					
ANR	9538820	Identifier	cfg_entry		9538550	1					
ANR	9538821	Parameter	uint16_t * val	3:57:121:133	9538550	2	True				
ANR	9538822	ParameterType	uint16_t *		9538550	0					
ANR	9538823	Identifier	val		9538550	1					
ANR	9538824	Parameter	uint16_t dev_value	5:36:173:190	9538550	3	True				
ANR	9538825	ParameterType	uint16_t		9538550	0					
ANR	9538826	Identifier	dev_value		9538550	1					
ANR	9538827	Parameter	uint16_t valid_mask	5:56:193:211	9538550	4	True				
ANR	9538828	ParameterType	uint16_t		9538550	0					
ANR	9538829	Identifier	valid_mask		9538550	1					
ANR	9538830	CFGEntryNode	ENTRY		9538550		True				
ANR	9538831	CFGExitNode	EXIT		9538550		True				
ANR	9538832	Symbol	PCI_MSI_FLAGS_ENABLE		9538550						
ANR	9538833	Symbol	* cfg_entry		9538550						
ANR	9538834	Symbol	msi		9538550						
ANR	9538835	Symbol	xen_pt_msi_update		9538550						
ANR	9538836	Symbol	cfg_entry -> data		9538550						
ANR	9538837	Symbol	msi -> initialized		9538550						
ANR	9538838	Symbol	valid_mask		9538550						
ANR	9538839	Symbol	cfg_entry -> reg		9538550						
ANR	9538840	Symbol	get_throughable_mask		9538550						
ANR	9538841	Symbol	writable_mask		9538550						
ANR	9538842	Symbol	& s -> dev		9538550						
ANR	9538843	Symbol	* val		9538550						
ANR	9538844	Symbol	~reg -> ro_mask		9538550						
ANR	9538845	Symbol	XEN_PT_MERGE_VALUE		9538550						
ANR	9538846	Symbol	s -> msi		9538550						
ANR	9538847	Symbol	msi -> mapped		9538550						
ANR	9538848	Symbol	reg		9538550						
ANR	9538849	Symbol	msi -> flags		9538550						
ANR	9538850	Symbol	val		9538550						
ANR	9538851	Symbol	PCI_MSI_FLAGS_QSIZE		9538550						
ANR	9538852	Symbol	* ~reg		9538550						
ANR	9538853	Symbol	cfg_entry		9538550						
ANR	9538854	Symbol	~reg		9538550						
ANR	9538855	Symbol	* msi		9538550						
ANR	9538856	Symbol	throughable_mask		9538550						
ANR	9538857	Symbol	s		9538550						
ANR	9538858	Symbol	xen_pt_msi_setup		9538550						
ANR	9538859	Symbol	~PCI_MSI_FLAGS_ENABLE		9538550						
ANR	9538860	Symbol	true		9538550						
ANR	9538861	Symbol	dev_value		9538550						
ANR	9538862	Symbol	* s		9538550						
ANR	9538863	Symbol	reg -> emu_mask		9538550						
ANR	9538864	Symbol	* reg		9538550						
