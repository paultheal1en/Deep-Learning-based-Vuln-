command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1161303	File	/home/p4ultr4n/workplace/ReVeal/raw_code/build_filter_01_0.c								
ANR	1161304	Function	build_filter	1:0:0:5894							
ANR	1161305	FunctionDef	"build_filter (ResampleContext * c , void * filter , double factor , int tap_count , int alloc , int phase_count , int scale , int filter_type , double kaiser_beta)"		1161304	0					
ANR	1161306	CompoundStatement		3:60:188:5894	1161304	0					
ANR	1161307	IdentifierDeclStatement	"int ph , i ;"	5:4:195:204	1161304	0	True				
ANR	1161308	IdentifierDecl	ph		1161304	0					
ANR	1161309	IdentifierDeclType	int		1161304	0					
ANR	1161310	Identifier	ph		1161304	1					
ANR	1161311	IdentifierDecl	i		1161304	1					
ANR	1161312	IdentifierDeclType	int		1161304	0					
ANR	1161313	Identifier	i		1161304	1					
ANR	1161314	IdentifierDeclStatement	"double x , y , w , t ;"	7:4:211:228	1161304	1	True				
ANR	1161315	IdentifierDecl	x		1161304	0					
ANR	1161316	IdentifierDeclType	double		1161304	0					
ANR	1161317	Identifier	x		1161304	1					
ANR	1161318	IdentifierDecl	y		1161304	1					
ANR	1161319	IdentifierDeclType	double		1161304	0					
ANR	1161320	Identifier	y		1161304	1					
ANR	1161321	IdentifierDecl	w		1161304	2					
ANR	1161322	IdentifierDeclType	double		1161304	0					
ANR	1161323	Identifier	w		1161304	1					
ANR	1161324	IdentifierDecl	t		1161304	3					
ANR	1161325	IdentifierDeclType	double		1161304	0					
ANR	1161326	Identifier	t		1161304	1					
ANR	1161327	IdentifierDeclStatement	"double * tab = av_malloc_array ( tap_count + 1 , sizeof ( * tab ) ) ;"	9:4:235:292	1161304	2	True				
ANR	1161328	IdentifierDecl	"* tab = av_malloc_array ( tap_count + 1 , sizeof ( * tab ) )"		1161304	0					
ANR	1161329	IdentifierDeclType	double *		1161304	0					
ANR	1161330	Identifier	tab		1161304	1					
ANR	1161331	AssignmentExpression	"* tab = av_malloc_array ( tap_count + 1 , sizeof ( * tab ) )"		1161304	2		=			
ANR	1161332	Identifier	tab		1161304	0					
ANR	1161333	CallExpression	"av_malloc_array ( tap_count + 1 , sizeof ( * tab ) )"		1161304	1					
ANR	1161334	Callee	av_malloc_array		1161304	0					
ANR	1161335	Identifier	av_malloc_array		1161304	0					
ANR	1161336	ArgumentList	tap_count + 1		1161304	1					
ANR	1161337	Argument	tap_count + 1		1161304	0					
ANR	1161338	AdditiveExpression	tap_count + 1		1161304	0		+			
ANR	1161339	Identifier	tap_count		1161304	0					
ANR	1161340	PrimaryExpression	1		1161304	1					
ANR	1161341	Argument	sizeof ( * tab )		1161304	1					
ANR	1161342	SizeofExpression	sizeof ( * tab )		1161304	0					
ANR	1161343	Sizeof	sizeof		1161304	0					
ANR	1161344	UnaryOperationExpression	* tab		1161304	1					
ANR	1161345	UnaryOperator	*		1161304	0					
ANR	1161346	Identifier	tab		1161304	1					
ANR	1161347	IdentifierDeclStatement	const int center = ( tap_count - 1 ) / 2 ;	11:4:299:332	1161304	3	True				
ANR	1161348	IdentifierDecl	center = ( tap_count - 1 ) / 2		1161304	0					
ANR	1161349	IdentifierDeclType	const int		1161304	0					
ANR	1161350	Identifier	center		1161304	1					
ANR	1161351	AssignmentExpression	center = ( tap_count - 1 ) / 2		1161304	2		=			
ANR	1161352	Identifier	center		1161304	0					
ANR	1161353	MultiplicativeExpression	( tap_count - 1 ) / 2		1161304	1		/			
ANR	1161354	AdditiveExpression	tap_count - 1		1161304	0		-			
ANR	1161355	Identifier	tap_count		1161304	0					
ANR	1161356	PrimaryExpression	1		1161304	1					
ANR	1161357	PrimaryExpression	2		1161304	1					
ANR	1161358	IfStatement	if ( ! tab )		1161304	4					
ANR	1161359	Condition	! tab	15:8:345:348	1161304	0	True				
ANR	1161360	UnaryOperationExpression	! tab		1161304	0					
ANR	1161361	UnaryOperator	!		1161304	0					
ANR	1161362	Identifier	tab		1161304	1					
ANR	1161363	ReturnStatement	return AVERROR ( ENOMEM ) ;	17:8:360:382	1161304	1	True				
ANR	1161364	CallExpression	AVERROR ( ENOMEM )		1161304	0					
ANR	1161365	Callee	AVERROR		1161304	0					
ANR	1161366	Identifier	AVERROR		1161304	0					
ANR	1161367	ArgumentList	ENOMEM		1161304	1					
ANR	1161368	Argument	ENOMEM		1161304	0					
ANR	1161369	Identifier	ENOMEM		1161304	0					
ANR	1161370	IfStatement	if ( factor > 1.0 )		1161304	5					
ANR	1161371	Condition	factor > 1.0	23:8:457:468	1161304	0	True				
ANR	1161372	RelationalExpression	factor > 1.0		1161304	0		>			
ANR	1161373	Identifier	factor		1161304	0					
ANR	1161374	PrimaryExpression	1.0		1161304	1					
ANR	1161375	ExpressionStatement	factor = 1.0	25:8:480:492	1161304	1	True				
ANR	1161376	AssignmentExpression	factor = 1.0		1161304	0		=			
ANR	1161377	Identifier	factor		1161304	0					
ANR	1161378	PrimaryExpression	1.0		1161304	1					
ANR	1161379	ExpressionStatement	av_assert0 ( phase_count == 1 || phase_count % 2 == 0 )	29:4:501:553	1161304	6	True				
ANR	1161380	CallExpression	av_assert0 ( phase_count == 1 || phase_count % 2 == 0 )		1161304	0					
ANR	1161381	Callee	av_assert0		1161304	0					
ANR	1161382	Identifier	av_assert0		1161304	0					
ANR	1161383	ArgumentList	phase_count == 1 || phase_count % 2 == 0		1161304	1					
ANR	1161384	Argument	phase_count == 1 || phase_count % 2 == 0		1161304	0					
ANR	1161385	OrExpression	phase_count == 1 || phase_count % 2 == 0		1161304	0		||			
ANR	1161386	EqualityExpression	phase_count == 1		1161304	0		==			
ANR	1161387	Identifier	phase_count		1161304	0					
ANR	1161388	PrimaryExpression	1		1161304	1					
ANR	1161389	EqualityExpression	phase_count % 2 == 0		1161304	1		==			
ANR	1161390	MultiplicativeExpression	phase_count % 2		1161304	0		%			
ANR	1161391	Identifier	phase_count		1161304	0					
ANR	1161392	PrimaryExpression	2		1161304	1					
ANR	1161393	PrimaryExpression	0		1161304	1					
ANR	1161394	ForStatement	for ( ph = 0 ; ph <= phase_count / 2 ; ph ++ )		1161304	7					
ANR	1161395	ForInit	ph = 0 ;	31:8:564:570	1161304	0	True				
ANR	1161396	AssignmentExpression	ph = 0		1161304	0		=			
ANR	1161397	Identifier	ph		1161304	0					
ANR	1161398	PrimaryExpression	0		1161304	1					
ANR	1161399	Condition	ph <= phase_count / 2	31:16:572:592	1161304	1	True				
ANR	1161400	RelationalExpression	ph <= phase_count / 2		1161304	0		<=			
ANR	1161401	Identifier	ph		1161304	0					
ANR	1161402	MultiplicativeExpression	phase_count / 2		1161304	1		/			
ANR	1161403	Identifier	phase_count		1161304	0					
ANR	1161404	PrimaryExpression	2		1161304	1					
ANR	1161405	PostIncDecOperationExpression	ph ++	31:39:595:598	1161304	2	True				
ANR	1161406	Identifier	ph		1161304	0					
ANR	1161407	IncDec	++		1161304	1					
ANR	1161408	CompoundStatement		31:8:423:438	1161304	3					
ANR	1161409	IdentifierDeclStatement	double norm = 0 ;	33:8:612:627	1161304	0	True				
ANR	1161410	IdentifierDecl	norm = 0		1161304	0					
ANR	1161411	IdentifierDeclType	double		1161304	0					
ANR	1161412	Identifier	norm		1161304	1					
ANR	1161413	AssignmentExpression	norm = 0		1161304	2		=			
ANR	1161414	Identifier	norm		1161304	0					
ANR	1161415	PrimaryExpression	0		1161304	1					
ANR	1161416	ForStatement	for ( i = 0 ; i <= tap_count ; i ++ )		1161304	1					
ANR	1161417	ForInit	i = 0 ;	35:12:642:645	1161304	0	True				
ANR	1161418	AssignmentExpression	i = 0		1161304	0		=			
ANR	1161419	Identifier	i		1161304	0					
ANR	1161420	PrimaryExpression	0		1161304	1					
ANR	1161421	Condition	i <= tap_count	35:16:646:657	1161304	1	True				
ANR	1161422	RelationalExpression	i <= tap_count		1161304	0		<=			
ANR	1161423	Identifier	i		1161304	0					
ANR	1161424	Identifier	tap_count		1161304	1					
ANR	1161425	PostIncDecOperationExpression	i ++	35:29:659:661	1161304	2	True				
ANR	1161426	Identifier	i		1161304	0					
ANR	1161427	IncDec	++		1161304	1					
ANR	1161428	CompoundStatement		33:34:475:475	1161304	3					
ANR	1161429	ExpressionStatement	x = M_PI * ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor	37:12:679:748	1161304	0	True				
ANR	1161430	AssignmentExpression	x = M_PI * ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1161304	0		=			
ANR	1161431	Identifier	x		1161304	0					
ANR	1161432	MultiplicativeExpression	M_PI * ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1161304	1		*			
ANR	1161433	Identifier	M_PI		1161304	0					
ANR	1161434	MultiplicativeExpression	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1161304	1		*			
ANR	1161435	AdditiveExpression	( double ) ( i - center ) - ( double ) ph / phase_count		1161304	0		-			
ANR	1161436	CastExpression	( double ) ( i - center )		1161304	0					
ANR	1161437	CastTarget	double		1161304	0					
ANR	1161438	AdditiveExpression	i - center		1161304	1		-			
ANR	1161439	Identifier	i		1161304	0					
ANR	1161440	Identifier	center		1161304	1					
ANR	1161441	MultiplicativeExpression	( double ) ph / phase_count		1161304	1		/			
ANR	1161442	CastExpression	( double ) ph		1161304	0					
ANR	1161443	CastTarget	double		1161304	0					
ANR	1161444	Identifier	ph		1161304	1					
ANR	1161445	Identifier	phase_count		1161304	1					
ANR	1161446	Identifier	factor		1161304	1					
ANR	1161447	IfStatement	if ( x == 0 )		1161304	1					
ANR	1161448	Condition	x == 0	39:16:767:772	1161304	0	True				
ANR	1161449	EqualityExpression	x == 0		1161304	0		==			
ANR	1161450	Identifier	x		1161304	0					
ANR	1161451	PrimaryExpression	0		1161304	1					
ANR	1161452	ExpressionStatement	y = 1.0	39:24:775:782	1161304	1	True				
ANR	1161453	AssignmentExpression	y = 1.0		1161304	0		=			
ANR	1161454	Identifier	y		1161304	0					
ANR	1161455	PrimaryExpression	1.0		1161304	1					
ANR	1161456	ElseStatement	else		1161304	0					
ANR	1161457	ExpressionStatement	y = sin ( x ) / x	41:24:809:823	1161304	0	True				
ANR	1161458	AssignmentExpression	y = sin ( x ) / x		1161304	0		=			
ANR	1161459	Identifier	y		1161304	0					
ANR	1161460	MultiplicativeExpression	sin ( x ) / x		1161304	1		/			
ANR	1161461	CallExpression	sin ( x )		1161304	0					
ANR	1161462	Callee	sin		1161304	0					
ANR	1161463	Identifier	sin		1161304	0					
ANR	1161464	ArgumentList	x		1161304	1					
ANR	1161465	Argument	x		1161304	0					
ANR	1161466	Identifier	x		1161304	0					
ANR	1161467	Identifier	x		1161304	1					
ANR	1161468	SwitchStatement	switch ( filter_type )		1161304	2					
ANR	1161469	Condition	filter_type	43:19:845:855	1161304	0	True				
ANR	1161470	Identifier	filter_type		1161304	0					
ANR	1161471	CompoundStatement		41:31:668:668	1161304	1					
ANR	1161472	Label	case SWR_FILTER_TYPE_CUBIC :	45:12:872:898	1161304	0	True				
ANR	1161473	Identifier	SWR_FILTER_TYPE_CUBIC		1161304	0					
ANR	1161474	CompoundStatement		45:16:729:748	1161304	1					
ANR	1161475	IdentifierDeclStatement	const float d = - 0.5 ;	47:16:918:937	1161304	0	True				
ANR	1161476	IdentifierDecl	d = - 0.5		1161304	0					
ANR	1161477	IdentifierDeclType	const float		1161304	0					
ANR	1161478	Identifier	d		1161304	1					
ANR	1161479	AssignmentExpression	d = - 0.5		1161304	2		=			
ANR	1161480	Identifier	d		1161304	0					
ANR	1161481	UnaryOperationExpression	- 0.5		1161304	1					
ANR	1161482	UnaryOperator	-		1161304	0					
ANR	1161483	PrimaryExpression	0.5		1161304	1					
ANR	1161484	ExpressionStatement	x = fabs ( ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor )	49:16:988:1056	1161304	1	True				
ANR	1161485	AssignmentExpression	x = fabs ( ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor )		1161304	0		=			
ANR	1161486	Identifier	x		1161304	0					
ANR	1161487	CallExpression	fabs ( ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor )		1161304	1					
ANR	1161488	Callee	fabs		1161304	0					
ANR	1161489	Identifier	fabs		1161304	0					
ANR	1161490	ArgumentList	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1161304	1					
ANR	1161491	Argument	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1161304	0					
ANR	1161492	MultiplicativeExpression	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1161304	0		*			
ANR	1161493	AdditiveExpression	( double ) ( i - center ) - ( double ) ph / phase_count		1161304	0		-			
ANR	1161494	CastExpression	( double ) ( i - center )		1161304	0					
ANR	1161495	CastTarget	double		1161304	0					
ANR	1161496	AdditiveExpression	i - center		1161304	1		-			
ANR	1161497	Identifier	i		1161304	0					
ANR	1161498	Identifier	center		1161304	1					
ANR	1161499	MultiplicativeExpression	( double ) ph / phase_count		1161304	1		/			
ANR	1161500	CastExpression	( double ) ph		1161304	0					
ANR	1161501	CastTarget	double		1161304	0					
ANR	1161502	Identifier	ph		1161304	1					
ANR	1161503	Identifier	phase_count		1161304	1					
ANR	1161504	Identifier	factor		1161304	1					
ANR	1161505	IfStatement	if ( x < 1.0 )		1161304	2					
ANR	1161506	Condition	x < 1.0	51:19:1078:1082	1161304	0	True				
ANR	1161507	RelationalExpression	x < 1.0		1161304	0		<			
ANR	1161508	Identifier	x		1161304	0					
ANR	1161509	PrimaryExpression	1.0		1161304	1					
ANR	1161510	ExpressionStatement	y = 1 - 3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )	51:26:1085:1138	1161304	1	True				
ANR	1161511	AssignmentExpression	y = 1 - 3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )		1161304	0		=			
ANR	1161512	Identifier	y		1161304	0					
ANR	1161513	AdditiveExpression	1 - 3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )		1161304	1		-			
ANR	1161514	PrimaryExpression	1		1161304	0					
ANR	1161515	AdditiveExpression	3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )		1161304	1		+			
ANR	1161516	MultiplicativeExpression	3 * x * x		1161304	0		*			
ANR	1161517	PrimaryExpression	3		1161304	0					
ANR	1161518	MultiplicativeExpression	x * x		1161304	1		*			
ANR	1161519	Identifier	x		1161304	0					
ANR	1161520	Identifier	x		1161304	1					
ANR	1161521	AdditiveExpression	2 * x * x * x + d * ( - x * x + x * x * x )		1161304	1		+			
ANR	1161522	MultiplicativeExpression	2 * x * x * x		1161304	0		*			
ANR	1161523	PrimaryExpression	2		1161304	0					
ANR	1161524	MultiplicativeExpression	x * x * x		1161304	1		*			
ANR	1161525	Identifier	x		1161304	0					
ANR	1161526	MultiplicativeExpression	x * x		1161304	1		*			
ANR	1161527	Identifier	x		1161304	0					
ANR	1161528	Identifier	x		1161304	1					
ANR	1161529	MultiplicativeExpression	d * ( - x * x + x * x * x )		1161304	1		*			
ANR	1161530	Identifier	d		1161304	0					
ANR	1161531	AdditiveExpression	- x * x + x * x * x		1161304	1		+			
ANR	1161532	MultiplicativeExpression	- x * x		1161304	0		*			
ANR	1161533	UnaryOperationExpression	- x		1161304	0					
ANR	1161534	UnaryOperator	-		1161304	0					
ANR	1161535	Identifier	x		1161304	1					
ANR	1161536	Identifier	x		1161304	1					
ANR	1161537	MultiplicativeExpression	x * x * x		1161304	1		*			
ANR	1161538	Identifier	x		1161304	0					
ANR	1161539	MultiplicativeExpression	x * x		1161304	1		*			
ANR	1161540	Identifier	x		1161304	0					
ANR	1161541	Identifier	x		1161304	1					
ANR	1161542	ElseStatement	else		1161304	0					
ANR	1161543	ExpressionStatement	y = d * ( - 4 + 8 * x - 5 * x * x + x * x * x )	53:26:1167:1220	1161304	0	True				
ANR	1161544	AssignmentExpression	y = d * ( - 4 + 8 * x - 5 * x * x + x * x * x )		1161304	0		=			
ANR	1161545	Identifier	y		1161304	0					
ANR	1161546	MultiplicativeExpression	d * ( - 4 + 8 * x - 5 * x * x + x * x * x )		1161304	1		*			
ANR	1161547	Identifier	d		1161304	0					
ANR	1161548	AdditiveExpression	- 4 + 8 * x - 5 * x * x + x * x * x		1161304	1		+			
ANR	1161549	UnaryOperationExpression	- 4		1161304	0					
ANR	1161550	UnaryOperator	-		1161304	0					
ANR	1161551	PrimaryExpression	4		1161304	1					
ANR	1161552	AdditiveExpression	8 * x - 5 * x * x + x * x * x		1161304	1		-			
ANR	1161553	MultiplicativeExpression	8 * x		1161304	0		*			
ANR	1161554	PrimaryExpression	8		1161304	0					
ANR	1161555	Identifier	x		1161304	1					
ANR	1161556	AdditiveExpression	5 * x * x + x * x * x		1161304	1		+			
ANR	1161557	MultiplicativeExpression	5 * x * x		1161304	0		*			
ANR	1161558	PrimaryExpression	5		1161304	0					
ANR	1161559	MultiplicativeExpression	x * x		1161304	1		*			
ANR	1161560	Identifier	x		1161304	0					
ANR	1161561	Identifier	x		1161304	1					
ANR	1161562	MultiplicativeExpression	x * x * x		1161304	1		*			
ANR	1161563	Identifier	x		1161304	0					
ANR	1161564	MultiplicativeExpression	x * x		1161304	1		*			
ANR	1161565	Identifier	x		1161304	0					
ANR	1161566	Identifier	x		1161304	1					
ANR	1161567	BreakStatement	break ;	55:16:1239:1244	1161304	3	True				
ANR	1161568	Label	case SWR_FILTER_TYPE_BLACKMAN_NUTTALL :	57:12:1260:1297	1161304	2	True				
ANR	1161569	Identifier	SWR_FILTER_TYPE_BLACKMAN_NUTTALL		1161304	0					
ANR	1161570	ExpressionStatement	w = 2.0 * x / ( factor * tap_count ) + M_PI	59:16:1316:1353	1161304	3	True				
ANR	1161571	AssignmentExpression	w = 2.0 * x / ( factor * tap_count ) + M_PI		1161304	0		=			
ANR	1161572	Identifier	w		1161304	0					
ANR	1161573	AdditiveExpression	2.0 * x / ( factor * tap_count ) + M_PI		1161304	1		+			
ANR	1161574	MultiplicativeExpression	2.0 * x / ( factor * tap_count )		1161304	0		*			
ANR	1161575	PrimaryExpression	2.0		1161304	0					
ANR	1161576	MultiplicativeExpression	x / ( factor * tap_count )		1161304	1		/			
ANR	1161577	Identifier	x		1161304	0					
ANR	1161578	MultiplicativeExpression	factor * tap_count		1161304	1		*			
ANR	1161579	Identifier	factor		1161304	0					
ANR	1161580	Identifier	tap_count		1161304	1					
ANR	1161581	Identifier	M_PI		1161304	1					
ANR	1161582	ExpressionStatement	t = cos ( w )	61:16:1372:1382	1161304	4	True				
ANR	1161583	AssignmentExpression	t = cos ( w )		1161304	0		=			
ANR	1161584	Identifier	t		1161304	0					
ANR	1161585	CallExpression	cos ( w )		1161304	1					
ANR	1161586	Callee	cos		1161304	0					
ANR	1161587	Identifier	cos		1161304	0					
ANR	1161588	ArgumentList	w		1161304	1					
ANR	1161589	Argument	w		1161304	0					
ANR	1161590	Identifier	w		1161304	0					
ANR	1161591	ExpressionStatement	y *= 0.3635819 - 0.4891775 * t + 0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )	63:16:1401:1485	1161304	5	True				
ANR	1161592	AssignmentExpression	y *= 0.3635819 - 0.4891775 * t + 0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )		1161304	0		*=			
ANR	1161593	Identifier	y		1161304	0					
ANR	1161594	AdditiveExpression	0.3635819 - 0.4891775 * t + 0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )		1161304	1		-			
ANR	1161595	PrimaryExpression	0.3635819		1161304	0					
ANR	1161596	AdditiveExpression	0.4891775 * t + 0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )		1161304	1		+			
ANR	1161597	MultiplicativeExpression	0.4891775 * t		1161304	0		*			
ANR	1161598	PrimaryExpression	0.4891775		1161304	0					
ANR	1161599	Identifier	t		1161304	1					
ANR	1161600	AdditiveExpression	0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )		1161304	1		-			
ANR	1161601	MultiplicativeExpression	0.1365995 * ( 2 * t * t - 1 )		1161304	0		*			
ANR	1161602	PrimaryExpression	0.1365995		1161304	0					
ANR	1161603	AdditiveExpression	2 * t * t - 1		1161304	1		-			
ANR	1161604	MultiplicativeExpression	2 * t * t		1161304	0		*			
ANR	1161605	PrimaryExpression	2		1161304	0					
ANR	1161606	MultiplicativeExpression	t * t		1161304	1		*			
ANR	1161607	Identifier	t		1161304	0					
ANR	1161608	Identifier	t		1161304	1					
ANR	1161609	PrimaryExpression	1		1161304	1					
ANR	1161610	MultiplicativeExpression	0.0106411 * ( 4 * t * t * t - 3 * t )		1161304	1		*			
ANR	1161611	PrimaryExpression	0.0106411		1161304	0					
ANR	1161612	AdditiveExpression	4 * t * t * t - 3 * t		1161304	1		-			
ANR	1161613	MultiplicativeExpression	4 * t * t * t		1161304	0		*			
ANR	1161614	PrimaryExpression	4		1161304	0					
ANR	1161615	MultiplicativeExpression	t * t * t		1161304	1		*			
ANR	1161616	Identifier	t		1161304	0					
ANR	1161617	MultiplicativeExpression	t * t		1161304	1		*			
ANR	1161618	Identifier	t		1161304	0					
ANR	1161619	Identifier	t		1161304	1					
ANR	1161620	MultiplicativeExpression	3 * t		1161304	1		*			
ANR	1161621	PrimaryExpression	3		1161304	0					
ANR	1161622	Identifier	t		1161304	1					
ANR	1161623	BreakStatement	break ;	65:16:1504:1509	1161304	6	True				
ANR	1161624	Label	case SWR_FILTER_TYPE_KAISER :	67:12:1524:1551	1161304	7	True				
ANR	1161625	Identifier	SWR_FILTER_TYPE_KAISER		1161304	0					
ANR	1161626	ExpressionStatement	w = 2.0 * x / ( factor * tap_count * M_PI )	69:16:1570:1605	1161304	8	True				
ANR	1161627	AssignmentExpression	w = 2.0 * x / ( factor * tap_count * M_PI )		1161304	0		=			
ANR	1161628	Identifier	w		1161304	0					
ANR	1161629	MultiplicativeExpression	2.0 * x / ( factor * tap_count * M_PI )		1161304	1		*			
ANR	1161630	PrimaryExpression	2.0		1161304	0					
ANR	1161631	MultiplicativeExpression	x / ( factor * tap_count * M_PI )		1161304	1		/			
ANR	1161632	Identifier	x		1161304	0					
ANR	1161633	MultiplicativeExpression	factor * tap_count * M_PI		1161304	1		*			
ANR	1161634	Identifier	factor		1161304	0					
ANR	1161635	MultiplicativeExpression	tap_count * M_PI		1161304	1		*			
ANR	1161636	Identifier	tap_count		1161304	0					
ANR	1161637	Identifier	M_PI		1161304	1					
ANR	1161638	ExpressionStatement	"y *= bessel ( kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) ) )"	71:16:1624:1670	1161304	9	True				
ANR	1161639	AssignmentExpression	"y *= bessel ( kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) ) )"		1161304	0		*=			
ANR	1161640	Identifier	y		1161304	0					
ANR	1161641	CallExpression	"bessel ( kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) ) )"		1161304	1					
ANR	1161642	Callee	bessel		1161304	0					
ANR	1161643	Identifier	bessel		1161304	0					
ANR	1161644	ArgumentList	"kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1161304	1					
ANR	1161645	Argument	"kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1161304	0					
ANR	1161646	MultiplicativeExpression	"kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1161304	0		*			
ANR	1161647	Identifier	kaiser_beta		1161304	0					
ANR	1161648	CallExpression	"sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1161304	1					
ANR	1161649	Callee	sqrt		1161304	0					
ANR	1161650	Identifier	sqrt		1161304	0					
ANR	1161651	ArgumentList	"FFMAX ( 1 - w * w , 0 )"		1161304	1					
ANR	1161652	Argument	"FFMAX ( 1 - w * w , 0 )"		1161304	0					
ANR	1161653	CallExpression	"FFMAX ( 1 - w * w , 0 )"		1161304	0					
ANR	1161654	Callee	FFMAX		1161304	0					
ANR	1161655	Identifier	FFMAX		1161304	0					
ANR	1161656	ArgumentList	1 - w * w		1161304	1					
ANR	1161657	Argument	1 - w * w		1161304	0					
ANR	1161658	AdditiveExpression	1 - w * w		1161304	0		-			
ANR	1161659	PrimaryExpression	1		1161304	0					
ANR	1161660	MultiplicativeExpression	w * w		1161304	1		*			
ANR	1161661	Identifier	w		1161304	0					
ANR	1161662	Identifier	w		1161304	1					
ANR	1161663	Argument	0		1161304	1					
ANR	1161664	PrimaryExpression	0		1161304	0					
ANR	1161665	BreakStatement	break ;	73:16:1689:1694	1161304	10	True				
ANR	1161666	Label	default :	75:12:1709:1716	1161304	11	True				
ANR	1161667	Identifier	default		1161304	0					
ANR	1161668	ExpressionStatement	av_assert0 ( 0 )	77:16:1735:1748	1161304	12	True				
ANR	1161669	CallExpression	av_assert0 ( 0 )		1161304	0					
ANR	1161670	Callee	av_assert0		1161304	0					
ANR	1161671	Identifier	av_assert0		1161304	0					
ANR	1161672	ArgumentList	0		1161304	1					
ANR	1161673	Argument	0		1161304	0					
ANR	1161674	PrimaryExpression	0		1161304	0					
ANR	1161675	ExpressionStatement	tab [ i ] = y	83:12:1780:1790	1161304	3	True				
ANR	1161676	AssignmentExpression	tab [ i ] = y		1161304	0		=			
ANR	1161677	ArrayIndexing	tab [ i ]		1161304	0					
ANR	1161678	Identifier	tab		1161304	0					
ANR	1161679	Identifier	i		1161304	1					
ANR	1161680	Identifier	y		1161304	1					
ANR	1161681	IfStatement	if ( i < tap_count )		1161304	4					
ANR	1161682	Condition	i < tap_count	85:16:1809:1821	1161304	0	True				
ANR	1161683	RelationalExpression	i < tap_count		1161304	0		<			
ANR	1161684	Identifier	i		1161304	0					
ANR	1161685	Identifier	tap_count		1161304	1					
ANR	1161686	ExpressionStatement	norm += y	87:16:1841:1850	1161304	1	True				
ANR	1161687	AssignmentExpression	norm += y		1161304	0		+=			
ANR	1161688	Identifier	norm		1161304	0					
ANR	1161689	Identifier	y		1161304	1					
ANR	1161690	SwitchStatement	switch ( c -> format )		1161304	2					
ANR	1161691	Condition	c -> format	95:15:1948:1956	1161304	0	True				
ANR	1161692	PtrMemberAccess	c -> format		1161304	0					
ANR	1161693	Identifier	c		1161304	0					
ANR	1161694	Identifier	format		1161304	1					
ANR	1161695	CompoundStatement		93:25:1769:1769	1161304	1					
ANR	1161696	Label	case AV_SAMPLE_FMT_S16P :	97:8:1969:1992	1161304	0	True				
ANR	1161697	Identifier	AV_SAMPLE_FMT_S16P		1161304	0					
ANR	1161698	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1161304	1					
ANR	1161699	ForInit	i = 0 ;	99:16:2011:2014	1161304	0	True				
ANR	1161700	AssignmentExpression	i = 0		1161304	0		=			
ANR	1161701	Identifier	i		1161304	0					
ANR	1161702	PrimaryExpression	0		1161304	1					
ANR	1161703	Condition	i < tap_count	99:20:2015:2025	1161304	1	True				
ANR	1161704	RelationalExpression	i < tap_count		1161304	0		<			
ANR	1161705	Identifier	i		1161304	0					
ANR	1161706	Identifier	tap_count		1161304	1					
ANR	1161707	PostIncDecOperationExpression	i ++	99:32:2027:2029	1161304	2	True				
ANR	1161708	Identifier	i		1161304	0					
ANR	1161709	IncDec	++		1161304	1					
ANR	1161710	ExpressionStatement	"( ( int16_t * ) filter ) [ ph * alloc + i ] = av_clip ( lrintf ( tab [ i ] * scale / norm ) , INT16_MIN , INT16_MAX )"	101:16:2049:2146	1161304	3	True				
ANR	1161711	AssignmentExpression	"( ( int16_t * ) filter ) [ ph * alloc + i ] = av_clip ( lrintf ( tab [ i ] * scale / norm ) , INT16_MIN , INT16_MAX )"		1161304	0		=			
ANR	1161712	ArrayIndexing	( ( int16_t * ) filter ) [ ph * alloc + i ]		1161304	0					
ANR	1161713	CastExpression	( int16_t * ) filter		1161304	0					
ANR	1161714	CastTarget	int16_t *		1161304	0					
ANR	1161715	Identifier	filter		1161304	1					
ANR	1161716	AdditiveExpression	ph * alloc + i		1161304	1		+			
ANR	1161717	MultiplicativeExpression	ph * alloc		1161304	0		*			
ANR	1161718	Identifier	ph		1161304	0					
ANR	1161719	Identifier	alloc		1161304	1					
ANR	1161720	Identifier	i		1161304	1					
ANR	1161721	CallExpression	"av_clip ( lrintf ( tab [ i ] * scale / norm ) , INT16_MIN , INT16_MAX )"		1161304	1					
ANR	1161722	Callee	av_clip		1161304	0					
ANR	1161723	Identifier	av_clip		1161304	0					
ANR	1161724	ArgumentList	lrintf ( tab [ i ] * scale / norm )		1161304	1					
ANR	1161725	Argument	lrintf ( tab [ i ] * scale / norm )		1161304	0					
ANR	1161726	CallExpression	lrintf ( tab [ i ] * scale / norm )		1161304	0					
ANR	1161727	Callee	lrintf		1161304	0					
ANR	1161728	Identifier	lrintf		1161304	0					
ANR	1161729	ArgumentList	tab [ i ] * scale / norm		1161304	1					
ANR	1161730	Argument	tab [ i ] * scale / norm		1161304	0					
ANR	1161731	MultiplicativeExpression	tab [ i ] * scale / norm		1161304	0		*			
ANR	1161732	ArrayIndexing	tab [ i ]		1161304	0					
ANR	1161733	Identifier	tab		1161304	0					
ANR	1161734	Identifier	i		1161304	1					
ANR	1161735	MultiplicativeExpression	scale / norm		1161304	1		/			
ANR	1161736	Identifier	scale		1161304	0					
ANR	1161737	Identifier	norm		1161304	1					
ANR	1161738	Argument	INT16_MIN		1161304	1					
ANR	1161739	Identifier	INT16_MIN		1161304	0					
ANR	1161740	Argument	INT16_MAX		1161304	2					
ANR	1161741	Identifier	INT16_MAX		1161304	0					
ANR	1161742	IfStatement	if ( tap_count % 2 == 0 )		1161304	2					
ANR	1161743	Condition	tap_count % 2 == 0	103:16:2165:2182	1161304	0	True				
ANR	1161744	EqualityExpression	tap_count % 2 == 0		1161304	0		==			
ANR	1161745	MultiplicativeExpression	tap_count % 2		1161304	0		%			
ANR	1161746	Identifier	tap_count		1161304	0					
ANR	1161747	PrimaryExpression	2		1161304	1					
ANR	1161748	PrimaryExpression	0		1161304	1					
ANR	1161749	CompoundStatement		101:36:1996:1996	1161304	1					
ANR	1161750	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1161304	0					
ANR	1161751	ForInit	i = 0 ;	105:21:2209:2214	1161304	0	True				
ANR	1161752	AssignmentExpression	i = 0		1161304	0		=			
ANR	1161753	Identifier	i		1161304	0					
ANR	1161754	PrimaryExpression	0		1161304	1					
ANR	1161755	Condition	i < tap_count	105:28:2216:2228	1161304	1	True				
ANR	1161756	RelationalExpression	i < tap_count		1161304	0		<			
ANR	1161757	Identifier	i		1161304	0					
ANR	1161758	Identifier	tap_count		1161304	1					
ANR	1161759	PostIncDecOperationExpression	i ++	105:43:2231:2233	1161304	2	True				
ANR	1161760	Identifier	i		1161304	0					
ANR	1161761	IncDec	++		1161304	1					
ANR	1161762	ExpressionStatement	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int16_t * ) filter ) [ ph * alloc + i ]	107:20:2257:2354	1161304	3	True				
ANR	1161763	AssignmentExpression	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int16_t * ) filter ) [ ph * alloc + i ]		1161304	0		=			
ANR	1161764	ArrayIndexing	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1161304	0					
ANR	1161765	CastExpression	( int16_t * ) filter		1161304	0					
ANR	1161766	CastTarget	int16_t *		1161304	0					
ANR	1161767	Identifier	filter		1161304	1					
ANR	1161768	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1161304	1		+			
ANR	1161769	MultiplicativeExpression	( phase_count - ph ) * alloc		1161304	0		*			
ANR	1161770	AdditiveExpression	phase_count - ph		1161304	0		-			
ANR	1161771	Identifier	phase_count		1161304	0					
ANR	1161772	Identifier	ph		1161304	1					
ANR	1161773	Identifier	alloc		1161304	1					
ANR	1161774	AdditiveExpression	tap_count - 1 - i		1161304	1		-			
ANR	1161775	Identifier	tap_count		1161304	0					
ANR	1161776	AdditiveExpression	1 - i		1161304	1		-			
ANR	1161777	PrimaryExpression	1		1161304	0					
ANR	1161778	Identifier	i		1161304	1					
ANR	1161779	ArrayIndexing	( ( int16_t * ) filter ) [ ph * alloc + i ]		1161304	1					
ANR	1161780	CastExpression	( int16_t * ) filter		1161304	0					
ANR	1161781	CastTarget	int16_t *		1161304	0					
ANR	1161782	Identifier	filter		1161304	1					
ANR	1161783	AdditiveExpression	ph * alloc + i		1161304	1		+			
ANR	1161784	MultiplicativeExpression	ph * alloc		1161304	0		*			
ANR	1161785	Identifier	ph		1161304	0					
ANR	1161786	Identifier	alloc		1161304	1					
ANR	1161787	Identifier	i		1161304	1					
ANR	1161788	ElseStatement	else		1161304	0					
ANR	1161789	CompoundStatement		109:17:2200:2200	1161304	0					
ANR	1161790	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1161304	0					
ANR	1161791	ForInit	i = 1 ;	113:21:2413:2418	1161304	0	True				
ANR	1161792	AssignmentExpression	i = 1		1161304	0		=			
ANR	1161793	Identifier	i		1161304	0					
ANR	1161794	PrimaryExpression	1		1161304	1					
ANR	1161795	Condition	i <= tap_count	113:28:2420:2433	1161304	1	True				
ANR	1161796	RelationalExpression	i <= tap_count		1161304	0		<=			
ANR	1161797	Identifier	i		1161304	0					
ANR	1161798	Identifier	tap_count		1161304	1					
ANR	1161799	PostIncDecOperationExpression	i ++	113:44:2436:2438	1161304	2	True				
ANR	1161800	Identifier	i		1161304	0					
ANR	1161801	IncDec	++		1161304	1					
ANR	1161802	ExpressionStatement	"( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clip ( lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) , INT16_MIN , INT16_MAX )"	115:20:2462:2636	1161304	3	True				
ANR	1161803	AssignmentExpression	"( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clip ( lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) , INT16_MIN , INT16_MAX )"		1161304	0		=			
ANR	1161804	ArrayIndexing	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1161304	0					
ANR	1161805	CastExpression	( int16_t * ) filter		1161304	0					
ANR	1161806	CastTarget	int16_t *		1161304	0					
ANR	1161807	Identifier	filter		1161304	1					
ANR	1161808	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1161304	1		+			
ANR	1161809	MultiplicativeExpression	( phase_count - ph ) * alloc		1161304	0		*			
ANR	1161810	AdditiveExpression	phase_count - ph		1161304	0		-			
ANR	1161811	Identifier	phase_count		1161304	0					
ANR	1161812	Identifier	ph		1161304	1					
ANR	1161813	Identifier	alloc		1161304	1					
ANR	1161814	AdditiveExpression	tap_count - i		1161304	1		-			
ANR	1161815	Identifier	tap_count		1161304	0					
ANR	1161816	Identifier	i		1161304	1					
ANR	1161817	CallExpression	"av_clip ( lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) , INT16_MIN , INT16_MAX )"		1161304	1					
ANR	1161818	Callee	av_clip		1161304	0					
ANR	1161819	Identifier	av_clip		1161304	0					
ANR	1161820	ArgumentList	lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1161304	1					
ANR	1161821	Argument	lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1161304	0					
ANR	1161822	CallExpression	lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1161304	0					
ANR	1161823	Callee	lrintf		1161304	0					
ANR	1161824	Identifier	lrintf		1161304	0					
ANR	1161825	ArgumentList	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	1					
ANR	1161826	Argument	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	0					
ANR	1161827	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	0		*			
ANR	1161828	ArrayIndexing	tab [ i ]		1161304	0					
ANR	1161829	Identifier	tab		1161304	0					
ANR	1161830	Identifier	i		1161304	1					
ANR	1161831	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	1		/			
ANR	1161832	Identifier	scale		1161304	0					
ANR	1161833	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1161304	1		-			
ANR	1161834	Identifier	norm		1161304	0					
ANR	1161835	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1161304	1		+			
ANR	1161836	ArrayIndexing	tab [ 0 ]		1161304	0					
ANR	1161837	Identifier	tab		1161304	0					
ANR	1161838	PrimaryExpression	0		1161304	1					
ANR	1161839	ArrayIndexing	tab [ tap_count ]		1161304	1					
ANR	1161840	Identifier	tab		1161304	0					
ANR	1161841	Identifier	tap_count		1161304	1					
ANR	1161842	Argument	INT16_MIN		1161304	1					
ANR	1161843	Identifier	INT16_MIN		1161304	0					
ANR	1161844	Argument	INT16_MAX		1161304	2					
ANR	1161845	Identifier	INT16_MAX		1161304	0					
ANR	1161846	BreakStatement	break ;	121:12:2666:2671	1161304	3	True				
ANR	1161847	Label	case AV_SAMPLE_FMT_S32P :	123:8:2682:2705	1161304	4	True				
ANR	1161848	Identifier	AV_SAMPLE_FMT_S32P		1161304	0					
ANR	1161849	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1161304	5					
ANR	1161850	ForInit	i = 0 ;	125:16:2724:2727	1161304	0	True				
ANR	1161851	AssignmentExpression	i = 0		1161304	0		=			
ANR	1161852	Identifier	i		1161304	0					
ANR	1161853	PrimaryExpression	0		1161304	1					
ANR	1161854	Condition	i < tap_count	125:20:2728:2738	1161304	1	True				
ANR	1161855	RelationalExpression	i < tap_count		1161304	0		<			
ANR	1161856	Identifier	i		1161304	0					
ANR	1161857	Identifier	tap_count		1161304	1					
ANR	1161858	PostIncDecOperationExpression	i ++	125:32:2740:2742	1161304	2	True				
ANR	1161859	Identifier	i		1161304	0					
ANR	1161860	IncDec	++		1161304	1					
ANR	1161861	ExpressionStatement	( ( int32_t * ) filter ) [ ph * alloc + i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / norm ) )	127:16:2762:2844	1161304	3	True				
ANR	1161862	AssignmentExpression	( ( int32_t * ) filter ) [ ph * alloc + i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / norm ) )		1161304	0		=			
ANR	1161863	ArrayIndexing	( ( int32_t * ) filter ) [ ph * alloc + i ]		1161304	0					
ANR	1161864	CastExpression	( int32_t * ) filter		1161304	0					
ANR	1161865	CastTarget	int32_t *		1161304	0					
ANR	1161866	Identifier	filter		1161304	1					
ANR	1161867	AdditiveExpression	ph * alloc + i		1161304	1		+			
ANR	1161868	MultiplicativeExpression	ph * alloc		1161304	0		*			
ANR	1161869	Identifier	ph		1161304	0					
ANR	1161870	Identifier	alloc		1161304	1					
ANR	1161871	Identifier	i		1161304	1					
ANR	1161872	CallExpression	av_clipl_int32 ( llrint ( tab [ i ] * scale / norm ) )		1161304	1					
ANR	1161873	Callee	av_clipl_int32		1161304	0					
ANR	1161874	Identifier	av_clipl_int32		1161304	0					
ANR	1161875	ArgumentList	llrint ( tab [ i ] * scale / norm )		1161304	1					
ANR	1161876	Argument	llrint ( tab [ i ] * scale / norm )		1161304	0					
ANR	1161877	CallExpression	llrint ( tab [ i ] * scale / norm )		1161304	0					
ANR	1161878	Callee	llrint		1161304	0					
ANR	1161879	Identifier	llrint		1161304	0					
ANR	1161880	ArgumentList	tab [ i ] * scale / norm		1161304	1					
ANR	1161881	Argument	tab [ i ] * scale / norm		1161304	0					
ANR	1161882	MultiplicativeExpression	tab [ i ] * scale / norm		1161304	0		*			
ANR	1161883	ArrayIndexing	tab [ i ]		1161304	0					
ANR	1161884	Identifier	tab		1161304	0					
ANR	1161885	Identifier	i		1161304	1					
ANR	1161886	MultiplicativeExpression	scale / norm		1161304	1		/			
ANR	1161887	Identifier	scale		1161304	0					
ANR	1161888	Identifier	norm		1161304	1					
ANR	1161889	IfStatement	if ( tap_count % 2 == 0 )		1161304	6					
ANR	1161890	Condition	tap_count % 2 == 0	129:16:2863:2880	1161304	0	True				
ANR	1161891	EqualityExpression	tap_count % 2 == 0		1161304	0		==			
ANR	1161892	MultiplicativeExpression	tap_count % 2		1161304	0		%			
ANR	1161893	Identifier	tap_count		1161304	0					
ANR	1161894	PrimaryExpression	2		1161304	1					
ANR	1161895	PrimaryExpression	0		1161304	1					
ANR	1161896	CompoundStatement		127:36:2694:2694	1161304	1					
ANR	1161897	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1161304	0					
ANR	1161898	ForInit	i = 0 ;	131:21:2907:2912	1161304	0	True				
ANR	1161899	AssignmentExpression	i = 0		1161304	0		=			
ANR	1161900	Identifier	i		1161304	0					
ANR	1161901	PrimaryExpression	0		1161304	1					
ANR	1161902	Condition	i < tap_count	131:28:2914:2926	1161304	1	True				
ANR	1161903	RelationalExpression	i < tap_count		1161304	0		<			
ANR	1161904	Identifier	i		1161304	0					
ANR	1161905	Identifier	tap_count		1161304	1					
ANR	1161906	PostIncDecOperationExpression	i ++	131:43:2929:2931	1161304	2	True				
ANR	1161907	Identifier	i		1161304	0					
ANR	1161908	IncDec	++		1161304	1					
ANR	1161909	ExpressionStatement	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int32_t * ) filter ) [ ph * alloc + i ]	133:20:2955:3052	1161304	3	True				
ANR	1161910	AssignmentExpression	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int32_t * ) filter ) [ ph * alloc + i ]		1161304	0		=			
ANR	1161911	ArrayIndexing	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1161304	0					
ANR	1161912	CastExpression	( int32_t * ) filter		1161304	0					
ANR	1161913	CastTarget	int32_t *		1161304	0					
ANR	1161914	Identifier	filter		1161304	1					
ANR	1161915	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1161304	1		+			
ANR	1161916	MultiplicativeExpression	( phase_count - ph ) * alloc		1161304	0		*			
ANR	1161917	AdditiveExpression	phase_count - ph		1161304	0		-			
ANR	1161918	Identifier	phase_count		1161304	0					
ANR	1161919	Identifier	ph		1161304	1					
ANR	1161920	Identifier	alloc		1161304	1					
ANR	1161921	AdditiveExpression	tap_count - 1 - i		1161304	1		-			
ANR	1161922	Identifier	tap_count		1161304	0					
ANR	1161923	AdditiveExpression	1 - i		1161304	1		-			
ANR	1161924	PrimaryExpression	1		1161304	0					
ANR	1161925	Identifier	i		1161304	1					
ANR	1161926	ArrayIndexing	( ( int32_t * ) filter ) [ ph * alloc + i ]		1161304	1					
ANR	1161927	CastExpression	( int32_t * ) filter		1161304	0					
ANR	1161928	CastTarget	int32_t *		1161304	0					
ANR	1161929	Identifier	filter		1161304	1					
ANR	1161930	AdditiveExpression	ph * alloc + i		1161304	1		+			
ANR	1161931	MultiplicativeExpression	ph * alloc		1161304	0		*			
ANR	1161932	Identifier	ph		1161304	0					
ANR	1161933	Identifier	alloc		1161304	1					
ANR	1161934	Identifier	i		1161304	1					
ANR	1161935	ElseStatement	else		1161304	0					
ANR	1161936	CompoundStatement		135:17:2898:2898	1161304	0					
ANR	1161937	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1161304	0					
ANR	1161938	ForInit	i = 1 ;	139:21:3111:3116	1161304	0	True				
ANR	1161939	AssignmentExpression	i = 1		1161304	0		=			
ANR	1161940	Identifier	i		1161304	0					
ANR	1161941	PrimaryExpression	1		1161304	1					
ANR	1161942	Condition	i <= tap_count	139:28:3118:3131	1161304	1	True				
ANR	1161943	RelationalExpression	i <= tap_count		1161304	0		<=			
ANR	1161944	Identifier	i		1161304	0					
ANR	1161945	Identifier	tap_count		1161304	1					
ANR	1161946	PostIncDecOperationExpression	i ++	139:44:3134:3136	1161304	2	True				
ANR	1161947	Identifier	i		1161304	0					
ANR	1161948	IncDec	++		1161304	1					
ANR	1161949	ExpressionStatement	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )	141:20:3160:3319	1161304	3	True				
ANR	1161950	AssignmentExpression	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )		1161304	0		=			
ANR	1161951	ArrayIndexing	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1161304	0					
ANR	1161952	CastExpression	( int32_t * ) filter		1161304	0					
ANR	1161953	CastTarget	int32_t *		1161304	0					
ANR	1161954	Identifier	filter		1161304	1					
ANR	1161955	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1161304	1		+			
ANR	1161956	MultiplicativeExpression	( phase_count - ph ) * alloc		1161304	0		*			
ANR	1161957	AdditiveExpression	phase_count - ph		1161304	0		-			
ANR	1161958	Identifier	phase_count		1161304	0					
ANR	1161959	Identifier	ph		1161304	1					
ANR	1161960	Identifier	alloc		1161304	1					
ANR	1161961	AdditiveExpression	tap_count - i		1161304	1		-			
ANR	1161962	Identifier	tap_count		1161304	0					
ANR	1161963	Identifier	i		1161304	1					
ANR	1161964	CallExpression	av_clipl_int32 ( llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )		1161304	1					
ANR	1161965	Callee	av_clipl_int32		1161304	0					
ANR	1161966	Identifier	av_clipl_int32		1161304	0					
ANR	1161967	ArgumentList	llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1161304	1					
ANR	1161968	Argument	llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1161304	0					
ANR	1161969	CallExpression	llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1161304	0					
ANR	1161970	Callee	llrint		1161304	0					
ANR	1161971	Identifier	llrint		1161304	0					
ANR	1161972	ArgumentList	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	1					
ANR	1161973	Argument	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	0					
ANR	1161974	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	0		*			
ANR	1161975	ArrayIndexing	tab [ i ]		1161304	0					
ANR	1161976	Identifier	tab		1161304	0					
ANR	1161977	Identifier	i		1161304	1					
ANR	1161978	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	1		/			
ANR	1161979	Identifier	scale		1161304	0					
ANR	1161980	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1161304	1		-			
ANR	1161981	Identifier	norm		1161304	0					
ANR	1161982	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1161304	1		+			
ANR	1161983	ArrayIndexing	tab [ 0 ]		1161304	0					
ANR	1161984	Identifier	tab		1161304	0					
ANR	1161985	PrimaryExpression	0		1161304	1					
ANR	1161986	ArrayIndexing	tab [ tap_count ]		1161304	1					
ANR	1161987	Identifier	tab		1161304	0					
ANR	1161988	Identifier	tap_count		1161304	1					
ANR	1161989	BreakStatement	break ;	147:12:3349:3354	1161304	7	True				
ANR	1161990	Label	case AV_SAMPLE_FMT_FLTP :	149:8:3365:3388	1161304	8	True				
ANR	1161991	Identifier	AV_SAMPLE_FMT_FLTP		1161304	0					
ANR	1161992	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1161304	9					
ANR	1161993	ForInit	i = 0 ;	151:16:3407:3410	1161304	0	True				
ANR	1161994	AssignmentExpression	i = 0		1161304	0		=			
ANR	1161995	Identifier	i		1161304	0					
ANR	1161996	PrimaryExpression	0		1161304	1					
ANR	1161997	Condition	i < tap_count	151:20:3411:3421	1161304	1	True				
ANR	1161998	RelationalExpression	i < tap_count		1161304	0		<			
ANR	1161999	Identifier	i		1161304	0					
ANR	1162000	Identifier	tap_count		1161304	1					
ANR	1162001	PostIncDecOperationExpression	i ++	151:32:3423:3425	1161304	2	True				
ANR	1162002	Identifier	i		1161304	0					
ANR	1162003	IncDec	++		1161304	1					
ANR	1162004	ExpressionStatement	( ( float * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm	153:16:3445:3501	1161304	3	True				
ANR	1162005	AssignmentExpression	( ( float * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm		1161304	0		=			
ANR	1162006	ArrayIndexing	( ( float * ) filter ) [ ph * alloc + i ]		1161304	0					
ANR	1162007	CastExpression	( float * ) filter		1161304	0					
ANR	1162008	CastTarget	float *		1161304	0					
ANR	1162009	Identifier	filter		1161304	1					
ANR	1162010	AdditiveExpression	ph * alloc + i		1161304	1		+			
ANR	1162011	MultiplicativeExpression	ph * alloc		1161304	0		*			
ANR	1162012	Identifier	ph		1161304	0					
ANR	1162013	Identifier	alloc		1161304	1					
ANR	1162014	Identifier	i		1161304	1					
ANR	1162015	MultiplicativeExpression	tab [ i ] * scale / norm		1161304	1		*			
ANR	1162016	ArrayIndexing	tab [ i ]		1161304	0					
ANR	1162017	Identifier	tab		1161304	0					
ANR	1162018	Identifier	i		1161304	1					
ANR	1162019	MultiplicativeExpression	scale / norm		1161304	1		/			
ANR	1162020	Identifier	scale		1161304	0					
ANR	1162021	Identifier	norm		1161304	1					
ANR	1162022	IfStatement	if ( tap_count % 2 == 0 )		1161304	10					
ANR	1162023	Condition	tap_count % 2 == 0	155:16:3520:3537	1161304	0	True				
ANR	1162024	EqualityExpression	tap_count % 2 == 0		1161304	0		==			
ANR	1162025	MultiplicativeExpression	tap_count % 2		1161304	0		%			
ANR	1162026	Identifier	tap_count		1161304	0					
ANR	1162027	PrimaryExpression	2		1161304	1					
ANR	1162028	PrimaryExpression	0		1161304	1					
ANR	1162029	CompoundStatement		153:36:3351:3351	1161304	1					
ANR	1162030	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1161304	0					
ANR	1162031	ForInit	i = 0 ;	157:21:3564:3569	1161304	0	True				
ANR	1162032	AssignmentExpression	i = 0		1161304	0		=			
ANR	1162033	Identifier	i		1161304	0					
ANR	1162034	PrimaryExpression	0		1161304	1					
ANR	1162035	Condition	i < tap_count	157:28:3571:3583	1161304	1	True				
ANR	1162036	RelationalExpression	i < tap_count		1161304	0		<			
ANR	1162037	Identifier	i		1161304	0					
ANR	1162038	Identifier	tap_count		1161304	1					
ANR	1162039	PostIncDecOperationExpression	i ++	157:43:3586:3588	1161304	2	True				
ANR	1162040	Identifier	i		1161304	0					
ANR	1162041	IncDec	++		1161304	1					
ANR	1162042	ExpressionStatement	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( float * ) filter ) [ ph * alloc + i ]	159:20:3612:3705	1161304	3	True				
ANR	1162043	AssignmentExpression	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( float * ) filter ) [ ph * alloc + i ]		1161304	0		=			
ANR	1162044	ArrayIndexing	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1161304	0					
ANR	1162045	CastExpression	( float * ) filter		1161304	0					
ANR	1162046	CastTarget	float *		1161304	0					
ANR	1162047	Identifier	filter		1161304	1					
ANR	1162048	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1161304	1		+			
ANR	1162049	MultiplicativeExpression	( phase_count - ph ) * alloc		1161304	0		*			
ANR	1162050	AdditiveExpression	phase_count - ph		1161304	0		-			
ANR	1162051	Identifier	phase_count		1161304	0					
ANR	1162052	Identifier	ph		1161304	1					
ANR	1162053	Identifier	alloc		1161304	1					
ANR	1162054	AdditiveExpression	tap_count - 1 - i		1161304	1		-			
ANR	1162055	Identifier	tap_count		1161304	0					
ANR	1162056	AdditiveExpression	1 - i		1161304	1		-			
ANR	1162057	PrimaryExpression	1		1161304	0					
ANR	1162058	Identifier	i		1161304	1					
ANR	1162059	ArrayIndexing	( ( float * ) filter ) [ ph * alloc + i ]		1161304	1					
ANR	1162060	CastExpression	( float * ) filter		1161304	0					
ANR	1162061	CastTarget	float *		1161304	0					
ANR	1162062	Identifier	filter		1161304	1					
ANR	1162063	AdditiveExpression	ph * alloc + i		1161304	1		+			
ANR	1162064	MultiplicativeExpression	ph * alloc		1161304	0		*			
ANR	1162065	Identifier	ph		1161304	0					
ANR	1162066	Identifier	alloc		1161304	1					
ANR	1162067	Identifier	i		1161304	1					
ANR	1162068	ElseStatement	else		1161304	0					
ANR	1162069	CompoundStatement		161:17:3551:3551	1161304	0					
ANR	1162070	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1161304	0					
ANR	1162071	ForInit	i = 1 ;	165:21:3764:3769	1161304	0	True				
ANR	1162072	AssignmentExpression	i = 1		1161304	0		=			
ANR	1162073	Identifier	i		1161304	0					
ANR	1162074	PrimaryExpression	1		1161304	1					
ANR	1162075	Condition	i <= tap_count	165:28:3771:3784	1161304	1	True				
ANR	1162076	RelationalExpression	i <= tap_count		1161304	0		<=			
ANR	1162077	Identifier	i		1161304	0					
ANR	1162078	Identifier	tap_count		1161304	1					
ANR	1162079	PostIncDecOperationExpression	i ++	165:44:3787:3789	1161304	2	True				
ANR	1162080	Identifier	i		1161304	0					
ANR	1162081	IncDec	++		1161304	1					
ANR	1162082	ExpressionStatement	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )	167:20:3813:3921	1161304	3	True				
ANR	1162083	AssignmentExpression	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	0		=			
ANR	1162084	ArrayIndexing	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1161304	0					
ANR	1162085	CastExpression	( float * ) filter		1161304	0					
ANR	1162086	CastTarget	float *		1161304	0					
ANR	1162087	Identifier	filter		1161304	1					
ANR	1162088	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1161304	1		+			
ANR	1162089	MultiplicativeExpression	( phase_count - ph ) * alloc		1161304	0		*			
ANR	1162090	AdditiveExpression	phase_count - ph		1161304	0		-			
ANR	1162091	Identifier	phase_count		1161304	0					
ANR	1162092	Identifier	ph		1161304	1					
ANR	1162093	Identifier	alloc		1161304	1					
ANR	1162094	AdditiveExpression	tap_count - i		1161304	1		-			
ANR	1162095	Identifier	tap_count		1161304	0					
ANR	1162096	Identifier	i		1161304	1					
ANR	1162097	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	1		*			
ANR	1162098	ArrayIndexing	tab [ i ]		1161304	0					
ANR	1162099	Identifier	tab		1161304	0					
ANR	1162100	Identifier	i		1161304	1					
ANR	1162101	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	1		/			
ANR	1162102	Identifier	scale		1161304	0					
ANR	1162103	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1161304	1		-			
ANR	1162104	Identifier	norm		1161304	0					
ANR	1162105	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1161304	1		+			
ANR	1162106	ArrayIndexing	tab [ 0 ]		1161304	0					
ANR	1162107	Identifier	tab		1161304	0					
ANR	1162108	PrimaryExpression	0		1161304	1					
ANR	1162109	ArrayIndexing	tab [ tap_count ]		1161304	1					
ANR	1162110	Identifier	tab		1161304	0					
ANR	1162111	Identifier	tap_count		1161304	1					
ANR	1162112	BreakStatement	break ;	171:12:3951:3956	1161304	11	True				
ANR	1162113	Label	case AV_SAMPLE_FMT_DBLP :	173:8:3967:3990	1161304	12	True				
ANR	1162114	Identifier	AV_SAMPLE_FMT_DBLP		1161304	0					
ANR	1162115	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1161304	13					
ANR	1162116	ForInit	i = 0 ;	175:16:4009:4012	1161304	0	True				
ANR	1162117	AssignmentExpression	i = 0		1161304	0		=			
ANR	1162118	Identifier	i		1161304	0					
ANR	1162119	PrimaryExpression	0		1161304	1					
ANR	1162120	Condition	i < tap_count	175:20:4013:4023	1161304	1	True				
ANR	1162121	RelationalExpression	i < tap_count		1161304	0		<			
ANR	1162122	Identifier	i		1161304	0					
ANR	1162123	Identifier	tap_count		1161304	1					
ANR	1162124	PostIncDecOperationExpression	i ++	175:32:4025:4027	1161304	2	True				
ANR	1162125	Identifier	i		1161304	0					
ANR	1162126	IncDec	++		1161304	1					
ANR	1162127	ExpressionStatement	( ( double * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm	177:16:4047:4104	1161304	3	True				
ANR	1162128	AssignmentExpression	( ( double * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm		1161304	0		=			
ANR	1162129	ArrayIndexing	( ( double * ) filter ) [ ph * alloc + i ]		1161304	0					
ANR	1162130	CastExpression	( double * ) filter		1161304	0					
ANR	1162131	CastTarget	double *		1161304	0					
ANR	1162132	Identifier	filter		1161304	1					
ANR	1162133	AdditiveExpression	ph * alloc + i		1161304	1		+			
ANR	1162134	MultiplicativeExpression	ph * alloc		1161304	0		*			
ANR	1162135	Identifier	ph		1161304	0					
ANR	1162136	Identifier	alloc		1161304	1					
ANR	1162137	Identifier	i		1161304	1					
ANR	1162138	MultiplicativeExpression	tab [ i ] * scale / norm		1161304	1		*			
ANR	1162139	ArrayIndexing	tab [ i ]		1161304	0					
ANR	1162140	Identifier	tab		1161304	0					
ANR	1162141	Identifier	i		1161304	1					
ANR	1162142	MultiplicativeExpression	scale / norm		1161304	1		/			
ANR	1162143	Identifier	scale		1161304	0					
ANR	1162144	Identifier	norm		1161304	1					
ANR	1162145	IfStatement	if ( tap_count % 2 == 0 )		1161304	14					
ANR	1162146	Condition	tap_count % 2 == 0	179:16:4123:4140	1161304	0	True				
ANR	1162147	EqualityExpression	tap_count % 2 == 0		1161304	0		==			
ANR	1162148	MultiplicativeExpression	tap_count % 2		1161304	0		%			
ANR	1162149	Identifier	tap_count		1161304	0					
ANR	1162150	PrimaryExpression	2		1161304	1					
ANR	1162151	PrimaryExpression	0		1161304	1					
ANR	1162152	CompoundStatement		177:36:3954:3954	1161304	1					
ANR	1162153	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1161304	0					
ANR	1162154	ForInit	i = 0 ;	181:21:4167:4172	1161304	0	True				
ANR	1162155	AssignmentExpression	i = 0		1161304	0		=			
ANR	1162156	Identifier	i		1161304	0					
ANR	1162157	PrimaryExpression	0		1161304	1					
ANR	1162158	Condition	i < tap_count	181:28:4174:4186	1161304	1	True				
ANR	1162159	RelationalExpression	i < tap_count		1161304	0		<			
ANR	1162160	Identifier	i		1161304	0					
ANR	1162161	Identifier	tap_count		1161304	1					
ANR	1162162	PostIncDecOperationExpression	i ++	181:43:4189:4191	1161304	2	True				
ANR	1162163	Identifier	i		1161304	0					
ANR	1162164	IncDec	++		1161304	1					
ANR	1162165	ExpressionStatement	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( double * ) filter ) [ ph * alloc + i ]	183:20:4215:4310	1161304	3	True				
ANR	1162166	AssignmentExpression	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( double * ) filter ) [ ph * alloc + i ]		1161304	0		=			
ANR	1162167	ArrayIndexing	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1161304	0					
ANR	1162168	CastExpression	( double * ) filter		1161304	0					
ANR	1162169	CastTarget	double *		1161304	0					
ANR	1162170	Identifier	filter		1161304	1					
ANR	1162171	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1161304	1		+			
ANR	1162172	MultiplicativeExpression	( phase_count - ph ) * alloc		1161304	0		*			
ANR	1162173	AdditiveExpression	phase_count - ph		1161304	0		-			
ANR	1162174	Identifier	phase_count		1161304	0					
ANR	1162175	Identifier	ph		1161304	1					
ANR	1162176	Identifier	alloc		1161304	1					
ANR	1162177	AdditiveExpression	tap_count - 1 - i		1161304	1		-			
ANR	1162178	Identifier	tap_count		1161304	0					
ANR	1162179	AdditiveExpression	1 - i		1161304	1		-			
ANR	1162180	PrimaryExpression	1		1161304	0					
ANR	1162181	Identifier	i		1161304	1					
ANR	1162182	ArrayIndexing	( ( double * ) filter ) [ ph * alloc + i ]		1161304	1					
ANR	1162183	CastExpression	( double * ) filter		1161304	0					
ANR	1162184	CastTarget	double *		1161304	0					
ANR	1162185	Identifier	filter		1161304	1					
ANR	1162186	AdditiveExpression	ph * alloc + i		1161304	1		+			
ANR	1162187	MultiplicativeExpression	ph * alloc		1161304	0		*			
ANR	1162188	Identifier	ph		1161304	0					
ANR	1162189	Identifier	alloc		1161304	1					
ANR	1162190	Identifier	i		1161304	1					
ANR	1162191	ElseStatement	else		1161304	0					
ANR	1162192	CompoundStatement		185:17:4156:4156	1161304	0					
ANR	1162193	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1161304	0					
ANR	1162194	ForInit	i = 1 ;	189:21:4369:4374	1161304	0	True				
ANR	1162195	AssignmentExpression	i = 1		1161304	0		=			
ANR	1162196	Identifier	i		1161304	0					
ANR	1162197	PrimaryExpression	1		1161304	1					
ANR	1162198	Condition	i <= tap_count	189:28:4376:4389	1161304	1	True				
ANR	1162199	RelationalExpression	i <= tap_count		1161304	0		<=			
ANR	1162200	Identifier	i		1161304	0					
ANR	1162201	Identifier	tap_count		1161304	1					
ANR	1162202	PostIncDecOperationExpression	i ++	189:44:4392:4394	1161304	2	True				
ANR	1162203	Identifier	i		1161304	0					
ANR	1162204	IncDec	++		1161304	1					
ANR	1162205	ExpressionStatement	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )	191:20:4418:4527	1161304	3	True				
ANR	1162206	AssignmentExpression	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	0		=			
ANR	1162207	ArrayIndexing	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1161304	0					
ANR	1162208	CastExpression	( double * ) filter		1161304	0					
ANR	1162209	CastTarget	double *		1161304	0					
ANR	1162210	Identifier	filter		1161304	1					
ANR	1162211	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1161304	1		+			
ANR	1162212	MultiplicativeExpression	( phase_count - ph ) * alloc		1161304	0		*			
ANR	1162213	AdditiveExpression	phase_count - ph		1161304	0		-			
ANR	1162214	Identifier	phase_count		1161304	0					
ANR	1162215	Identifier	ph		1161304	1					
ANR	1162216	Identifier	alloc		1161304	1					
ANR	1162217	AdditiveExpression	tap_count - i		1161304	1		-			
ANR	1162218	Identifier	tap_count		1161304	0					
ANR	1162219	Identifier	i		1161304	1					
ANR	1162220	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	1		*			
ANR	1162221	ArrayIndexing	tab [ i ]		1161304	0					
ANR	1162222	Identifier	tab		1161304	0					
ANR	1162223	Identifier	i		1161304	1					
ANR	1162224	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1161304	1		/			
ANR	1162225	Identifier	scale		1161304	0					
ANR	1162226	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1161304	1		-			
ANR	1162227	Identifier	norm		1161304	0					
ANR	1162228	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1161304	1		+			
ANR	1162229	ArrayIndexing	tab [ 0 ]		1161304	0					
ANR	1162230	Identifier	tab		1161304	0					
ANR	1162231	PrimaryExpression	0		1161304	1					
ANR	1162232	ArrayIndexing	tab [ tap_count ]		1161304	1					
ANR	1162233	Identifier	tab		1161304	0					
ANR	1162234	Identifier	tap_count		1161304	1					
ANR	1162235	BreakStatement	break ;	195:12:4557:4562	1161304	15	True				
ANR	1162236	CompoundStatement		211:8:4522:4565	1161304	8					
ANR	1162237	Statement	define	205:1:4598:4603	1161304	0	True				
ANR	1162238	Statement	LEN	205:8:4605:4607	1161304	1	True				
ANR	1162239	Statement	1024	205:12:4609:4612	1161304	2	True				
ANR	1162240	IdentifierDeclStatement	"int j , k ;"	207:8:4623:4630	1161304	3	True				
ANR	1162241	IdentifierDecl	j		1161304	0					
ANR	1162242	IdentifierDeclType	int		1161304	0					
ANR	1162243	Identifier	j		1161304	1					
ANR	1162244	IdentifierDecl	k		1161304	1					
ANR	1162245	IdentifierDeclType	int		1161304	0					
ANR	1162246	Identifier	k		1161304	1					
ANR	1162247	IdentifierDeclStatement	double sine [ LEN + tap_count ] ;	209:8:4641:4669	1161304	4	True				
ANR	1162248	IdentifierDecl	sine [ LEN + tap_count ]		1161304	0					
ANR	1162249	IdentifierDeclType	double [ LEN + tap_count ]		1161304	0					
ANR	1162250	Identifier	sine		1161304	1					
ANR	1162251	AdditiveExpression	LEN + tap_count		1161304	2		+			
ANR	1162252	Identifier	LEN		1161304	0					
ANR	1162253	Identifier	tap_count		1161304	1					
ANR	1162254	IdentifierDeclStatement	double filtered [ LEN ] ;	211:8:4680:4700	1161304	5	True				
ANR	1162255	IdentifierDecl	filtered [ LEN ]		1161304	0					
ANR	1162256	IdentifierDeclType	double [ LEN ]		1161304	0					
ANR	1162257	Identifier	filtered		1161304	1					
ANR	1162258	Identifier	LEN		1161304	2					
ANR	1162259	IdentifierDeclStatement	"double maxff = - 2 , minff = 2 , maxsf = - 2 , minsf = 2 ;"	213:8:4711:4754	1161304	6	True				
ANR	1162260	IdentifierDecl	maxff = - 2		1161304	0					
ANR	1162261	IdentifierDeclType	double		1161304	0					
ANR	1162262	Identifier	maxff		1161304	1					
ANR	1162263	AssignmentExpression	maxff = - 2		1161304	2		=			
ANR	1162264	Identifier	maxff		1161304	0					
ANR	1162265	UnaryOperationExpression	- 2		1161304	1					
ANR	1162266	UnaryOperator	-		1161304	0					
ANR	1162267	PrimaryExpression	2		1161304	1					
ANR	1162268	IdentifierDecl	minff = 2		1161304	1					
ANR	1162269	IdentifierDeclType	double		1161304	0					
ANR	1162270	Identifier	minff		1161304	1					
ANR	1162271	AssignmentExpression	minff = 2		1161304	2		=			
ANR	1162272	Identifier	minff		1161304	0					
ANR	1162273	PrimaryExpression	2		1161304	1					
ANR	1162274	IdentifierDecl	maxsf = - 2		1161304	2					
ANR	1162275	IdentifierDeclType	double		1161304	0					
ANR	1162276	Identifier	maxsf		1161304	1					
ANR	1162277	AssignmentExpression	maxsf = - 2		1161304	2		=			
ANR	1162278	Identifier	maxsf		1161304	0					
ANR	1162279	UnaryOperationExpression	- 2		1161304	1					
ANR	1162280	UnaryOperator	-		1161304	0					
ANR	1162281	PrimaryExpression	2		1161304	1					
ANR	1162282	IdentifierDecl	minsf = 2		1161304	3					
ANR	1162283	IdentifierDeclType	double		1161304	0					
ANR	1162284	Identifier	minsf		1161304	1					
ANR	1162285	AssignmentExpression	minsf = 2		1161304	2		=			
ANR	1162286	Identifier	minsf		1161304	0					
ANR	1162287	PrimaryExpression	2		1161304	1					
ANR	1162288	ForStatement	for ( i = 0 ; i < LEN ; i ++ )		1161304	7					
ANR	1162289	ForInit	i = 0 ;	215:12:4769:4772	1161304	0	True				
ANR	1162290	AssignmentExpression	i = 0		1161304	0		=			
ANR	1162291	Identifier	i		1161304	0					
ANR	1162292	PrimaryExpression	0		1161304	1					
ANR	1162293	Condition	i < LEN	215:17:4774:4778	1161304	1	True				
ANR	1162294	RelationalExpression	i < LEN		1161304	0		<			
ANR	1162295	Identifier	i		1161304	0					
ANR	1162296	Identifier	LEN		1161304	1					
ANR	1162297	PostIncDecOperationExpression	i ++	215:24:4781:4783	1161304	2	True				
ANR	1162298	Identifier	i		1161304	0					
ANR	1162299	IncDec	++		1161304	1					
ANR	1162300	CompoundStatement		215:12:4611:4634	1161304	3					
ANR	1162301	IdentifierDeclStatement	"double ss = 0 , sf = 0 , ff = 0 ;"	217:12:4800:4823	1161304	0	True				
ANR	1162302	IdentifierDecl	ss = 0		1161304	0					
ANR	1162303	IdentifierDeclType	double		1161304	0					
ANR	1162304	Identifier	ss		1161304	1					
ANR	1162305	AssignmentExpression	ss = 0		1161304	2		=			
ANR	1162306	Identifier	ss		1161304	0					
ANR	1162307	PrimaryExpression	0		1161304	1					
ANR	1162308	IdentifierDecl	sf = 0		1161304	1					
ANR	1162309	IdentifierDeclType	double		1161304	0					
ANR	1162310	Identifier	sf		1161304	1					
ANR	1162311	AssignmentExpression	sf = 0		1161304	2		=			
ANR	1162312	Identifier	sf		1161304	0					
ANR	1162313	PrimaryExpression	0		1161304	1					
ANR	1162314	IdentifierDecl	ff = 0		1161304	2					
ANR	1162315	IdentifierDeclType	double		1161304	0					
ANR	1162316	Identifier	ff		1161304	1					
ANR	1162317	AssignmentExpression	ff = 0		1161304	2		=			
ANR	1162318	Identifier	ff		1161304	0					
ANR	1162319	PrimaryExpression	0		1161304	1					
ANR	1162320	ForStatement	for ( j = 0 ; j < LEN + tap_count ; j ++ )		1161304	1					
ANR	1162321	ForInit	j = 0 ;	219:16:4842:4845	1161304	0	True				
ANR	1162322	AssignmentExpression	j = 0		1161304	0		=			
ANR	1162323	Identifier	j		1161304	0					
ANR	1162324	PrimaryExpression	0		1161304	1					
ANR	1162325	Condition	j < LEN + tap_count	219:21:4847:4861	1161304	1	True				
ANR	1162326	RelationalExpression	j < LEN + tap_count		1161304	0		<			
ANR	1162327	Identifier	j		1161304	0					
ANR	1162328	AdditiveExpression	LEN + tap_count		1161304	1		+			
ANR	1162329	Identifier	LEN		1161304	0					
ANR	1162330	Identifier	tap_count		1161304	1					
ANR	1162331	PostIncDecOperationExpression	j ++	219:38:4864:4866	1161304	2	True				
ANR	1162332	Identifier	j		1161304	0					
ANR	1162333	IncDec	++		1161304	1					
ANR	1162334	ExpressionStatement	sine [ j ] = cos ( i * j * M_PI / LEN )	221:16:4886:4912	1161304	3	True				
ANR	1162335	AssignmentExpression	sine [ j ] = cos ( i * j * M_PI / LEN )		1161304	0		=			
ANR	1162336	ArrayIndexing	sine [ j ]		1161304	0					
ANR	1162337	Identifier	sine		1161304	0					
ANR	1162338	Identifier	j		1161304	1					
ANR	1162339	CallExpression	cos ( i * j * M_PI / LEN )		1161304	1					
ANR	1162340	Callee	cos		1161304	0					
ANR	1162341	Identifier	cos		1161304	0					
ANR	1162342	ArgumentList	i * j * M_PI / LEN		1161304	1					
ANR	1162343	Argument	i * j * M_PI / LEN		1161304	0					
ANR	1162344	MultiplicativeExpression	i * j * M_PI / LEN		1161304	0		*			
ANR	1162345	Identifier	i		1161304	0					
ANR	1162346	MultiplicativeExpression	j * M_PI / LEN		1161304	1		*			
ANR	1162347	Identifier	j		1161304	0					
ANR	1162348	MultiplicativeExpression	M_PI / LEN		1161304	1		/			
ANR	1162349	Identifier	M_PI		1161304	0					
ANR	1162350	Identifier	LEN		1161304	1					
ANR	1162351	ForStatement	for ( j = 0 ; j < LEN ; j ++ )		1161304	2					
ANR	1162352	ForInit	j = 0 ;	223:16:4931:4934	1161304	0	True				
ANR	1162353	AssignmentExpression	j = 0		1161304	0		=			
ANR	1162354	Identifier	j		1161304	0					
ANR	1162355	PrimaryExpression	0		1161304	1					
ANR	1162356	Condition	j < LEN	223:21:4936:4940	1161304	1	True				
ANR	1162357	RelationalExpression	j < LEN		1161304	0		<			
ANR	1162358	Identifier	j		1161304	0					
ANR	1162359	Identifier	LEN		1161304	1					
ANR	1162360	PostIncDecOperationExpression	j ++	223:28:4943:4945	1161304	2	True				
ANR	1162361	Identifier	j		1161304	0					
ANR	1162362	IncDec	++		1161304	1					
ANR	1162363	CompoundStatement		223:16:4777:4789	1161304	3					
ANR	1162364	IdentifierDeclStatement	double sum = 0 ;	225:16:4966:4978	1161304	0	True				
ANR	1162365	IdentifierDecl	sum = 0		1161304	0					
ANR	1162366	IdentifierDeclType	double		1161304	0					
ANR	1162367	Identifier	sum		1161304	1					
ANR	1162368	AssignmentExpression	sum = 0		1161304	2		=			
ANR	1162369	Identifier	sum		1161304	0					
ANR	1162370	PrimaryExpression	0		1161304	1					
ANR	1162371	ExpressionStatement	ph = 0	227:16:4997:5001	1161304	1	True				
ANR	1162372	AssignmentExpression	ph = 0		1161304	0		=			
ANR	1162373	Identifier	ph		1161304	0					
ANR	1162374	PrimaryExpression	0		1161304	1					
ANR	1162375	ForStatement	for ( k = 0 ; k < tap_count ; k ++ )		1161304	2					
ANR	1162376	ForInit	k = 0 ;	229:20:5024:5027	1161304	0	True				
ANR	1162377	AssignmentExpression	k = 0		1161304	0		=			
ANR	1162378	Identifier	k		1161304	0					
ANR	1162379	PrimaryExpression	0		1161304	1					
ANR	1162380	Condition	k < tap_count	229:25:5029:5039	1161304	1	True				
ANR	1162381	RelationalExpression	k < tap_count		1161304	0		<			
ANR	1162382	Identifier	k		1161304	0					
ANR	1162383	Identifier	tap_count		1161304	1					
ANR	1162384	PostIncDecOperationExpression	k ++	229:38:5042:5044	1161304	2	True				
ANR	1162385	Identifier	k		1161304	0					
ANR	1162386	IncDec	++		1161304	1					
ANR	1162387	ExpressionStatement	sum += filter [ ph * tap_count + k ] * sine [ k + j ]	231:20:5068:5113	1161304	3	True				
ANR	1162388	AssignmentExpression	sum += filter [ ph * tap_count + k ] * sine [ k + j ]		1161304	0		+=			
ANR	1162389	Identifier	sum		1161304	0					
ANR	1162390	MultiplicativeExpression	filter [ ph * tap_count + k ] * sine [ k + j ]		1161304	1		*			
ANR	1162391	ArrayIndexing	filter [ ph * tap_count + k ]		1161304	0					
ANR	1162392	Identifier	filter		1161304	0					
ANR	1162393	AdditiveExpression	ph * tap_count + k		1161304	1		+			
ANR	1162394	MultiplicativeExpression	ph * tap_count		1161304	0		*			
ANR	1162395	Identifier	ph		1161304	0					
ANR	1162396	Identifier	tap_count		1161304	1					
ANR	1162397	Identifier	k		1161304	1					
ANR	1162398	ArrayIndexing	sine [ k + j ]		1161304	1					
ANR	1162399	Identifier	sine		1161304	0					
ANR	1162400	AdditiveExpression	k + j		1161304	1		+			
ANR	1162401	Identifier	k		1161304	0					
ANR	1162402	Identifier	j		1161304	1					
ANR	1162403	ExpressionStatement	filtered [ j ] = sum / ( 1 << FILTER_SHIFT )	233:16:5132:5168	1161304	3	True				
ANR	1162404	AssignmentExpression	filtered [ j ] = sum / ( 1 << FILTER_SHIFT )		1161304	0		=			
ANR	1162405	ArrayIndexing	filtered [ j ]		1161304	0					
ANR	1162406	Identifier	filtered		1161304	0					
ANR	1162407	Identifier	j		1161304	1					
ANR	1162408	MultiplicativeExpression	sum / ( 1 << FILTER_SHIFT )		1161304	1		/			
ANR	1162409	Identifier	sum		1161304	0					
ANR	1162410	ShiftExpression	1 << FILTER_SHIFT		1161304	1		<<			
ANR	1162411	PrimaryExpression	1		1161304	0					
ANR	1162412	Identifier	FILTER_SHIFT		1161304	1					
ANR	1162413	ExpressionStatement	ss += sine [ j + center ] * sine [ j + center ]	235:16:5187:5227	1161304	4	True				
ANR	1162414	AssignmentExpression	ss += sine [ j + center ] * sine [ j + center ]		1161304	0		+=			
ANR	1162415	Identifier	ss		1161304	0					
ANR	1162416	MultiplicativeExpression	sine [ j + center ] * sine [ j + center ]		1161304	1		*			
ANR	1162417	ArrayIndexing	sine [ j + center ]		1161304	0					
ANR	1162418	Identifier	sine		1161304	0					
ANR	1162419	AdditiveExpression	j + center		1161304	1		+			
ANR	1162420	Identifier	j		1161304	0					
ANR	1162421	Identifier	center		1161304	1					
ANR	1162422	ArrayIndexing	sine [ j + center ]		1161304	1					
ANR	1162423	Identifier	sine		1161304	0					
ANR	1162424	AdditiveExpression	j + center		1161304	1		+			
ANR	1162425	Identifier	j		1161304	0					
ANR	1162426	Identifier	center		1161304	1					
ANR	1162427	ExpressionStatement	ff += filtered [ j ] * filtered [ j ]	237:16:5246:5276	1161304	5	True				
ANR	1162428	AssignmentExpression	ff += filtered [ j ] * filtered [ j ]		1161304	0		+=			
ANR	1162429	Identifier	ff		1161304	0					
ANR	1162430	MultiplicativeExpression	filtered [ j ] * filtered [ j ]		1161304	1		*			
ANR	1162431	ArrayIndexing	filtered [ j ]		1161304	0					
ANR	1162432	Identifier	filtered		1161304	0					
ANR	1162433	Identifier	j		1161304	1					
ANR	1162434	ArrayIndexing	filtered [ j ]		1161304	1					
ANR	1162435	Identifier	filtered		1161304	0					
ANR	1162436	Identifier	j		1161304	1					
ANR	1162437	ExpressionStatement	sf += sine [ j + center ] * filtered [ j ]	239:16:5295:5330	1161304	6	True				
ANR	1162438	AssignmentExpression	sf += sine [ j + center ] * filtered [ j ]		1161304	0		+=			
ANR	1162439	Identifier	sf		1161304	0					
ANR	1162440	MultiplicativeExpression	sine [ j + center ] * filtered [ j ]		1161304	1		*			
ANR	1162441	ArrayIndexing	sine [ j + center ]		1161304	0					
ANR	1162442	Identifier	sine		1161304	0					
ANR	1162443	AdditiveExpression	j + center		1161304	1		+			
ANR	1162444	Identifier	j		1161304	0					
ANR	1162445	Identifier	center		1161304	1					
ANR	1162446	ArrayIndexing	filtered [ j ]		1161304	1					
ANR	1162447	Identifier	filtered		1161304	0					
ANR	1162448	Identifier	j		1161304	1					
ANR	1162449	ExpressionStatement	ss = sqrt ( 2 * ss / LEN )	243:12:5360:5378	1161304	3	True				
ANR	1162450	AssignmentExpression	ss = sqrt ( 2 * ss / LEN )		1161304	0		=			
ANR	1162451	Identifier	ss		1161304	0					
ANR	1162452	CallExpression	sqrt ( 2 * ss / LEN )		1161304	1					
ANR	1162453	Callee	sqrt		1161304	0					
ANR	1162454	Identifier	sqrt		1161304	0					
ANR	1162455	ArgumentList	2 * ss / LEN		1161304	1					
ANR	1162456	Argument	2 * ss / LEN		1161304	0					
ANR	1162457	MultiplicativeExpression	2 * ss / LEN		1161304	0		*			
ANR	1162458	PrimaryExpression	2		1161304	0					
ANR	1162459	MultiplicativeExpression	ss / LEN		1161304	1		/			
ANR	1162460	Identifier	ss		1161304	0					
ANR	1162461	Identifier	LEN		1161304	1					
ANR	1162462	ExpressionStatement	ff = sqrt ( 2 * ff / LEN )	245:12:5393:5411	1161304	4	True				
ANR	1162463	AssignmentExpression	ff = sqrt ( 2 * ff / LEN )		1161304	0		=			
ANR	1162464	Identifier	ff		1161304	0					
ANR	1162465	CallExpression	sqrt ( 2 * ff / LEN )		1161304	1					
ANR	1162466	Callee	sqrt		1161304	0					
ANR	1162467	Identifier	sqrt		1161304	0					
ANR	1162468	ArgumentList	2 * ff / LEN		1161304	1					
ANR	1162469	Argument	2 * ff / LEN		1161304	0					
ANR	1162470	MultiplicativeExpression	2 * ff / LEN		1161304	0		*			
ANR	1162471	PrimaryExpression	2		1161304	0					
ANR	1162472	MultiplicativeExpression	ff / LEN		1161304	1		/			
ANR	1162473	Identifier	ff		1161304	0					
ANR	1162474	Identifier	LEN		1161304	1					
ANR	1162475	ExpressionStatement	sf = 2 * sf / LEN	247:12:5426:5438	1161304	5	True				
ANR	1162476	AssignmentExpression	sf = 2 * sf / LEN		1161304	0		=			
ANR	1162477	Identifier	sf		1161304	0					
ANR	1162478	MultiplicativeExpression	2 * sf / LEN		1161304	1		*			
ANR	1162479	PrimaryExpression	2		1161304	0					
ANR	1162480	MultiplicativeExpression	sf / LEN		1161304	1		/			
ANR	1162481	Identifier	sf		1161304	0					
ANR	1162482	Identifier	LEN		1161304	1					
ANR	1162483	ExpressionStatement	"maxff = FFMAX ( maxff , ff )"	249:12:5453:5476	1161304	6	True				
ANR	1162484	AssignmentExpression	"maxff = FFMAX ( maxff , ff )"		1161304	0		=			
ANR	1162485	Identifier	maxff		1161304	0					
ANR	1162486	CallExpression	"FFMAX ( maxff , ff )"		1161304	1					
ANR	1162487	Callee	FFMAX		1161304	0					
ANR	1162488	Identifier	FFMAX		1161304	0					
ANR	1162489	ArgumentList	maxff		1161304	1					
ANR	1162490	Argument	maxff		1161304	0					
ANR	1162491	Identifier	maxff		1161304	0					
ANR	1162492	Argument	ff		1161304	1					
ANR	1162493	Identifier	ff		1161304	0					
ANR	1162494	ExpressionStatement	"minff = FFMIN ( minff , ff )"	251:12:5491:5514	1161304	7	True				
ANR	1162495	AssignmentExpression	"minff = FFMIN ( minff , ff )"		1161304	0		=			
ANR	1162496	Identifier	minff		1161304	0					
ANR	1162497	CallExpression	"FFMIN ( minff , ff )"		1161304	1					
ANR	1162498	Callee	FFMIN		1161304	0					
ANR	1162499	Identifier	FFMIN		1161304	0					
ANR	1162500	ArgumentList	minff		1161304	1					
ANR	1162501	Argument	minff		1161304	0					
ANR	1162502	Identifier	minff		1161304	0					
ANR	1162503	Argument	ff		1161304	1					
ANR	1162504	Identifier	ff		1161304	0					
ANR	1162505	ExpressionStatement	"maxsf = FFMAX ( maxsf , sf )"	253:12:5529:5552	1161304	8	True				
ANR	1162506	AssignmentExpression	"maxsf = FFMAX ( maxsf , sf )"		1161304	0		=			
ANR	1162507	Identifier	maxsf		1161304	0					
ANR	1162508	CallExpression	"FFMAX ( maxsf , sf )"		1161304	1					
ANR	1162509	Callee	FFMAX		1161304	0					
ANR	1162510	Identifier	FFMAX		1161304	0					
ANR	1162511	ArgumentList	maxsf		1161304	1					
ANR	1162512	Argument	maxsf		1161304	0					
ANR	1162513	Identifier	maxsf		1161304	0					
ANR	1162514	Argument	sf		1161304	1					
ANR	1162515	Identifier	sf		1161304	0					
ANR	1162516	ExpressionStatement	"minsf = FFMIN ( minsf , sf )"	255:12:5567:5590	1161304	9	True				
ANR	1162517	AssignmentExpression	"minsf = FFMIN ( minsf , sf )"		1161304	0		=			
ANR	1162518	Identifier	minsf		1161304	0					
ANR	1162519	CallExpression	"FFMIN ( minsf , sf )"		1161304	1					
ANR	1162520	Callee	FFMIN		1161304	0					
ANR	1162521	Identifier	FFMIN		1161304	0					
ANR	1162522	ArgumentList	minsf		1161304	1					
ANR	1162523	Argument	minsf		1161304	0					
ANR	1162524	Identifier	minsf		1161304	0					
ANR	1162525	Argument	sf		1161304	1					
ANR	1162526	Identifier	sf		1161304	0					
ANR	1162527	IfStatement	if ( i % 11 == 0 )		1161304	10					
ANR	1162528	Condition	i % 11 == 0	257:15:5608:5614	1161304	0	True				
ANR	1162529	EqualityExpression	i % 11 == 0		1161304	0		==			
ANR	1162530	MultiplicativeExpression	i % 11		1161304	0		%			
ANR	1162531	Identifier	i		1161304	0					
ANR	1162532	PrimaryExpression	11		1161304	1					
ANR	1162533	PrimaryExpression	0		1161304	1					
ANR	1162534	CompoundStatement		255:23:5427:5427	1161304	1					
ANR	1162535	ExpressionStatement	"av_log ( NULL , AV_LOG_ERROR , ""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"" , i , ss , maxff , minff , maxsf , minsf )"	259:16:5635:5747	1161304	0	True				
ANR	1162536	CallExpression	"av_log ( NULL , AV_LOG_ERROR , ""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"" , i , ss , maxff , minff , maxsf , minsf )"		1161304	0					
ANR	1162537	Callee	av_log		1161304	0					
ANR	1162538	Identifier	av_log		1161304	0					
ANR	1162539	ArgumentList	NULL		1161304	1					
ANR	1162540	Argument	NULL		1161304	0					
ANR	1162541	Identifier	NULL		1161304	0					
ANR	1162542	Argument	AV_LOG_ERROR		1161304	1					
ANR	1162543	Identifier	AV_LOG_ERROR		1161304	0					
ANR	1162544	Argument	"""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"""		1161304	2					
ANR	1162545	PrimaryExpression	"""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"""		1161304	0					
ANR	1162546	Argument	i		1161304	3					
ANR	1162547	Identifier	i		1161304	0					
ANR	1162548	Argument	ss		1161304	4					
ANR	1162549	Identifier	ss		1161304	0					
ANR	1162550	Argument	maxff		1161304	5					
ANR	1162551	Identifier	maxff		1161304	0					
ANR	1162552	Argument	minff		1161304	6					
ANR	1162553	Identifier	minff		1161304	0					
ANR	1162554	Argument	maxsf		1161304	7					
ANR	1162555	Identifier	maxsf		1161304	0					
ANR	1162556	Argument	minsf		1161304	8					
ANR	1162557	Identifier	minsf		1161304	0					
ANR	1162558	ExpressionStatement	minff = minsf = 2	261:16:5766:5780	1161304	1	True				
ANR	1162559	AssignmentExpression	minff = minsf = 2		1161304	0		=			
ANR	1162560	Identifier	minff		1161304	0					
ANR	1162561	AssignmentExpression	minsf = 2		1161304	1		=			
ANR	1162562	Identifier	minsf		1161304	0					
ANR	1162563	PrimaryExpression	2		1161304	1					
ANR	1162564	ExpressionStatement	maxff = maxsf = - 2	263:16:5799:5814	1161304	2	True				
ANR	1162565	AssignmentExpression	maxff = maxsf = - 2		1161304	0		=			
ANR	1162566	Identifier	maxff		1161304	0					
ANR	1162567	AssignmentExpression	maxsf = - 2		1161304	1		=			
ANR	1162568	Identifier	maxsf		1161304	0					
ANR	1162569	UnaryOperationExpression	- 2		1161304	1					
ANR	1162570	UnaryOperator	-		1161304	0					
ANR	1162571	PrimaryExpression	2		1161304	1					
ANR	1162572	ExpressionStatement	av_free ( tab )	275:4:5864:5876	1161304	9	True				
ANR	1162573	CallExpression	av_free ( tab )		1161304	0					
ANR	1162574	Callee	av_free		1161304	0					
ANR	1162575	Identifier	av_free		1161304	0					
ANR	1162576	ArgumentList	tab		1161304	1					
ANR	1162577	Argument	tab		1161304	0					
ANR	1162578	Identifier	tab		1161304	0					
ANR	1162579	ReturnStatement	return 0 ;	277:4:5883:5891	1161304	10	True				
ANR	1162580	PrimaryExpression	0		1161304	0					
ANR	1162581	ReturnType	static int		1161304	1					
ANR	1162582	Identifier	build_filter		1161304	2					
ANR	1162583	ParameterList	"ResampleContext * c , void * filter , double factor , int tap_count , int alloc , int phase_count , int scale , int filter_type , double kaiser_beta"		1161304	3					
ANR	1162584	Parameter	ResampleContext * c	1:24:24:41	1161304	0	True				
ANR	1162585	ParameterType	ResampleContext *		1161304	0					
ANR	1162586	Identifier	c		1161304	1					
ANR	1162587	Parameter	void * filter	1:44:44:55	1161304	1	True				
ANR	1162588	ParameterType	void *		1161304	0					
ANR	1162589	Identifier	filter		1161304	1					
ANR	1162590	Parameter	double factor	1:58:58:70	1161304	2	True				
ANR	1162591	ParameterType	double		1161304	0					
ANR	1162592	Identifier	factor		1161304	1					
ANR	1162593	Parameter	int tap_count	1:73:73:85	1161304	3	True				
ANR	1162594	ParameterType	int		1161304	0					
ANR	1162595	Identifier	tap_count		1161304	1					
ANR	1162596	Parameter	int alloc	1:88:88:96	1161304	4	True				
ANR	1162597	ParameterType	int		1161304	0					
ANR	1162598	Identifier	alloc		1161304	1					
ANR	1162599	Parameter	int phase_count	1:99:99:113	1161304	5	True				
ANR	1162600	ParameterType	int		1161304	0					
ANR	1162601	Identifier	phase_count		1161304	1					
ANR	1162602	Parameter	int scale	1:116:116:124	1161304	6	True				
ANR	1162603	ParameterType	int		1161304	0					
ANR	1162604	Identifier	scale		1161304	1					
ANR	1162605	Parameter	int filter_type	3:24:152:166	1161304	7	True				
ANR	1162606	ParameterType	int		1161304	0					
ANR	1162607	Identifier	filter_type		1161304	1					
ANR	1162608	Parameter	double kaiser_beta	3:41:169:186	1161304	8	True				
ANR	1162609	ParameterType	double		1161304	0					
ANR	1162610	Identifier	kaiser_beta		1161304	1					
ANR	1162611	CFGEntryNode	ENTRY		1161304		True				
ANR	1162612	CFGExitNode	EXIT		1161304		True				
ANR	1162613	Symbol	ENOMEM		1161304						
ANR	1162614	Symbol	cos		1161304						
ANR	1162615	Symbol	maxff		1161304						
ANR	1162616	Symbol	FFMIN		1161304						
ANR	1162617	Symbol	norm		1161304						
ANR	1162618	Symbol	M_PI		1161304						
ANR	1162619	Symbol	* phase_count		1161304						
ANR	1162620	Symbol	tab		1161304						
ANR	1162621	Symbol	filtered		1161304						
ANR	1162622	Symbol	minsf		1161304						
ANR	1162623	Symbol	sqrt		1161304						
ANR	1162624	Symbol	FILTER_SHIFT		1161304						
ANR	1162625	Symbol	maxsf		1161304						
ANR	1162626	Symbol	av_clip		1161304						
ANR	1162627	Symbol	c -> format		1161304						
ANR	1162628	Symbol	lrintf		1161304						
ANR	1162629	Symbol	tap_count		1161304						
ANR	1162630	Symbol	minff		1161304						
ANR	1162631	Symbol	NULL		1161304						
ANR	1162632	Symbol	kaiser_beta		1161304						
ANR	1162633	Symbol	av_clipl_int32		1161304						
ANR	1162634	Symbol	sine		1161304						
ANR	1162635	Symbol	alloc		1161304						
ANR	1162636	Symbol	* ph		1161304						
ANR	1162637	Symbol	ff		1161304						
ANR	1162638	Symbol	scale		1161304						
ANR	1162639	Symbol	bessel		1161304						
ANR	1162640	Symbol	INT16_MIN		1161304						
ANR	1162641	Symbol	sum		1161304						
ANR	1162642	Symbol	llrint		1161304						
ANR	1162643	Symbol	sf		1161304						
ANR	1162644	Symbol	* filtered		1161304						
ANR	1162645	Symbol	INT16_MAX		1161304						
ANR	1162646	Symbol	filter_type		1161304						
ANR	1162647	Symbol	* alloc		1161304						
ANR	1162648	Symbol	phase_count		1161304						
ANR	1162649	Symbol	sin		1161304						
ANR	1162650	Symbol	factor		1161304						
ANR	1162651	Symbol	ss		1161304						
ANR	1162652	Symbol	* center		1161304						
ANR	1162653	Symbol	c		1161304						
ANR	1162654	Symbol	fabs		1161304						
ANR	1162655	Symbol	d		1161304						
ANR	1162656	Symbol	AV_LOG_ERROR		1161304						
ANR	1162657	Symbol	center		1161304						
ANR	1162658	Symbol	* sine		1161304						
ANR	1162659	Symbol	i		1161304						
ANR	1162660	Symbol	j		1161304						
ANR	1162661	Symbol	k		1161304						
ANR	1162662	Symbol	* c		1161304						
ANR	1162663	Symbol	* filter		1161304						
ANR	1162664	Symbol	filter		1161304						
ANR	1162665	Symbol	* i		1161304						
ANR	1162666	Symbol	t		1161304						
ANR	1162667	Symbol	LEN		1161304						
ANR	1162668	Symbol	* j		1161304						
ANR	1162669	Symbol	* k		1161304						
ANR	1162670	Symbol	w		1161304						
ANR	1162671	Symbol	ph		1161304						
ANR	1162672	Symbol	x		1161304						
ANR	1162673	Symbol	* tap_count		1161304						
ANR	1162674	Symbol	y		1161304						
ANR	1162675	Symbol	av_malloc_array		1161304						
ANR	1162676	Symbol	AVERROR		1161304						
ANR	1162677	Symbol	* tab		1161304						
ANR	1162678	Symbol	FFMAX		1161304						
