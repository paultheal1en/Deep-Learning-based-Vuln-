command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	35272	File	/home/p4ultr4n/workplace/ReVeal/raw_code/FUNC_10_1.c								
ANR	35273	Function	dequant	1:0:0:612							
ANR	35274	FunctionDef	"dequant (int16_t * coeffs , int16_t log2_size)"		35273	0					
ANR	35275	CompoundStatement		3:0:63:612	35273	0					
ANR	35276	IdentifierDeclStatement	int shift = 15 - BIT_DEPTH - log2_size ;	5:4:70:109	35273	0	True				
ANR	35277	IdentifierDecl	shift = 15 - BIT_DEPTH - log2_size		35273	0					
ANR	35278	IdentifierDeclType	int		35273	0					
ANR	35279	Identifier	shift		35273	1					
ANR	35280	AssignmentExpression	shift = 15 - BIT_DEPTH - log2_size		35273	2		=			
ANR	35281	Identifier	shift		35273	0					
ANR	35282	AdditiveExpression	15 - BIT_DEPTH - log2_size		35273	1		-			
ANR	35283	PrimaryExpression	15		35273	0					
ANR	35284	AdditiveExpression	BIT_DEPTH - log2_size		35273	1		-			
ANR	35285	Identifier	BIT_DEPTH		35273	0					
ANR	35286	Identifier	log2_size		35273	1					
ANR	35287	IdentifierDeclStatement	"int x , y ;"	7:4:116:124	35273	1	True				
ANR	35288	IdentifierDecl	x		35273	0					
ANR	35289	IdentifierDeclType	int		35273	0					
ANR	35290	Identifier	x		35273	1					
ANR	35291	IdentifierDecl	y		35273	1					
ANR	35292	IdentifierDeclType	int		35273	0					
ANR	35293	Identifier	y		35273	1					
ANR	35294	IdentifierDeclStatement	int size = 1 << log2_size ;	9:4:131:156	35273	2	True				
ANR	35295	IdentifierDecl	size = 1 << log2_size		35273	0					
ANR	35296	IdentifierDeclType	int		35273	0					
ANR	35297	Identifier	size		35273	1					
ANR	35298	AssignmentExpression	size = 1 << log2_size		35273	2		=			
ANR	35299	Identifier	size		35273	0					
ANR	35300	ShiftExpression	1 << log2_size		35273	1		<<			
ANR	35301	PrimaryExpression	1		35273	0					
ANR	35302	Identifier	log2_size		35273	1					
ANR	35303	IfStatement	if ( shift > 0 )		35273	3					
ANR	35304	Condition	shift > 0	13:8:169:177	35273	0	True				
ANR	35305	RelationalExpression	shift > 0		35273	0		>			
ANR	35306	Identifier	shift		35273	0					
ANR	35307	PrimaryExpression	0		35273	1					
ANR	35308	CompoundStatement		13:8:127:156	35273	1					
ANR	35309	IdentifierDeclStatement	int offset = 1 << ( shift - 1 ) ;	15:8:191:220	35273	0	True				
ANR	35310	IdentifierDecl	offset = 1 << ( shift - 1 )		35273	0					
ANR	35311	IdentifierDeclType	int		35273	0					
ANR	35312	Identifier	offset		35273	1					
ANR	35313	AssignmentExpression	offset = 1 << ( shift - 1 )		35273	2		=			
ANR	35314	Identifier	offset		35273	0					
ANR	35315	ShiftExpression	1 << ( shift - 1 )		35273	1		<<			
ANR	35316	PrimaryExpression	1		35273	0					
ANR	35317	AdditiveExpression	shift - 1		35273	1		-			
ANR	35318	Identifier	shift		35273	0					
ANR	35319	PrimaryExpression	1		35273	1					
ANR	35320	ForStatement	for ( y = 0 ; y < size ; y ++ )		35273	1					
ANR	35321	ForInit	y = 0 ;	17:13:236:241	35273	0	True				
ANR	35322	AssignmentExpression	y = 0		35273	0		=			
ANR	35323	Identifier	y		35273	0					
ANR	35324	PrimaryExpression	0		35273	1					
ANR	35325	Condition	y < size	17:20:243:250	35273	1	True				
ANR	35326	RelationalExpression	y < size		35273	0		<			
ANR	35327	Identifier	y		35273	0					
ANR	35328	Identifier	size		35273	1					
ANR	35329	PostIncDecOperationExpression	y ++	17:30:253:255	35273	2	True				
ANR	35330	Identifier	y		35273	0					
ANR	35331	IncDec	++		35273	1					
ANR	35332	CompoundStatement		15:35:194:194	35273	3					
ANR	35333	ForStatement	for ( x = 0 ; x < size ; x ++ )		35273	0					
ANR	35334	ForInit	x = 0 ;	19:17:278:283	35273	0	True				
ANR	35335	AssignmentExpression	x = 0		35273	0		=			
ANR	35336	Identifier	x		35273	0					
ANR	35337	PrimaryExpression	0		35273	1					
ANR	35338	Condition	x < size	19:24:285:292	35273	1	True				
ANR	35339	RelationalExpression	x < size		35273	0		<			
ANR	35340	Identifier	x		35273	0					
ANR	35341	Identifier	size		35273	1					
ANR	35342	PostIncDecOperationExpression	x ++	19:34:295:297	35273	2	True				
ANR	35343	Identifier	x		35273	0					
ANR	35344	IncDec	++		35273	1					
ANR	35345	CompoundStatement		17:39:236:236	35273	3					
ANR	35346	ExpressionStatement	* coeffs = ( * coeffs + offset ) >> shift	21:16:319:356	35273	0	True				
ANR	35347	AssignmentExpression	* coeffs = ( * coeffs + offset ) >> shift		35273	0		=			
ANR	35348	UnaryOperationExpression	* coeffs		35273	0					
ANR	35349	UnaryOperator	*		35273	0					
ANR	35350	Identifier	coeffs		35273	1					
ANR	35351	ShiftExpression	( * coeffs + offset ) >> shift		35273	1		>>			
ANR	35352	AdditiveExpression	* coeffs + offset		35273	0		+			
ANR	35353	UnaryOperationExpression	* coeffs		35273	0					
ANR	35354	UnaryOperator	*		35273	0					
ANR	35355	Identifier	coeffs		35273	1					
ANR	35356	Identifier	offset		35273	1					
ANR	35357	Identifier	shift		35273	1					
ANR	35358	ExpressionStatement	coeffs ++	23:16:375:383	35273	1	True				
ANR	35359	PostIncDecOperationExpression	coeffs ++		35273	0					
ANR	35360	Identifier	coeffs		35273	0					
ANR	35361	IncDec	++		35273	1					
ANR	35362	ElseStatement	else		35273	0					
ANR	35363	CompoundStatement		27:11:359:359	35273	0					
ANR	35364	ForStatement	for ( y = 0 ; y < size ; y ++ )		35273	0					
ANR	35365	ForInit	y = 0 ;	31:13:439:444	35273	0	True				
ANR	35366	AssignmentExpression	y = 0		35273	0		=			
ANR	35367	Identifier	y		35273	0					
ANR	35368	PrimaryExpression	0		35273	1					
ANR	35369	Condition	y < size	31:20:446:453	35273	1	True				
ANR	35370	RelationalExpression	y < size		35273	0		<			
ANR	35371	Identifier	y		35273	0					
ANR	35372	Identifier	size		35273	1					
ANR	35373	PostIncDecOperationExpression	y ++	31:30:456:458	35273	2	True				
ANR	35374	Identifier	y		35273	0					
ANR	35375	IncDec	++		35273	1					
ANR	35376	CompoundStatement		29:35:397:397	35273	3					
ANR	35377	ForStatement	for ( x = 0 ; x < size ; x ++ )		35273	0					
ANR	35378	ForInit	x = 0 ;	33:17:481:486	35273	0	True				
ANR	35379	AssignmentExpression	x = 0		35273	0		=			
ANR	35380	Identifier	x		35273	0					
ANR	35381	PrimaryExpression	0		35273	1					
ANR	35382	Condition	x < size	33:24:488:495	35273	1	True				
ANR	35383	RelationalExpression	x < size		35273	0		<			
ANR	35384	Identifier	x		35273	0					
ANR	35385	Identifier	size		35273	1					
ANR	35386	PostIncDecOperationExpression	x ++	33:34:498:500	35273	2	True				
ANR	35387	Identifier	x		35273	0					
ANR	35388	IncDec	++		35273	1					
ANR	35389	CompoundStatement		31:39:439:439	35273	3					
ANR	35390	ExpressionStatement	* coeffs = * coeffs << - shift	35:16:522:549	35273	0	True				
ANR	35391	AssignmentExpression	* coeffs = * coeffs << - shift		35273	0		=			
ANR	35392	UnaryOperationExpression	* coeffs		35273	0					
ANR	35393	UnaryOperator	*		35273	0					
ANR	35394	Identifier	coeffs		35273	1					
ANR	35395	ShiftExpression	* coeffs << - shift		35273	1		<<			
ANR	35396	UnaryOperationExpression	* coeffs		35273	0					
ANR	35397	UnaryOperator	*		35273	0					
ANR	35398	Identifier	coeffs		35273	1					
ANR	35399	UnaryOperationExpression	- shift		35273	1					
ANR	35400	UnaryOperator	-		35273	0					
ANR	35401	Identifier	shift		35273	1					
ANR	35402	ExpressionStatement	coeffs ++	37:16:568:576	35273	1	True				
ANR	35403	PostIncDecOperationExpression	coeffs ++		35273	0					
ANR	35404	Identifier	coeffs		35273	0					
ANR	35405	IncDec	++		35273	1					
ANR	35406	ReturnType	static void FUNC		35273	1					
ANR	35407	Identifier	( dequant )		35273	2					
ANR	35408	Identifier	dequant		35273	3					
ANR	35409	ParameterList	"int16_t * coeffs , int16_t log2_size"		35273	4					
ANR	35410	Parameter	int16_t * coeffs	1:26:26:40	35273	0	True				
ANR	35411	ParameterType	int16_t *		35273	0					
ANR	35412	Identifier	coeffs		35273	1					
ANR	35413	Parameter	int16_t log2_size	1:43:43:59	35273	1	True				
ANR	35414	ParameterType	int16_t		35273	0					
ANR	35415	Identifier	log2_size		35273	1					
ANR	35416	CFGEntryNode	ENTRY		35273		True				
ANR	35417	CFGExitNode	EXIT		35273		True				
ANR	35418	Symbol	BIT_DEPTH		35273						
ANR	35419	Symbol	coeffs		35273						
ANR	35420	Symbol	log2_size		35273						
ANR	35421	Symbol	size		35273						
ANR	35422	Symbol	offset		35273						
ANR	35423	Symbol	* coeffs		35273						
ANR	35424	Symbol	shift		35273						
ANR	35425	Symbol	x		35273						
ANR	35426	Symbol	y		35273						
