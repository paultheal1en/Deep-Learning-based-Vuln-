command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5563835	File	/home/p4ultr4n/workplace/ReVeal/raw_code/monitor_handle_command_0.c								
ANR	5563836	Function	monitor_handle_command	1:0:0:11074							
ANR	5563837	FunctionDef	"monitor_handle_command (Monitor * mon , const char * cmdline)"		5563836	0					
ANR	5563838	CompoundStatement		3:0:71:11074	5563836	0					
ANR	5563839	IdentifierDeclStatement	"const char * p , * pstart , * typestr ;"	5:4:78:110	5563836	0	True				
ANR	5563840	IdentifierDecl	* p		5563836	0					
ANR	5563841	IdentifierDeclType	const char *		5563836	0					
ANR	5563842	Identifier	p		5563836	1					
ANR	5563843	IdentifierDecl	* pstart		5563836	1					
ANR	5563844	IdentifierDeclType	const char *		5563836	0					
ANR	5563845	Identifier	pstart		5563836	1					
ANR	5563846	IdentifierDecl	* typestr		5563836	2					
ANR	5563847	IdentifierDeclType	const char *		5563836	0					
ANR	5563848	Identifier	typestr		5563836	1					
ANR	5563849	IdentifierDeclStatement	char * q ;	7:4:117:124	5563836	1	True				
ANR	5563850	IdentifierDecl	* q		5563836	0					
ANR	5563851	IdentifierDeclType	char *		5563836	0					
ANR	5563852	Identifier	q		5563836	1					
ANR	5563853	IdentifierDeclStatement	"int c , nb_args , len , i , has_arg ;"	9:4:131:162	5563836	2	True				
ANR	5563854	IdentifierDecl	c		5563836	0					
ANR	5563855	IdentifierDeclType	int		5563836	0					
ANR	5563856	Identifier	c		5563836	1					
ANR	5563857	IdentifierDecl	nb_args		5563836	1					
ANR	5563858	IdentifierDeclType	int		5563836	0					
ANR	5563859	Identifier	nb_args		5563836	1					
ANR	5563860	IdentifierDecl	len		5563836	2					
ANR	5563861	IdentifierDeclType	int		5563836	0					
ANR	5563862	Identifier	len		5563836	1					
ANR	5563863	IdentifierDecl	i		5563836	3					
ANR	5563864	IdentifierDeclType	int		5563836	0					
ANR	5563865	Identifier	i		5563836	1					
ANR	5563866	IdentifierDecl	has_arg		5563836	4					
ANR	5563867	IdentifierDeclType	int		5563836	0					
ANR	5563868	Identifier	has_arg		5563836	1					
ANR	5563869	IdentifierDeclStatement	const mon_cmd_t * cmd ;	11:4:169:189	5563836	3	True				
ANR	5563870	IdentifierDecl	* cmd		5563836	0					
ANR	5563871	IdentifierDeclType	const mon_cmd_t *		5563836	0					
ANR	5563872	Identifier	cmd		5563836	1					
ANR	5563873	IdentifierDeclStatement	char cmdname [ 256 ] ;	13:4:196:213	5563836	4	True				
ANR	5563874	IdentifierDecl	cmdname [ 256 ]		5563836	0					
ANR	5563875	IdentifierDeclType	char [ 256 ]		5563836	0					
ANR	5563876	Identifier	cmdname		5563836	1					
ANR	5563877	PrimaryExpression	256		5563836	2					
ANR	5563878	IdentifierDeclStatement	char buf [ 1024 ] ;	15:4:220:234	5563836	5	True				
ANR	5563879	IdentifierDecl	buf [ 1024 ]		5563836	0					
ANR	5563880	IdentifierDeclType	char [ 1024 ]		5563836	0					
ANR	5563881	Identifier	buf		5563836	1					
ANR	5563882	PrimaryExpression	1024		5563836	2					
ANR	5563883	IdentifierDeclStatement	void * str_allocated [ MAX_ARGS ] ;	17:4:241:270	5563836	6	True				
ANR	5563884	IdentifierDecl	* str_allocated [ MAX_ARGS ]		5563836	0					
ANR	5563885	IdentifierDeclType	void * [ MAX_ARGS ]		5563836	0					
ANR	5563886	Identifier	str_allocated		5563836	1					
ANR	5563887	Identifier	MAX_ARGS		5563836	2					
ANR	5563888	IdentifierDeclStatement	void * args [ MAX_ARGS ] ;	19:4:277:297	5563836	7	True				
ANR	5563889	IdentifierDecl	* args [ MAX_ARGS ]		5563836	0					
ANR	5563890	IdentifierDeclType	void * [ MAX_ARGS ]		5563836	0					
ANR	5563891	Identifier	args		5563836	1					
ANR	5563892	Identifier	MAX_ARGS		5563836	2					
ANR	5563893	IdentifierDeclStatement	void ( * handler_0 ) ( Monitor * mon ) ;	21:4:304:335	5563836	8	True				
ANR	5563894	IdentifierDecl	( * handler_0 ) ( Monitor * mon )		5563836	0					
ANR	5563895	IdentifierDeclType	void ( * ) ( Monitor * mon )		5563836	0					
ANR	5563896	Identifier	handler_0		5563836	1					
ANR	5563897	Identifier	mon		5563836	2					
ANR	5563898	IdentifierDeclStatement	"void ( * handler_1 ) ( Monitor * mon , void * arg0 ) ;"	23:4:342:385	5563836	9	True				
ANR	5563899	IdentifierDecl	"( * handler_1 ) ( Monitor * mon , void * arg0 )"		5563836	0					
ANR	5563900	IdentifierDeclType	"void ( * ) ( Monitor * mon , void * arg0 )"		5563836	0					
ANR	5563901	Identifier	handler_1		5563836	1					
ANR	5563902	Identifier	mon		5563836	2					
ANR	5563903	Identifier	arg0		5563836	3					
ANR	5563904	IdentifierDeclStatement	"void ( * handler_2 ) ( Monitor * mon , void * arg0 , void * arg1 ) ;"	25:4:392:447	5563836	10	True				
ANR	5563905	IdentifierDecl	"( * handler_2 ) ( Monitor * mon , void * arg0 , void * arg1 )"		5563836	0					
ANR	5563906	IdentifierDeclType	"void ( * ) ( Monitor * mon , void * arg0 , void * arg1 )"		5563836	0					
ANR	5563907	Identifier	handler_2		5563836	1					
ANR	5563908	Identifier	mon		5563836	2					
ANR	5563909	Identifier	arg0		5563836	3					
ANR	5563910	Identifier	arg1		5563836	4					
ANR	5563911	IdentifierDeclStatement	"void ( * handler_3 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 ) ;"	27:4:454:521	5563836	11	True				
ANR	5563912	IdentifierDecl	"( * handler_3 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 )"		5563836	0					
ANR	5563913	IdentifierDeclType	"void ( * ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 )"		5563836	0					
ANR	5563914	Identifier	handler_3		5563836	1					
ANR	5563915	Identifier	mon		5563836	2					
ANR	5563916	Identifier	arg0		5563836	3					
ANR	5563917	Identifier	arg1		5563836	4					
ANR	5563918	Identifier	arg2		5563836	5					
ANR	5563919	IdentifierDeclStatement	"void ( * handler_4 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 ) ;"	29:4:528:630	5563836	12	True				
ANR	5563920	IdentifierDecl	"( * handler_4 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 )"		5563836	0					
ANR	5563921	IdentifierDeclType	"void ( * ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 )"		5563836	0					
ANR	5563922	Identifier	handler_4		5563836	1					
ANR	5563923	Identifier	mon		5563836	2					
ANR	5563924	Identifier	arg0		5563836	3					
ANR	5563925	Identifier	arg1		5563836	4					
ANR	5563926	Identifier	arg2		5563836	5					
ANR	5563927	Identifier	arg3		5563836	6					
ANR	5563928	IdentifierDeclStatement	"void ( * handler_5 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 , void * arg4 ) ;"	33:4:637:751	5563836	13	True				
ANR	5563929	IdentifierDecl	"( * handler_5 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 , void * arg4 )"		5563836	0					
ANR	5563930	IdentifierDeclType	"void ( * ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 , void * arg4 )"		5563836	0					
ANR	5563931	Identifier	handler_5		5563836	1					
ANR	5563932	Identifier	mon		5563836	2					
ANR	5563933	Identifier	arg0		5563836	3					
ANR	5563934	Identifier	arg1		5563836	4					
ANR	5563935	Identifier	arg2		5563836	5					
ANR	5563936	Identifier	arg3		5563836	6					
ANR	5563937	Identifier	arg4		5563836	7					
ANR	5563938	IdentifierDeclStatement	"void ( * handler_6 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 , void * arg4 , void * arg5 ) ;"	37:4:758:884	5563836	14	True				
ANR	5563939	IdentifierDecl	"( * handler_6 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 , void * arg4 , void * arg5 )"		5563836	0					
ANR	5563940	IdentifierDeclType	"void ( * ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 , void * arg4 , void * arg5 )"		5563836	0					
ANR	5563941	Identifier	handler_6		5563836	1					
ANR	5563942	Identifier	mon		5563836	2					
ANR	5563943	Identifier	arg0		5563836	3					
ANR	5563944	Identifier	arg1		5563836	4					
ANR	5563945	Identifier	arg2		5563836	5					
ANR	5563946	Identifier	arg3		5563836	6					
ANR	5563947	Identifier	arg4		5563836	7					
ANR	5563948	Identifier	arg5		5563836	8					
ANR	5563949	IdentifierDeclStatement	"void ( * handler_7 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 , void * arg4 , void * arg5 , void * arg6 ) ;"	41:4:891:1029	5563836	15	True				
ANR	5563950	IdentifierDecl	"( * handler_7 ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 , void * arg4 , void * arg5 , void * arg6 )"		5563836	0					
ANR	5563951	IdentifierDeclType	"void ( * ) ( Monitor * mon , void * arg0 , void * arg1 , void * arg2 , void * arg3 , void * arg4 , void * arg5 , void * arg6 )"		5563836	0					
ANR	5563952	Identifier	handler_7		5563836	1					
ANR	5563953	Identifier	mon		5563836	2					
ANR	5563954	Identifier	arg0		5563836	3					
ANR	5563955	Identifier	arg1		5563836	4					
ANR	5563956	Identifier	arg2		5563836	5					
ANR	5563957	Identifier	arg3		5563836	6					
ANR	5563958	Identifier	arg4		5563836	7					
ANR	5563959	Identifier	arg5		5563836	8					
ANR	5563960	Identifier	arg6		5563836	9					
ANR	5563961	ExpressionStatement	"monitor_printf ( mon , ""command='%s'\\n"" , cmdline )"	49:4:1052:1098	5563836	16	True				
ANR	5563962	CallExpression	"monitor_printf ( mon , ""command='%s'\\n"" , cmdline )"		5563836	0					
ANR	5563963	Callee	monitor_printf		5563836	0					
ANR	5563964	Identifier	monitor_printf		5563836	0					
ANR	5563965	ArgumentList	mon		5563836	1					
ANR	5563966	Argument	mon		5563836	0					
ANR	5563967	Identifier	mon		5563836	0					
ANR	5563968	Argument	"""command='%s'\\n"""		5563836	1					
ANR	5563969	PrimaryExpression	"""command='%s'\\n"""		5563836	0					
ANR	5563970	Argument	cmdline		5563836	2					
ANR	5563971	Identifier	cmdline		5563836	0					
ANR	5563972	ExpressionStatement	p = cmdline	57:4:1151:1162	5563836	17	True				
ANR	5563973	AssignmentExpression	p = cmdline		5563836	0		=			
ANR	5563974	Identifier	p		5563836	0					
ANR	5563975	Identifier	cmdline		5563836	1					
ANR	5563976	ExpressionStatement	q = cmdname	59:4:1169:1180	5563836	18	True				
ANR	5563977	AssignmentExpression	q = cmdname		5563836	0		=			
ANR	5563978	Identifier	q		5563836	0					
ANR	5563979	Identifier	cmdname		5563836	1					
ANR	5563980	WhileStatement	while ( qemu_isspace ( * p ) )		5563836	19					
ANR	5563981	Condition	qemu_isspace ( * p )	61:11:1194:1209	5563836	0	True				
ANR	5563982	CallExpression	qemu_isspace ( * p )		5563836	0					
ANR	5563983	Callee	qemu_isspace		5563836	0					
ANR	5563984	Identifier	qemu_isspace		5563836	0					
ANR	5563985	ArgumentList	* p		5563836	1					
ANR	5563986	Argument	* p		5563836	0					
ANR	5563987	UnaryOperationExpression	* p		5563836	0					
ANR	5563988	UnaryOperator	*		5563836	0					
ANR	5563989	Identifier	p		5563836	1					
ANR	5563990	ExpressionStatement	p ++	63:8:1221:1224	5563836	1	True				
ANR	5563991	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5563992	Identifier	p		5563836	0					
ANR	5563993	IncDec	++		5563836	1					
ANR	5563994	IfStatement	if ( * p == '\\0' )		5563836	20					
ANR	5563995	Condition	* p == '\\0'	65:8:1235:1244	5563836	0	True				
ANR	5563996	EqualityExpression	* p == '\\0'		5563836	0		==			
ANR	5563997	UnaryOperationExpression	* p		5563836	0					
ANR	5563998	UnaryOperator	*		5563836	0					
ANR	5563999	Identifier	p		5563836	1					
ANR	5564000	PrimaryExpression	'\\0'		5563836	1					
ANR	5564001	ReturnStatement	return ;	67:8:1256:1262	5563836	1	True				
ANR	5564002	ExpressionStatement	pstart = p	69:4:1269:1279	5563836	21	True				
ANR	5564003	AssignmentExpression	pstart = p		5563836	0		=			
ANR	5564004	Identifier	pstart		5563836	0					
ANR	5564005	Identifier	p		5563836	1					
ANR	5564006	WhileStatement	while ( * p != '\\0' && * p != '/' && ! qemu_isspace ( * p ) )		5563836	22					
ANR	5564007	Condition	* p != '\\0' && * p != '/' && ! qemu_isspace ( * p )	71:11:1293:1336	5563836	0	True				
ANR	5564008	AndExpression	* p != '\\0' && * p != '/' && ! qemu_isspace ( * p )		5563836	0		&&			
ANR	5564009	EqualityExpression	* p != '\\0'		5563836	0		!=			
ANR	5564010	UnaryOperationExpression	* p		5563836	0					
ANR	5564011	UnaryOperator	*		5563836	0					
ANR	5564012	Identifier	p		5563836	1					
ANR	5564013	PrimaryExpression	'\\0'		5563836	1					
ANR	5564014	AndExpression	* p != '/' && ! qemu_isspace ( * p )		5563836	1		&&			
ANR	5564015	EqualityExpression	* p != '/'		5563836	0		!=			
ANR	5564016	UnaryOperationExpression	* p		5563836	0					
ANR	5564017	UnaryOperator	*		5563836	0					
ANR	5564018	Identifier	p		5563836	1					
ANR	5564019	PrimaryExpression	'/'		5563836	1					
ANR	5564020	UnaryOperationExpression	! qemu_isspace ( * p )		5563836	1					
ANR	5564021	UnaryOperator	!		5563836	0					
ANR	5564022	CallExpression	qemu_isspace ( * p )		5563836	1					
ANR	5564023	Callee	qemu_isspace		5563836	0					
ANR	5564024	Identifier	qemu_isspace		5563836	0					
ANR	5564025	ArgumentList	* p		5563836	1					
ANR	5564026	Argument	* p		5563836	0					
ANR	5564027	UnaryOperationExpression	* p		5563836	0					
ANR	5564028	UnaryOperator	*		5563836	0					
ANR	5564029	Identifier	p		5563836	1					
ANR	5564030	ExpressionStatement	p ++	73:8:1348:1351	5563836	1	True				
ANR	5564031	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564032	Identifier	p		5563836	0					
ANR	5564033	IncDec	++		5563836	1					
ANR	5564034	ExpressionStatement	len = p - pstart	75:4:1358:1374	5563836	23	True				
ANR	5564035	AssignmentExpression	len = p - pstart		5563836	0		=			
ANR	5564036	Identifier	len		5563836	0					
ANR	5564037	AdditiveExpression	p - pstart		5563836	1		-			
ANR	5564038	Identifier	p		5563836	0					
ANR	5564039	Identifier	pstart		5563836	1					
ANR	5564040	IfStatement	if ( len > sizeof ( cmdname ) - 1 )		5563836	24					
ANR	5564041	Condition	len > sizeof ( cmdname ) - 1	77:8:1385:1409	5563836	0	True				
ANR	5564042	RelationalExpression	len > sizeof ( cmdname ) - 1		5563836	0		>			
ANR	5564043	Identifier	len		5563836	0					
ANR	5564044	AdditiveExpression	sizeof ( cmdname ) - 1		5563836	1		-			
ANR	5564045	SizeofExpression	sizeof ( cmdname )		5563836	0					
ANR	5564046	Sizeof	sizeof		5563836	0					
ANR	5564047	SizeofOperand	cmdname		5563836	1					
ANR	5564048	PrimaryExpression	1		5563836	1					
ANR	5564049	ExpressionStatement	len = sizeof ( cmdname ) - 1	79:8:1421:1446	5563836	1	True				
ANR	5564050	AssignmentExpression	len = sizeof ( cmdname ) - 1		5563836	0		=			
ANR	5564051	Identifier	len		5563836	0					
ANR	5564052	AdditiveExpression	sizeof ( cmdname ) - 1		5563836	1		-			
ANR	5564053	SizeofExpression	sizeof ( cmdname )		5563836	0					
ANR	5564054	Sizeof	sizeof		5563836	0					
ANR	5564055	SizeofOperand	cmdname		5563836	1					
ANR	5564056	PrimaryExpression	1		5563836	1					
ANR	5564057	ExpressionStatement	"memcpy ( cmdname , pstart , len )"	81:4:1453:1481	5563836	25	True				
ANR	5564058	CallExpression	"memcpy ( cmdname , pstart , len )"		5563836	0					
ANR	5564059	Callee	memcpy		5563836	0					
ANR	5564060	Identifier	memcpy		5563836	0					
ANR	5564061	ArgumentList	cmdname		5563836	1					
ANR	5564062	Argument	cmdname		5563836	0					
ANR	5564063	Identifier	cmdname		5563836	0					
ANR	5564064	Argument	pstart		5563836	1					
ANR	5564065	Identifier	pstart		5563836	0					
ANR	5564066	Argument	len		5563836	2					
ANR	5564067	Identifier	len		5563836	0					
ANR	5564068	ExpressionStatement	cmdname [ len ] = '\\0'	83:4:1488:1507	5563836	26	True				
ANR	5564069	AssignmentExpression	cmdname [ len ] = '\\0'		5563836	0		=			
ANR	5564070	ArrayIndexing	cmdname [ len ]		5563836	0					
ANR	5564071	Identifier	cmdname		5563836	0					
ANR	5564072	Identifier	len		5563836	1					
ANR	5564073	PrimaryExpression	'\\0'		5563836	1					
ANR	5564074	ForStatement	for ( cmd = mon_cmds ; cmd -> name != NULL ; cmd ++ )		5563836	27					
ANR	5564075	ForInit	cmd = mon_cmds ;	89:8:1548:1562	5563836	0	True				
ANR	5564076	AssignmentExpression	cmd = mon_cmds		5563836	0		=			
ANR	5564077	Identifier	cmd		5563836	0					
ANR	5564078	Identifier	mon_cmds		5563836	1					
ANR	5564079	Condition	cmd -> name != NULL	89:24:1564:1580	5563836	1	True				
ANR	5564080	EqualityExpression	cmd -> name != NULL		5563836	0		!=			
ANR	5564081	PtrMemberAccess	cmd -> name		5563836	0					
ANR	5564082	Identifier	cmd		5563836	0					
ANR	5564083	Identifier	name		5563836	1					
ANR	5564084	Identifier	NULL		5563836	1					
ANR	5564085	PostIncDecOperationExpression	cmd ++	89:43:1583:1587	5563836	2	True				
ANR	5564086	Identifier	cmd		5563836	0					
ANR	5564087	IncDec	++		5563836	1					
ANR	5564088	CompoundStatement		87:50:1518:1518	5563836	3					
ANR	5564089	IfStatement	"if ( compare_cmd ( cmdname , cmd -> name ) )"		5563836	0					
ANR	5564090	Condition	"compare_cmd ( cmdname , cmd -> name )"	91:12:1605:1635	5563836	0	True				
ANR	5564091	CallExpression	"compare_cmd ( cmdname , cmd -> name )"		5563836	0					
ANR	5564092	Callee	compare_cmd		5563836	0					
ANR	5564093	Identifier	compare_cmd		5563836	0					
ANR	5564094	ArgumentList	cmdname		5563836	1					
ANR	5564095	Argument	cmdname		5563836	0					
ANR	5564096	Identifier	cmdname		5563836	0					
ANR	5564097	Argument	cmd -> name		5563836	1					
ANR	5564098	PtrMemberAccess	cmd -> name		5563836	0					
ANR	5564099	Identifier	cmd		5563836	0					
ANR	5564100	Identifier	name		5563836	1					
ANR	5564101	GotoStatement	goto found ;	93:12:1651:1661	5563836	1	True				
ANR	5564102	Identifier	found		5563836	0					
ANR	5564103	ExpressionStatement	"monitor_printf ( mon , ""unknown command: '%s'\\n"" , cmdname )"	97:4:1675:1730	5563836	28	True				
ANR	5564104	CallExpression	"monitor_printf ( mon , ""unknown command: '%s'\\n"" , cmdname )"		5563836	0					
ANR	5564105	Callee	monitor_printf		5563836	0					
ANR	5564106	Identifier	monitor_printf		5563836	0					
ANR	5564107	ArgumentList	mon		5563836	1					
ANR	5564108	Argument	mon		5563836	0					
ANR	5564109	Identifier	mon		5563836	0					
ANR	5564110	Argument	"""unknown command: '%s'\\n"""		5563836	1					
ANR	5564111	PrimaryExpression	"""unknown command: '%s'\\n"""		5563836	0					
ANR	5564112	Argument	cmdname		5563836	2					
ANR	5564113	Identifier	cmdname		5563836	0					
ANR	5564114	ReturnStatement	return ;	99:4:1737:1743	5563836	29	True				
ANR	5564115	Label	found :	101:1:1747:1752	5563836	30	True				
ANR	5564116	Identifier	found		5563836	0					
ANR	5564117	ForStatement	for ( i = 0 ; i < MAX_ARGS ; i ++ )		5563836	31					
ANR	5564118	ForInit	i = 0 ;	105:8:1765:1770	5563836	0	True				
ANR	5564119	AssignmentExpression	i = 0		5563836	0		=			
ANR	5564120	Identifier	i		5563836	0					
ANR	5564121	PrimaryExpression	0		5563836	1					
ANR	5564122	Condition	i < MAX_ARGS	105:15:1772:1783	5563836	1	True				
ANR	5564123	RelationalExpression	i < MAX_ARGS		5563836	0		<			
ANR	5564124	Identifier	i		5563836	0					
ANR	5564125	Identifier	MAX_ARGS		5563836	1					
ANR	5564126	PostIncDecOperationExpression	i ++	105:29:1786:1788	5563836	2	True				
ANR	5564127	Identifier	i		5563836	0					
ANR	5564128	IncDec	++		5563836	1					
ANR	5564129	ExpressionStatement	str_allocated [ i ] = NULL	107:8:1800:1823	5563836	3	True				
ANR	5564130	AssignmentExpression	str_allocated [ i ] = NULL		5563836	0		=			
ANR	5564131	ArrayIndexing	str_allocated [ i ]		5563836	0					
ANR	5564132	Identifier	str_allocated		5563836	0					
ANR	5564133	Identifier	i		5563836	1					
ANR	5564134	Identifier	NULL		5563836	1					
ANR	5564135	ExpressionStatement	typestr = cmd -> args_type	113:4:1864:1888	5563836	32	True				
ANR	5564136	AssignmentExpression	typestr = cmd -> args_type		5563836	0		=			
ANR	5564137	Identifier	typestr		5563836	0					
ANR	5564138	PtrMemberAccess	cmd -> args_type		5563836	1					
ANR	5564139	Identifier	cmd		5563836	0					
ANR	5564140	Identifier	args_type		5563836	1					
ANR	5564141	ExpressionStatement	nb_args = 0	115:4:1895:1906	5563836	33	True				
ANR	5564142	AssignmentExpression	nb_args = 0		5563836	0		=			
ANR	5564143	Identifier	nb_args		5563836	0					
ANR	5564144	PrimaryExpression	0		5563836	1					
ANR	5564145	ForStatement	for ( ; ; )		5563836	34					
ANR	5564146	CompoundStatement		115:12:1849:1849	5563836	0					
ANR	5564147	ExpressionStatement	c = * typestr	119:8:1932:1944	5563836	0	True				
ANR	5564148	AssignmentExpression	c = * typestr		5563836	0		=			
ANR	5564149	Identifier	c		5563836	0					
ANR	5564150	UnaryOperationExpression	* typestr		5563836	1					
ANR	5564151	UnaryOperator	*		5563836	0					
ANR	5564152	Identifier	typestr		5563836	1					
ANR	5564153	IfStatement	if ( c == '\\0' )		5563836	1					
ANR	5564154	Condition	c == '\\0'	121:12:1959:1967	5563836	0	True				
ANR	5564155	EqualityExpression	c == '\\0'		5563836	0		==			
ANR	5564156	Identifier	c		5563836	0					
ANR	5564157	PrimaryExpression	'\\0'		5563836	1					
ANR	5564158	BreakStatement	break ;	123:12:1983:1988	5563836	1	True				
ANR	5564159	ExpressionStatement	typestr ++	125:8:1999:2008	5563836	2	True				
ANR	5564160	PostIncDecOperationExpression	typestr ++		5563836	0					
ANR	5564161	Identifier	typestr		5563836	0					
ANR	5564162	IncDec	++		5563836	1					
ANR	5564163	SwitchStatement	switch ( c )		5563836	3					
ANR	5564164	Condition	c	127:15:2026:2026	5563836	0	True				
ANR	5564165	Identifier	c		5563836	0					
ANR	5564166	CompoundStatement		125:18:1957:1957	5563836	1					
ANR	5564167	Label	case 'F' :	129:8:2040:2048	5563836	0	True				
ANR	5564168	Label	case 'B' :	131:8:2059:2067	5563836	1	True				
ANR	5564169	Label	case 's' :	133:8:2078:2086	5563836	2	True				
ANR	5564170	CompoundStatement		137:16:2074:2083	5563836	3					
ANR	5564171	IdentifierDeclStatement	int ret ;	137:16:2120:2127	5563836	0	True				
ANR	5564172	IdentifierDecl	ret		5563836	0					
ANR	5564173	IdentifierDeclType	int		5563836	0					
ANR	5564174	Identifier	ret		5563836	1					
ANR	5564175	IdentifierDeclStatement	char * str ;	139:16:2146:2155	5563836	1	True				
ANR	5564176	IdentifierDecl	* str		5563836	0					
ANR	5564177	IdentifierDeclType	char *		5563836	0					
ANR	5564178	Identifier	str		5563836	1					
ANR	5564179	WhileStatement	while ( qemu_isspace ( * p ) )		5563836	2					
ANR	5564180	Condition	qemu_isspace ( * p )	143:23:2183:2198	5563836	0	True				
ANR	5564181	CallExpression	qemu_isspace ( * p )		5563836	0					
ANR	5564182	Callee	qemu_isspace		5563836	0					
ANR	5564183	Identifier	qemu_isspace		5563836	0					
ANR	5564184	ArgumentList	* p		5563836	1					
ANR	5564185	Argument	* p		5563836	0					
ANR	5564186	UnaryOperationExpression	* p		5563836	0					
ANR	5564187	UnaryOperator	*		5563836	0					
ANR	5564188	Identifier	p		5563836	1					
ANR	5564189	ExpressionStatement	p ++	145:20:2222:2225	5563836	1	True				
ANR	5564190	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564191	Identifier	p		5563836	0					
ANR	5564192	IncDec	++		5563836	1					
ANR	5564193	IfStatement	if ( * typestr == '?' )		5563836	3					
ANR	5564194	Condition	* typestr == '?'	147:20:2248:2262	5563836	0	True				
ANR	5564195	EqualityExpression	* typestr == '?'		5563836	0		==			
ANR	5564196	UnaryOperationExpression	* typestr		5563836	0					
ANR	5564197	UnaryOperator	*		5563836	0					
ANR	5564198	Identifier	typestr		5563836	1					
ANR	5564199	PrimaryExpression	'?'		5563836	1					
ANR	5564200	CompoundStatement		145:37:2193:2193	5563836	1					
ANR	5564201	ExpressionStatement	typestr ++	149:20:2288:2297	5563836	0	True				
ANR	5564202	PostIncDecOperationExpression	typestr ++		5563836	0					
ANR	5564203	Identifier	typestr		5563836	0					
ANR	5564204	IncDec	++		5563836	1					
ANR	5564205	IfStatement	if ( * p == '\\0' )		5563836	1					
ANR	5564206	Condition	* p == '\\0'	151:24:2324:2333	5563836	0	True				
ANR	5564207	EqualityExpression	* p == '\\0'		5563836	0		==			
ANR	5564208	UnaryOperationExpression	* p		5563836	0					
ANR	5564209	UnaryOperator	*		5563836	0					
ANR	5564210	Identifier	p		5563836	1					
ANR	5564211	PrimaryExpression	'\\0'		5563836	1					
ANR	5564212	CompoundStatement		149:36:2264:2264	5563836	1					
ANR	5564213	ExpressionStatement	str = NULL	155:24:2428:2438	5563836	0	True				
ANR	5564214	AssignmentExpression	str = NULL		5563836	0		=			
ANR	5564215	Identifier	str		5563836	0					
ANR	5564216	Identifier	NULL		5563836	1					
ANR	5564217	GotoStatement	goto add_str ;	157:24:2465:2477	5563836	1	True				
ANR	5564218	Identifier	add_str		5563836	0					
ANR	5564219	ExpressionStatement	"ret = get_str ( buf , sizeof ( buf ) , & p )"	163:16:2538:2573	5563836	4	True				
ANR	5564220	AssignmentExpression	"ret = get_str ( buf , sizeof ( buf ) , & p )"		5563836	0		=			
ANR	5564221	Identifier	ret		5563836	0					
ANR	5564222	CallExpression	"get_str ( buf , sizeof ( buf ) , & p )"		5563836	1					
ANR	5564223	Callee	get_str		5563836	0					
ANR	5564224	Identifier	get_str		5563836	0					
ANR	5564225	ArgumentList	buf		5563836	1					
ANR	5564226	Argument	buf		5563836	0					
ANR	5564227	Identifier	buf		5563836	0					
ANR	5564228	Argument	sizeof ( buf )		5563836	1					
ANR	5564229	SizeofExpression	sizeof ( buf )		5563836	0					
ANR	5564230	Sizeof	sizeof		5563836	0					
ANR	5564231	SizeofOperand	buf		5563836	1					
ANR	5564232	Argument	& p		5563836	2					
ANR	5564233	UnaryOperationExpression	& p		5563836	0					
ANR	5564234	UnaryOperator	&		5563836	0					
ANR	5564235	Identifier	p		5563836	1					
ANR	5564236	IfStatement	if ( ret < 0 )		5563836	5					
ANR	5564237	Condition	ret < 0	165:20:2596:2602	5563836	0	True				
ANR	5564238	RelationalExpression	ret < 0		5563836	0		<			
ANR	5564239	Identifier	ret		5563836	0					
ANR	5564240	PrimaryExpression	0		5563836	1					
ANR	5564241	CompoundStatement		163:29:2533:2533	5563836	1					
ANR	5564242	SwitchStatement	switch ( c )		5563836	0					
ANR	5564243	Condition	c	167:27:2635:2635	5563836	0	True				
ANR	5564244	Identifier	c		5563836	0					
ANR	5564245	CompoundStatement		165:30:2566:2566	5563836	1					
ANR	5564246	Label	case 'F' :	169:20:2661:2669	5563836	0	True				
ANR	5564247	ExpressionStatement	"monitor_printf ( mon , ""%s: filename expected\\n"" , cmdname )"	171:24:2696:2791	5563836	1	True				
ANR	5564248	CallExpression	"monitor_printf ( mon , ""%s: filename expected\\n"" , cmdname )"		5563836	0					
ANR	5564249	Callee	monitor_printf		5563836	0					
ANR	5564250	Identifier	monitor_printf		5563836	0					
ANR	5564251	ArgumentList	mon		5563836	1					
ANR	5564252	Argument	mon		5563836	0					
ANR	5564253	Identifier	mon		5563836	0					
ANR	5564254	Argument	"""%s: filename expected\\n"""		5563836	1					
ANR	5564255	PrimaryExpression	"""%s: filename expected\\n"""		5563836	0					
ANR	5564256	Argument	cmdname		5563836	2					
ANR	5564257	Identifier	cmdname		5563836	0					
ANR	5564258	BreakStatement	break ;	175:24:2818:2823	5563836	2	True				
ANR	5564259	Label	case 'B' :	177:20:2846:2854	5563836	3	True				
ANR	5564260	ExpressionStatement	"monitor_printf ( mon , ""%s: block device name expected\\n"" , cmdname )"	179:24:2881:2985	5563836	4	True				
ANR	5564261	CallExpression	"monitor_printf ( mon , ""%s: block device name expected\\n"" , cmdname )"		5563836	0					
ANR	5564262	Callee	monitor_printf		5563836	0					
ANR	5564263	Identifier	monitor_printf		5563836	0					
ANR	5564264	ArgumentList	mon		5563836	1					
ANR	5564265	Argument	mon		5563836	0					
ANR	5564266	Identifier	mon		5563836	0					
ANR	5564267	Argument	"""%s: block device name expected\\n"""		5563836	1					
ANR	5564268	PrimaryExpression	"""%s: block device name expected\\n"""		5563836	0					
ANR	5564269	Argument	cmdname		5563836	2					
ANR	5564270	Identifier	cmdname		5563836	0					
ANR	5564271	BreakStatement	break ;	183:24:3012:3017	5563836	5	True				
ANR	5564272	Label	default :	185:20:3040:3047	5563836	6	True				
ANR	5564273	Identifier	default		5563836	0					
ANR	5564274	ExpressionStatement	"monitor_printf ( mon , ""%s: string expected\\n"" , cmdname )"	187:24:3074:3127	5563836	7	True				
ANR	5564275	CallExpression	"monitor_printf ( mon , ""%s: string expected\\n"" , cmdname )"		5563836	0					
ANR	5564276	Callee	monitor_printf		5563836	0					
ANR	5564277	Identifier	monitor_printf		5563836	0					
ANR	5564278	ArgumentList	mon		5563836	1					
ANR	5564279	Argument	mon		5563836	0					
ANR	5564280	Identifier	mon		5563836	0					
ANR	5564281	Argument	"""%s: string expected\\n"""		5563836	1					
ANR	5564282	PrimaryExpression	"""%s: string expected\\n"""		5563836	0					
ANR	5564283	Argument	cmdname		5563836	2					
ANR	5564284	Identifier	cmdname		5563836	0					
ANR	5564285	BreakStatement	break ;	189:24:3154:3159	5563836	8	True				
ANR	5564286	GotoStatement	goto fail ;	193:20:3205:3214	5563836	1	True				
ANR	5564287	Identifier	fail		5563836	0					
ANR	5564288	ExpressionStatement	str = qemu_malloc ( strlen ( buf ) + 1 )	197:16:3252:3286	5563836	6	True				
ANR	5564289	AssignmentExpression	str = qemu_malloc ( strlen ( buf ) + 1 )		5563836	0		=			
ANR	5564290	Identifier	str		5563836	0					
ANR	5564291	CallExpression	qemu_malloc ( strlen ( buf ) + 1 )		5563836	1					
ANR	5564292	Callee	qemu_malloc		5563836	0					
ANR	5564293	Identifier	qemu_malloc		5563836	0					
ANR	5564294	ArgumentList	strlen ( buf ) + 1		5563836	1					
ANR	5564295	Argument	strlen ( buf ) + 1		5563836	0					
ANR	5564296	AdditiveExpression	strlen ( buf ) + 1		5563836	0		+			
ANR	5564297	CallExpression	strlen ( buf )		5563836	0					
ANR	5564298	Callee	strlen		5563836	0					
ANR	5564299	Identifier	strlen		5563836	0					
ANR	5564300	ArgumentList	buf		5563836	1					
ANR	5564301	Argument	buf		5563836	0					
ANR	5564302	Identifier	buf		5563836	0					
ANR	5564303	PrimaryExpression	1		5563836	1					
ANR	5564304	ExpressionStatement	"pstrcpy ( str , sizeof ( buf ) , buf )"	199:16:3305:3335	5563836	7	True				
ANR	5564305	CallExpression	"pstrcpy ( str , sizeof ( buf ) , buf )"		5563836	0					
ANR	5564306	Callee	pstrcpy		5563836	0					
ANR	5564307	Identifier	pstrcpy		5563836	0					
ANR	5564308	ArgumentList	str		5563836	1					
ANR	5564309	Argument	str		5563836	0					
ANR	5564310	Identifier	str		5563836	0					
ANR	5564311	Argument	sizeof ( buf )		5563836	1					
ANR	5564312	SizeofExpression	sizeof ( buf )		5563836	0					
ANR	5564313	Sizeof	sizeof		5563836	0					
ANR	5564314	SizeofOperand	buf		5563836	1					
ANR	5564315	Argument	buf		5563836	2					
ANR	5564316	Identifier	buf		5563836	0					
ANR	5564317	ExpressionStatement	str_allocated [ nb_args ] = str	201:16:3354:3382	5563836	8	True				
ANR	5564318	AssignmentExpression	str_allocated [ nb_args ] = str		5563836	0		=			
ANR	5564319	ArrayIndexing	str_allocated [ nb_args ]		5563836	0					
ANR	5564320	Identifier	str_allocated		5563836	0					
ANR	5564321	Identifier	nb_args		5563836	1					
ANR	5564322	Identifier	str		5563836	1					
ANR	5564323	Label	add_str :	203:12:3397:3404	5563836	9	True				
ANR	5564324	Identifier	add_str		5563836	0					
ANR	5564325	IfStatement	if ( nb_args >= MAX_ARGS )		5563836	10					
ANR	5564326	Condition	nb_args >= MAX_ARGS	205:20:3427:3445	5563836	0	True				
ANR	5564327	RelationalExpression	nb_args >= MAX_ARGS		5563836	0		>=			
ANR	5564328	Identifier	nb_args		5563836	0					
ANR	5564329	Identifier	MAX_ARGS		5563836	1					
ANR	5564330	CompoundStatement		203:41:3376:3376	5563836	1					
ANR	5564331	Label	error_args :	207:16:3467:3477	5563836	0	True				
ANR	5564332	Identifier	error_args		5563836	0					
ANR	5564333	ExpressionStatement	"monitor_printf ( mon , ""%s: too many arguments\\n"" , cmdname )"	209:20:3500:3556	5563836	1	True				
ANR	5564334	CallExpression	"monitor_printf ( mon , ""%s: too many arguments\\n"" , cmdname )"		5563836	0					
ANR	5564335	Callee	monitor_printf		5563836	0					
ANR	5564336	Identifier	monitor_printf		5563836	0					
ANR	5564337	ArgumentList	mon		5563836	1					
ANR	5564338	Argument	mon		5563836	0					
ANR	5564339	Identifier	mon		5563836	0					
ANR	5564340	Argument	"""%s: too many arguments\\n"""		5563836	1					
ANR	5564341	PrimaryExpression	"""%s: too many arguments\\n"""		5563836	0					
ANR	5564342	Argument	cmdname		5563836	2					
ANR	5564343	Identifier	cmdname		5563836	0					
ANR	5564344	GotoStatement	goto fail ;	211:20:3579:3588	5563836	2	True				
ANR	5564345	Identifier	fail		5563836	0					
ANR	5564346	ExpressionStatement	args [ nb_args ++ ] = str	215:16:3626:3647	5563836	11	True				
ANR	5564347	AssignmentExpression	args [ nb_args ++ ] = str		5563836	0		=			
ANR	5564348	ArrayIndexing	args [ nb_args ++ ]		5563836	0					
ANR	5564349	Identifier	args		5563836	0					
ANR	5564350	PostIncDecOperationExpression	nb_args ++		5563836	1					
ANR	5564351	Identifier	nb_args		5563836	0					
ANR	5564352	IncDec	++		5563836	1					
ANR	5564353	Identifier	str		5563836	1					
ANR	5564354	BreakStatement	break ;	219:12:3677:3682	5563836	4	True				
ANR	5564355	Label	case '/' :	221:8:3693:3701	5563836	5	True				
ANR	5564356	CompoundStatement		223:16:3663:3686	5563836	6					
ANR	5564357	IdentifierDeclStatement	"int count , format , size ;"	225:16:3735:3758	5563836	0	True				
ANR	5564358	IdentifierDecl	count		5563836	0					
ANR	5564359	IdentifierDeclType	int		5563836	0					
ANR	5564360	Identifier	count		5563836	1					
ANR	5564361	IdentifierDecl	format		5563836	1					
ANR	5564362	IdentifierDeclType	int		5563836	0					
ANR	5564363	Identifier	format		5563836	1					
ANR	5564364	IdentifierDecl	size		5563836	2					
ANR	5564365	IdentifierDeclType	int		5563836	0					
ANR	5564366	Identifier	size		5563836	1					
ANR	5564367	WhileStatement	while ( qemu_isspace ( * p ) )		5563836	1					
ANR	5564368	Condition	qemu_isspace ( * p )	229:23:3786:3801	5563836	0	True				
ANR	5564369	CallExpression	qemu_isspace ( * p )		5563836	0					
ANR	5564370	Callee	qemu_isspace		5563836	0					
ANR	5564371	Identifier	qemu_isspace		5563836	0					
ANR	5564372	ArgumentList	* p		5563836	1					
ANR	5564373	Argument	* p		5563836	0					
ANR	5564374	UnaryOperationExpression	* p		5563836	0					
ANR	5564375	UnaryOperator	*		5563836	0					
ANR	5564376	Identifier	p		5563836	1					
ANR	5564377	ExpressionStatement	p ++	231:20:3825:3828	5563836	1	True				
ANR	5564378	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564379	Identifier	p		5563836	0					
ANR	5564380	IncDec	++		5563836	1					
ANR	5564381	IfStatement	if ( * p == '/' )		5563836	2					
ANR	5564382	Condition	* p == '/'	233:20:3851:3859	5563836	0	True				
ANR	5564383	EqualityExpression	* p == '/'		5563836	0		==			
ANR	5564384	UnaryOperationExpression	* p		5563836	0					
ANR	5564385	UnaryOperator	*		5563836	0					
ANR	5564386	Identifier	p		5563836	1					
ANR	5564387	PrimaryExpression	'/'		5563836	1					
ANR	5564388	CompoundStatement		231:31:3790:3790	5563836	1					
ANR	5564389	ExpressionStatement	p ++	237:20:3925:3928	5563836	0	True				
ANR	5564390	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564391	Identifier	p		5563836	0					
ANR	5564392	IncDec	++		5563836	1					
ANR	5564393	ExpressionStatement	count = 1	239:20:3951:3960	5563836	1	True				
ANR	5564394	AssignmentExpression	count = 1		5563836	0		=			
ANR	5564395	Identifier	count		5563836	0					
ANR	5564396	PrimaryExpression	1		5563836	1					
ANR	5564397	IfStatement	if ( qemu_isdigit ( * p ) )		5563836	2					
ANR	5564398	Condition	qemu_isdigit ( * p )	241:24:3987:4002	5563836	0	True				
ANR	5564399	CallExpression	qemu_isdigit ( * p )		5563836	0					
ANR	5564400	Callee	qemu_isdigit		5563836	0					
ANR	5564401	Identifier	qemu_isdigit		5563836	0					
ANR	5564402	ArgumentList	* p		5563836	1					
ANR	5564403	Argument	* p		5563836	0					
ANR	5564404	UnaryOperationExpression	* p		5563836	0					
ANR	5564405	UnaryOperator	*		5563836	0					
ANR	5564406	Identifier	p		5563836	1					
ANR	5564407	CompoundStatement		239:42:3933:3933	5563836	1					
ANR	5564408	ExpressionStatement	count = 0	243:24:4032:4041	5563836	0	True				
ANR	5564409	AssignmentExpression	count = 0		5563836	0		=			
ANR	5564410	Identifier	count		5563836	0					
ANR	5564411	PrimaryExpression	0		5563836	1					
ANR	5564412	WhileStatement	while ( qemu_isdigit ( * p ) )		5563836	1					
ANR	5564413	Condition	qemu_isdigit ( * p )	245:31:4075:4090	5563836	0	True				
ANR	5564414	CallExpression	qemu_isdigit ( * p )		5563836	0					
ANR	5564415	Callee	qemu_isdigit		5563836	0					
ANR	5564416	Identifier	qemu_isdigit		5563836	0					
ANR	5564417	ArgumentList	* p		5563836	1					
ANR	5564418	Argument	* p		5563836	0					
ANR	5564419	UnaryOperationExpression	* p		5563836	0					
ANR	5564420	UnaryOperator	*		5563836	0					
ANR	5564421	Identifier	p		5563836	1					
ANR	5564422	CompoundStatement		243:49:4021:4021	5563836	1					
ANR	5564423	ExpressionStatement	count = count * 10 + ( * p - '0' )	247:28:4124:4155	5563836	0	True				
ANR	5564424	AssignmentExpression	count = count * 10 + ( * p - '0' )		5563836	0		=			
ANR	5564425	Identifier	count		5563836	0					
ANR	5564426	AdditiveExpression	count * 10 + ( * p - '0' )		5563836	1		+			
ANR	5564427	MultiplicativeExpression	count * 10		5563836	0		*			
ANR	5564428	Identifier	count		5563836	0					
ANR	5564429	PrimaryExpression	10		5563836	1					
ANR	5564430	AdditiveExpression	* p - '0'		5563836	1		-			
ANR	5564431	UnaryOperationExpression	* p		5563836	0					
ANR	5564432	UnaryOperator	*		5563836	0					
ANR	5564433	Identifier	p		5563836	1					
ANR	5564434	PrimaryExpression	'0'		5563836	1					
ANR	5564435	ExpressionStatement	p ++	249:28:4186:4189	5563836	1	True				
ANR	5564436	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564437	Identifier	p		5563836	0					
ANR	5564438	IncDec	++		5563836	1					
ANR	5564439	ExpressionStatement	size = - 1	255:20:4262:4271	5563836	3	True				
ANR	5564440	AssignmentExpression	size = - 1		5563836	0		=			
ANR	5564441	Identifier	size		5563836	0					
ANR	5564442	UnaryOperationExpression	- 1		5563836	1					
ANR	5564443	UnaryOperator	-		5563836	0					
ANR	5564444	PrimaryExpression	1		5563836	1					
ANR	5564445	ExpressionStatement	format = - 1	257:20:4294:4305	5563836	4	True				
ANR	5564446	AssignmentExpression	format = - 1		5563836	0		=			
ANR	5564447	Identifier	format		5563836	0					
ANR	5564448	UnaryOperationExpression	- 1		5563836	1					
ANR	5564449	UnaryOperator	-		5563836	0					
ANR	5564450	PrimaryExpression	1		5563836	1					
ANR	5564451	ForStatement	for ( ; ; )		5563836	5					
ANR	5564452	CompoundStatement		257:28:4264:4264	5563836	0					
ANR	5564453	SwitchStatement	switch ( * p )		5563836	0					
ANR	5564454	Condition	* p	261:31:4370:4371	5563836	0	True				
ANR	5564455	UnaryOperationExpression	* p		5563836	0					
ANR	5564456	UnaryOperator	*		5563836	0					
ANR	5564457	Identifier	p		5563836	1					
ANR	5564458	CompoundStatement		259:35:4302:4302	5563836	1					
ANR	5564459	Label	case 'o' :	263:24:4401:4409	5563836	0	True				
ANR	5564460	Label	case 'd' :	265:24:4436:4444	5563836	1	True				
ANR	5564461	Label	case 'u' :	267:24:4471:4479	5563836	2	True				
ANR	5564462	Label	case 'x' :	269:24:4506:4514	5563836	3	True				
ANR	5564463	Label	case 'i' :	271:24:4541:4549	5563836	4	True				
ANR	5564464	Label	case 'c' :	273:24:4576:4584	5563836	5	True				
ANR	5564465	ExpressionStatement	format = * p ++	275:28:4615:4628	5563836	6	True				
ANR	5564466	AssignmentExpression	format = * p ++		5563836	0		=			
ANR	5564467	Identifier	format		5563836	0					
ANR	5564468	UnaryOperationExpression	* p ++		5563836	1					
ANR	5564469	UnaryOperator	*		5563836	0					
ANR	5564470	PostIncDecOperationExpression	p ++		5563836	1					
ANR	5564471	Identifier	p		5563836	0					
ANR	5564472	IncDec	++		5563836	1					
ANR	5564473	BreakStatement	break ;	277:28:4659:4664	5563836	7	True				
ANR	5564474	Label	case 'b' :	279:24:4691:4699	5563836	8	True				
ANR	5564475	ExpressionStatement	size = 1	281:28:4730:4738	5563836	9	True				
ANR	5564476	AssignmentExpression	size = 1		5563836	0		=			
ANR	5564477	Identifier	size		5563836	0					
ANR	5564478	PrimaryExpression	1		5563836	1					
ANR	5564479	ExpressionStatement	p ++	283:28:4769:4772	5563836	10	True				
ANR	5564480	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564481	Identifier	p		5563836	0					
ANR	5564482	IncDec	++		5563836	1					
ANR	5564483	BreakStatement	break ;	285:28:4803:4808	5563836	11	True				
ANR	5564484	Label	case 'h' :	287:24:4835:4843	5563836	12	True				
ANR	5564485	ExpressionStatement	size = 2	289:28:4874:4882	5563836	13	True				
ANR	5564486	AssignmentExpression	size = 2		5563836	0		=			
ANR	5564487	Identifier	size		5563836	0					
ANR	5564488	PrimaryExpression	2		5563836	1					
ANR	5564489	ExpressionStatement	p ++	291:28:4913:4916	5563836	14	True				
ANR	5564490	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564491	Identifier	p		5563836	0					
ANR	5564492	IncDec	++		5563836	1					
ANR	5564493	BreakStatement	break ;	293:28:4947:4952	5563836	15	True				
ANR	5564494	Label	case 'w' :	295:24:4979:4987	5563836	16	True				
ANR	5564495	ExpressionStatement	size = 4	297:28:5018:5026	5563836	17	True				
ANR	5564496	AssignmentExpression	size = 4		5563836	0		=			
ANR	5564497	Identifier	size		5563836	0					
ANR	5564498	PrimaryExpression	4		5563836	1					
ANR	5564499	ExpressionStatement	p ++	299:28:5057:5060	5563836	18	True				
ANR	5564500	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564501	Identifier	p		5563836	0					
ANR	5564502	IncDec	++		5563836	1					
ANR	5564503	BreakStatement	break ;	301:28:5091:5096	5563836	19	True				
ANR	5564504	Label	case 'g' :	303:24:5123:5131	5563836	20	True				
ANR	5564505	Label	case 'L' :	305:24:5158:5166	5563836	21	True				
ANR	5564506	ExpressionStatement	size = 8	307:28:5197:5205	5563836	22	True				
ANR	5564507	AssignmentExpression	size = 8		5563836	0		=			
ANR	5564508	Identifier	size		5563836	0					
ANR	5564509	PrimaryExpression	8		5563836	1					
ANR	5564510	ExpressionStatement	p ++	309:28:5236:5239	5563836	23	True				
ANR	5564511	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564512	Identifier	p		5563836	0					
ANR	5564513	IncDec	++		5563836	1					
ANR	5564514	BreakStatement	break ;	311:28:5270:5275	5563836	24	True				
ANR	5564515	Label	default :	313:24:5302:5309	5563836	25	True				
ANR	5564516	Identifier	default		5563836	0					
ANR	5564517	GotoStatement	goto next ;	315:28:5340:5349	5563836	26	True				
ANR	5564518	Identifier	next		5563836	0					
ANR	5564519	Label	next :	321:16:5418:5422	5563836	6	True				
ANR	5564520	Identifier	next		5563836	0					
ANR	5564521	IfStatement	if ( * p != '\\0' && ! qemu_isspace ( * p ) )		5563836	7					
ANR	5564522	Condition	* p != '\\0' && ! qemu_isspace ( * p )	323:24:5449:5479	5563836	0	True				
ANR	5564523	AndExpression	* p != '\\0' && ! qemu_isspace ( * p )		5563836	0		&&			
ANR	5564524	EqualityExpression	* p != '\\0'		5563836	0		!=			
ANR	5564525	UnaryOperationExpression	* p		5563836	0					
ANR	5564526	UnaryOperator	*		5563836	0					
ANR	5564527	Identifier	p		5563836	1					
ANR	5564528	PrimaryExpression	'\\0'		5563836	1					
ANR	5564529	UnaryOperationExpression	! qemu_isspace ( * p )		5563836	1					
ANR	5564530	UnaryOperator	!		5563836	0					
ANR	5564531	CallExpression	qemu_isspace ( * p )		5563836	1					
ANR	5564532	Callee	qemu_isspace		5563836	0					
ANR	5564533	Identifier	qemu_isspace		5563836	0					
ANR	5564534	ArgumentList	* p		5563836	1					
ANR	5564535	Argument	* p		5563836	0					
ANR	5564536	UnaryOperationExpression	* p		5563836	0					
ANR	5564537	UnaryOperator	*		5563836	0					
ANR	5564538	Identifier	p		5563836	1					
ANR	5564539	CompoundStatement		321:57:5410:5410	5563836	1					
ANR	5564540	ExpressionStatement	"monitor_printf ( mon , ""invalid char in format: '%c'\\n"" , * p )"	325:24:5509:5606	5563836	0	True				
ANR	5564541	CallExpression	"monitor_printf ( mon , ""invalid char in format: '%c'\\n"" , * p )"		5563836	0					
ANR	5564542	Callee	monitor_printf		5563836	0					
ANR	5564543	Identifier	monitor_printf		5563836	0					
ANR	5564544	ArgumentList	mon		5563836	1					
ANR	5564545	Argument	mon		5563836	0					
ANR	5564546	Identifier	mon		5563836	0					
ANR	5564547	Argument	"""invalid char in format: '%c'\\n"""		5563836	1					
ANR	5564548	PrimaryExpression	"""invalid char in format: '%c'\\n"""		5563836	0					
ANR	5564549	Argument	* p		5563836	2					
ANR	5564550	UnaryOperationExpression	* p		5563836	0					
ANR	5564551	UnaryOperator	*		5563836	0					
ANR	5564552	Identifier	p		5563836	1					
ANR	5564553	GotoStatement	goto fail ;	329:24:5633:5642	5563836	1	True				
ANR	5564554	Identifier	fail		5563836	0					
ANR	5564555	IfStatement	if ( format < 0 )		5563836	8					
ANR	5564556	Condition	format < 0	333:24:5692:5701	5563836	0	True				
ANR	5564557	RelationalExpression	format < 0		5563836	0		<			
ANR	5564558	Identifier	format		5563836	0					
ANR	5564559	PrimaryExpression	0		5563836	1					
ANR	5564560	ExpressionStatement	format = default_fmt_format	335:24:5729:5756	5563836	1	True				
ANR	5564561	AssignmentExpression	format = default_fmt_format		5563836	0		=			
ANR	5564562	Identifier	format		5563836	0					
ANR	5564563	Identifier	default_fmt_format		5563836	1					
ANR	5564564	IfStatement	if ( format != 'i' )		5563836	9					
ANR	5564565	Condition	format != 'i'	337:24:5783:5795	5563836	0	True				
ANR	5564566	EqualityExpression	format != 'i'		5563836	0		!=			
ANR	5564567	Identifier	format		5563836	0					
ANR	5564568	PrimaryExpression	'i'		5563836	1					
ANR	5564569	CompoundStatement		335:39:5726:5726	5563836	1					
ANR	5564570	IfStatement	if ( size < 0 )		5563836	0					
ANR	5564571	Condition	size < 0	341:28:5908:5915	5563836	0	True				
ANR	5564572	RelationalExpression	size < 0		5563836	0		<			
ANR	5564573	Identifier	size		5563836	0					
ANR	5564574	PrimaryExpression	0		5563836	1					
ANR	5564575	ExpressionStatement	size = default_fmt_size	343:28:5947:5970	5563836	1	True				
ANR	5564576	AssignmentExpression	size = default_fmt_size		5563836	0		=			
ANR	5564577	Identifier	size		5563836	0					
ANR	5564578	Identifier	default_fmt_size		5563836	1					
ANR	5564579	ExpressionStatement	default_fmt_size = size	345:24:5997:6020	5563836	1	True				
ANR	5564580	AssignmentExpression	default_fmt_size = size		5563836	0		=			
ANR	5564581	Identifier	default_fmt_size		5563836	0					
ANR	5564582	Identifier	size		5563836	1					
ANR	5564583	ExpressionStatement	default_fmt_format = format	349:20:6066:6093	5563836	10	True				
ANR	5564584	AssignmentExpression	default_fmt_format = format		5563836	0		=			
ANR	5564585	Identifier	default_fmt_format		5563836	0					
ANR	5564586	Identifier	format		5563836	1					
ANR	5564587	ElseStatement	else		5563836	0					
ANR	5564588	CompoundStatement		349:23:6047:6047	5563836	0					
ANR	5564589	ExpressionStatement	count = 1	353:20:6142:6151	5563836	0	True				
ANR	5564590	AssignmentExpression	count = 1		5563836	0		=			
ANR	5564591	Identifier	count		5563836	0					
ANR	5564592	PrimaryExpression	1		5563836	1					
ANR	5564593	ExpressionStatement	format = default_fmt_format	355:20:6174:6201	5563836	1	True				
ANR	5564594	AssignmentExpression	format = default_fmt_format		5563836	0		=			
ANR	5564595	Identifier	format		5563836	0					
ANR	5564596	Identifier	default_fmt_format		5563836	1					
ANR	5564597	IfStatement	if ( format != 'i' )		5563836	2					
ANR	5564598	Condition	format != 'i'	357:24:6228:6240	5563836	0	True				
ANR	5564599	EqualityExpression	format != 'i'		5563836	0		!=			
ANR	5564600	Identifier	format		5563836	0					
ANR	5564601	PrimaryExpression	'i'		5563836	1					
ANR	5564602	CompoundStatement		355:39:6171:6171	5563836	1					
ANR	5564603	ExpressionStatement	size = default_fmt_size	359:24:6270:6293	5563836	0	True				
ANR	5564604	AssignmentExpression	size = default_fmt_size		5563836	0		=			
ANR	5564605	Identifier	size		5563836	0					
ANR	5564606	Identifier	default_fmt_size		5563836	1					
ANR	5564607	ElseStatement	else		5563836	0					
ANR	5564608	CompoundStatement		359:27:6251:6251	5563836	0					
ANR	5564609	ExpressionStatement	size = - 1	363:24:6350:6359	5563836	0	True				
ANR	5564610	AssignmentExpression	size = - 1		5563836	0		=			
ANR	5564611	Identifier	size		5563836	0					
ANR	5564612	UnaryOperationExpression	- 1		5563836	1					
ANR	5564613	UnaryOperator	-		5563836	0					
ANR	5564614	PrimaryExpression	1		5563836	1					
ANR	5564615	IfStatement	if ( nb_args + 3 > MAX_ARGS )		5563836	3					
ANR	5564616	Condition	nb_args + 3 > MAX_ARGS	369:20:6424:6445	5563836	0	True				
ANR	5564617	RelationalExpression	nb_args + 3 > MAX_ARGS		5563836	0		>			
ANR	5564618	AdditiveExpression	nb_args + 3		5563836	0		+			
ANR	5564619	Identifier	nb_args		5563836	0					
ANR	5564620	PrimaryExpression	3		5563836	1					
ANR	5564621	Identifier	MAX_ARGS		5563836	1					
ANR	5564622	GotoStatement	goto error_args ;	371:20:6469:6484	5563836	1	True				
ANR	5564623	Identifier	error_args		5563836	0					
ANR	5564624	ExpressionStatement	args [ nb_args ++ ] = ( void * ) ( long ) count	373:16:6503:6539	5563836	4	True				
ANR	5564625	AssignmentExpression	args [ nb_args ++ ] = ( void * ) ( long ) count		5563836	0		=			
ANR	5564626	ArrayIndexing	args [ nb_args ++ ]		5563836	0					
ANR	5564627	Identifier	args		5563836	0					
ANR	5564628	PostIncDecOperationExpression	nb_args ++		5563836	1					
ANR	5564629	Identifier	nb_args		5563836	0					
ANR	5564630	IncDec	++		5563836	1					
ANR	5564631	CastExpression	( void * ) ( long ) count		5563836	1					
ANR	5564632	CastTarget	void *		5563836	0					
ANR	5564633	CastExpression	( long ) count		5563836	1					
ANR	5564634	CastTarget	long		5563836	0					
ANR	5564635	Identifier	count		5563836	1					
ANR	5564636	ExpressionStatement	args [ nb_args ++ ] = ( void * ) ( long ) format	375:16:6558:6595	5563836	5	True				
ANR	5564637	AssignmentExpression	args [ nb_args ++ ] = ( void * ) ( long ) format		5563836	0		=			
ANR	5564638	ArrayIndexing	args [ nb_args ++ ]		5563836	0					
ANR	5564639	Identifier	args		5563836	0					
ANR	5564640	PostIncDecOperationExpression	nb_args ++		5563836	1					
ANR	5564641	Identifier	nb_args		5563836	0					
ANR	5564642	IncDec	++		5563836	1					
ANR	5564643	CastExpression	( void * ) ( long ) format		5563836	1					
ANR	5564644	CastTarget	void *		5563836	0					
ANR	5564645	CastExpression	( long ) format		5563836	1					
ANR	5564646	CastTarget	long		5563836	0					
ANR	5564647	Identifier	format		5563836	1					
ANR	5564648	ExpressionStatement	args [ nb_args ++ ] = ( void * ) ( long ) size	377:16:6614:6649	5563836	6	True				
ANR	5564649	AssignmentExpression	args [ nb_args ++ ] = ( void * ) ( long ) size		5563836	0		=			
ANR	5564650	ArrayIndexing	args [ nb_args ++ ]		5563836	0					
ANR	5564651	Identifier	args		5563836	0					
ANR	5564652	PostIncDecOperationExpression	nb_args ++		5563836	1					
ANR	5564653	Identifier	nb_args		5563836	0					
ANR	5564654	IncDec	++		5563836	1					
ANR	5564655	CastExpression	( void * ) ( long ) size		5563836	1					
ANR	5564656	CastTarget	void *		5563836	0					
ANR	5564657	CastExpression	( long ) size		5563836	1					
ANR	5564658	CastTarget	long		5563836	0					
ANR	5564659	Identifier	size		5563836	1					
ANR	5564660	BreakStatement	break ;	381:12:6679:6684	5563836	7	True				
ANR	5564661	Label	case 'i' :	383:8:6695:6703	5563836	8	True				
ANR	5564662	Label	case 'l' :	385:8:6714:6722	5563836	9	True				
ANR	5564663	CompoundStatement		387:16:6684:6695	5563836	10					
ANR	5564664	IdentifierDeclStatement	int64_t val ;	389:16:6756:6767	5563836	0	True				
ANR	5564665	IdentifierDecl	val		5563836	0					
ANR	5564666	IdentifierDeclType	int64_t		5563836	0					
ANR	5564667	Identifier	val		5563836	1					
ANR	5564668	WhileStatement	while ( qemu_isspace ( * p ) )		5563836	1					
ANR	5564669	Condition	qemu_isspace ( * p )	393:23:6795:6810	5563836	0	True				
ANR	5564670	CallExpression	qemu_isspace ( * p )		5563836	0					
ANR	5564671	Callee	qemu_isspace		5563836	0					
ANR	5564672	Identifier	qemu_isspace		5563836	0					
ANR	5564673	ArgumentList	* p		5563836	1					
ANR	5564674	Argument	* p		5563836	0					
ANR	5564675	UnaryOperationExpression	* p		5563836	0					
ANR	5564676	UnaryOperator	*		5563836	0					
ANR	5564677	Identifier	p		5563836	1					
ANR	5564678	ExpressionStatement	p ++	395:20:6834:6837	5563836	1	True				
ANR	5564679	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564680	Identifier	p		5563836	0					
ANR	5564681	IncDec	++		5563836	1					
ANR	5564682	IfStatement	if ( * typestr == '?' || * typestr == '.' )		5563836	2					
ANR	5564683	Condition	* typestr == '?' || * typestr == '.'	397:20:6860:6893	5563836	0	True				
ANR	5564684	OrExpression	* typestr == '?' || * typestr == '.'		5563836	0		||			
ANR	5564685	EqualityExpression	* typestr == '?'		5563836	0		==			
ANR	5564686	UnaryOperationExpression	* typestr		5563836	0					
ANR	5564687	UnaryOperator	*		5563836	0					
ANR	5564688	Identifier	typestr		5563836	1					
ANR	5564689	PrimaryExpression	'?'		5563836	1					
ANR	5564690	EqualityExpression	* typestr == '.'		5563836	1		==			
ANR	5564691	UnaryOperationExpression	* typestr		5563836	0					
ANR	5564692	UnaryOperator	*		5563836	0					
ANR	5564693	Identifier	typestr		5563836	1					
ANR	5564694	PrimaryExpression	'.'		5563836	1					
ANR	5564695	CompoundStatement		395:56:6824:6824	5563836	1					
ANR	5564696	IfStatement	if ( * typestr == '?' )		5563836	0					
ANR	5564697	Condition	* typestr == '?'	399:24:6923:6937	5563836	0	True				
ANR	5564698	EqualityExpression	* typestr == '?'		5563836	0		==			
ANR	5564699	UnaryOperationExpression	* typestr		5563836	0					
ANR	5564700	UnaryOperator	*		5563836	0					
ANR	5564701	Identifier	typestr		5563836	1					
ANR	5564702	PrimaryExpression	'?'		5563836	1					
ANR	5564703	CompoundStatement		397:41:6868:6868	5563836	1					
ANR	5564704	IfStatement	if ( * p == '\\0' )		5563836	0					
ANR	5564705	Condition	* p == '\\0'	401:28:6971:6980	5563836	0	True				
ANR	5564706	EqualityExpression	* p == '\\0'		5563836	0		==			
ANR	5564707	UnaryOperationExpression	* p		5563836	0					
ANR	5564708	UnaryOperator	*		5563836	0					
ANR	5564709	Identifier	p		5563836	1					
ANR	5564710	PrimaryExpression	'\\0'		5563836	1					
ANR	5564711	ExpressionStatement	has_arg = 0	403:28:7012:7023	5563836	1	True				
ANR	5564712	AssignmentExpression	has_arg = 0		5563836	0		=			
ANR	5564713	Identifier	has_arg		5563836	0					
ANR	5564714	PrimaryExpression	0		5563836	1					
ANR	5564715	ElseStatement	else		5563836	0					
ANR	5564716	ExpressionStatement	has_arg = 1	407:28:7084:7095	5563836	0	True				
ANR	5564717	AssignmentExpression	has_arg = 1		5563836	0		=			
ANR	5564718	Identifier	has_arg		5563836	0					
ANR	5564719	PrimaryExpression	1		5563836	1					
ANR	5564720	ElseStatement	else		5563836	0					
ANR	5564721	CompoundStatement		407:27:7053:7053	5563836	0					
ANR	5564722	IfStatement	if ( * p == '.' )		5563836	0					
ANR	5564723	Condition	* p == '.'	411:28:7156:7164	5563836	0	True				
ANR	5564724	EqualityExpression	* p == '.'		5563836	0		==			
ANR	5564725	UnaryOperationExpression	* p		5563836	0					
ANR	5564726	UnaryOperator	*		5563836	0					
ANR	5564727	Identifier	p		5563836	1					
ANR	5564728	PrimaryExpression	'.'		5563836	1					
ANR	5564729	CompoundStatement		409:39:7095:7095	5563836	1					
ANR	5564730	ExpressionStatement	p ++	413:28:7198:7201	5563836	0	True				
ANR	5564731	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564732	Identifier	p		5563836	0					
ANR	5564733	IncDec	++		5563836	1					
ANR	5564734	WhileStatement	while ( qemu_isspace ( * p ) )		5563836	1					
ANR	5564735	Condition	qemu_isspace ( * p )	415:35:7239:7254	5563836	0	True				
ANR	5564736	CallExpression	qemu_isspace ( * p )		5563836	0					
ANR	5564737	Callee	qemu_isspace		5563836	0					
ANR	5564738	Identifier	qemu_isspace		5563836	0					
ANR	5564739	ArgumentList	* p		5563836	1					
ANR	5564740	Argument	* p		5563836	0					
ANR	5564741	UnaryOperationExpression	* p		5563836	0					
ANR	5564742	UnaryOperator	*		5563836	0					
ANR	5564743	Identifier	p		5563836	1					
ANR	5564744	ExpressionStatement	p ++	417:32:7290:7293	5563836	1	True				
ANR	5564745	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564746	Identifier	p		5563836	0					
ANR	5564747	IncDec	++		5563836	1					
ANR	5564748	ExpressionStatement	has_arg = 1	419:28:7324:7335	5563836	2	True				
ANR	5564749	AssignmentExpression	has_arg = 1		5563836	0		=			
ANR	5564750	Identifier	has_arg		5563836	0					
ANR	5564751	PrimaryExpression	1		5563836	1					
ANR	5564752	ElseStatement	else		5563836	0					
ANR	5564753	CompoundStatement		419:31:7297:7297	5563836	0					
ANR	5564754	ExpressionStatement	has_arg = 0	423:28:7400:7411	5563836	0	True				
ANR	5564755	AssignmentExpression	has_arg = 0		5563836	0		=			
ANR	5564756	Identifier	has_arg		5563836	0					
ANR	5564757	PrimaryExpression	0		5563836	1					
ANR	5564758	ExpressionStatement	typestr ++	429:20:7484:7493	5563836	1	True				
ANR	5564759	PostIncDecOperationExpression	typestr ++		5563836	0					
ANR	5564760	Identifier	typestr		5563836	0					
ANR	5564761	IncDec	++		5563836	1					
ANR	5564762	IfStatement	if ( nb_args >= MAX_ARGS )		5563836	2					
ANR	5564763	Condition	nb_args >= MAX_ARGS	431:24:7520:7538	5563836	0	True				
ANR	5564764	RelationalExpression	nb_args >= MAX_ARGS		5563836	0		>=			
ANR	5564765	Identifier	nb_args		5563836	0					
ANR	5564766	Identifier	MAX_ARGS		5563836	1					
ANR	5564767	GotoStatement	goto error_args ;	433:24:7566:7581	5563836	1	True				
ANR	5564768	Identifier	error_args		5563836	0					
ANR	5564769	ExpressionStatement	args [ nb_args ++ ] = ( void * ) ( long ) has_arg	435:20:7604:7643	5563836	3	True				
ANR	5564770	AssignmentExpression	args [ nb_args ++ ] = ( void * ) ( long ) has_arg		5563836	0		=			
ANR	5564771	ArrayIndexing	args [ nb_args ++ ]		5563836	0					
ANR	5564772	Identifier	args		5563836	0					
ANR	5564773	PostIncDecOperationExpression	nb_args ++		5563836	1					
ANR	5564774	Identifier	nb_args		5563836	0					
ANR	5564775	IncDec	++		5563836	1					
ANR	5564776	CastExpression	( void * ) ( long ) has_arg		5563836	1					
ANR	5564777	CastTarget	void *		5563836	0					
ANR	5564778	CastExpression	( long ) has_arg		5563836	1					
ANR	5564779	CastTarget	long		5563836	0					
ANR	5564780	Identifier	has_arg		5563836	1					
ANR	5564781	IfStatement	if ( ! has_arg )		5563836	4					
ANR	5564782	Condition	! has_arg	437:24:7670:7677	5563836	0	True				
ANR	5564783	UnaryOperationExpression	! has_arg		5563836	0					
ANR	5564784	UnaryOperator	!		5563836	0					
ANR	5564785	Identifier	has_arg		5563836	1					
ANR	5564786	CompoundStatement		435:34:7608:7608	5563836	1					
ANR	5564787	IfStatement	if ( nb_args >= MAX_ARGS )		5563836	0					
ANR	5564788	Condition	nb_args >= MAX_ARGS	439:28:7711:7729	5563836	0	True				
ANR	5564789	RelationalExpression	nb_args >= MAX_ARGS		5563836	0		>=			
ANR	5564790	Identifier	nb_args		5563836	0					
ANR	5564791	Identifier	MAX_ARGS		5563836	1					
ANR	5564792	GotoStatement	goto error_args ;	441:28:7761:7776	5563836	1	True				
ANR	5564793	Identifier	error_args		5563836	0					
ANR	5564794	ExpressionStatement	val = - 1	443:24:7803:7811	5563836	1	True				
ANR	5564795	AssignmentExpression	val = - 1		5563836	0		=			
ANR	5564796	Identifier	val		5563836	0					
ANR	5564797	UnaryOperationExpression	- 1		5563836	1					
ANR	5564798	UnaryOperator	-		5563836	0					
ANR	5564799	PrimaryExpression	1		5563836	1					
ANR	5564800	GotoStatement	goto add_num ;	445:24:7838:7850	5563836	2	True				
ANR	5564801	Identifier	add_num		5563836	0					
ANR	5564802	IfStatement	"if ( get_expr ( mon , & val , & p ) )"		5563836	3					
ANR	5564803	Condition	"get_expr ( mon , & val , & p )"	451:20:7915:7937	5563836	0	True				
ANR	5564804	CallExpression	"get_expr ( mon , & val , & p )"		5563836	0					
ANR	5564805	Callee	get_expr		5563836	0					
ANR	5564806	Identifier	get_expr		5563836	0					
ANR	5564807	ArgumentList	mon		5563836	1					
ANR	5564808	Argument	mon		5563836	0					
ANR	5564809	Identifier	mon		5563836	0					
ANR	5564810	Argument	& val		5563836	1					
ANR	5564811	UnaryOperationExpression	& val		5563836	0					
ANR	5564812	UnaryOperator	&		5563836	0					
ANR	5564813	Identifier	val		5563836	1					
ANR	5564814	Argument	& p		5563836	2					
ANR	5564815	UnaryOperationExpression	& p		5563836	0					
ANR	5564816	UnaryOperator	&		5563836	0					
ANR	5564817	Identifier	p		5563836	1					
ANR	5564818	GotoStatement	goto fail ;	453:20:7961:7970	5563836	1	True				
ANR	5564819	Identifier	fail		5563836	0					
ANR	5564820	Label	add_num :	455:12:7985:7992	5563836	4	True				
ANR	5564821	Identifier	add_num		5563836	0					
ANR	5564822	IfStatement	if ( c == 'i' )		5563836	5					
ANR	5564823	Condition	c == 'i'	457:20:8015:8022	5563836	0	True				
ANR	5564824	EqualityExpression	c == 'i'		5563836	0		==			
ANR	5564825	Identifier	c		5563836	0					
ANR	5564826	PrimaryExpression	'i'		5563836	1					
ANR	5564827	CompoundStatement		455:30:7953:7953	5563836	1					
ANR	5564828	IfStatement	if ( nb_args >= MAX_ARGS )		5563836	0					
ANR	5564829	Condition	nb_args >= MAX_ARGS	459:24:8052:8070	5563836	0	True				
ANR	5564830	RelationalExpression	nb_args >= MAX_ARGS		5563836	0		>=			
ANR	5564831	Identifier	nb_args		5563836	0					
ANR	5564832	Identifier	MAX_ARGS		5563836	1					
ANR	5564833	GotoStatement	goto error_args ;	461:24:8098:8113	5563836	1	True				
ANR	5564834	Identifier	error_args		5563836	0					
ANR	5564835	ExpressionStatement	args [ nb_args ++ ] = ( void * ) ( long ) val	463:20:8136:8171	5563836	1	True				
ANR	5564836	AssignmentExpression	args [ nb_args ++ ] = ( void * ) ( long ) val		5563836	0		=			
ANR	5564837	ArrayIndexing	args [ nb_args ++ ]		5563836	0					
ANR	5564838	Identifier	args		5563836	0					
ANR	5564839	PostIncDecOperationExpression	nb_args ++		5563836	1					
ANR	5564840	Identifier	nb_args		5563836	0					
ANR	5564841	IncDec	++		5563836	1					
ANR	5564842	CastExpression	( void * ) ( long ) val		5563836	1					
ANR	5564843	CastTarget	void *		5563836	0					
ANR	5564844	CastExpression	( long ) val		5563836	1					
ANR	5564845	CastTarget	long		5563836	0					
ANR	5564846	Identifier	val		5563836	1					
ANR	5564847	ElseStatement	else		5563836	0					
ANR	5564848	CompoundStatement		463:23:8125:8125	5563836	0					
ANR	5564849	IfStatement	if ( ( nb_args + 1 ) >= MAX_ARGS )		5563836	0					
ANR	5564850	Condition	( nb_args + 1 ) >= MAX_ARGS	467:24:8224:8248	5563836	0	True				
ANR	5564851	RelationalExpression	( nb_args + 1 ) >= MAX_ARGS		5563836	0		>=			
ANR	5564852	AdditiveExpression	nb_args + 1		5563836	0		+			
ANR	5564853	Identifier	nb_args		5563836	0					
ANR	5564854	PrimaryExpression	1		5563836	1					
ANR	5564855	Identifier	MAX_ARGS		5563836	1					
ANR	5564856	GotoStatement	goto error_args ;	469:24:8276:8291	5563836	1	True				
ANR	5564857	Identifier	error_args		5563836	0					
ANR	5564858	ExpressionStatement	args [ nb_args ++ ] = ( void * ) ( long ) ( ( val >> 32 ) & 0xffffffff )	473:20:8346:8404	5563836	1	True				
ANR	5564859	AssignmentExpression	args [ nb_args ++ ] = ( void * ) ( long ) ( ( val >> 32 ) & 0xffffffff )		5563836	0		=			
ANR	5564860	ArrayIndexing	args [ nb_args ++ ]		5563836	0					
ANR	5564861	Identifier	args		5563836	0					
ANR	5564862	PostIncDecOperationExpression	nb_args ++		5563836	1					
ANR	5564863	Identifier	nb_args		5563836	0					
ANR	5564864	IncDec	++		5563836	1					
ANR	5564865	CastExpression	( void * ) ( long ) ( ( val >> 32 ) & 0xffffffff )		5563836	1					
ANR	5564866	CastTarget	void *		5563836	0					
ANR	5564867	CastExpression	( long ) ( ( val >> 32 ) & 0xffffffff )		5563836	1					
ANR	5564868	CastTarget	long		5563836	0					
ANR	5564869	BitAndExpression	( val >> 32 ) & 0xffffffff		5563836	1		&			
ANR	5564870	ShiftExpression	val >> 32		5563836	0		>>			
ANR	5564871	Identifier	val		5563836	0					
ANR	5564872	PrimaryExpression	32		5563836	1					
ANR	5564873	PrimaryExpression	0xffffffff		5563836	1					
ANR	5564874	ExpressionStatement	args [ nb_args ++ ] = ( void * ) ( long ) ( val & 0xffffffff )	481:20:8492:8542	5563836	2	True				
ANR	5564875	AssignmentExpression	args [ nb_args ++ ] = ( void * ) ( long ) ( val & 0xffffffff )		5563836	0		=			
ANR	5564876	ArrayIndexing	args [ nb_args ++ ]		5563836	0					
ANR	5564877	Identifier	args		5563836	0					
ANR	5564878	PostIncDecOperationExpression	nb_args ++		5563836	1					
ANR	5564879	Identifier	nb_args		5563836	0					
ANR	5564880	IncDec	++		5563836	1					
ANR	5564881	CastExpression	( void * ) ( long ) ( val & 0xffffffff )		5563836	1					
ANR	5564882	CastTarget	void *		5563836	0					
ANR	5564883	CastExpression	( long ) ( val & 0xffffffff )		5563836	1					
ANR	5564884	CastTarget	long		5563836	0					
ANR	5564885	BitAndExpression	val & 0xffffffff		5563836	1		&			
ANR	5564886	Identifier	val		5563836	0					
ANR	5564887	PrimaryExpression	0xffffffff		5563836	1					
ANR	5564888	BreakStatement	break ;	487:12:8591:8596	5563836	11	True				
ANR	5564889	Label	case '-' :	489:8:8607:8615	5563836	12	True				
ANR	5564890	CompoundStatement		491:16:8577:8591	5563836	13					
ANR	5564891	IdentifierDeclStatement	int has_option ;	493:16:8649:8663	5563836	0	True				
ANR	5564892	IdentifierDecl	has_option		5563836	0					
ANR	5564893	IdentifierDeclType	int		5563836	0					
ANR	5564894	Identifier	has_option		5563836	1					
ANR	5564895	ExpressionStatement	c = * typestr ++	499:16:8714:8728	5563836	1	True				
ANR	5564896	AssignmentExpression	c = * typestr ++		5563836	0		=			
ANR	5564897	Identifier	c		5563836	0					
ANR	5564898	UnaryOperationExpression	* typestr ++		5563836	1					
ANR	5564899	UnaryOperator	*		5563836	0					
ANR	5564900	PostIncDecOperationExpression	typestr ++		5563836	1					
ANR	5564901	Identifier	typestr		5563836	0					
ANR	5564902	IncDec	++		5563836	1					
ANR	5564903	IfStatement	if ( c == '\\0' )		5563836	2					
ANR	5564904	Condition	c == '\\0'	501:20:8751:8759	5563836	0	True				
ANR	5564905	EqualityExpression	c == '\\0'		5563836	0		==			
ANR	5564906	Identifier	c		5563836	0					
ANR	5564907	PrimaryExpression	'\\0'		5563836	1					
ANR	5564908	GotoStatement	goto bad_type ;	503:20:8783:8796	5563836	1	True				
ANR	5564909	Identifier	bad_type		5563836	0					
ANR	5564910	WhileStatement	while ( qemu_isspace ( * p ) )		5563836	3					
ANR	5564911	Condition	qemu_isspace ( * p )	505:23:8822:8837	5563836	0	True				
ANR	5564912	CallExpression	qemu_isspace ( * p )		5563836	0					
ANR	5564913	Callee	qemu_isspace		5563836	0					
ANR	5564914	Identifier	qemu_isspace		5563836	0					
ANR	5564915	ArgumentList	* p		5563836	1					
ANR	5564916	Argument	* p		5563836	0					
ANR	5564917	UnaryOperationExpression	* p		5563836	0					
ANR	5564918	UnaryOperator	*		5563836	0					
ANR	5564919	Identifier	p		5563836	1					
ANR	5564920	ExpressionStatement	p ++	507:20:8861:8864	5563836	1	True				
ANR	5564921	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564922	Identifier	p		5563836	0					
ANR	5564923	IncDec	++		5563836	1					
ANR	5564924	ExpressionStatement	has_option = 0	509:16:8883:8897	5563836	4	True				
ANR	5564925	AssignmentExpression	has_option = 0		5563836	0		=			
ANR	5564926	Identifier	has_option		5563836	0					
ANR	5564927	PrimaryExpression	0		5563836	1					
ANR	5564928	IfStatement	if ( * p == '-' )		5563836	5					
ANR	5564929	Condition	* p == '-'	511:20:8920:8928	5563836	0	True				
ANR	5564930	EqualityExpression	* p == '-'		5563836	0		==			
ANR	5564931	UnaryOperationExpression	* p		5563836	0					
ANR	5564932	UnaryOperator	*		5563836	0					
ANR	5564933	Identifier	p		5563836	1					
ANR	5564934	PrimaryExpression	'-'		5563836	1					
ANR	5564935	CompoundStatement		509:31:8859:8859	5563836	1					
ANR	5564936	ExpressionStatement	p ++	513:20:8954:8957	5563836	0	True				
ANR	5564937	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564938	Identifier	p		5563836	0					
ANR	5564939	IncDec	++		5563836	1					
ANR	5564940	IfStatement	if ( * p != c )		5563836	1					
ANR	5564941	Condition	* p != c	515:24:8984:8990	5563836	0	True				
ANR	5564942	EqualityExpression	* p != c		5563836	0		!=			
ANR	5564943	UnaryOperationExpression	* p		5563836	0					
ANR	5564944	UnaryOperator	*		5563836	0					
ANR	5564945	Identifier	p		5563836	1					
ANR	5564946	Identifier	c		5563836	1					
ANR	5564947	CompoundStatement		513:33:8921:8921	5563836	1					
ANR	5564948	ExpressionStatement	"monitor_printf ( mon , ""%s: unsupported option -%c\\n"" , cmdname , * p )"	517:24:9020:9124	5563836	0	True				
ANR	5564949	CallExpression	"monitor_printf ( mon , ""%s: unsupported option -%c\\n"" , cmdname , * p )"		5563836	0					
ANR	5564950	Callee	monitor_printf		5563836	0					
ANR	5564951	Identifier	monitor_printf		5563836	0					
ANR	5564952	ArgumentList	mon		5563836	1					
ANR	5564953	Argument	mon		5563836	0					
ANR	5564954	Identifier	mon		5563836	0					
ANR	5564955	Argument	"""%s: unsupported option -%c\\n"""		5563836	1					
ANR	5564956	PrimaryExpression	"""%s: unsupported option -%c\\n"""		5563836	0					
ANR	5564957	Argument	cmdname		5563836	2					
ANR	5564958	Identifier	cmdname		5563836	0					
ANR	5564959	Argument	* p		5563836	3					
ANR	5564960	UnaryOperationExpression	* p		5563836	0					
ANR	5564961	UnaryOperator	*		5563836	0					
ANR	5564962	Identifier	p		5563836	1					
ANR	5564963	GotoStatement	goto fail ;	521:24:9151:9160	5563836	1	True				
ANR	5564964	Identifier	fail		5563836	0					
ANR	5564965	ExpressionStatement	p ++	525:20:9206:9209	5563836	2	True				
ANR	5564966	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5564967	Identifier	p		5563836	0					
ANR	5564968	IncDec	++		5563836	1					
ANR	5564969	ExpressionStatement	has_option = 1	527:20:9232:9246	5563836	3	True				
ANR	5564970	AssignmentExpression	has_option = 1		5563836	0		=			
ANR	5564971	Identifier	has_option		5563836	0					
ANR	5564972	PrimaryExpression	1		5563836	1					
ANR	5564973	IfStatement	if ( nb_args >= MAX_ARGS )		5563836	6					
ANR	5564974	Condition	nb_args >= MAX_ARGS	531:20:9288:9306	5563836	0	True				
ANR	5564975	RelationalExpression	nb_args >= MAX_ARGS		5563836	0		>=			
ANR	5564976	Identifier	nb_args		5563836	0					
ANR	5564977	Identifier	MAX_ARGS		5563836	1					
ANR	5564978	GotoStatement	goto error_args ;	533:20:9330:9345	5563836	1	True				
ANR	5564979	Identifier	error_args		5563836	0					
ANR	5564980	ExpressionStatement	args [ nb_args ++ ] = ( void * ) ( long ) has_option	535:16:9364:9406	5563836	7	True				
ANR	5564981	AssignmentExpression	args [ nb_args ++ ] = ( void * ) ( long ) has_option		5563836	0		=			
ANR	5564982	ArrayIndexing	args [ nb_args ++ ]		5563836	0					
ANR	5564983	Identifier	args		5563836	0					
ANR	5564984	PostIncDecOperationExpression	nb_args ++		5563836	1					
ANR	5564985	Identifier	nb_args		5563836	0					
ANR	5564986	IncDec	++		5563836	1					
ANR	5564987	CastExpression	( void * ) ( long ) has_option		5563836	1					
ANR	5564988	CastTarget	void *		5563836	0					
ANR	5564989	CastExpression	( long ) has_option		5563836	1					
ANR	5564990	CastTarget	long		5563836	0					
ANR	5564991	Identifier	has_option		5563836	1					
ANR	5564992	BreakStatement	break ;	539:12:9436:9441	5563836	14	True				
ANR	5564993	Label	default :	541:8:9452:9459	5563836	15	True				
ANR	5564994	Identifier	default		5563836	0					
ANR	5564995	Label	bad_type :	543:8:9470:9478	5563836	16	True				
ANR	5564996	Identifier	bad_type		5563836	0					
ANR	5564997	ExpressionStatement	"monitor_printf ( mon , ""%s: unknown type '%c'\\n"" , cmdname , c )"	545:12:9493:9551	5563836	17	True				
ANR	5564998	CallExpression	"monitor_printf ( mon , ""%s: unknown type '%c'\\n"" , cmdname , c )"		5563836	0					
ANR	5564999	Callee	monitor_printf		5563836	0					
ANR	5565000	Identifier	monitor_printf		5563836	0					
ANR	5565001	ArgumentList	mon		5563836	1					
ANR	5565002	Argument	mon		5563836	0					
ANR	5565003	Identifier	mon		5563836	0					
ANR	5565004	Argument	"""%s: unknown type '%c'\\n"""		5563836	1					
ANR	5565005	PrimaryExpression	"""%s: unknown type '%c'\\n"""		5563836	0					
ANR	5565006	Argument	cmdname		5563836	2					
ANR	5565007	Identifier	cmdname		5563836	0					
ANR	5565008	Argument	c		5563836	3					
ANR	5565009	Identifier	c		5563836	0					
ANR	5565010	GotoStatement	goto fail ;	547:12:9566:9575	5563836	18	True				
ANR	5565011	Identifier	fail		5563836	0					
ANR	5565012	WhileStatement	while ( qemu_isspace ( * p ) )		5563836	35					
ANR	5565013	Condition	qemu_isspace ( * p )	555:11:9655:9670	5563836	0	True				
ANR	5565014	CallExpression	qemu_isspace ( * p )		5563836	0					
ANR	5565015	Callee	qemu_isspace		5563836	0					
ANR	5565016	Identifier	qemu_isspace		5563836	0					
ANR	5565017	ArgumentList	* p		5563836	1					
ANR	5565018	Argument	* p		5563836	0					
ANR	5565019	UnaryOperationExpression	* p		5563836	0					
ANR	5565020	UnaryOperator	*		5563836	0					
ANR	5565021	Identifier	p		5563836	1					
ANR	5565022	ExpressionStatement	p ++	557:8:9682:9685	5563836	1	True				
ANR	5565023	PostIncDecOperationExpression	p ++		5563836	0					
ANR	5565024	Identifier	p		5563836	0					
ANR	5565025	IncDec	++		5563836	1					
ANR	5565026	IfStatement	if ( * p != '\\0' )		5563836	36					
ANR	5565027	Condition	* p != '\\0'	559:8:9696:9705	5563836	0	True				
ANR	5565028	EqualityExpression	* p != '\\0'		5563836	0		!=			
ANR	5565029	UnaryOperationExpression	* p		5563836	0					
ANR	5565030	UnaryOperator	*		5563836	0					
ANR	5565031	Identifier	p		5563836	1					
ANR	5565032	PrimaryExpression	'\\0'		5563836	1					
ANR	5565033	CompoundStatement		557:20:9636:9636	5563836	1					
ANR	5565034	ExpressionStatement	"monitor_printf ( mon , ""%s: extraneous characters at the end of line\\n"" , cmdname )"	561:8:9719:9821	5563836	0	True				
ANR	5565035	CallExpression	"monitor_printf ( mon , ""%s: extraneous characters at the end of line\\n"" , cmdname )"		5563836	0					
ANR	5565036	Callee	monitor_printf		5563836	0					
ANR	5565037	Identifier	monitor_printf		5563836	0					
ANR	5565038	ArgumentList	mon		5563836	1					
ANR	5565039	Argument	mon		5563836	0					
ANR	5565040	Identifier	mon		5563836	0					
ANR	5565041	Argument	"""%s: extraneous characters at the end of line\\n"""		5563836	1					
ANR	5565042	PrimaryExpression	"""%s: extraneous characters at the end of line\\n"""		5563836	0					
ANR	5565043	Argument	cmdname		5563836	2					
ANR	5565044	Identifier	cmdname		5563836	0					
ANR	5565045	GotoStatement	goto fail ;	565:8:9832:9841	5563836	1	True				
ANR	5565046	Identifier	fail		5563836	0					
ANR	5565047	SwitchStatement	switch ( nb_args )		5563836	37					
ANR	5565048	Condition	nb_args	571:11:9864:9870	5563836	0	True				
ANR	5565049	Identifier	nb_args		5563836	0					
ANR	5565050	CompoundStatement		569:20:9801:9801	5563836	1					
ANR	5565051	Label	case 0 :	573:4:9880:9886	5563836	0	True				
ANR	5565052	ExpressionStatement	handler_0 = cmd -> handler	575:8:9897:9921	5563836	1	True				
ANR	5565053	AssignmentExpression	handler_0 = cmd -> handler		5563836	0		=			
ANR	5565054	Identifier	handler_0		5563836	0					
ANR	5565055	PtrMemberAccess	cmd -> handler		5563836	1					
ANR	5565056	Identifier	cmd		5563836	0					
ANR	5565057	Identifier	handler		5563836	1					
ANR	5565058	ExpressionStatement	handler_0 ( mon )	577:8:9932:9946	5563836	2	True				
ANR	5565059	CallExpression	handler_0 ( mon )		5563836	0					
ANR	5565060	Callee	handler_0		5563836	0					
ANR	5565061	Identifier	handler_0		5563836	0					
ANR	5565062	ArgumentList	mon		5563836	1					
ANR	5565063	Argument	mon		5563836	0					
ANR	5565064	Identifier	mon		5563836	0					
ANR	5565065	BreakStatement	break ;	579:8:9957:9962	5563836	3	True				
ANR	5565066	Label	case 1 :	581:4:9969:9975	5563836	4	True				
ANR	5565067	ExpressionStatement	handler_1 = cmd -> handler	583:8:9986:10010	5563836	5	True				
ANR	5565068	AssignmentExpression	handler_1 = cmd -> handler		5563836	0		=			
ANR	5565069	Identifier	handler_1		5563836	0					
ANR	5565070	PtrMemberAccess	cmd -> handler		5563836	1					
ANR	5565071	Identifier	cmd		5563836	0					
ANR	5565072	Identifier	handler		5563836	1					
ANR	5565073	ExpressionStatement	"handler_1 ( mon , args [ 0 ] )"	585:8:10021:10044	5563836	6	True				
ANR	5565074	CallExpression	"handler_1 ( mon , args [ 0 ] )"		5563836	0					
ANR	5565075	Callee	handler_1		5563836	0					
ANR	5565076	Identifier	handler_1		5563836	0					
ANR	5565077	ArgumentList	mon		5563836	1					
ANR	5565078	Argument	mon		5563836	0					
ANR	5565079	Identifier	mon		5563836	0					
ANR	5565080	Argument	args [ 0 ]		5563836	1					
ANR	5565081	ArrayIndexing	args [ 0 ]		5563836	0					
ANR	5565082	Identifier	args		5563836	0					
ANR	5565083	PrimaryExpression	0		5563836	1					
ANR	5565084	BreakStatement	break ;	587:8:10055:10060	5563836	7	True				
ANR	5565085	Label	case 2 :	589:4:10067:10073	5563836	8	True				
ANR	5565086	ExpressionStatement	handler_2 = cmd -> handler	591:8:10084:10108	5563836	9	True				
ANR	5565087	AssignmentExpression	handler_2 = cmd -> handler		5563836	0		=			
ANR	5565088	Identifier	handler_2		5563836	0					
ANR	5565089	PtrMemberAccess	cmd -> handler		5563836	1					
ANR	5565090	Identifier	cmd		5563836	0					
ANR	5565091	Identifier	handler		5563836	1					
ANR	5565092	ExpressionStatement	"handler_2 ( mon , args [ 0 ] , args [ 1 ] )"	593:8:10119:10151	5563836	10	True				
ANR	5565093	CallExpression	"handler_2 ( mon , args [ 0 ] , args [ 1 ] )"		5563836	0					
ANR	5565094	Callee	handler_2		5563836	0					
ANR	5565095	Identifier	handler_2		5563836	0					
ANR	5565096	ArgumentList	mon		5563836	1					
ANR	5565097	Argument	mon		5563836	0					
ANR	5565098	Identifier	mon		5563836	0					
ANR	5565099	Argument	args [ 0 ]		5563836	1					
ANR	5565100	ArrayIndexing	args [ 0 ]		5563836	0					
ANR	5565101	Identifier	args		5563836	0					
ANR	5565102	PrimaryExpression	0		5563836	1					
ANR	5565103	Argument	args [ 1 ]		5563836	2					
ANR	5565104	ArrayIndexing	args [ 1 ]		5563836	0					
ANR	5565105	Identifier	args		5563836	0					
ANR	5565106	PrimaryExpression	1		5563836	1					
ANR	5565107	BreakStatement	break ;	595:8:10162:10167	5563836	11	True				
ANR	5565108	Label	case 3 :	597:4:10174:10180	5563836	12	True				
ANR	5565109	ExpressionStatement	handler_3 = cmd -> handler	599:8:10191:10215	5563836	13	True				
ANR	5565110	AssignmentExpression	handler_3 = cmd -> handler		5563836	0		=			
ANR	5565111	Identifier	handler_3		5563836	0					
ANR	5565112	PtrMemberAccess	cmd -> handler		5563836	1					
ANR	5565113	Identifier	cmd		5563836	0					
ANR	5565114	Identifier	handler		5563836	1					
ANR	5565115	ExpressionStatement	"handler_3 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] )"	601:8:10226:10267	5563836	14	True				
ANR	5565116	CallExpression	"handler_3 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] )"		5563836	0					
ANR	5565117	Callee	handler_3		5563836	0					
ANR	5565118	Identifier	handler_3		5563836	0					
ANR	5565119	ArgumentList	mon		5563836	1					
ANR	5565120	Argument	mon		5563836	0					
ANR	5565121	Identifier	mon		5563836	0					
ANR	5565122	Argument	args [ 0 ]		5563836	1					
ANR	5565123	ArrayIndexing	args [ 0 ]		5563836	0					
ANR	5565124	Identifier	args		5563836	0					
ANR	5565125	PrimaryExpression	0		5563836	1					
ANR	5565126	Argument	args [ 1 ]		5563836	2					
ANR	5565127	ArrayIndexing	args [ 1 ]		5563836	0					
ANR	5565128	Identifier	args		5563836	0					
ANR	5565129	PrimaryExpression	1		5563836	1					
ANR	5565130	Argument	args [ 2 ]		5563836	3					
ANR	5565131	ArrayIndexing	args [ 2 ]		5563836	0					
ANR	5565132	Identifier	args		5563836	0					
ANR	5565133	PrimaryExpression	2		5563836	1					
ANR	5565134	BreakStatement	break ;	603:8:10278:10283	5563836	15	True				
ANR	5565135	Label	case 4 :	605:4:10290:10296	5563836	16	True				
ANR	5565136	ExpressionStatement	handler_4 = cmd -> handler	607:8:10307:10331	5563836	17	True				
ANR	5565137	AssignmentExpression	handler_4 = cmd -> handler		5563836	0		=			
ANR	5565138	Identifier	handler_4		5563836	0					
ANR	5565139	PtrMemberAccess	cmd -> handler		5563836	1					
ANR	5565140	Identifier	cmd		5563836	0					
ANR	5565141	Identifier	handler		5563836	1					
ANR	5565142	ExpressionStatement	"handler_4 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] )"	609:8:10342:10392	5563836	18	True				
ANR	5565143	CallExpression	"handler_4 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] )"		5563836	0					
ANR	5565144	Callee	handler_4		5563836	0					
ANR	5565145	Identifier	handler_4		5563836	0					
ANR	5565146	ArgumentList	mon		5563836	1					
ANR	5565147	Argument	mon		5563836	0					
ANR	5565148	Identifier	mon		5563836	0					
ANR	5565149	Argument	args [ 0 ]		5563836	1					
ANR	5565150	ArrayIndexing	args [ 0 ]		5563836	0					
ANR	5565151	Identifier	args		5563836	0					
ANR	5565152	PrimaryExpression	0		5563836	1					
ANR	5565153	Argument	args [ 1 ]		5563836	2					
ANR	5565154	ArrayIndexing	args [ 1 ]		5563836	0					
ANR	5565155	Identifier	args		5563836	0					
ANR	5565156	PrimaryExpression	1		5563836	1					
ANR	5565157	Argument	args [ 2 ]		5563836	3					
ANR	5565158	ArrayIndexing	args [ 2 ]		5563836	0					
ANR	5565159	Identifier	args		5563836	0					
ANR	5565160	PrimaryExpression	2		5563836	1					
ANR	5565161	Argument	args [ 3 ]		5563836	4					
ANR	5565162	ArrayIndexing	args [ 3 ]		5563836	0					
ANR	5565163	Identifier	args		5563836	0					
ANR	5565164	PrimaryExpression	3		5563836	1					
ANR	5565165	BreakStatement	break ;	611:8:10403:10408	5563836	19	True				
ANR	5565166	Label	case 5 :	613:4:10415:10421	5563836	20	True				
ANR	5565167	ExpressionStatement	handler_5 = cmd -> handler	615:8:10432:10456	5563836	21	True				
ANR	5565168	AssignmentExpression	handler_5 = cmd -> handler		5563836	0		=			
ANR	5565169	Identifier	handler_5		5563836	0					
ANR	5565170	PtrMemberAccess	cmd -> handler		5563836	1					
ANR	5565171	Identifier	cmd		5563836	0					
ANR	5565172	Identifier	handler		5563836	1					
ANR	5565173	ExpressionStatement	"handler_5 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] , args [ 4 ] )"	617:8:10467:10526	5563836	22	True				
ANR	5565174	CallExpression	"handler_5 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] , args [ 4 ] )"		5563836	0					
ANR	5565175	Callee	handler_5		5563836	0					
ANR	5565176	Identifier	handler_5		5563836	0					
ANR	5565177	ArgumentList	mon		5563836	1					
ANR	5565178	Argument	mon		5563836	0					
ANR	5565179	Identifier	mon		5563836	0					
ANR	5565180	Argument	args [ 0 ]		5563836	1					
ANR	5565181	ArrayIndexing	args [ 0 ]		5563836	0					
ANR	5565182	Identifier	args		5563836	0					
ANR	5565183	PrimaryExpression	0		5563836	1					
ANR	5565184	Argument	args [ 1 ]		5563836	2					
ANR	5565185	ArrayIndexing	args [ 1 ]		5563836	0					
ANR	5565186	Identifier	args		5563836	0					
ANR	5565187	PrimaryExpression	1		5563836	1					
ANR	5565188	Argument	args [ 2 ]		5563836	3					
ANR	5565189	ArrayIndexing	args [ 2 ]		5563836	0					
ANR	5565190	Identifier	args		5563836	0					
ANR	5565191	PrimaryExpression	2		5563836	1					
ANR	5565192	Argument	args [ 3 ]		5563836	4					
ANR	5565193	ArrayIndexing	args [ 3 ]		5563836	0					
ANR	5565194	Identifier	args		5563836	0					
ANR	5565195	PrimaryExpression	3		5563836	1					
ANR	5565196	Argument	args [ 4 ]		5563836	5					
ANR	5565197	ArrayIndexing	args [ 4 ]		5563836	0					
ANR	5565198	Identifier	args		5563836	0					
ANR	5565199	PrimaryExpression	4		5563836	1					
ANR	5565200	BreakStatement	break ;	619:8:10537:10542	5563836	23	True				
ANR	5565201	Label	case 6 :	621:4:10549:10555	5563836	24	True				
ANR	5565202	ExpressionStatement	handler_6 = cmd -> handler	623:8:10566:10590	5563836	25	True				
ANR	5565203	AssignmentExpression	handler_6 = cmd -> handler		5563836	0		=			
ANR	5565204	Identifier	handler_6		5563836	0					
ANR	5565205	PtrMemberAccess	cmd -> handler		5563836	1					
ANR	5565206	Identifier	cmd		5563836	0					
ANR	5565207	Identifier	handler		5563836	1					
ANR	5565208	ExpressionStatement	"handler_6 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] , args [ 4 ] , args [ 5 ] )"	625:8:10601:10669	5563836	26	True				
ANR	5565209	CallExpression	"handler_6 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] , args [ 4 ] , args [ 5 ] )"		5563836	0					
ANR	5565210	Callee	handler_6		5563836	0					
ANR	5565211	Identifier	handler_6		5563836	0					
ANR	5565212	ArgumentList	mon		5563836	1					
ANR	5565213	Argument	mon		5563836	0					
ANR	5565214	Identifier	mon		5563836	0					
ANR	5565215	Argument	args [ 0 ]		5563836	1					
ANR	5565216	ArrayIndexing	args [ 0 ]		5563836	0					
ANR	5565217	Identifier	args		5563836	0					
ANR	5565218	PrimaryExpression	0		5563836	1					
ANR	5565219	Argument	args [ 1 ]		5563836	2					
ANR	5565220	ArrayIndexing	args [ 1 ]		5563836	0					
ANR	5565221	Identifier	args		5563836	0					
ANR	5565222	PrimaryExpression	1		5563836	1					
ANR	5565223	Argument	args [ 2 ]		5563836	3					
ANR	5565224	ArrayIndexing	args [ 2 ]		5563836	0					
ANR	5565225	Identifier	args		5563836	0					
ANR	5565226	PrimaryExpression	2		5563836	1					
ANR	5565227	Argument	args [ 3 ]		5563836	4					
ANR	5565228	ArrayIndexing	args [ 3 ]		5563836	0					
ANR	5565229	Identifier	args		5563836	0					
ANR	5565230	PrimaryExpression	3		5563836	1					
ANR	5565231	Argument	args [ 4 ]		5563836	5					
ANR	5565232	ArrayIndexing	args [ 4 ]		5563836	0					
ANR	5565233	Identifier	args		5563836	0					
ANR	5565234	PrimaryExpression	4		5563836	1					
ANR	5565235	Argument	args [ 5 ]		5563836	6					
ANR	5565236	ArrayIndexing	args [ 5 ]		5563836	0					
ANR	5565237	Identifier	args		5563836	0					
ANR	5565238	PrimaryExpression	5		5563836	1					
ANR	5565239	BreakStatement	break ;	627:8:10680:10685	5563836	27	True				
ANR	5565240	Label	case 7 :	629:4:10692:10698	5563836	28	True				
ANR	5565241	ExpressionStatement	handler_7 = cmd -> handler	631:8:10709:10733	5563836	29	True				
ANR	5565242	AssignmentExpression	handler_7 = cmd -> handler		5563836	0		=			
ANR	5565243	Identifier	handler_7		5563836	0					
ANR	5565244	PtrMemberAccess	cmd -> handler		5563836	1					
ANR	5565245	Identifier	cmd		5563836	0					
ANR	5565246	Identifier	handler		5563836	1					
ANR	5565247	ExpressionStatement	"handler_7 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] , args [ 4 ] , args [ 5 ] , args [ 6 ] )"	633:8:10744:10840	5563836	30	True				
ANR	5565248	CallExpression	"handler_7 ( mon , args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] , args [ 4 ] , args [ 5 ] , args [ 6 ] )"		5563836	0					
ANR	5565249	Callee	handler_7		5563836	0					
ANR	5565250	Identifier	handler_7		5563836	0					
ANR	5565251	ArgumentList	mon		5563836	1					
ANR	5565252	Argument	mon		5563836	0					
ANR	5565253	Identifier	mon		5563836	0					
ANR	5565254	Argument	args [ 0 ]		5563836	1					
ANR	5565255	ArrayIndexing	args [ 0 ]		5563836	0					
ANR	5565256	Identifier	args		5563836	0					
ANR	5565257	PrimaryExpression	0		5563836	1					
ANR	5565258	Argument	args [ 1 ]		5563836	2					
ANR	5565259	ArrayIndexing	args [ 1 ]		5563836	0					
ANR	5565260	Identifier	args		5563836	0					
ANR	5565261	PrimaryExpression	1		5563836	1					
ANR	5565262	Argument	args [ 2 ]		5563836	3					
ANR	5565263	ArrayIndexing	args [ 2 ]		5563836	0					
ANR	5565264	Identifier	args		5563836	0					
ANR	5565265	PrimaryExpression	2		5563836	1					
ANR	5565266	Argument	args [ 3 ]		5563836	4					
ANR	5565267	ArrayIndexing	args [ 3 ]		5563836	0					
ANR	5565268	Identifier	args		5563836	0					
ANR	5565269	PrimaryExpression	3		5563836	1					
ANR	5565270	Argument	args [ 4 ]		5563836	5					
ANR	5565271	ArrayIndexing	args [ 4 ]		5563836	0					
ANR	5565272	Identifier	args		5563836	0					
ANR	5565273	PrimaryExpression	4		5563836	1					
ANR	5565274	Argument	args [ 5 ]		5563836	6					
ANR	5565275	ArrayIndexing	args [ 5 ]		5563836	0					
ANR	5565276	Identifier	args		5563836	0					
ANR	5565277	PrimaryExpression	5		5563836	1					
ANR	5565278	Argument	args [ 6 ]		5563836	7					
ANR	5565279	ArrayIndexing	args [ 6 ]		5563836	0					
ANR	5565280	Identifier	args		5563836	0					
ANR	5565281	PrimaryExpression	6		5563836	1					
ANR	5565282	BreakStatement	break ;	637:8:10851:10856	5563836	31	True				
ANR	5565283	Label	default :	639:4:10863:10870	5563836	32	True				
ANR	5565284	Identifier	default		5563836	0					
ANR	5565285	ExpressionStatement	"monitor_printf ( mon , ""unsupported number of arguments: %d\\n"" , nb_args )"	641:8:10881:10950	5563836	33	True				
ANR	5565286	CallExpression	"monitor_printf ( mon , ""unsupported number of arguments: %d\\n"" , nb_args )"		5563836	0					
ANR	5565287	Callee	monitor_printf		5563836	0					
ANR	5565288	Identifier	monitor_printf		5563836	0					
ANR	5565289	ArgumentList	mon		5563836	1					
ANR	5565290	Argument	mon		5563836	0					
ANR	5565291	Identifier	mon		5563836	0					
ANR	5565292	Argument	"""unsupported number of arguments: %d\\n"""		5563836	1					
ANR	5565293	PrimaryExpression	"""unsupported number of arguments: %d\\n"""		5563836	0					
ANR	5565294	Argument	nb_args		5563836	2					
ANR	5565295	Identifier	nb_args		5563836	0					
ANR	5565296	GotoStatement	goto fail ;	643:8:10961:10970	5563836	34	True				
ANR	5565297	Identifier	fail		5563836	0					
ANR	5565298	Label	fail :	647:1:10981:10985	5563836	38	True				
ANR	5565299	Identifier	fail		5563836	0					
ANR	5565300	ForStatement	for ( i = 0 ; i < MAX_ARGS ; i ++ )		5563836	39					
ANR	5565301	ForInit	i = 0 ;	649:8:10996:11001	5563836	0	True				
ANR	5565302	AssignmentExpression	i = 0		5563836	0		=			
ANR	5565303	Identifier	i		5563836	0					
ANR	5565304	PrimaryExpression	0		5563836	1					
ANR	5565305	Condition	i < MAX_ARGS	649:15:11003:11014	5563836	1	True				
ANR	5565306	RelationalExpression	i < MAX_ARGS		5563836	0		<			
ANR	5565307	Identifier	i		5563836	0					
ANR	5565308	Identifier	MAX_ARGS		5563836	1					
ANR	5565309	PostIncDecOperationExpression	i ++	649:29:11017:11019	5563836	2	True				
ANR	5565310	Identifier	i		5563836	0					
ANR	5565311	IncDec	++		5563836	1					
ANR	5565312	ExpressionStatement	qemu_free ( str_allocated [ i ] )	651:8:11031:11058	5563836	3	True				
ANR	5565313	CallExpression	qemu_free ( str_allocated [ i ] )		5563836	0					
ANR	5565314	Callee	qemu_free		5563836	0					
ANR	5565315	Identifier	qemu_free		5563836	0					
ANR	5565316	ArgumentList	str_allocated [ i ]		5563836	1					
ANR	5565317	Argument	str_allocated [ i ]		5563836	0					
ANR	5565318	ArrayIndexing	str_allocated [ i ]		5563836	0					
ANR	5565319	Identifier	str_allocated		5563836	0					
ANR	5565320	Identifier	i		5563836	1					
ANR	5565321	ReturnStatement	return ;	653:4:11065:11071	5563836	40	True				
ANR	5565322	ReturnType	static void		5563836	1					
ANR	5565323	Identifier	monitor_handle_command		5563836	2					
ANR	5565324	ParameterList	"Monitor * mon , const char * cmdline"		5563836	3					
ANR	5565325	Parameter	Monitor * mon	1:35:35:46	5563836	0	True				
ANR	5565326	ParameterType	Monitor *		5563836	0					
ANR	5565327	Identifier	mon		5563836	1					
ANR	5565328	Parameter	const char * cmdline	1:49:49:67	5563836	1	True				
ANR	5565329	ParameterType	const char *		5563836	0					
ANR	5565330	Identifier	cmdline		5563836	1					
ANR	5565331	CFGEntryNode	ENTRY		5563836		True				
ANR	5565332	CFGExitNode	EXIT		5563836		True				
ANR	5565333	InfiniteForNode	true		5563836		True				
ANR	5565334	InfiniteForNode	true		5563836		True				
ANR	5565335	Symbol	& val		5563836						
ANR	5565336	Symbol	* str_allocated		5563836						
ANR	5565337	Symbol	mon		5563836						
ANR	5565338	Symbol	* args		5563836						
ANR	5565339	Symbol	typestr		5563836						
ANR	5565340	Symbol	compare_cmd		5563836						
ANR	5565341	Symbol	strlen		5563836						
ANR	5565342	Symbol	cmdline		5563836						
ANR	5565343	Symbol	len		5563836						
ANR	5565344	Symbol	* typestr ++		5563836						
ANR	5565345	Symbol	nb_args		5563836						
ANR	5565346	Symbol	* cmd		5563836						
ANR	5565347	Symbol	mon_cmds		5563836						
ANR	5565348	Symbol	has_option		5563836						
ANR	5565349	Symbol	ret		5563836						
ANR	5565350	Symbol	val		5563836						
ANR	5565351	Symbol	NULL		5563836						
ANR	5565352	Symbol	default_fmt_format		5563836						
ANR	5565353	Symbol	count		5563836						
ANR	5565354	Symbol	format		5563836						
ANR	5565355	Symbol	handler_0		5563836						
ANR	5565356	Symbol	handler_3		5563836						
ANR	5565357	Symbol	handler_4		5563836						
ANR	5565358	Symbol	handler_1		5563836						
ANR	5565359	Symbol	handler_2		5563836						
ANR	5565360	Symbol	str		5563836						
ANR	5565361	Symbol	size		5563836						
ANR	5565362	Symbol	str_allocated		5563836						
ANR	5565363	Symbol	qemu_malloc		5563836						
ANR	5565364	Symbol	default_fmt_size		5563836						
ANR	5565365	Symbol	cmd		5563836						
ANR	5565366	Symbol	has_arg		5563836						
ANR	5565367	Symbol	get_str		5563836						
ANR	5565368	Symbol	* typestr		5563836						
ANR	5565369	Symbol	MAX_ARGS		5563836						
ANR	5565370	Symbol	handler_7		5563836						
ANR	5565371	Symbol	handler_5		5563836						
ANR	5565372	Symbol	* cmdname		5563836						
ANR	5565373	Symbol	handler_6		5563836						
ANR	5565374	Symbol	pstart		5563836						
ANR	5565375	Symbol	qemu_isdigit		5563836						
ANR	5565376	Symbol	* nb_args		5563836						
ANR	5565377	Symbol	c		5563836						
ANR	5565378	Symbol	cmd -> name		5563836						
ANR	5565379	Symbol	* p ++		5563836						
ANR	5565380	Symbol	i		5563836						
ANR	5565381	Symbol	qemu_isspace		5563836						
ANR	5565382	Symbol	p		5563836						
ANR	5565383	Symbol	args		5563836						
ANR	5565384	Symbol	q		5563836						
ANR	5565385	Symbol	buf		5563836						
ANR	5565386	Symbol	* i		5563836						
ANR	5565387	Symbol	get_expr		5563836						
ANR	5565388	Symbol	& p		5563836						
ANR	5565389	Symbol	cmd -> handler		5563836						
ANR	5565390	Symbol	cmdname		5563836						
ANR	5565391	Symbol	* p		5563836						
ANR	5565392	Symbol	cmd -> args_type		5563836						
ANR	5565393	Symbol	* len		5563836						
