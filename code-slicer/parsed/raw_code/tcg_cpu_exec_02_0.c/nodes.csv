command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8206835	File	/home/p4ultr4n/workplace/ReVeal/raw_code/tcg_cpu_exec_02_0.c								
ANR	8206836	Function	tcg_cpu_exec	1:0:0:690							
ANR	8206837	FunctionDef	tcg_cpu_exec ()		8206836	0					
ANR	8206838	CompoundStatement		3:0:25:690	8206836	0					
ANR	8206839	IdentifierDeclStatement	int ret = 0 ;	5:4:32:43	8206836	0	True				
ANR	8206840	IdentifierDecl	ret = 0		8206836	0					
ANR	8206841	IdentifierDeclType	int		8206836	0					
ANR	8206842	Identifier	ret		8206836	1					
ANR	8206843	AssignmentExpression	ret = 0		8206836	2		=			
ANR	8206844	Identifier	ret		8206836	0					
ANR	8206845	PrimaryExpression	0		8206836	1					
ANR	8206846	IfStatement	if ( next_cpu == NULL )		8206836	1					
ANR	8206847	Condition	next_cpu == NULL	9:8:56:71	8206836	0	True				
ANR	8206848	EqualityExpression	next_cpu == NULL		8206836	0		==			
ANR	8206849	Identifier	next_cpu		8206836	0					
ANR	8206850	Identifier	NULL		8206836	1					
ANR	8206851	ExpressionStatement	next_cpu = first_cpu	11:8:83:103	8206836	1	True				
ANR	8206852	AssignmentExpression	next_cpu = first_cpu		8206836	0		=			
ANR	8206853	Identifier	next_cpu		8206836	0					
ANR	8206854	Identifier	first_cpu		8206836	1					
ANR	8206855	ForStatement	for ( ; next_cpu != NULL ; next_cpu = next_cpu -> next_cpu )		8206836	2					
ANR	8206856	Condition	next_cpu != NULL	13:11:117:132	8206836	0	True				
ANR	8206857	EqualityExpression	next_cpu != NULL		8206836	0		!=			
ANR	8206858	Identifier	next_cpu		8206836	0					
ANR	8206859	Identifier	NULL		8206836	1					
ANR	8206860	AssignmentExpression	next_cpu = next_cpu -> next_cpu	13:29:135:163	8206836	1	True	=			
ANR	8206861	Identifier	next_cpu		8206836	0					
ANR	8206862	PtrMemberAccess	next_cpu -> next_cpu		8206836	1					
ANR	8206863	Identifier	next_cpu		8206836	0					
ANR	8206864	Identifier	next_cpu		8206836	1					
ANR	8206865	CompoundStatement		13:8:151:185	8206836	2					
ANR	8206866	IdentifierDeclStatement	CPUState * env = cur_cpu = next_cpu ;	15:8:177:211	8206836	0	True				
ANR	8206867	IdentifierDecl	* env = cur_cpu = next_cpu		8206836	0					
ANR	8206868	IdentifierDeclType	CPUState *		8206836	0					
ANR	8206869	Identifier	env		8206836	1					
ANR	8206870	AssignmentExpression	* env = cur_cpu = next_cpu		8206836	2		=			
ANR	8206871	Identifier	env		8206836	0					
ANR	8206872	AssignmentExpression	cur_cpu = next_cpu		8206836	1		=			
ANR	8206873	Identifier	cur_cpu		8206836	0					
ANR	8206874	Identifier	next_cpu		8206836	1					
ANR	8206875	ExpressionStatement	"qemu_clock_enable ( vm_clock , ( cur_cpu -> singlestep_enabled & SSTEP_NOTIMER ) == 0 )"	19:8:224:330	8206836	1	True				
ANR	8206876	CallExpression	"qemu_clock_enable ( vm_clock , ( cur_cpu -> singlestep_enabled & SSTEP_NOTIMER ) == 0 )"		8206836	0					
ANR	8206877	Callee	qemu_clock_enable		8206836	0					
ANR	8206878	Identifier	qemu_clock_enable		8206836	0					
ANR	8206879	ArgumentList	vm_clock		8206836	1					
ANR	8206880	Argument	vm_clock		8206836	0					
ANR	8206881	Identifier	vm_clock		8206836	0					
ANR	8206882	Argument	( cur_cpu -> singlestep_enabled & SSTEP_NOTIMER ) == 0		8206836	1					
ANR	8206883	EqualityExpression	( cur_cpu -> singlestep_enabled & SSTEP_NOTIMER ) == 0		8206836	0		==			
ANR	8206884	BitAndExpression	cur_cpu -> singlestep_enabled & SSTEP_NOTIMER		8206836	0		&			
ANR	8206885	PtrMemberAccess	cur_cpu -> singlestep_enabled		8206836	0					
ANR	8206886	Identifier	cur_cpu		8206836	0					
ANR	8206887	Identifier	singlestep_enabled		8206836	1					
ANR	8206888	Identifier	SSTEP_NOTIMER		8206836	1					
ANR	8206889	PrimaryExpression	0		8206836	1					
ANR	8206890	IfStatement	if ( qemu_alarm_pending ( ) )		8206836	2					
ANR	8206891	Condition	qemu_alarm_pending ( )	25:12:347:366	8206836	0	True				
ANR	8206892	CallExpression	qemu_alarm_pending ( )		8206836	0					
ANR	8206893	Callee	qemu_alarm_pending		8206836	0					
ANR	8206894	Identifier	qemu_alarm_pending		8206836	0					
ANR	8206895	ArgumentList			8206836	1					
ANR	8206896	BreakStatement	break ;	27:12:382:387	8206836	1	True				
ANR	8206897	IfStatement	if ( cpu_can_run ( env ) )		8206836	3					
ANR	8206898	Condition	cpu_can_run ( env )	29:12:402:417	8206836	0	True				
ANR	8206899	CallExpression	cpu_can_run ( env )		8206836	0					
ANR	8206900	Callee	cpu_can_run		8206836	0					
ANR	8206901	Identifier	cpu_can_run		8206836	0					
ANR	8206902	ArgumentList	env		8206836	1					
ANR	8206903	Argument	env		8206836	0					
ANR	8206904	Identifier	env		8206836	0					
ANR	8206905	ExpressionStatement	ret = qemu_cpu_exec ( env )	31:12:433:457	8206836	1	True				
ANR	8206906	AssignmentExpression	ret = qemu_cpu_exec ( env )		8206836	0		=			
ANR	8206907	Identifier	ret		8206836	0					
ANR	8206908	CallExpression	qemu_cpu_exec ( env )		8206836	1					
ANR	8206909	Callee	qemu_cpu_exec		8206836	0					
ANR	8206910	Identifier	qemu_cpu_exec		8206836	0					
ANR	8206911	ArgumentList	env		8206836	1					
ANR	8206912	Argument	env		8206836	0					
ANR	8206913	Identifier	env		8206836	0					
ANR	8206914	ElseStatement	else		8206836	0					
ANR	8206915	IfStatement	if ( env -> stop )		8206836	0					
ANR	8206916	Condition	env -> stop	33:17:477:485	8206836	0	True				
ANR	8206917	PtrMemberAccess	env -> stop		8206836	0					
ANR	8206918	Identifier	env		8206836	0					
ANR	8206919	Identifier	stop		8206836	1					
ANR	8206920	BreakStatement	break ;	35:12:501:506	8206836	1	True				
ANR	8206921	IfStatement	if ( ret == EXCP_DEBUG )		8206836	4					
ANR	8206922	Condition	ret == EXCP_DEBUG	39:12:523:539	8206836	0	True				
ANR	8206923	EqualityExpression	ret == EXCP_DEBUG		8206836	0		==			
ANR	8206924	Identifier	ret		8206836	0					
ANR	8206925	Identifier	EXCP_DEBUG		8206836	1					
ANR	8206926	CompoundStatement		37:31:516:516	8206836	1					
ANR	8206927	ExpressionStatement	gdb_set_stop_cpu ( env )	41:12:557:578	8206836	0	True				
ANR	8206928	CallExpression	gdb_set_stop_cpu ( env )		8206836	0					
ANR	8206929	Callee	gdb_set_stop_cpu		8206836	0					
ANR	8206930	Identifier	gdb_set_stop_cpu		8206836	0					
ANR	8206931	ArgumentList	env		8206836	1					
ANR	8206932	Argument	env		8206836	0					
ANR	8206933	Identifier	env		8206836	0					
ANR	8206934	ExpressionStatement	debug_requested = EXCP_DEBUG	43:12:593:621	8206836	1	True				
ANR	8206935	AssignmentExpression	debug_requested = EXCP_DEBUG		8206836	0		=			
ANR	8206936	Identifier	debug_requested		8206836	0					
ANR	8206937	Identifier	EXCP_DEBUG		8206836	1					
ANR	8206938	BreakStatement	break ;	45:12:636:641	8206836	2	True				
ANR	8206939	ReturnStatement	return tcg_has_work ( ) ;	51:4:666:687	8206836	3	True				
ANR	8206940	CallExpression	tcg_has_work ( )		8206836	0					
ANR	8206941	Callee	tcg_has_work		8206836	0					
ANR	8206942	Identifier	tcg_has_work		8206836	0					
ANR	8206943	ArgumentList			8206836	1					
ANR	8206944	ReturnType	bool		8206836	1					
ANR	8206945	Identifier	tcg_cpu_exec		8206836	2					
ANR	8206946	ParameterList			8206836	3					
ANR	8206947	CFGEntryNode	ENTRY		8206836		True				
ANR	8206948	CFGExitNode	EXIT		8206836		True				
ANR	8206949	Symbol	ret		8206836						
ANR	8206950	Symbol	NULL		8206836						
ANR	8206951	Symbol	* env		8206836						
ANR	8206952	Symbol	env -> stop		8206836						
ANR	8206953	Symbol	next_cpu -> next_cpu		8206836						
ANR	8206954	Symbol	cur_cpu		8206836						
ANR	8206955	Symbol	qemu_cpu_exec		8206836						
ANR	8206956	Symbol	first_cpu		8206836						
ANR	8206957	Symbol	env		8206836						
ANR	8206958	Symbol	* cur_cpu		8206836						
ANR	8206959	Symbol	vm_clock		8206836						
ANR	8206960	Symbol	debug_requested		8206836						
ANR	8206961	Symbol	tcg_has_work		8206836						
ANR	8206962	Symbol	cpu_can_run		8206836						
ANR	8206963	Symbol	next_cpu		8206836						
ANR	8206964	Symbol	* next_cpu		8206836						
ANR	8206965	Symbol	SSTEP_NOTIMER		8206836						
ANR	8206966	Symbol	qemu_alarm_pending		8206836						
ANR	8206967	Symbol	EXCP_DEBUG		8206836						
ANR	8206968	Symbol	cur_cpu -> singlestep_enabled		8206836						
