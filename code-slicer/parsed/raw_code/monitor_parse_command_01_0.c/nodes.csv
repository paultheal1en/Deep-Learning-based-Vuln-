command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5570257	File	/home/p4ultr4n/workplace/ReVeal/raw_code/monitor_parse_command_01_0.c								
ANR	5570258	Function	monitor_parse_command	1:0:0:8213							
ANR	5570259	FunctionDef	"monitor_parse_command (Monitor * mon , const char * cmdline , QDict * qdict)"		5570258	0					
ANR	5570260	CompoundStatement		7:0:190:8213	5570258	0					
ANR	5570261	IdentifierDeclStatement	"const char * p , * typestr ;"	9:4:197:220	5570258	0	True				
ANR	5570262	IdentifierDecl	* p		5570258	0					
ANR	5570263	IdentifierDeclType	const char *		5570258	0					
ANR	5570264	Identifier	p		5570258	1					
ANR	5570265	IdentifierDecl	* typestr		5570258	1					
ANR	5570266	IdentifierDeclType	const char *		5570258	0					
ANR	5570267	Identifier	typestr		5570258	1					
ANR	5570268	IdentifierDeclStatement	int c ;	11:4:227:232	5570258	1	True				
ANR	5570269	IdentifierDecl	c		5570258	0					
ANR	5570270	IdentifierDeclType	int		5570258	0					
ANR	5570271	Identifier	c		5570258	1					
ANR	5570272	IdentifierDeclStatement	const mon_cmd_t * cmd ;	13:4:239:259	5570258	2	True				
ANR	5570273	IdentifierDecl	* cmd		5570258	0					
ANR	5570274	IdentifierDeclType	const mon_cmd_t *		5570258	0					
ANR	5570275	Identifier	cmd		5570258	1					
ANR	5570276	IdentifierDeclStatement	char cmdname [ 256 ] ;	15:4:266:283	5570258	3	True				
ANR	5570277	IdentifierDecl	cmdname [ 256 ]		5570258	0					
ANR	5570278	IdentifierDeclType	char [ 256 ]		5570258	0					
ANR	5570279	Identifier	cmdname		5570258	1					
ANR	5570280	PrimaryExpression	256		5570258	2					
ANR	5570281	IdentifierDeclStatement	char buf [ 1024 ] ;	17:4:290:304	5570258	4	True				
ANR	5570282	IdentifierDecl	buf [ 1024 ]		5570258	0					
ANR	5570283	IdentifierDeclType	char [ 1024 ]		5570258	0					
ANR	5570284	Identifier	buf		5570258	1					
ANR	5570285	PrimaryExpression	1024		5570258	2					
ANR	5570286	IdentifierDeclStatement	char * key ;	19:4:311:320	5570258	5	True				
ANR	5570287	IdentifierDecl	* key		5570258	0					
ANR	5570288	IdentifierDeclType	char *		5570258	0					
ANR	5570289	Identifier	key		5570258	1					
ANR	5570290	ExpressionStatement	"monitor_printf ( mon , ""command='%s'\\n"" , cmdline )"	25:4:343:389	5570258	6	True				
ANR	5570291	CallExpression	"monitor_printf ( mon , ""command='%s'\\n"" , cmdline )"		5570258	0					
ANR	5570292	Callee	monitor_printf		5570258	0					
ANR	5570293	Identifier	monitor_printf		5570258	0					
ANR	5570294	ArgumentList	mon		5570258	1					
ANR	5570295	Argument	mon		5570258	0					
ANR	5570296	Identifier	mon		5570258	0					
ANR	5570297	Argument	"""command='%s'\\n"""		5570258	1					
ANR	5570298	PrimaryExpression	"""command='%s'\\n"""		5570258	0					
ANR	5570299	Argument	cmdline		5570258	2					
ANR	5570300	Identifier	cmdline		5570258	0					
ANR	5570301	ExpressionStatement	"p = get_command_name ( cmdline , cmdname , sizeof ( cmdname ) )"	33:4:442:497	5570258	7	True				
ANR	5570302	AssignmentExpression	"p = get_command_name ( cmdline , cmdname , sizeof ( cmdname ) )"		5570258	0		=			
ANR	5570303	Identifier	p		5570258	0					
ANR	5570304	CallExpression	"get_command_name ( cmdline , cmdname , sizeof ( cmdname ) )"		5570258	1					
ANR	5570305	Callee	get_command_name		5570258	0					
ANR	5570306	Identifier	get_command_name		5570258	0					
ANR	5570307	ArgumentList	cmdline		5570258	1					
ANR	5570308	Argument	cmdline		5570258	0					
ANR	5570309	Identifier	cmdline		5570258	0					
ANR	5570310	Argument	cmdname		5570258	1					
ANR	5570311	Identifier	cmdname		5570258	0					
ANR	5570312	Argument	sizeof ( cmdname )		5570258	2					
ANR	5570313	SizeofExpression	sizeof ( cmdname )		5570258	0					
ANR	5570314	Sizeof	sizeof		5570258	0					
ANR	5570315	SizeofOperand	cmdname		5570258	1					
ANR	5570316	IfStatement	if ( ! p )		5570258	8					
ANR	5570317	Condition	! p	35:8:508:509	5570258	0	True				
ANR	5570318	UnaryOperationExpression	! p		5570258	0					
ANR	5570319	UnaryOperator	!		5570258	0					
ANR	5570320	Identifier	p		5570258	1					
ANR	5570321	ReturnStatement	return NULL ;	37:8:521:532	5570258	1	True				
ANR	5570322	Identifier	NULL		5570258	0					
ANR	5570323	ForStatement	for ( cmd = mon_cmds ; cmd -> name != NULL ; cmd ++ )		5570258	9					
ANR	5570324	ForInit	cmd = mon_cmds ;	43:8:573:587	5570258	0	True				
ANR	5570325	AssignmentExpression	cmd = mon_cmds		5570258	0		=			
ANR	5570326	Identifier	cmd		5570258	0					
ANR	5570327	Identifier	mon_cmds		5570258	1					
ANR	5570328	Condition	cmd -> name != NULL	43:24:589:605	5570258	1	True				
ANR	5570329	EqualityExpression	cmd -> name != NULL		5570258	0		!=			
ANR	5570330	PtrMemberAccess	cmd -> name		5570258	0					
ANR	5570331	Identifier	cmd		5570258	0					
ANR	5570332	Identifier	name		5570258	1					
ANR	5570333	Identifier	NULL		5570258	1					
ANR	5570334	PostIncDecOperationExpression	cmd ++	43:43:608:612	5570258	2	True				
ANR	5570335	Identifier	cmd		5570258	0					
ANR	5570336	IncDec	++		5570258	1					
ANR	5570337	CompoundStatement		37:50:424:424	5570258	3					
ANR	5570338	IfStatement	"if ( compare_cmd ( cmdname , cmd -> name ) )"		5570258	0					
ANR	5570339	Condition	"compare_cmd ( cmdname , cmd -> name )"	45:12:630:660	5570258	0	True				
ANR	5570340	CallExpression	"compare_cmd ( cmdname , cmd -> name )"		5570258	0					
ANR	5570341	Callee	compare_cmd		5570258	0					
ANR	5570342	Identifier	compare_cmd		5570258	0					
ANR	5570343	ArgumentList	cmdname		5570258	1					
ANR	5570344	Argument	cmdname		5570258	0					
ANR	5570345	Identifier	cmdname		5570258	0					
ANR	5570346	Argument	cmd -> name		5570258	1					
ANR	5570347	PtrMemberAccess	cmd -> name		5570258	0					
ANR	5570348	Identifier	cmd		5570258	0					
ANR	5570349	Identifier	name		5570258	1					
ANR	5570350	BreakStatement	break ;	47:12:676:681	5570258	1	True				
ANR	5570351	IfStatement	if ( cmd -> name == NULL )		5570258	10					
ANR	5570352	Condition	cmd -> name == NULL	53:8:701:717	5570258	0	True				
ANR	5570353	EqualityExpression	cmd -> name == NULL		5570258	0		==			
ANR	5570354	PtrMemberAccess	cmd -> name		5570258	0					
ANR	5570355	Identifier	cmd		5570258	0					
ANR	5570356	Identifier	name		5570258	1					
ANR	5570357	Identifier	NULL		5570258	1					
ANR	5570358	CompoundStatement		47:27:529:529	5570258	1					
ANR	5570359	ExpressionStatement	"monitor_printf ( mon , ""unknown command: '%s'\\n"" , cmdname )"	55:8:731:786	5570258	0	True				
ANR	5570360	CallExpression	"monitor_printf ( mon , ""unknown command: '%s'\\n"" , cmdname )"		5570258	0					
ANR	5570361	Callee	monitor_printf		5570258	0					
ANR	5570362	Identifier	monitor_printf		5570258	0					
ANR	5570363	ArgumentList	mon		5570258	1					
ANR	5570364	Argument	mon		5570258	0					
ANR	5570365	Identifier	mon		5570258	0					
ANR	5570366	Argument	"""unknown command: '%s'\\n"""		5570258	1					
ANR	5570367	PrimaryExpression	"""unknown command: '%s'\\n"""		5570258	0					
ANR	5570368	Argument	cmdname		5570258	2					
ANR	5570369	Identifier	cmdname		5570258	0					
ANR	5570370	ReturnStatement	return NULL ;	57:8:797:808	5570258	1	True				
ANR	5570371	Identifier	NULL		5570258	0					
ANR	5570372	ExpressionStatement	typestr = cmd -> args_type	65:4:856:880	5570258	11	True				
ANR	5570373	AssignmentExpression	typestr = cmd -> args_type		5570258	0		=			
ANR	5570374	Identifier	typestr		5570258	0					
ANR	5570375	PtrMemberAccess	cmd -> args_type		5570258	1					
ANR	5570376	Identifier	cmd		5570258	0					
ANR	5570377	Identifier	args_type		5570258	1					
ANR	5570378	ForStatement	for ( ; ; )		5570258	12					
ANR	5570379	CompoundStatement		61:12:704:704	5570258	0					
ANR	5570380	ExpressionStatement	"typestr = key_get_info ( typestr , & key )"	69:8:906:943	5570258	0	True				
ANR	5570381	AssignmentExpression	"typestr = key_get_info ( typestr , & key )"		5570258	0		=			
ANR	5570382	Identifier	typestr		5570258	0					
ANR	5570383	CallExpression	"key_get_info ( typestr , & key )"		5570258	1					
ANR	5570384	Callee	key_get_info		5570258	0					
ANR	5570385	Identifier	key_get_info		5570258	0					
ANR	5570386	ArgumentList	typestr		5570258	1					
ANR	5570387	Argument	typestr		5570258	0					
ANR	5570388	Identifier	typestr		5570258	0					
ANR	5570389	Argument	& key		5570258	1					
ANR	5570390	UnaryOperationExpression	& key		5570258	0					
ANR	5570391	UnaryOperator	&		5570258	0					
ANR	5570392	Identifier	key		5570258	1					
ANR	5570393	IfStatement	if ( ! typestr )		5570258	1					
ANR	5570394	Condition	! typestr	71:12:958:965	5570258	0	True				
ANR	5570395	UnaryOperationExpression	! typestr		5570258	0					
ANR	5570396	UnaryOperator	!		5570258	0					
ANR	5570397	Identifier	typestr		5570258	1					
ANR	5570398	BreakStatement	break ;	73:12:981:986	5570258	1	True				
ANR	5570399	ExpressionStatement	c = * typestr	75:8:997:1009	5570258	2	True				
ANR	5570400	AssignmentExpression	c = * typestr		5570258	0		=			
ANR	5570401	Identifier	c		5570258	0					
ANR	5570402	UnaryOperationExpression	* typestr		5570258	1					
ANR	5570403	UnaryOperator	*		5570258	0					
ANR	5570404	Identifier	typestr		5570258	1					
ANR	5570405	ExpressionStatement	typestr ++	77:8:1020:1029	5570258	3	True				
ANR	5570406	PostIncDecOperationExpression	typestr ++		5570258	0					
ANR	5570407	Identifier	typestr		5570258	0					
ANR	5570408	IncDec	++		5570258	1					
ANR	5570409	SwitchStatement	switch ( c )		5570258	4					
ANR	5570410	Condition	c	79:15:1047:1047	5570258	0	True				
ANR	5570411	Identifier	c		5570258	0					
ANR	5570412	CompoundStatement		73:18:859:859	5570258	1					
ANR	5570413	Label	case 'F' :	81:8:1061:1069	5570258	0	True				
ANR	5570414	Label	case 'B' :	83:8:1080:1088	5570258	1	True				
ANR	5570415	Label	case 's' :	85:8:1099:1107	5570258	2	True				
ANR	5570416	CompoundStatement		83:16:950:957	5570258	3					
ANR	5570417	IdentifierDeclStatement	int ret ;	89:16:1141:1148	5570258	0	True				
ANR	5570418	IdentifierDecl	ret		5570258	0					
ANR	5570419	IdentifierDeclType	int		5570258	0					
ANR	5570420	Identifier	ret		5570258	1					
ANR	5570421	WhileStatement	while ( qemu_isspace ( * p ) )		5570258	1					
ANR	5570422	Condition	qemu_isspace ( * p )	93:23:1176:1191	5570258	0	True				
ANR	5570423	CallExpression	qemu_isspace ( * p )		5570258	0					
ANR	5570424	Callee	qemu_isspace		5570258	0					
ANR	5570425	Identifier	qemu_isspace		5570258	0					
ANR	5570426	ArgumentList	* p		5570258	1					
ANR	5570427	Argument	* p		5570258	0					
ANR	5570428	UnaryOperationExpression	* p		5570258	0					
ANR	5570429	UnaryOperator	*		5570258	0					
ANR	5570430	Identifier	p		5570258	1					
ANR	5570431	ExpressionStatement	p ++	95:20:1215:1218	5570258	1	True				
ANR	5570432	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570433	Identifier	p		5570258	0					
ANR	5570434	IncDec	++		5570258	1					
ANR	5570435	IfStatement	if ( * typestr == '?' )		5570258	2					
ANR	5570436	Condition	* typestr == '?'	97:20:1241:1255	5570258	0	True				
ANR	5570437	EqualityExpression	* typestr == '?'		5570258	0		==			
ANR	5570438	UnaryOperationExpression	* typestr		5570258	0					
ANR	5570439	UnaryOperator	*		5570258	0					
ANR	5570440	Identifier	typestr		5570258	1					
ANR	5570441	PrimaryExpression	'?'		5570258	1					
ANR	5570442	CompoundStatement		91:37:1067:1067	5570258	1					
ANR	5570443	ExpressionStatement	typestr ++	99:20:1281:1290	5570258	0	True				
ANR	5570444	PostIncDecOperationExpression	typestr ++		5570258	0					
ANR	5570445	Identifier	typestr		5570258	0					
ANR	5570446	IncDec	++		5570258	1					
ANR	5570447	IfStatement	if ( * p == '\\0' )		5570258	1					
ANR	5570448	Condition	* p == '\\0'	101:24:1317:1326	5570258	0	True				
ANR	5570449	EqualityExpression	* p == '\\0'		5570258	0		==			
ANR	5570450	UnaryOperationExpression	* p		5570258	0					
ANR	5570451	UnaryOperator	*		5570258	0					
ANR	5570452	Identifier	p		5570258	1					
ANR	5570453	PrimaryExpression	'\\0'		5570258	1					
ANR	5570454	CompoundStatement		95:36:1138:1138	5570258	1					
ANR	5570455	BreakStatement	break ;	105:24:1421:1426	5570258	0	True				
ANR	5570456	ExpressionStatement	"ret = get_str ( buf , sizeof ( buf ) , & p )"	111:16:1487:1522	5570258	3	True				
ANR	5570457	AssignmentExpression	"ret = get_str ( buf , sizeof ( buf ) , & p )"		5570258	0		=			
ANR	5570458	Identifier	ret		5570258	0					
ANR	5570459	CallExpression	"get_str ( buf , sizeof ( buf ) , & p )"		5570258	1					
ANR	5570460	Callee	get_str		5570258	0					
ANR	5570461	Identifier	get_str		5570258	0					
ANR	5570462	ArgumentList	buf		5570258	1					
ANR	5570463	Argument	buf		5570258	0					
ANR	5570464	Identifier	buf		5570258	0					
ANR	5570465	Argument	sizeof ( buf )		5570258	1					
ANR	5570466	SizeofExpression	sizeof ( buf )		5570258	0					
ANR	5570467	Sizeof	sizeof		5570258	0					
ANR	5570468	SizeofOperand	buf		5570258	1					
ANR	5570469	Argument	& p		5570258	2					
ANR	5570470	UnaryOperationExpression	& p		5570258	0					
ANR	5570471	UnaryOperator	&		5570258	0					
ANR	5570472	Identifier	p		5570258	1					
ANR	5570473	IfStatement	if ( ret < 0 )		5570258	4					
ANR	5570474	Condition	ret < 0	113:20:1545:1551	5570258	0	True				
ANR	5570475	RelationalExpression	ret < 0		5570258	0		<			
ANR	5570476	Identifier	ret		5570258	0					
ANR	5570477	PrimaryExpression	0		5570258	1					
ANR	5570478	CompoundStatement		107:29:1363:1363	5570258	1					
ANR	5570479	SwitchStatement	switch ( c )		5570258	0					
ANR	5570480	Condition	c	115:27:1584:1584	5570258	0	True				
ANR	5570481	Identifier	c		5570258	0					
ANR	5570482	CompoundStatement		109:30:1396:1396	5570258	1					
ANR	5570483	Label	case 'F' :	117:20:1610:1618	5570258	0	True				
ANR	5570484	ExpressionStatement	"monitor_printf ( mon , ""%s: filename expected\\n"" , cmdname )"	119:24:1645:1740	5570258	1	True				
ANR	5570485	CallExpression	"monitor_printf ( mon , ""%s: filename expected\\n"" , cmdname )"		5570258	0					
ANR	5570486	Callee	monitor_printf		5570258	0					
ANR	5570487	Identifier	monitor_printf		5570258	0					
ANR	5570488	ArgumentList	mon		5570258	1					
ANR	5570489	Argument	mon		5570258	0					
ANR	5570490	Identifier	mon		5570258	0					
ANR	5570491	Argument	"""%s: filename expected\\n"""		5570258	1					
ANR	5570492	PrimaryExpression	"""%s: filename expected\\n"""		5570258	0					
ANR	5570493	Argument	cmdname		5570258	2					
ANR	5570494	Identifier	cmdname		5570258	0					
ANR	5570495	BreakStatement	break ;	123:24:1767:1772	5570258	2	True				
ANR	5570496	Label	case 'B' :	125:20:1795:1803	5570258	3	True				
ANR	5570497	ExpressionStatement	"monitor_printf ( mon , ""%s: block device name expected\\n"" , cmdname )"	127:24:1830:1934	5570258	4	True				
ANR	5570498	CallExpression	"monitor_printf ( mon , ""%s: block device name expected\\n"" , cmdname )"		5570258	0					
ANR	5570499	Callee	monitor_printf		5570258	0					
ANR	5570500	Identifier	monitor_printf		5570258	0					
ANR	5570501	ArgumentList	mon		5570258	1					
ANR	5570502	Argument	mon		5570258	0					
ANR	5570503	Identifier	mon		5570258	0					
ANR	5570504	Argument	"""%s: block device name expected\\n"""		5570258	1					
ANR	5570505	PrimaryExpression	"""%s: block device name expected\\n"""		5570258	0					
ANR	5570506	Argument	cmdname		5570258	2					
ANR	5570507	Identifier	cmdname		5570258	0					
ANR	5570508	BreakStatement	break ;	131:24:1961:1966	5570258	5	True				
ANR	5570509	Label	default :	133:20:1989:1996	5570258	6	True				
ANR	5570510	Identifier	default		5570258	0					
ANR	5570511	ExpressionStatement	"monitor_printf ( mon , ""%s: string expected\\n"" , cmdname )"	135:24:2023:2076	5570258	7	True				
ANR	5570512	CallExpression	"monitor_printf ( mon , ""%s: string expected\\n"" , cmdname )"		5570258	0					
ANR	5570513	Callee	monitor_printf		5570258	0					
ANR	5570514	Identifier	monitor_printf		5570258	0					
ANR	5570515	ArgumentList	mon		5570258	1					
ANR	5570516	Argument	mon		5570258	0					
ANR	5570517	Identifier	mon		5570258	0					
ANR	5570518	Argument	"""%s: string expected\\n"""		5570258	1					
ANR	5570519	PrimaryExpression	"""%s: string expected\\n"""		5570258	0					
ANR	5570520	Argument	cmdname		5570258	2					
ANR	5570521	Identifier	cmdname		5570258	0					
ANR	5570522	BreakStatement	break ;	137:24:2103:2108	5570258	8	True				
ANR	5570523	GotoStatement	goto fail ;	141:20:2154:2163	5570258	1	True				
ANR	5570524	Identifier	fail		5570258	0					
ANR	5570525	ExpressionStatement	"qdict_put ( qdict , key , qstring_from_str ( buf ) )"	145:16:2201:2245	5570258	5	True				
ANR	5570526	CallExpression	"qdict_put ( qdict , key , qstring_from_str ( buf ) )"		5570258	0					
ANR	5570527	Callee	qdict_put		5570258	0					
ANR	5570528	Identifier	qdict_put		5570258	0					
ANR	5570529	ArgumentList	qdict		5570258	1					
ANR	5570530	Argument	qdict		5570258	0					
ANR	5570531	Identifier	qdict		5570258	0					
ANR	5570532	Argument	key		5570258	1					
ANR	5570533	Identifier	key		5570258	0					
ANR	5570534	Argument	qstring_from_str ( buf )		5570258	2					
ANR	5570535	CallExpression	qstring_from_str ( buf )		5570258	0					
ANR	5570536	Callee	qstring_from_str		5570258	0					
ANR	5570537	Identifier	qstring_from_str		5570258	0					
ANR	5570538	ArgumentList	buf		5570258	1					
ANR	5570539	Argument	buf		5570258	0					
ANR	5570540	Identifier	buf		5570258	0					
ANR	5570541	BreakStatement	break ;	149:12:2275:2280	5570258	4	True				
ANR	5570542	Label	case '/' :	151:8:2291:2299	5570258	5	True				
ANR	5570543	CompoundStatement		149:16:2142:2165	5570258	6					
ANR	5570544	IdentifierDeclStatement	"int count , format , size ;"	155:16:2333:2356	5570258	0	True				
ANR	5570545	IdentifierDecl	count		5570258	0					
ANR	5570546	IdentifierDeclType	int		5570258	0					
ANR	5570547	Identifier	count		5570258	1					
ANR	5570548	IdentifierDecl	format		5570258	1					
ANR	5570549	IdentifierDeclType	int		5570258	0					
ANR	5570550	Identifier	format		5570258	1					
ANR	5570551	IdentifierDecl	size		5570258	2					
ANR	5570552	IdentifierDeclType	int		5570258	0					
ANR	5570553	Identifier	size		5570258	1					
ANR	5570554	WhileStatement	while ( qemu_isspace ( * p ) )		5570258	1					
ANR	5570555	Condition	qemu_isspace ( * p )	159:23:2384:2399	5570258	0	True				
ANR	5570556	CallExpression	qemu_isspace ( * p )		5570258	0					
ANR	5570557	Callee	qemu_isspace		5570258	0					
ANR	5570558	Identifier	qemu_isspace		5570258	0					
ANR	5570559	ArgumentList	* p		5570258	1					
ANR	5570560	Argument	* p		5570258	0					
ANR	5570561	UnaryOperationExpression	* p		5570258	0					
ANR	5570562	UnaryOperator	*		5570258	0					
ANR	5570563	Identifier	p		5570258	1					
ANR	5570564	ExpressionStatement	p ++	161:20:2423:2426	5570258	1	True				
ANR	5570565	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570566	Identifier	p		5570258	0					
ANR	5570567	IncDec	++		5570258	1					
ANR	5570568	IfStatement	if ( * p == '/' )		5570258	2					
ANR	5570569	Condition	* p == '/'	163:20:2449:2457	5570258	0	True				
ANR	5570570	EqualityExpression	* p == '/'		5570258	0		==			
ANR	5570571	UnaryOperationExpression	* p		5570258	0					
ANR	5570572	UnaryOperator	*		5570258	0					
ANR	5570573	Identifier	p		5570258	1					
ANR	5570574	PrimaryExpression	'/'		5570258	1					
ANR	5570575	CompoundStatement		157:31:2269:2269	5570258	1					
ANR	5570576	ExpressionStatement	p ++	167:20:2523:2526	5570258	0	True				
ANR	5570577	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570578	Identifier	p		5570258	0					
ANR	5570579	IncDec	++		5570258	1					
ANR	5570580	ExpressionStatement	count = 1	169:20:2549:2558	5570258	1	True				
ANR	5570581	AssignmentExpression	count = 1		5570258	0		=			
ANR	5570582	Identifier	count		5570258	0					
ANR	5570583	PrimaryExpression	1		5570258	1					
ANR	5570584	IfStatement	if ( qemu_isdigit ( * p ) )		5570258	2					
ANR	5570585	Condition	qemu_isdigit ( * p )	171:24:2585:2600	5570258	0	True				
ANR	5570586	CallExpression	qemu_isdigit ( * p )		5570258	0					
ANR	5570587	Callee	qemu_isdigit		5570258	0					
ANR	5570588	Identifier	qemu_isdigit		5570258	0					
ANR	5570589	ArgumentList	* p		5570258	1					
ANR	5570590	Argument	* p		5570258	0					
ANR	5570591	UnaryOperationExpression	* p		5570258	0					
ANR	5570592	UnaryOperator	*		5570258	0					
ANR	5570593	Identifier	p		5570258	1					
ANR	5570594	CompoundStatement		165:42:2412:2412	5570258	1					
ANR	5570595	ExpressionStatement	count = 0	173:24:2630:2639	5570258	0	True				
ANR	5570596	AssignmentExpression	count = 0		5570258	0		=			
ANR	5570597	Identifier	count		5570258	0					
ANR	5570598	PrimaryExpression	0		5570258	1					
ANR	5570599	WhileStatement	while ( qemu_isdigit ( * p ) )		5570258	1					
ANR	5570600	Condition	qemu_isdigit ( * p )	175:31:2673:2688	5570258	0	True				
ANR	5570601	CallExpression	qemu_isdigit ( * p )		5570258	0					
ANR	5570602	Callee	qemu_isdigit		5570258	0					
ANR	5570603	Identifier	qemu_isdigit		5570258	0					
ANR	5570604	ArgumentList	* p		5570258	1					
ANR	5570605	Argument	* p		5570258	0					
ANR	5570606	UnaryOperationExpression	* p		5570258	0					
ANR	5570607	UnaryOperator	*		5570258	0					
ANR	5570608	Identifier	p		5570258	1					
ANR	5570609	CompoundStatement		169:49:2500:2500	5570258	1					
ANR	5570610	ExpressionStatement	count = count * 10 + ( * p - '0' )	177:28:2722:2753	5570258	0	True				
ANR	5570611	AssignmentExpression	count = count * 10 + ( * p - '0' )		5570258	0		=			
ANR	5570612	Identifier	count		5570258	0					
ANR	5570613	AdditiveExpression	count * 10 + ( * p - '0' )		5570258	1		+			
ANR	5570614	MultiplicativeExpression	count * 10		5570258	0		*			
ANR	5570615	Identifier	count		5570258	0					
ANR	5570616	PrimaryExpression	10		5570258	1					
ANR	5570617	AdditiveExpression	* p - '0'		5570258	1		-			
ANR	5570618	UnaryOperationExpression	* p		5570258	0					
ANR	5570619	UnaryOperator	*		5570258	0					
ANR	5570620	Identifier	p		5570258	1					
ANR	5570621	PrimaryExpression	'0'		5570258	1					
ANR	5570622	ExpressionStatement	p ++	179:28:2784:2787	5570258	1	True				
ANR	5570623	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570624	Identifier	p		5570258	0					
ANR	5570625	IncDec	++		5570258	1					
ANR	5570626	ExpressionStatement	size = - 1	185:20:2860:2869	5570258	3	True				
ANR	5570627	AssignmentExpression	size = - 1		5570258	0		=			
ANR	5570628	Identifier	size		5570258	0					
ANR	5570629	UnaryOperationExpression	- 1		5570258	1					
ANR	5570630	UnaryOperator	-		5570258	0					
ANR	5570631	PrimaryExpression	1		5570258	1					
ANR	5570632	ExpressionStatement	format = - 1	187:20:2892:2903	5570258	4	True				
ANR	5570633	AssignmentExpression	format = - 1		5570258	0		=			
ANR	5570634	Identifier	format		5570258	0					
ANR	5570635	UnaryOperationExpression	- 1		5570258	1					
ANR	5570636	UnaryOperator	-		5570258	0					
ANR	5570637	PrimaryExpression	1		5570258	1					
ANR	5570638	ForStatement	for ( ; ; )		5570258	5					
ANR	5570639	CompoundStatement		183:28:2743:2743	5570258	0					
ANR	5570640	SwitchStatement	switch ( * p )		5570258	0					
ANR	5570641	Condition	* p	191:31:2968:2969	5570258	0	True				
ANR	5570642	UnaryOperationExpression	* p		5570258	0					
ANR	5570643	UnaryOperator	*		5570258	0					
ANR	5570644	Identifier	p		5570258	1					
ANR	5570645	CompoundStatement		185:35:2781:2781	5570258	1					
ANR	5570646	Label	case 'o' :	193:24:2999:3007	5570258	0	True				
ANR	5570647	Label	case 'd' :	195:24:3034:3042	5570258	1	True				
ANR	5570648	Label	case 'u' :	197:24:3069:3077	5570258	2	True				
ANR	5570649	Label	case 'x' :	199:24:3104:3112	5570258	3	True				
ANR	5570650	Label	case 'i' :	201:24:3139:3147	5570258	4	True				
ANR	5570651	Label	case 'c' :	203:24:3174:3182	5570258	5	True				
ANR	5570652	ExpressionStatement	format = * p ++	205:28:3213:3226	5570258	6	True				
ANR	5570653	AssignmentExpression	format = * p ++		5570258	0		=			
ANR	5570654	Identifier	format		5570258	0					
ANR	5570655	UnaryOperationExpression	* p ++		5570258	1					
ANR	5570656	UnaryOperator	*		5570258	0					
ANR	5570657	PostIncDecOperationExpression	p ++		5570258	1					
ANR	5570658	Identifier	p		5570258	0					
ANR	5570659	IncDec	++		5570258	1					
ANR	5570660	BreakStatement	break ;	207:28:3257:3262	5570258	7	True				
ANR	5570661	Label	case 'b' :	209:24:3289:3297	5570258	8	True				
ANR	5570662	ExpressionStatement	size = 1	211:28:3328:3336	5570258	9	True				
ANR	5570663	AssignmentExpression	size = 1		5570258	0		=			
ANR	5570664	Identifier	size		5570258	0					
ANR	5570665	PrimaryExpression	1		5570258	1					
ANR	5570666	ExpressionStatement	p ++	213:28:3367:3370	5570258	10	True				
ANR	5570667	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570668	Identifier	p		5570258	0					
ANR	5570669	IncDec	++		5570258	1					
ANR	5570670	BreakStatement	break ;	215:28:3401:3406	5570258	11	True				
ANR	5570671	Label	case 'h' :	217:24:3433:3441	5570258	12	True				
ANR	5570672	ExpressionStatement	size = 2	219:28:3472:3480	5570258	13	True				
ANR	5570673	AssignmentExpression	size = 2		5570258	0		=			
ANR	5570674	Identifier	size		5570258	0					
ANR	5570675	PrimaryExpression	2		5570258	1					
ANR	5570676	ExpressionStatement	p ++	221:28:3511:3514	5570258	14	True				
ANR	5570677	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570678	Identifier	p		5570258	0					
ANR	5570679	IncDec	++		5570258	1					
ANR	5570680	BreakStatement	break ;	223:28:3545:3550	5570258	15	True				
ANR	5570681	Label	case 'w' :	225:24:3577:3585	5570258	16	True				
ANR	5570682	ExpressionStatement	size = 4	227:28:3616:3624	5570258	17	True				
ANR	5570683	AssignmentExpression	size = 4		5570258	0		=			
ANR	5570684	Identifier	size		5570258	0					
ANR	5570685	PrimaryExpression	4		5570258	1					
ANR	5570686	ExpressionStatement	p ++	229:28:3655:3658	5570258	18	True				
ANR	5570687	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570688	Identifier	p		5570258	0					
ANR	5570689	IncDec	++		5570258	1					
ANR	5570690	BreakStatement	break ;	231:28:3689:3694	5570258	19	True				
ANR	5570691	Label	case 'g' :	233:24:3721:3729	5570258	20	True				
ANR	5570692	Label	case 'L' :	235:24:3756:3764	5570258	21	True				
ANR	5570693	ExpressionStatement	size = 8	237:28:3795:3803	5570258	22	True				
ANR	5570694	AssignmentExpression	size = 8		5570258	0		=			
ANR	5570695	Identifier	size		5570258	0					
ANR	5570696	PrimaryExpression	8		5570258	1					
ANR	5570697	ExpressionStatement	p ++	239:28:3834:3837	5570258	23	True				
ANR	5570698	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570699	Identifier	p		5570258	0					
ANR	5570700	IncDec	++		5570258	1					
ANR	5570701	BreakStatement	break ;	241:28:3868:3873	5570258	24	True				
ANR	5570702	Label	default :	243:24:3900:3907	5570258	25	True				
ANR	5570703	Identifier	default		5570258	0					
ANR	5570704	GotoStatement	goto next ;	245:28:3938:3947	5570258	26	True				
ANR	5570705	Identifier	next		5570258	0					
ANR	5570706	Label	next :	251:16:4016:4020	5570258	6	True				
ANR	5570707	Identifier	next		5570258	0					
ANR	5570708	IfStatement	if ( * p != '\\0' && ! qemu_isspace ( * p ) )		5570258	7					
ANR	5570709	Condition	* p != '\\0' && ! qemu_isspace ( * p )	253:24:4047:4077	5570258	0	True				
ANR	5570710	AndExpression	* p != '\\0' && ! qemu_isspace ( * p )		5570258	0		&&			
ANR	5570711	EqualityExpression	* p != '\\0'		5570258	0		!=			
ANR	5570712	UnaryOperationExpression	* p		5570258	0					
ANR	5570713	UnaryOperator	*		5570258	0					
ANR	5570714	Identifier	p		5570258	1					
ANR	5570715	PrimaryExpression	'\\0'		5570258	1					
ANR	5570716	UnaryOperationExpression	! qemu_isspace ( * p )		5570258	1					
ANR	5570717	UnaryOperator	!		5570258	0					
ANR	5570718	CallExpression	qemu_isspace ( * p )		5570258	1					
ANR	5570719	Callee	qemu_isspace		5570258	0					
ANR	5570720	Identifier	qemu_isspace		5570258	0					
ANR	5570721	ArgumentList	* p		5570258	1					
ANR	5570722	Argument	* p		5570258	0					
ANR	5570723	UnaryOperationExpression	* p		5570258	0					
ANR	5570724	UnaryOperator	*		5570258	0					
ANR	5570725	Identifier	p		5570258	1					
ANR	5570726	CompoundStatement		247:57:3889:3889	5570258	1					
ANR	5570727	ExpressionStatement	"monitor_printf ( mon , ""invalid char in format: '%c'\\n"" , * p )"	255:24:4107:4204	5570258	0	True				
ANR	5570728	CallExpression	"monitor_printf ( mon , ""invalid char in format: '%c'\\n"" , * p )"		5570258	0					
ANR	5570729	Callee	monitor_printf		5570258	0					
ANR	5570730	Identifier	monitor_printf		5570258	0					
ANR	5570731	ArgumentList	mon		5570258	1					
ANR	5570732	Argument	mon		5570258	0					
ANR	5570733	Identifier	mon		5570258	0					
ANR	5570734	Argument	"""invalid char in format: '%c'\\n"""		5570258	1					
ANR	5570735	PrimaryExpression	"""invalid char in format: '%c'\\n"""		5570258	0					
ANR	5570736	Argument	* p		5570258	2					
ANR	5570737	UnaryOperationExpression	* p		5570258	0					
ANR	5570738	UnaryOperator	*		5570258	0					
ANR	5570739	Identifier	p		5570258	1					
ANR	5570740	GotoStatement	goto fail ;	259:24:4231:4240	5570258	1	True				
ANR	5570741	Identifier	fail		5570258	0					
ANR	5570742	IfStatement	if ( format < 0 )		5570258	8					
ANR	5570743	Condition	format < 0	263:24:4290:4299	5570258	0	True				
ANR	5570744	RelationalExpression	format < 0		5570258	0		<			
ANR	5570745	Identifier	format		5570258	0					
ANR	5570746	PrimaryExpression	0		5570258	1					
ANR	5570747	ExpressionStatement	format = default_fmt_format	265:24:4327:4354	5570258	1	True				
ANR	5570748	AssignmentExpression	format = default_fmt_format		5570258	0		=			
ANR	5570749	Identifier	format		5570258	0					
ANR	5570750	Identifier	default_fmt_format		5570258	1					
ANR	5570751	IfStatement	if ( format != 'i' )		5570258	9					
ANR	5570752	Condition	format != 'i'	267:24:4381:4393	5570258	0	True				
ANR	5570753	EqualityExpression	format != 'i'		5570258	0		!=			
ANR	5570754	Identifier	format		5570258	0					
ANR	5570755	PrimaryExpression	'i'		5570258	1					
ANR	5570756	CompoundStatement		261:39:4205:4205	5570258	1					
ANR	5570757	IfStatement	if ( size < 0 )		5570258	0					
ANR	5570758	Condition	size < 0	271:28:4506:4513	5570258	0	True				
ANR	5570759	RelationalExpression	size < 0		5570258	0		<			
ANR	5570760	Identifier	size		5570258	0					
ANR	5570761	PrimaryExpression	0		5570258	1					
ANR	5570762	ExpressionStatement	size = default_fmt_size	273:28:4545:4568	5570258	1	True				
ANR	5570763	AssignmentExpression	size = default_fmt_size		5570258	0		=			
ANR	5570764	Identifier	size		5570258	0					
ANR	5570765	Identifier	default_fmt_size		5570258	1					
ANR	5570766	ExpressionStatement	default_fmt_size = size	275:24:4595:4618	5570258	1	True				
ANR	5570767	AssignmentExpression	default_fmt_size = size		5570258	0		=			
ANR	5570768	Identifier	default_fmt_size		5570258	0					
ANR	5570769	Identifier	size		5570258	1					
ANR	5570770	ExpressionStatement	default_fmt_format = format	279:20:4664:4691	5570258	10	True				
ANR	5570771	AssignmentExpression	default_fmt_format = format		5570258	0		=			
ANR	5570772	Identifier	default_fmt_format		5570258	0					
ANR	5570773	Identifier	format		5570258	1					
ANR	5570774	ElseStatement	else		5570258	0					
ANR	5570775	CompoundStatement		275:23:4526:4526	5570258	0					
ANR	5570776	ExpressionStatement	count = 1	283:20:4740:4749	5570258	0	True				
ANR	5570777	AssignmentExpression	count = 1		5570258	0		=			
ANR	5570778	Identifier	count		5570258	0					
ANR	5570779	PrimaryExpression	1		5570258	1					
ANR	5570780	ExpressionStatement	format = default_fmt_format	285:20:4772:4799	5570258	1	True				
ANR	5570781	AssignmentExpression	format = default_fmt_format		5570258	0		=			
ANR	5570782	Identifier	format		5570258	0					
ANR	5570783	Identifier	default_fmt_format		5570258	1					
ANR	5570784	IfStatement	if ( format != 'i' )		5570258	2					
ANR	5570785	Condition	format != 'i'	287:24:4826:4838	5570258	0	True				
ANR	5570786	EqualityExpression	format != 'i'		5570258	0		!=			
ANR	5570787	Identifier	format		5570258	0					
ANR	5570788	PrimaryExpression	'i'		5570258	1					
ANR	5570789	CompoundStatement		281:39:4650:4650	5570258	1					
ANR	5570790	ExpressionStatement	size = default_fmt_size	289:24:4868:4891	5570258	0	True				
ANR	5570791	AssignmentExpression	size = default_fmt_size		5570258	0		=			
ANR	5570792	Identifier	size		5570258	0					
ANR	5570793	Identifier	default_fmt_size		5570258	1					
ANR	5570794	ElseStatement	else		5570258	0					
ANR	5570795	CompoundStatement		285:27:4730:4730	5570258	0					
ANR	5570796	ExpressionStatement	size = - 1	293:24:4948:4957	5570258	0	True				
ANR	5570797	AssignmentExpression	size = - 1		5570258	0		=			
ANR	5570798	Identifier	size		5570258	0					
ANR	5570799	UnaryOperationExpression	- 1		5570258	1					
ANR	5570800	UnaryOperator	-		5570258	0					
ANR	5570801	PrimaryExpression	1		5570258	1					
ANR	5570802	ExpressionStatement	"qdict_put ( qdict , ""count"" , qint_from_int ( count ) )"	299:16:5018:5065	5570258	3	True				
ANR	5570803	CallExpression	"qdict_put ( qdict , ""count"" , qint_from_int ( count ) )"		5570258	0					
ANR	5570804	Callee	qdict_put		5570258	0					
ANR	5570805	Identifier	qdict_put		5570258	0					
ANR	5570806	ArgumentList	qdict		5570258	1					
ANR	5570807	Argument	qdict		5570258	0					
ANR	5570808	Identifier	qdict		5570258	0					
ANR	5570809	Argument	"""count"""		5570258	1					
ANR	5570810	PrimaryExpression	"""count"""		5570258	0					
ANR	5570811	Argument	qint_from_int ( count )		5570258	2					
ANR	5570812	CallExpression	qint_from_int ( count )		5570258	0					
ANR	5570813	Callee	qint_from_int		5570258	0					
ANR	5570814	Identifier	qint_from_int		5570258	0					
ANR	5570815	ArgumentList	count		5570258	1					
ANR	5570816	Argument	count		5570258	0					
ANR	5570817	Identifier	count		5570258	0					
ANR	5570818	ExpressionStatement	"qdict_put ( qdict , ""format"" , qint_from_int ( format ) )"	301:16:5084:5133	5570258	4	True				
ANR	5570819	CallExpression	"qdict_put ( qdict , ""format"" , qint_from_int ( format ) )"		5570258	0					
ANR	5570820	Callee	qdict_put		5570258	0					
ANR	5570821	Identifier	qdict_put		5570258	0					
ANR	5570822	ArgumentList	qdict		5570258	1					
ANR	5570823	Argument	qdict		5570258	0					
ANR	5570824	Identifier	qdict		5570258	0					
ANR	5570825	Argument	"""format"""		5570258	1					
ANR	5570826	PrimaryExpression	"""format"""		5570258	0					
ANR	5570827	Argument	qint_from_int ( format )		5570258	2					
ANR	5570828	CallExpression	qint_from_int ( format )		5570258	0					
ANR	5570829	Callee	qint_from_int		5570258	0					
ANR	5570830	Identifier	qint_from_int		5570258	0					
ANR	5570831	ArgumentList	format		5570258	1					
ANR	5570832	Argument	format		5570258	0					
ANR	5570833	Identifier	format		5570258	0					
ANR	5570834	ExpressionStatement	"qdict_put ( qdict , ""size"" , qint_from_int ( size ) )"	303:16:5152:5197	5570258	5	True				
ANR	5570835	CallExpression	"qdict_put ( qdict , ""size"" , qint_from_int ( size ) )"		5570258	0					
ANR	5570836	Callee	qdict_put		5570258	0					
ANR	5570837	Identifier	qdict_put		5570258	0					
ANR	5570838	ArgumentList	qdict		5570258	1					
ANR	5570839	Argument	qdict		5570258	0					
ANR	5570840	Identifier	qdict		5570258	0					
ANR	5570841	Argument	"""size"""		5570258	1					
ANR	5570842	PrimaryExpression	"""size"""		5570258	0					
ANR	5570843	Argument	qint_from_int ( size )		5570258	2					
ANR	5570844	CallExpression	qint_from_int ( size )		5570258	0					
ANR	5570845	Callee	qint_from_int		5570258	0					
ANR	5570846	Identifier	qint_from_int		5570258	0					
ANR	5570847	ArgumentList	size		5570258	1					
ANR	5570848	Argument	size		5570258	0					
ANR	5570849	Identifier	size		5570258	0					
ANR	5570850	BreakStatement	break ;	307:12:5227:5232	5570258	7	True				
ANR	5570851	Label	case 'i' :	309:8:5243:5251	5570258	8	True				
ANR	5570852	Label	case 'l' :	311:8:5262:5270	5570258	9	True				
ANR	5570853	CompoundStatement		309:16:5113:5124	5570258	10					
ANR	5570854	IdentifierDeclStatement	int64_t val ;	315:16:5304:5315	5570258	0	True				
ANR	5570855	IdentifierDecl	val		5570258	0					
ANR	5570856	IdentifierDeclType	int64_t		5570258	0					
ANR	5570857	Identifier	val		5570258	1					
ANR	5570858	WhileStatement	while ( qemu_isspace ( * p ) )		5570258	1					
ANR	5570859	Condition	qemu_isspace ( * p )	319:23:5343:5358	5570258	0	True				
ANR	5570860	CallExpression	qemu_isspace ( * p )		5570258	0					
ANR	5570861	Callee	qemu_isspace		5570258	0					
ANR	5570862	Identifier	qemu_isspace		5570258	0					
ANR	5570863	ArgumentList	* p		5570258	1					
ANR	5570864	Argument	* p		5570258	0					
ANR	5570865	UnaryOperationExpression	* p		5570258	0					
ANR	5570866	UnaryOperator	*		5570258	0					
ANR	5570867	Identifier	p		5570258	1					
ANR	5570868	ExpressionStatement	p ++	321:20:5382:5385	5570258	1	True				
ANR	5570869	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570870	Identifier	p		5570258	0					
ANR	5570871	IncDec	++		5570258	1					
ANR	5570872	IfStatement	if ( * typestr == '?' || * typestr == '.' )		5570258	2					
ANR	5570873	Condition	* typestr == '?' || * typestr == '.'	323:20:5408:5441	5570258	0	True				
ANR	5570874	OrExpression	* typestr == '?' || * typestr == '.'		5570258	0		||			
ANR	5570875	EqualityExpression	* typestr == '?'		5570258	0		==			
ANR	5570876	UnaryOperationExpression	* typestr		5570258	0					
ANR	5570877	UnaryOperator	*		5570258	0					
ANR	5570878	Identifier	typestr		5570258	1					
ANR	5570879	PrimaryExpression	'?'		5570258	1					
ANR	5570880	EqualityExpression	* typestr == '.'		5570258	1		==			
ANR	5570881	UnaryOperationExpression	* typestr		5570258	0					
ANR	5570882	UnaryOperator	*		5570258	0					
ANR	5570883	Identifier	typestr		5570258	1					
ANR	5570884	PrimaryExpression	'.'		5570258	1					
ANR	5570885	CompoundStatement		317:56:5253:5253	5570258	1					
ANR	5570886	IfStatement	if ( * typestr == '?' )		5570258	0					
ANR	5570887	Condition	* typestr == '?'	325:24:5471:5485	5570258	0	True				
ANR	5570888	EqualityExpression	* typestr == '?'		5570258	0		==			
ANR	5570889	UnaryOperationExpression	* typestr		5570258	0					
ANR	5570890	UnaryOperator	*		5570258	0					
ANR	5570891	Identifier	typestr		5570258	1					
ANR	5570892	PrimaryExpression	'?'		5570258	1					
ANR	5570893	CompoundStatement		319:41:5297:5297	5570258	1					
ANR	5570894	IfStatement	if ( * p == '\\0' )		5570258	0					
ANR	5570895	Condition	* p == '\\0'	327:28:5519:5528	5570258	0	True				
ANR	5570896	EqualityExpression	* p == '\\0'		5570258	0		==			
ANR	5570897	UnaryOperationExpression	* p		5570258	0					
ANR	5570898	UnaryOperator	*		5570258	0					
ANR	5570899	Identifier	p		5570258	1					
ANR	5570900	PrimaryExpression	'\\0'		5570258	1					
ANR	5570901	CompoundStatement		321:40:5340:5340	5570258	1					
ANR	5570902	ExpressionStatement	typestr ++	329:28:5562:5571	5570258	0	True				
ANR	5570903	PostIncDecOperationExpression	typestr ++		5570258	0					
ANR	5570904	Identifier	typestr		5570258	0					
ANR	5570905	IncDec	++		5570258	1					
ANR	5570906	BreakStatement	break ;	331:28:5602:5607	5570258	1	True				
ANR	5570907	ElseStatement	else		5570258	0					
ANR	5570908	CompoundStatement		329:27:5473:5473	5570258	0					
ANR	5570909	IfStatement	if ( * p == '.' )		5570258	0					
ANR	5570910	Condition	* p == '.'	337:28:5695:5703	5570258	0	True				
ANR	5570911	EqualityExpression	* p == '.'		5570258	0		==			
ANR	5570912	UnaryOperationExpression	* p		5570258	0					
ANR	5570913	UnaryOperator	*		5570258	0					
ANR	5570914	Identifier	p		5570258	1					
ANR	5570915	PrimaryExpression	'.'		5570258	1					
ANR	5570916	CompoundStatement		331:39:5515:5515	5570258	1					
ANR	5570917	ExpressionStatement	p ++	339:28:5737:5740	5570258	0	True				
ANR	5570918	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570919	Identifier	p		5570258	0					
ANR	5570920	IncDec	++		5570258	1					
ANR	5570921	WhileStatement	while ( qemu_isspace ( * p ) )		5570258	1					
ANR	5570922	Condition	qemu_isspace ( * p )	341:35:5778:5793	5570258	0	True				
ANR	5570923	CallExpression	qemu_isspace ( * p )		5570258	0					
ANR	5570924	Callee	qemu_isspace		5570258	0					
ANR	5570925	Identifier	qemu_isspace		5570258	0					
ANR	5570926	ArgumentList	* p		5570258	1					
ANR	5570927	Argument	* p		5570258	0					
ANR	5570928	UnaryOperationExpression	* p		5570258	0					
ANR	5570929	UnaryOperator	*		5570258	0					
ANR	5570930	Identifier	p		5570258	1					
ANR	5570931	ExpressionStatement	p ++	343:32:5829:5832	5570258	1	True				
ANR	5570932	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5570933	Identifier	p		5570258	0					
ANR	5570934	IncDec	++		5570258	1					
ANR	5570935	ElseStatement	else		5570258	0					
ANR	5570936	CompoundStatement		339:31:5675:5675	5570258	0					
ANR	5570937	ExpressionStatement	typestr ++	347:28:5897:5906	5570258	0	True				
ANR	5570938	PostIncDecOperationExpression	typestr ++		5570258	0					
ANR	5570939	Identifier	typestr		5570258	0					
ANR	5570940	IncDec	++		5570258	1					
ANR	5570941	BreakStatement	break ;	349:28:5937:5942	5570258	1	True				
ANR	5570942	ExpressionStatement	typestr ++	355:20:6015:6024	5570258	1	True				
ANR	5570943	PostIncDecOperationExpression	typestr ++		5570258	0					
ANR	5570944	Identifier	typestr		5570258	0					
ANR	5570945	IncDec	++		5570258	1					
ANR	5570946	IfStatement	"if ( get_expr ( mon , & val , & p ) )"		5570258	3					
ANR	5570947	Condition	"get_expr ( mon , & val , & p )"	359:20:6066:6088	5570258	0	True				
ANR	5570948	CallExpression	"get_expr ( mon , & val , & p )"		5570258	0					
ANR	5570949	Callee	get_expr		5570258	0					
ANR	5570950	Identifier	get_expr		5570258	0					
ANR	5570951	ArgumentList	mon		5570258	1					
ANR	5570952	Argument	mon		5570258	0					
ANR	5570953	Identifier	mon		5570258	0					
ANR	5570954	Argument	& val		5570258	1					
ANR	5570955	UnaryOperationExpression	& val		5570258	0					
ANR	5570956	UnaryOperator	&		5570258	0					
ANR	5570957	Identifier	val		5570258	1					
ANR	5570958	Argument	& p		5570258	2					
ANR	5570959	UnaryOperationExpression	& p		5570258	0					
ANR	5570960	UnaryOperator	&		5570258	0					
ANR	5570961	Identifier	p		5570258	1					
ANR	5570962	GotoStatement	goto fail ;	361:20:6112:6121	5570258	1	True				
ANR	5570963	Identifier	fail		5570258	0					
ANR	5570964	IfStatement	if ( ( c == 'i' ) && ( ( val >> 32 ) & 0xffffffff ) )		5570258	4					
ANR	5570965	Condition	( c == 'i' ) && ( ( val >> 32 ) & 0xffffffff )	365:20:6203:6242	5570258	0	True				
ANR	5570966	AndExpression	( c == 'i' ) && ( ( val >> 32 ) & 0xffffffff )		5570258	0		&&			
ANR	5570967	EqualityExpression	c == 'i'		5570258	0		==			
ANR	5570968	Identifier	c		5570258	0					
ANR	5570969	PrimaryExpression	'i'		5570258	1					
ANR	5570970	BitAndExpression	( val >> 32 ) & 0xffffffff		5570258	1		&			
ANR	5570971	ShiftExpression	val >> 32		5570258	0		>>			
ANR	5570972	Identifier	val		5570258	0					
ANR	5570973	PrimaryExpression	32		5570258	1					
ANR	5570974	PrimaryExpression	0xffffffff		5570258	1					
ANR	5570975	CompoundStatement		359:62:6054:6054	5570258	1					
ANR	5570976	ExpressionStatement	"monitor_printf ( mon , ""\\'%s\\' has failed: "" , cmdname )"	367:20:6268:6319	5570258	0	True				
ANR	5570977	CallExpression	"monitor_printf ( mon , ""\\'%s\\' has failed: "" , cmdname )"		5570258	0					
ANR	5570978	Callee	monitor_printf		5570258	0					
ANR	5570979	Identifier	monitor_printf		5570258	0					
ANR	5570980	ArgumentList	mon		5570258	1					
ANR	5570981	Argument	mon		5570258	0					
ANR	5570982	Identifier	mon		5570258	0					
ANR	5570983	Argument	"""\\'%s\\' has failed: """		5570258	1					
ANR	5570984	PrimaryExpression	"""\\'%s\\' has failed: """		5570258	0					
ANR	5570985	Argument	cmdname		5570258	2					
ANR	5570986	Identifier	cmdname		5570258	0					
ANR	5570987	ExpressionStatement	"monitor_printf ( mon , ""integer is for 32-bit values\\n"" )"	369:20:6342:6395	5570258	1	True				
ANR	5570988	CallExpression	"monitor_printf ( mon , ""integer is for 32-bit values\\n"" )"		5570258	0					
ANR	5570989	Callee	monitor_printf		5570258	0					
ANR	5570990	Identifier	monitor_printf		5570258	0					
ANR	5570991	ArgumentList	mon		5570258	1					
ANR	5570992	Argument	mon		5570258	0					
ANR	5570993	Identifier	mon		5570258	0					
ANR	5570994	Argument	"""integer is for 32-bit values\\n"""		5570258	1					
ANR	5570995	PrimaryExpression	"""integer is for 32-bit values\\n"""		5570258	0					
ANR	5570996	GotoStatement	goto fail ;	371:20:6418:6427	5570258	2	True				
ANR	5570997	Identifier	fail		5570258	0					
ANR	5570998	ExpressionStatement	"qdict_put ( qdict , key , qint_from_int ( val ) )"	375:16:6465:6506	5570258	5	True				
ANR	5570999	CallExpression	"qdict_put ( qdict , key , qint_from_int ( val ) )"		5570258	0					
ANR	5571000	Callee	qdict_put		5570258	0					
ANR	5571001	Identifier	qdict_put		5570258	0					
ANR	5571002	ArgumentList	qdict		5570258	1					
ANR	5571003	Argument	qdict		5570258	0					
ANR	5571004	Identifier	qdict		5570258	0					
ANR	5571005	Argument	key		5570258	1					
ANR	5571006	Identifier	key		5570258	0					
ANR	5571007	Argument	qint_from_int ( val )		5570258	2					
ANR	5571008	CallExpression	qint_from_int ( val )		5570258	0					
ANR	5571009	Callee	qint_from_int		5570258	0					
ANR	5571010	Identifier	qint_from_int		5570258	0					
ANR	5571011	ArgumentList	val		5570258	1					
ANR	5571012	Argument	val		5570258	0					
ANR	5571013	Identifier	val		5570258	0					
ANR	5571014	BreakStatement	break ;	379:12:6536:6541	5570258	11	True				
ANR	5571015	Label	case '-' :	381:8:6552:6560	5570258	12	True				
ANR	5571016	CompoundStatement		381:16:6441:6469	5570258	13					
ANR	5571017	IdentifierDeclStatement	const char * tmp = p ;	385:16:6594:6613	5570258	0	True				
ANR	5571018	IdentifierDecl	* tmp = p		5570258	0					
ANR	5571019	IdentifierDeclType	const char *		5570258	0					
ANR	5571020	Identifier	tmp		5570258	1					
ANR	5571021	AssignmentExpression	* tmp = p		5570258	2		=			
ANR	5571022	Identifier	p		5570258	0					
ANR	5571023	Identifier	p		5570258	1					
ANR	5571024	IdentifierDeclStatement	"int has_option , skip_key = 0 ;"	387:16:6632:6660	5570258	1	True				
ANR	5571025	IdentifierDecl	has_option		5570258	0					
ANR	5571026	IdentifierDeclType	int		5570258	0					
ANR	5571027	Identifier	has_option		5570258	1					
ANR	5571028	IdentifierDecl	skip_key = 0		5570258	1					
ANR	5571029	IdentifierDeclType	int		5570258	0					
ANR	5571030	Identifier	skip_key		5570258	1					
ANR	5571031	AssignmentExpression	skip_key = 0		5570258	2		=			
ANR	5571032	Identifier	skip_key		5570258	0					
ANR	5571033	PrimaryExpression	0		5570258	1					
ANR	5571034	ExpressionStatement	c = * typestr ++	393:16:6711:6725	5570258	2	True				
ANR	5571035	AssignmentExpression	c = * typestr ++		5570258	0		=			
ANR	5571036	Identifier	c		5570258	0					
ANR	5571037	UnaryOperationExpression	* typestr ++		5570258	1					
ANR	5571038	UnaryOperator	*		5570258	0					
ANR	5571039	PostIncDecOperationExpression	typestr ++		5570258	1					
ANR	5571040	Identifier	typestr		5570258	0					
ANR	5571041	IncDec	++		5570258	1					
ANR	5571042	IfStatement	if ( c == '\\0' )		5570258	3					
ANR	5571043	Condition	c == '\\0'	395:20:6748:6756	5570258	0	True				
ANR	5571044	EqualityExpression	c == '\\0'		5570258	0		==			
ANR	5571045	Identifier	c		5570258	0					
ANR	5571046	PrimaryExpression	'\\0'		5570258	1					
ANR	5571047	GotoStatement	goto bad_type ;	397:20:6780:6793	5570258	1	True				
ANR	5571048	Identifier	bad_type		5570258	0					
ANR	5571049	WhileStatement	while ( qemu_isspace ( * p ) )		5570258	4					
ANR	5571050	Condition	qemu_isspace ( * p )	399:23:6819:6834	5570258	0	True				
ANR	5571051	CallExpression	qemu_isspace ( * p )		5570258	0					
ANR	5571052	Callee	qemu_isspace		5570258	0					
ANR	5571053	Identifier	qemu_isspace		5570258	0					
ANR	5571054	ArgumentList	* p		5570258	1					
ANR	5571055	Argument	* p		5570258	0					
ANR	5571056	UnaryOperationExpression	* p		5570258	0					
ANR	5571057	UnaryOperator	*		5570258	0					
ANR	5571058	Identifier	p		5570258	1					
ANR	5571059	ExpressionStatement	p ++	401:20:6858:6861	5570258	1	True				
ANR	5571060	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5571061	Identifier	p		5570258	0					
ANR	5571062	IncDec	++		5570258	1					
ANR	5571063	ExpressionStatement	has_option = 0	403:16:6880:6894	5570258	5	True				
ANR	5571064	AssignmentExpression	has_option = 0		5570258	0		=			
ANR	5571065	Identifier	has_option		5570258	0					
ANR	5571066	PrimaryExpression	0		5570258	1					
ANR	5571067	IfStatement	if ( * p == '-' )		5570258	6					
ANR	5571068	Condition	* p == '-'	405:20:6917:6925	5570258	0	True				
ANR	5571069	EqualityExpression	* p == '-'		5570258	0		==			
ANR	5571070	UnaryOperationExpression	* p		5570258	0					
ANR	5571071	UnaryOperator	*		5570258	0					
ANR	5571072	Identifier	p		5570258	1					
ANR	5571073	PrimaryExpression	'-'		5570258	1					
ANR	5571074	CompoundStatement		399:31:6737:6737	5570258	1					
ANR	5571075	ExpressionStatement	p ++	407:20:6951:6954	5570258	0	True				
ANR	5571076	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5571077	Identifier	p		5570258	0					
ANR	5571078	IncDec	++		5570258	1					
ANR	5571079	IfStatement	if ( c != * p )		5570258	1					
ANR	5571080	Condition	c != * p	409:23:6980:6986	5570258	0	True				
ANR	5571081	EqualityExpression	c != * p		5570258	0		!=			
ANR	5571082	Identifier	c		5570258	0					
ANR	5571083	UnaryOperationExpression	* p		5570258	1					
ANR	5571084	UnaryOperator	*		5570258	0					
ANR	5571085	Identifier	p		5570258	1					
ANR	5571086	CompoundStatement		403:32:6798:6798	5570258	1					
ANR	5571087	IfStatement	"if ( ! is_valid_option ( p , typestr ) )"		5570258	0					
ANR	5571088	Condition	"! is_valid_option ( p , typestr )"	411:27:7019:7046	5570258	0	True				
ANR	5571089	UnaryOperationExpression	"! is_valid_option ( p , typestr )"		5570258	0					
ANR	5571090	UnaryOperator	!		5570258	0					
ANR	5571091	CallExpression	"is_valid_option ( p , typestr )"		5570258	1					
ANR	5571092	Callee	is_valid_option		5570258	0					
ANR	5571093	Identifier	is_valid_option		5570258	0					
ANR	5571094	ArgumentList	p		5570258	1					
ANR	5571095	Argument	p		5570258	0					
ANR	5571096	Identifier	p		5570258	0					
ANR	5571097	Argument	typestr		5570258	1					
ANR	5571098	Identifier	typestr		5570258	0					
ANR	5571099	CompoundStatement		405:57:6858:6858	5570258	1					
ANR	5571100	ExpressionStatement	"monitor_printf ( mon , ""%s: unsupported option -%c\\n"" , cmdname , * p )"	415:28:7100:7208	5570258	0	True				
ANR	5571101	CallExpression	"monitor_printf ( mon , ""%s: unsupported option -%c\\n"" , cmdname , * p )"		5570258	0					
ANR	5571102	Callee	monitor_printf		5570258	0					
ANR	5571103	Identifier	monitor_printf		5570258	0					
ANR	5571104	ArgumentList	mon		5570258	1					
ANR	5571105	Argument	mon		5570258	0					
ANR	5571106	Identifier	mon		5570258	0					
ANR	5571107	Argument	"""%s: unsupported option -%c\\n"""		5570258	1					
ANR	5571108	PrimaryExpression	"""%s: unsupported option -%c\\n"""		5570258	0					
ANR	5571109	Argument	cmdname		5570258	2					
ANR	5571110	Identifier	cmdname		5570258	0					
ANR	5571111	Argument	* p		5570258	3					
ANR	5571112	UnaryOperationExpression	* p		5570258	0					
ANR	5571113	UnaryOperator	*		5570258	0					
ANR	5571114	Identifier	p		5570258	1					
ANR	5571115	GotoStatement	goto fail ;	419:28:7239:7248	5570258	1	True				
ANR	5571116	Identifier	fail		5570258	0					
ANR	5571117	ElseStatement	else		5570258	0					
ANR	5571118	CompoundStatement		415:31:7091:7091	5570258	0					
ANR	5571119	ExpressionStatement	skip_key = 1	423:28:7313:7325	5570258	0	True				
ANR	5571120	AssignmentExpression	skip_key = 1		5570258	0		=			
ANR	5571121	Identifier	skip_key		5570258	0					
ANR	5571122	PrimaryExpression	1		5570258	1					
ANR	5571123	IfStatement	if ( skip_key )		5570258	2					
ANR	5571124	Condition	skip_key	429:23:7401:7408	5570258	0	True				
ANR	5571125	Identifier	skip_key		5570258	0					
ANR	5571126	CompoundStatement		423:33:7220:7220	5570258	1					
ANR	5571127	ExpressionStatement	p = tmp	431:24:7438:7445	5570258	0	True				
ANR	5571128	AssignmentExpression	p = tmp		5570258	0		=			
ANR	5571129	Identifier	p		5570258	0					
ANR	5571130	Identifier	tmp		5570258	1					
ANR	5571131	ElseStatement	else		5570258	0					
ANR	5571132	CompoundStatement		427:27:7284:7284	5570258	0					
ANR	5571133	ExpressionStatement	p ++	435:24:7502:7505	5570258	0	True				
ANR	5571134	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5571135	Identifier	p		5570258	0					
ANR	5571136	IncDec	++		5570258	1					
ANR	5571137	ExpressionStatement	has_option = 1	437:24:7532:7546	5570258	1	True				
ANR	5571138	AssignmentExpression	has_option = 1		5570258	0		=			
ANR	5571139	Identifier	has_option		5570258	0					
ANR	5571140	PrimaryExpression	1		5570258	1					
ANR	5571141	ExpressionStatement	"qdict_put ( qdict , key , qint_from_int ( has_option ) )"	443:16:7607:7655	5570258	7	True				
ANR	5571142	CallExpression	"qdict_put ( qdict , key , qint_from_int ( has_option ) )"		5570258	0					
ANR	5571143	Callee	qdict_put		5570258	0					
ANR	5571144	Identifier	qdict_put		5570258	0					
ANR	5571145	ArgumentList	qdict		5570258	1					
ANR	5571146	Argument	qdict		5570258	0					
ANR	5571147	Identifier	qdict		5570258	0					
ANR	5571148	Argument	key		5570258	1					
ANR	5571149	Identifier	key		5570258	0					
ANR	5571150	Argument	qint_from_int ( has_option )		5570258	2					
ANR	5571151	CallExpression	qint_from_int ( has_option )		5570258	0					
ANR	5571152	Callee	qint_from_int		5570258	0					
ANR	5571153	Identifier	qint_from_int		5570258	0					
ANR	5571154	ArgumentList	has_option		5570258	1					
ANR	5571155	Argument	has_option		5570258	0					
ANR	5571156	Identifier	has_option		5570258	0					
ANR	5571157	BreakStatement	break ;	447:12:7685:7690	5570258	14	True				
ANR	5571158	Label	default :	449:8:7701:7708	5570258	15	True				
ANR	5571159	Identifier	default		5570258	0					
ANR	5571160	Label	bad_type :	451:8:7719:7727	5570258	16	True				
ANR	5571161	Identifier	bad_type		5570258	0					
ANR	5571162	ExpressionStatement	"monitor_printf ( mon , ""%s: unknown type '%c'\\n"" , cmdname , c )"	453:12:7742:7800	5570258	17	True				
ANR	5571163	CallExpression	"monitor_printf ( mon , ""%s: unknown type '%c'\\n"" , cmdname , c )"		5570258	0					
ANR	5571164	Callee	monitor_printf		5570258	0					
ANR	5571165	Identifier	monitor_printf		5570258	0					
ANR	5571166	ArgumentList	mon		5570258	1					
ANR	5571167	Argument	mon		5570258	0					
ANR	5571168	Identifier	mon		5570258	0					
ANR	5571169	Argument	"""%s: unknown type '%c'\\n"""		5570258	1					
ANR	5571170	PrimaryExpression	"""%s: unknown type '%c'\\n"""		5570258	0					
ANR	5571171	Argument	cmdname		5570258	2					
ANR	5571172	Identifier	cmdname		5570258	0					
ANR	5571173	Argument	c		5570258	3					
ANR	5571174	Identifier	c		5570258	0					
ANR	5571175	GotoStatement	goto fail ;	455:12:7815:7824	5570258	18	True				
ANR	5571176	Identifier	fail		5570258	0					
ANR	5571177	ExpressionStatement	qemu_free ( key )	459:8:7846:7860	5570258	5	True				
ANR	5571178	CallExpression	qemu_free ( key )		5570258	0					
ANR	5571179	Callee	qemu_free		5570258	0					
ANR	5571180	Identifier	qemu_free		5570258	0					
ANR	5571181	ArgumentList	key		5570258	1					
ANR	5571182	Argument	key		5570258	0					
ANR	5571183	Identifier	key		5570258	0					
ANR	5571184	ExpressionStatement	key = NULL	461:8:7871:7881	5570258	6	True				
ANR	5571185	AssignmentExpression	key = NULL		5570258	0		=			
ANR	5571186	Identifier	key		5570258	0					
ANR	5571187	Identifier	NULL		5570258	1					
ANR	5571188	WhileStatement	while ( qemu_isspace ( * p ) )		5570258	13					
ANR	5571189	Condition	qemu_isspace ( * p )	467:11:7950:7965	5570258	0	True				
ANR	5571190	CallExpression	qemu_isspace ( * p )		5570258	0					
ANR	5571191	Callee	qemu_isspace		5570258	0					
ANR	5571192	Identifier	qemu_isspace		5570258	0					
ANR	5571193	ArgumentList	* p		5570258	1					
ANR	5571194	Argument	* p		5570258	0					
ANR	5571195	UnaryOperationExpression	* p		5570258	0					
ANR	5571196	UnaryOperator	*		5570258	0					
ANR	5571197	Identifier	p		5570258	1					
ANR	5571198	ExpressionStatement	p ++	469:8:7977:7980	5570258	1	True				
ANR	5571199	PostIncDecOperationExpression	p ++		5570258	0					
ANR	5571200	Identifier	p		5570258	0					
ANR	5571201	IncDec	++		5570258	1					
ANR	5571202	IfStatement	if ( * p != '\\0' )		5570258	14					
ANR	5571203	Condition	* p != '\\0'	471:8:7991:8000	5570258	0	True				
ANR	5571204	EqualityExpression	* p != '\\0'		5570258	0		!=			
ANR	5571205	UnaryOperationExpression	* p		5570258	0					
ANR	5571206	UnaryOperator	*		5570258	0					
ANR	5571207	Identifier	p		5570258	1					
ANR	5571208	PrimaryExpression	'\\0'		5570258	1					
ANR	5571209	CompoundStatement		465:20:7812:7812	5570258	1					
ANR	5571210	ExpressionStatement	"monitor_printf ( mon , ""%s: extraneous characters at the end of line\\n"" , cmdname )"	473:8:8014:8116	5570258	0	True				
ANR	5571211	CallExpression	"monitor_printf ( mon , ""%s: extraneous characters at the end of line\\n"" , cmdname )"		5570258	0					
ANR	5571212	Callee	monitor_printf		5570258	0					
ANR	5571213	Identifier	monitor_printf		5570258	0					
ANR	5571214	ArgumentList	mon		5570258	1					
ANR	5571215	Argument	mon		5570258	0					
ANR	5571216	Identifier	mon		5570258	0					
ANR	5571217	Argument	"""%s: extraneous characters at the end of line\\n"""		5570258	1					
ANR	5571218	PrimaryExpression	"""%s: extraneous characters at the end of line\\n"""		5570258	0					
ANR	5571219	Argument	cmdname		5570258	2					
ANR	5571220	Identifier	cmdname		5570258	0					
ANR	5571221	GotoStatement	goto fail ;	477:8:8127:8136	5570258	1	True				
ANR	5571222	Identifier	fail		5570258	0					
ANR	5571223	ReturnStatement	return cmd ;	483:4:8152:8162	5570258	15	True				
ANR	5571224	Identifier	cmd		5570258	0					
ANR	5571225	Label	fail :	487:0:8167:8171	5570258	16	True				
ANR	5571226	Identifier	fail		5570258	0					
ANR	5571227	ExpressionStatement	qemu_free ( key )	489:4:8178:8192	5570258	17	True				
ANR	5571228	CallExpression	qemu_free ( key )		5570258	0					
ANR	5571229	Callee	qemu_free		5570258	0					
ANR	5571230	Identifier	qemu_free		5570258	0					
ANR	5571231	ArgumentList	key		5570258	1					
ANR	5571232	Argument	key		5570258	0					
ANR	5571233	Identifier	key		5570258	0					
ANR	5571234	ReturnStatement	return NULL ;	491:4:8199:8210	5570258	18	True				
ANR	5571235	Identifier	NULL		5570258	0					
ANR	5571236	ReturnType	static const mon_cmd_t *		5570258	1					
ANR	5571237	Identifier	monitor_parse_command		5570258	2					
ANR	5571238	ParameterList	"Monitor * mon , const char * cmdline , QDict * qdict"		5570258	3					
ANR	5571239	Parameter	Monitor * mon	1:46:46:57	5570258	0	True				
ANR	5571240	ParameterType	Monitor *		5570258	0					
ANR	5571241	Identifier	mon		5570258	1					
ANR	5571242	Parameter	const char * cmdline	3:46:107:125	5570258	1	True				
ANR	5571243	ParameterType	const char *		5570258	0					
ANR	5571244	Identifier	cmdline		5570258	1					
ANR	5571245	Parameter	QDict * qdict	5:46:175:186	5570258	2	True				
ANR	5571246	ParameterType	QDict *		5570258	0					
ANR	5571247	Identifier	qdict		5570258	1					
ANR	5571248	CFGEntryNode	ENTRY		5570258		True				
ANR	5571249	CFGExitNode	EXIT		5570258		True				
ANR	5571250	InfiniteForNode	true		5570258		True				
ANR	5571251	InfiniteForNode	true		5570258		True				
ANR	5571252	Symbol	qdict		5570258						
ANR	5571253	Symbol	& val		5570258						
ANR	5571254	Symbol	& key		5570258						
ANR	5571255	Symbol	get_str		5570258						
ANR	5571256	Symbol	* typestr		5570258						
ANR	5571257	Symbol	is_valid_option		5570258						
ANR	5571258	Symbol	mon		5570258						
ANR	5571259	Symbol	qstring_from_str		5570258						
ANR	5571260	Symbol	typestr		5570258						
ANR	5571261	Symbol	compare_cmd		5570258						
ANR	5571262	Symbol	cmdline		5570258						
ANR	5571263	Symbol	tmp		5570258						
ANR	5571264	Symbol	* typestr ++		5570258						
ANR	5571265	Symbol	* cmd		5570258						
ANR	5571266	Symbol	key		5570258						
ANR	5571267	Symbol	mon_cmds		5570258						
ANR	5571268	Symbol	qemu_isdigit		5570258						
ANR	5571269	Symbol	has_option		5570258						
ANR	5571270	Symbol	ret		5570258						
ANR	5571271	Symbol	val		5570258						
ANR	5571272	Symbol	c		5570258						
ANR	5571273	Symbol	NULL		5570258						
ANR	5571274	Symbol	qint_from_int		5570258						
ANR	5571275	Symbol	default_fmt_format		5570258						
ANR	5571276	Symbol	cmd -> name		5570258						
ANR	5571277	Symbol	* p ++		5570258						
ANR	5571278	Symbol	format		5570258						
ANR	5571279	Symbol	count		5570258						
ANR	5571280	Symbol	qemu_isspace		5570258						
ANR	5571281	Symbol	p		5570258						
ANR	5571282	Symbol	buf		5570258						
ANR	5571283	Symbol	key_get_info		5570258						
ANR	5571284	Symbol	size		5570258						
ANR	5571285	Symbol	get_expr		5570258						
ANR	5571286	Symbol	& p		5570258						
ANR	5571287	Symbol	cmdname		5570258						
ANR	5571288	Symbol	default_fmt_size		5570258						
ANR	5571289	Symbol	* p		5570258						
ANR	5571290	Symbol	skip_key		5570258						
ANR	5571291	Symbol	cmd		5570258						
ANR	5571292	Symbol	cmd -> args_type		5570258						
ANR	5571293	Symbol	get_command_name		5570258						
