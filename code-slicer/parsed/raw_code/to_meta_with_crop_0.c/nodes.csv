command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8468725	File	/home/p4ultr4n/workplace/ReVeal/raw_code/to_meta_with_crop_0.c								
ANR	8468726	Function	to_meta_with_crop	1:0:0:1009							
ANR	8468727	FunctionDef	"to_meta_with_crop (AVCodecContext * avctx , AVFrame * p , int * dest)"		8468726	0					
ANR	8468728	CompoundStatement		3:0:77:1009	8468726	0					
ANR	8468729	IdentifierDeclStatement	"int blockx , blocky , x , y ;"	5:4:84:108	8468726	0	True				
ANR	8468730	IdentifierDecl	blockx		8468726	0					
ANR	8468731	IdentifierDeclType	int		8468726	0					
ANR	8468732	Identifier	blockx		8468726	1					
ANR	8468733	IdentifierDecl	blocky		8468726	1					
ANR	8468734	IdentifierDeclType	int		8468726	0					
ANR	8468735	Identifier	blocky		8468726	1					
ANR	8468736	IdentifierDecl	x		8468726	2					
ANR	8468737	IdentifierDeclType	int		8468726	0					
ANR	8468738	Identifier	x		8468726	1					
ANR	8468739	IdentifierDecl	y		8468726	3					
ANR	8468740	IdentifierDeclType	int		8468726	0					
ANR	8468741	Identifier	y		8468726	1					
ANR	8468742	IdentifierDeclStatement	int luma = 0 ;	7:4:115:127	8468726	1	True				
ANR	8468743	IdentifierDecl	luma = 0		8468726	0					
ANR	8468744	IdentifierDeclType	int		8468726	0					
ANR	8468745	Identifier	luma		8468726	1					
ANR	8468746	AssignmentExpression	luma = 0		8468726	2		=			
ANR	8468747	Identifier	luma		8468726	0					
ANR	8468748	PrimaryExpression	0		8468726	1					
ANR	8468749	IdentifierDeclStatement	"int height = FFMIN ( avctx -> height , C64YRES ) ;"	9:4:134:176	8468726	2	True				
ANR	8468750	IdentifierDecl	"height = FFMIN ( avctx -> height , C64YRES )"		8468726	0					
ANR	8468751	IdentifierDeclType	int		8468726	0					
ANR	8468752	Identifier	height		8468726	1					
ANR	8468753	AssignmentExpression	"height = FFMIN ( avctx -> height , C64YRES )"		8468726	2		=			
ANR	8468754	Identifier	height		8468726	0					
ANR	8468755	CallExpression	"FFMIN ( avctx -> height , C64YRES )"		8468726	1					
ANR	8468756	Callee	FFMIN		8468726	0					
ANR	8468757	Identifier	FFMIN		8468726	0					
ANR	8468758	ArgumentList	avctx -> height		8468726	1					
ANR	8468759	Argument	avctx -> height		8468726	0					
ANR	8468760	PtrMemberAccess	avctx -> height		8468726	0					
ANR	8468761	Identifier	avctx		8468726	0					
ANR	8468762	Identifier	height		8468726	1					
ANR	8468763	Argument	C64YRES		8468726	1					
ANR	8468764	Identifier	C64YRES		8468726	0					
ANR	8468765	IdentifierDeclStatement	"int width = FFMIN ( avctx -> width , C64XRES ) ;"	11:4:183:225	8468726	3	True				
ANR	8468766	IdentifierDecl	"width = FFMIN ( avctx -> width , C64XRES )"		8468726	0					
ANR	8468767	IdentifierDeclType	int		8468726	0					
ANR	8468768	Identifier	width		8468726	1					
ANR	8468769	AssignmentExpression	"width = FFMIN ( avctx -> width , C64XRES )"		8468726	2		=			
ANR	8468770	Identifier	width		8468726	0					
ANR	8468771	CallExpression	"FFMIN ( avctx -> width , C64XRES )"		8468726	1					
ANR	8468772	Callee	FFMIN		8468726	0					
ANR	8468773	Identifier	FFMIN		8468726	0					
ANR	8468774	ArgumentList	avctx -> width		8468726	1					
ANR	8468775	Argument	avctx -> width		8468726	0					
ANR	8468776	PtrMemberAccess	avctx -> width		8468726	0					
ANR	8468777	Identifier	avctx		8468726	0					
ANR	8468778	Identifier	width		8468726	1					
ANR	8468779	Argument	C64XRES		8468726	1					
ANR	8468780	Identifier	C64XRES		8468726	0					
ANR	8468781	IdentifierDeclStatement	uint8_t * src = p -> data [ 0 ] ;	13:4:232:257	8468726	4	True				
ANR	8468782	IdentifierDecl	* src = p -> data [ 0 ]		8468726	0					
ANR	8468783	IdentifierDeclType	uint8_t *		8468726	0					
ANR	8468784	Identifier	src		8468726	1					
ANR	8468785	AssignmentExpression	* src = p -> data [ 0 ]		8468726	2		=			
ANR	8468786	Identifier	src		8468726	0					
ANR	8468787	ArrayIndexing	p -> data [ 0 ]		8468726	1					
ANR	8468788	PtrMemberAccess	p -> data		8468726	0					
ANR	8468789	Identifier	p		8468726	0					
ANR	8468790	Identifier	data		8468726	1					
ANR	8468791	PrimaryExpression	0		8468726	1					
ANR	8468792	ForStatement	for ( blocky = 0 ; blocky < C64YRES ; blocky += 8 )		8468726	5					
ANR	8468793	ForInit	blocky = 0 ;	17:9:271:281	8468726	0	True				
ANR	8468794	AssignmentExpression	blocky = 0		8468726	0		=			
ANR	8468795	Identifier	blocky		8468726	0					
ANR	8468796	PrimaryExpression	0		8468726	1					
ANR	8468797	Condition	blocky < C64YRES	17:21:283:298	8468726	1	True				
ANR	8468798	RelationalExpression	blocky < C64YRES		8468726	0		<			
ANR	8468799	Identifier	blocky		8468726	0					
ANR	8468800	Identifier	C64YRES		8468726	1					
ANR	8468801	AssignmentExpression	blocky += 8	17:39:301:311	8468726	2	True	+=			
ANR	8468802	Identifier	blocky		8468726	0					
ANR	8468803	PrimaryExpression	8		8468726	1					
ANR	8468804	CompoundStatement		15:52:236:236	8468726	3					
ANR	8468805	ForStatement	for ( blockx = 0 ; blockx < C64XRES ; blockx += 8 )		8468726	0					
ANR	8468806	ForInit	blockx = 0 ;	19:13:330:340	8468726	0	True				
ANR	8468807	AssignmentExpression	blockx = 0		8468726	0		=			
ANR	8468808	Identifier	blockx		8468726	0					
ANR	8468809	PrimaryExpression	0		8468726	1					
ANR	8468810	Condition	blockx < C64XRES	19:25:342:357	8468726	1	True				
ANR	8468811	RelationalExpression	blockx < C64XRES		8468726	0		<			
ANR	8468812	Identifier	blockx		8468726	0					
ANR	8468813	Identifier	C64XRES		8468726	1					
ANR	8468814	AssignmentExpression	blockx += 8	19:43:360:370	8468726	2	True	+=			
ANR	8468815	Identifier	blockx		8468726	0					
ANR	8468816	PrimaryExpression	8		8468726	1					
ANR	8468817	CompoundStatement		17:56:295:295	8468726	3					
ANR	8468818	ForStatement	for ( y = blocky ; y < blocky + 8 && y < C64YRES ; y ++ )		8468726	0					
ANR	8468819	ForInit	y = blocky ;	21:17:393:403	8468726	0	True				
ANR	8468820	AssignmentExpression	y = blocky		8468726	0		=			
ANR	8468821	Identifier	y		8468726	0					
ANR	8468822	Identifier	blocky		8468726	1					
ANR	8468823	Condition	y < blocky + 8 && y < C64YRES	21:29:405:433	8468726	1	True				
ANR	8468824	AndExpression	y < blocky + 8 && y < C64YRES		8468726	0		&&			
ANR	8468825	RelationalExpression	y < blocky + 8		8468726	0		<			
ANR	8468826	Identifier	y		8468726	0					
ANR	8468827	AdditiveExpression	blocky + 8		8468726	1		+			
ANR	8468828	Identifier	blocky		8468726	0					
ANR	8468829	PrimaryExpression	8		8468726	1					
ANR	8468830	RelationalExpression	y < C64YRES		8468726	1		<			
ANR	8468831	Identifier	y		8468726	0					
ANR	8468832	Identifier	C64YRES		8468726	1					
ANR	8468833	PostIncDecOperationExpression	y ++	21:60:436:438	8468726	2	True				
ANR	8468834	Identifier	y		8468726	0					
ANR	8468835	IncDec	++		8468726	1					
ANR	8468836	CompoundStatement		19:65:363:363	8468726	3					
ANR	8468837	ForStatement	for ( x = blockx ; x < blockx + 8 && x < C64XRES ; x += 2 )		8468726	0					
ANR	8468838	ForInit	x = blockx ;	23:21:465:475	8468726	0	True				
ANR	8468839	AssignmentExpression	x = blockx		8468726	0		=			
ANR	8468840	Identifier	x		8468726	0					
ANR	8468841	Identifier	blockx		8468726	1					
ANR	8468842	Condition	x < blockx + 8 && x < C64XRES	23:33:477:505	8468726	1	True				
ANR	8468843	AndExpression	x < blockx + 8 && x < C64XRES		8468726	0		&&			
ANR	8468844	RelationalExpression	x < blockx + 8		8468726	0		<			
ANR	8468845	Identifier	x		8468726	0					
ANR	8468846	AdditiveExpression	blockx + 8		8468726	1		+			
ANR	8468847	Identifier	blockx		8468726	0					
ANR	8468848	PrimaryExpression	8		8468726	1					
ANR	8468849	RelationalExpression	x < C64XRES		8468726	1		<			
ANR	8468850	Identifier	x		8468726	0					
ANR	8468851	Identifier	C64XRES		8468726	1					
ANR	8468852	AssignmentExpression	x += 2	23:64:508:513	8468726	2	True	+=			
ANR	8468853	Identifier	x		8468726	0					
ANR	8468854	PrimaryExpression	2		8468726	1					
ANR	8468855	CompoundStatement		21:72:438:438	8468726	3					
ANR	8468856	IfStatement	if ( x < width && y < height )		8468726	0					
ANR	8468857	Condition	x < width && y < height	25:23:542:564	8468726	0	True				
ANR	8468858	AndExpression	x < width && y < height		8468726	0		&&			
ANR	8468859	RelationalExpression	x < width		8468726	0		<			
ANR	8468860	Identifier	x		8468726	0					
ANR	8468861	Identifier	width		8468726	1					
ANR	8468862	RelationalExpression	y < height		8468726	1		<			
ANR	8468863	Identifier	y		8468726	0					
ANR	8468864	Identifier	height		8468726	1					
ANR	8468865	CompoundStatement		23:48:489:489	8468726	1					
ANR	8468866	ExpressionStatement	luma = ( src [ ( x + 0 + y * p -> linesize [ 0 ] ) ] + src [ ( x + 1 + y * p -> linesize [ 0 ] ) ] ) / 2	29:24:653:768	8468726	0	True				
ANR	8468867	AssignmentExpression	luma = ( src [ ( x + 0 + y * p -> linesize [ 0 ] ) ] + src [ ( x + 1 + y * p -> linesize [ 0 ] ) ] ) / 2		8468726	0		=			
ANR	8468868	Identifier	luma		8468726	0					
ANR	8468869	MultiplicativeExpression	( src [ ( x + 0 + y * p -> linesize [ 0 ] ) ] + src [ ( x + 1 + y * p -> linesize [ 0 ] ) ] ) / 2		8468726	1		/			
ANR	8468870	AdditiveExpression	src [ ( x + 0 + y * p -> linesize [ 0 ] ) ] + src [ ( x + 1 + y * p -> linesize [ 0 ] ) ]		8468726	0		+			
ANR	8468871	ArrayIndexing	src [ ( x + 0 + y * p -> linesize [ 0 ] ) ]		8468726	0					
ANR	8468872	Identifier	src		8468726	0					
ANR	8468873	AdditiveExpression	x + 0 + y * p -> linesize [ 0 ]		8468726	1		+			
ANR	8468874	Identifier	x		8468726	0					
ANR	8468875	AdditiveExpression	0 + y * p -> linesize [ 0 ]		8468726	1		+			
ANR	8468876	PrimaryExpression	0		8468726	0					
ANR	8468877	MultiplicativeExpression	y * p -> linesize [ 0 ]		8468726	1		*			
ANR	8468878	Identifier	y		8468726	0					
ANR	8468879	ArrayIndexing	p -> linesize [ 0 ]		8468726	1					
ANR	8468880	PtrMemberAccess	p -> linesize		8468726	0					
ANR	8468881	Identifier	p		8468726	0					
ANR	8468882	Identifier	linesize		8468726	1					
ANR	8468883	PrimaryExpression	0		8468726	1					
ANR	8468884	ArrayIndexing	src [ ( x + 1 + y * p -> linesize [ 0 ] ) ]		8468726	1					
ANR	8468885	Identifier	src		8468726	0					
ANR	8468886	AdditiveExpression	x + 1 + y * p -> linesize [ 0 ]		8468726	1		+			
ANR	8468887	Identifier	x		8468726	0					
ANR	8468888	AdditiveExpression	1 + y * p -> linesize [ 0 ]		8468726	1		+			
ANR	8468889	PrimaryExpression	1		8468726	0					
ANR	8468890	MultiplicativeExpression	y * p -> linesize [ 0 ]		8468726	1		*			
ANR	8468891	Identifier	y		8468726	0					
ANR	8468892	ArrayIndexing	p -> linesize [ 0 ]		8468726	1					
ANR	8468893	PtrMemberAccess	p -> linesize		8468726	0					
ANR	8468894	Identifier	p		8468726	0					
ANR	8468895	Identifier	linesize		8468726	1					
ANR	8468896	PrimaryExpression	0		8468726	1					
ANR	8468897	PrimaryExpression	2		8468726	1					
ANR	8468898	ExpressionStatement	dest [ 0 ] = luma	35:24:888:902	8468726	1	True				
ANR	8468899	AssignmentExpression	dest [ 0 ] = luma		8468726	0		=			
ANR	8468900	ArrayIndexing	dest [ 0 ]		8468726	0					
ANR	8468901	Identifier	dest		8468726	0					
ANR	8468902	PrimaryExpression	0		8468726	1					
ANR	8468903	Identifier	luma		8468726	1					
ANR	8468904	ExpressionStatement	dest ++	39:20:948:954	8468726	1	True				
ANR	8468905	PostIncDecOperationExpression	dest ++		8468726	0					
ANR	8468906	Identifier	dest		8468726	0					
ANR	8468907	IncDec	++		8468726	1					
ANR	8468908	ReturnType	static void		8468726	1					
ANR	8468909	Identifier	to_meta_with_crop		8468726	2					
ANR	8468910	ParameterList	"AVCodecContext * avctx , AVFrame * p , int * dest"		8468726	3					
ANR	8468911	Parameter	AVCodecContext * avctx	1:30:30:50	8468726	0	True				
ANR	8468912	ParameterType	AVCodecContext *		8468726	0					
ANR	8468913	Identifier	avctx		8468726	1					
ANR	8468914	Parameter	AVFrame * p	1:53:53:62	8468726	1	True				
ANR	8468915	ParameterType	AVFrame *		8468726	0					
ANR	8468916	Identifier	p		8468726	1					
ANR	8468917	Parameter	int * dest	1:65:65:73	8468726	2	True				
ANR	8468918	ParameterType	int *		8468726	0					
ANR	8468919	Identifier	dest		8468726	1					
ANR	8468920	CFGEntryNode	ENTRY		8468726		True				
ANR	8468921	CFGExitNode	EXIT		8468726		True				
ANR	8468922	Symbol	* x		8468726						
ANR	8468923	Symbol	* y		8468726						
ANR	8468924	Symbol	C64XRES		8468726						
ANR	8468925	Symbol	p -> data		8468726						
ANR	8468926	Symbol	* dest		8468726						
ANR	8468927	Symbol	avctx -> width		8468726						
ANR	8468928	Symbol	FFMIN		8468726						
ANR	8468929	Symbol	dest		8468726						
ANR	8468930	Symbol	* src		8468726						
ANR	8468931	Symbol	avctx -> height		8468726						
ANR	8468932	Symbol	* p -> data		8468726						
ANR	8468933	Symbol	* * p		8468726						
ANR	8468934	Symbol	avctx		8468726						
ANR	8468935	Symbol	height		8468726						
ANR	8468936	Symbol	* * p -> linesize		8468726						
ANR	8468937	Symbol	C64YRES		8468726						
ANR	8468938	Symbol	src		8468726						
ANR	8468939	Symbol	blockx		8468726						
ANR	8468940	Symbol	blocky		8468726						
ANR	8468941	Symbol	* p -> linesize		8468726						
ANR	8468942	Symbol	p -> linesize		8468726						
ANR	8468943	Symbol	luma		8468726						
ANR	8468944	Symbol	p		8468726						
ANR	8468945	Symbol	* * * p		8468726						
ANR	8468946	Symbol	* avctx		8468726						
ANR	8468947	Symbol	x		8468726						
ANR	8468948	Symbol	width		8468726						
ANR	8468949	Symbol	y		8468726						
ANR	8468950	Symbol	* p		8468726						
