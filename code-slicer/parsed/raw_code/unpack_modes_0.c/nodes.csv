command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8630986	File	/home/p4ultr4n/workplace/ReVeal/raw_code/unpack_modes_0.c								
ANR	8630987	Function	unpack_modes	1:0:0:2313							
ANR	8630988	FunctionDef	"unpack_modes (Vp3DecodeContext * s , GetBitContext * gb)"		8630987	0					
ANR	8630989	CompoundStatement		3:0:66:2313	8630987	0					
ANR	8630990	IdentifierDeclStatement	"int i , j , k ;"	5:4:73:84	8630987	0	True				
ANR	8630991	IdentifierDecl	i		8630987	0					
ANR	8630992	IdentifierDeclType	int		8630987	0					
ANR	8630993	Identifier	i		8630987	1					
ANR	8630994	IdentifierDecl	j		8630987	1					
ANR	8630995	IdentifierDeclType	int		8630987	0					
ANR	8630996	Identifier	j		8630987	1					
ANR	8630997	IdentifierDecl	k		8630987	2					
ANR	8630998	IdentifierDeclType	int		8630987	0					
ANR	8630999	Identifier	k		8630987	1					
ANR	8631000	IdentifierDeclStatement	int scheme ;	7:4:91:101	8630987	1	True				
ANR	8631001	IdentifierDecl	scheme		8630987	0					
ANR	8631002	IdentifierDeclType	int		8630987	0					
ANR	8631003	Identifier	scheme		8630987	1					
ANR	8631004	IdentifierDeclStatement	int current_macroblock ;	9:4:108:130	8630987	2	True				
ANR	8631005	IdentifierDecl	current_macroblock		8630987	0					
ANR	8631006	IdentifierDeclType	int		8630987	0					
ANR	8631007	Identifier	current_macroblock		8630987	1					
ANR	8631008	IdentifierDeclStatement	int current_fragment ;	11:4:137:157	8630987	3	True				
ANR	8631009	IdentifierDecl	current_fragment		8630987	0					
ANR	8631010	IdentifierDeclType	int		8630987	0					
ANR	8631011	Identifier	current_fragment		8630987	1					
ANR	8631012	IdentifierDeclStatement	int coding_mode ;	13:4:164:179	8630987	4	True				
ANR	8631013	IdentifierDecl	coding_mode		8630987	0					
ANR	8631014	IdentifierDeclType	int		8630987	0					
ANR	8631015	Identifier	coding_mode		8630987	1					
ANR	8631016	ExpressionStatement	"debug_vp3 ( ""  vp3: unpacking encoding modes\\n"" )"	17:4:188:234	8630987	5	True				
ANR	8631017	CallExpression	"debug_vp3 ( ""  vp3: unpacking encoding modes\\n"" )"		8630987	0					
ANR	8631018	Callee	debug_vp3		8630987	0					
ANR	8631019	Identifier	debug_vp3		8630987	0					
ANR	8631020	ArgumentList	"""  vp3: unpacking encoding modes\\n"""		8630987	1					
ANR	8631021	Argument	"""  vp3: unpacking encoding modes\\n"""		8630987	0					
ANR	8631022	PrimaryExpression	"""  vp3: unpacking encoding modes\\n"""		8630987	0					
ANR	8631023	IfStatement	if ( s -> keyframe )		8630987	6					
ANR	8631024	Condition	s -> keyframe	21:8:247:257	8630987	0	True				
ANR	8631025	PtrMemberAccess	s -> keyframe		8630987	0					
ANR	8631026	Identifier	s		8630987	0					
ANR	8631027	Identifier	keyframe		8630987	1					
ANR	8631028	CompoundStatement		19:21:193:193	8630987	1					
ANR	8631029	ExpressionStatement	"debug_vp3 ( ""    keyframe-- all blocks are coded as INTRA\\n"" )"	23:8:271:330	8630987	0	True				
ANR	8631030	CallExpression	"debug_vp3 ( ""    keyframe-- all blocks are coded as INTRA\\n"" )"		8630987	0					
ANR	8631031	Callee	debug_vp3		8630987	0					
ANR	8631032	Identifier	debug_vp3		8630987	0					
ANR	8631033	ArgumentList	"""    keyframe-- all blocks are coded as INTRA\\n"""		8630987	1					
ANR	8631034	Argument	"""    keyframe-- all blocks are coded as INTRA\\n"""		8630987	0					
ANR	8631035	PrimaryExpression	"""    keyframe-- all blocks are coded as INTRA\\n"""		8630987	0					
ANR	8631036	ForStatement	for ( i = 0 ; i < s -> fragment_count ; i ++ )		8630987	1					
ANR	8631037	ForInit	i = 0 ;	27:13:348:353	8630987	0	True				
ANR	8631038	AssignmentExpression	i = 0		8630987	0		=			
ANR	8631039	Identifier	i		8630987	0					
ANR	8631040	PrimaryExpression	0		8630987	1					
ANR	8631041	Condition	i < s -> fragment_count	27:20:355:375	8630987	1	True				
ANR	8631042	RelationalExpression	i < s -> fragment_count		8630987	0		<			
ANR	8631043	Identifier	i		8630987	0					
ANR	8631044	PtrMemberAccess	s -> fragment_count		8630987	1					
ANR	8631045	Identifier	s		8630987	0					
ANR	8631046	Identifier	fragment_count		8630987	1					
ANR	8631047	PostIncDecOperationExpression	i ++	27:43:378:380	8630987	2	True				
ANR	8631048	Identifier	i		8630987	0					
ANR	8631049	IncDec	++		8630987	1					
ANR	8631050	ExpressionStatement	s -> all_fragments [ i ] . coding_method = MODE_INTRA	29:12:396:442	8630987	3	True				
ANR	8631051	AssignmentExpression	s -> all_fragments [ i ] . coding_method = MODE_INTRA		8630987	0		=			
ANR	8631052	MemberAccess	s -> all_fragments [ i ] . coding_method		8630987	0					
ANR	8631053	ArrayIndexing	s -> all_fragments [ i ]		8630987	0					
ANR	8631054	PtrMemberAccess	s -> all_fragments		8630987	0					
ANR	8631055	Identifier	s		8630987	0					
ANR	8631056	Identifier	all_fragments		8630987	1					
ANR	8631057	Identifier	i		8630987	1					
ANR	8631058	Identifier	coding_method		8630987	1					
ANR	8631059	Identifier	MODE_INTRA		8630987	1					
ANR	8631060	ElseStatement	else		8630987	0					
ANR	8631061	CompoundStatement		31:11:391:391	8630987	0					
ANR	8631062	ExpressionStatement	"scheme = get_bits ( gb , 3 )"	39:8:530:554	8630987	0	True				
ANR	8631063	AssignmentExpression	"scheme = get_bits ( gb , 3 )"		8630987	0		=			
ANR	8631064	Identifier	scheme		8630987	0					
ANR	8631065	CallExpression	"get_bits ( gb , 3 )"		8630987	1					
ANR	8631066	Callee	get_bits		8630987	0					
ANR	8631067	Identifier	get_bits		8630987	0					
ANR	8631068	ArgumentList	gb		8630987	1					
ANR	8631069	Argument	gb		8630987	0					
ANR	8631070	Identifier	gb		8630987	0					
ANR	8631071	Argument	3		8630987	1					
ANR	8631072	PrimaryExpression	3		8630987	0					
ANR	8631073	ExpressionStatement	"debug_modes ( ""    using mode alphabet %d\\n"" , scheme )"	41:8:565:616	8630987	1	True				
ANR	8631074	CallExpression	"debug_modes ( ""    using mode alphabet %d\\n"" , scheme )"		8630987	0					
ANR	8631075	Callee	debug_modes		8630987	0					
ANR	8631076	Identifier	debug_modes		8630987	0					
ANR	8631077	ArgumentList	"""    using mode alphabet %d\\n"""		8630987	1					
ANR	8631078	Argument	"""    using mode alphabet %d\\n"""		8630987	0					
ANR	8631079	PrimaryExpression	"""    using mode alphabet %d\\n"""		8630987	0					
ANR	8631080	Argument	scheme		8630987	1					
ANR	8631081	Identifier	scheme		8630987	0					
ANR	8631082	IfStatement	if ( scheme == 0 )		8630987	2					
ANR	8631083	Condition	scheme == 0	47:12:678:688	8630987	0	True				
ANR	8631084	EqualityExpression	scheme == 0		8630987	0		==			
ANR	8631085	Identifier	scheme		8630987	0					
ANR	8631086	PrimaryExpression	0		8630987	1					
ANR	8631087	CompoundStatement		45:25:624:624	8630987	1					
ANR	8631088	ExpressionStatement	"debug_modes ( ""    custom mode alphabet ahead:\\n"" )"	49:12:706:754	8630987	0	True				
ANR	8631089	CallExpression	"debug_modes ( ""    custom mode alphabet ahead:\\n"" )"		8630987	0					
ANR	8631090	Callee	debug_modes		8630987	0					
ANR	8631091	Identifier	debug_modes		8630987	0					
ANR	8631092	ArgumentList	"""    custom mode alphabet ahead:\\n"""		8630987	1					
ANR	8631093	Argument	"""    custom mode alphabet ahead:\\n"""		8630987	0					
ANR	8631094	PrimaryExpression	"""    custom mode alphabet ahead:\\n"""		8630987	0					
ANR	8631095	ForStatement	for ( i = 0 ; i < 8 ; i ++ )		8630987	1					
ANR	8631096	ForInit	i = 0 ;	51:17:774:779	8630987	0	True				
ANR	8631097	AssignmentExpression	i = 0		8630987	0		=			
ANR	8631098	Identifier	i		8630987	0					
ANR	8631099	PrimaryExpression	0		8630987	1					
ANR	8631100	Condition	i < 8	51:24:781:785	8630987	1	True				
ANR	8631101	RelationalExpression	i < 8		8630987	0		<			
ANR	8631102	Identifier	i		8630987	0					
ANR	8631103	PrimaryExpression	8		8630987	1					
ANR	8631104	PostIncDecOperationExpression	i ++	51:31:788:790	8630987	2	True				
ANR	8631105	Identifier	i		8630987	0					
ANR	8631106	IncDec	++		8630987	1					
ANR	8631107	ExpressionStatement	"ModeAlphabet [ 0 ] [ i ] = get_bits ( gb , 3 )"	53:16:810:846	8630987	3	True				
ANR	8631108	AssignmentExpression	"ModeAlphabet [ 0 ] [ i ] = get_bits ( gb , 3 )"		8630987	0		=			
ANR	8631109	ArrayIndexing	ModeAlphabet [ 0 ] [ i ]		8630987	0					
ANR	8631110	ArrayIndexing	ModeAlphabet [ 0 ]		8630987	0					
ANR	8631111	Identifier	ModeAlphabet		8630987	0					
ANR	8631112	PrimaryExpression	0		8630987	1					
ANR	8631113	Identifier	i		8630987	1					
ANR	8631114	CallExpression	"get_bits ( gb , 3 )"		8630987	1					
ANR	8631115	Callee	get_bits		8630987	0					
ANR	8631116	Identifier	get_bits		8630987	0					
ANR	8631117	ArgumentList	gb		8630987	1					
ANR	8631118	Argument	gb		8630987	0					
ANR	8631119	Identifier	gb		8630987	0					
ANR	8631120	Argument	3		8630987	1					
ANR	8631121	PrimaryExpression	3		8630987	0					
ANR	8631122	ForStatement	for ( i = 0 ; i < 8 ; i ++ )		8630987	3					
ANR	8631123	ForInit	i = 0 ;	59:13:875:880	8630987	0	True				
ANR	8631124	AssignmentExpression	i = 0		8630987	0		=			
ANR	8631125	Identifier	i		8630987	0					
ANR	8631126	PrimaryExpression	0		8630987	1					
ANR	8631127	Condition	i < 8	59:20:882:886	8630987	1	True				
ANR	8631128	RelationalExpression	i < 8		8630987	0		<			
ANR	8631129	Identifier	i		8630987	0					
ANR	8631130	PrimaryExpression	8		8630987	1					
ANR	8631131	PostIncDecOperationExpression	i ++	59:27:889:891	8630987	2	True				
ANR	8631132	Identifier	i		8630987	0					
ANR	8631133	IncDec	++		8630987	1					
ANR	8631134	ExpressionStatement	"debug_modes ( ""      mode[%d][%d] = %d\\n"" , scheme , i , ModeAlphabet [ scheme ] [ i ] )"	61:12:907:1001	8630987	3	True				
ANR	8631135	CallExpression	"debug_modes ( ""      mode[%d][%d] = %d\\n"" , scheme , i , ModeAlphabet [ scheme ] [ i ] )"		8630987	0					
ANR	8631136	Callee	debug_modes		8630987	0					
ANR	8631137	Identifier	debug_modes		8630987	0					
ANR	8631138	ArgumentList	"""      mode[%d][%d] = %d\\n"""		8630987	1					
ANR	8631139	Argument	"""      mode[%d][%d] = %d\\n"""		8630987	0					
ANR	8631140	PrimaryExpression	"""      mode[%d][%d] = %d\\n"""		8630987	0					
ANR	8631141	Argument	scheme		8630987	1					
ANR	8631142	Identifier	scheme		8630987	0					
ANR	8631143	Argument	i		8630987	2					
ANR	8631144	Identifier	i		8630987	0					
ANR	8631145	Argument	ModeAlphabet [ scheme ] [ i ]		8630987	3					
ANR	8631146	ArrayIndexing	ModeAlphabet [ scheme ] [ i ]		8630987	0					
ANR	8631147	ArrayIndexing	ModeAlphabet [ scheme ]		8630987	0					
ANR	8631148	Identifier	ModeAlphabet		8630987	0					
ANR	8631149	Identifier	scheme		8630987	1					
ANR	8631150	Identifier	i		8630987	1					
ANR	8631151	ForStatement	for ( i = 0 ; i < s -> u_superblock_start ; i ++ )		8630987	4					
ANR	8631152	ForInit	i = 0 ;	71:13:1124:1129	8630987	0	True				
ANR	8631153	AssignmentExpression	i = 0		8630987	0		=			
ANR	8631154	Identifier	i		8630987	0					
ANR	8631155	PrimaryExpression	0		8630987	1					
ANR	8631156	Condition	i < s -> u_superblock_start	71:20:1131:1155	8630987	1	True				
ANR	8631157	RelationalExpression	i < s -> u_superblock_start		8630987	0		<			
ANR	8631158	Identifier	i		8630987	0					
ANR	8631159	PtrMemberAccess	s -> u_superblock_start		8630987	1					
ANR	8631160	Identifier	s		8630987	0					
ANR	8631161	Identifier	u_superblock_start		8630987	1					
ANR	8631162	PostIncDecOperationExpression	i ++	71:47:1158:1160	8630987	2	True				
ANR	8631163	Identifier	i		8630987	0					
ANR	8631164	IncDec	++		8630987	1					
ANR	8631165	CompoundStatement		69:52:1096:1096	8630987	3					
ANR	8631166	ForStatement	for ( j = 0 ; j < 4 ; j ++ )		8630987	0					
ANR	8631167	ForInit	j = 0 ;	75:17:1185:1190	8630987	0	True				
ANR	8631168	AssignmentExpression	j = 0		8630987	0		=			
ANR	8631169	Identifier	j		8630987	0					
ANR	8631170	PrimaryExpression	0		8630987	1					
ANR	8631171	Condition	j < 4	75:24:1192:1196	8630987	1	True				
ANR	8631172	RelationalExpression	j < 4		8630987	0		<			
ANR	8631173	Identifier	j		8630987	0					
ANR	8631174	PrimaryExpression	4		8630987	1					
ANR	8631175	PostIncDecOperationExpression	j ++	75:31:1199:1201	8630987	2	True				
ANR	8631176	Identifier	j		8630987	0					
ANR	8631177	IncDec	++		8630987	1					
ANR	8631178	CompoundStatement		73:36:1137:1137	8630987	3					
ANR	8631179	ExpressionStatement	current_macroblock = s -> superblock_macroblocks [ i * 4 + j ]	77:16:1223:1280	8630987	0	True				
ANR	8631180	AssignmentExpression	current_macroblock = s -> superblock_macroblocks [ i * 4 + j ]		8630987	0		=			
ANR	8631181	Identifier	current_macroblock		8630987	0					
ANR	8631182	ArrayIndexing	s -> superblock_macroblocks [ i * 4 + j ]		8630987	1					
ANR	8631183	PtrMemberAccess	s -> superblock_macroblocks		8630987	0					
ANR	8631184	Identifier	s		8630987	0					
ANR	8631185	Identifier	superblock_macroblocks		8630987	1					
ANR	8631186	AdditiveExpression	i * 4 + j		8630987	1		+			
ANR	8631187	MultiplicativeExpression	i * 4		8630987	0		*			
ANR	8631188	Identifier	i		8630987	0					
ANR	8631189	PrimaryExpression	4		8630987	1					
ANR	8631190	Identifier	j		8630987	1					
ANR	8631191	IfStatement	if ( ( current_macroblock == - 1 ) || ( ! s -> macroblock_coded [ current_macroblock ] ) )		8630987	1					
ANR	8631192	Condition	( current_macroblock == - 1 ) || ( ! s -> macroblock_coded [ current_macroblock ] )	79:20:1303:1395	8630987	0	True				
ANR	8631193	OrExpression	( current_macroblock == - 1 ) || ( ! s -> macroblock_coded [ current_macroblock ] )		8630987	0		||			
ANR	8631194	EqualityExpression	current_macroblock == - 1		8630987	0		==			
ANR	8631195	Identifier	current_macroblock		8630987	0					
ANR	8631196	UnaryOperationExpression	- 1		8630987	1					
ANR	8631197	UnaryOperator	-		8630987	0					
ANR	8631198	PrimaryExpression	1		8630987	1					
ANR	8631199	UnaryOperationExpression	! s -> macroblock_coded [ current_macroblock ]		8630987	1					
ANR	8631200	UnaryOperator	!		8630987	0					
ANR	8631201	ArrayIndexing	s -> macroblock_coded [ current_macroblock ]		8630987	1					
ANR	8631202	PtrMemberAccess	s -> macroblock_coded		8630987	0					
ANR	8631203	Identifier	s		8630987	0					
ANR	8631204	Identifier	macroblock_coded		8630987	1					
ANR	8631205	Identifier	current_macroblock		8630987	1					
ANR	8631206	ContinueStatement	continue ;	83:20:1419:1427	8630987	1	True				
ANR	8631207	IfStatement	if ( scheme == 7 )		8630987	2					
ANR	8631208	Condition	scheme == 7	89:20:1520:1530	8630987	0	True				
ANR	8631209	EqualityExpression	scheme == 7		8630987	0		==			
ANR	8631210	Identifier	scheme		8630987	0					
ANR	8631211	PrimaryExpression	7		8630987	1					
ANR	8631212	ExpressionStatement	"coding_mode = get_bits ( gb , 3 )"	91:20:1554:1583	8630987	1	True				
ANR	8631213	AssignmentExpression	"coding_mode = get_bits ( gb , 3 )"		8630987	0		=			
ANR	8631214	Identifier	coding_mode		8630987	0					
ANR	8631215	CallExpression	"get_bits ( gb , 3 )"		8630987	1					
ANR	8631216	Callee	get_bits		8630987	0					
ANR	8631217	Identifier	get_bits		8630987	0					
ANR	8631218	ArgumentList	gb		8630987	1					
ANR	8631219	Argument	gb		8630987	0					
ANR	8631220	Identifier	gb		8630987	0					
ANR	8631221	Argument	3		8630987	1					
ANR	8631222	PrimaryExpression	3		8630987	0					
ANR	8631223	ElseStatement	else		8630987	0					
ANR	8631224	ExpressionStatement	coding_mode = ModeAlphabet [ scheme ] [ get_mode_code ( gb ) ]	95:20:1628:1681	8630987	0	True				
ANR	8631225	AssignmentExpression	coding_mode = ModeAlphabet [ scheme ] [ get_mode_code ( gb ) ]		8630987	0		=			
ANR	8631226	Identifier	coding_mode		8630987	0					
ANR	8631227	ArrayIndexing	ModeAlphabet [ scheme ] [ get_mode_code ( gb ) ]		8630987	1					
ANR	8631228	ArrayIndexing	ModeAlphabet [ scheme ]		8630987	0					
ANR	8631229	Identifier	ModeAlphabet		8630987	0					
ANR	8631230	Identifier	scheme		8630987	1					
ANR	8631231	CallExpression	get_mode_code ( gb )		8630987	1					
ANR	8631232	Callee	get_mode_code		8630987	0					
ANR	8631233	Identifier	get_mode_code		8630987	0					
ANR	8631234	ArgumentList	gb		8630987	1					
ANR	8631235	Argument	gb		8630987	0					
ANR	8631236	Identifier	gb		8630987	0					
ANR	8631237	ForStatement	for ( k = 0 ; k < 6 ; k ++ )		8630987	3					
ANR	8631238	ForInit	k = 0 ;	99:21:1707:1712	8630987	0	True				
ANR	8631239	AssignmentExpression	k = 0		8630987	0		=			
ANR	8631240	Identifier	k		8630987	0					
ANR	8631241	PrimaryExpression	0		8630987	1					
ANR	8631242	Condition	k < 6	99:28:1714:1718	8630987	1	True				
ANR	8631243	RelationalExpression	k < 6		8630987	0		<			
ANR	8631244	Identifier	k		8630987	0					
ANR	8631245	PrimaryExpression	6		8630987	1					
ANR	8631246	PostIncDecOperationExpression	k ++	99:35:1721:1723	8630987	2	True				
ANR	8631247	Identifier	k		8630987	0					
ANR	8631248	IncDec	++		8630987	1					
ANR	8631249	CompoundStatement		97:40:1659:1659	8630987	3					
ANR	8631250	ExpressionStatement	current_fragment = s -> macroblock_fragments [ current_macroblock * 6 + k ]	101:20:1749:1845	8630987	0	True				
ANR	8631251	AssignmentExpression	current_fragment = s -> macroblock_fragments [ current_macroblock * 6 + k ]		8630987	0		=			
ANR	8631252	Identifier	current_fragment		8630987	0					
ANR	8631253	ArrayIndexing	s -> macroblock_fragments [ current_macroblock * 6 + k ]		8630987	1					
ANR	8631254	PtrMemberAccess	s -> macroblock_fragments		8630987	0					
ANR	8631255	Identifier	s		8630987	0					
ANR	8631256	Identifier	macroblock_fragments		8630987	1					
ANR	8631257	AdditiveExpression	current_macroblock * 6 + k		8630987	1		+			
ANR	8631258	MultiplicativeExpression	current_macroblock * 6		8630987	0		*			
ANR	8631259	Identifier	current_macroblock		8630987	0					
ANR	8631260	PrimaryExpression	6		8630987	1					
ANR	8631261	Identifier	k		8630987	1					
ANR	8631262	IfStatement	if ( s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY )		8630987	1					
ANR	8631263	Condition	s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY	105:24:1872:1958	8630987	0	True				
ANR	8631264	EqualityExpression	s -> all_fragments [ current_fragment ] . coding_method != MODE_COPY		8630987	0		!=			
ANR	8631265	MemberAccess	s -> all_fragments [ current_fragment ] . coding_method		8630987	0					
ANR	8631266	ArrayIndexing	s -> all_fragments [ current_fragment ]		8630987	0					
ANR	8631267	PtrMemberAccess	s -> all_fragments		8630987	0					
ANR	8631268	Identifier	s		8630987	0					
ANR	8631269	Identifier	all_fragments		8630987	1					
ANR	8631270	Identifier	current_fragment		8630987	1					
ANR	8631271	Identifier	coding_method		8630987	1					
ANR	8631272	Identifier	MODE_COPY		8630987	1					
ANR	8631273	ExpressionStatement	s -> all_fragments [ current_fragment ] . coding_method = coding_mode	109:24:1986:2077	8630987	1	True				
ANR	8631274	AssignmentExpression	s -> all_fragments [ current_fragment ] . coding_method = coding_mode		8630987	0		=			
ANR	8631275	MemberAccess	s -> all_fragments [ current_fragment ] . coding_method		8630987	0					
ANR	8631276	ArrayIndexing	s -> all_fragments [ current_fragment ]		8630987	0					
ANR	8631277	PtrMemberAccess	s -> all_fragments		8630987	0					
ANR	8631278	Identifier	s		8630987	0					
ANR	8631279	Identifier	all_fragments		8630987	1					
ANR	8631280	Identifier	current_fragment		8630987	1					
ANR	8631281	Identifier	coding_method		8630987	1					
ANR	8631282	Identifier	coding_mode		8630987	1					
ANR	8631283	ExpressionStatement	"debug_modes ( ""    coding method for macroblock starting @ fragment %d = %d\\n"" , s -> macroblock_fragments [ current_macroblock * 6 ] , coding_mode )"	117:16:2117:2277	8630987	4	True				
ANR	8631284	CallExpression	"debug_modes ( ""    coding method for macroblock starting @ fragment %d = %d\\n"" , s -> macroblock_fragments [ current_macroblock * 6 ] , coding_mode )"		8630987	0					
ANR	8631285	Callee	debug_modes		8630987	0					
ANR	8631286	Identifier	debug_modes		8630987	0					
ANR	8631287	ArgumentList	"""    coding method for macroblock starting @ fragment %d = %d\\n"""		8630987	1					
ANR	8631288	Argument	"""    coding method for macroblock starting @ fragment %d = %d\\n"""		8630987	0					
ANR	8631289	PrimaryExpression	"""    coding method for macroblock starting @ fragment %d = %d\\n"""		8630987	0					
ANR	8631290	Argument	s -> macroblock_fragments [ current_macroblock * 6 ]		8630987	1					
ANR	8631291	ArrayIndexing	s -> macroblock_fragments [ current_macroblock * 6 ]		8630987	0					
ANR	8631292	PtrMemberAccess	s -> macroblock_fragments		8630987	0					
ANR	8631293	Identifier	s		8630987	0					
ANR	8631294	Identifier	macroblock_fragments		8630987	1					
ANR	8631295	MultiplicativeExpression	current_macroblock * 6		8630987	1		*			
ANR	8631296	Identifier	current_macroblock		8630987	0					
ANR	8631297	PrimaryExpression	6		8630987	1					
ANR	8631298	Argument	coding_mode		8630987	2					
ANR	8631299	Identifier	coding_mode		8630987	0					
ANR	8631300	ReturnType	static void		8630987	1					
ANR	8631301	Identifier	unpack_modes		8630987	2					
ANR	8631302	ParameterList	"Vp3DecodeContext * s , GetBitContext * gb"		8630987	3					
ANR	8631303	Parameter	Vp3DecodeContext * s	1:25:25:43	8630987	0	True				
ANR	8631304	ParameterType	Vp3DecodeContext *		8630987	0					
ANR	8631305	Identifier	s		8630987	1					
ANR	8631306	Parameter	GetBitContext * gb	1:46:46:62	8630987	1	True				
ANR	8631307	ParameterType	GetBitContext *		8630987	0					
ANR	8631308	Identifier	gb		8630987	1					
ANR	8631309	CFGEntryNode	ENTRY		8630987		True				
ANR	8631310	CFGExitNode	EXIT		8630987		True				
ANR	8631311	Symbol	s -> macroblock_fragments		8630987						
ANR	8631312	Symbol	* scheme		8630987						
ANR	8631313	Symbol	MODE_COPY		8630987						
ANR	8631314	Symbol	scheme		8630987						
ANR	8631315	Symbol	get_bits		8630987						
ANR	8631316	Symbol	get_mode_code		8630987						
ANR	8631317	Symbol	s -> fragment_count		8630987						
ANR	8631318	Symbol	* get_mode_code		8630987						
ANR	8631319	Symbol	s -> keyframe		8630987						
ANR	8631320	Symbol	s -> superblock_macroblocks		8630987						
ANR	8631321	Symbol	ModeAlphabet		8630987						
ANR	8631322	Symbol	* ModeAlphabet		8630987						
ANR	8631323	Symbol	s -> all_fragments [ i ] . coding_method		8630987						
ANR	8631324	Symbol	* * s		8630987						
ANR	8631325	Symbol	* s -> superblock_macroblocks		8630987						
ANR	8631326	Symbol	gb		8630987						
ANR	8631327	Symbol	current_fragment		8630987						
ANR	8631328	Symbol	* * scheme		8630987						
ANR	8631329	Symbol	s -> u_superblock_start		8630987						
ANR	8631330	Symbol	s -> macroblock_coded		8630987						
ANR	8631331	Symbol	coding_mode		8630987						
ANR	8631332	Symbol	i		8630987						
ANR	8631333	Symbol	j		8630987						
ANR	8631334	Symbol	k		8630987						
ANR	8631335	Symbol	* current_fragment		8630987						
ANR	8631336	Symbol	* s -> macroblock_fragments		8630987						
ANR	8631337	Symbol	s -> all_fragments		8630987						
ANR	8631338	Symbol	* s -> all_fragments		8630987						
ANR	8631339	Symbol	s		8630987						
ANR	8631340	Symbol	* i		8630987						
ANR	8631341	Symbol	* j		8630987						
ANR	8631342	Symbol	* k		8630987						
ANR	8631343	Symbol	current_macroblock		8630987						
ANR	8631344	Symbol	* current_macroblock		8630987						
ANR	8631345	Symbol	* * ModeAlphabet		8630987						
ANR	8631346	Symbol	MODE_INTRA		8630987						
ANR	8631347	Symbol	* s -> macroblock_coded		8630987						
ANR	8631348	Symbol	* s		8630987						
ANR	8631349	Symbol	s -> all_fragments [ current_fragment ] . coding_method		8630987						
