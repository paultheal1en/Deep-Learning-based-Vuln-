command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6990552	File	/home/p4ultr4n/workplace/ReVeal/raw_code/qemu_gluster_parseuri_0.c								
ANR	6990553	Function	qemu_gluster_parseuri	1:0:0:1505							
ANR	6990554	FunctionDef	"qemu_gluster_parseuri (GlusterConf * gconf , const char * filename)"		6990553	0					
ANR	6990555	CompoundStatement		3:0:76:1505	6990553	0					
ANR	6990556	IdentifierDeclStatement	URI * uri ;	5:4:83:91	6990553	0	True				
ANR	6990557	IdentifierDecl	* uri		6990553	0					
ANR	6990558	IdentifierDeclType	URI *		6990553	0					
ANR	6990559	Identifier	uri		6990553	1					
ANR	6990560	IdentifierDeclStatement	QueryParams * qp = NULL ;	7:4:98:120	6990553	1	True				
ANR	6990561	IdentifierDecl	* qp = NULL		6990553	0					
ANR	6990562	IdentifierDeclType	QueryParams *		6990553	0					
ANR	6990563	Identifier	qp		6990553	1					
ANR	6990564	AssignmentExpression	* qp = NULL		6990553	2		=			
ANR	6990565	Identifier	NULL		6990553	0					
ANR	6990566	Identifier	NULL		6990553	1					
ANR	6990567	IdentifierDeclStatement	bool is_unix = false ;	9:4:127:147	6990553	2	True				
ANR	6990568	IdentifierDecl	is_unix = false		6990553	0					
ANR	6990569	IdentifierDeclType	bool		6990553	0					
ANR	6990570	Identifier	is_unix		6990553	1					
ANR	6990571	AssignmentExpression	is_unix = false		6990553	2		=			
ANR	6990572	Identifier	false		6990553	0					
ANR	6990573	Identifier	false		6990553	1					
ANR	6990574	IdentifierDeclStatement	int ret = 0 ;	11:4:154:165	6990553	3	True				
ANR	6990575	IdentifierDecl	ret = 0		6990553	0					
ANR	6990576	IdentifierDeclType	int		6990553	0					
ANR	6990577	Identifier	ret		6990553	1					
ANR	6990578	AssignmentExpression	ret = 0		6990553	2		=			
ANR	6990579	Identifier	ret		6990553	0					
ANR	6990580	PrimaryExpression	0		6990553	1					
ANR	6990581	ExpressionStatement	uri = uri_parse ( filename )	15:4:174:199	6990553	4	True				
ANR	6990582	AssignmentExpression	uri = uri_parse ( filename )		6990553	0		=			
ANR	6990583	Identifier	uri		6990553	0					
ANR	6990584	CallExpression	uri_parse ( filename )		6990553	1					
ANR	6990585	Callee	uri_parse		6990553	0					
ANR	6990586	Identifier	uri_parse		6990553	0					
ANR	6990587	ArgumentList	filename		6990553	1					
ANR	6990588	Argument	filename		6990553	0					
ANR	6990589	Identifier	filename		6990553	0					
ANR	6990590	IfStatement	if ( ! uri )		6990553	5					
ANR	6990591	Condition	! uri	17:8:210:213	6990553	0	True				
ANR	6990592	UnaryOperationExpression	! uri		6990553	0					
ANR	6990593	UnaryOperator	!		6990553	0					
ANR	6990594	Identifier	uri		6990553	1					
ANR	6990595	CompoundStatement		15:14:139:139	6990553	1					
ANR	6990596	ReturnStatement	return - EINVAL ;	19:8:227:241	6990553	0	True				
ANR	6990597	UnaryOperationExpression	- EINVAL		6990553	0					
ANR	6990598	UnaryOperator	-		6990553	0					
ANR	6990599	Identifier	EINVAL		6990553	1					
ANR	6990600	IfStatement	"if ( ! strcmp ( uri -> scheme , ""gluster"" ) )"		6990553	6					
ANR	6990601	Condition	"! strcmp ( uri -> scheme , ""gluster"" )"	27:8:282:312	6990553	0	True				
ANR	6990602	UnaryOperationExpression	"! strcmp ( uri -> scheme , ""gluster"" )"		6990553	0					
ANR	6990603	UnaryOperator	!		6990553	0					
ANR	6990604	CallExpression	"strcmp ( uri -> scheme , ""gluster"" )"		6990553	1					
ANR	6990605	Callee	strcmp		6990553	0					
ANR	6990606	Identifier	strcmp		6990553	0					
ANR	6990607	ArgumentList	uri -> scheme		6990553	1					
ANR	6990608	Argument	uri -> scheme		6990553	0					
ANR	6990609	PtrMemberAccess	uri -> scheme		6990553	0					
ANR	6990610	Identifier	uri		6990553	0					
ANR	6990611	Identifier	scheme		6990553	1					
ANR	6990612	Argument	"""gluster"""		6990553	1					
ANR	6990613	PrimaryExpression	"""gluster"""		6990553	0					
ANR	6990614	CompoundStatement		25:41:238:238	6990553	1					
ANR	6990615	ExpressionStatement	"gconf -> transport = g_strdup ( ""tcp"" )"	29:8:326:360	6990553	0	True				
ANR	6990616	AssignmentExpression	"gconf -> transport = g_strdup ( ""tcp"" )"		6990553	0		=			
ANR	6990617	PtrMemberAccess	gconf -> transport		6990553	0					
ANR	6990618	Identifier	gconf		6990553	0					
ANR	6990619	Identifier	transport		6990553	1					
ANR	6990620	CallExpression	"g_strdup ( ""tcp"" )"		6990553	1					
ANR	6990621	Callee	g_strdup		6990553	0					
ANR	6990622	Identifier	g_strdup		6990553	0					
ANR	6990623	ArgumentList	"""tcp"""		6990553	1					
ANR	6990624	Argument	"""tcp"""		6990553	0					
ANR	6990625	PrimaryExpression	"""tcp"""		6990553	0					
ANR	6990626	ElseStatement	else		6990553	0					
ANR	6990627	IfStatement	"if ( ! strcmp ( uri -> scheme , ""gluster+tcp"" ) )"		6990553	0					
ANR	6990628	Condition	"! strcmp ( uri -> scheme , ""gluster+tcp"" )"	31:15:378:412	6990553	0	True				
ANR	6990629	UnaryOperationExpression	"! strcmp ( uri -> scheme , ""gluster+tcp"" )"		6990553	0					
ANR	6990630	UnaryOperator	!		6990553	0					
ANR	6990631	CallExpression	"strcmp ( uri -> scheme , ""gluster+tcp"" )"		6990553	1					
ANR	6990632	Callee	strcmp		6990553	0					
ANR	6990633	Identifier	strcmp		6990553	0					
ANR	6990634	ArgumentList	uri -> scheme		6990553	1					
ANR	6990635	Argument	uri -> scheme		6990553	0					
ANR	6990636	PtrMemberAccess	uri -> scheme		6990553	0					
ANR	6990637	Identifier	uri		6990553	0					
ANR	6990638	Identifier	scheme		6990553	1					
ANR	6990639	Argument	"""gluster+tcp"""		6990553	1					
ANR	6990640	PrimaryExpression	"""gluster+tcp"""		6990553	0					
ANR	6990641	CompoundStatement		29:52:338:338	6990553	1					
ANR	6990642	ExpressionStatement	"gconf -> transport = g_strdup ( ""tcp"" )"	33:8:426:460	6990553	0	True				
ANR	6990643	AssignmentExpression	"gconf -> transport = g_strdup ( ""tcp"" )"		6990553	0		=			
ANR	6990644	PtrMemberAccess	gconf -> transport		6990553	0					
ANR	6990645	Identifier	gconf		6990553	0					
ANR	6990646	Identifier	transport		6990553	1					
ANR	6990647	CallExpression	"g_strdup ( ""tcp"" )"		6990553	1					
ANR	6990648	Callee	g_strdup		6990553	0					
ANR	6990649	Identifier	g_strdup		6990553	0					
ANR	6990650	ArgumentList	"""tcp"""		6990553	1					
ANR	6990651	Argument	"""tcp"""		6990553	0					
ANR	6990652	PrimaryExpression	"""tcp"""		6990553	0					
ANR	6990653	ElseStatement	else		6990553	0					
ANR	6990654	IfStatement	"if ( ! strcmp ( uri -> scheme , ""gluster+unix"" ) )"		6990553	0					
ANR	6990655	Condition	"! strcmp ( uri -> scheme , ""gluster+unix"" )"	35:15:478:513	6990553	0	True				
ANR	6990656	UnaryOperationExpression	"! strcmp ( uri -> scheme , ""gluster+unix"" )"		6990553	0					
ANR	6990657	UnaryOperator	!		6990553	0					
ANR	6990658	CallExpression	"strcmp ( uri -> scheme , ""gluster+unix"" )"		6990553	1					
ANR	6990659	Callee	strcmp		6990553	0					
ANR	6990660	Identifier	strcmp		6990553	0					
ANR	6990661	ArgumentList	uri -> scheme		6990553	1					
ANR	6990662	Argument	uri -> scheme		6990553	0					
ANR	6990663	PtrMemberAccess	uri -> scheme		6990553	0					
ANR	6990664	Identifier	uri		6990553	0					
ANR	6990665	Identifier	scheme		6990553	1					
ANR	6990666	Argument	"""gluster+unix"""		6990553	1					
ANR	6990667	PrimaryExpression	"""gluster+unix"""		6990553	0					
ANR	6990668	CompoundStatement		33:53:439:439	6990553	1					
ANR	6990669	ExpressionStatement	"gconf -> transport = g_strdup ( ""unix"" )"	37:8:527:562	6990553	0	True				
ANR	6990670	AssignmentExpression	"gconf -> transport = g_strdup ( ""unix"" )"		6990553	0		=			
ANR	6990671	PtrMemberAccess	gconf -> transport		6990553	0					
ANR	6990672	Identifier	gconf		6990553	0					
ANR	6990673	Identifier	transport		6990553	1					
ANR	6990674	CallExpression	"g_strdup ( ""unix"" )"		6990553	1					
ANR	6990675	Callee	g_strdup		6990553	0					
ANR	6990676	Identifier	g_strdup		6990553	0					
ANR	6990677	ArgumentList	"""unix"""		6990553	1					
ANR	6990678	Argument	"""unix"""		6990553	0					
ANR	6990679	PrimaryExpression	"""unix"""		6990553	0					
ANR	6990680	ExpressionStatement	is_unix = true	39:8:573:587	6990553	1	True				
ANR	6990681	AssignmentExpression	is_unix = true		6990553	0		=			
ANR	6990682	Identifier	is_unix		6990553	0					
ANR	6990683	Identifier	true		6990553	1					
ANR	6990684	ElseStatement	else		6990553	0					
ANR	6990685	IfStatement	"if ( ! strcmp ( uri -> scheme , ""gluster+rdma"" ) )"		6990553	0					
ANR	6990686	Condition	"! strcmp ( uri -> scheme , ""gluster+rdma"" )"	41:15:605:640	6990553	0	True				
ANR	6990687	UnaryOperationExpression	"! strcmp ( uri -> scheme , ""gluster+rdma"" )"		6990553	0					
ANR	6990688	UnaryOperator	!		6990553	0					
ANR	6990689	CallExpression	"strcmp ( uri -> scheme , ""gluster+rdma"" )"		6990553	1					
ANR	6990690	Callee	strcmp		6990553	0					
ANR	6990691	Identifier	strcmp		6990553	0					
ANR	6990692	ArgumentList	uri -> scheme		6990553	1					
ANR	6990693	Argument	uri -> scheme		6990553	0					
ANR	6990694	PtrMemberAccess	uri -> scheme		6990553	0					
ANR	6990695	Identifier	uri		6990553	0					
ANR	6990696	Identifier	scheme		6990553	1					
ANR	6990697	Argument	"""gluster+rdma"""		6990553	1					
ANR	6990698	PrimaryExpression	"""gluster+rdma"""		6990553	0					
ANR	6990699	CompoundStatement		39:53:566:566	6990553	1					
ANR	6990700	ExpressionStatement	"gconf -> transport = g_strdup ( ""rdma"" )"	43:8:654:689	6990553	0	True				
ANR	6990701	AssignmentExpression	"gconf -> transport = g_strdup ( ""rdma"" )"		6990553	0		=			
ANR	6990702	PtrMemberAccess	gconf -> transport		6990553	0					
ANR	6990703	Identifier	gconf		6990553	0					
ANR	6990704	Identifier	transport		6990553	1					
ANR	6990705	CallExpression	"g_strdup ( ""rdma"" )"		6990553	1					
ANR	6990706	Callee	g_strdup		6990553	0					
ANR	6990707	Identifier	g_strdup		6990553	0					
ANR	6990708	ArgumentList	"""rdma"""		6990553	1					
ANR	6990709	Argument	"""rdma"""		6990553	0					
ANR	6990710	PrimaryExpression	"""rdma"""		6990553	0					
ANR	6990711	ElseStatement	else		6990553	0					
ANR	6990712	CompoundStatement		43:11:626:626	6990553	0					
ANR	6990713	ExpressionStatement	ret = - EINVAL	47:8:714:727	6990553	0	True				
ANR	6990714	AssignmentExpression	ret = - EINVAL		6990553	0		=			
ANR	6990715	Identifier	ret		6990553	0					
ANR	6990716	UnaryOperationExpression	- EINVAL		6990553	1					
ANR	6990717	UnaryOperator	-		6990553	0					
ANR	6990718	Identifier	EINVAL		6990553	1					
ANR	6990719	GotoStatement	goto out ;	49:8:738:746	6990553	1	True				
ANR	6990720	Identifier	out		6990553	0					
ANR	6990721	ExpressionStatement	"ret = parse_volume_options ( gconf , uri -> path )"	55:4:762:806	6990553	7	True				
ANR	6990722	AssignmentExpression	"ret = parse_volume_options ( gconf , uri -> path )"		6990553	0		=			
ANR	6990723	Identifier	ret		6990553	0					
ANR	6990724	CallExpression	"parse_volume_options ( gconf , uri -> path )"		6990553	1					
ANR	6990725	Callee	parse_volume_options		6990553	0					
ANR	6990726	Identifier	parse_volume_options		6990553	0					
ANR	6990727	ArgumentList	gconf		6990553	1					
ANR	6990728	Argument	gconf		6990553	0					
ANR	6990729	Identifier	gconf		6990553	0					
ANR	6990730	Argument	uri -> path		6990553	1					
ANR	6990731	PtrMemberAccess	uri -> path		6990553	0					
ANR	6990732	Identifier	uri		6990553	0					
ANR	6990733	Identifier	path		6990553	1					
ANR	6990734	IfStatement	if ( ret < 0 )		6990553	8					
ANR	6990735	Condition	ret < 0	57:8:817:823	6990553	0	True				
ANR	6990736	RelationalExpression	ret < 0		6990553	0		<			
ANR	6990737	Identifier	ret		6990553	0					
ANR	6990738	PrimaryExpression	0		6990553	1					
ANR	6990739	CompoundStatement		55:17:749:749	6990553	1					
ANR	6990740	GotoStatement	goto out ;	59:8:837:845	6990553	0	True				
ANR	6990741	Identifier	out		6990553	0					
ANR	6990742	ExpressionStatement	qp = query_params_parse ( uri -> query )	65:4:861:896	6990553	9	True				
ANR	6990743	AssignmentExpression	qp = query_params_parse ( uri -> query )		6990553	0		=			
ANR	6990744	Identifier	qp		6990553	0					
ANR	6990745	CallExpression	query_params_parse ( uri -> query )		6990553	1					
ANR	6990746	Callee	query_params_parse		6990553	0					
ANR	6990747	Identifier	query_params_parse		6990553	0					
ANR	6990748	ArgumentList	uri -> query		6990553	1					
ANR	6990749	Argument	uri -> query		6990553	0					
ANR	6990750	PtrMemberAccess	uri -> query		6990553	0					
ANR	6990751	Identifier	uri		6990553	0					
ANR	6990752	Identifier	query		6990553	1					
ANR	6990753	IfStatement	if ( qp -> n > 1 || ( is_unix && ! qp -> n ) || ( ! is_unix && qp -> n ) )		6990553	10					
ANR	6990754	Condition	qp -> n > 1 || ( is_unix && ! qp -> n ) || ( ! is_unix && qp -> n )	67:8:907:961	6990553	0	True				
ANR	6990755	OrExpression	qp -> n > 1 || ( is_unix && ! qp -> n ) || ( ! is_unix && qp -> n )		6990553	0		||			
ANR	6990756	RelationalExpression	qp -> n > 1		6990553	0		>			
ANR	6990757	PtrMemberAccess	qp -> n		6990553	0					
ANR	6990758	Identifier	qp		6990553	0					
ANR	6990759	Identifier	n		6990553	1					
ANR	6990760	PrimaryExpression	1		6990553	1					
ANR	6990761	OrExpression	( is_unix && ! qp -> n ) || ( ! is_unix && qp -> n )		6990553	1		||			
ANR	6990762	AndExpression	is_unix && ! qp -> n		6990553	0		&&			
ANR	6990763	Identifier	is_unix		6990553	0					
ANR	6990764	UnaryOperationExpression	! qp -> n		6990553	1					
ANR	6990765	UnaryOperator	!		6990553	0					
ANR	6990766	PtrMemberAccess	qp -> n		6990553	1					
ANR	6990767	Identifier	qp		6990553	0					
ANR	6990768	Identifier	n		6990553	1					
ANR	6990769	AndExpression	! is_unix && qp -> n		6990553	1		&&			
ANR	6990770	UnaryOperationExpression	! is_unix		6990553	0					
ANR	6990771	UnaryOperator	!		6990553	0					
ANR	6990772	Identifier	is_unix		6990553	1					
ANR	6990773	PtrMemberAccess	qp -> n		6990553	1					
ANR	6990774	Identifier	qp		6990553	0					
ANR	6990775	Identifier	n		6990553	1					
ANR	6990776	CompoundStatement		65:65:887:887	6990553	1					
ANR	6990777	ExpressionStatement	ret = - EINVAL	69:8:975:988	6990553	0	True				
ANR	6990778	AssignmentExpression	ret = - EINVAL		6990553	0		=			
ANR	6990779	Identifier	ret		6990553	0					
ANR	6990780	UnaryOperationExpression	- EINVAL		6990553	1					
ANR	6990781	UnaryOperator	-		6990553	0					
ANR	6990782	Identifier	EINVAL		6990553	1					
ANR	6990783	GotoStatement	goto out ;	71:8:999:1007	6990553	1	True				
ANR	6990784	Identifier	out		6990553	0					
ANR	6990785	IfStatement	if ( is_unix )		6990553	11					
ANR	6990786	Condition	is_unix	77:8:1027:1033	6990553	0	True				
ANR	6990787	Identifier	is_unix		6990553	0					
ANR	6990788	CompoundStatement		75:17:959:959	6990553	1					
ANR	6990789	IfStatement	if ( uri -> server || uri -> port )		6990553	0					
ANR	6990790	Condition	uri -> server || uri -> port	79:12:1051:1074	6990553	0	True				
ANR	6990791	OrExpression	uri -> server || uri -> port		6990553	0		||			
ANR	6990792	PtrMemberAccess	uri -> server		6990553	0					
ANR	6990793	Identifier	uri		6990553	0					
ANR	6990794	Identifier	server		6990553	1					
ANR	6990795	PtrMemberAccess	uri -> port		6990553	1					
ANR	6990796	Identifier	uri		6990553	0					
ANR	6990797	Identifier	port		6990553	1					
ANR	6990798	CompoundStatement		77:38:1000:1000	6990553	1					
ANR	6990799	ExpressionStatement	ret = - EINVAL	81:12:1092:1105	6990553	0	True				
ANR	6990800	AssignmentExpression	ret = - EINVAL		6990553	0		=			
ANR	6990801	Identifier	ret		6990553	0					
ANR	6990802	UnaryOperationExpression	- EINVAL		6990553	1					
ANR	6990803	UnaryOperator	-		6990553	0					
ANR	6990804	Identifier	EINVAL		6990553	1					
ANR	6990805	GotoStatement	goto out ;	83:12:1120:1128	6990553	1	True				
ANR	6990806	Identifier	out		6990553	0					
ANR	6990807	IfStatement	"if ( strcmp ( qp -> p [ 0 ] . name , ""socket"" ) )"		6990553	1					
ANR	6990808	Condition	"strcmp ( qp -> p [ 0 ] . name , ""socket"" )"	87:12:1154:1184	6990553	0	True				
ANR	6990809	CallExpression	"strcmp ( qp -> p [ 0 ] . name , ""socket"" )"		6990553	0					
ANR	6990810	Callee	strcmp		6990553	0					
ANR	6990811	Identifier	strcmp		6990553	0					
ANR	6990812	ArgumentList	qp -> p [ 0 ] . name		6990553	1					
ANR	6990813	Argument	qp -> p [ 0 ] . name		6990553	0					
ANR	6990814	MemberAccess	qp -> p [ 0 ] . name		6990553	0					
ANR	6990815	ArrayIndexing	qp -> p [ 0 ]		6990553	0					
ANR	6990816	PtrMemberAccess	qp -> p		6990553	0					
ANR	6990817	Identifier	qp		6990553	0					
ANR	6990818	Identifier	p		6990553	1					
ANR	6990819	PrimaryExpression	0		6990553	1					
ANR	6990820	Identifier	name		6990553	1					
ANR	6990821	Argument	"""socket"""		6990553	1					
ANR	6990822	PrimaryExpression	"""socket"""		6990553	0					
ANR	6990823	CompoundStatement		85:45:1110:1110	6990553	1					
ANR	6990824	ExpressionStatement	ret = - EINVAL	89:12:1202:1215	6990553	0	True				
ANR	6990825	AssignmentExpression	ret = - EINVAL		6990553	0		=			
ANR	6990826	Identifier	ret		6990553	0					
ANR	6990827	UnaryOperationExpression	- EINVAL		6990553	1					
ANR	6990828	UnaryOperator	-		6990553	0					
ANR	6990829	Identifier	EINVAL		6990553	1					
ANR	6990830	GotoStatement	goto out ;	91:12:1230:1238	6990553	1	True				
ANR	6990831	Identifier	out		6990553	0					
ANR	6990832	ExpressionStatement	gconf -> server = g_strdup ( qp -> p [ 0 ] . value )	95:8:1260:1300	6990553	2	True				
ANR	6990833	AssignmentExpression	gconf -> server = g_strdup ( qp -> p [ 0 ] . value )		6990553	0		=			
ANR	6990834	PtrMemberAccess	gconf -> server		6990553	0					
ANR	6990835	Identifier	gconf		6990553	0					
ANR	6990836	Identifier	server		6990553	1					
ANR	6990837	CallExpression	g_strdup ( qp -> p [ 0 ] . value )		6990553	1					
ANR	6990838	Callee	g_strdup		6990553	0					
ANR	6990839	Identifier	g_strdup		6990553	0					
ANR	6990840	ArgumentList	qp -> p [ 0 ] . value		6990553	1					
ANR	6990841	Argument	qp -> p [ 0 ] . value		6990553	0					
ANR	6990842	MemberAccess	qp -> p [ 0 ] . value		6990553	0					
ANR	6990843	ArrayIndexing	qp -> p [ 0 ]		6990553	0					
ANR	6990844	PtrMemberAccess	qp -> p		6990553	0					
ANR	6990845	Identifier	qp		6990553	0					
ANR	6990846	Identifier	p		6990553	1					
ANR	6990847	PrimaryExpression	0		6990553	1					
ANR	6990848	Identifier	value		6990553	1					
ANR	6990849	ElseStatement	else		6990553	0					
ANR	6990850	CompoundStatement		95:11:1237:1237	6990553	0					
ANR	6990851	ExpressionStatement	gconf -> server = g_strdup ( uri -> server )	99:8:1325:1362	6990553	0	True				
ANR	6990852	AssignmentExpression	gconf -> server = g_strdup ( uri -> server )		6990553	0		=			
ANR	6990853	PtrMemberAccess	gconf -> server		6990553	0					
ANR	6990854	Identifier	gconf		6990553	0					
ANR	6990855	Identifier	server		6990553	1					
ANR	6990856	CallExpression	g_strdup ( uri -> server )		6990553	1					
ANR	6990857	Callee	g_strdup		6990553	0					
ANR	6990858	Identifier	g_strdup		6990553	0					
ANR	6990859	ArgumentList	uri -> server		6990553	1					
ANR	6990860	Argument	uri -> server		6990553	0					
ANR	6990861	PtrMemberAccess	uri -> server		6990553	0					
ANR	6990862	Identifier	uri		6990553	0					
ANR	6990863	Identifier	server		6990553	1					
ANR	6990864	ExpressionStatement	gconf -> port = uri -> port	101:8:1373:1396	6990553	1	True				
ANR	6990865	AssignmentExpression	gconf -> port = uri -> port		6990553	0		=			
ANR	6990866	PtrMemberAccess	gconf -> port		6990553	0					
ANR	6990867	Identifier	gconf		6990553	0					
ANR	6990868	Identifier	port		6990553	1					
ANR	6990869	PtrMemberAccess	uri -> port		6990553	1					
ANR	6990870	Identifier	uri		6990553	0					
ANR	6990871	Identifier	port		6990553	1					
ANR	6990872	Label	out :	107:0:1408:1411	6990553	12	True				
ANR	6990873	Identifier	out		6990553	0					
ANR	6990874	IfStatement	if ( qp )		6990553	13					
ANR	6990875	Condition	qp	109:8:1422:1423	6990553	0	True				
ANR	6990876	Identifier	qp		6990553	0					
ANR	6990877	CompoundStatement		107:12:1349:1349	6990553	1					
ANR	6990878	ExpressionStatement	query_params_free ( qp )	111:8:1437:1458	6990553	0	True				
ANR	6990879	CallExpression	query_params_free ( qp )		6990553	0					
ANR	6990880	Callee	query_params_free		6990553	0					
ANR	6990881	Identifier	query_params_free		6990553	0					
ANR	6990882	ArgumentList	qp		6990553	1					
ANR	6990883	Argument	qp		6990553	0					
ANR	6990884	Identifier	qp		6990553	0					
ANR	6990885	ExpressionStatement	uri_free ( uri )	115:4:1472:1485	6990553	14	True				
ANR	6990886	CallExpression	uri_free ( uri )		6990553	0					
ANR	6990887	Callee	uri_free		6990553	0					
ANR	6990888	Identifier	uri_free		6990553	0					
ANR	6990889	ArgumentList	uri		6990553	1					
ANR	6990890	Argument	uri		6990553	0					
ANR	6990891	Identifier	uri		6990553	0					
ANR	6990892	ReturnStatement	return ret ;	117:4:1492:1502	6990553	15	True				
ANR	6990893	Identifier	ret		6990553	0					
ANR	6990894	ReturnType	static int		6990553	1					
ANR	6990895	Identifier	qemu_gluster_parseuri		6990553	2					
ANR	6990896	ParameterList	"GlusterConf * gconf , const char * filename"		6990553	3					
ANR	6990897	Parameter	GlusterConf * gconf	1:33:33:50	6990553	0	True				
ANR	6990898	ParameterType	GlusterConf *		6990553	0					
ANR	6990899	Identifier	gconf		6990553	1					
ANR	6990900	Parameter	const char * filename	1:53:53:72	6990553	1	True				
ANR	6990901	ParameterType	const char *		6990553	0					
ANR	6990902	Identifier	filename		6990553	1					
ANR	6990903	CFGEntryNode	ENTRY		6990553		True				
ANR	6990904	CFGExitNode	EXIT		6990553		True				
ANR	6990905	Symbol	* qp		6990553						
ANR	6990906	Symbol	* * qp		6990553						
ANR	6990907	Symbol	uri -> server		6990553						
ANR	6990908	Symbol	uri_parse		6990553						
ANR	6990909	Symbol	gconf		6990553						
ANR	6990910	Symbol	query_params_parse		6990553						
ANR	6990911	Symbol	qp -> p [ 0 ] . value		6990553						
ANR	6990912	Symbol	* uri		6990553						
ANR	6990913	Symbol	gconf -> transport		6990553						
ANR	6990914	Symbol	g_strdup		6990553						
ANR	6990915	Symbol	uri -> query		6990553						
ANR	6990916	Symbol	* qp -> p		6990553						
ANR	6990917	Symbol	qp		6990553						
ANR	6990918	Symbol	is_unix		6990553						
ANR	6990919	Symbol	ret		6990553						
ANR	6990920	Symbol	strcmp		6990553						
ANR	6990921	Symbol	NULL		6990553						
ANR	6990922	Symbol	gconf -> server		6990553						
ANR	6990923	Symbol	qp -> p [ 0 ] . name		6990553						
ANR	6990924	Symbol	false		6990553						
ANR	6990925	Symbol	uri		6990553						
ANR	6990926	Symbol	uri -> path		6990553						
ANR	6990927	Symbol	* gconf		6990553						
ANR	6990928	Symbol	EINVAL		6990553						
ANR	6990929	Symbol	uri -> port		6990553						
ANR	6990930	Symbol	uri -> scheme		6990553						
ANR	6990931	Symbol	filename		6990553						
ANR	6990932	Symbol	gconf -> port		6990553						
ANR	6990933	Symbol	qp -> p		6990553						
ANR	6990934	Symbol	qp -> n		6990553						
ANR	6990935	Symbol	true		6990553						
ANR	6990936	Symbol	parse_volume_options		6990553						
