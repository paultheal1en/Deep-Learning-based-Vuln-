command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6960651	File	/home/p4ultr4n/workplace/ReVeal/raw_code/qemu_chr_open_stdio_01_0.c								
ANR	6960652	Function	qemu_chr_open_stdio	1:0:0:2102							
ANR	6960653	FunctionDef	qemu_chr_open_stdio (ChardevStdio * opts)		6960652	0					
ANR	6960654	CompoundStatement		3:0:65:2102	6960652	0					
ANR	6960655	IdentifierDeclStatement	CharDriverState * chr ;	5:4:72:94	6960652	0	True				
ANR	6960656	IdentifierDecl	* chr		6960652	0					
ANR	6960657	IdentifierDeclType	CharDriverState *		6960652	0					
ANR	6960658	Identifier	chr		6960652	1					
ANR	6960659	IdentifierDeclStatement	WinStdioCharState * stdio ;	7:4:101:125	6960652	1	True				
ANR	6960660	IdentifierDecl	* stdio		6960652	0					
ANR	6960661	IdentifierDeclType	WinStdioCharState *		6960652	0					
ANR	6960662	Identifier	stdio		6960652	1					
ANR	6960663	IdentifierDeclStatement	DWORD dwMode ;	9:4:132:157	6960652	2	True				
ANR	6960664	IdentifierDecl	dwMode		6960652	0					
ANR	6960665	IdentifierDeclType	DWORD		6960652	0					
ANR	6960666	Identifier	dwMode		6960652	1					
ANR	6960667	IdentifierDeclStatement	int is_console = 0 ;	11:4:164:197	6960652	3	True				
ANR	6960668	IdentifierDecl	is_console = 0		6960652	0					
ANR	6960669	IdentifierDeclType	int		6960652	0					
ANR	6960670	Identifier	is_console		6960652	1					
ANR	6960671	AssignmentExpression	is_console = 0		6960652	2		=			
ANR	6960672	Identifier	is_console		6960652	0					
ANR	6960673	PrimaryExpression	0		6960652	1					
ANR	6960674	ExpressionStatement	chr = g_malloc0 ( sizeof ( CharDriverState ) )	15:4:206:248	6960652	4	True				
ANR	6960675	AssignmentExpression	chr = g_malloc0 ( sizeof ( CharDriverState ) )		6960652	0		=			
ANR	6960676	Identifier	chr		6960652	0					
ANR	6960677	CallExpression	g_malloc0 ( sizeof ( CharDriverState ) )		6960652	1					
ANR	6960678	Callee	g_malloc0		6960652	0					
ANR	6960679	Identifier	g_malloc0		6960652	0					
ANR	6960680	ArgumentList	sizeof ( CharDriverState )		6960652	1					
ANR	6960681	Argument	sizeof ( CharDriverState )		6960652	0					
ANR	6960682	SizeofExpression	sizeof ( CharDriverState )		6960652	0					
ANR	6960683	Sizeof	sizeof		6960652	0					
ANR	6960684	SizeofOperand	CharDriverState		6960652	1					
ANR	6960685	ExpressionStatement	stdio = g_malloc0 ( sizeof ( WinStdioCharState ) )	17:4:255:299	6960652	5	True				
ANR	6960686	AssignmentExpression	stdio = g_malloc0 ( sizeof ( WinStdioCharState ) )		6960652	0		=			
ANR	6960687	Identifier	stdio		6960652	0					
ANR	6960688	CallExpression	g_malloc0 ( sizeof ( WinStdioCharState ) )		6960652	1					
ANR	6960689	Callee	g_malloc0		6960652	0					
ANR	6960690	Identifier	g_malloc0		6960652	0					
ANR	6960691	ArgumentList	sizeof ( WinStdioCharState )		6960652	1					
ANR	6960692	Argument	sizeof ( WinStdioCharState )		6960652	0					
ANR	6960693	SizeofExpression	sizeof ( WinStdioCharState )		6960652	0					
ANR	6960694	Sizeof	sizeof		6960652	0					
ANR	6960695	SizeofOperand	WinStdioCharState		6960652	1					
ANR	6960696	ExpressionStatement	stdio -> hStdIn = GetStdHandle ( STD_INPUT_HANDLE )	21:4:308:354	6960652	6	True				
ANR	6960697	AssignmentExpression	stdio -> hStdIn = GetStdHandle ( STD_INPUT_HANDLE )		6960652	0		=			
ANR	6960698	PtrMemberAccess	stdio -> hStdIn		6960652	0					
ANR	6960699	Identifier	stdio		6960652	0					
ANR	6960700	Identifier	hStdIn		6960652	1					
ANR	6960701	CallExpression	GetStdHandle ( STD_INPUT_HANDLE )		6960652	1					
ANR	6960702	Callee	GetStdHandle		6960652	0					
ANR	6960703	Identifier	GetStdHandle		6960652	0					
ANR	6960704	ArgumentList	STD_INPUT_HANDLE		6960652	1					
ANR	6960705	Argument	STD_INPUT_HANDLE		6960652	0					
ANR	6960706	Identifier	STD_INPUT_HANDLE		6960652	0					
ANR	6960707	IfStatement	if ( stdio -> hStdIn == INVALID_HANDLE_VALUE )		6960652	7					
ANR	6960708	Condition	stdio -> hStdIn == INVALID_HANDLE_VALUE	23:8:365:401	6960652	0	True				
ANR	6960709	EqualityExpression	stdio -> hStdIn == INVALID_HANDLE_VALUE		6960652	0		==			
ANR	6960710	PtrMemberAccess	stdio -> hStdIn		6960652	0					
ANR	6960711	Identifier	stdio		6960652	0					
ANR	6960712	Identifier	hStdIn		6960652	1					
ANR	6960713	Identifier	INVALID_HANDLE_VALUE		6960652	1					
ANR	6960714	CompoundStatement		21:47:338:338	6960652	1					
ANR	6960715	ExpressionStatement	"fprintf ( stderr , ""cannot open stdio: invalid handle\\n"" )"	25:8:415:469	6960652	0	True				
ANR	6960716	CallExpression	"fprintf ( stderr , ""cannot open stdio: invalid handle\\n"" )"		6960652	0					
ANR	6960717	Callee	fprintf		6960652	0					
ANR	6960718	Identifier	fprintf		6960652	0					
ANR	6960719	ArgumentList	stderr		6960652	1					
ANR	6960720	Argument	stderr		6960652	0					
ANR	6960721	Identifier	stderr		6960652	0					
ANR	6960722	Argument	"""cannot open stdio: invalid handle\\n"""		6960652	1					
ANR	6960723	PrimaryExpression	"""cannot open stdio: invalid handle\\n"""		6960652	0					
ANR	6960724	ExpressionStatement	exit ( 1 )	27:8:480:487	6960652	1	True				
ANR	6960725	CallExpression	exit ( 1 )		6960652	0					
ANR	6960726	Callee	exit		6960652	0					
ANR	6960727	Identifier	exit		6960652	0					
ANR	6960728	ArgumentList	1		6960652	1					
ANR	6960729	Argument	1		6960652	0					
ANR	6960730	PrimaryExpression	1		6960652	0					
ANR	6960731	ExpressionStatement	"is_console = GetConsoleMode ( stdio -> hStdIn , & dwMode ) != 0"	33:4:503:559	6960652	8	True				
ANR	6960732	AssignmentExpression	"is_console = GetConsoleMode ( stdio -> hStdIn , & dwMode ) != 0"		6960652	0		=			
ANR	6960733	Identifier	is_console		6960652	0					
ANR	6960734	EqualityExpression	"GetConsoleMode ( stdio -> hStdIn , & dwMode ) != 0"		6960652	1		!=			
ANR	6960735	CallExpression	"GetConsoleMode ( stdio -> hStdIn , & dwMode )"		6960652	0					
ANR	6960736	Callee	GetConsoleMode		6960652	0					
ANR	6960737	Identifier	GetConsoleMode		6960652	0					
ANR	6960738	ArgumentList	stdio -> hStdIn		6960652	1					
ANR	6960739	Argument	stdio -> hStdIn		6960652	0					
ANR	6960740	PtrMemberAccess	stdio -> hStdIn		6960652	0					
ANR	6960741	Identifier	stdio		6960652	0					
ANR	6960742	Identifier	hStdIn		6960652	1					
ANR	6960743	Argument	& dwMode		6960652	1					
ANR	6960744	UnaryOperationExpression	& dwMode		6960652	0					
ANR	6960745	UnaryOperator	&		6960652	0					
ANR	6960746	Identifier	dwMode		6960652	1					
ANR	6960747	PrimaryExpression	0		6960652	1					
ANR	6960748	ExpressionStatement	chr -> opaque = stdio	37:4:568:590	6960652	9	True				
ANR	6960749	AssignmentExpression	chr -> opaque = stdio		6960652	0		=			
ANR	6960750	PtrMemberAccess	chr -> opaque		6960652	0					
ANR	6960751	Identifier	chr		6960652	0					
ANR	6960752	Identifier	opaque		6960652	1					
ANR	6960753	Identifier	stdio		6960652	1					
ANR	6960754	ExpressionStatement	chr -> chr_write = win_stdio_write	39:4:597:629	6960652	10	True				
ANR	6960755	AssignmentExpression	chr -> chr_write = win_stdio_write		6960652	0		=			
ANR	6960756	PtrMemberAccess	chr -> chr_write		6960652	0					
ANR	6960757	Identifier	chr		6960652	0					
ANR	6960758	Identifier	chr_write		6960652	1					
ANR	6960759	Identifier	win_stdio_write		6960652	1					
ANR	6960760	ExpressionStatement	chr -> chr_close = win_stdio_close	41:4:636:668	6960652	11	True				
ANR	6960761	AssignmentExpression	chr -> chr_close = win_stdio_close		6960652	0		=			
ANR	6960762	PtrMemberAccess	chr -> chr_close		6960652	0					
ANR	6960763	Identifier	chr		6960652	0					
ANR	6960764	Identifier	chr_close		6960652	1					
ANR	6960765	Identifier	win_stdio_close		6960652	1					
ANR	6960766	IfStatement	if ( is_console )		6960652	12					
ANR	6960767	Condition	is_console	45:8:681:690	6960652	0	True				
ANR	6960768	Identifier	is_console		6960652	0					
ANR	6960769	CompoundStatement		43:20:627:627	6960652	1					
ANR	6960770	IfStatement	"if ( qemu_add_wait_object ( stdio -> hStdIn , win_stdio_wait_func , chr ) )"		6960652	0					
ANR	6960771	Condition	"qemu_add_wait_object ( stdio -> hStdIn , win_stdio_wait_func , chr )"	47:12:708:802	6960652	0	True				
ANR	6960772	CallExpression	"qemu_add_wait_object ( stdio -> hStdIn , win_stdio_wait_func , chr )"		6960652	0					
ANR	6960773	Callee	qemu_add_wait_object		6960652	0					
ANR	6960774	Identifier	qemu_add_wait_object		6960652	0					
ANR	6960775	ArgumentList	stdio -> hStdIn		6960652	1					
ANR	6960776	Argument	stdio -> hStdIn		6960652	0					
ANR	6960777	PtrMemberAccess	stdio -> hStdIn		6960652	0					
ANR	6960778	Identifier	stdio		6960652	0					
ANR	6960779	Identifier	hStdIn		6960652	1					
ANR	6960780	Argument	win_stdio_wait_func		6960652	1					
ANR	6960781	Identifier	win_stdio_wait_func		6960652	0					
ANR	6960782	Argument	chr		6960652	2					
ANR	6960783	Identifier	chr		6960652	0					
ANR	6960784	CompoundStatement		47:60:739:739	6960652	1					
ANR	6960785	ExpressionStatement	"fprintf ( stderr , ""qemu_add_wait_object: failed\\n"" )"	51:12:820:869	6960652	0	True				
ANR	6960786	CallExpression	"fprintf ( stderr , ""qemu_add_wait_object: failed\\n"" )"		6960652	0					
ANR	6960787	Callee	fprintf		6960652	0					
ANR	6960788	Identifier	fprintf		6960652	0					
ANR	6960789	ArgumentList	stderr		6960652	1					
ANR	6960790	Argument	stderr		6960652	0					
ANR	6960791	Identifier	stderr		6960652	0					
ANR	6960792	Argument	"""qemu_add_wait_object: failed\\n"""		6960652	1					
ANR	6960793	PrimaryExpression	"""qemu_add_wait_object: failed\\n"""		6960652	0					
ANR	6960794	ElseStatement	else		6960652	0					
ANR	6960795	CompoundStatement		55:8:839:851	6960652	0					
ANR	6960796	IdentifierDeclStatement	DWORD dwId ;	57:8:905:917	6960652	0	True				
ANR	6960797	IdentifierDecl	dwId		6960652	0					
ANR	6960798	IdentifierDeclType	DWORD		6960652	0					
ANR	6960799	Identifier	dwId		6960652	1					
ANR	6960800	ExpressionStatement	"stdio -> hInputReadyEvent = CreateEvent ( NULL , FALSE , FALSE , NULL )"	61:8:942:1005	6960652	1	True				
ANR	6960801	AssignmentExpression	"stdio -> hInputReadyEvent = CreateEvent ( NULL , FALSE , FALSE , NULL )"		6960652	0		=			
ANR	6960802	PtrMemberAccess	stdio -> hInputReadyEvent		6960652	0					
ANR	6960803	Identifier	stdio		6960652	0					
ANR	6960804	Identifier	hInputReadyEvent		6960652	1					
ANR	6960805	CallExpression	"CreateEvent ( NULL , FALSE , FALSE , NULL )"		6960652	1					
ANR	6960806	Callee	CreateEvent		6960652	0					
ANR	6960807	Identifier	CreateEvent		6960652	0					
ANR	6960808	ArgumentList	NULL		6960652	1					
ANR	6960809	Argument	NULL		6960652	0					
ANR	6960810	Identifier	NULL		6960652	0					
ANR	6960811	Argument	FALSE		6960652	1					
ANR	6960812	Identifier	FALSE		6960652	0					
ANR	6960813	Argument	FALSE		6960652	2					
ANR	6960814	Identifier	FALSE		6960652	0					
ANR	6960815	Argument	NULL		6960652	3					
ANR	6960816	Identifier	NULL		6960652	0					
ANR	6960817	ExpressionStatement	"stdio -> hInputDoneEvent = CreateEvent ( NULL , FALSE , FALSE , NULL )"	63:8:1016:1079	6960652	2	True				
ANR	6960818	AssignmentExpression	"stdio -> hInputDoneEvent = CreateEvent ( NULL , FALSE , FALSE , NULL )"		6960652	0		=			
ANR	6960819	PtrMemberAccess	stdio -> hInputDoneEvent		6960652	0					
ANR	6960820	Identifier	stdio		6960652	0					
ANR	6960821	Identifier	hInputDoneEvent		6960652	1					
ANR	6960822	CallExpression	"CreateEvent ( NULL , FALSE , FALSE , NULL )"		6960652	1					
ANR	6960823	Callee	CreateEvent		6960652	0					
ANR	6960824	Identifier	CreateEvent		6960652	0					
ANR	6960825	ArgumentList	NULL		6960652	1					
ANR	6960826	Argument	NULL		6960652	0					
ANR	6960827	Identifier	NULL		6960652	0					
ANR	6960828	Argument	FALSE		6960652	1					
ANR	6960829	Identifier	FALSE		6960652	0					
ANR	6960830	Argument	FALSE		6960652	2					
ANR	6960831	Identifier	FALSE		6960652	0					
ANR	6960832	Argument	NULL		6960652	3					
ANR	6960833	Identifier	NULL		6960652	0					
ANR	6960834	ExpressionStatement	"stdio -> hInputThread = CreateThread ( NULL , 0 , win_stdio_thread , chr , 0 , & dwId )"	65:8:1090:1218	6960652	3	True				
ANR	6960835	AssignmentExpression	"stdio -> hInputThread = CreateThread ( NULL , 0 , win_stdio_thread , chr , 0 , & dwId )"		6960652	0		=			
ANR	6960836	PtrMemberAccess	stdio -> hInputThread		6960652	0					
ANR	6960837	Identifier	stdio		6960652	0					
ANR	6960838	Identifier	hInputThread		6960652	1					
ANR	6960839	CallExpression	"CreateThread ( NULL , 0 , win_stdio_thread , chr , 0 , & dwId )"		6960652	1					
ANR	6960840	Callee	CreateThread		6960652	0					
ANR	6960841	Identifier	CreateThread		6960652	0					
ANR	6960842	ArgumentList	NULL		6960652	1					
ANR	6960843	Argument	NULL		6960652	0					
ANR	6960844	Identifier	NULL		6960652	0					
ANR	6960845	Argument	0		6960652	1					
ANR	6960846	PrimaryExpression	0		6960652	0					
ANR	6960847	Argument	win_stdio_thread		6960652	2					
ANR	6960848	Identifier	win_stdio_thread		6960652	0					
ANR	6960849	Argument	chr		6960652	3					
ANR	6960850	Identifier	chr		6960652	0					
ANR	6960851	Argument	0		6960652	4					
ANR	6960852	PrimaryExpression	0		6960652	0					
ANR	6960853	Argument	& dwId		6960652	5					
ANR	6960854	UnaryOperationExpression	& dwId		6960652	0					
ANR	6960855	UnaryOperator	&		6960652	0					
ANR	6960856	Identifier	dwId		6960652	1					
ANR	6960857	IfStatement	if ( stdio -> hInputThread == INVALID_HANDLE_VALUE || stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE || stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE )		6960652	4					
ANR	6960858	Condition	stdio -> hInputThread == INVALID_HANDLE_VALUE || stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE || stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE	71:12:1235:1404	6960652	0	True				
ANR	6960859	OrExpression	stdio -> hInputThread == INVALID_HANDLE_VALUE || stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE || stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE		6960652	0		||			
ANR	6960860	EqualityExpression	stdio -> hInputThread == INVALID_HANDLE_VALUE		6960652	0		==			
ANR	6960861	PtrMemberAccess	stdio -> hInputThread		6960652	0					
ANR	6960862	Identifier	stdio		6960652	0					
ANR	6960863	Identifier	hInputThread		6960652	1					
ANR	6960864	Identifier	INVALID_HANDLE_VALUE		6960652	1					
ANR	6960865	OrExpression	stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE || stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE		6960652	1		||			
ANR	6960866	EqualityExpression	stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE		6960652	0		==			
ANR	6960867	PtrMemberAccess	stdio -> hInputReadyEvent		6960652	0					
ANR	6960868	Identifier	stdio		6960652	0					
ANR	6960869	Identifier	hInputReadyEvent		6960652	1					
ANR	6960870	Identifier	INVALID_HANDLE_VALUE		6960652	1					
ANR	6960871	EqualityExpression	stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE		6960652	1		==			
ANR	6960872	PtrMemberAccess	stdio -> hInputDoneEvent		6960652	0					
ANR	6960873	Identifier	stdio		6960652	0					
ANR	6960874	Identifier	hInputDoneEvent		6960652	1					
ANR	6960875	Identifier	INVALID_HANDLE_VALUE		6960652	1					
ANR	6960876	CompoundStatement		73:63:1341:1341	6960652	1					
ANR	6960877	ExpressionStatement	"fprintf ( stderr , ""cannot create stdio thread or event\\n"" )"	77:12:1422:1478	6960652	0	True				
ANR	6960878	CallExpression	"fprintf ( stderr , ""cannot create stdio thread or event\\n"" )"		6960652	0					
ANR	6960879	Callee	fprintf		6960652	0					
ANR	6960880	Identifier	fprintf		6960652	0					
ANR	6960881	ArgumentList	stderr		6960652	1					
ANR	6960882	Argument	stderr		6960652	0					
ANR	6960883	Identifier	stderr		6960652	0					
ANR	6960884	Argument	"""cannot create stdio thread or event\\n"""		6960652	1					
ANR	6960885	PrimaryExpression	"""cannot create stdio thread or event\\n"""		6960652	0					
ANR	6960886	ExpressionStatement	exit ( 1 )	79:12:1493:1500	6960652	1	True				
ANR	6960887	CallExpression	exit ( 1 )		6960652	0					
ANR	6960888	Callee	exit		6960652	0					
ANR	6960889	Identifier	exit		6960652	0					
ANR	6960890	ArgumentList	1		6960652	1					
ANR	6960891	Argument	1		6960652	0					
ANR	6960892	PrimaryExpression	1		6960652	0					
ANR	6960893	IfStatement	"if ( qemu_add_wait_object ( stdio -> hInputReadyEvent , win_stdio_thread_wait_func , chr ) )"		6960652	5					
ANR	6960894	Condition	"qemu_add_wait_object ( stdio -> hInputReadyEvent , win_stdio_thread_wait_func , chr )"	83:12:1526:1637	6960652	0	True				
ANR	6960895	CallExpression	"qemu_add_wait_object ( stdio -> hInputReadyEvent , win_stdio_thread_wait_func , chr )"		6960652	0					
ANR	6960896	Callee	qemu_add_wait_object		6960652	0					
ANR	6960897	Identifier	qemu_add_wait_object		6960652	0					
ANR	6960898	ArgumentList	stdio -> hInputReadyEvent		6960652	1					
ANR	6960899	Argument	stdio -> hInputReadyEvent		6960652	0					
ANR	6960900	PtrMemberAccess	stdio -> hInputReadyEvent		6960652	0					
ANR	6960901	Identifier	stdio		6960652	0					
ANR	6960902	Identifier	hInputReadyEvent		6960652	1					
ANR	6960903	Argument	win_stdio_thread_wait_func		6960652	1					
ANR	6960904	Identifier	win_stdio_thread_wait_func		6960652	0					
ANR	6960905	Argument	chr		6960652	2					
ANR	6960906	Identifier	chr		6960652	0					
ANR	6960907	CompoundStatement		83:67:1574:1574	6960652	1					
ANR	6960908	ExpressionStatement	"fprintf ( stderr , ""qemu_add_wait_object: failed\\n"" )"	87:12:1655:1704	6960652	0	True				
ANR	6960909	CallExpression	"fprintf ( stderr , ""qemu_add_wait_object: failed\\n"" )"		6960652	0					
ANR	6960910	Callee	fprintf		6960652	0					
ANR	6960911	Identifier	fprintf		6960652	0					
ANR	6960912	ArgumentList	stderr		6960652	1					
ANR	6960913	Argument	stderr		6960652	0					
ANR	6960914	Identifier	stderr		6960652	0					
ANR	6960915	Argument	"""qemu_add_wait_object: failed\\n"""		6960652	1					
ANR	6960916	PrimaryExpression	"""qemu_add_wait_object: failed\\n"""		6960652	0					
ANR	6960917	ExpressionStatement	dwMode |= ENABLE_LINE_INPUT	95:4:1731:1758	6960652	13	True				
ANR	6960918	AssignmentExpression	dwMode |= ENABLE_LINE_INPUT		6960652	0		|=			
ANR	6960919	Identifier	dwMode		6960652	0					
ANR	6960920	Identifier	ENABLE_LINE_INPUT		6960652	1					
ANR	6960921	IfStatement	if ( is_console )		6960652	14					
ANR	6960922	Condition	is_console	99:8:1771:1780	6960652	0	True				
ANR	6960923	Identifier	is_console		6960652	0					
ANR	6960924	CompoundStatement		97:20:1717:1717	6960652	1					
ANR	6960925	ExpressionStatement	dwMode |= ENABLE_PROCESSED_INPUT	105:8:1900:1932	6960652	0	True				
ANR	6960926	AssignmentExpression	dwMode |= ENABLE_PROCESSED_INPUT		6960652	0		|=			
ANR	6960927	Identifier	dwMode		6960652	0					
ANR	6960928	Identifier	ENABLE_PROCESSED_INPUT		6960652	1					
ANR	6960929	ExpressionStatement	"SetConsoleMode ( stdio -> hStdIn , dwMode )"	111:4:1948:1985	6960652	15	True				
ANR	6960930	CallExpression	"SetConsoleMode ( stdio -> hStdIn , dwMode )"		6960652	0					
ANR	6960931	Callee	SetConsoleMode		6960652	0					
ANR	6960932	Identifier	SetConsoleMode		6960652	0					
ANR	6960933	ArgumentList	stdio -> hStdIn		6960652	1					
ANR	6960934	Argument	stdio -> hStdIn		6960652	0					
ANR	6960935	PtrMemberAccess	stdio -> hStdIn		6960652	0					
ANR	6960936	Identifier	stdio		6960652	0					
ANR	6960937	Identifier	hStdIn		6960652	1					
ANR	6960938	Argument	dwMode		6960652	1					
ANR	6960939	Identifier	dwMode		6960652	0					
ANR	6960940	ExpressionStatement	chr -> chr_set_echo = qemu_chr_set_echo_win_stdio	115:4:1994:2041	6960652	16	True				
ANR	6960941	AssignmentExpression	chr -> chr_set_echo = qemu_chr_set_echo_win_stdio		6960652	0		=			
ANR	6960942	PtrMemberAccess	chr -> chr_set_echo		6960652	0					
ANR	6960943	Identifier	chr		6960652	0					
ANR	6960944	Identifier	chr_set_echo		6960652	1					
ANR	6960945	Identifier	qemu_chr_set_echo_win_stdio		6960652	1					
ANR	6960946	ExpressionStatement	"qemu_chr_fe_set_echo ( chr , false )"	117:4:2048:2080	6960652	17	True				
ANR	6960947	CallExpression	"qemu_chr_fe_set_echo ( chr , false )"		6960652	0					
ANR	6960948	Callee	qemu_chr_fe_set_echo		6960652	0					
ANR	6960949	Identifier	qemu_chr_fe_set_echo		6960652	0					
ANR	6960950	ArgumentList	chr		6960652	1					
ANR	6960951	Argument	chr		6960652	0					
ANR	6960952	Identifier	chr		6960652	0					
ANR	6960953	Argument	false		6960652	1					
ANR	6960954	Identifier	false		6960652	0					
ANR	6960955	ReturnStatement	return chr ;	121:4:2089:2099	6960652	18	True				
ANR	6960956	Identifier	chr		6960652	0					
ANR	6960957	ReturnType	static CharDriverState *		6960652	1					
ANR	6960958	Identifier	qemu_chr_open_stdio		6960652	2					
ANR	6960959	ParameterList	ChardevStdio * opts		6960652	3					
ANR	6960960	Parameter	ChardevStdio * opts	1:44:44:61	6960652	0	True				
ANR	6960961	ParameterType	ChardevStdio *		6960652	0					
ANR	6960962	Identifier	opts		6960652	1					
ANR	6960963	CFGEntryNode	ENTRY		6960652		True				
ANR	6960964	CFGExitNode	EXIT		6960652		True				
ANR	6960965	Symbol	dwMode		6960652						
ANR	6960966	Symbol	GetStdHandle		6960652						
ANR	6960967	Symbol	win_stdio_close		6960652						
ANR	6960968	Symbol	& dwId		6960652						
ANR	6960969	Symbol	stdio		6960652						
ANR	6960970	Symbol	chr -> opaque		6960652						
ANR	6960971	Symbol	GetConsoleMode		6960652						
ANR	6960972	Symbol	CreateEvent		6960652						
ANR	6960973	Symbol	qemu_chr_set_echo_win_stdio		6960652						
ANR	6960974	Symbol	stdio -> hStdIn		6960652						
ANR	6960975	Symbol	opts		6960652						
ANR	6960976	Symbol	& dwMode		6960652						
ANR	6960977	Symbol	win_stdio_thread		6960652						
ANR	6960978	Symbol	ENABLE_LINE_INPUT		6960652						
ANR	6960979	Symbol	is_console		6960652						
ANR	6960980	Symbol	dwId		6960652						
ANR	6960981	Symbol	win_stdio_thread_wait_func		6960652						
ANR	6960982	Symbol	chr -> chr_write		6960652						
ANR	6960983	Symbol	NULL		6960652						
ANR	6960984	Symbol	STD_INPUT_HANDLE		6960652						
ANR	6960985	Symbol	CreateThread		6960652						
ANR	6960986	Symbol	* chr		6960652						
ANR	6960987	Symbol	false		6960652						
ANR	6960988	Symbol	stdio -> hInputReadyEvent		6960652						
ANR	6960989	Symbol	chr		6960652						
ANR	6960990	Symbol	stderr		6960652						
ANR	6960991	Symbol	INVALID_HANDLE_VALUE		6960652						
ANR	6960992	Symbol	stdio -> hInputDoneEvent		6960652						
ANR	6960993	Symbol	win_stdio_wait_func		6960652						
ANR	6960994	Symbol	chr -> chr_set_echo		6960652						
ANR	6960995	Symbol	ENABLE_PROCESSED_INPUT		6960652						
ANR	6960996	Symbol	* stdio		6960652						
ANR	6960997	Symbol	g_malloc0		6960652						
ANR	6960998	Symbol	FALSE		6960652						
ANR	6960999	Symbol	stdio -> hInputThread		6960652						
ANR	6961000	Symbol	win_stdio_write		6960652						
ANR	6961001	Symbol	chr -> chr_close		6960652						
ANR	6961002	Symbol	qemu_add_wait_object		6960652						
