command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6166615	File	/home/p4ultr4n/workplace/ReVeal/raw_code/omap_mcbsp_sink_tick_0.c								
ANR	6166616	Function	omap_mcbsp_sink_tick	1:0:0:504							
ANR	6166617	FunctionDef	omap_mcbsp_sink_tick (void * opaque)		6166616	0					
ANR	6166618	CompoundStatement		3:0:48:504	6166616	0					
ANR	6166619	IdentifierDeclStatement	struct omap_mcbsp_s * s = ( struct omap_mcbsp_s * ) opaque ;	5:4:55:110	6166616	0	True				
ANR	6166620	IdentifierDecl	* s = ( struct omap_mcbsp_s * ) opaque		6166616	0					
ANR	6166621	IdentifierDeclType	struct omap_mcbsp_s *		6166616	0					
ANR	6166622	Identifier	s		6166616	1					
ANR	6166623	AssignmentExpression	* s = ( struct omap_mcbsp_s * ) opaque		6166616	2		=			
ANR	6166624	Identifier	s		6166616	0					
ANR	6166625	CastExpression	( struct omap_mcbsp_s * ) opaque		6166616	1					
ANR	6166626	CastTarget	struct omap_mcbsp_s *		6166616	0					
ANR	6166627	Identifier	opaque		6166616	1					
ANR	6166628	Statement	static	7:4:117:122	6166616	1	True				
ANR	6166629	IdentifierDeclStatement	"const int bps [ 8 ] = { 0 , 1 , 1 , 2 , 2 , 2 , - 255 , - 255 } ;"	7:11:124:175	6166616	2	True				
ANR	6166630	IdentifierDecl	"bps [ 8 ] = { 0 , 1 , 1 , 2 , 2 , 2 , - 255 , - 255 }"		6166616	0					
ANR	6166631	IdentifierDeclType	const int [ 8 ]		6166616	0					
ANR	6166632	Identifier	bps		6166616	1					
ANR	6166633	PrimaryExpression	8		6166616	2					
ANR	6166634	AssignmentExpression	"bps [ 8 ] = { 0 , 1 , 1 , 2 , 2 , 2 , - 255 , - 255 }"		6166616	3		=			
ANR	6166635	Identifier	bps		6166616	0					
ANR	6166636	InitializerList	0		6166616	1					
ANR	6166637	PrimaryExpression	0		6166616	0					
ANR	6166638	PrimaryExpression	1		6166616	1					
ANR	6166639	PrimaryExpression	1		6166616	2					
ANR	6166640	PrimaryExpression	2		6166616	3					
ANR	6166641	PrimaryExpression	2		6166616	4					
ANR	6166642	PrimaryExpression	2		6166616	5					
ANR	6166643	UnaryOperationExpression	- 255		6166616	6					
ANR	6166644	UnaryOperator	-		6166616	0					
ANR	6166645	PrimaryExpression	255		6166616	1					
ANR	6166646	UnaryOperationExpression	- 255		6166616	7					
ANR	6166647	UnaryOperator	-		6166616	0					
ANR	6166648	PrimaryExpression	255		6166616	1					
ANR	6166649	IfStatement	if ( ! s -> tx_rate )		6166616	3					
ANR	6166650	Condition	! s -> tx_rate	11:8:188:198	6166616	0	True				
ANR	6166651	UnaryOperationExpression	! s -> tx_rate		6166616	0					
ANR	6166652	UnaryOperator	!		6166616	0					
ANR	6166653	PtrMemberAccess	s -> tx_rate		6166616	1					
ANR	6166654	Identifier	s		6166616	0					
ANR	6166655	Identifier	tx_rate		6166616	1					
ANR	6166656	ReturnStatement	return ;	13:8:210:216	6166616	1	True				
ANR	6166657	IfStatement	if ( s -> tx_req )		6166616	4					
ANR	6166658	Condition	s -> tx_req	15:8:227:235	6166616	0	True				
ANR	6166659	PtrMemberAccess	s -> tx_req		6166616	0					
ANR	6166660	Identifier	s		6166616	0					
ANR	6166661	Identifier	tx_req		6166616	1					
ANR	6166662	ExpressionStatement	"printf ( ""%s: Tx FIFO underrun\\n"" , __FUNCTION__ )"	17:8:247:293	6166616	1	True				
ANR	6166663	CallExpression	"printf ( ""%s: Tx FIFO underrun\\n"" , __FUNCTION__ )"		6166616	0					
ANR	6166664	Callee	printf		6166616	0					
ANR	6166665	Identifier	printf		6166616	0					
ANR	6166666	ArgumentList	"""%s: Tx FIFO underrun\\n"""		6166616	1					
ANR	6166667	Argument	"""%s: Tx FIFO underrun\\n"""		6166616	0					
ANR	6166668	PrimaryExpression	"""%s: Tx FIFO underrun\\n"""		6166616	0					
ANR	6166669	Argument	__FUNCTION__		6166616	1					
ANR	6166670	Identifier	__FUNCTION__		6166616	0					
ANR	6166671	ExpressionStatement	s -> tx_req = s -> tx_rate << bps [ ( s -> xcr [ 0 ] >> 5 ) & 7 ]	21:4:302:353	6166616	5	True				
ANR	6166672	AssignmentExpression	s -> tx_req = s -> tx_rate << bps [ ( s -> xcr [ 0 ] >> 5 ) & 7 ]		6166616	0		=			
ANR	6166673	PtrMemberAccess	s -> tx_req		6166616	0					
ANR	6166674	Identifier	s		6166616	0					
ANR	6166675	Identifier	tx_req		6166616	1					
ANR	6166676	ShiftExpression	s -> tx_rate << bps [ ( s -> xcr [ 0 ] >> 5 ) & 7 ]		6166616	1		<<			
ANR	6166677	PtrMemberAccess	s -> tx_rate		6166616	0					
ANR	6166678	Identifier	s		6166616	0					
ANR	6166679	Identifier	tx_rate		6166616	1					
ANR	6166680	ArrayIndexing	bps [ ( s -> xcr [ 0 ] >> 5 ) & 7 ]		6166616	1					
ANR	6166681	Identifier	bps		6166616	0					
ANR	6166682	BitAndExpression	( s -> xcr [ 0 ] >> 5 ) & 7		6166616	1		&			
ANR	6166683	ShiftExpression	s -> xcr [ 0 ] >> 5		6166616	0		>>			
ANR	6166684	ArrayIndexing	s -> xcr [ 0 ]		6166616	0					
ANR	6166685	PtrMemberAccess	s -> xcr		6166616	0					
ANR	6166686	Identifier	s		6166616	0					
ANR	6166687	Identifier	xcr		6166616	1					
ANR	6166688	PrimaryExpression	0		6166616	1					
ANR	6166689	PrimaryExpression	5		6166616	1					
ANR	6166690	PrimaryExpression	7		6166616	1					
ANR	6166691	ExpressionStatement	omap_mcbsp_tx_newdata ( s )	25:4:362:386	6166616	6	True				
ANR	6166692	CallExpression	omap_mcbsp_tx_newdata ( s )		6166616	0					
ANR	6166693	Callee	omap_mcbsp_tx_newdata		6166616	0					
ANR	6166694	Identifier	omap_mcbsp_tx_newdata		6166616	0					
ANR	6166695	ArgumentList	s		6166616	1					
ANR	6166696	Argument	s		6166616	0					
ANR	6166697	Identifier	s		6166616	0					
ANR	6166698	ExpressionStatement	"timer_mod ( s -> sink_timer , qemu_clock_get_ns ( QEMU_CLOCK_VIRTUAL ) + NANOSECONDS_PER_SECOND )"	27:4:393:501	6166616	7	True				
ANR	6166699	CallExpression	"timer_mod ( s -> sink_timer , qemu_clock_get_ns ( QEMU_CLOCK_VIRTUAL ) + NANOSECONDS_PER_SECOND )"		6166616	0					
ANR	6166700	Callee	timer_mod		6166616	0					
ANR	6166701	Identifier	timer_mod		6166616	0					
ANR	6166702	ArgumentList	s -> sink_timer		6166616	1					
ANR	6166703	Argument	s -> sink_timer		6166616	0					
ANR	6166704	PtrMemberAccess	s -> sink_timer		6166616	0					
ANR	6166705	Identifier	s		6166616	0					
ANR	6166706	Identifier	sink_timer		6166616	1					
ANR	6166707	Argument	qemu_clock_get_ns ( QEMU_CLOCK_VIRTUAL ) + NANOSECONDS_PER_SECOND		6166616	1					
ANR	6166708	AdditiveExpression	qemu_clock_get_ns ( QEMU_CLOCK_VIRTUAL ) + NANOSECONDS_PER_SECOND		6166616	0		+			
ANR	6166709	CallExpression	qemu_clock_get_ns ( QEMU_CLOCK_VIRTUAL )		6166616	0					
ANR	6166710	Callee	qemu_clock_get_ns		6166616	0					
ANR	6166711	Identifier	qemu_clock_get_ns		6166616	0					
ANR	6166712	ArgumentList	QEMU_CLOCK_VIRTUAL		6166616	1					
ANR	6166713	Argument	QEMU_CLOCK_VIRTUAL		6166616	0					
ANR	6166714	Identifier	QEMU_CLOCK_VIRTUAL		6166616	0					
ANR	6166715	Identifier	NANOSECONDS_PER_SECOND		6166616	1					
ANR	6166716	ReturnType	static void		6166616	1					
ANR	6166717	Identifier	omap_mcbsp_sink_tick		6166616	2					
ANR	6166718	ParameterList	void * opaque		6166616	3					
ANR	6166719	Parameter	void * opaque	1:33:33:44	6166616	0	True				
ANR	6166720	ParameterType	void *		6166616	0					
ANR	6166721	Identifier	opaque		6166616	1					
ANR	6166722	CFGEntryNode	ENTRY		6166616		True				
ANR	6166723	CFGExitNode	EXIT		6166616		True				
ANR	6166724	Symbol	opaque		6166616						
ANR	6166725	Symbol	bps		6166616						
ANR	6166726	Symbol	NANOSECONDS_PER_SECOND		6166616						
ANR	6166727	Symbol	qemu_clock_get_ns		6166616						
ANR	6166728	Symbol	QEMU_CLOCK_VIRTUAL		6166616						
ANR	6166729	Symbol	__FUNCTION__		6166616						
ANR	6166730	Symbol	* * * s		6166616						
ANR	6166731	Symbol	* bps		6166616						
ANR	6166732	Symbol	s -> sink_timer		6166616						
ANR	6166733	Symbol	s		6166616						
ANR	6166734	Symbol	s -> tx_rate		6166616						
ANR	6166735	Symbol	* s -> xcr		6166616						
ANR	6166736	Symbol	s -> xcr		6166616						
ANR	6166737	Symbol	* * s		6166616						
ANR	6166738	Symbol	s -> tx_req		6166616						
ANR	6166739	Symbol	* * s -> xcr		6166616						
ANR	6166740	Symbol	* s		6166616						
