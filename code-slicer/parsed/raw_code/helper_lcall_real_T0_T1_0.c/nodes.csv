command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4616593	File	/home/p4ultr4n/workplace/ReVeal/raw_code/helper_lcall_real_T0_T1_0.c								
ANR	4616594	Function	helper_lcall_real_T0_T1	1:0:0:965							
ANR	4616595	FunctionDef	"helper_lcall_real_T0_T1 (int shift , int next_eip)"		4616594	0					
ANR	4616596	CompoundStatement		3:0:55:965	4616594	0					
ANR	4616597	IdentifierDeclStatement	"int new_cs , new_eip ;"	5:4:62:81	4616594	0	True				
ANR	4616598	IdentifierDecl	new_cs		4616594	0					
ANR	4616599	IdentifierDeclType	int		4616594	0					
ANR	4616600	Identifier	new_cs		4616594	1					
ANR	4616601	IdentifierDecl	new_eip		4616594	1					
ANR	4616602	IdentifierDeclType	int		4616594	0					
ANR	4616603	Identifier	new_eip		4616594	1					
ANR	4616604	IdentifierDeclStatement	"uint32_t esp , esp_mask ;"	7:4:88:110	4616594	1	True				
ANR	4616605	IdentifierDecl	esp		4616594	0					
ANR	4616606	IdentifierDeclType	uint32_t		4616594	0					
ANR	4616607	Identifier	esp		4616594	1					
ANR	4616608	IdentifierDecl	esp_mask		4616594	1					
ANR	4616609	IdentifierDeclType	uint32_t		4616594	0					
ANR	4616610	Identifier	esp_mask		4616594	1					
ANR	4616611	IdentifierDeclStatement	uint8_t * ssp ;	9:4:117:129	4616594	2	True				
ANR	4616612	IdentifierDecl	* ssp		4616594	0					
ANR	4616613	IdentifierDeclType	uint8_t *		4616594	0					
ANR	4616614	Identifier	ssp		4616594	1					
ANR	4616615	ExpressionStatement	new_cs = T0	13:4:138:149	4616594	3	True				
ANR	4616616	AssignmentExpression	new_cs = T0		4616594	0		=			
ANR	4616617	Identifier	new_cs		4616594	0					
ANR	4616618	Identifier	T0		4616594	1					
ANR	4616619	ExpressionStatement	new_eip = T1	15:4:156:168	4616594	4	True				
ANR	4616620	AssignmentExpression	new_eip = T1		4616594	0		=			
ANR	4616621	Identifier	new_eip		4616594	0					
ANR	4616622	Identifier	T1		4616594	1					
ANR	4616623	ExpressionStatement	esp = env -> regs [ R_ESP ]	17:4:175:197	4616594	5	True				
ANR	4616624	AssignmentExpression	esp = env -> regs [ R_ESP ]		4616594	0		=			
ANR	4616625	Identifier	esp		4616594	0					
ANR	4616626	ArrayIndexing	env -> regs [ R_ESP ]		4616594	1					
ANR	4616627	PtrMemberAccess	env -> regs		4616594	0					
ANR	4616628	Identifier	env		4616594	0					
ANR	4616629	Identifier	regs		4616594	1					
ANR	4616630	Identifier	R_ESP		4616594	1					
ANR	4616631	ExpressionStatement	esp_mask = 0xffffffff	19:4:204:225	4616594	6	True				
ANR	4616632	AssignmentExpression	esp_mask = 0xffffffff		4616594	0		=			
ANR	4616633	Identifier	esp_mask		4616594	0					
ANR	4616634	PrimaryExpression	0xffffffff		4616594	1					
ANR	4616635	IfStatement	if ( ! ( env -> segs [ R_SS ] . flags & DESC_B_MASK ) )		4616594	7					
ANR	4616636	Condition	! ( env -> segs [ R_SS ] . flags & DESC_B_MASK )	21:8:236:273	4616594	0	True				
ANR	4616637	UnaryOperationExpression	! ( env -> segs [ R_SS ] . flags & DESC_B_MASK )		4616594	0					
ANR	4616638	UnaryOperator	!		4616594	0					
ANR	4616639	BitAndExpression	env -> segs [ R_SS ] . flags & DESC_B_MASK		4616594	1		&			
ANR	4616640	MemberAccess	env -> segs [ R_SS ] . flags		4616594	0					
ANR	4616641	ArrayIndexing	env -> segs [ R_SS ]		4616594	0					
ANR	4616642	PtrMemberAccess	env -> segs		4616594	0					
ANR	4616643	Identifier	env		4616594	0					
ANR	4616644	Identifier	segs		4616594	1					
ANR	4616645	Identifier	R_SS		4616594	1					
ANR	4616646	Identifier	flags		4616594	1					
ANR	4616647	Identifier	DESC_B_MASK		4616594	1					
ANR	4616648	ExpressionStatement	esp_mask = 0xffff	23:8:285:302	4616594	1	True				
ANR	4616649	AssignmentExpression	esp_mask = 0xffff		4616594	0		=			
ANR	4616650	Identifier	esp_mask		4616594	0					
ANR	4616651	PrimaryExpression	0xffff		4616594	1					
ANR	4616652	ExpressionStatement	ssp = env -> segs [ R_SS ] . base	25:4:309:335	4616594	8	True				
ANR	4616653	AssignmentExpression	ssp = env -> segs [ R_SS ] . base		4616594	0		=			
ANR	4616654	Identifier	ssp		4616594	0					
ANR	4616655	MemberAccess	env -> segs [ R_SS ] . base		4616594	1					
ANR	4616656	ArrayIndexing	env -> segs [ R_SS ]		4616594	0					
ANR	4616657	PtrMemberAccess	env -> segs		4616594	0					
ANR	4616658	Identifier	env		4616594	0					
ANR	4616659	Identifier	segs		4616594	1					
ANR	4616660	Identifier	R_SS		4616594	1					
ANR	4616661	Identifier	base		4616594	1					
ANR	4616662	IfStatement	if ( shift )		4616594	9					
ANR	4616663	Condition	shift	27:8:346:350	4616594	0	True				
ANR	4616664	Identifier	shift		4616594	0					
ANR	4616665	CompoundStatement		25:15:297:297	4616594	1					
ANR	4616666	ExpressionStatement	esp -= 4	29:8:364:372	4616594	0	True				
ANR	4616667	AssignmentExpression	esp -= 4		4616594	0		-=			
ANR	4616668	Identifier	esp		4616594	0					
ANR	4616669	PrimaryExpression	4		4616594	1					
ANR	4616670	ExpressionStatement	"stl ( ssp + ( esp & esp_mask ) , env -> segs [ R_CS ] . selector )"	31:8:383:436	4616594	1	True				
ANR	4616671	CallExpression	"stl ( ssp + ( esp & esp_mask ) , env -> segs [ R_CS ] . selector )"		4616594	0					
ANR	4616672	Callee	stl		4616594	0					
ANR	4616673	Identifier	stl		4616594	0					
ANR	4616674	ArgumentList	ssp + ( esp & esp_mask )		4616594	1					
ANR	4616675	Argument	ssp + ( esp & esp_mask )		4616594	0					
ANR	4616676	AdditiveExpression	ssp + ( esp & esp_mask )		4616594	0		+			
ANR	4616677	Identifier	ssp		4616594	0					
ANR	4616678	BitAndExpression	esp & esp_mask		4616594	1		&			
ANR	4616679	Identifier	esp		4616594	0					
ANR	4616680	Identifier	esp_mask		4616594	1					
ANR	4616681	Argument	env -> segs [ R_CS ] . selector		4616594	1					
ANR	4616682	MemberAccess	env -> segs [ R_CS ] . selector		4616594	0					
ANR	4616683	ArrayIndexing	env -> segs [ R_CS ]		4616594	0					
ANR	4616684	PtrMemberAccess	env -> segs		4616594	0					
ANR	4616685	Identifier	env		4616594	0					
ANR	4616686	Identifier	segs		4616594	1					
ANR	4616687	Identifier	R_CS		4616594	1					
ANR	4616688	Identifier	selector		4616594	1					
ANR	4616689	ExpressionStatement	esp -= 4	33:8:447:455	4616594	2	True				
ANR	4616690	AssignmentExpression	esp -= 4		4616594	0		-=			
ANR	4616691	Identifier	esp		4616594	0					
ANR	4616692	PrimaryExpression	4		4616594	1					
ANR	4616693	ExpressionStatement	"stl ( ssp + ( esp & esp_mask ) , next_eip )"	35:8:466:503	4616594	3	True				
ANR	4616694	CallExpression	"stl ( ssp + ( esp & esp_mask ) , next_eip )"		4616594	0					
ANR	4616695	Callee	stl		4616594	0					
ANR	4616696	Identifier	stl		4616594	0					
ANR	4616697	ArgumentList	ssp + ( esp & esp_mask )		4616594	1					
ANR	4616698	Argument	ssp + ( esp & esp_mask )		4616594	0					
ANR	4616699	AdditiveExpression	ssp + ( esp & esp_mask )		4616594	0		+			
ANR	4616700	Identifier	ssp		4616594	0					
ANR	4616701	BitAndExpression	esp & esp_mask		4616594	1		&			
ANR	4616702	Identifier	esp		4616594	0					
ANR	4616703	Identifier	esp_mask		4616594	1					
ANR	4616704	Argument	next_eip		4616594	1					
ANR	4616705	Identifier	next_eip		4616594	0					
ANR	4616706	ElseStatement	else		4616594	0					
ANR	4616707	CompoundStatement		35:11:461:461	4616594	0					
ANR	4616708	ExpressionStatement	esp -= 2	39:8:528:536	4616594	0	True				
ANR	4616709	AssignmentExpression	esp -= 2		4616594	0		-=			
ANR	4616710	Identifier	esp		4616594	0					
ANR	4616711	PrimaryExpression	2		4616594	1					
ANR	4616712	ExpressionStatement	"stw ( ssp + ( esp & esp_mask ) , env -> segs [ R_CS ] . selector )"	41:8:547:600	4616594	1	True				
ANR	4616713	CallExpression	"stw ( ssp + ( esp & esp_mask ) , env -> segs [ R_CS ] . selector )"		4616594	0					
ANR	4616714	Callee	stw		4616594	0					
ANR	4616715	Identifier	stw		4616594	0					
ANR	4616716	ArgumentList	ssp + ( esp & esp_mask )		4616594	1					
ANR	4616717	Argument	ssp + ( esp & esp_mask )		4616594	0					
ANR	4616718	AdditiveExpression	ssp + ( esp & esp_mask )		4616594	0		+			
ANR	4616719	Identifier	ssp		4616594	0					
ANR	4616720	BitAndExpression	esp & esp_mask		4616594	1		&			
ANR	4616721	Identifier	esp		4616594	0					
ANR	4616722	Identifier	esp_mask		4616594	1					
ANR	4616723	Argument	env -> segs [ R_CS ] . selector		4616594	1					
ANR	4616724	MemberAccess	env -> segs [ R_CS ] . selector		4616594	0					
ANR	4616725	ArrayIndexing	env -> segs [ R_CS ]		4616594	0					
ANR	4616726	PtrMemberAccess	env -> segs		4616594	0					
ANR	4616727	Identifier	env		4616594	0					
ANR	4616728	Identifier	segs		4616594	1					
ANR	4616729	Identifier	R_CS		4616594	1					
ANR	4616730	Identifier	selector		4616594	1					
ANR	4616731	ExpressionStatement	esp -= 2	43:8:611:619	4616594	2	True				
ANR	4616732	AssignmentExpression	esp -= 2		4616594	0		-=			
ANR	4616733	Identifier	esp		4616594	0					
ANR	4616734	PrimaryExpression	2		4616594	1					
ANR	4616735	ExpressionStatement	"stw ( ssp + ( esp & esp_mask ) , next_eip )"	45:8:630:667	4616594	3	True				
ANR	4616736	CallExpression	"stw ( ssp + ( esp & esp_mask ) , next_eip )"		4616594	0					
ANR	4616737	Callee	stw		4616594	0					
ANR	4616738	Identifier	stw		4616594	0					
ANR	4616739	ArgumentList	ssp + ( esp & esp_mask )		4616594	1					
ANR	4616740	Argument	ssp + ( esp & esp_mask )		4616594	0					
ANR	4616741	AdditiveExpression	ssp + ( esp & esp_mask )		4616594	0		+			
ANR	4616742	Identifier	ssp		4616594	0					
ANR	4616743	BitAndExpression	esp & esp_mask		4616594	1		&			
ANR	4616744	Identifier	esp		4616594	0					
ANR	4616745	Identifier	esp_mask		4616594	1					
ANR	4616746	Argument	next_eip		4616594	1					
ANR	4616747	Identifier	next_eip		4616594	0					
ANR	4616748	IfStatement	if ( ! ( env -> segs [ R_SS ] . flags & DESC_B_MASK ) )		4616594	10					
ANR	4616749	Condition	! ( env -> segs [ R_SS ] . flags & DESC_B_MASK )	51:8:687:724	4616594	0	True				
ANR	4616750	UnaryOperationExpression	! ( env -> segs [ R_SS ] . flags & DESC_B_MASK )		4616594	0					
ANR	4616751	UnaryOperator	!		4616594	0					
ANR	4616752	BitAndExpression	env -> segs [ R_SS ] . flags & DESC_B_MASK		4616594	1		&			
ANR	4616753	MemberAccess	env -> segs [ R_SS ] . flags		4616594	0					
ANR	4616754	ArrayIndexing	env -> segs [ R_SS ]		4616594	0					
ANR	4616755	PtrMemberAccess	env -> segs		4616594	0					
ANR	4616756	Identifier	env		4616594	0					
ANR	4616757	Identifier	segs		4616594	1					
ANR	4616758	Identifier	R_SS		4616594	1					
ANR	4616759	Identifier	flags		4616594	1					
ANR	4616760	Identifier	DESC_B_MASK		4616594	1					
ANR	4616761	ExpressionStatement	env -> regs [ R_ESP ] = ( env -> regs [ R_ESP ] & ~0xffff ) | ( esp & 0xffff )	53:8:736:800	4616594	1	True				
ANR	4616762	AssignmentExpression	env -> regs [ R_ESP ] = ( env -> regs [ R_ESP ] & ~0xffff ) | ( esp & 0xffff )		4616594	0		=			
ANR	4616763	ArrayIndexing	env -> regs [ R_ESP ]		4616594	0					
ANR	4616764	PtrMemberAccess	env -> regs		4616594	0					
ANR	4616765	Identifier	env		4616594	0					
ANR	4616766	Identifier	regs		4616594	1					
ANR	4616767	Identifier	R_ESP		4616594	1					
ANR	4616768	InclusiveOrExpression	( env -> regs [ R_ESP ] & ~0xffff ) | ( esp & 0xffff )		4616594	1		|			
ANR	4616769	BitAndExpression	env -> regs [ R_ESP ] & ~0xffff		4616594	0		&			
ANR	4616770	ArrayIndexing	env -> regs [ R_ESP ]		4616594	0					
ANR	4616771	PtrMemberAccess	env -> regs		4616594	0					
ANR	4616772	Identifier	env		4616594	0					
ANR	4616773	Identifier	regs		4616594	1					
ANR	4616774	Identifier	R_ESP		4616594	1					
ANR	4616775	Identifier	~0xffff		4616594	1					
ANR	4616776	BitAndExpression	esp & 0xffff		4616594	1		&			
ANR	4616777	Identifier	esp		4616594	0					
ANR	4616778	PrimaryExpression	0xffff		4616594	1					
ANR	4616779	ElseStatement	else		4616594	0					
ANR	4616780	ExpressionStatement	env -> regs [ R_ESP ] = esp	57:8:821:843	4616594	0	True				
ANR	4616781	AssignmentExpression	env -> regs [ R_ESP ] = esp		4616594	0		=			
ANR	4616782	ArrayIndexing	env -> regs [ R_ESP ]		4616594	0					
ANR	4616783	PtrMemberAccess	env -> regs		4616594	0					
ANR	4616784	Identifier	env		4616594	0					
ANR	4616785	Identifier	regs		4616594	1					
ANR	4616786	Identifier	R_ESP		4616594	1					
ANR	4616787	Identifier	esp		4616594	1					
ANR	4616788	ExpressionStatement	env -> eip = new_eip	59:4:850:868	4616594	11	True				
ANR	4616789	AssignmentExpression	env -> eip = new_eip		4616594	0		=			
ANR	4616790	PtrMemberAccess	env -> eip		4616594	0					
ANR	4616791	Identifier	env		4616594	0					
ANR	4616792	Identifier	eip		4616594	1					
ANR	4616793	Identifier	new_eip		4616594	1					
ANR	4616794	ExpressionStatement	env -> segs [ R_CS ] . selector = new_cs	61:4:875:908	4616594	12	True				
ANR	4616795	AssignmentExpression	env -> segs [ R_CS ] . selector = new_cs		4616594	0		=			
ANR	4616796	MemberAccess	env -> segs [ R_CS ] . selector		4616594	0					
ANR	4616797	ArrayIndexing	env -> segs [ R_CS ]		4616594	0					
ANR	4616798	PtrMemberAccess	env -> segs		4616594	0					
ANR	4616799	Identifier	env		4616594	0					
ANR	4616800	Identifier	segs		4616594	1					
ANR	4616801	Identifier	R_CS		4616594	1					
ANR	4616802	Identifier	selector		4616594	1					
ANR	4616803	Identifier	new_cs		4616594	1					
ANR	4616804	ExpressionStatement	env -> segs [ R_CS ] . base = ( uint8_t * ) ( new_cs << 4 )	63:4:915:962	4616594	13	True				
ANR	4616805	AssignmentExpression	env -> segs [ R_CS ] . base = ( uint8_t * ) ( new_cs << 4 )		4616594	0		=			
ANR	4616806	MemberAccess	env -> segs [ R_CS ] . base		4616594	0					
ANR	4616807	ArrayIndexing	env -> segs [ R_CS ]		4616594	0					
ANR	4616808	PtrMemberAccess	env -> segs		4616594	0					
ANR	4616809	Identifier	env		4616594	0					
ANR	4616810	Identifier	segs		4616594	1					
ANR	4616811	Identifier	R_CS		4616594	1					
ANR	4616812	Identifier	base		4616594	1					
ANR	4616813	CastExpression	( uint8_t * ) ( new_cs << 4 )		4616594	1					
ANR	4616814	CastTarget	uint8_t *		4616594	0					
ANR	4616815	ShiftExpression	new_cs << 4		4616594	1		<<			
ANR	4616816	Identifier	new_cs		4616594	0					
ANR	4616817	PrimaryExpression	4		4616594	1					
ANR	4616818	ReturnType	void		4616594	1					
ANR	4616819	Identifier	helper_lcall_real_T0_T1		4616594	2					
ANR	4616820	ParameterList	"int shift , int next_eip"		4616594	3					
ANR	4616821	Parameter	int shift	1:29:29:37	4616594	0	True				
ANR	4616822	ParameterType	int		4616594	0					
ANR	4616823	Identifier	shift		4616594	1					
ANR	4616824	Parameter	int next_eip	1:40:40:51	4616594	1	True				
ANR	4616825	ParameterType	int		4616594	0					
ANR	4616826	Identifier	next_eip		4616594	1					
ANR	4616827	CFGEntryNode	ENTRY		4616594		True				
ANR	4616828	CFGExitNode	EXIT		4616594		True				
ANR	4616829	Symbol	* * env		4616594						
ANR	4616830	Symbol	~0xffff		4616594						
ANR	4616831	Symbol	esp		4616594						
ANR	4616832	Symbol	env -> segs [ R_SS ] . flags		4616594						
ANR	4616833	Symbol	esp_mask		4616594						
ANR	4616834	Symbol	shift		4616594						
ANR	4616835	Symbol	env -> eip		4616594						
ANR	4616836	Symbol	R_SS		4616594						
ANR	4616837	Symbol	env -> regs		4616594						
ANR	4616838	Symbol	* env -> segs		4616594						
ANR	4616839	Symbol	env -> segs [ R_CS ] . base		4616594						
ANR	4616840	Symbol	ssp		4616594						
ANR	4616841	Symbol	new_cs		4616594						
ANR	4616842	Symbol	R_ESP		4616594						
ANR	4616843	Symbol	R_CS		4616594						
ANR	4616844	Symbol	T0		4616594						
ANR	4616845	Symbol	T1		4616594						
ANR	4616846	Symbol	* R_CS		4616594						
ANR	4616847	Symbol	* env		4616594						
ANR	4616848	Symbol	next_eip		4616594						
ANR	4616849	Symbol	env		4616594						
ANR	4616850	Symbol	new_eip		4616594						
ANR	4616851	Symbol	env -> segs		4616594						
ANR	4616852	Symbol	* R_ESP		4616594						
ANR	4616853	Symbol	* env -> regs		4616594						
ANR	4616854	Symbol	DESC_B_MASK		4616594						
ANR	4616855	Symbol	env -> segs [ R_CS ] . selector		4616594						
ANR	4616856	Symbol	* R_SS		4616594						
ANR	4616857	Symbol	env -> segs [ R_SS ] . base		4616594						
