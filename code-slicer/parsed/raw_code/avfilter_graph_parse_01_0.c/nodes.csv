command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	855801	File	/home/p4ultr4n/workplace/ReVeal/raw_code/avfilter_graph_parse_01_0.c								
ANR	855802	Function	avfilter_graph_parse	1:0:0:2917							
ANR	855803	FunctionDef	"avfilter_graph_parse (AVFilterGraph * graph , const char * filters , AVFilterInOut * * open_inputs_ptr , AVFilterInOut * * open_outputs_ptr , void * log_ctx)"		855802	0					
ANR	855804	CompoundStatement		7:0:203:2917	855802	0					
ANR	855805	IdentifierDeclStatement	"int index = 0 , ret = 0 ;"	9:4:210:232	855802	0	True				
ANR	855806	IdentifierDecl	index = 0		855802	0					
ANR	855807	IdentifierDeclType	int		855802	0					
ANR	855808	Identifier	index		855802	1					
ANR	855809	AssignmentExpression	index = 0		855802	2		=			
ANR	855810	Identifier	index		855802	0					
ANR	855811	PrimaryExpression	0		855802	1					
ANR	855812	IdentifierDecl	ret = 0		855802	1					
ANR	855813	IdentifierDeclType	int		855802	0					
ANR	855814	Identifier	ret		855802	1					
ANR	855815	AssignmentExpression	ret = 0		855802	2		=			
ANR	855816	Identifier	ret		855802	0					
ANR	855817	PrimaryExpression	0		855802	1					
ANR	855818	IdentifierDeclStatement	char chr = 0 ;	11:4:239:251	855802	1	True				
ANR	855819	IdentifierDecl	chr = 0		855802	0					
ANR	855820	IdentifierDeclType	char		855802	0					
ANR	855821	Identifier	chr		855802	1					
ANR	855822	AssignmentExpression	chr = 0		855802	2		=			
ANR	855823	Identifier	chr		855802	0					
ANR	855824	PrimaryExpression	0		855802	1					
ANR	855825	IdentifierDeclStatement	AVFilterInOut * curr_inputs = NULL ;	15:4:260:293	855802	2	True				
ANR	855826	IdentifierDecl	* curr_inputs = NULL		855802	0					
ANR	855827	IdentifierDeclType	AVFilterInOut *		855802	0					
ANR	855828	Identifier	curr_inputs		855802	1					
ANR	855829	AssignmentExpression	* curr_inputs = NULL		855802	2		=			
ANR	855830	Identifier	NULL		855802	0					
ANR	855831	Identifier	NULL		855802	1					
ANR	855832	IdentifierDeclStatement	AVFilterInOut * open_inputs = open_inputs_ptr ? * open_inputs_ptr : NULL ;	17:4:300:373	855802	3	True				
ANR	855833	IdentifierDecl	* open_inputs = open_inputs_ptr ? * open_inputs_ptr : NULL		855802	0					
ANR	855834	IdentifierDeclType	AVFilterInOut *		855802	0					
ANR	855835	Identifier	open_inputs		855802	1					
ANR	855836	AssignmentExpression	* open_inputs = open_inputs_ptr ? * open_inputs_ptr : NULL		855802	2		=			
ANR	855837	Identifier	open_inputs		855802	0					
ANR	855838	ConditionalExpression	open_inputs_ptr ? * open_inputs_ptr : NULL		855802	1					
ANR	855839	Condition	open_inputs_ptr		855802	0					
ANR	855840	Identifier	open_inputs_ptr		855802	0					
ANR	855841	UnaryOperationExpression	* open_inputs_ptr		855802	1					
ANR	855842	UnaryOperator	*		855802	0					
ANR	855843	Identifier	open_inputs_ptr		855802	1					
ANR	855844	Identifier	NULL		855802	2					
ANR	855845	IdentifierDeclStatement	AVFilterInOut * open_outputs = open_outputs_ptr ? * open_outputs_ptr : NULL ;	19:4:380:453	855802	4	True				
ANR	855846	IdentifierDecl	* open_outputs = open_outputs_ptr ? * open_outputs_ptr : NULL		855802	0					
ANR	855847	IdentifierDeclType	AVFilterInOut *		855802	0					
ANR	855848	Identifier	open_outputs		855802	1					
ANR	855849	AssignmentExpression	* open_outputs = open_outputs_ptr ? * open_outputs_ptr : NULL		855802	2		=			
ANR	855850	Identifier	open_outputs		855802	0					
ANR	855851	ConditionalExpression	open_outputs_ptr ? * open_outputs_ptr : NULL		855802	1					
ANR	855852	Condition	open_outputs_ptr		855802	0					
ANR	855853	Identifier	open_outputs_ptr		855802	0					
ANR	855854	UnaryOperationExpression	* open_outputs_ptr		855802	1					
ANR	855855	UnaryOperator	*		855802	0					
ANR	855856	Identifier	open_outputs_ptr		855802	1					
ANR	855857	Identifier	NULL		855802	2					
ANR	855858	DoStatement	do		855802	5					
ANR	855859	CompoundStatement		21:8:306:339	855802	0					
ANR	855860	IdentifierDeclStatement	AVFilterContext * filter ;	25:8:476:499	855802	0	True				
ANR	855861	IdentifierDecl	* filter		855802	0					
ANR	855862	IdentifierDeclType	AVFilterContext *		855802	0					
ANR	855863	Identifier	filter		855802	1					
ANR	855864	IdentifierDeclStatement	const char * filterchain = filters ;	27:8:510:543	855802	1	True				
ANR	855865	IdentifierDecl	* filterchain = filters		855802	0					
ANR	855866	IdentifierDeclType	const char *		855802	0					
ANR	855867	Identifier	filterchain		855802	1					
ANR	855868	AssignmentExpression	* filterchain = filters		855802	2		=			
ANR	855869	Identifier	filters		855802	0					
ANR	855870	Identifier	filters		855802	1					
ANR	855871	ExpressionStatement	"filters += strspn ( filters , WHITESPACES )"	29:8:554:593	855802	2	True				
ANR	855872	AssignmentExpression	"filters += strspn ( filters , WHITESPACES )"		855802	0		+=			
ANR	855873	Identifier	filters		855802	0					
ANR	855874	CallExpression	"strspn ( filters , WHITESPACES )"		855802	1					
ANR	855875	Callee	strspn		855802	0					
ANR	855876	Identifier	strspn		855802	0					
ANR	855877	ArgumentList	filters		855802	1					
ANR	855878	Argument	filters		855802	0					
ANR	855879	Identifier	filters		855802	0					
ANR	855880	Argument	WHITESPACES		855802	1					
ANR	855881	Identifier	WHITESPACES		855802	0					
ANR	855882	IfStatement	"if ( ( ret = parse_inputs ( & filters , & curr_inputs , & open_outputs , log_ctx ) ) < 0 )"		855802	3					
ANR	855883	Condition	"( ret = parse_inputs ( & filters , & curr_inputs , & open_outputs , log_ctx ) ) < 0"	33:12:610:681	855802	0	True				
ANR	855884	RelationalExpression	"( ret = parse_inputs ( & filters , & curr_inputs , & open_outputs , log_ctx ) ) < 0"		855802	0		<			
ANR	855885	AssignmentExpression	"ret = parse_inputs ( & filters , & curr_inputs , & open_outputs , log_ctx )"		855802	0		=			
ANR	855886	Identifier	ret		855802	0					
ANR	855887	CallExpression	"parse_inputs ( & filters , & curr_inputs , & open_outputs , log_ctx )"		855802	1					
ANR	855888	Callee	parse_inputs		855802	0					
ANR	855889	Identifier	parse_inputs		855802	0					
ANR	855890	ArgumentList	& filters		855802	1					
ANR	855891	Argument	& filters		855802	0					
ANR	855892	UnaryOperationExpression	& filters		855802	0					
ANR	855893	UnaryOperator	&		855802	0					
ANR	855894	Identifier	filters		855802	1					
ANR	855895	Argument	& curr_inputs		855802	1					
ANR	855896	UnaryOperationExpression	& curr_inputs		855802	0					
ANR	855897	UnaryOperator	&		855802	0					
ANR	855898	Identifier	curr_inputs		855802	1					
ANR	855899	Argument	& open_outputs		855802	2					
ANR	855900	UnaryOperationExpression	& open_outputs		855802	0					
ANR	855901	UnaryOperator	&		855802	0					
ANR	855902	Identifier	open_outputs		855802	1					
ANR	855903	Argument	log_ctx		855802	3					
ANR	855904	Identifier	log_ctx		855802	0					
ANR	855905	PrimaryExpression	0		855802	1					
ANR	855906	GotoStatement	goto end ;	35:12:697:705	855802	1	True				
ANR	855907	Identifier	end		855802	0					
ANR	855908	IfStatement	"if ( ( ret = parse_filter ( & filter , & filters , graph , index , log_ctx ) ) < 0 )"		855802	4					
ANR	855909	Condition	"( ret = parse_filter ( & filter , & filters , graph , index , log_ctx ) ) < 0"	39:12:722:787	855802	0	True				
ANR	855910	RelationalExpression	"( ret = parse_filter ( & filter , & filters , graph , index , log_ctx ) ) < 0"		855802	0		<			
ANR	855911	AssignmentExpression	"ret = parse_filter ( & filter , & filters , graph , index , log_ctx )"		855802	0		=			
ANR	855912	Identifier	ret		855802	0					
ANR	855913	CallExpression	"parse_filter ( & filter , & filters , graph , index , log_ctx )"		855802	1					
ANR	855914	Callee	parse_filter		855802	0					
ANR	855915	Identifier	parse_filter		855802	0					
ANR	855916	ArgumentList	& filter		855802	1					
ANR	855917	Argument	& filter		855802	0					
ANR	855918	UnaryOperationExpression	& filter		855802	0					
ANR	855919	UnaryOperator	&		855802	0					
ANR	855920	Identifier	filter		855802	1					
ANR	855921	Argument	& filters		855802	1					
ANR	855922	UnaryOperationExpression	& filters		855802	0					
ANR	855923	UnaryOperator	&		855802	0					
ANR	855924	Identifier	filters		855802	1					
ANR	855925	Argument	graph		855802	2					
ANR	855926	Identifier	graph		855802	0					
ANR	855927	Argument	index		855802	3					
ANR	855928	Identifier	index		855802	0					
ANR	855929	Argument	log_ctx		855802	4					
ANR	855930	Identifier	log_ctx		855802	0					
ANR	855931	PrimaryExpression	0		855802	1					
ANR	855932	GotoStatement	goto end ;	41:12:803:811	855802	1	True				
ANR	855933	Identifier	end		855802	0					
ANR	855934	IfStatement	if ( filter -> input_count == 1 && ! curr_inputs && ! index )		855802	5					
ANR	855935	Condition	filter -> input_count == 1 && ! curr_inputs && ! index	45:12:828:877	855802	0	True				
ANR	855936	AndExpression	filter -> input_count == 1 && ! curr_inputs && ! index		855802	0		&&			
ANR	855937	EqualityExpression	filter -> input_count == 1		855802	0		==			
ANR	855938	PtrMemberAccess	filter -> input_count		855802	0					
ANR	855939	Identifier	filter		855802	0					
ANR	855940	Identifier	input_count		855802	1					
ANR	855941	PrimaryExpression	1		855802	1					
ANR	855942	AndExpression	! curr_inputs && ! index		855802	1		&&			
ANR	855943	UnaryOperationExpression	! curr_inputs		855802	0					
ANR	855944	UnaryOperator	!		855802	0					
ANR	855945	Identifier	curr_inputs		855802	1					
ANR	855946	UnaryOperationExpression	! index		855802	1					
ANR	855947	UnaryOperator	!		855802	0					
ANR	855948	Identifier	index		855802	1					
ANR	855949	CompoundStatement		43:12:764:788	855802	1					
ANR	855950	IdentifierDeclStatement	"const char * tmp = ""[in]"" ;"	49:12:968:992	855802	0	True				
ANR	855951	IdentifierDecl	"* tmp = ""[in]"""		855802	0					
ANR	855952	IdentifierDeclType	const char *		855802	0					
ANR	855953	Identifier	tmp		855802	1					
ANR	855954	AssignmentExpression	"* tmp = ""[in]"""		855802	2		=			
ANR	855955	Identifier	tmp		855802	0					
ANR	855956	PrimaryExpression	"""[in]"""		855802	1					
ANR	855957	IfStatement	"if ( ( ret = parse_inputs ( & tmp , & curr_inputs , & open_outputs , log_ctx ) ) < 0 )"		855802	1					
ANR	855958	Condition	"( ret = parse_inputs ( & tmp , & curr_inputs , & open_outputs , log_ctx ) ) < 0"	51:16:1011:1078	855802	0	True				
ANR	855959	RelationalExpression	"( ret = parse_inputs ( & tmp , & curr_inputs , & open_outputs , log_ctx ) ) < 0"		855802	0		<			
ANR	855960	AssignmentExpression	"ret = parse_inputs ( & tmp , & curr_inputs , & open_outputs , log_ctx )"		855802	0		=			
ANR	855961	Identifier	ret		855802	0					
ANR	855962	CallExpression	"parse_inputs ( & tmp , & curr_inputs , & open_outputs , log_ctx )"		855802	1					
ANR	855963	Callee	parse_inputs		855802	0					
ANR	855964	Identifier	parse_inputs		855802	0					
ANR	855965	ArgumentList	& tmp		855802	1					
ANR	855966	Argument	& tmp		855802	0					
ANR	855967	UnaryOperationExpression	& tmp		855802	0					
ANR	855968	UnaryOperator	&		855802	0					
ANR	855969	Identifier	tmp		855802	1					
ANR	855970	Argument	& curr_inputs		855802	1					
ANR	855971	UnaryOperationExpression	& curr_inputs		855802	0					
ANR	855972	UnaryOperator	&		855802	0					
ANR	855973	Identifier	curr_inputs		855802	1					
ANR	855974	Argument	& open_outputs		855802	2					
ANR	855975	UnaryOperationExpression	& open_outputs		855802	0					
ANR	855976	UnaryOperator	&		855802	0					
ANR	855977	Identifier	open_outputs		855802	1					
ANR	855978	Argument	log_ctx		855802	3					
ANR	855979	Identifier	log_ctx		855802	0					
ANR	855980	PrimaryExpression	0		855802	1					
ANR	855981	GotoStatement	goto end ;	53:16:1098:1106	855802	1	True				
ANR	855982	Identifier	end		855802	0					
ANR	855983	IfStatement	"if ( ( ret = link_filter_inouts ( filter , & curr_inputs , & open_inputs , log_ctx ) ) < 0 )"		855802	6					
ANR	855984	Condition	"( ret = link_filter_inouts ( filter , & curr_inputs , & open_inputs , log_ctx ) ) < 0"	59:12:1134:1208	855802	0	True				
ANR	855985	RelationalExpression	"( ret = link_filter_inouts ( filter , & curr_inputs , & open_inputs , log_ctx ) ) < 0"		855802	0		<			
ANR	855986	AssignmentExpression	"ret = link_filter_inouts ( filter , & curr_inputs , & open_inputs , log_ctx )"		855802	0		=			
ANR	855987	Identifier	ret		855802	0					
ANR	855988	CallExpression	"link_filter_inouts ( filter , & curr_inputs , & open_inputs , log_ctx )"		855802	1					
ANR	855989	Callee	link_filter_inouts		855802	0					
ANR	855990	Identifier	link_filter_inouts		855802	0					
ANR	855991	ArgumentList	filter		855802	1					
ANR	855992	Argument	filter		855802	0					
ANR	855993	Identifier	filter		855802	0					
ANR	855994	Argument	& curr_inputs		855802	1					
ANR	855995	UnaryOperationExpression	& curr_inputs		855802	0					
ANR	855996	UnaryOperator	&		855802	0					
ANR	855997	Identifier	curr_inputs		855802	1					
ANR	855998	Argument	& open_inputs		855802	2					
ANR	855999	UnaryOperationExpression	& open_inputs		855802	0					
ANR	856000	UnaryOperator	&		855802	0					
ANR	856001	Identifier	open_inputs		855802	1					
ANR	856002	Argument	log_ctx		855802	3					
ANR	856003	Identifier	log_ctx		855802	0					
ANR	856004	PrimaryExpression	0		855802	1					
ANR	856005	GotoStatement	goto end ;	61:12:1224:1232	855802	1	True				
ANR	856006	Identifier	end		855802	0					
ANR	856007	IfStatement	"if ( ( ret = parse_outputs ( & filters , & curr_inputs , & open_inputs , & open_outputs , log_ctx ) ) < 0 )"		855802	7					
ANR	856008	Condition	"( ret = parse_outputs ( & filters , & curr_inputs , & open_inputs , & open_outputs , log_ctx ) ) < 0"	65:12:1249:1369	855802	0	True				
ANR	856009	RelationalExpression	"( ret = parse_outputs ( & filters , & curr_inputs , & open_inputs , & open_outputs , log_ctx ) ) < 0"		855802	0		<			
ANR	856010	AssignmentExpression	"ret = parse_outputs ( & filters , & curr_inputs , & open_inputs , & open_outputs , log_ctx )"		855802	0		=			
ANR	856011	Identifier	ret		855802	0					
ANR	856012	CallExpression	"parse_outputs ( & filters , & curr_inputs , & open_inputs , & open_outputs , log_ctx )"		855802	1					
ANR	856013	Callee	parse_outputs		855802	0					
ANR	856014	Identifier	parse_outputs		855802	0					
ANR	856015	ArgumentList	& filters		855802	1					
ANR	856016	Argument	& filters		855802	0					
ANR	856017	UnaryOperationExpression	& filters		855802	0					
ANR	856018	UnaryOperator	&		855802	0					
ANR	856019	Identifier	filters		855802	1					
ANR	856020	Argument	& curr_inputs		855802	1					
ANR	856021	UnaryOperationExpression	& curr_inputs		855802	0					
ANR	856022	UnaryOperator	&		855802	0					
ANR	856023	Identifier	curr_inputs		855802	1					
ANR	856024	Argument	& open_inputs		855802	2					
ANR	856025	UnaryOperationExpression	& open_inputs		855802	0					
ANR	856026	UnaryOperator	&		855802	0					
ANR	856027	Identifier	open_inputs		855802	1					
ANR	856028	Argument	& open_outputs		855802	3					
ANR	856029	UnaryOperationExpression	& open_outputs		855802	0					
ANR	856030	UnaryOperator	&		855802	0					
ANR	856031	Identifier	open_outputs		855802	1					
ANR	856032	Argument	log_ctx		855802	4					
ANR	856033	Identifier	log_ctx		855802	0					
ANR	856034	PrimaryExpression	0		855802	1					
ANR	856035	GotoStatement	goto end ;	69:12:1385:1393	855802	1	True				
ANR	856036	Identifier	end		855802	0					
ANR	856037	ExpressionStatement	"filters += strspn ( filters , WHITESPACES )"	73:8:1406:1445	855802	8	True				
ANR	856038	AssignmentExpression	"filters += strspn ( filters , WHITESPACES )"		855802	0		+=			
ANR	856039	Identifier	filters		855802	0					
ANR	856040	CallExpression	"strspn ( filters , WHITESPACES )"		855802	1					
ANR	856041	Callee	strspn		855802	0					
ANR	856042	Identifier	strspn		855802	0					
ANR	856043	ArgumentList	filters		855802	1					
ANR	856044	Argument	filters		855802	0					
ANR	856045	Identifier	filters		855802	0					
ANR	856046	Argument	WHITESPACES		855802	1					
ANR	856047	Identifier	WHITESPACES		855802	0					
ANR	856048	ExpressionStatement	chr = * filters ++	75:8:1456:1472	855802	9	True				
ANR	856049	AssignmentExpression	chr = * filters ++		855802	0		=			
ANR	856050	Identifier	chr		855802	0					
ANR	856051	UnaryOperationExpression	* filters ++		855802	1					
ANR	856052	UnaryOperator	*		855802	0					
ANR	856053	PostIncDecOperationExpression	filters ++		855802	1					
ANR	856054	Identifier	filters		855802	0					
ANR	856055	IncDec	++		855802	1					
ANR	856056	IfStatement	if ( chr == ';' && curr_inputs )		855802	10					
ANR	856057	Condition	chr == ';' && curr_inputs	79:12:1489:1513	855802	0	True				
ANR	856058	AndExpression	chr == ';' && curr_inputs		855802	0		&&			
ANR	856059	EqualityExpression	chr == ';'		855802	0		==			
ANR	856060	Identifier	chr		855802	0					
ANR	856061	PrimaryExpression	';'		855802	1					
ANR	856062	Identifier	curr_inputs		855802	1					
ANR	856063	CompoundStatement		73:39:1312:1312	855802	1					
ANR	856064	ExpressionStatement	"av_log ( log_ctx , AV_LOG_ERROR , ""Invalid filterchain containing an unlabelled output pad: \\""%s\\""\\n"" , filterchain )"	81:12:1531:1682	855802	0	True				
ANR	856065	CallExpression	"av_log ( log_ctx , AV_LOG_ERROR , ""Invalid filterchain containing an unlabelled output pad: \\""%s\\""\\n"" , filterchain )"		855802	0					
ANR	856066	Callee	av_log		855802	0					
ANR	856067	Identifier	av_log		855802	0					
ANR	856068	ArgumentList	log_ctx		855802	1					
ANR	856069	Argument	log_ctx		855802	0					
ANR	856070	Identifier	log_ctx		855802	0					
ANR	856071	Argument	AV_LOG_ERROR		855802	1					
ANR	856072	Identifier	AV_LOG_ERROR		855802	0					
ANR	856073	Argument	"""Invalid filterchain containing an unlabelled output pad: \\""%s\\""\\n"""		855802	2					
ANR	856074	PrimaryExpression	"""Invalid filterchain containing an unlabelled output pad: \\""%s\\""\\n"""		855802	0					
ANR	856075	Argument	filterchain		855802	3					
ANR	856076	Identifier	filterchain		855802	0					
ANR	856077	ExpressionStatement	ret = AVERROR ( EINVAL )	87:12:1697:1718	855802	1	True				
ANR	856078	AssignmentExpression	ret = AVERROR ( EINVAL )		855802	0		=			
ANR	856079	Identifier	ret		855802	0					
ANR	856080	CallExpression	AVERROR ( EINVAL )		855802	1					
ANR	856081	Callee	AVERROR		855802	0					
ANR	856082	Identifier	AVERROR		855802	0					
ANR	856083	ArgumentList	EINVAL		855802	1					
ANR	856084	Argument	EINVAL		855802	0					
ANR	856085	Identifier	EINVAL		855802	0					
ANR	856086	GotoStatement	goto end ;	89:12:1733:1741	855802	2	True				
ANR	856087	Identifier	end		855802	0					
ANR	856088	ExpressionStatement	index ++	93:8:1763:1770	855802	11	True				
ANR	856089	PostIncDecOperationExpression	index ++		855802	0					
ANR	856090	Identifier	index		855802	0					
ANR	856091	IncDec	++		855802	1					
ANR	856092	Condition	"chr == ',' || chr == ';'"	95:13:1786:1809	855802	1	True				
ANR	856093	OrExpression	"chr == ',' || chr == ';'"		855802	0		||			
ANR	856094	EqualityExpression	"chr == ','"		855802	0		==			
ANR	856095	Identifier	chr		855802	0					
ANR	856096	PrimaryExpression	"','"		855802	1					
ANR	856097	EqualityExpression	chr == ';'		855802	1		==			
ANR	856098	Identifier	chr		855802	0					
ANR	856099	PrimaryExpression	';'		855802	1					
ANR	856100	IfStatement	if ( chr )		855802	6					
ANR	856101	Condition	chr	99:8:1824:1826	855802	0	True				
ANR	856102	Identifier	chr		855802	0					
ANR	856103	CompoundStatement		93:13:1625:1625	855802	1					
ANR	856104	ExpressionStatement	"av_log ( log_ctx , AV_LOG_ERROR , ""Unable to parse graph description substring: \\""%s\\""\\n"" , filters - 1 )"	101:8:1840:1971	855802	0	True				
ANR	856105	CallExpression	"av_log ( log_ctx , AV_LOG_ERROR , ""Unable to parse graph description substring: \\""%s\\""\\n"" , filters - 1 )"		855802	0					
ANR	856106	Callee	av_log		855802	0					
ANR	856107	Identifier	av_log		855802	0					
ANR	856108	ArgumentList	log_ctx		855802	1					
ANR	856109	Argument	log_ctx		855802	0					
ANR	856110	Identifier	log_ctx		855802	0					
ANR	856111	Argument	AV_LOG_ERROR		855802	1					
ANR	856112	Identifier	AV_LOG_ERROR		855802	0					
ANR	856113	Argument	"""Unable to parse graph description substring: \\""%s\\""\\n"""		855802	2					
ANR	856114	PrimaryExpression	"""Unable to parse graph description substring: \\""%s\\""\\n"""		855802	0					
ANR	856115	Argument	filters - 1		855802	3					
ANR	856116	AdditiveExpression	filters - 1		855802	0		-			
ANR	856117	Identifier	filters		855802	0					
ANR	856118	PrimaryExpression	1		855802	1					
ANR	856119	ExpressionStatement	ret = AVERROR ( EINVAL )	107:8:1982:2003	855802	1	True				
ANR	856120	AssignmentExpression	ret = AVERROR ( EINVAL )		855802	0		=			
ANR	856121	Identifier	ret		855802	0					
ANR	856122	CallExpression	AVERROR ( EINVAL )		855802	1					
ANR	856123	Callee	AVERROR		855802	0					
ANR	856124	Identifier	AVERROR		855802	0					
ANR	856125	ArgumentList	EINVAL		855802	1					
ANR	856126	Argument	EINVAL		855802	0					
ANR	856127	Identifier	EINVAL		855802	0					
ANR	856128	GotoStatement	goto end ;	109:8:2014:2022	855802	2	True				
ANR	856129	Identifier	end		855802	0					
ANR	856130	IfStatement	"if ( open_inputs && ! strcmp ( open_inputs -> name , ""out"" ) && curr_inputs )"		855802	7					
ANR	856131	Condition	"open_inputs && ! strcmp ( open_inputs -> name , ""out"" ) && curr_inputs"	115:8:2042:2104	855802	0	True				
ANR	856132	AndExpression	"open_inputs && ! strcmp ( open_inputs -> name , ""out"" ) && curr_inputs"		855802	0		&&			
ANR	856133	Identifier	open_inputs		855802	0					
ANR	856134	AndExpression	"! strcmp ( open_inputs -> name , ""out"" ) && curr_inputs"		855802	1		&&			
ANR	856135	UnaryOperationExpression	"! strcmp ( open_inputs -> name , ""out"" )"		855802	0					
ANR	856136	UnaryOperator	!		855802	0					
ANR	856137	CallExpression	"strcmp ( open_inputs -> name , ""out"" )"		855802	1					
ANR	856138	Callee	strcmp		855802	0					
ANR	856139	Identifier	strcmp		855802	0					
ANR	856140	ArgumentList	open_inputs -> name		855802	1					
ANR	856141	Argument	open_inputs -> name		855802	0					
ANR	856142	PtrMemberAccess	open_inputs -> name		855802	0					
ANR	856143	Identifier	open_inputs		855802	0					
ANR	856144	Identifier	name		855802	1					
ANR	856145	Argument	"""out"""		855802	1					
ANR	856146	PrimaryExpression	"""out"""		855802	0					
ANR	856147	Identifier	curr_inputs		855802	1					
ANR	856148	CompoundStatement		113:8:1984:2009	855802	1					
ANR	856149	IdentifierDeclStatement	"const char * tmp = ""[out]"" ;"	119:8:2188:2213	855802	0	True				
ANR	856150	IdentifierDecl	"* tmp = ""[out]"""		855802	0					
ANR	856151	IdentifierDeclType	const char *		855802	0					
ANR	856152	Identifier	tmp		855802	1					
ANR	856153	AssignmentExpression	"* tmp = ""[out]"""		855802	2		=			
ANR	856154	Identifier	tmp		855802	0					
ANR	856155	PrimaryExpression	"""[out]"""		855802	1					
ANR	856156	IfStatement	"if ( ( ret = parse_outputs ( & tmp , & curr_inputs , & open_inputs , & open_outputs , log_ctx ) ) < 0 )"		855802	1					
ANR	856157	Condition	"( ret = parse_outputs ( & tmp , & curr_inputs , & open_inputs , & open_outputs , log_ctx ) ) < 0"	121:12:2228:2344	855802	0	True				
ANR	856158	RelationalExpression	"( ret = parse_outputs ( & tmp , & curr_inputs , & open_inputs , & open_outputs , log_ctx ) ) < 0"		855802	0		<			
ANR	856159	AssignmentExpression	"ret = parse_outputs ( & tmp , & curr_inputs , & open_inputs , & open_outputs , log_ctx )"		855802	0		=			
ANR	856160	Identifier	ret		855802	0					
ANR	856161	CallExpression	"parse_outputs ( & tmp , & curr_inputs , & open_inputs , & open_outputs , log_ctx )"		855802	1					
ANR	856162	Callee	parse_outputs		855802	0					
ANR	856163	Identifier	parse_outputs		855802	0					
ANR	856164	ArgumentList	& tmp		855802	1					
ANR	856165	Argument	& tmp		855802	0					
ANR	856166	UnaryOperationExpression	& tmp		855802	0					
ANR	856167	UnaryOperator	&		855802	0					
ANR	856168	Identifier	tmp		855802	1					
ANR	856169	Argument	& curr_inputs		855802	1					
ANR	856170	UnaryOperationExpression	& curr_inputs		855802	0					
ANR	856171	UnaryOperator	&		855802	0					
ANR	856172	Identifier	curr_inputs		855802	1					
ANR	856173	Argument	& open_inputs		855802	2					
ANR	856174	UnaryOperationExpression	& open_inputs		855802	0					
ANR	856175	UnaryOperator	&		855802	0					
ANR	856176	Identifier	open_inputs		855802	1					
ANR	856177	Argument	& open_outputs		855802	3					
ANR	856178	UnaryOperationExpression	& open_outputs		855802	0					
ANR	856179	UnaryOperator	&		855802	0					
ANR	856180	Identifier	open_outputs		855802	1					
ANR	856181	Argument	log_ctx		855802	4					
ANR	856182	Identifier	log_ctx		855802	0					
ANR	856183	PrimaryExpression	0		855802	1					
ANR	856184	GotoStatement	goto end ;	125:12:2360:2368	855802	1	True				
ANR	856185	Identifier	end		855802	0					
ANR	856186	Label	end :	131:0:2380:2383	855802	8	True				
ANR	856187	Identifier	end		855802	0					
ANR	856188	IfStatement	if ( open_inputs_ptr )		855802	9					
ANR	856189	Condition	open_inputs_ptr	135:8:2460:2474	855802	0	True				
ANR	856190	Identifier	open_inputs_ptr		855802	0					
ANR	856191	ExpressionStatement	* open_inputs_ptr = open_inputs	135:25:2477:2507	855802	1	True				
ANR	856192	AssignmentExpression	* open_inputs_ptr = open_inputs		855802	0		=			
ANR	856193	UnaryOperationExpression	* open_inputs_ptr		855802	0					
ANR	856194	UnaryOperator	*		855802	0					
ANR	856195	Identifier	open_inputs_ptr		855802	1					
ANR	856196	Identifier	open_inputs		855802	1					
ANR	856197	ElseStatement	else		855802	0					
ANR	856198	ExpressionStatement	avfilter_inout_free ( & open_inputs )	137:9:2519:2552	855802	0	True				
ANR	856199	CallExpression	avfilter_inout_free ( & open_inputs )		855802	0					
ANR	856200	Callee	avfilter_inout_free		855802	0					
ANR	856201	Identifier	avfilter_inout_free		855802	0					
ANR	856202	ArgumentList	& open_inputs		855802	1					
ANR	856203	Argument	& open_inputs		855802	0					
ANR	856204	UnaryOperationExpression	& open_inputs		855802	0					
ANR	856205	UnaryOperator	&		855802	0					
ANR	856206	Identifier	open_inputs		855802	1					
ANR	856207	IfStatement	if ( open_outputs_ptr )		855802	10					
ANR	856208	Condition	open_outputs_ptr	139:8:2563:2578	855802	0	True				
ANR	856209	Identifier	open_outputs_ptr		855802	0					
ANR	856210	ExpressionStatement	* open_outputs_ptr = open_outputs	139:26:2581:2613	855802	1	True				
ANR	856211	AssignmentExpression	* open_outputs_ptr = open_outputs		855802	0		=			
ANR	856212	UnaryOperationExpression	* open_outputs_ptr		855802	0					
ANR	856213	UnaryOperator	*		855802	0					
ANR	856214	Identifier	open_outputs_ptr		855802	1					
ANR	856215	Identifier	open_outputs		855802	1					
ANR	856216	ElseStatement	else		855802	0					
ANR	856217	ExpressionStatement	avfilter_inout_free ( & open_outputs )	141:9:2625:2659	855802	0	True				
ANR	856218	CallExpression	avfilter_inout_free ( & open_outputs )		855802	0					
ANR	856219	Callee	avfilter_inout_free		855802	0					
ANR	856220	Identifier	avfilter_inout_free		855802	0					
ANR	856221	ArgumentList	& open_outputs		855802	1					
ANR	856222	Argument	& open_outputs		855802	0					
ANR	856223	UnaryOperationExpression	& open_outputs		855802	0					
ANR	856224	UnaryOperator	&		855802	0					
ANR	856225	Identifier	open_outputs		855802	1					
ANR	856226	ExpressionStatement	avfilter_inout_free ( & curr_inputs )	143:4:2666:2699	855802	11	True				
ANR	856227	CallExpression	avfilter_inout_free ( & curr_inputs )		855802	0					
ANR	856228	Callee	avfilter_inout_free		855802	0					
ANR	856229	Identifier	avfilter_inout_free		855802	0					
ANR	856230	ArgumentList	& curr_inputs		855802	1					
ANR	856231	Argument	& curr_inputs		855802	0					
ANR	856232	UnaryOperationExpression	& curr_inputs		855802	0					
ANR	856233	UnaryOperator	&		855802	0					
ANR	856234	Identifier	curr_inputs		855802	1					
ANR	856235	IfStatement	if ( ret < 0 )		855802	12					
ANR	856236	Condition	ret < 0	147:8:2712:2718	855802	0	True				
ANR	856237	RelationalExpression	ret < 0		855802	0		<			
ANR	856238	Identifier	ret		855802	0					
ANR	856239	PrimaryExpression	0		855802	1					
ANR	856240	CompoundStatement		141:17:2517:2517	855802	1					
ANR	856241	ForStatement	for ( ; graph -> filter_count > 0 ; graph -> filter_count -- )		855802	0					
ANR	856242	Condition	graph -> filter_count > 0	149:15:2739:2761	855802	0	True				
ANR	856243	RelationalExpression	graph -> filter_count > 0		855802	0		>			
ANR	856244	PtrMemberAccess	graph -> filter_count		855802	0					
ANR	856245	Identifier	graph		855802	0					
ANR	856246	Identifier	filter_count		855802	1					
ANR	856247	PrimaryExpression	0		855802	1					
ANR	856248	PostIncDecOperationExpression	graph -> filter_count --	149:40:2764:2784	855802	1	True				
ANR	856249	PtrMemberAccess	graph -> filter_count		855802	0					
ANR	856250	Identifier	graph		855802	0					
ANR	856251	Identifier	filter_count		855802	1					
ANR	856252	IncDec	--		855802	1					
ANR	856253	ExpressionStatement	avfilter_free ( graph -> filters [ graph -> filter_count - 1 ] )	151:12:2800:2854	855802	2	True				
ANR	856254	CallExpression	avfilter_free ( graph -> filters [ graph -> filter_count - 1 ] )		855802	0					
ANR	856255	Callee	avfilter_free		855802	0					
ANR	856256	Identifier	avfilter_free		855802	0					
ANR	856257	ArgumentList	graph -> filters [ graph -> filter_count - 1 ]		855802	1					
ANR	856258	Argument	graph -> filters [ graph -> filter_count - 1 ]		855802	0					
ANR	856259	ArrayIndexing	graph -> filters [ graph -> filter_count - 1 ]		855802	0					
ANR	856260	PtrMemberAccess	graph -> filters		855802	0					
ANR	856261	Identifier	graph		855802	0					
ANR	856262	Identifier	filters		855802	1					
ANR	856263	AdditiveExpression	graph -> filter_count - 1		855802	1		-			
ANR	856264	PtrMemberAccess	graph -> filter_count		855802	0					
ANR	856265	Identifier	graph		855802	0					
ANR	856266	Identifier	filter_count		855802	1					
ANR	856267	PrimaryExpression	1		855802	1					
ANR	856268	ExpressionStatement	av_freep ( & graph -> filters )	153:8:2865:2890	855802	1	True				
ANR	856269	CallExpression	av_freep ( & graph -> filters )		855802	0					
ANR	856270	Callee	av_freep		855802	0					
ANR	856271	Identifier	av_freep		855802	0					
ANR	856272	ArgumentList	& graph -> filters		855802	1					
ANR	856273	Argument	& graph -> filters		855802	0					
ANR	856274	UnaryOperationExpression	& graph -> filters		855802	0					
ANR	856275	UnaryOperator	&		855802	0					
ANR	856276	PtrMemberAccess	graph -> filters		855802	1					
ANR	856277	Identifier	graph		855802	0					
ANR	856278	Identifier	filters		855802	1					
ANR	856279	ReturnStatement	return ret ;	157:4:2904:2914	855802	13	True				
ANR	856280	Identifier	ret		855802	0					
ANR	856281	ReturnType	int		855802	1					
ANR	856282	Identifier	avfilter_graph_parse		855802	2					
ANR	856283	ParameterList	"AVFilterGraph * graph , const char * filters , AVFilterInOut * * open_inputs_ptr , AVFilterInOut * * open_outputs_ptr , void * log_ctx"		855802	3					
ANR	856284	Parameter	AVFilterGraph * graph	1:25:25:44	855802	0	True				
ANR	856285	ParameterType	AVFilterGraph *		855802	0					
ANR	856286	Identifier	graph		855802	1					
ANR	856287	Parameter	const char * filters	1:47:47:65	855802	1	True				
ANR	856288	ParameterType	const char *		855802	0					
ANR	856289	Identifier	filters		855802	1					
ANR	856290	Parameter	AVFilterInOut * * open_inputs_ptr	3:25:94:124	855802	2	True				
ANR	856291	ParameterType	AVFilterInOut * *		855802	0					
ANR	856292	Identifier	open_inputs_ptr		855802	1					
ANR	856293	Parameter	AVFilterInOut * * open_outputs_ptr	3:58:127:158	855802	3	True				
ANR	856294	ParameterType	AVFilterInOut * *		855802	0					
ANR	856295	Identifier	open_outputs_ptr		855802	1					
ANR	856296	Parameter	void * log_ctx	5:25:187:199	855802	4	True				
ANR	856297	ParameterType	void *		855802	0					
ANR	856298	Identifier	log_ctx		855802	1					
ANR	856299	CFGEntryNode	ENTRY		855802		True				
ANR	856300	CFGExitNode	EXIT		855802		True				
ANR	856301	Symbol	& graph -> filters		855802						
ANR	856302	Symbol	open_inputs -> name		855802						
ANR	856303	Symbol	* * graph		855802						
ANR	856304	Symbol	open_outputs		855802						
ANR	856305	Symbol	WHITESPACES		855802						
ANR	856306	Symbol	* open_outputs_ptr		855802						
ANR	856307	Symbol	link_filter_inouts		855802						
ANR	856308	Symbol	& filter		855802						
ANR	856309	Symbol	log_ctx		855802						
ANR	856310	Symbol	& curr_inputs		855802						
ANR	856311	Symbol	open_inputs		855802						
ANR	856312	Symbol	* open_inputs_ptr		855802						
ANR	856313	Symbol	tmp		855802						
ANR	856314	Symbol	& open_inputs		855802						
ANR	856315	Symbol	* open_inputs		855802						
ANR	856316	Symbol	* graph		855802						
ANR	856317	Symbol	graph -> filter_count		855802						
ANR	856318	Symbol	& filters		855802						
ANR	856319	Symbol	parse_outputs		855802						
ANR	856320	Symbol	ret		855802						
ANR	856321	Symbol	strcmp		855802						
ANR	856322	Symbol	NULL		855802						
ANR	856323	Symbol	AV_LOG_ERROR		855802						
ANR	856324	Symbol	parse_filter		855802						
ANR	856325	Symbol	open_outputs_ptr		855802						
ANR	856326	Symbol	index		855802						
ANR	856327	Symbol	open_inputs_ptr		855802						
ANR	856328	Symbol	filters		855802						
ANR	856329	Symbol	graph -> filters		855802						
ANR	856330	Symbol	chr		855802						
ANR	856331	Symbol	* filters ++		855802						
ANR	856332	Symbol	graph		855802						
ANR	856333	Symbol	filterchain		855802						
ANR	856334	Symbol	* filter		855802						
ANR	856335	Symbol	filter		855802						
ANR	856336	Symbol	EINVAL		855802						
ANR	856337	Symbol	& open_outputs		855802						
ANR	856338	Symbol	* graph -> filters		855802						
ANR	856339	Symbol	strspn		855802						
ANR	856340	Symbol	curr_inputs		855802						
ANR	856341	Symbol	& tmp		855802						
ANR	856342	Symbol	AVERROR		855802						
ANR	856343	Symbol	* graph -> filter_count		855802						
ANR	856344	Symbol	parse_inputs		855802						
ANR	856345	Symbol	filter -> input_count		855802						
