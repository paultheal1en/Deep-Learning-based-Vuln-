command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6053608	File	/home/p4ultr4n/workplace/ReVeal/raw_code/numa_add_0.c								
ANR	6053609	Function	numa_add	1:0:0:1755							
ANR	6053610	FunctionDef	numa_add (const char * optarg)		6053609	0					
ANR	6053611	CompoundStatement		3:0:42:1755	6053609	0					
ANR	6053612	IdentifierDeclStatement	char option [ 128 ] ;	5:4:49:65	6053609	0	True				
ANR	6053613	IdentifierDecl	option [ 128 ]		6053609	0					
ANR	6053614	IdentifierDeclType	char [ 128 ]		6053609	0					
ANR	6053615	Identifier	option		6053609	1					
ANR	6053616	PrimaryExpression	128		6053609	2					
ANR	6053617	IdentifierDeclStatement	char * endptr ;	7:4:72:84	6053609	1	True				
ANR	6053618	IdentifierDecl	* endptr		6053609	0					
ANR	6053619	IdentifierDeclType	char *		6053609	0					
ANR	6053620	Identifier	endptr		6053609	1					
ANR	6053621	IdentifierDeclStatement	"unsigned long long value , endvalue ;"	9:4:91:125	6053609	2	True				
ANR	6053622	IdentifierDecl	value		6053609	0					
ANR	6053623	IdentifierDeclType	unsigned long long		6053609	0					
ANR	6053624	Identifier	value		6053609	1					
ANR	6053625	IdentifierDecl	endvalue		6053609	1					
ANR	6053626	IdentifierDeclType	unsigned long long		6053609	0					
ANR	6053627	Identifier	endvalue		6053609	1					
ANR	6053628	IdentifierDeclStatement	int nodenr ;	11:4:132:142	6053609	3	True				
ANR	6053629	IdentifierDecl	nodenr		6053609	0					
ANR	6053630	IdentifierDeclType	int		6053609	0					
ANR	6053631	Identifier	nodenr		6053609	1					
ANR	6053632	ExpressionStatement	"optarg = get_opt_name ( option , 128 , optarg , ',' ) + 1"	15:4:151:202	6053609	4	True				
ANR	6053633	AssignmentExpression	"optarg = get_opt_name ( option , 128 , optarg , ',' ) + 1"		6053609	0		=			
ANR	6053634	Identifier	optarg		6053609	0					
ANR	6053635	AdditiveExpression	"get_opt_name ( option , 128 , optarg , ',' ) + 1"		6053609	1		+			
ANR	6053636	CallExpression	"get_opt_name ( option , 128 , optarg , ',' )"		6053609	0					
ANR	6053637	Callee	get_opt_name		6053609	0					
ANR	6053638	Identifier	get_opt_name		6053609	0					
ANR	6053639	ArgumentList	option		6053609	1					
ANR	6053640	Argument	option		6053609	0					
ANR	6053641	Identifier	option		6053609	0					
ANR	6053642	Argument	128		6053609	1					
ANR	6053643	PrimaryExpression	128		6053609	0					
ANR	6053644	Argument	optarg		6053609	2					
ANR	6053645	Identifier	optarg		6053609	0					
ANR	6053646	Argument	"','"		6053609	3					
ANR	6053647	PrimaryExpression	"','"		6053609	0					
ANR	6053648	PrimaryExpression	1		6053609	1					
ANR	6053649	IfStatement	"if ( ! strcmp ( option , ""node"" ) )"		6053609	5					
ANR	6053650	Condition	"! strcmp ( option , ""node"" )"	17:8:213:235	6053609	0	True				
ANR	6053651	UnaryOperationExpression	"! strcmp ( option , ""node"" )"		6053609	0					
ANR	6053652	UnaryOperator	!		6053609	0					
ANR	6053653	CallExpression	"strcmp ( option , ""node"" )"		6053609	1					
ANR	6053654	Callee	strcmp		6053609	0					
ANR	6053655	Identifier	strcmp		6053609	0					
ANR	6053656	ArgumentList	option		6053609	1					
ANR	6053657	Argument	option		6053609	0					
ANR	6053658	Identifier	option		6053609	0					
ANR	6053659	Argument	"""node"""		6053609	1					
ANR	6053660	PrimaryExpression	"""node"""		6053609	0					
ANR	6053661	CompoundStatement		15:33:195:195	6053609	1					
ANR	6053662	IfStatement	"if ( get_param_value ( option , 128 , ""nodeid"" , optarg ) == 0 )"		6053609	0					
ANR	6053663	Condition	"get_param_value ( option , 128 , ""nodeid"" , optarg ) == 0"	19:12:253:303	6053609	0	True				
ANR	6053664	EqualityExpression	"get_param_value ( option , 128 , ""nodeid"" , optarg ) == 0"		6053609	0		==			
ANR	6053665	CallExpression	"get_param_value ( option , 128 , ""nodeid"" , optarg )"		6053609	0					
ANR	6053666	Callee	get_param_value		6053609	0					
ANR	6053667	Identifier	get_param_value		6053609	0					
ANR	6053668	ArgumentList	option		6053609	1					
ANR	6053669	Argument	option		6053609	0					
ANR	6053670	Identifier	option		6053609	0					
ANR	6053671	Argument	128		6053609	1					
ANR	6053672	PrimaryExpression	128		6053609	0					
ANR	6053673	Argument	"""nodeid"""		6053609	2					
ANR	6053674	PrimaryExpression	"""nodeid"""		6053609	0					
ANR	6053675	Argument	optarg		6053609	3					
ANR	6053676	Identifier	optarg		6053609	0					
ANR	6053677	PrimaryExpression	0		6053609	1					
ANR	6053678	CompoundStatement		17:65:263:263	6053609	1					
ANR	6053679	ExpressionStatement	nodenr = nb_numa_nodes	21:12:321:343	6053609	0	True				
ANR	6053680	AssignmentExpression	nodenr = nb_numa_nodes		6053609	0		=			
ANR	6053681	Identifier	nodenr		6053609	0					
ANR	6053682	Identifier	nb_numa_nodes		6053609	1					
ANR	6053683	ElseStatement	else		6053609	0					
ANR	6053684	CompoundStatement		21:15:318:318	6053609	0					
ANR	6053685	ExpressionStatement	"nodenr = strtoull ( option , NULL , 10 )"	25:12:376:411	6053609	0	True				
ANR	6053686	AssignmentExpression	"nodenr = strtoull ( option , NULL , 10 )"		6053609	0		=			
ANR	6053687	Identifier	nodenr		6053609	0					
ANR	6053688	CallExpression	"strtoull ( option , NULL , 10 )"		6053609	1					
ANR	6053689	Callee	strtoull		6053609	0					
ANR	6053690	Identifier	strtoull		6053609	0					
ANR	6053691	ArgumentList	option		6053609	1					
ANR	6053692	Argument	option		6053609	0					
ANR	6053693	Identifier	option		6053609	0					
ANR	6053694	Argument	NULL		6053609	1					
ANR	6053695	Identifier	NULL		6053609	0					
ANR	6053696	Argument	10		6053609	2					
ANR	6053697	PrimaryExpression	10		6053609	0					
ANR	6053698	IfStatement	"if ( get_param_value ( option , 128 , ""mem"" , optarg ) == 0 )"		6053609	1					
ANR	6053699	Condition	"get_param_value ( option , 128 , ""mem"" , optarg ) == 0"	31:12:439:486	6053609	0	True				
ANR	6053700	EqualityExpression	"get_param_value ( option , 128 , ""mem"" , optarg ) == 0"		6053609	0		==			
ANR	6053701	CallExpression	"get_param_value ( option , 128 , ""mem"" , optarg )"		6053609	0					
ANR	6053702	Callee	get_param_value		6053609	0					
ANR	6053703	Identifier	get_param_value		6053609	0					
ANR	6053704	ArgumentList	option		6053609	1					
ANR	6053705	Argument	option		6053609	0					
ANR	6053706	Identifier	option		6053609	0					
ANR	6053707	Argument	128		6053609	1					
ANR	6053708	PrimaryExpression	128		6053609	0					
ANR	6053709	Argument	"""mem"""		6053609	2					
ANR	6053710	PrimaryExpression	"""mem"""		6053609	0					
ANR	6053711	Argument	optarg		6053609	3					
ANR	6053712	Identifier	optarg		6053609	0					
ANR	6053713	PrimaryExpression	0		6053609	1					
ANR	6053714	CompoundStatement		29:62:446:446	6053609	1					
ANR	6053715	ExpressionStatement	node_mem [ nodenr ] = 0	33:12:504:524	6053609	0	True				
ANR	6053716	AssignmentExpression	node_mem [ nodenr ] = 0		6053609	0		=			
ANR	6053717	ArrayIndexing	node_mem [ nodenr ]		6053609	0					
ANR	6053718	Identifier	node_mem		6053609	0					
ANR	6053719	Identifier	nodenr		6053609	1					
ANR	6053720	PrimaryExpression	0		6053609	1					
ANR	6053721	ElseStatement	else		6053609	0					
ANR	6053722	CompoundStatement		35:12:514:526	6053609	0					
ANR	6053723	IdentifierDeclStatement	int64_t sval ;	37:12:557:569	6053609	0	True				
ANR	6053724	IdentifierDecl	sval		6053609	0					
ANR	6053725	IdentifierDeclType	int64_t		6053609	0					
ANR	6053726	Identifier	sval		6053609	1					
ANR	6053727	ExpressionStatement	"sval = strtosz ( option , & endptr )"	39:12:584:615	6053609	1	True				
ANR	6053728	AssignmentExpression	"sval = strtosz ( option , & endptr )"		6053609	0		=			
ANR	6053729	Identifier	sval		6053609	0					
ANR	6053730	CallExpression	"strtosz ( option , & endptr )"		6053609	1					
ANR	6053731	Callee	strtosz		6053609	0					
ANR	6053732	Identifier	strtosz		6053609	0					
ANR	6053733	ArgumentList	option		6053609	1					
ANR	6053734	Argument	option		6053609	0					
ANR	6053735	Identifier	option		6053609	0					
ANR	6053736	Argument	& endptr		6053609	1					
ANR	6053737	UnaryOperationExpression	& endptr		6053609	0					
ANR	6053738	UnaryOperator	&		6053609	0					
ANR	6053739	Identifier	endptr		6053609	1					
ANR	6053740	IfStatement	if ( sval < 0 || * endptr )		6053609	2					
ANR	6053741	Condition	sval < 0 || * endptr	41:16:634:652	6053609	0	True				
ANR	6053742	OrExpression	sval < 0 || * endptr		6053609	0		||			
ANR	6053743	RelationalExpression	sval < 0		6053609	0		<			
ANR	6053744	Identifier	sval		6053609	0					
ANR	6053745	PrimaryExpression	0		6053609	1					
ANR	6053746	UnaryOperationExpression	* endptr		6053609	1					
ANR	6053747	UnaryOperator	*		6053609	0					
ANR	6053748	Identifier	endptr		6053609	1					
ANR	6053749	CompoundStatement		39:37:612:612	6053609	1					
ANR	6053750	ExpressionStatement	"fprintf ( stderr , ""qemu: invalid numa mem size: %s\\n"" , optarg )"	43:16:674:734	6053609	0	True				
ANR	6053751	CallExpression	"fprintf ( stderr , ""qemu: invalid numa mem size: %s\\n"" , optarg )"		6053609	0					
ANR	6053752	Callee	fprintf		6053609	0					
ANR	6053753	Identifier	fprintf		6053609	0					
ANR	6053754	ArgumentList	stderr		6053609	1					
ANR	6053755	Argument	stderr		6053609	0					
ANR	6053756	Identifier	stderr		6053609	0					
ANR	6053757	Argument	"""qemu: invalid numa mem size: %s\\n"""		6053609	1					
ANR	6053758	PrimaryExpression	"""qemu: invalid numa mem size: %s\\n"""		6053609	0					
ANR	6053759	Argument	optarg		6053609	2					
ANR	6053760	Identifier	optarg		6053609	0					
ANR	6053761	ExpressionStatement	exit ( 1 )	45:16:753:760	6053609	1	True				
ANR	6053762	CallExpression	exit ( 1 )		6053609	0					
ANR	6053763	Callee	exit		6053609	0					
ANR	6053764	Identifier	exit		6053609	0					
ANR	6053765	ArgumentList	1		6053609	1					
ANR	6053766	Argument	1		6053609	0					
ANR	6053767	PrimaryExpression	1		6053609	0					
ANR	6053768	ExpressionStatement	node_mem [ nodenr ] = sval	49:12:790:813	6053609	3	True				
ANR	6053769	AssignmentExpression	node_mem [ nodenr ] = sval		6053609	0		=			
ANR	6053770	ArrayIndexing	node_mem [ nodenr ]		6053609	0					
ANR	6053771	Identifier	node_mem		6053609	0					
ANR	6053772	Identifier	nodenr		6053609	1					
ANR	6053773	Identifier	sval		6053609	1					
ANR	6053774	IfStatement	"if ( get_param_value ( option , 128 , ""cpus"" , optarg ) == 0 )"		6053609	2					
ANR	6053775	Condition	"get_param_value ( option , 128 , ""cpus"" , optarg ) == 0"	53:12:839:887	6053609	0	True				
ANR	6053776	EqualityExpression	"get_param_value ( option , 128 , ""cpus"" , optarg ) == 0"		6053609	0		==			
ANR	6053777	CallExpression	"get_param_value ( option , 128 , ""cpus"" , optarg )"		6053609	0					
ANR	6053778	Callee	get_param_value		6053609	0					
ANR	6053779	Identifier	get_param_value		6053609	0					
ANR	6053780	ArgumentList	option		6053609	1					
ANR	6053781	Argument	option		6053609	0					
ANR	6053782	Identifier	option		6053609	0					
ANR	6053783	Argument	128		6053609	1					
ANR	6053784	PrimaryExpression	128		6053609	0					
ANR	6053785	Argument	"""cpus"""		6053609	2					
ANR	6053786	PrimaryExpression	"""cpus"""		6053609	0					
ANR	6053787	Argument	optarg		6053609	3					
ANR	6053788	Identifier	optarg		6053609	0					
ANR	6053789	PrimaryExpression	0		6053609	1					
ANR	6053790	CompoundStatement		51:63:847:847	6053609	1					
ANR	6053791	ExpressionStatement	node_cpumask [ nodenr ] = 0	55:12:905:929	6053609	0	True				
ANR	6053792	AssignmentExpression	node_cpumask [ nodenr ] = 0		6053609	0		=			
ANR	6053793	ArrayIndexing	node_cpumask [ nodenr ]		6053609	0					
ANR	6053794	Identifier	node_cpumask		6053609	0					
ANR	6053795	Identifier	nodenr		6053609	1					
ANR	6053796	PrimaryExpression	0		6053609	1					
ANR	6053797	ElseStatement	else		6053609	0					
ANR	6053798	CompoundStatement		55:15:904:904	6053609	0					
ANR	6053799	ExpressionStatement	"value = strtoull ( option , & endptr , 10 )"	59:12:962:999	6053609	0	True				
ANR	6053800	AssignmentExpression	"value = strtoull ( option , & endptr , 10 )"		6053609	0		=			
ANR	6053801	Identifier	value		6053609	0					
ANR	6053802	CallExpression	"strtoull ( option , & endptr , 10 )"		6053609	1					
ANR	6053803	Callee	strtoull		6053609	0					
ANR	6053804	Identifier	strtoull		6053609	0					
ANR	6053805	ArgumentList	option		6053609	1					
ANR	6053806	Argument	option		6053609	0					
ANR	6053807	Identifier	option		6053609	0					
ANR	6053808	Argument	& endptr		6053609	1					
ANR	6053809	UnaryOperationExpression	& endptr		6053609	0					
ANR	6053810	UnaryOperator	&		6053609	0					
ANR	6053811	Identifier	endptr		6053609	1					
ANR	6053812	Argument	10		6053609	2					
ANR	6053813	PrimaryExpression	10		6053609	0					
ANR	6053814	IfStatement	if ( value >= 64 )		6053609	1					
ANR	6053815	Condition	value >= 64	61:16:1018:1028	6053609	0	True				
ANR	6053816	RelationalExpression	value >= 64		6053609	0		>=			
ANR	6053817	Identifier	value		6053609	0					
ANR	6053818	PrimaryExpression	64		6053609	1					
ANR	6053819	CompoundStatement		59:29:988:988	6053609	1					
ANR	6053820	ExpressionStatement	value = 63	63:16:1050:1060	6053609	0	True				
ANR	6053821	AssignmentExpression	value = 63		6053609	0		=			
ANR	6053822	Identifier	value		6053609	0					
ANR	6053823	PrimaryExpression	63		6053609	1					
ANR	6053824	ExpressionStatement	"fprintf ( stderr , ""only 64 CPUs in NUMA mode supported.\\n"" )"	65:16:1079:1136	6053609	1	True				
ANR	6053825	CallExpression	"fprintf ( stderr , ""only 64 CPUs in NUMA mode supported.\\n"" )"		6053609	0					
ANR	6053826	Callee	fprintf		6053609	0					
ANR	6053827	Identifier	fprintf		6053609	0					
ANR	6053828	ArgumentList	stderr		6053609	1					
ANR	6053829	Argument	stderr		6053609	0					
ANR	6053830	Identifier	stderr		6053609	0					
ANR	6053831	Argument	"""only 64 CPUs in NUMA mode supported.\\n"""		6053609	1					
ANR	6053832	PrimaryExpression	"""only 64 CPUs in NUMA mode supported.\\n"""		6053609	0					
ANR	6053833	ElseStatement	else		6053609	0					
ANR	6053834	CompoundStatement		65:19:1115:1115	6053609	0					
ANR	6053835	IfStatement	if ( * endptr == '-' )		6053609	0					
ANR	6053836	Condition	* endptr == '-'	69:20:1181:1194	6053609	0	True				
ANR	6053837	EqualityExpression	* endptr == '-'		6053609	0		==			
ANR	6053838	UnaryOperationExpression	* endptr		6053609	0					
ANR	6053839	UnaryOperator	*		6053609	0					
ANR	6053840	Identifier	endptr		6053609	1					
ANR	6053841	PrimaryExpression	'-'		6053609	1					
ANR	6053842	CompoundStatement		67:36:1154:1154	6053609	1					
ANR	6053843	ExpressionStatement	"endvalue = strtoull ( endptr + 1 , & endptr , 10 )"	71:20:1220:1262	6053609	0	True				
ANR	6053844	AssignmentExpression	"endvalue = strtoull ( endptr + 1 , & endptr , 10 )"		6053609	0		=			
ANR	6053845	Identifier	endvalue		6053609	0					
ANR	6053846	CallExpression	"strtoull ( endptr + 1 , & endptr , 10 )"		6053609	1					
ANR	6053847	Callee	strtoull		6053609	0					
ANR	6053848	Identifier	strtoull		6053609	0					
ANR	6053849	ArgumentList	endptr + 1		6053609	1					
ANR	6053850	Argument	endptr + 1		6053609	0					
ANR	6053851	AdditiveExpression	endptr + 1		6053609	0		+			
ANR	6053852	Identifier	endptr		6053609	0					
ANR	6053853	PrimaryExpression	1		6053609	1					
ANR	6053854	Argument	& endptr		6053609	1					
ANR	6053855	UnaryOperationExpression	& endptr		6053609	0					
ANR	6053856	UnaryOperator	&		6053609	0					
ANR	6053857	Identifier	endptr		6053609	1					
ANR	6053858	Argument	10		6053609	2					
ANR	6053859	PrimaryExpression	10		6053609	0					
ANR	6053860	IfStatement	if ( endvalue >= 63 )		6053609	1					
ANR	6053861	Condition	endvalue >= 63	73:24:1289:1302	6053609	0	True				
ANR	6053862	RelationalExpression	endvalue >= 63		6053609	0		>=			
ANR	6053863	Identifier	endvalue		6053609	0					
ANR	6053864	PrimaryExpression	63		6053609	1					
ANR	6053865	CompoundStatement		71:40:1262:1262	6053609	1					
ANR	6053866	ExpressionStatement	endvalue = 62	75:24:1332:1345	6053609	0	True				
ANR	6053867	AssignmentExpression	endvalue = 62		6053609	0		=			
ANR	6053868	Identifier	endvalue		6053609	0					
ANR	6053869	PrimaryExpression	62		6053609	1					
ANR	6053870	ExpressionStatement	"fprintf ( stderr , ""only 63 CPUs in NUMA mode supported.\\n"" )"	77:24:1372:1458	6053609	1	True				
ANR	6053871	CallExpression	"fprintf ( stderr , ""only 63 CPUs in NUMA mode supported.\\n"" )"		6053609	0					
ANR	6053872	Callee	fprintf		6053609	0					
ANR	6053873	Identifier	fprintf		6053609	0					
ANR	6053874	ArgumentList	stderr		6053609	1					
ANR	6053875	Argument	stderr		6053609	0					
ANR	6053876	Identifier	stderr		6053609	0					
ANR	6053877	Argument	"""only 63 CPUs in NUMA mode supported.\\n"""		6053609	1					
ANR	6053878	PrimaryExpression	"""only 63 CPUs in NUMA mode supported.\\n"""		6053609	0					
ANR	6053879	Statement	value	83:20:1504:1508	6053609	2	True				
ANR	6053880	Statement	=	83:26:1510:1510	6053609	3	True				
ANR	6053881	Statement	(	83:28:1512:1512	6053609	4	True				
ANR	6053882	Statement	2UL	83:29:1513:1515	6053609	5	True				
ANR	6053883	Statement	L	83:32:1516:1516	6053609	6	True				
ANR	6053884	Statement	<<	83:34:1518:1519	6053609	7	True				
ANR	6053885	Statement	endvalue	83:37:1521:1528	6053609	8	True				
ANR	6053886	Statement	)	83:45:1529:1529	6053609	9	True				
ANR	6053887	Statement	-	83:47:1531:1531	6053609	10	True				
ANR	6053888	Statement	(	83:49:1533:1533	6053609	11	True				
ANR	6053889	Statement	1UL	83:50:1534:1536	6053609	12	True				
ANR	6053890	Statement	L	83:53:1537:1537	6053609	13	True				
ANR	6053891	Statement	<<	83:55:1539:1540	6053609	14	True				
ANR	6053892	Statement	value	83:58:1542:1546	6053609	15	True				
ANR	6053893	Statement	)	83:63:1547:1547	6053609	16	True				
ANR	6053894	ExpressionStatement		83:64:1548:1548	6053609	17	True				
ANR	6053895	ElseStatement	else		6053609	0					
ANR	6053896	CompoundStatement		83:23:1531:1531	6053609	0					
ANR	6053897	Statement	value	87:20:1597:1601	6053609	0	True				
ANR	6053898	Statement	=	87:26:1603:1603	6053609	1	True				
ANR	6053899	Statement	1UL	87:28:1605:1607	6053609	2	True				
ANR	6053900	ExpressionStatement	L << value	87:31:1608:1618	6053609	3	True				
ANR	6053901	ShiftExpression	L << value		6053609	0		<<			
ANR	6053902	Identifier	L		6053609	0					
ANR	6053903	Identifier	value		6053609	1					
ANR	6053904	ExpressionStatement	node_cpumask [ nodenr ] = value	93:12:1667:1695	6053609	2	True				
ANR	6053905	AssignmentExpression	node_cpumask [ nodenr ] = value		6053609	0		=			
ANR	6053906	ArrayIndexing	node_cpumask [ nodenr ]		6053609	0					
ANR	6053907	Identifier	node_cpumask		6053609	0					
ANR	6053908	Identifier	nodenr		6053609	1					
ANR	6053909	Identifier	value		6053609	1					
ANR	6053910	ExpressionStatement	nb_numa_nodes ++	97:8:1717:1732	6053609	3	True				
ANR	6053911	PostIncDecOperationExpression	nb_numa_nodes ++		6053609	0					
ANR	6053912	Identifier	nb_numa_nodes		6053609	0					
ANR	6053913	IncDec	++		6053609	1					
ANR	6053914	ReturnStatement	return ;	101:4:1746:1752	6053609	6	True				
ANR	6053915	ReturnType	static void		6053609	1					
ANR	6053916	Identifier	numa_add		6053609	2					
ANR	6053917	ParameterList	const char * optarg		6053609	3					
ANR	6053918	Parameter	const char * optarg	1:21:21:38	6053609	0	True				
ANR	6053919	ParameterType	const char *		6053609	0					
ANR	6053920	Identifier	optarg		6053609	1					
ANR	6053921	CFGEntryNode	ENTRY		6053609		True				
ANR	6053922	CFGExitNode	EXIT		6053609		True				
ANR	6053923	Symbol	strcmp		6053609						
ANR	6053924	Symbol	* node_cpumask		6053609						
ANR	6053925	Symbol	endvalue		6053609						
ANR	6053926	Symbol	NULL		6053609						
ANR	6053927	Symbol	nb_numa_nodes		6053609						
ANR	6053928	Symbol	endptr		6053609						
ANR	6053929	Symbol	* nodenr		6053609						
ANR	6053930	Symbol	nodenr		6053609						
ANR	6053931	Symbol	* endptr		6053609						
ANR	6053932	Symbol	get_param_value		6053609						
ANR	6053933	Symbol	& endptr		6053609						
ANR	6053934	Symbol	strtosz		6053609						
ANR	6053935	Symbol	optarg		6053609						
ANR	6053936	Symbol	stderr		6053609						
ANR	6053937	Symbol	node_mem		6053609						
ANR	6053938	Symbol	strtoull		6053609						
ANR	6053939	Symbol	sval		6053609						
ANR	6053940	Symbol	value		6053609						
ANR	6053941	Symbol	get_opt_name		6053609						
ANR	6053942	Symbol	* node_mem		6053609						
ANR	6053943	Symbol	node_cpumask		6053609						
ANR	6053944	Symbol	option		6053609						
