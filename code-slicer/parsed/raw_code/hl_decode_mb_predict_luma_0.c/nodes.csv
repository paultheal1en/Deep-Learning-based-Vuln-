command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4656442	File	/home/p4ultr4n/workplace/ReVeal/raw_code/hl_decode_mb_predict_luma_0.c								
ANR	4656443	Function	hl_decode_mb_predict_luma	1:0:0:6134							
ANR	4656444	FunctionDef	"hl_decode_mb_predict_luma (H264Context * h , int mb_type , int is_h264 , int simple , int transform_bypass , int pixel_shift , int * block_offset , int linesize , uint8_t * dest_y , int p)"		4656443	0					
ANR	4656445	CompoundStatement		17:0:598:6134	4656443	0					
ANR	4656446	IdentifierDeclStatement	"void ( * idct_add ) ( uint8_t * dst , int16_t * block , int stride ) ;"	19:4:605:663	4656443	0	True				
ANR	4656447	IdentifierDecl	"( * idct_add ) ( uint8_t * dst , int16_t * block , int stride )"		4656443	0					
ANR	4656448	IdentifierDeclType	"void ( * ) ( uint8_t * dst , int16_t * block , int stride )"		4656443	0					
ANR	4656449	Identifier	idct_add		4656443	1					
ANR	4656450	Identifier	dst		4656443	2					
ANR	4656451	Identifier	block		4656443	3					
ANR	4656452	IdentifierDeclStatement	"void ( * idct_dc_add ) ( uint8_t * dst , int16_t * block , int stride ) ;"	21:4:670:731	4656443	1	True				
ANR	4656453	IdentifierDecl	"( * idct_dc_add ) ( uint8_t * dst , int16_t * block , int stride )"		4656443	0					
ANR	4656454	IdentifierDeclType	"void ( * ) ( uint8_t * dst , int16_t * block , int stride )"		4656443	0					
ANR	4656455	Identifier	idct_dc_add		4656443	1					
ANR	4656456	Identifier	dst		4656443	2					
ANR	4656457	Identifier	block		4656443	3					
ANR	4656458	IdentifierDeclStatement	int i ;	23:4:738:743	4656443	2	True				
ANR	4656459	IdentifierDecl	i		4656443	0					
ANR	4656460	IdentifierDeclType	int		4656443	0					
ANR	4656461	Identifier	i		4656443	1					
ANR	4656462	IdentifierDeclStatement	int qscale = p == 0 ? h -> qscale : h -> chroma_qp [ p - 1 ] ;	25:4:750:803	4656443	3	True				
ANR	4656463	IdentifierDecl	qscale = p == 0 ? h -> qscale : h -> chroma_qp [ p - 1 ]		4656443	0					
ANR	4656464	IdentifierDeclType	int		4656443	0					
ANR	4656465	Identifier	qscale		4656443	1					
ANR	4656466	AssignmentExpression	qscale = p == 0 ? h -> qscale : h -> chroma_qp [ p - 1 ]		4656443	2		=			
ANR	4656467	Identifier	qscale		4656443	0					
ANR	4656468	ConditionalExpression	p == 0 ? h -> qscale : h -> chroma_qp [ p - 1 ]		4656443	1					
ANR	4656469	Condition	p == 0		4656443	0					
ANR	4656470	EqualityExpression	p == 0		4656443	0		==			
ANR	4656471	Identifier	p		4656443	0					
ANR	4656472	PrimaryExpression	0		4656443	1					
ANR	4656473	PtrMemberAccess	h -> qscale		4656443	1					
ANR	4656474	Identifier	h		4656443	0					
ANR	4656475	Identifier	qscale		4656443	1					
ANR	4656476	ArrayIndexing	h -> chroma_qp [ p - 1 ]		4656443	2					
ANR	4656477	PtrMemberAccess	h -> chroma_qp		4656443	0					
ANR	4656478	Identifier	h		4656443	0					
ANR	4656479	Identifier	chroma_qp		4656443	1					
ANR	4656480	AdditiveExpression	p - 1		4656443	1		-			
ANR	4656481	Identifier	p		4656443	0					
ANR	4656482	PrimaryExpression	1		4656443	1					
ANR	4656483	ExpressionStatement	block_offset += 16 * p	27:4:810:832	4656443	4	True				
ANR	4656484	AssignmentExpression	block_offset += 16 * p		4656443	0		+=			
ANR	4656485	Identifier	block_offset		4656443	0					
ANR	4656486	MultiplicativeExpression	16 * p		4656443	1		*			
ANR	4656487	PrimaryExpression	16		4656443	0					
ANR	4656488	Identifier	p		4656443	1					
ANR	4656489	IfStatement	if ( IS_INTRA4x4 ( mb_type ) )		4656443	5					
ANR	4656490	Condition	IS_INTRA4x4 ( mb_type )	29:8:843:862	4656443	0	True				
ANR	4656491	CallExpression	IS_INTRA4x4 ( mb_type )		4656443	0					
ANR	4656492	Callee	IS_INTRA4x4		4656443	0					
ANR	4656493	Identifier	IS_INTRA4x4		4656443	0					
ANR	4656494	ArgumentList	mb_type		4656443	1					
ANR	4656495	Argument	mb_type		4656443	0					
ANR	4656496	Identifier	mb_type		4656443	0					
ANR	4656497	CompoundStatement		13:30:266:266	4656443	1					
ANR	4656498	IfStatement	if ( IS_8x8DCT ( mb_type ) )		4656443	0					
ANR	4656499	Condition	IS_8x8DCT ( mb_type )	31:12:880:897	4656443	0	True				
ANR	4656500	CallExpression	IS_8x8DCT ( mb_type )		4656443	0					
ANR	4656501	Callee	IS_8x8DCT		4656443	0					
ANR	4656502	Identifier	IS_8x8DCT		4656443	0					
ANR	4656503	ArgumentList	mb_type		4656443	1					
ANR	4656504	Argument	mb_type		4656443	0					
ANR	4656505	Identifier	mb_type		4656443	0					
ANR	4656506	CompoundStatement		15:32:301:301	4656443	1					
ANR	4656507	IfStatement	if ( transform_bypass )		4656443	0					
ANR	4656508	Condition	transform_bypass	33:16:919:934	4656443	0	True				
ANR	4656509	Identifier	transform_bypass		4656443	0					
ANR	4656510	CompoundStatement		17:34:338:338	4656443	1					
ANR	4656511	ExpressionStatement	idct_dc_add = idct_add = h -> h264dsp . h264_add_pixels8_clear	35:16:956:1034	4656443	0	True				
ANR	4656512	AssignmentExpression	idct_dc_add = idct_add = h -> h264dsp . h264_add_pixels8_clear		4656443	0		=			
ANR	4656513	Identifier	idct_dc_add		4656443	0					
ANR	4656514	AssignmentExpression	idct_add = h -> h264dsp . h264_add_pixels8_clear		4656443	1		=			
ANR	4656515	Identifier	idct_add		4656443	0					
ANR	4656516	MemberAccess	h -> h264dsp . h264_add_pixels8_clear		4656443	1					
ANR	4656517	PtrMemberAccess	h -> h264dsp		4656443	0					
ANR	4656518	Identifier	h		4656443	0					
ANR	4656519	Identifier	h264dsp		4656443	1					
ANR	4656520	Identifier	h264_add_pixels8_clear		4656443	1					
ANR	4656521	ElseStatement	else		4656443	0					
ANR	4656522	CompoundStatement		23:19:457:457	4656443	0					
ANR	4656523	ExpressionStatement	idct_dc_add = h -> h264dsp . h264_idct8_dc_add	41:16:1075:1117	4656443	0	True				
ANR	4656524	AssignmentExpression	idct_dc_add = h -> h264dsp . h264_idct8_dc_add		4656443	0		=			
ANR	4656525	Identifier	idct_dc_add		4656443	0					
ANR	4656526	MemberAccess	h -> h264dsp . h264_idct8_dc_add		4656443	1					
ANR	4656527	PtrMemberAccess	h -> h264dsp		4656443	0					
ANR	4656528	Identifier	h		4656443	0					
ANR	4656529	Identifier	h264dsp		4656443	1					
ANR	4656530	Identifier	h264_idct8_dc_add		4656443	1					
ANR	4656531	ExpressionStatement	idct_add = h -> h264dsp . h264_idct8_add	43:16:1136:1175	4656443	1	True				
ANR	4656532	AssignmentExpression	idct_add = h -> h264dsp . h264_idct8_add		4656443	0		=			
ANR	4656533	Identifier	idct_add		4656443	0					
ANR	4656534	MemberAccess	h -> h264dsp . h264_idct8_add		4656443	1					
ANR	4656535	PtrMemberAccess	h -> h264dsp		4656443	0					
ANR	4656536	Identifier	h		4656443	0					
ANR	4656537	Identifier	h264dsp		4656443	1					
ANR	4656538	Identifier	h264_idct8_add		4656443	1					
ANR	4656539	ForStatement	for ( i = 0 ; i < 16 ; i += 4 )		4656443	1					
ANR	4656540	ForInit	i = 0 ;	47:17:1210:1215	4656443	0	True				
ANR	4656541	AssignmentExpression	i = 0		4656443	0		=			
ANR	4656542	Identifier	i		4656443	0					
ANR	4656543	PrimaryExpression	0		4656443	1					
ANR	4656544	Condition	i < 16	47:24:1217:1222	4656443	1	True				
ANR	4656545	RelationalExpression	i < 16		4656443	0		<			
ANR	4656546	Identifier	i		4656443	0					
ANR	4656547	PrimaryExpression	16		4656443	1					
ANR	4656548	AssignmentExpression	i += 4	47:32:1225:1230	4656443	2	True	+=			
ANR	4656549	Identifier	i		4656443	0					
ANR	4656550	PrimaryExpression	4		4656443	1					
ANR	4656551	CompoundStatement		35:16:717:775	4656443	3					
ANR	4656552	Statement	uint8_t	49:16:1252:1258	4656443	0	True				
ANR	4656553	Statement	*	49:24:1260:1260	4656443	1	True				
ANR	4656554	Statement	const	49:25:1261:1265	4656443	2	True				
ANR	4656555	ExpressionStatement	ptr = dest_y + block_offset [ i ]	49:31:1267:1297	4656443	3	True				
ANR	4656556	AssignmentExpression	ptr = dest_y + block_offset [ i ]		4656443	0		=			
ANR	4656557	Identifier	ptr		4656443	0					
ANR	4656558	AdditiveExpression	dest_y + block_offset [ i ]		4656443	1		+			
ANR	4656559	Identifier	dest_y		4656443	0					
ANR	4656560	ArrayIndexing	block_offset [ i ]		4656443	1					
ANR	4656561	Identifier	block_offset		4656443	0					
ANR	4656562	Identifier	i		4656443	1					
ANR	4656563	IdentifierDeclStatement	const int dir = h -> intra4x4_pred_mode_cache [ scan8 [ i ] ] ;	51:16:1316:1374	4656443	4	True				
ANR	4656564	IdentifierDecl	dir = h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		4656443	0					
ANR	4656565	IdentifierDeclType	const int		4656443	0					
ANR	4656566	Identifier	dir		4656443	1					
ANR	4656567	AssignmentExpression	dir = h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		4656443	2		=			
ANR	4656568	Identifier	dir		4656443	0					
ANR	4656569	ArrayIndexing	h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		4656443	1					
ANR	4656570	PtrMemberAccess	h -> intra4x4_pred_mode_cache		4656443	0					
ANR	4656571	Identifier	h		4656443	0					
ANR	4656572	Identifier	intra4x4_pred_mode_cache		4656443	1					
ANR	4656573	ArrayIndexing	scan8 [ i ]		4656443	1					
ANR	4656574	Identifier	scan8		4656443	0					
ANR	4656575	Identifier	i		4656443	1					
ANR	4656576	IfStatement	if ( transform_bypass && h -> sps . profile_idc == 244 && dir <= 1 )		4656443	5					
ANR	4656577	Condition	transform_bypass && h -> sps . profile_idc == 244 && dir <= 1	53:20:1397:1453	4656443	0	True				
ANR	4656578	AndExpression	transform_bypass && h -> sps . profile_idc == 244 && dir <= 1		4656443	0		&&			
ANR	4656579	Identifier	transform_bypass		4656443	0					
ANR	4656580	AndExpression	h -> sps . profile_idc == 244 && dir <= 1		4656443	1		&&			
ANR	4656581	EqualityExpression	h -> sps . profile_idc == 244		4656443	0		==			
ANR	4656582	MemberAccess	h -> sps . profile_idc		4656443	0					
ANR	4656583	PtrMemberAccess	h -> sps		4656443	0					
ANR	4656584	Identifier	h		4656443	0					
ANR	4656585	Identifier	sps		4656443	1					
ANR	4656586	Identifier	profile_idc		4656443	1					
ANR	4656587	PrimaryExpression	244		4656443	1					
ANR	4656588	RelationalExpression	dir <= 1		4656443	1		<=			
ANR	4656589	Identifier	dir		4656443	0					
ANR	4656590	PrimaryExpression	1		4656443	1					
ANR	4656591	CompoundStatement		37:79:857:857	4656443	1					
ANR	4656592	ExpressionStatement	"h -> hpc . pred8x8l_add [ dir ] ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"	55:20:1479:1561	4656443	0	True				
ANR	4656593	CallExpression	"h -> hpc . pred8x8l_add [ dir ] ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"		4656443	0					
ANR	4656594	Callee	h -> hpc . pred8x8l_add [ dir ]		4656443	0					
ANR	4656595	ArrayIndexing	h -> hpc . pred8x8l_add [ dir ]		4656443	0					
ANR	4656596	MemberAccess	h -> hpc . pred8x8l_add		4656443	0					
ANR	4656597	PtrMemberAccess	h -> hpc		4656443	0					
ANR	4656598	Identifier	h		4656443	0					
ANR	4656599	Identifier	hpc		4656443	1					
ANR	4656600	Identifier	pred8x8l_add		4656443	1					
ANR	4656601	Identifier	dir		4656443	1					
ANR	4656602	ArgumentList	ptr		4656443	1					
ANR	4656603	Argument	ptr		4656443	0					
ANR	4656604	Identifier	ptr		4656443	0					
ANR	4656605	Argument	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	1					
ANR	4656606	AdditiveExpression	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	0		+			
ANR	4656607	PtrMemberAccess	h -> mb		4656443	0					
ANR	4656608	Identifier	h		4656443	0					
ANR	4656609	Identifier	mb		4656443	1					
ANR	4656610	ShiftExpression	i * 16 + p * 256 << pixel_shift		4656443	1		<<			
ANR	4656611	AdditiveExpression	i * 16 + p * 256		4656443	0		+			
ANR	4656612	MultiplicativeExpression	i * 16		4656443	0		*			
ANR	4656613	Identifier	i		4656443	0					
ANR	4656614	PrimaryExpression	16		4656443	1					
ANR	4656615	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4656616	Identifier	p		4656443	0					
ANR	4656617	PrimaryExpression	256		4656443	1					
ANR	4656618	Identifier	pixel_shift		4656443	1					
ANR	4656619	Argument	linesize		4656443	2					
ANR	4656620	Identifier	linesize		4656443	0					
ANR	4656621	ElseStatement	else		4656443	0					
ANR	4656622	CompoundStatement		43:20:1011:1069	4656443	0					
ANR	4656623	IdentifierDeclStatement	const int nnz = h -> non_zero_count_cache [ scan8 [ i + p * 16 ] ] ;	59:20:1610:1668	4656443	0	True				
ANR	4656624	IdentifierDecl	nnz = h -> non_zero_count_cache [ scan8 [ i + p * 16 ] ]		4656443	0					
ANR	4656625	IdentifierDeclType	const int		4656443	0					
ANR	4656626	Identifier	nnz		4656443	1					
ANR	4656627	AssignmentExpression	nnz = h -> non_zero_count_cache [ scan8 [ i + p * 16 ] ]		4656443	2		=			
ANR	4656628	Identifier	nnz		4656443	0					
ANR	4656629	ArrayIndexing	h -> non_zero_count_cache [ scan8 [ i + p * 16 ] ]		4656443	1					
ANR	4656630	PtrMemberAccess	h -> non_zero_count_cache		4656443	0					
ANR	4656631	Identifier	h		4656443	0					
ANR	4656632	Identifier	non_zero_count_cache		4656443	1					
ANR	4656633	ArrayIndexing	scan8 [ i + p * 16 ]		4656443	1					
ANR	4656634	Identifier	scan8		4656443	0					
ANR	4656635	AdditiveExpression	i + p * 16		4656443	1		+			
ANR	4656636	Identifier	i		4656443	0					
ANR	4656637	MultiplicativeExpression	p * 16		4656443	1		*			
ANR	4656638	Identifier	p		4656443	0					
ANR	4656639	PrimaryExpression	16		4656443	1					
ANR	4656640	ExpressionStatement	"h -> hpc . pred8x8l [ dir ] ( ptr , ( h -> topleft_samples_available << i ) & 0x8000 , ( h -> topright_samples_available << i ) & 0x4000 , linesize )"	61:20:1691:1861	4656443	1	True				
ANR	4656641	CallExpression	"h -> hpc . pred8x8l [ dir ] ( ptr , ( h -> topleft_samples_available << i ) & 0x8000 , ( h -> topright_samples_available << i ) & 0x4000 , linesize )"		4656443	0					
ANR	4656642	Callee	h -> hpc . pred8x8l [ dir ]		4656443	0					
ANR	4656643	ArrayIndexing	h -> hpc . pred8x8l [ dir ]		4656443	0					
ANR	4656644	MemberAccess	h -> hpc . pred8x8l		4656443	0					
ANR	4656645	PtrMemberAccess	h -> hpc		4656443	0					
ANR	4656646	Identifier	h		4656443	0					
ANR	4656647	Identifier	hpc		4656443	1					
ANR	4656648	Identifier	pred8x8l		4656443	1					
ANR	4656649	Identifier	dir		4656443	1					
ANR	4656650	ArgumentList	ptr		4656443	1					
ANR	4656651	Argument	ptr		4656443	0					
ANR	4656652	Identifier	ptr		4656443	0					
ANR	4656653	Argument	( h -> topleft_samples_available << i ) & 0x8000		4656443	1					
ANR	4656654	BitAndExpression	( h -> topleft_samples_available << i ) & 0x8000		4656443	0		&			
ANR	4656655	ShiftExpression	h -> topleft_samples_available << i		4656443	0		<<			
ANR	4656656	PtrMemberAccess	h -> topleft_samples_available		4656443	0					
ANR	4656657	Identifier	h		4656443	0					
ANR	4656658	Identifier	topleft_samples_available		4656443	1					
ANR	4656659	Identifier	i		4656443	1					
ANR	4656660	PrimaryExpression	0x8000		4656443	1					
ANR	4656661	Argument	( h -> topright_samples_available << i ) & 0x4000		4656443	2					
ANR	4656662	BitAndExpression	( h -> topright_samples_available << i ) & 0x4000		4656443	0		&			
ANR	4656663	ShiftExpression	h -> topright_samples_available << i		4656443	0		<<			
ANR	4656664	PtrMemberAccess	h -> topright_samples_available		4656443	0					
ANR	4656665	Identifier	h		4656443	0					
ANR	4656666	Identifier	topright_samples_available		4656443	1					
ANR	4656667	Identifier	i		4656443	1					
ANR	4656668	PrimaryExpression	0x4000		4656443	1					
ANR	4656669	Argument	linesize		4656443	3					
ANR	4656670	Identifier	linesize		4656443	0					
ANR	4656671	IfStatement	if ( nnz )		4656443	2					
ANR	4656672	Condition	nnz	65:24:1888:1890	4656443	0	True				
ANR	4656673	Identifier	nnz		4656443	0					
ANR	4656674	CompoundStatement		49:29:1294:1294	4656443	1					
ANR	4656675	IfStatement	"if ( nnz == 1 && dctcoef_get ( h -> mb , pixel_shift , i * 16 + p * 256 ) )"		4656443	0					
ANR	4656676	Condition	"nnz == 1 && dctcoef_get ( h -> mb , pixel_shift , i * 16 + p * 256 )"	67:28:1924:1984	4656443	0	True				
ANR	4656677	AndExpression	"nnz == 1 && dctcoef_get ( h -> mb , pixel_shift , i * 16 + p * 256 )"		4656443	0		&&			
ANR	4656678	EqualityExpression	nnz == 1		4656443	0		==			
ANR	4656679	Identifier	nnz		4656443	0					
ANR	4656680	PrimaryExpression	1		4656443	1					
ANR	4656681	CallExpression	"dctcoef_get ( h -> mb , pixel_shift , i * 16 + p * 256 )"		4656443	1					
ANR	4656682	Callee	dctcoef_get		4656443	0					
ANR	4656683	Identifier	dctcoef_get		4656443	0					
ANR	4656684	ArgumentList	h -> mb		4656443	1					
ANR	4656685	Argument	h -> mb		4656443	0					
ANR	4656686	PtrMemberAccess	h -> mb		4656443	0					
ANR	4656687	Identifier	h		4656443	0					
ANR	4656688	Identifier	mb		4656443	1					
ANR	4656689	Argument	pixel_shift		4656443	1					
ANR	4656690	Identifier	pixel_shift		4656443	0					
ANR	4656691	Argument	i * 16 + p * 256		4656443	2					
ANR	4656692	AdditiveExpression	i * 16 + p * 256		4656443	0		+			
ANR	4656693	MultiplicativeExpression	i * 16		4656443	0		*			
ANR	4656694	Identifier	i		4656443	0					
ANR	4656695	PrimaryExpression	16		4656443	1					
ANR	4656696	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4656697	Identifier	p		4656443	0					
ANR	4656698	PrimaryExpression	256		4656443	1					
ANR	4656699	ExpressionStatement	"idct_dc_add ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"	69:28:2016:2085	4656443	1	True				
ANR	4656700	CallExpression	"idct_dc_add ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"		4656443	0					
ANR	4656701	Callee	idct_dc_add		4656443	0					
ANR	4656702	Identifier	idct_dc_add		4656443	0					
ANR	4656703	ArgumentList	ptr		4656443	1					
ANR	4656704	Argument	ptr		4656443	0					
ANR	4656705	Identifier	ptr		4656443	0					
ANR	4656706	Argument	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	1					
ANR	4656707	AdditiveExpression	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	0		+			
ANR	4656708	PtrMemberAccess	h -> mb		4656443	0					
ANR	4656709	Identifier	h		4656443	0					
ANR	4656710	Identifier	mb		4656443	1					
ANR	4656711	ShiftExpression	i * 16 + p * 256 << pixel_shift		4656443	1		<<			
ANR	4656712	AdditiveExpression	i * 16 + p * 256		4656443	0		+			
ANR	4656713	MultiplicativeExpression	i * 16		4656443	0		*			
ANR	4656714	Identifier	i		4656443	0					
ANR	4656715	PrimaryExpression	16		4656443	1					
ANR	4656716	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4656717	Identifier	p		4656443	0					
ANR	4656718	PrimaryExpression	256		4656443	1					
ANR	4656719	Identifier	pixel_shift		4656443	1					
ANR	4656720	Argument	linesize		4656443	2					
ANR	4656721	Identifier	linesize		4656443	0					
ANR	4656722	ElseStatement	else		4656443	0					
ANR	4656723	ExpressionStatement	"idct_add ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"	73:28:2146:2212	4656443	0	True				
ANR	4656724	CallExpression	"idct_add ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"		4656443	0					
ANR	4656725	Callee	idct_add		4656443	0					
ANR	4656726	Identifier	idct_add		4656443	0					
ANR	4656727	ArgumentList	ptr		4656443	1					
ANR	4656728	Argument	ptr		4656443	0					
ANR	4656729	Identifier	ptr		4656443	0					
ANR	4656730	Argument	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	1					
ANR	4656731	AdditiveExpression	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	0		+			
ANR	4656732	PtrMemberAccess	h -> mb		4656443	0					
ANR	4656733	Identifier	h		4656443	0					
ANR	4656734	Identifier	mb		4656443	1					
ANR	4656735	ShiftExpression	i * 16 + p * 256 << pixel_shift		4656443	1		<<			
ANR	4656736	AdditiveExpression	i * 16 + p * 256		4656443	0		+			
ANR	4656737	MultiplicativeExpression	i * 16		4656443	0		*			
ANR	4656738	Identifier	i		4656443	0					
ANR	4656739	PrimaryExpression	16		4656443	1					
ANR	4656740	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4656741	Identifier	p		4656443	0					
ANR	4656742	PrimaryExpression	256		4656443	1					
ANR	4656743	Identifier	pixel_shift		4656443	1					
ANR	4656744	Argument	linesize		4656443	2					
ANR	4656745	Identifier	linesize		4656443	0					
ANR	4656746	ElseStatement	else		4656443	0					
ANR	4656747	CompoundStatement		65:15:1688:1688	4656443	0					
ANR	4656748	IfStatement	if ( transform_bypass )		4656443	0					
ANR	4656749	Condition	transform_bypass	83:16:2306:2321	4656443	0	True				
ANR	4656750	Identifier	transform_bypass		4656443	0					
ANR	4656751	CompoundStatement		67:34:1725:1725	4656443	1					
ANR	4656752	ExpressionStatement	idct_dc_add = idct_add = h -> h264dsp . h264_add_pixels4_clear	85:16:2343:2423	4656443	0	True				
ANR	4656753	AssignmentExpression	idct_dc_add = idct_add = h -> h264dsp . h264_add_pixels4_clear		4656443	0		=			
ANR	4656754	Identifier	idct_dc_add		4656443	0					
ANR	4656755	AssignmentExpression	idct_add = h -> h264dsp . h264_add_pixels4_clear		4656443	1		=			
ANR	4656756	Identifier	idct_add		4656443	0					
ANR	4656757	MemberAccess	h -> h264dsp . h264_add_pixels4_clear		4656443	1					
ANR	4656758	PtrMemberAccess	h -> h264dsp		4656443	0					
ANR	4656759	Identifier	h		4656443	0					
ANR	4656760	Identifier	h264dsp		4656443	1					
ANR	4656761	Identifier	h264_add_pixels4_clear		4656443	1					
ANR	4656762	ElseStatement	else		4656443	0					
ANR	4656763	CompoundStatement		73:19:1846:1846	4656443	0					
ANR	4656764	ExpressionStatement	idct_dc_add = h -> h264dsp . h264_idct_dc_add	91:16:2464:2505	4656443	0	True				
ANR	4656765	AssignmentExpression	idct_dc_add = h -> h264dsp . h264_idct_dc_add		4656443	0		=			
ANR	4656766	Identifier	idct_dc_add		4656443	0					
ANR	4656767	MemberAccess	h -> h264dsp . h264_idct_dc_add		4656443	1					
ANR	4656768	PtrMemberAccess	h -> h264dsp		4656443	0					
ANR	4656769	Identifier	h		4656443	0					
ANR	4656770	Identifier	h264dsp		4656443	1					
ANR	4656771	Identifier	h264_idct_dc_add		4656443	1					
ANR	4656772	ExpressionStatement	idct_add = h -> h264dsp . h264_idct_add	93:16:2524:2562	4656443	1	True				
ANR	4656773	AssignmentExpression	idct_add = h -> h264dsp . h264_idct_add		4656443	0		=			
ANR	4656774	Identifier	idct_add		4656443	0					
ANR	4656775	MemberAccess	h -> h264dsp . h264_idct_add		4656443	1					
ANR	4656776	PtrMemberAccess	h -> h264dsp		4656443	0					
ANR	4656777	Identifier	h		4656443	0					
ANR	4656778	Identifier	h264dsp		4656443	1					
ANR	4656779	Identifier	h264_idct_add		4656443	1					
ANR	4656780	ForStatement	for ( i = 0 ; i < 16 ; i ++ )		4656443	1					
ANR	4656781	ForInit	i = 0 ;	97:17:2597:2602	4656443	0	True				
ANR	4656782	AssignmentExpression	i = 0		4656443	0		=			
ANR	4656783	Identifier	i		4656443	0					
ANR	4656784	PrimaryExpression	0		4656443	1					
ANR	4656785	Condition	i < 16	97:24:2604:2609	4656443	1	True				
ANR	4656786	RelationalExpression	i < 16		4656443	0		<			
ANR	4656787	Identifier	i		4656443	0					
ANR	4656788	PrimaryExpression	16		4656443	1					
ANR	4656789	PostIncDecOperationExpression	i ++	97:32:2612:2614	4656443	2	True				
ANR	4656790	Identifier	i		4656443	0					
ANR	4656791	IncDec	++		4656443	1					
ANR	4656792	CompoundStatement		85:16:2101:2159	4656443	3					
ANR	4656793	Statement	uint8_t	99:16:2636:2642	4656443	0	True				
ANR	4656794	Statement	*	99:24:2644:2644	4656443	1	True				
ANR	4656795	Statement	const	99:25:2645:2649	4656443	2	True				
ANR	4656796	ExpressionStatement	ptr = dest_y + block_offset [ i ]	99:31:2651:2681	4656443	3	True				
ANR	4656797	AssignmentExpression	ptr = dest_y + block_offset [ i ]		4656443	0		=			
ANR	4656798	Identifier	ptr		4656443	0					
ANR	4656799	AdditiveExpression	dest_y + block_offset [ i ]		4656443	1		+			
ANR	4656800	Identifier	dest_y		4656443	0					
ANR	4656801	ArrayIndexing	block_offset [ i ]		4656443	1					
ANR	4656802	Identifier	block_offset		4656443	0					
ANR	4656803	Identifier	i		4656443	1					
ANR	4656804	IdentifierDeclStatement	const int dir = h -> intra4x4_pred_mode_cache [ scan8 [ i ] ] ;	101:16:2700:2758	4656443	4	True				
ANR	4656805	IdentifierDecl	dir = h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		4656443	0					
ANR	4656806	IdentifierDeclType	const int		4656443	0					
ANR	4656807	Identifier	dir		4656443	1					
ANR	4656808	AssignmentExpression	dir = h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		4656443	2		=			
ANR	4656809	Identifier	dir		4656443	0					
ANR	4656810	ArrayIndexing	h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		4656443	1					
ANR	4656811	PtrMemberAccess	h -> intra4x4_pred_mode_cache		4656443	0					
ANR	4656812	Identifier	h		4656443	0					
ANR	4656813	Identifier	intra4x4_pred_mode_cache		4656443	1					
ANR	4656814	ArrayIndexing	scan8 [ i ]		4656443	1					
ANR	4656815	Identifier	scan8		4656443	0					
ANR	4656816	Identifier	i		4656443	1					
ANR	4656817	IfStatement	if ( transform_bypass && h -> sps . profile_idc == 244 && dir <= 1 )		4656443	5					
ANR	4656818	Condition	transform_bypass && h -> sps . profile_idc == 244 && dir <= 1	105:20:2783:2839	4656443	0	True				
ANR	4656819	AndExpression	transform_bypass && h -> sps . profile_idc == 244 && dir <= 1		4656443	0		&&			
ANR	4656820	Identifier	transform_bypass		4656443	0					
ANR	4656821	AndExpression	h -> sps . profile_idc == 244 && dir <= 1		4656443	1		&&			
ANR	4656822	EqualityExpression	h -> sps . profile_idc == 244		4656443	0		==			
ANR	4656823	MemberAccess	h -> sps . profile_idc		4656443	0					
ANR	4656824	PtrMemberAccess	h -> sps		4656443	0					
ANR	4656825	Identifier	h		4656443	0					
ANR	4656826	Identifier	sps		4656443	1					
ANR	4656827	Identifier	profile_idc		4656443	1					
ANR	4656828	PrimaryExpression	244		4656443	1					
ANR	4656829	RelationalExpression	dir <= 1		4656443	1		<=			
ANR	4656830	Identifier	dir		4656443	0					
ANR	4656831	PrimaryExpression	1		4656443	1					
ANR	4656832	CompoundStatement		89:79:2243:2243	4656443	1					
ANR	4656833	ExpressionStatement	"h -> hpc . pred4x4_add [ dir ] ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"	107:20:2865:2946	4656443	0	True				
ANR	4656834	CallExpression	"h -> hpc . pred4x4_add [ dir ] ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"		4656443	0					
ANR	4656835	Callee	h -> hpc . pred4x4_add [ dir ]		4656443	0					
ANR	4656836	ArrayIndexing	h -> hpc . pred4x4_add [ dir ]		4656443	0					
ANR	4656837	MemberAccess	h -> hpc . pred4x4_add		4656443	0					
ANR	4656838	PtrMemberAccess	h -> hpc		4656443	0					
ANR	4656839	Identifier	h		4656443	0					
ANR	4656840	Identifier	hpc		4656443	1					
ANR	4656841	Identifier	pred4x4_add		4656443	1					
ANR	4656842	Identifier	dir		4656443	1					
ANR	4656843	ArgumentList	ptr		4656443	1					
ANR	4656844	Argument	ptr		4656443	0					
ANR	4656845	Identifier	ptr		4656443	0					
ANR	4656846	Argument	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	1					
ANR	4656847	AdditiveExpression	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	0		+			
ANR	4656848	PtrMemberAccess	h -> mb		4656443	0					
ANR	4656849	Identifier	h		4656443	0					
ANR	4656850	Identifier	mb		4656443	1					
ANR	4656851	ShiftExpression	i * 16 + p * 256 << pixel_shift		4656443	1		<<			
ANR	4656852	AdditiveExpression	i * 16 + p * 256		4656443	0		+			
ANR	4656853	MultiplicativeExpression	i * 16		4656443	0		*			
ANR	4656854	Identifier	i		4656443	0					
ANR	4656855	PrimaryExpression	16		4656443	1					
ANR	4656856	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4656857	Identifier	p		4656443	0					
ANR	4656858	PrimaryExpression	256		4656443	1					
ANR	4656859	Identifier	pixel_shift		4656443	1					
ANR	4656860	Argument	linesize		4656443	2					
ANR	4656861	Identifier	linesize		4656443	0					
ANR	4656862	ElseStatement	else		4656443	0					
ANR	4656863	CompoundStatement		99:20:2470:2486	4656443	0					
ANR	4656864	IdentifierDeclStatement	uint8_t * topright ;	111:20:2995:3012	4656443	0	True				
ANR	4656865	IdentifierDecl	* topright		4656443	0					
ANR	4656866	IdentifierDeclType	uint8_t *		4656443	0					
ANR	4656867	Identifier	topright		4656443	1					
ANR	4656868	IdentifierDeclStatement	"int nnz , tr ;"	113:20:3035:3046	4656443	1	True				
ANR	4656869	IdentifierDecl	nnz		4656443	0					
ANR	4656870	IdentifierDeclType	int		4656443	0					
ANR	4656871	Identifier	nnz		4656443	1					
ANR	4656872	IdentifierDecl	tr		4656443	1					
ANR	4656873	IdentifierDeclType	int		4656443	0					
ANR	4656874	Identifier	tr		4656443	1					
ANR	4656875	IdentifierDeclStatement	uint64_t tr_high ;	115:20:3069:3085	4656443	2	True				
ANR	4656876	IdentifierDecl	tr_high		4656443	0					
ANR	4656877	IdentifierDeclType	uint64_t		4656443	0					
ANR	4656878	Identifier	tr_high		4656443	1					
ANR	4656879	IfStatement	if ( dir == DIAG_DOWN_LEFT_PRED || dir == VERT_LEFT_PRED )		4656443	3					
ANR	4656880	Condition	dir == DIAG_DOWN_LEFT_PRED || dir == VERT_LEFT_PRED	117:24:3112:3162	4656443	0	True				
ANR	4656881	OrExpression	dir == DIAG_DOWN_LEFT_PRED || dir == VERT_LEFT_PRED		4656443	0		||			
ANR	4656882	EqualityExpression	dir == DIAG_DOWN_LEFT_PRED		4656443	0		==			
ANR	4656883	Identifier	dir		4656443	0					
ANR	4656884	Identifier	DIAG_DOWN_LEFT_PRED		4656443	1					
ANR	4656885	EqualityExpression	dir == VERT_LEFT_PRED		4656443	1		==			
ANR	4656886	Identifier	dir		4656443	0					
ANR	4656887	Identifier	VERT_LEFT_PRED		4656443	1					
ANR	4656888	CompoundStatement		103:24:2593:2665	4656443	1					
ANR	4656889	IdentifierDeclStatement	const int topright_avail = ( h -> topright_samples_available << i ) & 0x8000 ;	119:24:3192:3264	4656443	0	True				
ANR	4656890	IdentifierDecl	topright_avail = ( h -> topright_samples_available << i ) & 0x8000		4656443	0					
ANR	4656891	IdentifierDeclType	const int		4656443	0					
ANR	4656892	Identifier	topright_avail		4656443	1					
ANR	4656893	AssignmentExpression	topright_avail = ( h -> topright_samples_available << i ) & 0x8000		4656443	2		=			
ANR	4656894	Identifier	topright_avail		4656443	0					
ANR	4656895	BitAndExpression	( h -> topright_samples_available << i ) & 0x8000		4656443	1		&			
ANR	4656896	ShiftExpression	h -> topright_samples_available << i		4656443	0		<<			
ANR	4656897	PtrMemberAccess	h -> topright_samples_available		4656443	0					
ANR	4656898	Identifier	h		4656443	0					
ANR	4656899	Identifier	topright_samples_available		4656443	1					
ANR	4656900	Identifier	i		4656443	1					
ANR	4656901	PrimaryExpression	0x8000		4656443	1					
ANR	4656902	ExpressionStatement	av_assert2 ( h -> mb_y || linesize <= block_offset [ i ] )	121:24:3291:3341	4656443	1	True				
ANR	4656903	CallExpression	av_assert2 ( h -> mb_y || linesize <= block_offset [ i ] )		4656443	0					
ANR	4656904	Callee	av_assert2		4656443	0					
ANR	4656905	Identifier	av_assert2		4656443	0					
ANR	4656906	ArgumentList	h -> mb_y || linesize <= block_offset [ i ]		4656443	1					
ANR	4656907	Argument	h -> mb_y || linesize <= block_offset [ i ]		4656443	0					
ANR	4656908	OrExpression	h -> mb_y || linesize <= block_offset [ i ]		4656443	0		||			
ANR	4656909	PtrMemberAccess	h -> mb_y		4656443	0					
ANR	4656910	Identifier	h		4656443	0					
ANR	4656911	Identifier	mb_y		4656443	1					
ANR	4656912	RelationalExpression	linesize <= block_offset [ i ]		4656443	1		<=			
ANR	4656913	Identifier	linesize		4656443	0					
ANR	4656914	ArrayIndexing	block_offset [ i ]		4656443	1					
ANR	4656915	Identifier	block_offset		4656443	0					
ANR	4656916	Identifier	i		4656443	1					
ANR	4656917	IfStatement	if ( ! topright_avail )		4656443	2					
ANR	4656918	Condition	! topright_avail	123:28:3372:3386	4656443	0	True				
ANR	4656919	UnaryOperationExpression	! topright_avail		4656443	0					
ANR	4656920	UnaryOperator	!		4656443	0					
ANR	4656921	Identifier	topright_avail		4656443	1					
ANR	4656922	CompoundStatement		107:45:2790:2790	4656443	1					
ANR	4656923	IfStatement	if ( pixel_shift )		4656443	0					
ANR	4656924	Condition	pixel_shift	125:32:3424:3434	4656443	0	True				
ANR	4656925	Identifier	pixel_shift		4656443	0					
ANR	4656926	CompoundStatement		109:45:2838:2838	4656443	1					
ANR	4656927	Statement	tr_high	127:32:3472:3478	4656443	0	True				
ANR	4656928	Statement	=	127:41:3481:3481	4656443	1	True				
ANR	4656929	Statement	(	127:43:3483:3483	4656443	2	True				
ANR	4656930	Statement	(	127:44:3484:3484	4656443	3	True				
ANR	4656931	Statement	uint16_t	127:45:3485:3492	4656443	4	True				
ANR	4656932	Statement	*	127:54:3494:3494	4656443	5	True				
ANR	4656933	Statement	)	127:55:3495:3495	4656443	6	True				
ANR	4656934	Statement	ptr	127:56:3496:3498	4656443	7	True				
ANR	4656935	Statement	)	127:59:3499:3499	4656443	8	True				
ANR	4656936	Statement	[	127:60:3500:3500	4656443	9	True				
ANR	4656937	Statement	3	127:61:3501:3501	4656443	10	True				
ANR	4656938	Statement	-	127:63:3503:3503	4656443	11	True				
ANR	4656939	Statement	linesize	127:65:3505:3512	4656443	12	True				
ANR	4656940	Statement	/	127:74:3514:3514	4656443	13	True				
ANR	4656941	Statement	2	127:76:3516:3516	4656443	14	True				
ANR	4656942	Statement	]	127:77:3517:3517	4656443	15	True				
ANR	4656943	Statement	*	127:79:3519:3519	4656443	16	True				
ANR	4656944	Statement	0x0001000100010001UL	127:81:3521:3540	4656443	17	True				
ANR	4656945	ExpressionStatement	L	127:101:3541:3542	4656443	18	True				
ANR	4656946	Identifier	L		4656443	0					
ANR	4656947	ExpressionStatement	topright = ( uint8_t * ) & tr_high	129:32:3577:3607	4656443	19	True				
ANR	4656948	AssignmentExpression	topright = ( uint8_t * ) & tr_high		4656443	0		=			
ANR	4656949	Identifier	topright		4656443	0					
ANR	4656950	CastExpression	( uint8_t * ) & tr_high		4656443	1					
ANR	4656951	CastTarget	uint8_t *		4656443	0					
ANR	4656952	UnaryOperationExpression	& tr_high		4656443	1					
ANR	4656953	UnaryOperator	&		4656443	0					
ANR	4656954	Identifier	tr_high		4656443	1					
ANR	4656955	ElseStatement	else		4656443	0					
ANR	4656956	CompoundStatement		115:35:3046:3046	4656443	0					
ANR	4656957	ExpressionStatement	tr = ptr [ 3 - linesize ] * 0x01010101u	133:32:3680:3722	4656443	0	True				
ANR	4656958	AssignmentExpression	tr = ptr [ 3 - linesize ] * 0x01010101u		4656443	0		=			
ANR	4656959	Identifier	tr		4656443	0					
ANR	4656960	MultiplicativeExpression	ptr [ 3 - linesize ] * 0x01010101u		4656443	1		*			
ANR	4656961	ArrayIndexing	ptr [ 3 - linesize ]		4656443	0					
ANR	4656962	Identifier	ptr		4656443	0					
ANR	4656963	AdditiveExpression	3 - linesize		4656443	1		-			
ANR	4656964	PrimaryExpression	3		4656443	0					
ANR	4656965	Identifier	linesize		4656443	1					
ANR	4656966	PrimaryExpression	0x01010101u		4656443	1					
ANR	4656967	ExpressionStatement	topright = ( uint8_t * ) & tr	135:32:3757:3782	4656443	1	True				
ANR	4656968	AssignmentExpression	topright = ( uint8_t * ) & tr		4656443	0		=			
ANR	4656969	Identifier	topright		4656443	0					
ANR	4656970	CastExpression	( uint8_t * ) & tr		4656443	1					
ANR	4656971	CastTarget	uint8_t *		4656443	0					
ANR	4656972	UnaryOperationExpression	& tr		4656443	1					
ANR	4656973	UnaryOperator	&		4656443	0					
ANR	4656974	Identifier	tr		4656443	1					
ANR	4656975	ElseStatement	else		4656443	0					
ANR	4656976	ExpressionStatement	topright = ptr + ( 4 << pixel_shift ) - linesize	141:28:3876:3922	4656443	0	True				
ANR	4656977	AssignmentExpression	topright = ptr + ( 4 << pixel_shift ) - linesize		4656443	0		=			
ANR	4656978	Identifier	topright		4656443	0					
ANR	4656979	AdditiveExpression	ptr + ( 4 << pixel_shift ) - linesize		4656443	1		+			
ANR	4656980	Identifier	ptr		4656443	0					
ANR	4656981	AdditiveExpression	( 4 << pixel_shift ) - linesize		4656443	1		-			
ANR	4656982	ShiftExpression	4 << pixel_shift		4656443	0		<<			
ANR	4656983	PrimaryExpression	4		4656443	0					
ANR	4656984	Identifier	pixel_shift		4656443	1					
ANR	4656985	Identifier	linesize		4656443	1					
ANR	4656986	ElseStatement	else		4656443	0					
ANR	4656987	ExpressionStatement	topright = NULL	145:24:3977:3992	4656443	0	True				
ANR	4656988	AssignmentExpression	topright = NULL		4656443	0		=			
ANR	4656989	Identifier	topright		4656443	0					
ANR	4656990	Identifier	NULL		4656443	1					
ANR	4656991	ExpressionStatement	"h -> hpc . pred4x4 [ dir ] ( ptr , topright , linesize )"	149:20:4017:4061	4656443	4	True				
ANR	4656992	CallExpression	"h -> hpc . pred4x4 [ dir ] ( ptr , topright , linesize )"		4656443	0					
ANR	4656993	Callee	h -> hpc . pred4x4 [ dir ]		4656443	0					
ANR	4656994	ArrayIndexing	h -> hpc . pred4x4 [ dir ]		4656443	0					
ANR	4656995	MemberAccess	h -> hpc . pred4x4		4656443	0					
ANR	4656996	PtrMemberAccess	h -> hpc		4656443	0					
ANR	4656997	Identifier	h		4656443	0					
ANR	4656998	Identifier	hpc		4656443	1					
ANR	4656999	Identifier	pred4x4		4656443	1					
ANR	4657000	Identifier	dir		4656443	1					
ANR	4657001	ArgumentList	ptr		4656443	1					
ANR	4657002	Argument	ptr		4656443	0					
ANR	4657003	Identifier	ptr		4656443	0					
ANR	4657004	Argument	topright		4656443	1					
ANR	4657005	Identifier	topright		4656443	0					
ANR	4657006	Argument	linesize		4656443	2					
ANR	4657007	Identifier	linesize		4656443	0					
ANR	4657008	ExpressionStatement	nnz = h -> non_zero_count_cache [ scan8 [ i + p * 16 ] ]	151:20:4084:4132	4656443	5	True				
ANR	4657009	AssignmentExpression	nnz = h -> non_zero_count_cache [ scan8 [ i + p * 16 ] ]		4656443	0		=			
ANR	4657010	Identifier	nnz		4656443	0					
ANR	4657011	ArrayIndexing	h -> non_zero_count_cache [ scan8 [ i + p * 16 ] ]		4656443	1					
ANR	4657012	PtrMemberAccess	h -> non_zero_count_cache		4656443	0					
ANR	4657013	Identifier	h		4656443	0					
ANR	4657014	Identifier	non_zero_count_cache		4656443	1					
ANR	4657015	ArrayIndexing	scan8 [ i + p * 16 ]		4656443	1					
ANR	4657016	Identifier	scan8		4656443	0					
ANR	4657017	AdditiveExpression	i + p * 16		4656443	1		+			
ANR	4657018	Identifier	i		4656443	0					
ANR	4657019	MultiplicativeExpression	p * 16		4656443	1		*			
ANR	4657020	Identifier	p		4656443	0					
ANR	4657021	PrimaryExpression	16		4656443	1					
ANR	4657022	IfStatement	if ( nnz )		4656443	6					
ANR	4657023	Condition	nnz	153:24:4159:4161	4656443	0	True				
ANR	4657024	Identifier	nnz		4656443	0					
ANR	4657025	CompoundStatement		137:29:3565:3565	4656443	1					
ANR	4657026	IfStatement	if ( is_h264 )		4656443	0					
ANR	4657027	Condition	is_h264	155:28:4195:4201	4656443	0	True				
ANR	4657028	Identifier	is_h264		4656443	0					
ANR	4657029	CompoundStatement		139:37:3605:3605	4656443	1					
ANR	4657030	IfStatement	"if ( nnz == 1 && dctcoef_get ( h -> mb , pixel_shift , i * 16 + p * 256 ) )"		4656443	0					
ANR	4657031	Condition	"nnz == 1 && dctcoef_get ( h -> mb , pixel_shift , i * 16 + p * 256 )"	157:32:4239:4299	4656443	0	True				
ANR	4657032	AndExpression	"nnz == 1 && dctcoef_get ( h -> mb , pixel_shift , i * 16 + p * 256 )"		4656443	0		&&			
ANR	4657033	EqualityExpression	nnz == 1		4656443	0		==			
ANR	4657034	Identifier	nnz		4656443	0					
ANR	4657035	PrimaryExpression	1		4656443	1					
ANR	4657036	CallExpression	"dctcoef_get ( h -> mb , pixel_shift , i * 16 + p * 256 )"		4656443	1					
ANR	4657037	Callee	dctcoef_get		4656443	0					
ANR	4657038	Identifier	dctcoef_get		4656443	0					
ANR	4657039	ArgumentList	h -> mb		4656443	1					
ANR	4657040	Argument	h -> mb		4656443	0					
ANR	4657041	PtrMemberAccess	h -> mb		4656443	0					
ANR	4657042	Identifier	h		4656443	0					
ANR	4657043	Identifier	mb		4656443	1					
ANR	4657044	Argument	pixel_shift		4656443	1					
ANR	4657045	Identifier	pixel_shift		4656443	0					
ANR	4657046	Argument	i * 16 + p * 256		4656443	2					
ANR	4657047	AdditiveExpression	i * 16 + p * 256		4656443	0		+			
ANR	4657048	MultiplicativeExpression	i * 16		4656443	0		*			
ANR	4657049	Identifier	i		4656443	0					
ANR	4657050	PrimaryExpression	16		4656443	1					
ANR	4657051	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4657052	Identifier	p		4656443	0					
ANR	4657053	PrimaryExpression	256		4656443	1					
ANR	4657054	ExpressionStatement	"idct_dc_add ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"	159:32:4335:4404	4656443	1	True				
ANR	4657055	CallExpression	"idct_dc_add ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"		4656443	0					
ANR	4657056	Callee	idct_dc_add		4656443	0					
ANR	4657057	Identifier	idct_dc_add		4656443	0					
ANR	4657058	ArgumentList	ptr		4656443	1					
ANR	4657059	Argument	ptr		4656443	0					
ANR	4657060	Identifier	ptr		4656443	0					
ANR	4657061	Argument	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	1					
ANR	4657062	AdditiveExpression	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	0		+			
ANR	4657063	PtrMemberAccess	h -> mb		4656443	0					
ANR	4657064	Identifier	h		4656443	0					
ANR	4657065	Identifier	mb		4656443	1					
ANR	4657066	ShiftExpression	i * 16 + p * 256 << pixel_shift		4656443	1		<<			
ANR	4657067	AdditiveExpression	i * 16 + p * 256		4656443	0		+			
ANR	4657068	MultiplicativeExpression	i * 16		4656443	0		*			
ANR	4657069	Identifier	i		4656443	0					
ANR	4657070	PrimaryExpression	16		4656443	1					
ANR	4657071	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4657072	Identifier	p		4656443	0					
ANR	4657073	PrimaryExpression	256		4656443	1					
ANR	4657074	Identifier	pixel_shift		4656443	1					
ANR	4657075	Argument	linesize		4656443	2					
ANR	4657076	Identifier	linesize		4656443	0					
ANR	4657077	ElseStatement	else		4656443	0					
ANR	4657078	ExpressionStatement	"idct_add ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"	163:32:4473:4539	4656443	0	True				
ANR	4657079	CallExpression	"idct_add ( ptr , h -> mb + ( i * 16 + p * 256 << pixel_shift ) , linesize )"		4656443	0					
ANR	4657080	Callee	idct_add		4656443	0					
ANR	4657081	Identifier	idct_add		4656443	0					
ANR	4657082	ArgumentList	ptr		4656443	1					
ANR	4657083	Argument	ptr		4656443	0					
ANR	4657084	Identifier	ptr		4656443	0					
ANR	4657085	Argument	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	1					
ANR	4657086	AdditiveExpression	h -> mb + ( i * 16 + p * 256 << pixel_shift )		4656443	0		+			
ANR	4657087	PtrMemberAccess	h -> mb		4656443	0					
ANR	4657088	Identifier	h		4656443	0					
ANR	4657089	Identifier	mb		4656443	1					
ANR	4657090	ShiftExpression	i * 16 + p * 256 << pixel_shift		4656443	1		<<			
ANR	4657091	AdditiveExpression	i * 16 + p * 256		4656443	0		+			
ANR	4657092	MultiplicativeExpression	i * 16		4656443	0		*			
ANR	4657093	Identifier	i		4656443	0					
ANR	4657094	PrimaryExpression	16		4656443	1					
ANR	4657095	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4657096	Identifier	p		4656443	0					
ANR	4657097	PrimaryExpression	256		4656443	1					
ANR	4657098	Identifier	pixel_shift		4656443	1					
ANR	4657099	Argument	linesize		4656443	2					
ANR	4657100	Identifier	linesize		4656443	0					
ANR	4657101	ElseStatement	else		4656443	0					
ANR	4657102	IfStatement	if ( CONFIG_SVQ3_DECODER )		4656443	0					
ANR	4657103	Condition	CONFIG_SVQ3_DECODER	165:35:4577:4595	4656443	0	True				
ANR	4657104	Identifier	CONFIG_SVQ3_DECODER		4656443	0					
ANR	4657105	ExpressionStatement	"ff_svq3_add_idct_c ( ptr , h -> mb + i * 16 + p * 256 , linesize , qscale , 0 )"	167:28:4627:4697	4656443	1	True				
ANR	4657106	CallExpression	"ff_svq3_add_idct_c ( ptr , h -> mb + i * 16 + p * 256 , linesize , qscale , 0 )"		4656443	0					
ANR	4657107	Callee	ff_svq3_add_idct_c		4656443	0					
ANR	4657108	Identifier	ff_svq3_add_idct_c		4656443	0					
ANR	4657109	ArgumentList	ptr		4656443	1					
ANR	4657110	Argument	ptr		4656443	0					
ANR	4657111	Identifier	ptr		4656443	0					
ANR	4657112	Argument	h -> mb + i * 16 + p * 256		4656443	1					
ANR	4657113	AdditiveExpression	h -> mb + i * 16 + p * 256		4656443	0		+			
ANR	4657114	PtrMemberAccess	h -> mb		4656443	0					
ANR	4657115	Identifier	h		4656443	0					
ANR	4657116	Identifier	mb		4656443	1					
ANR	4657117	AdditiveExpression	i * 16 + p * 256		4656443	1		+			
ANR	4657118	MultiplicativeExpression	i * 16		4656443	0		*			
ANR	4657119	Identifier	i		4656443	0					
ANR	4657120	PrimaryExpression	16		4656443	1					
ANR	4657121	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4657122	Identifier	p		4656443	0					
ANR	4657123	PrimaryExpression	256		4656443	1					
ANR	4657124	Argument	linesize		4656443	2					
ANR	4657125	Identifier	linesize		4656443	0					
ANR	4657126	Argument	qscale		4656443	3					
ANR	4657127	Identifier	qscale		4656443	0					
ANR	4657128	Argument	0		4656443	4					
ANR	4657129	PrimaryExpression	0		4656443	0					
ANR	4657130	ElseStatement	else		4656443	0					
ANR	4657131	CompoundStatement		161:11:4180:4180	4656443	0					
ANR	4657132	ExpressionStatement	"h -> hpc . pred16x16 [ h -> intra16x16_pred_mode ] ( dest_y , linesize )"	179:8:4790:4849	4656443	0	True				
ANR	4657133	CallExpression	"h -> hpc . pred16x16 [ h -> intra16x16_pred_mode ] ( dest_y , linesize )"		4656443	0					
ANR	4657134	Callee	h -> hpc . pred16x16 [ h -> intra16x16_pred_mode ]		4656443	0					
ANR	4657135	ArrayIndexing	h -> hpc . pred16x16 [ h -> intra16x16_pred_mode ]		4656443	0					
ANR	4657136	MemberAccess	h -> hpc . pred16x16		4656443	0					
ANR	4657137	PtrMemberAccess	h -> hpc		4656443	0					
ANR	4657138	Identifier	h		4656443	0					
ANR	4657139	Identifier	hpc		4656443	1					
ANR	4657140	Identifier	pred16x16		4656443	1					
ANR	4657141	PtrMemberAccess	h -> intra16x16_pred_mode		4656443	1					
ANR	4657142	Identifier	h		4656443	0					
ANR	4657143	Identifier	intra16x16_pred_mode		4656443	1					
ANR	4657144	ArgumentList	dest_y		4656443	1					
ANR	4657145	Argument	dest_y		4656443	0					
ANR	4657146	Identifier	dest_y		4656443	0					
ANR	4657147	Argument	linesize		4656443	1					
ANR	4657148	Identifier	linesize		4656443	0					
ANR	4657149	IfStatement	if ( is_h264 )		4656443	1					
ANR	4657150	Condition	is_h264	181:12:4864:4870	4656443	0	True				
ANR	4657151	Identifier	is_h264		4656443	0					
ANR	4657152	CompoundStatement		165:21:4274:4274	4656443	1					
ANR	4657153	IfStatement	if ( h -> non_zero_count_cache [ scan8 [ LUMA_DC_BLOCK_INDEX + p ] ] )		4656443	0					
ANR	4657154	Condition	h -> non_zero_count_cache [ scan8 [ LUMA_DC_BLOCK_INDEX + p ] ]	183:16:4892:4946	4656443	0	True				
ANR	4657155	ArrayIndexing	h -> non_zero_count_cache [ scan8 [ LUMA_DC_BLOCK_INDEX + p ] ]		4656443	0					
ANR	4657156	PtrMemberAccess	h -> non_zero_count_cache		4656443	0					
ANR	4657157	Identifier	h		4656443	0					
ANR	4657158	Identifier	non_zero_count_cache		4656443	1					
ANR	4657159	ArrayIndexing	scan8 [ LUMA_DC_BLOCK_INDEX + p ]		4656443	1					
ANR	4657160	Identifier	scan8		4656443	0					
ANR	4657161	AdditiveExpression	LUMA_DC_BLOCK_INDEX + p		4656443	1		+			
ANR	4657162	Identifier	LUMA_DC_BLOCK_INDEX		4656443	0					
ANR	4657163	Identifier	p		4656443	1					
ANR	4657164	CompoundStatement		167:73:4350:4350	4656443	1					
ANR	4657165	IfStatement	if ( ! transform_bypass )		4656443	0					
ANR	4657166	Condition	! transform_bypass	185:20:4972:4988	4656443	0	True				
ANR	4657167	UnaryOperationExpression	! transform_bypass		4656443	0					
ANR	4657168	UnaryOperator	!		4656443	0					
ANR	4657169	Identifier	transform_bypass		4656443	1					
ANR	4657170	ExpressionStatement	"h -> h264dsp . h264_luma_dc_dequant_idct ( h -> mb + ( p * 256 << pixel_shift ) , h -> mb_luma_dc [ p ] , h -> dequant4_coeff [ p ] [ qscale ] [ 0 ] )"	187:20:5012:5249	4656443	1	True				
ANR	4657171	CallExpression	"h -> h264dsp . h264_luma_dc_dequant_idct ( h -> mb + ( p * 256 << pixel_shift ) , h -> mb_luma_dc [ p ] , h -> dequant4_coeff [ p ] [ qscale ] [ 0 ] )"		4656443	0					
ANR	4657172	Callee	h -> h264dsp . h264_luma_dc_dequant_idct		4656443	0					
ANR	4657173	MemberAccess	h -> h264dsp . h264_luma_dc_dequant_idct		4656443	0					
ANR	4657174	PtrMemberAccess	h -> h264dsp		4656443	0					
ANR	4657175	Identifier	h		4656443	0					
ANR	4657176	Identifier	h264dsp		4656443	1					
ANR	4657177	Identifier	h264_luma_dc_dequant_idct		4656443	1					
ANR	4657178	ArgumentList	h -> mb + ( p * 256 << pixel_shift )		4656443	1					
ANR	4657179	Argument	h -> mb + ( p * 256 << pixel_shift )		4656443	0					
ANR	4657180	AdditiveExpression	h -> mb + ( p * 256 << pixel_shift )		4656443	0		+			
ANR	4657181	PtrMemberAccess	h -> mb		4656443	0					
ANR	4657182	Identifier	h		4656443	0					
ANR	4657183	Identifier	mb		4656443	1					
ANR	4657184	ShiftExpression	p * 256 << pixel_shift		4656443	1		<<			
ANR	4657185	MultiplicativeExpression	p * 256		4656443	0		*			
ANR	4657186	Identifier	p		4656443	0					
ANR	4657187	PrimaryExpression	256		4656443	1					
ANR	4657188	Identifier	pixel_shift		4656443	1					
ANR	4657189	Argument	h -> mb_luma_dc [ p ]		4656443	1					
ANR	4657190	ArrayIndexing	h -> mb_luma_dc [ p ]		4656443	0					
ANR	4657191	PtrMemberAccess	h -> mb_luma_dc		4656443	0					
ANR	4657192	Identifier	h		4656443	0					
ANR	4657193	Identifier	mb_luma_dc		4656443	1					
ANR	4657194	Identifier	p		4656443	1					
ANR	4657195	Argument	h -> dequant4_coeff [ p ] [ qscale ] [ 0 ]		4656443	2					
ANR	4657196	ArrayIndexing	h -> dequant4_coeff [ p ] [ qscale ] [ 0 ]		4656443	0					
ANR	4657197	ArrayIndexing	h -> dequant4_coeff [ p ] [ qscale ]		4656443	0					
ANR	4657198	ArrayIndexing	h -> dequant4_coeff [ p ]		4656443	0					
ANR	4657199	PtrMemberAccess	h -> dequant4_coeff		4656443	0					
ANR	4657200	Identifier	h		4656443	0					
ANR	4657201	Identifier	dequant4_coeff		4656443	1					
ANR	4657202	Identifier	p		4656443	1					
ANR	4657203	Identifier	qscale		4656443	1					
ANR	4657204	PrimaryExpression	0		4656443	1					
ANR	4657205	ElseStatement	else		4656443	0					
ANR	4657206	CompoundStatement		179:27:4704:5002	4656443	0					
ANR	4657207	Statement	static	195:20:5296:5301	4656443	0	True				
ANR	4657208	IdentifierDeclStatement	"const uint8_t dc_mapping [ 16 ] = { 0 * 16 , 1 * 16 , 4 * 16 , 5 * 16 , 2 * 16 , 3 * 16 , 6 * 16 , 7 * 16 , 8 * 16 , 9 * 16 , 12 * 16 , 13 * 16 , 10 * 16 , 11 * 16 , 14 * 16 , 15 * 16 } ;"	195:27:5303:5601	4656443	1	True				
ANR	4657209	IdentifierDecl	"dc_mapping [ 16 ] = { 0 * 16 , 1 * 16 , 4 * 16 , 5 * 16 , 2 * 16 , 3 * 16 , 6 * 16 , 7 * 16 , 8 * 16 , 9 * 16 , 12 * 16 , 13 * 16 , 10 * 16 , 11 * 16 , 14 * 16 , 15 * 16 }"		4656443	0					
ANR	4657210	IdentifierDeclType	const uint8_t [ 16 ]		4656443	0					
ANR	4657211	Identifier	dc_mapping		4656443	1					
ANR	4657212	PrimaryExpression	16		4656443	2					
ANR	4657213	AssignmentExpression	"dc_mapping [ 16 ] = { 0 * 16 , 1 * 16 , 4 * 16 , 5 * 16 , 2 * 16 , 3 * 16 , 6 * 16 , 7 * 16 , 8 * 16 , 9 * 16 , 12 * 16 , 13 * 16 , 10 * 16 , 11 * 16 , 14 * 16 , 15 * 16 }"		4656443	3		=			
ANR	4657214	Identifier	dc_mapping		4656443	0					
ANR	4657215	InitializerList	0 * 16		4656443	1					
ANR	4657216	MultiplicativeExpression	0 * 16		4656443	0		*			
ANR	4657217	PrimaryExpression	0		4656443	0					
ANR	4657218	PrimaryExpression	16		4656443	1					
ANR	4657219	MultiplicativeExpression	1 * 16		4656443	1		*			
ANR	4657220	PrimaryExpression	1		4656443	0					
ANR	4657221	PrimaryExpression	16		4656443	1					
ANR	4657222	MultiplicativeExpression	4 * 16		4656443	2		*			
ANR	4657223	PrimaryExpression	4		4656443	0					
ANR	4657224	PrimaryExpression	16		4656443	1					
ANR	4657225	MultiplicativeExpression	5 * 16		4656443	3		*			
ANR	4657226	PrimaryExpression	5		4656443	0					
ANR	4657227	PrimaryExpression	16		4656443	1					
ANR	4657228	MultiplicativeExpression	2 * 16		4656443	4		*			
ANR	4657229	PrimaryExpression	2		4656443	0					
ANR	4657230	PrimaryExpression	16		4656443	1					
ANR	4657231	MultiplicativeExpression	3 * 16		4656443	5		*			
ANR	4657232	PrimaryExpression	3		4656443	0					
ANR	4657233	PrimaryExpression	16		4656443	1					
ANR	4657234	MultiplicativeExpression	6 * 16		4656443	6		*			
ANR	4657235	PrimaryExpression	6		4656443	0					
ANR	4657236	PrimaryExpression	16		4656443	1					
ANR	4657237	MultiplicativeExpression	7 * 16		4656443	7		*			
ANR	4657238	PrimaryExpression	7		4656443	0					
ANR	4657239	PrimaryExpression	16		4656443	1					
ANR	4657240	MultiplicativeExpression	8 * 16		4656443	8		*			
ANR	4657241	PrimaryExpression	8		4656443	0					
ANR	4657242	PrimaryExpression	16		4656443	1					
ANR	4657243	MultiplicativeExpression	9 * 16		4656443	9		*			
ANR	4657244	PrimaryExpression	9		4656443	0					
ANR	4657245	PrimaryExpression	16		4656443	1					
ANR	4657246	MultiplicativeExpression	12 * 16		4656443	10		*			
ANR	4657247	PrimaryExpression	12		4656443	0					
ANR	4657248	PrimaryExpression	16		4656443	1					
ANR	4657249	MultiplicativeExpression	13 * 16		4656443	11		*			
ANR	4657250	PrimaryExpression	13		4656443	0					
ANR	4657251	PrimaryExpression	16		4656443	1					
ANR	4657252	MultiplicativeExpression	10 * 16		4656443	12		*			
ANR	4657253	PrimaryExpression	10		4656443	0					
ANR	4657254	PrimaryExpression	16		4656443	1					
ANR	4657255	MultiplicativeExpression	11 * 16		4656443	13		*			
ANR	4657256	PrimaryExpression	11		4656443	0					
ANR	4657257	PrimaryExpression	16		4656443	1					
ANR	4657258	MultiplicativeExpression	14 * 16		4656443	14		*			
ANR	4657259	PrimaryExpression	14		4656443	0					
ANR	4657260	PrimaryExpression	16		4656443	1					
ANR	4657261	MultiplicativeExpression	15 * 16		4656443	15		*			
ANR	4657262	PrimaryExpression	15		4656443	0					
ANR	4657263	PrimaryExpression	16		4656443	1					
ANR	4657264	ForStatement	for ( i = 0 ; i < 16 ; i ++ )		4656443	2					
ANR	4657265	ForInit	i = 0 ;	207:25:5629:5634	4656443	0	True				
ANR	4657266	AssignmentExpression	i = 0		4656443	0		=			
ANR	4657267	Identifier	i		4656443	0					
ANR	4657268	PrimaryExpression	0		4656443	1					
ANR	4657269	Condition	i < 16	207:32:5636:5641	4656443	1	True				
ANR	4657270	RelationalExpression	i < 16		4656443	0		<			
ANR	4657271	Identifier	i		4656443	0					
ANR	4657272	PrimaryExpression	16		4656443	1					
ANR	4657273	PostIncDecOperationExpression	i ++	207:40:5644:5646	4656443	2	True				
ANR	4657274	Identifier	i		4656443	0					
ANR	4657275	IncDec	++		4656443	1					
ANR	4657276	ExpressionStatement	"dctcoef_set ( h -> mb + ( p * 256 << pixel_shift ) , pixel_shift , dc_mapping [ i ] , dctcoef_get ( h -> mb_luma_dc [ p ] , pixel_shift , i ) )"	209:24:5674:5917	4656443	3	True				
ANR	4657277	CallExpression	"dctcoef_set ( h -> mb + ( p * 256 << pixel_shift ) , pixel_shift , dc_mapping [ i ] , dctcoef_get ( h -> mb_luma_dc [ p ] , pixel_shift , i ) )"		4656443	0					
ANR	4657278	Callee	dctcoef_set		4656443	0					
ANR	4657279	Identifier	dctcoef_set		4656443	0					
ANR	4657280	ArgumentList	h -> mb + ( p * 256 << pixel_shift )		4656443	1					
ANR	4657281	Argument	h -> mb + ( p * 256 << pixel_shift )		4656443	0					
ANR	4657282	AdditiveExpression	h -> mb + ( p * 256 << pixel_shift )		4656443	0		+			
ANR	4657283	PtrMemberAccess	h -> mb		4656443	0					
ANR	4657284	Identifier	h		4656443	0					
ANR	4657285	Identifier	mb		4656443	1					
ANR	4657286	ShiftExpression	p * 256 << pixel_shift		4656443	1		<<			
ANR	4657287	MultiplicativeExpression	p * 256		4656443	0		*			
ANR	4657288	Identifier	p		4656443	0					
ANR	4657289	PrimaryExpression	256		4656443	1					
ANR	4657290	Identifier	pixel_shift		4656443	1					
ANR	4657291	Argument	pixel_shift		4656443	1					
ANR	4657292	Identifier	pixel_shift		4656443	0					
ANR	4657293	Argument	dc_mapping [ i ]		4656443	2					
ANR	4657294	ArrayIndexing	dc_mapping [ i ]		4656443	0					
ANR	4657295	Identifier	dc_mapping		4656443	0					
ANR	4657296	Identifier	i		4656443	1					
ANR	4657297	Argument	"dctcoef_get ( h -> mb_luma_dc [ p ] , pixel_shift , i )"		4656443	3					
ANR	4657298	CallExpression	"dctcoef_get ( h -> mb_luma_dc [ p ] , pixel_shift , i )"		4656443	0					
ANR	4657299	Callee	dctcoef_get		4656443	0					
ANR	4657300	Identifier	dctcoef_get		4656443	0					
ANR	4657301	ArgumentList	h -> mb_luma_dc [ p ]		4656443	1					
ANR	4657302	Argument	h -> mb_luma_dc [ p ]		4656443	0					
ANR	4657303	ArrayIndexing	h -> mb_luma_dc [ p ]		4656443	0					
ANR	4657304	PtrMemberAccess	h -> mb_luma_dc		4656443	0					
ANR	4657305	Identifier	h		4656443	0					
ANR	4657306	Identifier	mb_luma_dc		4656443	1					
ANR	4657307	Identifier	p		4656443	1					
ANR	4657308	Argument	pixel_shift		4656443	1					
ANR	4657309	Identifier	pixel_shift		4656443	0					
ANR	4657310	Argument	i		4656443	2					
ANR	4657311	Identifier	i		4656443	0					
ANR	4657312	ElseStatement	else		4656443	0					
ANR	4657313	IfStatement	if ( CONFIG_SVQ3_DECODER )		4656443	0					
ANR	4657314	Condition	CONFIG_SVQ3_DECODER	221:19:5973:5991	4656443	0	True				
ANR	4657315	Identifier	CONFIG_SVQ3_DECODER		4656443	0					
ANR	4657316	ExpressionStatement	"ff_svq3_luma_dc_dequant_idct_c ( h -> mb + p * 256 , h -> mb_luma_dc [ p ] , qscale )"	223:12:6007:6124	4656443	1	True				
ANR	4657317	CallExpression	"ff_svq3_luma_dc_dequant_idct_c ( h -> mb + p * 256 , h -> mb_luma_dc [ p ] , qscale )"		4656443	0					
ANR	4657318	Callee	ff_svq3_luma_dc_dequant_idct_c		4656443	0					
ANR	4657319	Identifier	ff_svq3_luma_dc_dequant_idct_c		4656443	0					
ANR	4657320	ArgumentList	h -> mb + p * 256		4656443	1					
ANR	4657321	Argument	h -> mb + p * 256		4656443	0					
ANR	4657322	AdditiveExpression	h -> mb + p * 256		4656443	0		+			
ANR	4657323	PtrMemberAccess	h -> mb		4656443	0					
ANR	4657324	Identifier	h		4656443	0					
ANR	4657325	Identifier	mb		4656443	1					
ANR	4657326	MultiplicativeExpression	p * 256		4656443	1		*			
ANR	4657327	Identifier	p		4656443	0					
ANR	4657328	PrimaryExpression	256		4656443	1					
ANR	4657329	Argument	h -> mb_luma_dc [ p ]		4656443	1					
ANR	4657330	ArrayIndexing	h -> mb_luma_dc [ p ]		4656443	0					
ANR	4657331	PtrMemberAccess	h -> mb_luma_dc		4656443	0					
ANR	4657332	Identifier	h		4656443	0					
ANR	4657333	Identifier	mb_luma_dc		4656443	1					
ANR	4657334	Identifier	p		4656443	1					
ANR	4657335	Argument	qscale		4656443	2					
ANR	4657336	Identifier	qscale		4656443	0					
ANR	4657337	ReturnType	static av_always_inline void		4656443	1					
ANR	4657338	Identifier	hl_decode_mb_predict_luma		4656443	2					
ANR	4657339	ParameterList	"H264Context * h , int mb_type , int is_h264 , int simple , int transform_bypass , int pixel_shift , int * block_offset , int linesize , uint8_t * dest_y , int p"		4656443	3					
ANR	4657340	Parameter	H264Context * h	1:55:55:68	4656443	0	True				
ANR	4657341	ParameterType	H264Context *		4656443	0					
ANR	4657342	Identifier	h		4656443	1					
ANR	4657343	Parameter	int mb_type	3:55:127:137	4656443	1	True				
ANR	4657344	ParameterType	int		4656443	0					
ANR	4657345	Identifier	mb_type		4656443	1					
ANR	4657346	Parameter	int is_h264	3:68:140:150	4656443	2	True				
ANR	4657347	ParameterType	int		4656443	0					
ANR	4657348	Identifier	is_h264		4656443	1					
ANR	4657349	Parameter	int simple	5:55:209:218	4656443	3	True				
ANR	4657350	ParameterType	int		4656443	0					
ANR	4657351	Identifier	simple		4656443	1					
ANR	4657352	Parameter	int transform_bypass	7:55:277:296	4656443	4	True				
ANR	4657353	ParameterType	int		4656443	0					
ANR	4657354	Identifier	transform_bypass		4656443	1					
ANR	4657355	Parameter	int pixel_shift	9:55:355:369	4656443	5	True				
ANR	4657356	ParameterType	int		4656443	0					
ANR	4657357	Identifier	pixel_shift		4656443	1					
ANR	4657358	Parameter	int * block_offset	11:55:428:444	4656443	6	True				
ANR	4657359	ParameterType	int *		4656443	0					
ANR	4657360	Identifier	block_offset		4656443	1					
ANR	4657361	Parameter	int linesize	13:55:503:514	4656443	7	True				
ANR	4657362	ParameterType	int		4656443	0					
ANR	4657363	Identifier	linesize		4656443	1					
ANR	4657364	Parameter	uint8_t * dest_y	15:55:573:587	4656443	8	True				
ANR	4657365	ParameterType	uint8_t *		4656443	0					
ANR	4657366	Identifier	dest_y		4656443	1					
ANR	4657367	Parameter	int p	15:72:590:594	4656443	9	True				
ANR	4657368	ParameterType	int		4656443	0					
ANR	4657369	Identifier	p		4656443	1					
ANR	4657370	CFGEntryNode	ENTRY		4656443		True				
ANR	4657371	CFGExitNode	EXIT		4656443		True				
ANR	4657372	Symbol	h -> dequant4_coeff		4656443						
ANR	4657373	Symbol	idct_dc_add		4656443						
ANR	4657374	Symbol	tr_high		4656443						
ANR	4657375	Symbol	* scan8		4656443						
ANR	4657376	Symbol	simple		4656443						
ANR	4657377	Symbol	h -> mb_y		4656443						
ANR	4657378	Symbol	dir		4656443						
ANR	4657379	Symbol	* * * * h		4656443						
ANR	4657380	Symbol	* h -> mb_luma_dc		4656443						
ANR	4657381	Symbol	h -> topright_samples_available		4656443						
ANR	4657382	Symbol	linesize		4656443						
ANR	4657383	Symbol	h -> sps . profile_idc		4656443						
ANR	4657384	Symbol	block_offset		4656443						
ANR	4657385	Symbol	h -> mb		4656443						
ANR	4657386	Symbol	topright		4656443						
ANR	4657387	Symbol	mb_type		4656443						
ANR	4657388	Symbol	h -> h264dsp . h264_add_pixels8_clear		4656443						
ANR	4657389	Symbol	* ptr		4656443						
ANR	4657390	Symbol	* dc_mapping		4656443						
ANR	4657391	Symbol	h -> hpc . pred8x8l_add		4656443						
ANR	4657392	Symbol	* qscale		4656443						
ANR	4657393	Symbol	h -> hpc		4656443						
ANR	4657394	Symbol	* * i		4656443						
ANR	4657395	Symbol	* * h		4656443						
ANR	4657396	Symbol	h -> h264dsp . h264_add_pixels4_clear		4656443						
ANR	4657397	Symbol	NULL		4656443						
ANR	4657398	Symbol	IS_INTRA4x4		4656443						
ANR	4657399	Symbol	& tr		4656443						
ANR	4657400	Symbol	* linesize		4656443						
ANR	4657401	Symbol	* h -> intra4x4_pred_mode_cache		4656443						
ANR	4657402	Symbol	* * scan8		4656443						
ANR	4657403	Symbol	dc_mapping		4656443						
ANR	4657404	Symbol	* * * h -> dequant4_coeff		4656443						
ANR	4657405	Symbol	qscale		4656443						
ANR	4657406	Symbol	* * * p		4656443						
ANR	4657407	Symbol	dctcoef_get		4656443						
ANR	4657408	Symbol	h -> hpc . pred16x16		4656443						
ANR	4657409	Symbol	h -> h264dsp . h264_idct8_dc_add		4656443						
ANR	4657410	Symbol	* * * h		4656443						
ANR	4657411	Symbol	nnz		4656443						
ANR	4657412	Symbol	* * LUMA_DC_BLOCK_INDEX		4656443						
ANR	4657413	Symbol	h -> h264dsp . h264_idct_dc_add		4656443						
ANR	4657414	Symbol	* LUMA_DC_BLOCK_INDEX		4656443						
ANR	4657415	Symbol	h -> chroma_qp		4656443						
ANR	4657416	Symbol	h -> hpc . pred8x8l		4656443						
ANR	4657417	Symbol	h -> hpc . pred4x4		4656443						
ANR	4657418	Symbol	IS_8x8DCT		4656443						
ANR	4657419	Symbol	* * qscale		4656443						
ANR	4657420	Symbol	h -> h264dsp		4656443						
ANR	4657421	Symbol	transform_bypass		4656443						
ANR	4657422	Symbol	pixel_shift		4656443						
ANR	4657423	Symbol	h -> topleft_samples_available		4656443						
ANR	4657424	Symbol	* h -> non_zero_count_cache		4656443						
ANR	4657425	Symbol	h -> qscale		4656443						
ANR	4657426	Symbol	h -> h264dsp . h264_idct8_add		4656443						
ANR	4657427	Symbol	scan8		4656443						
ANR	4657428	Symbol	* * p		4656443						
ANR	4657429	Symbol	& tr_high		4656443						
ANR	4657430	Symbol	* h -> dequant4_coeff		4656443						
ANR	4657431	Symbol	DIAG_DOWN_LEFT_PRED		4656443						
ANR	4657432	Symbol	h -> intra4x4_pred_mode_cache		4656443						
ANR	4657433	Symbol	h -> intra16x16_pred_mode		4656443						
ANR	4657434	Symbol	idct_add		4656443						
ANR	4657435	Symbol	h -> non_zero_count_cache		4656443						
ANR	4657436	Symbol	h		4656443						
ANR	4657437	Symbol	i		4656443						
ANR	4657438	Symbol	topright_avail		4656443						
ANR	4657439	Symbol	is_h264		4656443						
ANR	4657440	Symbol	CONFIG_SVQ3_DECODER		4656443						
ANR	4657441	Symbol	h -> h264dsp . h264_idct_add		4656443						
ANR	4657442	Symbol	* block_offset		4656443						
ANR	4657443	Symbol	ptr		4656443						
ANR	4657444	Symbol	p		4656443						
ANR	4657445	Symbol	* h		4656443						
ANR	4657446	Symbol	* i		4656443						
ANR	4657447	Symbol	h -> mb_luma_dc		4656443						
ANR	4657448	Symbol	dest_y		4656443						
ANR	4657449	Symbol	h -> hpc . pred4x4_add		4656443						
ANR	4657450	Symbol	* h -> chroma_qp		4656443						
ANR	4657451	Symbol	VERT_LEFT_PRED		4656443						
ANR	4657452	Symbol	* p		4656443						
ANR	4657453	Symbol	h -> sps		4656443						
ANR	4657454	Symbol	* * h -> dequant4_coeff		4656443						
ANR	4657455	Symbol	tr		4656443						
ANR	4657456	Symbol	LUMA_DC_BLOCK_INDEX		4656443						
