command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8034555	File	/home/p4ultr4n/workplace/ReVeal/raw_code/sunrast_decode_frame_01_0.c								
ANR	8034556	Function	sunrast_decode_frame	1:0:0:5640							
ANR	8034557	FunctionDef	"sunrast_decode_frame (AVCodecContext * avctx , void * data , int * got_frame , AVPacket * avpkt)"		8034556	0					
ANR	8034558	CompoundStatement		5:0:134:5640	8034556	0					
ANR	8034559	IdentifierDeclStatement	const uint8_t * buf = avpkt -> data ;	7:4:141:179	8034556	0	True				
ANR	8034560	IdentifierDecl	* buf = avpkt -> data		8034556	0					
ANR	8034561	IdentifierDeclType	const uint8_t *		8034556	0					
ANR	8034562	Identifier	buf		8034556	1					
ANR	8034563	AssignmentExpression	* buf = avpkt -> data		8034556	2		=			
ANR	8034564	Identifier	buf		8034556	0					
ANR	8034565	PtrMemberAccess	avpkt -> data		8034556	1					
ANR	8034566	Identifier	avpkt		8034556	0					
ANR	8034567	Identifier	data		8034556	1					
ANR	8034568	IdentifierDeclStatement	const uint8_t * buf_end = avpkt -> data + avpkt -> size ;	9:4:186:238	8034556	1	True				
ANR	8034569	IdentifierDecl	* buf_end = avpkt -> data + avpkt -> size		8034556	0					
ANR	8034570	IdentifierDeclType	const uint8_t *		8034556	0					
ANR	8034571	Identifier	buf_end		8034556	1					
ANR	8034572	AssignmentExpression	* buf_end = avpkt -> data + avpkt -> size		8034556	2		=			
ANR	8034573	Identifier	buf_end		8034556	0					
ANR	8034574	AdditiveExpression	avpkt -> data + avpkt -> size		8034556	1		+			
ANR	8034575	PtrMemberAccess	avpkt -> data		8034556	0					
ANR	8034576	Identifier	avpkt		8034556	0					
ANR	8034577	Identifier	data		8034556	1					
ANR	8034578	PtrMemberAccess	avpkt -> size		8034556	1					
ANR	8034579	Identifier	avpkt		8034556	0					
ANR	8034580	Identifier	size		8034556	1					
ANR	8034581	Statement	AVFrame	11:4:245:251	8034556	2	True				
ANR	8034582	Statement	*	11:12:253:253	8034556	3	True				
ANR	8034583	Statement	const	11:14:255:259	8034556	4	True				
ANR	8034584	ExpressionStatement	p = data	11:20:261:276	8034556	5	True				
ANR	8034585	AssignmentExpression	p = data		8034556	0		=			
ANR	8034586	Identifier	p		8034556	0					
ANR	8034587	Identifier	data		8034556	1					
ANR	8034588	IdentifierDeclStatement	"unsigned int w , h , depth , type , maptype , maplength , stride , x , y , len , alen ;"	13:4:283:358	8034556	6	True				
ANR	8034589	IdentifierDecl	w		8034556	0					
ANR	8034590	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034591	Identifier	w		8034556	1					
ANR	8034592	IdentifierDecl	h		8034556	1					
ANR	8034593	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034594	Identifier	h		8034556	1					
ANR	8034595	IdentifierDecl	depth		8034556	2					
ANR	8034596	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034597	Identifier	depth		8034556	1					
ANR	8034598	IdentifierDecl	type		8034556	3					
ANR	8034599	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034600	Identifier	type		8034556	1					
ANR	8034601	IdentifierDecl	maptype		8034556	4					
ANR	8034602	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034603	Identifier	maptype		8034556	1					
ANR	8034604	IdentifierDecl	maplength		8034556	5					
ANR	8034605	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034606	Identifier	maplength		8034556	1					
ANR	8034607	IdentifierDecl	stride		8034556	6					
ANR	8034608	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034609	Identifier	stride		8034556	1					
ANR	8034610	IdentifierDecl	x		8034556	7					
ANR	8034611	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034612	Identifier	x		8034556	1					
ANR	8034613	IdentifierDecl	y		8034556	8					
ANR	8034614	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034615	Identifier	y		8034556	1					
ANR	8034616	IdentifierDecl	len		8034556	9					
ANR	8034617	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034618	Identifier	len		8034556	1					
ANR	8034619	IdentifierDecl	alen		8034556	10					
ANR	8034620	IdentifierDeclType	unsigned int		8034556	0					
ANR	8034621	Identifier	alen		8034556	1					
ANR	8034622	IdentifierDeclStatement	"uint8_t * ptr , * ptr2 = NULL ;"	15:4:365:391	8034556	7	True				
ANR	8034623	IdentifierDecl	* ptr		8034556	0					
ANR	8034624	IdentifierDeclType	uint8_t *		8034556	0					
ANR	8034625	Identifier	ptr		8034556	1					
ANR	8034626	IdentifierDecl	* ptr2 = NULL		8034556	1					
ANR	8034627	IdentifierDeclType	uint8_t *		8034556	0					
ANR	8034628	Identifier	ptr2		8034556	1					
ANR	8034629	AssignmentExpression	* ptr2 = NULL		8034556	2		=			
ANR	8034630	Identifier	NULL		8034556	0					
ANR	8034631	Identifier	NULL		8034556	1					
ANR	8034632	IdentifierDeclStatement	const uint8_t * bufstart = buf ;	17:4:398:427	8034556	8	True				
ANR	8034633	IdentifierDecl	* bufstart = buf		8034556	0					
ANR	8034634	IdentifierDeclType	const uint8_t *		8034556	0					
ANR	8034635	Identifier	bufstart		8034556	1					
ANR	8034636	AssignmentExpression	* bufstart = buf		8034556	2		=			
ANR	8034637	Identifier	buf		8034556	0					
ANR	8034638	Identifier	buf		8034556	1					
ANR	8034639	IdentifierDeclStatement	int ret ;	19:4:434:441	8034556	9	True				
ANR	8034640	IdentifierDecl	ret		8034556	0					
ANR	8034641	IdentifierDeclType	int		8034556	0					
ANR	8034642	Identifier	ret		8034556	1					
ANR	8034643	IfStatement	if ( avpkt -> size < 32 )		8034556	10					
ANR	8034644	Condition	avpkt -> size < 32	23:8:454:469	8034556	0	True				
ANR	8034645	RelationalExpression	avpkt -> size < 32		8034556	0		<			
ANR	8034646	PtrMemberAccess	avpkt -> size		8034556	0					
ANR	8034647	Identifier	avpkt		8034556	0					
ANR	8034648	Identifier	size		8034556	1					
ANR	8034649	PrimaryExpression	32		8034556	1					
ANR	8034650	ReturnStatement	return AVERROR_INVALIDDATA ;	25:8:481:507	8034556	1	True				
ANR	8034651	Identifier	AVERROR_INVALIDDATA		8034556	0					
ANR	8034652	IfStatement	if ( AV_RB32 ( buf ) != RAS_MAGIC )		8034556	11					
ANR	8034653	Condition	AV_RB32 ( buf ) != RAS_MAGIC	29:8:520:544	8034556	0	True				
ANR	8034654	EqualityExpression	AV_RB32 ( buf ) != RAS_MAGIC		8034556	0		!=			
ANR	8034655	CallExpression	AV_RB32 ( buf )		8034556	0					
ANR	8034656	Callee	AV_RB32		8034556	0					
ANR	8034657	Identifier	AV_RB32		8034556	0					
ANR	8034658	ArgumentList	buf		8034556	1					
ANR	8034659	Argument	buf		8034556	0					
ANR	8034660	Identifier	buf		8034556	0					
ANR	8034661	Identifier	RAS_MAGIC		8034556	1					
ANR	8034662	CompoundStatement		25:35:412:412	8034556	1					
ANR	8034663	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""this is not sunras encoded data\\n"" )"	31:8:558:622	8034556	0	True				
ANR	8034664	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""this is not sunras encoded data\\n"" )"		8034556	0					
ANR	8034665	Callee	av_log		8034556	0					
ANR	8034666	Identifier	av_log		8034556	0					
ANR	8034667	ArgumentList	avctx		8034556	1					
ANR	8034668	Argument	avctx		8034556	0					
ANR	8034669	Identifier	avctx		8034556	0					
ANR	8034670	Argument	AV_LOG_ERROR		8034556	1					
ANR	8034671	Identifier	AV_LOG_ERROR		8034556	0					
ANR	8034672	Argument	"""this is not sunras encoded data\\n"""		8034556	2					
ANR	8034673	PrimaryExpression	"""this is not sunras encoded data\\n"""		8034556	0					
ANR	8034674	ReturnStatement	return AVERROR_INVALIDDATA ;	33:8:633:659	8034556	1	True				
ANR	8034675	Identifier	AVERROR_INVALIDDATA		8034556	0					
ANR	8034676	ExpressionStatement	w = AV_RB32 ( buf + 4 )	39:4:675:703	8034556	12	True				
ANR	8034677	AssignmentExpression	w = AV_RB32 ( buf + 4 )		8034556	0		=			
ANR	8034678	Identifier	w		8034556	0					
ANR	8034679	CallExpression	AV_RB32 ( buf + 4 )		8034556	1					
ANR	8034680	Callee	AV_RB32		8034556	0					
ANR	8034681	Identifier	AV_RB32		8034556	0					
ANR	8034682	ArgumentList	buf + 4		8034556	1					
ANR	8034683	Argument	buf + 4		8034556	0					
ANR	8034684	AdditiveExpression	buf + 4		8034556	0		+			
ANR	8034685	Identifier	buf		8034556	0					
ANR	8034686	PrimaryExpression	4		8034556	1					
ANR	8034687	ExpressionStatement	h = AV_RB32 ( buf + 8 )	41:4:710:738	8034556	13	True				
ANR	8034688	AssignmentExpression	h = AV_RB32 ( buf + 8 )		8034556	0		=			
ANR	8034689	Identifier	h		8034556	0					
ANR	8034690	CallExpression	AV_RB32 ( buf + 8 )		8034556	1					
ANR	8034691	Callee	AV_RB32		8034556	0					
ANR	8034692	Identifier	AV_RB32		8034556	0					
ANR	8034693	ArgumentList	buf + 8		8034556	1					
ANR	8034694	Argument	buf + 8		8034556	0					
ANR	8034695	AdditiveExpression	buf + 8		8034556	0		+			
ANR	8034696	Identifier	buf		8034556	0					
ANR	8034697	PrimaryExpression	8		8034556	1					
ANR	8034698	ExpressionStatement	depth = AV_RB32 ( buf + 12 )	43:4:745:774	8034556	14	True				
ANR	8034699	AssignmentExpression	depth = AV_RB32 ( buf + 12 )		8034556	0		=			
ANR	8034700	Identifier	depth		8034556	0					
ANR	8034701	CallExpression	AV_RB32 ( buf + 12 )		8034556	1					
ANR	8034702	Callee	AV_RB32		8034556	0					
ANR	8034703	Identifier	AV_RB32		8034556	0					
ANR	8034704	ArgumentList	buf + 12		8034556	1					
ANR	8034705	Argument	buf + 12		8034556	0					
ANR	8034706	AdditiveExpression	buf + 12		8034556	0		+			
ANR	8034707	Identifier	buf		8034556	0					
ANR	8034708	PrimaryExpression	12		8034556	1					
ANR	8034709	ExpressionStatement	type = AV_RB32 ( buf + 20 )	45:4:781:810	8034556	15	True				
ANR	8034710	AssignmentExpression	type = AV_RB32 ( buf + 20 )		8034556	0		=			
ANR	8034711	Identifier	type		8034556	0					
ANR	8034712	CallExpression	AV_RB32 ( buf + 20 )		8034556	1					
ANR	8034713	Callee	AV_RB32		8034556	0					
ANR	8034714	Identifier	AV_RB32		8034556	0					
ANR	8034715	ArgumentList	buf + 20		8034556	1					
ANR	8034716	Argument	buf + 20		8034556	0					
ANR	8034717	AdditiveExpression	buf + 20		8034556	0		+			
ANR	8034718	Identifier	buf		8034556	0					
ANR	8034719	PrimaryExpression	20		8034556	1					
ANR	8034720	ExpressionStatement	maptype = AV_RB32 ( buf + 24 )	47:4:817:846	8034556	16	True				
ANR	8034721	AssignmentExpression	maptype = AV_RB32 ( buf + 24 )		8034556	0		=			
ANR	8034722	Identifier	maptype		8034556	0					
ANR	8034723	CallExpression	AV_RB32 ( buf + 24 )		8034556	1					
ANR	8034724	Callee	AV_RB32		8034556	0					
ANR	8034725	Identifier	AV_RB32		8034556	0					
ANR	8034726	ArgumentList	buf + 24		8034556	1					
ANR	8034727	Argument	buf + 24		8034556	0					
ANR	8034728	AdditiveExpression	buf + 24		8034556	0		+			
ANR	8034729	Identifier	buf		8034556	0					
ANR	8034730	PrimaryExpression	24		8034556	1					
ANR	8034731	ExpressionStatement	maplength = AV_RB32 ( buf + 28 )	49:4:853:882	8034556	17	True				
ANR	8034732	AssignmentExpression	maplength = AV_RB32 ( buf + 28 )		8034556	0		=			
ANR	8034733	Identifier	maplength		8034556	0					
ANR	8034734	CallExpression	AV_RB32 ( buf + 28 )		8034556	1					
ANR	8034735	Callee	AV_RB32		8034556	0					
ANR	8034736	Identifier	AV_RB32		8034556	0					
ANR	8034737	ArgumentList	buf + 28		8034556	1					
ANR	8034738	Argument	buf + 28		8034556	0					
ANR	8034739	AdditiveExpression	buf + 28		8034556	0		+			
ANR	8034740	Identifier	buf		8034556	0					
ANR	8034741	PrimaryExpression	28		8034556	1					
ANR	8034742	ExpressionStatement	buf += 32	51:4:889:903	8034556	18	True				
ANR	8034743	AssignmentExpression	buf += 32		8034556	0		+=			
ANR	8034744	Identifier	buf		8034556	0					
ANR	8034745	PrimaryExpression	32		8034556	1					
ANR	8034746	IfStatement	if ( type == RT_EXPERIMENTAL )		8034556	19					
ANR	8034747	Condition	type == RT_EXPERIMENTAL	55:8:916:938	8034556	0	True				
ANR	8034748	EqualityExpression	type == RT_EXPERIMENTAL		8034556	0		==			
ANR	8034749	Identifier	type		8034556	0					
ANR	8034750	Identifier	RT_EXPERIMENTAL		8034556	1					
ANR	8034751	CompoundStatement		51:33:806:806	8034556	1					
ANR	8034752	ExpressionStatement	"avpriv_request_sample ( avctx , ""TIFF/IFF/EXPERIMENTAL (compression) type"" )"	57:8:952:1024	8034556	0	True				
ANR	8034753	CallExpression	"avpriv_request_sample ( avctx , ""TIFF/IFF/EXPERIMENTAL (compression) type"" )"		8034556	0					
ANR	8034754	Callee	avpriv_request_sample		8034556	0					
ANR	8034755	Identifier	avpriv_request_sample		8034556	0					
ANR	8034756	ArgumentList	avctx		8034556	1					
ANR	8034757	Argument	avctx		8034556	0					
ANR	8034758	Identifier	avctx		8034556	0					
ANR	8034759	Argument	"""TIFF/IFF/EXPERIMENTAL (compression) type"""		8034556	1					
ANR	8034760	PrimaryExpression	"""TIFF/IFF/EXPERIMENTAL (compression) type"""		8034556	0					
ANR	8034761	ReturnStatement	return AVERROR_PATCHWELCOME ;	59:8:1035:1062	8034556	1	True				
ANR	8034762	Identifier	AVERROR_PATCHWELCOME		8034556	0					
ANR	8034763	IfStatement	if ( type > RT_FORMAT_IFF )		8034556	20					
ANR	8034764	Condition	type > RT_FORMAT_IFF	63:8:1080:1099	8034556	0	True				
ANR	8034765	RelationalExpression	type > RT_FORMAT_IFF		8034556	0		>			
ANR	8034766	Identifier	type		8034556	0					
ANR	8034767	Identifier	RT_FORMAT_IFF		8034556	1					
ANR	8034768	CompoundStatement		59:30:967:967	8034556	1					
ANR	8034769	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""invalid (compression) type\\n"" )"	65:8:1113:1172	8034556	0	True				
ANR	8034770	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""invalid (compression) type\\n"" )"		8034556	0					
ANR	8034771	Callee	av_log		8034556	0					
ANR	8034772	Identifier	av_log		8034556	0					
ANR	8034773	ArgumentList	avctx		8034556	1					
ANR	8034774	Argument	avctx		8034556	0					
ANR	8034775	Identifier	avctx		8034556	0					
ANR	8034776	Argument	AV_LOG_ERROR		8034556	1					
ANR	8034777	Identifier	AV_LOG_ERROR		8034556	0					
ANR	8034778	Argument	"""invalid (compression) type\\n"""		8034556	2					
ANR	8034779	PrimaryExpression	"""invalid (compression) type\\n"""		8034556	0					
ANR	8034780	ReturnStatement	return AVERROR_INVALIDDATA ;	67:8:1183:1209	8034556	1	True				
ANR	8034781	Identifier	AVERROR_INVALIDDATA		8034556	0					
ANR	8034782	IfStatement	if ( maptype == RMT_RAW )		8034556	21					
ANR	8034783	Condition	maptype == RMT_RAW	71:8:1227:1244	8034556	0	True				
ANR	8034784	EqualityExpression	maptype == RMT_RAW		8034556	0		==			
ANR	8034785	Identifier	maptype		8034556	0					
ANR	8034786	Identifier	RMT_RAW		8034556	1					
ANR	8034787	CompoundStatement		67:28:1112:1112	8034556	1					
ANR	8034788	ExpressionStatement	"avpriv_request_sample ( avctx , ""Unknown colormap type"" )"	73:8:1258:1311	8034556	0	True				
ANR	8034789	CallExpression	"avpriv_request_sample ( avctx , ""Unknown colormap type"" )"		8034556	0					
ANR	8034790	Callee	avpriv_request_sample		8034556	0					
ANR	8034791	Identifier	avpriv_request_sample		8034556	0					
ANR	8034792	ArgumentList	avctx		8034556	1					
ANR	8034793	Argument	avctx		8034556	0					
ANR	8034794	Identifier	avctx		8034556	0					
ANR	8034795	Argument	"""Unknown colormap type"""		8034556	1					
ANR	8034796	PrimaryExpression	"""Unknown colormap type"""		8034556	0					
ANR	8034797	ReturnStatement	return AVERROR_PATCHWELCOME ;	75:8:1322:1349	8034556	1	True				
ANR	8034798	Identifier	AVERROR_PATCHWELCOME		8034556	0					
ANR	8034799	IfStatement	if ( maptype > RMT_RAW )		8034556	22					
ANR	8034800	Condition	maptype > RMT_RAW	79:8:1367:1383	8034556	0	True				
ANR	8034801	RelationalExpression	maptype > RMT_RAW		8034556	0		>			
ANR	8034802	Identifier	maptype		8034556	0					
ANR	8034803	Identifier	RMT_RAW		8034556	1					
ANR	8034804	CompoundStatement		75:27:1251:1251	8034556	1					
ANR	8034805	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""invalid colormap type\\n"" )"	81:8:1397:1451	8034556	0	True				
ANR	8034806	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""invalid colormap type\\n"" )"		8034556	0					
ANR	8034807	Callee	av_log		8034556	0					
ANR	8034808	Identifier	av_log		8034556	0					
ANR	8034809	ArgumentList	avctx		8034556	1					
ANR	8034810	Argument	avctx		8034556	0					
ANR	8034811	Identifier	avctx		8034556	0					
ANR	8034812	Argument	AV_LOG_ERROR		8034556	1					
ANR	8034813	Identifier	AV_LOG_ERROR		8034556	0					
ANR	8034814	Argument	"""invalid colormap type\\n"""		8034556	2					
ANR	8034815	PrimaryExpression	"""invalid colormap type\\n"""		8034556	0					
ANR	8034816	ReturnStatement	return AVERROR_INVALIDDATA ;	83:8:1462:1488	8034556	1	True				
ANR	8034817	Identifier	AVERROR_INVALIDDATA		8034556	0					
ANR	8034818	IfStatement	if ( type == RT_FORMAT_TIFF || type == RT_FORMAT_IFF )		8034556	23					
ANR	8034819	Condition	type == RT_FORMAT_TIFF || type == RT_FORMAT_IFF	89:8:1508:1554	8034556	0	True				
ANR	8034820	OrExpression	type == RT_FORMAT_TIFF || type == RT_FORMAT_IFF		8034556	0		||			
ANR	8034821	EqualityExpression	type == RT_FORMAT_TIFF		8034556	0		==			
ANR	8034822	Identifier	type		8034556	0					
ANR	8034823	Identifier	RT_FORMAT_TIFF		8034556	1					
ANR	8034824	EqualityExpression	type == RT_FORMAT_IFF		8034556	1		==			
ANR	8034825	Identifier	type		8034556	0					
ANR	8034826	Identifier	RT_FORMAT_IFF		8034556	1					
ANR	8034827	CompoundStatement		85:57:1422:1422	8034556	1					
ANR	8034828	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""unsupported (compression) type\\n"" )"	91:8:1568:1631	8034556	0	True				
ANR	8034829	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""unsupported (compression) type\\n"" )"		8034556	0					
ANR	8034830	Callee	av_log		8034556	0					
ANR	8034831	Identifier	av_log		8034556	0					
ANR	8034832	ArgumentList	avctx		8034556	1					
ANR	8034833	Argument	avctx		8034556	0					
ANR	8034834	Identifier	avctx		8034556	0					
ANR	8034835	Argument	AV_LOG_ERROR		8034556	1					
ANR	8034836	Identifier	AV_LOG_ERROR		8034556	0					
ANR	8034837	Argument	"""unsupported (compression) type\\n"""		8034556	2					
ANR	8034838	PrimaryExpression	"""unsupported (compression) type\\n"""		8034556	0					
ANR	8034839	ReturnStatement	return - 1 ;	93:8:1642:1651	8034556	1	True				
ANR	8034840	UnaryOperationExpression	- 1		8034556	0					
ANR	8034841	UnaryOperator	-		8034556	0					
ANR	8034842	PrimaryExpression	1		8034556	1					
ANR	8034843	SwitchStatement	switch ( depth )		8034556	24					
ANR	8034844	Condition	depth	99:12:1675:1679	8034556	0	True				
ANR	8034845	Identifier	depth		8034556	0					
ANR	8034846	CompoundStatement		95:19:1547:1547	8034556	1					
ANR	8034847	Label	case 1 :	101:8:1693:1699	8034556	0	True				
ANR	8034848	ExpressionStatement	avctx -> pix_fmt = maplength ? AV_PIX_FMT_PAL8 : AV_PIX_FMT_MONOWHITE	103:12:1714:1781	8034556	1	True				
ANR	8034849	AssignmentExpression	avctx -> pix_fmt = maplength ? AV_PIX_FMT_PAL8 : AV_PIX_FMT_MONOWHITE		8034556	0		=			
ANR	8034850	PtrMemberAccess	avctx -> pix_fmt		8034556	0					
ANR	8034851	Identifier	avctx		8034556	0					
ANR	8034852	Identifier	pix_fmt		8034556	1					
ANR	8034853	ConditionalExpression	maplength ? AV_PIX_FMT_PAL8 : AV_PIX_FMT_MONOWHITE		8034556	1					
ANR	8034854	Condition	maplength		8034556	0					
ANR	8034855	Identifier	maplength		8034556	0					
ANR	8034856	Identifier	AV_PIX_FMT_PAL8		8034556	1					
ANR	8034857	Identifier	AV_PIX_FMT_MONOWHITE		8034556	2					
ANR	8034858	BreakStatement	break ;	105:12:1796:1801	8034556	2	True				
ANR	8034859	Label	case 4 :	107:8:1812:1818	8034556	3	True				
ANR	8034860	ExpressionStatement	avctx -> pix_fmt = maplength ? AV_PIX_FMT_PAL8 : AV_PIX_FMT_NONE	109:12:1833:1895	8034556	4	True				
ANR	8034861	AssignmentExpression	avctx -> pix_fmt = maplength ? AV_PIX_FMT_PAL8 : AV_PIX_FMT_NONE		8034556	0		=			
ANR	8034862	PtrMemberAccess	avctx -> pix_fmt		8034556	0					
ANR	8034863	Identifier	avctx		8034556	0					
ANR	8034864	Identifier	pix_fmt		8034556	1					
ANR	8034865	ConditionalExpression	maplength ? AV_PIX_FMT_PAL8 : AV_PIX_FMT_NONE		8034556	1					
ANR	8034866	Condition	maplength		8034556	0					
ANR	8034867	Identifier	maplength		8034556	0					
ANR	8034868	Identifier	AV_PIX_FMT_PAL8		8034556	1					
ANR	8034869	Identifier	AV_PIX_FMT_NONE		8034556	2					
ANR	8034870	BreakStatement	break ;	111:12:1910:1915	8034556	5	True				
ANR	8034871	Label	case 8 :	113:8:1926:1932	8034556	6	True				
ANR	8034872	ExpressionStatement	avctx -> pix_fmt = maplength ? AV_PIX_FMT_PAL8 : AV_PIX_FMT_GRAY8	115:12:1947:2010	8034556	7	True				
ANR	8034873	AssignmentExpression	avctx -> pix_fmt = maplength ? AV_PIX_FMT_PAL8 : AV_PIX_FMT_GRAY8		8034556	0		=			
ANR	8034874	PtrMemberAccess	avctx -> pix_fmt		8034556	0					
ANR	8034875	Identifier	avctx		8034556	0					
ANR	8034876	Identifier	pix_fmt		8034556	1					
ANR	8034877	ConditionalExpression	maplength ? AV_PIX_FMT_PAL8 : AV_PIX_FMT_GRAY8		8034556	1					
ANR	8034878	Condition	maplength		8034556	0					
ANR	8034879	Identifier	maplength		8034556	0					
ANR	8034880	Identifier	AV_PIX_FMT_PAL8		8034556	1					
ANR	8034881	Identifier	AV_PIX_FMT_GRAY8		8034556	2					
ANR	8034882	BreakStatement	break ;	117:12:2025:2030	8034556	8	True				
ANR	8034883	Label	case 24 :	119:8:2041:2048	8034556	9	True				
ANR	8034884	ExpressionStatement	avctx -> pix_fmt = ( type == RT_FORMAT_RGB ) ? AV_PIX_FMT_RGB24 : AV_PIX_FMT_BGR24	121:12:2063:2141	8034556	10	True				
ANR	8034885	AssignmentExpression	avctx -> pix_fmt = ( type == RT_FORMAT_RGB ) ? AV_PIX_FMT_RGB24 : AV_PIX_FMT_BGR24		8034556	0		=			
ANR	8034886	PtrMemberAccess	avctx -> pix_fmt		8034556	0					
ANR	8034887	Identifier	avctx		8034556	0					
ANR	8034888	Identifier	pix_fmt		8034556	1					
ANR	8034889	ConditionalExpression	( type == RT_FORMAT_RGB ) ? AV_PIX_FMT_RGB24 : AV_PIX_FMT_BGR24		8034556	1					
ANR	8034890	Condition	type == RT_FORMAT_RGB		8034556	0					
ANR	8034891	EqualityExpression	type == RT_FORMAT_RGB		8034556	0		==			
ANR	8034892	Identifier	type		8034556	0					
ANR	8034893	Identifier	RT_FORMAT_RGB		8034556	1					
ANR	8034894	Identifier	AV_PIX_FMT_RGB24		8034556	1					
ANR	8034895	Identifier	AV_PIX_FMT_BGR24		8034556	2					
ANR	8034896	BreakStatement	break ;	123:12:2156:2161	8034556	11	True				
ANR	8034897	Label	case 32 :	125:8:2172:2179	8034556	12	True				
ANR	8034898	ExpressionStatement	avctx -> pix_fmt = ( type == RT_FORMAT_RGB ) ? AV_PIX_FMT_0RGB : AV_PIX_FMT_0BGR	127:12:2194:2270	8034556	13	True				
ANR	8034899	AssignmentExpression	avctx -> pix_fmt = ( type == RT_FORMAT_RGB ) ? AV_PIX_FMT_0RGB : AV_PIX_FMT_0BGR		8034556	0		=			
ANR	8034900	PtrMemberAccess	avctx -> pix_fmt		8034556	0					
ANR	8034901	Identifier	avctx		8034556	0					
ANR	8034902	Identifier	pix_fmt		8034556	1					
ANR	8034903	ConditionalExpression	( type == RT_FORMAT_RGB ) ? AV_PIX_FMT_0RGB : AV_PIX_FMT_0BGR		8034556	1					
ANR	8034904	Condition	type == RT_FORMAT_RGB		8034556	0					
ANR	8034905	EqualityExpression	type == RT_FORMAT_RGB		8034556	0		==			
ANR	8034906	Identifier	type		8034556	0					
ANR	8034907	Identifier	RT_FORMAT_RGB		8034556	1					
ANR	8034908	Identifier	AV_PIX_FMT_0RGB		8034556	1					
ANR	8034909	Identifier	AV_PIX_FMT_0BGR		8034556	2					
ANR	8034910	BreakStatement	break ;	129:12:2285:2290	8034556	14	True				
ANR	8034911	Label	default :	131:8:2301:2308	8034556	15	True				
ANR	8034912	Identifier	default		8034556	0					
ANR	8034913	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""invalid depth\\n"" )"	133:12:2323:2369	8034556	16	True				
ANR	8034914	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""invalid depth\\n"" )"		8034556	0					
ANR	8034915	Callee	av_log		8034556	0					
ANR	8034916	Identifier	av_log		8034556	0					
ANR	8034917	ArgumentList	avctx		8034556	1					
ANR	8034918	Argument	avctx		8034556	0					
ANR	8034919	Identifier	avctx		8034556	0					
ANR	8034920	Argument	AV_LOG_ERROR		8034556	1					
ANR	8034921	Identifier	AV_LOG_ERROR		8034556	0					
ANR	8034922	Argument	"""invalid depth\\n"""		8034556	2					
ANR	8034923	PrimaryExpression	"""invalid depth\\n"""		8034556	0					
ANR	8034924	ReturnStatement	return AVERROR_INVALIDDATA ;	135:12:2384:2410	8034556	17	True				
ANR	8034925	Identifier	AVERROR_INVALIDDATA		8034556	0					
ANR	8034926	ExpressionStatement	"ret = ff_set_dimensions ( avctx , w , h )"	141:4:2426:2462	8034556	25	True				
ANR	8034927	AssignmentExpression	"ret = ff_set_dimensions ( avctx , w , h )"		8034556	0		=			
ANR	8034928	Identifier	ret		8034556	0					
ANR	8034929	CallExpression	"ff_set_dimensions ( avctx , w , h )"		8034556	1					
ANR	8034930	Callee	ff_set_dimensions		8034556	0					
ANR	8034931	Identifier	ff_set_dimensions		8034556	0					
ANR	8034932	ArgumentList	avctx		8034556	1					
ANR	8034933	Argument	avctx		8034556	0					
ANR	8034934	Identifier	avctx		8034556	0					
ANR	8034935	Argument	w		8034556	1					
ANR	8034936	Identifier	w		8034556	0					
ANR	8034937	Argument	h		8034556	2					
ANR	8034938	Identifier	h		8034556	0					
ANR	8034939	IfStatement	if ( ret < 0 )		8034556	26					
ANR	8034940	Condition	ret < 0	143:8:2473:2479	8034556	0	True				
ANR	8034941	RelationalExpression	ret < 0		8034556	0		<			
ANR	8034942	Identifier	ret		8034556	0					
ANR	8034943	PrimaryExpression	0		8034556	1					
ANR	8034944	ReturnStatement	return ret ;	145:8:2491:2501	8034556	1	True				
ANR	8034945	Identifier	ret		8034556	0					
ANR	8034946	IfStatement	"if ( ( ret = ff_get_buffer ( avctx , p , 0 ) ) < 0 )"		8034556	27					
ANR	8034947	Condition	"( ret = ff_get_buffer ( avctx , p , 0 ) ) < 0"	149:8:2514:2551	8034556	0	True				
ANR	8034948	RelationalExpression	"( ret = ff_get_buffer ( avctx , p , 0 ) ) < 0"		8034556	0		<			
ANR	8034949	AssignmentExpression	"ret = ff_get_buffer ( avctx , p , 0 )"		8034556	0		=			
ANR	8034950	Identifier	ret		8034556	0					
ANR	8034951	CallExpression	"ff_get_buffer ( avctx , p , 0 )"		8034556	1					
ANR	8034952	Callee	ff_get_buffer		8034556	0					
ANR	8034953	Identifier	ff_get_buffer		8034556	0					
ANR	8034954	ArgumentList	avctx		8034556	1					
ANR	8034955	Argument	avctx		8034556	0					
ANR	8034956	Identifier	avctx		8034556	0					
ANR	8034957	Argument	p		8034556	1					
ANR	8034958	Identifier	p		8034556	0					
ANR	8034959	Argument	0		8034556	2					
ANR	8034960	PrimaryExpression	0		8034556	0					
ANR	8034961	PrimaryExpression	0		8034556	1					
ANR	8034962	ReturnStatement	return ret ;	151:8:2563:2573	8034556	1	True				
ANR	8034963	Identifier	ret		8034556	0					
ANR	8034964	ExpressionStatement	p -> pict_type = AV_PICTURE_TYPE_I	155:4:2582:2614	8034556	28	True				
ANR	8034965	AssignmentExpression	p -> pict_type = AV_PICTURE_TYPE_I		8034556	0		=			
ANR	8034966	PtrMemberAccess	p -> pict_type		8034556	0					
ANR	8034967	Identifier	p		8034556	0					
ANR	8034968	Identifier	pict_type		8034556	1					
ANR	8034969	Identifier	AV_PICTURE_TYPE_I		8034556	1					
ANR	8034970	IfStatement	if ( buf_end - buf < maplength )		8034556	29					
ANR	8034971	Condition	buf_end - buf < maplength	159:8:2627:2651	8034556	0	True				
ANR	8034972	RelationalExpression	buf_end - buf < maplength		8034556	0		<			
ANR	8034973	AdditiveExpression	buf_end - buf		8034556	0		-			
ANR	8034974	Identifier	buf_end		8034556	0					
ANR	8034975	Identifier	buf		8034556	1					
ANR	8034976	Identifier	maplength		8034556	1					
ANR	8034977	ReturnStatement	return AVERROR_INVALIDDATA ;	161:8:2663:2689	8034556	1	True				
ANR	8034978	Identifier	AVERROR_INVALIDDATA		8034556	0					
ANR	8034979	IfStatement	if ( depth > 8 && maplength )		8034556	30					
ANR	8034980	Condition	depth > 8 && maplength	165:8:2702:2723	8034556	0	True				
ANR	8034981	AndExpression	depth > 8 && maplength		8034556	0		&&			
ANR	8034982	RelationalExpression	depth > 8		8034556	0		>			
ANR	8034983	Identifier	depth		8034556	0					
ANR	8034984	PrimaryExpression	8		8034556	1					
ANR	8034985	Identifier	maplength		8034556	1					
ANR	8034986	CompoundStatement		161:32:2591:2591	8034556	1					
ANR	8034987	ExpressionStatement	"av_log ( avctx , AV_LOG_WARNING , ""useless colormap found or file is corrupted, trying to recover\\n"" )"	167:8:2737:2834	8034556	0	True				
ANR	8034988	CallExpression	"av_log ( avctx , AV_LOG_WARNING , ""useless colormap found or file is corrupted, trying to recover\\n"" )"		8034556	0					
ANR	8034989	Callee	av_log		8034556	0					
ANR	8034990	Identifier	av_log		8034556	0					
ANR	8034991	ArgumentList	avctx		8034556	1					
ANR	8034992	Argument	avctx		8034556	0					
ANR	8034993	Identifier	avctx		8034556	0					
ANR	8034994	Argument	AV_LOG_WARNING		8034556	1					
ANR	8034995	Identifier	AV_LOG_WARNING		8034556	0					
ANR	8034996	Argument	"""useless colormap found or file is corrupted, trying to recover\\n"""		8034556	2					
ANR	8034997	PrimaryExpression	"""useless colormap found or file is corrupted, trying to recover\\n"""		8034556	0					
ANR	8034998	ElseStatement	else		8034556	0					
ANR	8034999	IfStatement	if ( maplength )		8034556	0					
ANR	8035000	Condition	maplength	171:15:2854:2862	8034556	0	True				
ANR	8035001	Identifier	maplength		8034556	0					
ANR	8035002	CompoundStatement		169:8:2741:2773	8034556	1					
ANR	8035003	IdentifierDeclStatement	unsigned int len = maplength / 3 ;	173:8:2876:2908	8034556	0	True				
ANR	8035004	IdentifierDecl	len = maplength / 3		8034556	0					
ANR	8035005	IdentifierDeclType	unsigned int		8034556	0					
ANR	8035006	Identifier	len		8034556	1					
ANR	8035007	AssignmentExpression	len = maplength / 3		8034556	2		=			
ANR	8035008	Identifier	len		8034556	0					
ANR	8035009	MultiplicativeExpression	maplength / 3		8034556	1		/			
ANR	8035010	Identifier	maplength		8034556	0					
ANR	8035011	PrimaryExpression	3		8034556	1					
ANR	8035012	IfStatement	if ( maplength % 3 || maplength > 768 )		8034556	1					
ANR	8035013	Condition	maplength % 3 || maplength > 768	177:12:2925:2956	8034556	0	True				
ANR	8035014	OrExpression	maplength % 3 || maplength > 768		8034556	0		||			
ANR	8035015	MultiplicativeExpression	maplength % 3		8034556	0		%			
ANR	8035016	Identifier	maplength		8034556	0					
ANR	8035017	PrimaryExpression	3		8034556	1					
ANR	8035018	RelationalExpression	maplength > 768		8034556	1		>			
ANR	8035019	Identifier	maplength		8034556	0					
ANR	8035020	PrimaryExpression	768		8034556	1					
ANR	8035021	CompoundStatement		173:46:2824:2824	8034556	1					
ANR	8035022	ExpressionStatement	"av_log ( avctx , AV_LOG_WARNING , ""invalid colormap length\\n"" )"	179:12:2974:3032	8034556	0	True				
ANR	8035023	CallExpression	"av_log ( avctx , AV_LOG_WARNING , ""invalid colormap length\\n"" )"		8034556	0					
ANR	8035024	Callee	av_log		8034556	0					
ANR	8035025	Identifier	av_log		8034556	0					
ANR	8035026	ArgumentList	avctx		8034556	1					
ANR	8035027	Argument	avctx		8034556	0					
ANR	8035028	Identifier	avctx		8034556	0					
ANR	8035029	Argument	AV_LOG_WARNING		8034556	1					
ANR	8035030	Identifier	AV_LOG_WARNING		8034556	0					
ANR	8035031	Argument	"""invalid colormap length\\n"""		8034556	2					
ANR	8035032	PrimaryExpression	"""invalid colormap length\\n"""		8034556	0					
ANR	8035033	ReturnStatement	return AVERROR_INVALIDDATA ;	181:12:3047:3073	8034556	1	True				
ANR	8035034	Identifier	AVERROR_INVALIDDATA		8034556	0					
ANR	8035035	ExpressionStatement	ptr = p -> data [ 1 ]	187:8:3097:3113	8034556	2	True				
ANR	8035036	AssignmentExpression	ptr = p -> data [ 1 ]		8034556	0		=			
ANR	8035037	Identifier	ptr		8034556	0					
ANR	8035038	ArrayIndexing	p -> data [ 1 ]		8034556	1					
ANR	8035039	PtrMemberAccess	p -> data		8034556	0					
ANR	8035040	Identifier	p		8034556	0					
ANR	8035041	Identifier	data		8034556	1					
ANR	8035042	PrimaryExpression	1		8034556	1					
ANR	8035043	ForStatement	"for ( x = 0 ; x < len ; x ++ , ptr += 4 )"		8034556	3					
ANR	8035044	ForInit	x = 0 ;	189:13:3129:3134	8034556	0	True				
ANR	8035045	AssignmentExpression	x = 0		8034556	0		=			
ANR	8035046	Identifier	x		8034556	0					
ANR	8035047	PrimaryExpression	0		8034556	1					
ANR	8035048	Condition	x < len	189:20:3136:3142	8034556	1	True				
ANR	8035049	RelationalExpression	x < len		8034556	0		<			
ANR	8035050	Identifier	x		8034556	0					
ANR	8035051	Identifier	len		8034556	1					
ANR	8035052	Expression	"x ++ , ptr += 4"	189:29:3145:3157	8034556	2	True				
ANR	8035053	PostIncDecOperationExpression	x ++		8034556	0					
ANR	8035054	Identifier	x		8034556	0					
ANR	8035055	IncDec	++		8034556	1					
ANR	8035056	AssignmentExpression	ptr += 4		8034556	1		+=			
ANR	8035057	Identifier	ptr		8034556	0					
ANR	8035058	PrimaryExpression	4		8034556	1					
ANR	8035059	ExpressionStatement	* ( uint32_t * ) ptr = ( 0xFFU << 24 ) + ( buf [ x ] << 16 ) + ( buf [ len + x ] << 8 ) + buf [ len + len + x ]	191:12:3173:3253	8034556	3	True				
ANR	8035060	AssignmentExpression	* ( uint32_t * ) ptr = ( 0xFFU << 24 ) + ( buf [ x ] << 16 ) + ( buf [ len + x ] << 8 ) + buf [ len + len + x ]		8034556	0		=			
ANR	8035061	UnaryOperationExpression	* ( uint32_t * ) ptr		8034556	0					
ANR	8035062	UnaryOperator	*		8034556	0					
ANR	8035063	CastExpression	( uint32_t * ) ptr		8034556	1					
ANR	8035064	CastTarget	uint32_t *		8034556	0					
ANR	8035065	Identifier	ptr		8034556	1					
ANR	8035066	AdditiveExpression	( 0xFFU << 24 ) + ( buf [ x ] << 16 ) + ( buf [ len + x ] << 8 ) + buf [ len + len + x ]		8034556	1		+			
ANR	8035067	ShiftExpression	0xFFU << 24		8034556	0		<<			
ANR	8035068	PrimaryExpression	0xFFU		8034556	0					
ANR	8035069	PrimaryExpression	24		8034556	1					
ANR	8035070	AdditiveExpression	( buf [ x ] << 16 ) + ( buf [ len + x ] << 8 ) + buf [ len + len + x ]		8034556	1		+			
ANR	8035071	ShiftExpression	buf [ x ] << 16		8034556	0		<<			
ANR	8035072	ArrayIndexing	buf [ x ]		8034556	0					
ANR	8035073	Identifier	buf		8034556	0					
ANR	8035074	Identifier	x		8034556	1					
ANR	8035075	PrimaryExpression	16		8034556	1					
ANR	8035076	AdditiveExpression	( buf [ len + x ] << 8 ) + buf [ len + len + x ]		8034556	1		+			
ANR	8035077	ShiftExpression	buf [ len + x ] << 8		8034556	0		<<			
ANR	8035078	ArrayIndexing	buf [ len + x ]		8034556	0					
ANR	8035079	Identifier	buf		8034556	0					
ANR	8035080	AdditiveExpression	len + x		8034556	1		+			
ANR	8035081	Identifier	len		8034556	0					
ANR	8035082	Identifier	x		8034556	1					
ANR	8035083	PrimaryExpression	8		8034556	1					
ANR	8035084	ArrayIndexing	buf [ len + len + x ]		8034556	1					
ANR	8035085	Identifier	buf		8034556	0					
ANR	8035086	AdditiveExpression	len + len + x		8034556	1		+			
ANR	8035087	Identifier	len		8034556	0					
ANR	8035088	AdditiveExpression	len + x		8034556	1		+			
ANR	8035089	Identifier	len		8034556	0					
ANR	8035090	Identifier	x		8034556	1					
ANR	8035091	ExpressionStatement	buf += maplength	197:4:3269:3285	8034556	31	True				
ANR	8035092	AssignmentExpression	buf += maplength		8034556	0		+=			
ANR	8035093	Identifier	buf		8034556	0					
ANR	8035094	Identifier	maplength		8034556	1					
ANR	8035095	IfStatement	if ( maplength && depth < 8 )		8034556	32					
ANR	8035096	Condition	maplength && depth < 8	201:8:3298:3319	8034556	0	True				
ANR	8035097	AndExpression	maplength && depth < 8		8034556	0		&&			
ANR	8035098	Identifier	maplength		8034556	0					
ANR	8035099	RelationalExpression	depth < 8		8034556	1		<			
ANR	8035100	Identifier	depth		8034556	0					
ANR	8035101	PrimaryExpression	8		8034556	1					
ANR	8035102	CompoundStatement		197:32:3187:3187	8034556	1					
ANR	8035103	ExpressionStatement	"ptr = ptr2 = av_malloc_array ( ( w + 15 ) , h )"	203:8:3333:3374	8034556	0	True				
ANR	8035104	AssignmentExpression	"ptr = ptr2 = av_malloc_array ( ( w + 15 ) , h )"		8034556	0		=			
ANR	8035105	Identifier	ptr		8034556	0					
ANR	8035106	AssignmentExpression	"ptr2 = av_malloc_array ( ( w + 15 ) , h )"		8034556	1		=			
ANR	8035107	Identifier	ptr2		8034556	0					
ANR	8035108	CallExpression	"av_malloc_array ( ( w + 15 ) , h )"		8034556	1					
ANR	8035109	Callee	av_malloc_array		8034556	0					
ANR	8035110	Identifier	av_malloc_array		8034556	0					
ANR	8035111	ArgumentList	w + 15		8034556	1					
ANR	8035112	Argument	w + 15		8034556	0					
ANR	8035113	AdditiveExpression	w + 15		8034556	0		+			
ANR	8035114	Identifier	w		8034556	0					
ANR	8035115	PrimaryExpression	15		8034556	1					
ANR	8035116	Argument	h		8034556	1					
ANR	8035117	Identifier	h		8034556	0					
ANR	8035118	IfStatement	if ( ! ptr )		8034556	1					
ANR	8035119	Condition	! ptr	205:12:3389:3392	8034556	0	True				
ANR	8035120	UnaryOperationExpression	! ptr		8034556	0					
ANR	8035121	UnaryOperator	!		8034556	0					
ANR	8035122	Identifier	ptr		8034556	1					
ANR	8035123	ReturnStatement	return AVERROR ( ENOMEM ) ;	207:12:3408:3430	8034556	1	True				
ANR	8035124	CallExpression	AVERROR ( ENOMEM )		8034556	0					
ANR	8035125	Callee	AVERROR		8034556	0					
ANR	8035126	Identifier	AVERROR		8034556	0					
ANR	8035127	ArgumentList	ENOMEM		8034556	1					
ANR	8035128	Argument	ENOMEM		8034556	0					
ANR	8035129	Identifier	ENOMEM		8034556	0					
ANR	8035130	ExpressionStatement	stride = ( w + 15 >> 3 ) * depth	209:8:3441:3471	8034556	2	True				
ANR	8035131	AssignmentExpression	stride = ( w + 15 >> 3 ) * depth		8034556	0		=			
ANR	8035132	Identifier	stride		8034556	0					
ANR	8035133	MultiplicativeExpression	( w + 15 >> 3 ) * depth		8034556	1		*			
ANR	8035134	ShiftExpression	w + 15 >> 3		8034556	0		>>			
ANR	8035135	AdditiveExpression	w + 15		8034556	0		+			
ANR	8035136	Identifier	w		8034556	0					
ANR	8035137	PrimaryExpression	15		8034556	1					
ANR	8035138	PrimaryExpression	3		8034556	1					
ANR	8035139	Identifier	depth		8034556	1					
ANR	8035140	ElseStatement	else		8034556	0					
ANR	8035141	CompoundStatement		207:11:3350:3350	8034556	0					
ANR	8035142	ExpressionStatement	ptr = p -> data [ 0 ]	213:4:3492:3511	8034556	0	True				
ANR	8035143	AssignmentExpression	ptr = p -> data [ 0 ]		8034556	0		=			
ANR	8035144	Identifier	ptr		8034556	0					
ANR	8035145	ArrayIndexing	p -> data [ 0 ]		8034556	1					
ANR	8035146	PtrMemberAccess	p -> data		8034556	0					
ANR	8035147	Identifier	p		8034556	0					
ANR	8035148	Identifier	data		8034556	1					
ANR	8035149	PrimaryExpression	0		8034556	1					
ANR	8035150	ExpressionStatement	stride = p -> linesize [ 0 ]	215:4:3518:3541	8034556	1	True				
ANR	8035151	AssignmentExpression	stride = p -> linesize [ 0 ]		8034556	0		=			
ANR	8035152	Identifier	stride		8034556	0					
ANR	8035153	ArrayIndexing	p -> linesize [ 0 ]		8034556	1					
ANR	8035154	PtrMemberAccess	p -> linesize		8034556	0					
ANR	8035155	Identifier	p		8034556	0					
ANR	8035156	Identifier	linesize		8034556	1					
ANR	8035157	PrimaryExpression	0		8034556	1					
ANR	8035158	ExpressionStatement	len = ( depth * w + 7 ) >> 3	223:4:3611:3638	8034556	33	True				
ANR	8035159	AssignmentExpression	len = ( depth * w + 7 ) >> 3		8034556	0		=			
ANR	8035160	Identifier	len		8034556	0					
ANR	8035161	ShiftExpression	( depth * w + 7 ) >> 3		8034556	1		>>			
ANR	8035162	AdditiveExpression	depth * w + 7		8034556	0		+			
ANR	8035163	MultiplicativeExpression	depth * w		8034556	0		*			
ANR	8035164	Identifier	depth		8034556	0					
ANR	8035165	Identifier	w		8034556	1					
ANR	8035166	PrimaryExpression	7		8034556	1					
ANR	8035167	PrimaryExpression	3		8034556	1					
ANR	8035168	ExpressionStatement	alen = len + ( len & 1 )	225:4:3645:3667	8034556	34	True				
ANR	8035169	AssignmentExpression	alen = len + ( len & 1 )		8034556	0		=			
ANR	8035170	Identifier	alen		8034556	0					
ANR	8035171	AdditiveExpression	len + ( len & 1 )		8034556	1		+			
ANR	8035172	Identifier	len		8034556	0					
ANR	8035173	BitAndExpression	len & 1		8034556	1		&			
ANR	8035174	Identifier	len		8034556	0					
ANR	8035175	PrimaryExpression	1		8034556	1					
ANR	8035176	IfStatement	if ( type == RT_BYTE_ENCODED )		8034556	35					
ANR	8035177	Condition	type == RT_BYTE_ENCODED	229:8:3680:3702	8034556	0	True				
ANR	8035178	EqualityExpression	type == RT_BYTE_ENCODED		8034556	0		==			
ANR	8035179	Identifier	type		8034556	0					
ANR	8035180	Identifier	RT_BYTE_ENCODED		8034556	1					
ANR	8035181	CompoundStatement		229:8:3606:3637	8034556	1					
ANR	8035182	IdentifierDeclStatement	"int value , run ;"	231:8:3716:3730	8034556	0	True				
ANR	8035183	IdentifierDecl	value		8034556	0					
ANR	8035184	IdentifierDeclType	int		8034556	0					
ANR	8035185	Identifier	value		8034556	1					
ANR	8035186	IdentifierDecl	run		8034556	1					
ANR	8035187	IdentifierDeclType	int		8034556	0					
ANR	8035188	Identifier	run		8034556	1					
ANR	8035189	IdentifierDeclStatement	uint8_t * end = ptr + h * stride ;	233:8:3741:3772	8034556	1	True				
ANR	8035190	IdentifierDecl	* end = ptr + h * stride		8034556	0					
ANR	8035191	IdentifierDeclType	uint8_t *		8034556	0					
ANR	8035192	Identifier	end		8034556	1					
ANR	8035193	AssignmentExpression	* end = ptr + h * stride		8034556	2		=			
ANR	8035194	Identifier	end		8034556	0					
ANR	8035195	AdditiveExpression	ptr + h * stride		8034556	1		+			
ANR	8035196	Identifier	ptr		8034556	0					
ANR	8035197	MultiplicativeExpression	h * stride		8034556	1		*			
ANR	8035198	Identifier	h		8034556	0					
ANR	8035199	Identifier	stride		8034556	1					
ANR	8035200	ExpressionStatement	x = 0	237:8:3785:3790	8034556	2	True				
ANR	8035201	AssignmentExpression	x = 0		8034556	0		=			
ANR	8035202	Identifier	x		8034556	0					
ANR	8035203	PrimaryExpression	0		8034556	1					
ANR	8035204	WhileStatement	while ( ptr != end && buf < buf_end )		8034556	3					
ANR	8035205	Condition	ptr != end && buf < buf_end	239:15:3808:3834	8034556	0	True				
ANR	8035206	AndExpression	ptr != end && buf < buf_end		8034556	0		&&			
ANR	8035207	EqualityExpression	ptr != end		8034556	0		!=			
ANR	8035208	Identifier	ptr		8034556	0					
ANR	8035209	Identifier	end		8034556	1					
ANR	8035210	RelationalExpression	buf < buf_end		8034556	1		<			
ANR	8035211	Identifier	buf		8034556	0					
ANR	8035212	Identifier	buf_end		8034556	1					
ANR	8035213	CompoundStatement		235:44:3702:3702	8034556	1					
ANR	8035214	ExpressionStatement	run = 1	241:12:3852:3859	8034556	0	True				
ANR	8035215	AssignmentExpression	run = 1		8034556	0		=			
ANR	8035216	Identifier	run		8034556	0					
ANR	8035217	PrimaryExpression	1		8034556	1					
ANR	8035218	IfStatement	if ( buf_end - buf < 1 )		8034556	1					
ANR	8035219	Condition	buf_end - buf < 1	243:16:3878:3894	8034556	0	True				
ANR	8035220	RelationalExpression	buf_end - buf < 1		8034556	0		<			
ANR	8035221	AdditiveExpression	buf_end - buf		8034556	0		-			
ANR	8035222	Identifier	buf_end		8034556	0					
ANR	8035223	Identifier	buf		8034556	1					
ANR	8035224	PrimaryExpression	1		8034556	1					
ANR	8035225	ReturnStatement	return AVERROR_INVALIDDATA ;	245:16:3914:3940	8034556	1	True				
ANR	8035226	Identifier	AVERROR_INVALIDDATA		8034556	0					
ANR	8035227	IfStatement	if ( ( value = * buf ++ ) == RLE_TRIGGER )		8034556	2					
ANR	8035228	Condition	( value = * buf ++ ) == RLE_TRIGGER	249:16:3961:3991	8034556	0	True				
ANR	8035229	EqualityExpression	( value = * buf ++ ) == RLE_TRIGGER		8034556	0		==			
ANR	8035230	AssignmentExpression	value = * buf ++		8034556	0		=			
ANR	8035231	Identifier	value		8034556	0					
ANR	8035232	UnaryOperationExpression	* buf ++		8034556	1					
ANR	8035233	UnaryOperator	*		8034556	0					
ANR	8035234	PostIncDecOperationExpression	buf ++		8034556	1					
ANR	8035235	Identifier	buf		8034556	0					
ANR	8035236	IncDec	++		8034556	1					
ANR	8035237	Identifier	RLE_TRIGGER		8034556	1					
ANR	8035238	CompoundStatement		245:49:3859:3859	8034556	1					
ANR	8035239	ExpressionStatement	run = * buf ++ + 1	251:16:4013:4029	8034556	0	True				
ANR	8035240	AssignmentExpression	run = * buf ++ + 1		8034556	0		=			
ANR	8035241	Identifier	run		8034556	0					
ANR	8035242	AdditiveExpression	* buf ++ + 1		8034556	1		+			
ANR	8035243	UnaryOperationExpression	* buf ++		8034556	0					
ANR	8035244	UnaryOperator	*		8034556	0					
ANR	8035245	PostIncDecOperationExpression	buf ++		8034556	1					
ANR	8035246	Identifier	buf		8034556	0					
ANR	8035247	IncDec	++		8034556	1					
ANR	8035248	PrimaryExpression	1		8034556	1					
ANR	8035249	IfStatement	if ( run != 1 )		8034556	1					
ANR	8035250	Condition	run != 1	253:20:4052:4059	8034556	0	True				
ANR	8035251	EqualityExpression	run != 1		8034556	0		!=			
ANR	8035252	Identifier	run		8034556	0					
ANR	8035253	PrimaryExpression	1		8034556	1					
ANR	8035254	ExpressionStatement	value = * buf ++	255:20:4083:4097	8034556	1	True				
ANR	8035255	AssignmentExpression	value = * buf ++		8034556	0		=			
ANR	8035256	Identifier	value		8034556	0					
ANR	8035257	UnaryOperationExpression	* buf ++		8034556	1					
ANR	8035258	UnaryOperator	*		8034556	0					
ANR	8035259	PostIncDecOperationExpression	buf ++		8034556	1					
ANR	8035260	Identifier	buf		8034556	0					
ANR	8035261	IncDec	++		8034556	1					
ANR	8035262	WhileStatement	while ( run -- )		8034556	3					
ANR	8035263	Condition	run --	259:19:4134:4138	8034556	0	True				
ANR	8035264	PostIncDecOperationExpression	run --		8034556	0					
ANR	8035265	Identifier	run		8034556	0					
ANR	8035266	IncDec	--		8034556	1					
ANR	8035267	CompoundStatement		255:26:4006:4006	8034556	1					
ANR	8035268	IfStatement	if ( x < len )		8034556	0					
ANR	8035269	Condition	x < len	261:20:4164:4170	8034556	0	True				
ANR	8035270	RelationalExpression	x < len		8034556	0		<			
ANR	8035271	Identifier	x		8034556	0					
ANR	8035272	Identifier	len		8034556	1					
ANR	8035273	ExpressionStatement	ptr [ x ] = value	263:20:4194:4208	8034556	1	True				
ANR	8035274	AssignmentExpression	ptr [ x ] = value		8034556	0		=			
ANR	8035275	ArrayIndexing	ptr [ x ]		8034556	0					
ANR	8035276	Identifier	ptr		8034556	0					
ANR	8035277	Identifier	x		8034556	1					
ANR	8035278	Identifier	value		8034556	1					
ANR	8035279	IfStatement	if ( ++ x >= alen )		8034556	1					
ANR	8035280	Condition	++ x >= alen	265:20:4231:4241	8034556	0	True				
ANR	8035281	RelationalExpression	++ x >= alen		8034556	0		>=			
ANR	8035282	UnaryExpression	++ x		8034556	0					
ANR	8035283	IncDec	++		8034556	0					
ANR	8035284	Identifier	x		8034556	1					
ANR	8035285	Identifier	alen		8034556	1					
ANR	8035286	CompoundStatement		261:33:4109:4109	8034556	1					
ANR	8035287	ExpressionStatement	x = 0	267:20:4267:4272	8034556	0	True				
ANR	8035288	AssignmentExpression	x = 0		8034556	0		=			
ANR	8035289	Identifier	x		8034556	0					
ANR	8035290	PrimaryExpression	0		8034556	1					
ANR	8035291	ExpressionStatement	ptr += stride	269:20:4295:4308	8034556	1	True				
ANR	8035292	AssignmentExpression	ptr += stride		8034556	0		+=			
ANR	8035293	Identifier	ptr		8034556	0					
ANR	8035294	Identifier	stride		8034556	1					
ANR	8035295	IfStatement	if ( ptr == end )		8034556	2					
ANR	8035296	Condition	ptr == end	271:24:4335:4344	8034556	0	True				
ANR	8035297	EqualityExpression	ptr == end		8034556	0		==			
ANR	8035298	Identifier	ptr		8034556	0					
ANR	8035299	Identifier	end		8034556	1					
ANR	8035300	BreakStatement	break ;	273:24:4372:4377	8034556	1	True				
ANR	8035301	ElseStatement	else		8034556	0					
ANR	8035302	CompoundStatement		277:11:4301:4301	8034556	0					
ANR	8035303	ForStatement	for ( y = 0 ; y < h ; y ++ )		8034556	0					
ANR	8035304	ForInit	y = 0 ;	283:13:4452:4457	8034556	0	True				
ANR	8035305	AssignmentExpression	y = 0		8034556	0		=			
ANR	8035306	Identifier	y		8034556	0					
ANR	8035307	PrimaryExpression	0		8034556	1					
ANR	8035308	Condition	y < h	283:20:4459:4463	8034556	1	True				
ANR	8035309	RelationalExpression	y < h		8034556	0		<			
ANR	8035310	Identifier	y		8034556	0					
ANR	8035311	Identifier	h		8034556	1					
ANR	8035312	PostIncDecOperationExpression	y ++	283:27:4466:4468	8034556	2	True				
ANR	8035313	Identifier	y		8034556	0					
ANR	8035314	IncDec	++		8034556	1					
ANR	8035315	CompoundStatement		279:32:4336:4336	8034556	3					
ANR	8035316	IfStatement	if ( buf_end - buf < len )		8034556	0					
ANR	8035317	Condition	buf_end - buf < len	285:16:4490:4508	8034556	0	True				
ANR	8035318	RelationalExpression	buf_end - buf < len		8034556	0		<			
ANR	8035319	AdditiveExpression	buf_end - buf		8034556	0		-			
ANR	8035320	Identifier	buf_end		8034556	0					
ANR	8035321	Identifier	buf		8034556	1					
ANR	8035322	Identifier	len		8034556	1					
ANR	8035323	BreakStatement	break ;	287:16:4528:4533	8034556	1	True				
ANR	8035324	ExpressionStatement	"memcpy ( ptr , buf , len )"	289:12:4548:4569	8034556	1	True				
ANR	8035325	CallExpression	"memcpy ( ptr , buf , len )"		8034556	0					
ANR	8035326	Callee	memcpy		8034556	0					
ANR	8035327	Identifier	memcpy		8034556	0					
ANR	8035328	ArgumentList	ptr		8034556	1					
ANR	8035329	Argument	ptr		8034556	0					
ANR	8035330	Identifier	ptr		8034556	0					
ANR	8035331	Argument	buf		8034556	1					
ANR	8035332	Identifier	buf		8034556	0					
ANR	8035333	Argument	len		8034556	2					
ANR	8035334	Identifier	len		8034556	0					
ANR	8035335	ExpressionStatement	ptr += stride	291:12:4584:4597	8034556	2	True				
ANR	8035336	AssignmentExpression	ptr += stride		8034556	0		+=			
ANR	8035337	Identifier	ptr		8034556	0					
ANR	8035338	Identifier	stride		8034556	1					
ANR	8035339	ExpressionStatement	buf += alen	293:12:4612:4623	8034556	3	True				
ANR	8035340	AssignmentExpression	buf += alen		8034556	0		+=			
ANR	8035341	Identifier	buf		8034556	0					
ANR	8035342	Identifier	alen		8034556	1					
ANR	8035343	IfStatement	if ( avctx -> pix_fmt == AV_PIX_FMT_PAL8 && depth < 8 )		8034556	36					
ANR	8035344	Condition	avctx -> pix_fmt == AV_PIX_FMT_PAL8 && depth < 8	299:8:4652:4697	8034556	0	True				
ANR	8035345	AndExpression	avctx -> pix_fmt == AV_PIX_FMT_PAL8 && depth < 8		8034556	0		&&			
ANR	8035346	EqualityExpression	avctx -> pix_fmt == AV_PIX_FMT_PAL8		8034556	0		==			
ANR	8035347	PtrMemberAccess	avctx -> pix_fmt		8034556	0					
ANR	8035348	Identifier	avctx		8034556	0					
ANR	8035349	Identifier	pix_fmt		8034556	1					
ANR	8035350	Identifier	AV_PIX_FMT_PAL8		8034556	1					
ANR	8035351	RelationalExpression	depth < 8		8034556	1		<			
ANR	8035352	Identifier	depth		8034556	0					
ANR	8035353	PrimaryExpression	8		8034556	1					
ANR	8035354	CompoundStatement		297:8:4576:4600	8034556	1					
ANR	8035355	IdentifierDeclStatement	uint8_t * ptr_free = ptr2 ;	301:8:4711:4735	8034556	0	True				
ANR	8035356	IdentifierDecl	* ptr_free = ptr2		8034556	0					
ANR	8035357	IdentifierDeclType	uint8_t *		8034556	0					
ANR	8035358	Identifier	ptr_free		8034556	1					
ANR	8035359	AssignmentExpression	* ptr_free = ptr2		8034556	2		=			
ANR	8035360	Identifier	ptr2		8034556	0					
ANR	8035361	Identifier	ptr2		8034556	1					
ANR	8035362	ExpressionStatement	ptr = p -> data [ 0 ]	303:8:4746:4762	8034556	1	True				
ANR	8035363	AssignmentExpression	ptr = p -> data [ 0 ]		8034556	0		=			
ANR	8035364	Identifier	ptr		8034556	0					
ANR	8035365	ArrayIndexing	p -> data [ 0 ]		8034556	1					
ANR	8035366	PtrMemberAccess	p -> data		8034556	0					
ANR	8035367	Identifier	p		8034556	0					
ANR	8035368	Identifier	data		8034556	1					
ANR	8035369	PrimaryExpression	0		8034556	1					
ANR	8035370	ForStatement	for ( y = 0 ; y < h ; y ++ )		8034556	2					
ANR	8035371	ForInit	y = 0 ;	305:13:4778:4781	8034556	0	True				
ANR	8035372	AssignmentExpression	y = 0		8034556	0		=			
ANR	8035373	Identifier	y		8034556	0					
ANR	8035374	PrimaryExpression	0		8034556	1					
ANR	8035375	Condition	y < h	305:18:4783:4785	8034556	1	True				
ANR	8035376	RelationalExpression	y < h		8034556	0		<			
ANR	8035377	Identifier	y		8034556	0					
ANR	8035378	Identifier	h		8034556	1					
ANR	8035379	PostIncDecOperationExpression	y ++	305:23:4788:4790	8034556	2	True				
ANR	8035380	Identifier	y		8034556	0					
ANR	8035381	IncDec	++		8034556	1					
ANR	8035382	CompoundStatement		301:28:4658:4658	8034556	3					
ANR	8035383	ForStatement	for ( x = 0 ; x < ( w + 7 >> 3 ) * depth ; x ++ )		8034556	0					
ANR	8035384	ForInit	x = 0 ;	307:17:4813:4818	8034556	0	True				
ANR	8035385	AssignmentExpression	x = 0		8034556	0		=			
ANR	8035386	Identifier	x		8034556	0					
ANR	8035387	PrimaryExpression	0		8034556	1					
ANR	8035388	Condition	x < ( w + 7 >> 3 ) * depth	307:24:4820:4843	8034556	1	True				
ANR	8035389	RelationalExpression	x < ( w + 7 >> 3 ) * depth		8034556	0		<			
ANR	8035390	Identifier	x		8034556	0					
ANR	8035391	MultiplicativeExpression	( w + 7 >> 3 ) * depth		8034556	1		*			
ANR	8035392	ShiftExpression	w + 7 >> 3		8034556	0		>>			
ANR	8035393	AdditiveExpression	w + 7		8034556	0		+			
ANR	8035394	Identifier	w		8034556	0					
ANR	8035395	PrimaryExpression	7		8034556	1					
ANR	8035396	PrimaryExpression	3		8034556	1					
ANR	8035397	Identifier	depth		8034556	1					
ANR	8035398	PostIncDecOperationExpression	x ++	307:50:4846:4848	8034556	2	True				
ANR	8035399	Identifier	x		8034556	0					
ANR	8035400	IncDec	++		8034556	1					
ANR	8035401	CompoundStatement		303:55:4716:4716	8034556	3					
ANR	8035402	IfStatement	if ( depth == 1 )		8034556	0					
ANR	8035403	Condition	depth == 1	309:20:4874:4883	8034556	0	True				
ANR	8035404	EqualityExpression	depth == 1		8034556	0		==			
ANR	8035405	Identifier	depth		8034556	0					
ANR	8035406	PrimaryExpression	1		8034556	1					
ANR	8035407	CompoundStatement		305:32:4751:4751	8034556	1					
ANR	8035408	ExpressionStatement	ptr [ 8 * x ] = ptr2 [ x ] >> 7	311:20:4909:4934	8034556	0	True				
ANR	8035409	AssignmentExpression	ptr [ 8 * x ] = ptr2 [ x ] >> 7		8034556	0		=			
ANR	8035410	ArrayIndexing	ptr [ 8 * x ]		8034556	0					
ANR	8035411	Identifier	ptr		8034556	0					
ANR	8035412	MultiplicativeExpression	8 * x		8034556	1		*			
ANR	8035413	PrimaryExpression	8		8034556	0					
ANR	8035414	Identifier	x		8034556	1					
ANR	8035415	ShiftExpression	ptr2 [ x ] >> 7		8034556	1		>>			
ANR	8035416	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035417	Identifier	ptr2		8034556	0					
ANR	8035418	Identifier	x		8034556	1					
ANR	8035419	PrimaryExpression	7		8034556	1					
ANR	8035420	ExpressionStatement	ptr [ 8 * x + 1 ] = ptr2 [ x ] >> 6 & 1	313:20:4957:4986	8034556	1	True				
ANR	8035421	AssignmentExpression	ptr [ 8 * x + 1 ] = ptr2 [ x ] >> 6 & 1		8034556	0		=			
ANR	8035422	ArrayIndexing	ptr [ 8 * x + 1 ]		8034556	0					
ANR	8035423	Identifier	ptr		8034556	0					
ANR	8035424	AdditiveExpression	8 * x + 1		8034556	1		+			
ANR	8035425	MultiplicativeExpression	8 * x		8034556	0		*			
ANR	8035426	PrimaryExpression	8		8034556	0					
ANR	8035427	Identifier	x		8034556	1					
ANR	8035428	PrimaryExpression	1		8034556	1					
ANR	8035429	BitAndExpression	ptr2 [ x ] >> 6 & 1		8034556	1		&			
ANR	8035430	ShiftExpression	ptr2 [ x ] >> 6		8034556	0		>>			
ANR	8035431	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035432	Identifier	ptr2		8034556	0					
ANR	8035433	Identifier	x		8034556	1					
ANR	8035434	PrimaryExpression	6		8034556	1					
ANR	8035435	PrimaryExpression	1		8034556	1					
ANR	8035436	ExpressionStatement	ptr [ 8 * x + 2 ] = ptr2 [ x ] >> 5 & 1	315:20:5009:5038	8034556	2	True				
ANR	8035437	AssignmentExpression	ptr [ 8 * x + 2 ] = ptr2 [ x ] >> 5 & 1		8034556	0		=			
ANR	8035438	ArrayIndexing	ptr [ 8 * x + 2 ]		8034556	0					
ANR	8035439	Identifier	ptr		8034556	0					
ANR	8035440	AdditiveExpression	8 * x + 2		8034556	1		+			
ANR	8035441	MultiplicativeExpression	8 * x		8034556	0		*			
ANR	8035442	PrimaryExpression	8		8034556	0					
ANR	8035443	Identifier	x		8034556	1					
ANR	8035444	PrimaryExpression	2		8034556	1					
ANR	8035445	BitAndExpression	ptr2 [ x ] >> 5 & 1		8034556	1		&			
ANR	8035446	ShiftExpression	ptr2 [ x ] >> 5		8034556	0		>>			
ANR	8035447	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035448	Identifier	ptr2		8034556	0					
ANR	8035449	Identifier	x		8034556	1					
ANR	8035450	PrimaryExpression	5		8034556	1					
ANR	8035451	PrimaryExpression	1		8034556	1					
ANR	8035452	ExpressionStatement	ptr [ 8 * x + 3 ] = ptr2 [ x ] >> 4 & 1	317:20:5061:5090	8034556	3	True				
ANR	8035453	AssignmentExpression	ptr [ 8 * x + 3 ] = ptr2 [ x ] >> 4 & 1		8034556	0		=			
ANR	8035454	ArrayIndexing	ptr [ 8 * x + 3 ]		8034556	0					
ANR	8035455	Identifier	ptr		8034556	0					
ANR	8035456	AdditiveExpression	8 * x + 3		8034556	1		+			
ANR	8035457	MultiplicativeExpression	8 * x		8034556	0		*			
ANR	8035458	PrimaryExpression	8		8034556	0					
ANR	8035459	Identifier	x		8034556	1					
ANR	8035460	PrimaryExpression	3		8034556	1					
ANR	8035461	BitAndExpression	ptr2 [ x ] >> 4 & 1		8034556	1		&			
ANR	8035462	ShiftExpression	ptr2 [ x ] >> 4		8034556	0		>>			
ANR	8035463	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035464	Identifier	ptr2		8034556	0					
ANR	8035465	Identifier	x		8034556	1					
ANR	8035466	PrimaryExpression	4		8034556	1					
ANR	8035467	PrimaryExpression	1		8034556	1					
ANR	8035468	ExpressionStatement	ptr [ 8 * x + 4 ] = ptr2 [ x ] >> 3 & 1	319:20:5113:5142	8034556	4	True				
ANR	8035469	AssignmentExpression	ptr [ 8 * x + 4 ] = ptr2 [ x ] >> 3 & 1		8034556	0		=			
ANR	8035470	ArrayIndexing	ptr [ 8 * x + 4 ]		8034556	0					
ANR	8035471	Identifier	ptr		8034556	0					
ANR	8035472	AdditiveExpression	8 * x + 4		8034556	1		+			
ANR	8035473	MultiplicativeExpression	8 * x		8034556	0		*			
ANR	8035474	PrimaryExpression	8		8034556	0					
ANR	8035475	Identifier	x		8034556	1					
ANR	8035476	PrimaryExpression	4		8034556	1					
ANR	8035477	BitAndExpression	ptr2 [ x ] >> 3 & 1		8034556	1		&			
ANR	8035478	ShiftExpression	ptr2 [ x ] >> 3		8034556	0		>>			
ANR	8035479	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035480	Identifier	ptr2		8034556	0					
ANR	8035481	Identifier	x		8034556	1					
ANR	8035482	PrimaryExpression	3		8034556	1					
ANR	8035483	PrimaryExpression	1		8034556	1					
ANR	8035484	ExpressionStatement	ptr [ 8 * x + 5 ] = ptr2 [ x ] >> 2 & 1	321:20:5165:5194	8034556	5	True				
ANR	8035485	AssignmentExpression	ptr [ 8 * x + 5 ] = ptr2 [ x ] >> 2 & 1		8034556	0		=			
ANR	8035486	ArrayIndexing	ptr [ 8 * x + 5 ]		8034556	0					
ANR	8035487	Identifier	ptr		8034556	0					
ANR	8035488	AdditiveExpression	8 * x + 5		8034556	1		+			
ANR	8035489	MultiplicativeExpression	8 * x		8034556	0		*			
ANR	8035490	PrimaryExpression	8		8034556	0					
ANR	8035491	Identifier	x		8034556	1					
ANR	8035492	PrimaryExpression	5		8034556	1					
ANR	8035493	BitAndExpression	ptr2 [ x ] >> 2 & 1		8034556	1		&			
ANR	8035494	ShiftExpression	ptr2 [ x ] >> 2		8034556	0		>>			
ANR	8035495	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035496	Identifier	ptr2		8034556	0					
ANR	8035497	Identifier	x		8034556	1					
ANR	8035498	PrimaryExpression	2		8034556	1					
ANR	8035499	PrimaryExpression	1		8034556	1					
ANR	8035500	ExpressionStatement	ptr [ 8 * x + 6 ] = ptr2 [ x ] >> 1 & 1	323:20:5217:5246	8034556	6	True				
ANR	8035501	AssignmentExpression	ptr [ 8 * x + 6 ] = ptr2 [ x ] >> 1 & 1		8034556	0		=			
ANR	8035502	ArrayIndexing	ptr [ 8 * x + 6 ]		8034556	0					
ANR	8035503	Identifier	ptr		8034556	0					
ANR	8035504	AdditiveExpression	8 * x + 6		8034556	1		+			
ANR	8035505	MultiplicativeExpression	8 * x		8034556	0		*			
ANR	8035506	PrimaryExpression	8		8034556	0					
ANR	8035507	Identifier	x		8034556	1					
ANR	8035508	PrimaryExpression	6		8034556	1					
ANR	8035509	BitAndExpression	ptr2 [ x ] >> 1 & 1		8034556	1		&			
ANR	8035510	ShiftExpression	ptr2 [ x ] >> 1		8034556	0		>>			
ANR	8035511	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035512	Identifier	ptr2		8034556	0					
ANR	8035513	Identifier	x		8034556	1					
ANR	8035514	PrimaryExpression	1		8034556	1					
ANR	8035515	PrimaryExpression	1		8034556	1					
ANR	8035516	ExpressionStatement	ptr [ 8 * x + 7 ] = ptr2 [ x ] & 1	325:20:5269:5298	8034556	7	True				
ANR	8035517	AssignmentExpression	ptr [ 8 * x + 7 ] = ptr2 [ x ] & 1		8034556	0		=			
ANR	8035518	ArrayIndexing	ptr [ 8 * x + 7 ]		8034556	0					
ANR	8035519	Identifier	ptr		8034556	0					
ANR	8035520	AdditiveExpression	8 * x + 7		8034556	1		+			
ANR	8035521	MultiplicativeExpression	8 * x		8034556	0		*			
ANR	8035522	PrimaryExpression	8		8034556	0					
ANR	8035523	Identifier	x		8034556	1					
ANR	8035524	PrimaryExpression	7		8034556	1					
ANR	8035525	BitAndExpression	ptr2 [ x ] & 1		8034556	1		&			
ANR	8035526	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035527	Identifier	ptr2		8034556	0					
ANR	8035528	Identifier	x		8034556	1					
ANR	8035529	PrimaryExpression	1		8034556	1					
ANR	8035530	ElseStatement	else		8034556	0					
ANR	8035531	CompoundStatement		323:23:5189:5189	8034556	0					
ANR	8035532	ExpressionStatement	ptr [ 2 * x ] = ptr2 [ x ] >> 4	329:20:5347:5372	8034556	0	True				
ANR	8035533	AssignmentExpression	ptr [ 2 * x ] = ptr2 [ x ] >> 4		8034556	0		=			
ANR	8035534	ArrayIndexing	ptr [ 2 * x ]		8034556	0					
ANR	8035535	Identifier	ptr		8034556	0					
ANR	8035536	MultiplicativeExpression	2 * x		8034556	1		*			
ANR	8035537	PrimaryExpression	2		8034556	0					
ANR	8035538	Identifier	x		8034556	1					
ANR	8035539	ShiftExpression	ptr2 [ x ] >> 4		8034556	1		>>			
ANR	8035540	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035541	Identifier	ptr2		8034556	0					
ANR	8035542	Identifier	x		8034556	1					
ANR	8035543	PrimaryExpression	4		8034556	1					
ANR	8035544	ExpressionStatement	ptr [ 2 * x + 1 ] = ptr2 [ x ] & 0xF	331:20:5395:5421	8034556	1	True				
ANR	8035545	AssignmentExpression	ptr [ 2 * x + 1 ] = ptr2 [ x ] & 0xF		8034556	0		=			
ANR	8035546	ArrayIndexing	ptr [ 2 * x + 1 ]		8034556	0					
ANR	8035547	Identifier	ptr		8034556	0					
ANR	8035548	AdditiveExpression	2 * x + 1		8034556	1		+			
ANR	8035549	MultiplicativeExpression	2 * x		8034556	0		*			
ANR	8035550	PrimaryExpression	2		8034556	0					
ANR	8035551	Identifier	x		8034556	1					
ANR	8035552	PrimaryExpression	1		8034556	1					
ANR	8035553	BitAndExpression	ptr2 [ x ] & 0xF		8034556	1		&			
ANR	8035554	ArrayIndexing	ptr2 [ x ]		8034556	0					
ANR	8035555	Identifier	ptr2		8034556	0					
ANR	8035556	Identifier	x		8034556	1					
ANR	8035557	PrimaryExpression	0xF		8034556	1					
ANR	8035558	ExpressionStatement	ptr += p -> linesize [ 0 ]	337:12:5470:5492	8034556	1	True				
ANR	8035559	AssignmentExpression	ptr += p -> linesize [ 0 ]		8034556	0		+=			
ANR	8035560	Identifier	ptr		8034556	0					
ANR	8035561	ArrayIndexing	p -> linesize [ 0 ]		8034556	1					
ANR	8035562	PtrMemberAccess	p -> linesize		8034556	0					
ANR	8035563	Identifier	p		8034556	0					
ANR	8035564	Identifier	linesize		8034556	1					
ANR	8035565	PrimaryExpression	0		8034556	1					
ANR	8035566	ExpressionStatement	ptr2 += ( w + 15 >> 3 ) * depth	339:12:5507:5536	8034556	2	True				
ANR	8035567	AssignmentExpression	ptr2 += ( w + 15 >> 3 ) * depth		8034556	0		+=			
ANR	8035568	Identifier	ptr2		8034556	0					
ANR	8035569	MultiplicativeExpression	( w + 15 >> 3 ) * depth		8034556	1		*			
ANR	8035570	ShiftExpression	w + 15 >> 3		8034556	0		>>			
ANR	8035571	AdditiveExpression	w + 15		8034556	0		+			
ANR	8035572	Identifier	w		8034556	0					
ANR	8035573	PrimaryExpression	15		8034556	1					
ANR	8035574	PrimaryExpression	3		8034556	1					
ANR	8035575	Identifier	depth		8034556	1					
ANR	8035576	ExpressionStatement	av_freep ( & ptr_free )	343:8:5558:5577	8034556	3	True				
ANR	8035577	CallExpression	av_freep ( & ptr_free )		8034556	0					
ANR	8035578	Callee	av_freep		8034556	0					
ANR	8035579	Identifier	av_freep		8034556	0					
ANR	8035580	ArgumentList	& ptr_free		8034556	1					
ANR	8035581	Argument	& ptr_free		8034556	0					
ANR	8035582	UnaryOperationExpression	& ptr_free		8034556	0					
ANR	8035583	UnaryOperator	&		8034556	0					
ANR	8035584	Identifier	ptr_free		8034556	1					
ANR	8035585	ExpressionStatement	* got_frame = 1	349:4:5593:5607	8034556	37	True				
ANR	8035586	AssignmentExpression	* got_frame = 1		8034556	0		=			
ANR	8035587	UnaryOperationExpression	* got_frame		8034556	0					
ANR	8035588	UnaryOperator	*		8034556	0					
ANR	8035589	Identifier	got_frame		8034556	1					
ANR	8035590	PrimaryExpression	1		8034556	1					
ANR	8035591	ReturnStatement	return buf - bufstart ;	353:4:5616:5637	8034556	38	True				
ANR	8035592	AdditiveExpression	buf - bufstart		8034556	0		-			
ANR	8035593	Identifier	buf		8034556	0					
ANR	8035594	Identifier	bufstart		8034556	1					
ANR	8035595	ReturnType	static int		8034556	1					
ANR	8035596	Identifier	sunrast_decode_frame		8034556	2					
ANR	8035597	ParameterList	"AVCodecContext * avctx , void * data , int * got_frame , AVPacket * avpkt"		8034556	3					
ANR	8035598	Parameter	AVCodecContext * avctx	1:32:32:52	8034556	0	True				
ANR	8035599	ParameterType	AVCodecContext *		8034556	0					
ANR	8035600	Identifier	avctx		8034556	1					
ANR	8035601	Parameter	void * data	1:55:55:64	8034556	1	True				
ANR	8035602	ParameterType	void *		8034556	0					
ANR	8035603	Identifier	data		8034556	1					
ANR	8035604	Parameter	int * got_frame	3:32:100:113	8034556	2	True				
ANR	8035605	ParameterType	int *		8034556	0					
ANR	8035606	Identifier	got_frame		8034556	1					
ANR	8035607	Parameter	AVPacket * avpkt	3:48:116:130	8034556	3	True				
ANR	8035608	ParameterType	AVPacket *		8034556	0					
ANR	8035609	Identifier	avpkt		8034556	1					
ANR	8035610	CFGEntryNode	ENTRY		8034556		True				
ANR	8035611	CFGExitNode	EXIT		8034556		True				
ANR	8035612	Symbol	RT_BYTE_ENCODED		8034556						
ANR	8035613	Symbol	ENOMEM		8034556						
ANR	8035614	Symbol	* x		8034556						
ANR	8035615	Symbol	data		8034556						
ANR	8035616	Symbol	AV_PIX_FMT_PAL8		8034556						
ANR	8035617	Symbol	avpkt		8034556						
ANR	8035618	Symbol	AV_PIX_FMT_MONOWHITE		8034556						
ANR	8035619	Symbol	run		8034556						
ANR	8035620	Symbol	RLE_TRIGGER		8034556						
ANR	8035621	Symbol	stride		8034556						
ANR	8035622	Symbol	type		8034556						
ANR	8035623	Symbol	ff_get_buffer		8034556						
ANR	8035624	Symbol	* p -> data		8034556						
ANR	8035625	Symbol	len		8034556						
ANR	8035626	Symbol	got_frame		8034556						
ANR	8035627	Symbol	* ptr		8034556						
ANR	8035628	Symbol	* ptr2		8034556						
ANR	8035629	Symbol	buf_end		8034556						
ANR	8035630	Symbol	ret		8034556						
ANR	8035631	Symbol	* ( uint32_t * ) ptr		8034556						
ANR	8035632	Symbol	* buf		8034556						
ANR	8035633	Symbol	NULL		8034556						
ANR	8035634	Symbol	* got_frame		8034556						
ANR	8035635	Symbol	RAS_MAGIC		8034556						
ANR	8035636	Symbol	AV_PIX_FMT_0RGB		8034556						
ANR	8035637	Symbol	AV_PIX_FMT_0BGR		8034556						
ANR	8035638	Symbol	p -> linesize		8034556						
ANR	8035639	Symbol	ptr2		8034556						
ANR	8035640	Symbol	RMT_RAW		8034556						
ANR	8035641	Symbol	* avctx		8034556						
ANR	8035642	Symbol	ff_set_dimensions		8034556						
ANR	8035643	Symbol	AV_PIX_FMT_GRAY8		8034556						
ANR	8035644	Symbol	alen		8034556						
ANR	8035645	Symbol	avpkt -> data		8034556						
ANR	8035646	Symbol	avctx -> pix_fmt		8034556						
ANR	8035647	Symbol	RT_FORMAT_TIFF		8034556						
ANR	8035648	Symbol	p -> data		8034556						
ANR	8035649	Symbol	bufstart		8034556						
ANR	8035650	Symbol	AV_RB32		8034556						
ANR	8035651	Symbol	AV_PIX_FMT_RGB24		8034556						
ANR	8035652	Symbol	ptr_free		8034556						
ANR	8035653	Symbol	avpkt -> size		8034556						
ANR	8035654	Symbol	AVERROR_PATCHWELCOME		8034556						
ANR	8035655	Symbol	AV_PICTURE_TYPE_I		8034556						
ANR	8035656	Symbol	end		8034556						
ANR	8035657	Symbol	* * p		8034556						
ANR	8035658	Symbol	avctx		8034556						
ANR	8035659	Symbol	p -> pict_type		8034556						
ANR	8035660	Symbol	value		8034556						
ANR	8035661	Symbol	* avpkt		8034556						
ANR	8035662	Symbol	AV_LOG_ERROR		8034556						
ANR	8035663	Symbol	h		8034556						
ANR	8035664	Symbol	RT_FORMAT_RGB		8034556						
ANR	8035665	Symbol	& ptr_free		8034556						
ANR	8035666	Symbol	RT_EXPERIMENTAL		8034556						
ANR	8035667	Symbol	AV_PIX_FMT_NONE		8034556						
ANR	8035668	Symbol	* p -> linesize		8034556						
ANR	8035669	Symbol	ptr		8034556						
ANR	8035670	Symbol	p		8034556						
ANR	8035671	Symbol	* buf ++		8034556						
ANR	8035672	Symbol	buf		8034556						
ANR	8035673	Symbol	AV_PIX_FMT_BGR24		8034556						
ANR	8035674	Symbol	depth		8034556						
ANR	8035675	Symbol	RT_FORMAT_IFF		8034556						
ANR	8035676	Symbol	w		8034556						
ANR	8035677	Symbol	x		8034556						
ANR	8035678	Symbol	maptype		8034556						
ANR	8035679	Symbol	y		8034556						
ANR	8035680	Symbol	AVERROR_INVALIDDATA		8034556						
ANR	8035681	Symbol	* p		8034556						
ANR	8035682	Symbol	av_malloc_array		8034556						
ANR	8035683	Symbol	AVERROR		8034556						
ANR	8035684	Symbol	AV_LOG_WARNING		8034556						
ANR	8035685	Symbol	maplength		8034556						
ANR	8035686	Symbol	* len		8034556						
