command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5067546	File	/home/p4ultr4n/workplace/ReVeal/raw_code/json_lexer_feed_char_0.c								
ANR	5067547	Function	json_lexer_feed_char	1:0:0:1549							
ANR	5067548	FunctionDef	"json_lexer_feed_char (JSONLexer * lexer , char ch , bool flush)"		5067547	0					
ANR	5067549	CompoundStatement		3:0:72:1549	5067547	0					
ANR	5067550	IdentifierDeclStatement	"int char_consumed , new_state ;"	5:4:79:107	5067547	0	True				
ANR	5067551	IdentifierDecl	char_consumed		5067547	0					
ANR	5067552	IdentifierDeclType	int		5067547	0					
ANR	5067553	Identifier	char_consumed		5067547	1					
ANR	5067554	IdentifierDecl	new_state		5067547	1					
ANR	5067555	IdentifierDeclType	int		5067547	0					
ANR	5067556	Identifier	new_state		5067547	1					
ANR	5067557	ExpressionStatement	lexer -> x ++	9:4:116:126	5067547	1	True				
ANR	5067558	PostIncDecOperationExpression	lexer -> x ++		5067547	0					
ANR	5067559	PtrMemberAccess	lexer -> x		5067547	0					
ANR	5067560	Identifier	lexer		5067547	0					
ANR	5067561	Identifier	x		5067547	1					
ANR	5067562	IncDec	++		5067547	1					
ANR	5067563	IfStatement	if ( ch == '\\n' )		5067547	2					
ANR	5067564	Condition	ch == '\\n'	11:8:137:146	5067547	0	True				
ANR	5067565	EqualityExpression	ch == '\\n'		5067547	0		==			
ANR	5067566	Identifier	ch		5067547	0					
ANR	5067567	PrimaryExpression	'\\n'		5067547	1					
ANR	5067568	CompoundStatement		9:20:76:76	5067547	1					
ANR	5067569	ExpressionStatement	lexer -> x = 0	13:8:160:172	5067547	0	True				
ANR	5067570	AssignmentExpression	lexer -> x = 0		5067547	0		=			
ANR	5067571	PtrMemberAccess	lexer -> x		5067547	0					
ANR	5067572	Identifier	lexer		5067547	0					
ANR	5067573	Identifier	x		5067547	1					
ANR	5067574	PrimaryExpression	0		5067547	1					
ANR	5067575	ExpressionStatement	lexer -> y ++	15:8:183:193	5067547	1	True				
ANR	5067576	PostIncDecOperationExpression	lexer -> y ++		5067547	0					
ANR	5067577	PtrMemberAccess	lexer -> y		5067547	0					
ANR	5067578	Identifier	lexer		5067547	0					
ANR	5067579	Identifier	y		5067547	1					
ANR	5067580	IncDec	++		5067547	1					
ANR	5067581	DoStatement	do		5067547	3					
ANR	5067582	CompoundStatement		19:7:139:139	5067547	0					
ANR	5067583	ExpressionStatement	new_state = json_lexer [ lexer -> state ] [ ( uint8_t ) ch ]	23:8:223:272	5067547	0	True				
ANR	5067584	AssignmentExpression	new_state = json_lexer [ lexer -> state ] [ ( uint8_t ) ch ]		5067547	0		=			
ANR	5067585	Identifier	new_state		5067547	0					
ANR	5067586	ArrayIndexing	json_lexer [ lexer -> state ] [ ( uint8_t ) ch ]		5067547	1					
ANR	5067587	ArrayIndexing	json_lexer [ lexer -> state ]		5067547	0					
ANR	5067588	Identifier	json_lexer		5067547	0					
ANR	5067589	PtrMemberAccess	lexer -> state		5067547	1					
ANR	5067590	Identifier	lexer		5067547	0					
ANR	5067591	Identifier	state		5067547	1					
ANR	5067592	CastExpression	( uint8_t ) ch		5067547	1					
ANR	5067593	CastTarget	uint8_t		5067547	0					
ANR	5067594	Identifier	ch		5067547	1					
ANR	5067595	ExpressionStatement	"char_consumed = ! TERMINAL_NEEDED_LOOKAHEAD ( lexer -> state , new_state )"	25:8:283:350	5067547	1	True				
ANR	5067596	AssignmentExpression	"char_consumed = ! TERMINAL_NEEDED_LOOKAHEAD ( lexer -> state , new_state )"		5067547	0		=			
ANR	5067597	Identifier	char_consumed		5067547	0					
ANR	5067598	UnaryOperationExpression	"! TERMINAL_NEEDED_LOOKAHEAD ( lexer -> state , new_state )"		5067547	1					
ANR	5067599	UnaryOperator	!		5067547	0					
ANR	5067600	CallExpression	"TERMINAL_NEEDED_LOOKAHEAD ( lexer -> state , new_state )"		5067547	1					
ANR	5067601	Callee	TERMINAL_NEEDED_LOOKAHEAD		5067547	0					
ANR	5067602	Identifier	TERMINAL_NEEDED_LOOKAHEAD		5067547	0					
ANR	5067603	ArgumentList	lexer -> state		5067547	1					
ANR	5067604	Argument	lexer -> state		5067547	0					
ANR	5067605	PtrMemberAccess	lexer -> state		5067547	0					
ANR	5067606	Identifier	lexer		5067547	0					
ANR	5067607	Identifier	state		5067547	1					
ANR	5067608	Argument	new_state		5067547	1					
ANR	5067609	Identifier	new_state		5067547	0					
ANR	5067610	IfStatement	if ( char_consumed )		5067547	2					
ANR	5067611	Condition	char_consumed	27:12:365:377	5067547	0	True				
ANR	5067612	Identifier	char_consumed		5067547	0					
ANR	5067613	CompoundStatement		25:27:307:307	5067547	1					
ANR	5067614	ExpressionStatement	"qstring_append_chr ( lexer -> token , ch )"	29:12:395:431	5067547	0	True				
ANR	5067615	CallExpression	"qstring_append_chr ( lexer -> token , ch )"		5067547	0					
ANR	5067616	Callee	qstring_append_chr		5067547	0					
ANR	5067617	Identifier	qstring_append_chr		5067547	0					
ANR	5067618	ArgumentList	lexer -> token		5067547	1					
ANR	5067619	Argument	lexer -> token		5067547	0					
ANR	5067620	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067621	Identifier	lexer		5067547	0					
ANR	5067622	Identifier	token		5067547	1					
ANR	5067623	Argument	ch		5067547	1					
ANR	5067624	Identifier	ch		5067547	0					
ANR	5067625	SwitchStatement	switch ( new_state )		5067547	3					
ANR	5067626	Condition	new_state	35:16:463:471	5067547	0	True				
ANR	5067627	Identifier	new_state		5067547	0					
ANR	5067628	CompoundStatement		33:27:401:401	5067547	1					
ANR	5067629	Label	case JSON_OPERATOR :	37:8:485:503	5067547	0	True				
ANR	5067630	Identifier	JSON_OPERATOR		5067547	0					
ANR	5067631	Label	case JSON_ESCAPE :	39:8:514:530	5067547	1	True				
ANR	5067632	Identifier	JSON_ESCAPE		5067547	0					
ANR	5067633	Label	case JSON_INTEGER :	41:8:541:558	5067547	2	True				
ANR	5067634	Identifier	JSON_INTEGER		5067547	0					
ANR	5067635	Label	case JSON_FLOAT :	43:8:569:584	5067547	3	True				
ANR	5067636	Identifier	JSON_FLOAT		5067547	0					
ANR	5067637	Label	case JSON_KEYWORD :	45:8:595:612	5067547	4	True				
ANR	5067638	Identifier	JSON_KEYWORD		5067547	0					
ANR	5067639	Label	case JSON_STRING :	47:8:623:639	5067547	5	True				
ANR	5067640	Identifier	JSON_STRING		5067547	0					
ANR	5067641	ExpressionStatement	"lexer -> emit ( lexer , lexer -> token , new_state , lexer -> x , lexer -> y )"	49:12:654:717	5067547	6	True				
ANR	5067642	CallExpression	"lexer -> emit ( lexer , lexer -> token , new_state , lexer -> x , lexer -> y )"		5067547	0					
ANR	5067643	Callee	lexer -> emit		5067547	0					
ANR	5067644	PtrMemberAccess	lexer -> emit		5067547	0					
ANR	5067645	Identifier	lexer		5067547	0					
ANR	5067646	Identifier	emit		5067547	1					
ANR	5067647	ArgumentList	lexer		5067547	1					
ANR	5067648	Argument	lexer		5067547	0					
ANR	5067649	Identifier	lexer		5067547	0					
ANR	5067650	Argument	lexer -> token		5067547	1					
ANR	5067651	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067652	Identifier	lexer		5067547	0					
ANR	5067653	Identifier	token		5067547	1					
ANR	5067654	Argument	new_state		5067547	2					
ANR	5067655	Identifier	new_state		5067547	0					
ANR	5067656	Argument	lexer -> x		5067547	3					
ANR	5067657	PtrMemberAccess	lexer -> x		5067547	0					
ANR	5067658	Identifier	lexer		5067547	0					
ANR	5067659	Identifier	x		5067547	1					
ANR	5067660	Argument	lexer -> y		5067547	4					
ANR	5067661	PtrMemberAccess	lexer -> y		5067547	0					
ANR	5067662	Identifier	lexer		5067547	0					
ANR	5067663	Identifier	y		5067547	1					
ANR	5067664	Label	case JSON_SKIP :	51:8:728:742	5067547	7	True				
ANR	5067665	Identifier	JSON_SKIP		5067547	0					
ANR	5067666	ExpressionStatement	QDECREF ( lexer -> token )	53:12:757:778	5067547	8	True				
ANR	5067667	CallExpression	QDECREF ( lexer -> token )		5067547	0					
ANR	5067668	Callee	QDECREF		5067547	0					
ANR	5067669	Identifier	QDECREF		5067547	0					
ANR	5067670	ArgumentList	lexer -> token		5067547	1					
ANR	5067671	Argument	lexer -> token		5067547	0					
ANR	5067672	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067673	Identifier	lexer		5067547	0					
ANR	5067674	Identifier	token		5067547	1					
ANR	5067675	ExpressionStatement	lexer -> token = qstring_new ( )	55:12:793:821	5067547	9	True				
ANR	5067676	AssignmentExpression	lexer -> token = qstring_new ( )		5067547	0		=			
ANR	5067677	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067678	Identifier	lexer		5067547	0					
ANR	5067679	Identifier	token		5067547	1					
ANR	5067680	CallExpression	qstring_new ( )		5067547	1					
ANR	5067681	Callee	qstring_new		5067547	0					
ANR	5067682	Identifier	qstring_new		5067547	0					
ANR	5067683	ArgumentList			5067547	1					
ANR	5067684	ExpressionStatement	new_state = IN_START	57:12:836:856	5067547	10	True				
ANR	5067685	AssignmentExpression	new_state = IN_START		5067547	0		=			
ANR	5067686	Identifier	new_state		5067547	0					
ANR	5067687	Identifier	IN_START		5067547	1					
ANR	5067688	BreakStatement	break ;	59:12:871:876	5067547	11	True				
ANR	5067689	Label	case IN_ERROR :	61:8:887:900	5067547	12	True				
ANR	5067690	Identifier	IN_ERROR		5067547	0					
ANR	5067691	ExpressionStatement	QDECREF ( lexer -> token )	63:12:915:936	5067547	13	True				
ANR	5067692	CallExpression	QDECREF ( lexer -> token )		5067547	0					
ANR	5067693	Callee	QDECREF		5067547	0					
ANR	5067694	Identifier	QDECREF		5067547	0					
ANR	5067695	ArgumentList	lexer -> token		5067547	1					
ANR	5067696	Argument	lexer -> token		5067547	0					
ANR	5067697	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067698	Identifier	lexer		5067547	0					
ANR	5067699	Identifier	token		5067547	1					
ANR	5067700	ExpressionStatement	lexer -> token = qstring_new ( )	65:12:951:979	5067547	14	True				
ANR	5067701	AssignmentExpression	lexer -> token = qstring_new ( )		5067547	0		=			
ANR	5067702	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067703	Identifier	lexer		5067547	0					
ANR	5067704	Identifier	token		5067547	1					
ANR	5067705	CallExpression	qstring_new ( )		5067547	1					
ANR	5067706	Callee	qstring_new		5067547	0					
ANR	5067707	Identifier	qstring_new		5067547	0					
ANR	5067708	ArgumentList			5067547	1					
ANR	5067709	ExpressionStatement	new_state = IN_START	67:12:994:1014	5067547	15	True				
ANR	5067710	AssignmentExpression	new_state = IN_START		5067547	0		=			
ANR	5067711	Identifier	new_state		5067547	0					
ANR	5067712	Identifier	IN_START		5067547	1					
ANR	5067713	ReturnStatement	return - EINVAL ;	69:12:1029:1043	5067547	16	True				
ANR	5067714	UnaryOperationExpression	- EINVAL		5067547	0					
ANR	5067715	UnaryOperator	-		5067547	0					
ANR	5067716	Identifier	EINVAL		5067547	1					
ANR	5067717	Label	default :	71:8:1054:1061	5067547	17	True				
ANR	5067718	Identifier	default		5067547	0					
ANR	5067719	BreakStatement	break ;	73:12:1076:1081	5067547	18	True				
ANR	5067720	ExpressionStatement	lexer -> state = new_state	77:8:1103:1127	5067547	4	True				
ANR	5067721	AssignmentExpression	lexer -> state = new_state		5067547	0		=			
ANR	5067722	PtrMemberAccess	lexer -> state		5067547	0					
ANR	5067723	Identifier	lexer		5067547	0					
ANR	5067724	Identifier	state		5067547	1					
ANR	5067725	Identifier	new_state		5067547	1					
ANR	5067726	Condition	! char_consumed && ! flush	79:13:1143:1166	5067547	1	True				
ANR	5067727	AndExpression	! char_consumed && ! flush		5067547	0		&&			
ANR	5067728	UnaryOperationExpression	! char_consumed		5067547	0					
ANR	5067729	UnaryOperator	!		5067547	0					
ANR	5067730	Identifier	char_consumed		5067547	1					
ANR	5067731	UnaryOperationExpression	! flush		5067547	1					
ANR	5067732	UnaryOperator	!		5067547	0					
ANR	5067733	Identifier	flush		5067547	1					
ANR	5067734	IfStatement	if ( lexer -> token -> length > MAX_TOKEN_SIZE )		5067547	4					
ANR	5067735	Condition	lexer -> token -> length > MAX_TOKEN_SIZE	89:8:1301:1337	5067547	0	True				
ANR	5067736	RelationalExpression	lexer -> token -> length > MAX_TOKEN_SIZE		5067547	0		>			
ANR	5067737	PtrMemberAccess	lexer -> token -> length		5067547	0					
ANR	5067738	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067739	Identifier	lexer		5067547	0					
ANR	5067740	Identifier	token		5067547	1					
ANR	5067741	Identifier	length		5067547	1					
ANR	5067742	Identifier	MAX_TOKEN_SIZE		5067547	1					
ANR	5067743	CompoundStatement		87:47:1267:1267	5067547	1					
ANR	5067744	ExpressionStatement	"lexer -> emit ( lexer , lexer -> token , lexer -> state , lexer -> x , lexer -> y )"	91:8:1351:1417	5067547	0	True				
ANR	5067745	CallExpression	"lexer -> emit ( lexer , lexer -> token , lexer -> state , lexer -> x , lexer -> y )"		5067547	0					
ANR	5067746	Callee	lexer -> emit		5067547	0					
ANR	5067747	PtrMemberAccess	lexer -> emit		5067547	0					
ANR	5067748	Identifier	lexer		5067547	0					
ANR	5067749	Identifier	emit		5067547	1					
ANR	5067750	ArgumentList	lexer		5067547	1					
ANR	5067751	Argument	lexer		5067547	0					
ANR	5067752	Identifier	lexer		5067547	0					
ANR	5067753	Argument	lexer -> token		5067547	1					
ANR	5067754	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067755	Identifier	lexer		5067547	0					
ANR	5067756	Identifier	token		5067547	1					
ANR	5067757	Argument	lexer -> state		5067547	2					
ANR	5067758	PtrMemberAccess	lexer -> state		5067547	0					
ANR	5067759	Identifier	lexer		5067547	0					
ANR	5067760	Identifier	state		5067547	1					
ANR	5067761	Argument	lexer -> x		5067547	3					
ANR	5067762	PtrMemberAccess	lexer -> x		5067547	0					
ANR	5067763	Identifier	lexer		5067547	0					
ANR	5067764	Identifier	x		5067547	1					
ANR	5067765	Argument	lexer -> y		5067547	4					
ANR	5067766	PtrMemberAccess	lexer -> y		5067547	0					
ANR	5067767	Identifier	lexer		5067547	0					
ANR	5067768	Identifier	y		5067547	1					
ANR	5067769	ExpressionStatement	QDECREF ( lexer -> token )	93:8:1428:1449	5067547	1	True				
ANR	5067770	CallExpression	QDECREF ( lexer -> token )		5067547	0					
ANR	5067771	Callee	QDECREF		5067547	0					
ANR	5067772	Identifier	QDECREF		5067547	0					
ANR	5067773	ArgumentList	lexer -> token		5067547	1					
ANR	5067774	Argument	lexer -> token		5067547	0					
ANR	5067775	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067776	Identifier	lexer		5067547	0					
ANR	5067777	Identifier	token		5067547	1					
ANR	5067778	ExpressionStatement	lexer -> token = qstring_new ( )	95:8:1460:1488	5067547	2	True				
ANR	5067779	AssignmentExpression	lexer -> token = qstring_new ( )		5067547	0		=			
ANR	5067780	PtrMemberAccess	lexer -> token		5067547	0					
ANR	5067781	Identifier	lexer		5067547	0					
ANR	5067782	Identifier	token		5067547	1					
ANR	5067783	CallExpression	qstring_new ( )		5067547	1					
ANR	5067784	Callee	qstring_new		5067547	0					
ANR	5067785	Identifier	qstring_new		5067547	0					
ANR	5067786	ArgumentList			5067547	1					
ANR	5067787	ExpressionStatement	lexer -> state = IN_START	97:8:1499:1522	5067547	3	True				
ANR	5067788	AssignmentExpression	lexer -> state = IN_START		5067547	0		=			
ANR	5067789	PtrMemberAccess	lexer -> state		5067547	0					
ANR	5067790	Identifier	lexer		5067547	0					
ANR	5067791	Identifier	state		5067547	1					
ANR	5067792	Identifier	IN_START		5067547	1					
ANR	5067793	ReturnStatement	return 0 ;	103:4:1538:1546	5067547	5	True				
ANR	5067794	PrimaryExpression	0		5067547	0					
ANR	5067795	ReturnType	static int		5067547	1					
ANR	5067796	Identifier	json_lexer_feed_char		5067547	2					
ANR	5067797	ParameterList	"JSONLexer * lexer , char ch , bool flush"		5067547	3					
ANR	5067798	Parameter	JSONLexer * lexer	1:32:32:47	5067547	0	True				
ANR	5067799	ParameterType	JSONLexer *		5067547	0					
ANR	5067800	Identifier	lexer		5067547	1					
ANR	5067801	Parameter	char ch	1:50:50:56	5067547	1	True				
ANR	5067802	ParameterType	char		5067547	0					
ANR	5067803	Identifier	ch		5067547	1					
ANR	5067804	Parameter	bool flush	1:59:59:68	5067547	2	True				
ANR	5067805	ParameterType	bool		5067547	0					
ANR	5067806	Identifier	flush		5067547	1					
ANR	5067807	CFGEntryNode	ENTRY		5067547		True				
ANR	5067808	CFGExitNode	EXIT		5067547		True				
ANR	5067809	Symbol	json_lexer		5067547						
ANR	5067810	Symbol	* * lexer		5067547						
ANR	5067811	Symbol	* ch		5067547						
ANR	5067812	Symbol	lexer -> token		5067547						
ANR	5067813	Symbol	flush		5067547						
ANR	5067814	Symbol	* lexer		5067547						
ANR	5067815	Symbol	* * json_lexer		5067547						
ANR	5067816	Symbol	qstring_new		5067547						
ANR	5067817	Symbol	new_state		5067547						
ANR	5067818	Symbol	IN_START		5067547						
ANR	5067819	Symbol	* json_lexer		5067547						
ANR	5067820	Symbol	lexer -> token -> length		5067547						
ANR	5067821	Symbol	lexer -> y		5067547						
ANR	5067822	Symbol	MAX_TOKEN_SIZE		5067547						
ANR	5067823	Symbol	lexer -> x		5067547						
ANR	5067824	Symbol	ch		5067547						
ANR	5067825	Symbol	* * lexer -> state		5067547						
ANR	5067826	Symbol	lexer		5067547						
ANR	5067827	Symbol	EINVAL		5067547						
ANR	5067828	Symbol	char_consumed		5067547						
ANR	5067829	Symbol	* lexer -> state		5067547						
ANR	5067830	Symbol	lexer -> state		5067547						
ANR	5067831	Symbol	TERMINAL_NEEDED_LOOKAHEAD		5067547						
ANR	5067832	Symbol	* lexer -> token		5067547						
ANR	5067833	Symbol	* * * lexer		5067547						
