command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5066240	File	/home/p4ultr4n/workplace/ReVeal/raw_code/jpg_decode_data_0.c								
ANR	5066241	Function	jpg_decode_data	1:0:0:2767							
ANR	5066242	FunctionDef	"jpg_decode_data (JPGContext * c , int width , int height , const uint8_t * src , int src_size , uint8_t * dst , int dst_stride , const uint8_t * mask , int mask_stride , int num_mbs , int swapuv)"		5066241	0					
ANR	5066243	CompoundStatement		11:0:305:2767	5066241	0					
ANR	5066244	IdentifierDeclStatement	GetBitContext gb ;	13:4:312:328	5066241	0	True				
ANR	5066245	IdentifierDecl	gb		5066241	0					
ANR	5066246	IdentifierDeclType	GetBitContext		5066241	0					
ANR	5066247	Identifier	gb		5066241	1					
ANR	5066248	IdentifierDeclStatement	"int mb_w , mb_h , mb_x , mb_y , i , j ;"	15:4:335:367	5066241	1	True				
ANR	5066249	IdentifierDecl	mb_w		5066241	0					
ANR	5066250	IdentifierDeclType	int		5066241	0					
ANR	5066251	Identifier	mb_w		5066241	1					
ANR	5066252	IdentifierDecl	mb_h		5066241	1					
ANR	5066253	IdentifierDeclType	int		5066241	0					
ANR	5066254	Identifier	mb_h		5066241	1					
ANR	5066255	IdentifierDecl	mb_x		5066241	2					
ANR	5066256	IdentifierDeclType	int		5066241	0					
ANR	5066257	Identifier	mb_x		5066241	1					
ANR	5066258	IdentifierDecl	mb_y		5066241	3					
ANR	5066259	IdentifierDeclType	int		5066241	0					
ANR	5066260	Identifier	mb_y		5066241	1					
ANR	5066261	IdentifierDecl	i		5066241	4					
ANR	5066262	IdentifierDeclType	int		5066241	0					
ANR	5066263	Identifier	i		5066241	1					
ANR	5066264	IdentifierDecl	j		5066241	5					
ANR	5066265	IdentifierDeclType	int		5066241	0					
ANR	5066266	Identifier	j		5066241	1					
ANR	5066267	IdentifierDeclStatement	"int bx , by ;"	17:4:374:384	5066241	2	True				
ANR	5066268	IdentifierDecl	bx		5066241	0					
ANR	5066269	IdentifierDeclType	int		5066241	0					
ANR	5066270	Identifier	bx		5066241	1					
ANR	5066271	IdentifierDecl	by		5066241	1					
ANR	5066272	IdentifierDeclType	int		5066241	0					
ANR	5066273	Identifier	by		5066241	1					
ANR	5066274	IdentifierDeclStatement	int unesc_size ;	19:4:391:405	5066241	3	True				
ANR	5066275	IdentifierDecl	unesc_size		5066241	0					
ANR	5066276	IdentifierDeclType	int		5066241	0					
ANR	5066277	Identifier	unesc_size		5066241	1					
ANR	5066278	IdentifierDeclStatement	int ret ;	21:4:412:419	5066241	4	True				
ANR	5066279	IdentifierDecl	ret		5066241	0					
ANR	5066280	IdentifierDeclType	int		5066241	0					
ANR	5066281	Identifier	ret		5066241	1					
ANR	5066282	IfStatement	"if ( ( ret = av_reallocp ( & c -> buf , src_size + FF_INPUT_BUFFER_PADDING_SIZE ) ) < 0 )"		5066241	5					
ANR	5066283	Condition	"( ret = av_reallocp ( & c -> buf , src_size + FF_INPUT_BUFFER_PADDING_SIZE ) ) < 0"	25:8:432:532	5066241	0	True				
ANR	5066284	RelationalExpression	"( ret = av_reallocp ( & c -> buf , src_size + FF_INPUT_BUFFER_PADDING_SIZE ) ) < 0"		5066241	0		<			
ANR	5066285	AssignmentExpression	"ret = av_reallocp ( & c -> buf , src_size + FF_INPUT_BUFFER_PADDING_SIZE )"		5066241	0		=			
ANR	5066286	Identifier	ret		5066241	0					
ANR	5066287	CallExpression	"av_reallocp ( & c -> buf , src_size + FF_INPUT_BUFFER_PADDING_SIZE )"		5066241	1					
ANR	5066288	Callee	av_reallocp		5066241	0					
ANR	5066289	Identifier	av_reallocp		5066241	0					
ANR	5066290	ArgumentList	& c -> buf		5066241	1					
ANR	5066291	Argument	& c -> buf		5066241	0					
ANR	5066292	UnaryOperationExpression	& c -> buf		5066241	0					
ANR	5066293	UnaryOperator	&		5066241	0					
ANR	5066294	PtrMemberAccess	c -> buf		5066241	1					
ANR	5066295	Identifier	c		5066241	0					
ANR	5066296	Identifier	buf		5066241	1					
ANR	5066297	Argument	src_size + FF_INPUT_BUFFER_PADDING_SIZE		5066241	1					
ANR	5066298	AdditiveExpression	src_size + FF_INPUT_BUFFER_PADDING_SIZE		5066241	0		+			
ANR	5066299	Identifier	src_size		5066241	0					
ANR	5066300	Identifier	FF_INPUT_BUFFER_PADDING_SIZE		5066241	1					
ANR	5066301	PrimaryExpression	0		5066241	1					
ANR	5066302	ReturnStatement	return ret ;	29:8:544:554	5066241	1	True				
ANR	5066303	Identifier	ret		5066241	0					
ANR	5066304	ExpressionStatement	"jpg_unescape ( src , src_size , c -> buf , & unesc_size )"	31:4:561:609	5066241	6	True				
ANR	5066305	CallExpression	"jpg_unescape ( src , src_size , c -> buf , & unesc_size )"		5066241	0					
ANR	5066306	Callee	jpg_unescape		5066241	0					
ANR	5066307	Identifier	jpg_unescape		5066241	0					
ANR	5066308	ArgumentList	src		5066241	1					
ANR	5066309	Argument	src		5066241	0					
ANR	5066310	Identifier	src		5066241	0					
ANR	5066311	Argument	src_size		5066241	1					
ANR	5066312	Identifier	src_size		5066241	0					
ANR	5066313	Argument	c -> buf		5066241	2					
ANR	5066314	PtrMemberAccess	c -> buf		5066241	0					
ANR	5066315	Identifier	c		5066241	0					
ANR	5066316	Identifier	buf		5066241	1					
ANR	5066317	Argument	& unesc_size		5066241	3					
ANR	5066318	UnaryOperationExpression	& unesc_size		5066241	0					
ANR	5066319	UnaryOperator	&		5066241	0					
ANR	5066320	Identifier	unesc_size		5066241	1					
ANR	5066321	ExpressionStatement	"memset ( c -> buf + unesc_size , 0 , FF_INPUT_BUFFER_PADDING_SIZE )"	33:4:616:676	5066241	7	True				
ANR	5066322	CallExpression	"memset ( c -> buf + unesc_size , 0 , FF_INPUT_BUFFER_PADDING_SIZE )"		5066241	0					
ANR	5066323	Callee	memset		5066241	0					
ANR	5066324	Identifier	memset		5066241	0					
ANR	5066325	ArgumentList	c -> buf + unesc_size		5066241	1					
ANR	5066326	Argument	c -> buf + unesc_size		5066241	0					
ANR	5066327	AdditiveExpression	c -> buf + unesc_size		5066241	0		+			
ANR	5066328	PtrMemberAccess	c -> buf		5066241	0					
ANR	5066329	Identifier	c		5066241	0					
ANR	5066330	Identifier	buf		5066241	1					
ANR	5066331	Identifier	unesc_size		5066241	1					
ANR	5066332	Argument	0		5066241	1					
ANR	5066333	PrimaryExpression	0		5066241	0					
ANR	5066334	Argument	FF_INPUT_BUFFER_PADDING_SIZE		5066241	2					
ANR	5066335	Identifier	FF_INPUT_BUFFER_PADDING_SIZE		5066241	0					
ANR	5066336	ExpressionStatement	"init_get_bits8 ( & gb , c -> buf , unesc_size )"	35:4:683:722	5066241	8	True				
ANR	5066337	CallExpression	"init_get_bits8 ( & gb , c -> buf , unesc_size )"		5066241	0					
ANR	5066338	Callee	init_get_bits8		5066241	0					
ANR	5066339	Identifier	init_get_bits8		5066241	0					
ANR	5066340	ArgumentList	& gb		5066241	1					
ANR	5066341	Argument	& gb		5066241	0					
ANR	5066342	UnaryOperationExpression	& gb		5066241	0					
ANR	5066343	UnaryOperator	&		5066241	0					
ANR	5066344	Identifier	gb		5066241	1					
ANR	5066345	Argument	c -> buf		5066241	1					
ANR	5066346	PtrMemberAccess	c -> buf		5066241	0					
ANR	5066347	Identifier	c		5066241	0					
ANR	5066348	Identifier	buf		5066241	1					
ANR	5066349	Argument	unesc_size		5066241	2					
ANR	5066350	Identifier	unesc_size		5066241	0					
ANR	5066351	ExpressionStatement	"width = FFALIGN ( width , 16 )"	39:4:731:757	5066241	9	True				
ANR	5066352	AssignmentExpression	"width = FFALIGN ( width , 16 )"		5066241	0		=			
ANR	5066353	Identifier	width		5066241	0					
ANR	5066354	CallExpression	"FFALIGN ( width , 16 )"		5066241	1					
ANR	5066355	Callee	FFALIGN		5066241	0					
ANR	5066356	Identifier	FFALIGN		5066241	0					
ANR	5066357	ArgumentList	width		5066241	1					
ANR	5066358	Argument	width		5066241	0					
ANR	5066359	Identifier	width		5066241	0					
ANR	5066360	Argument	16		5066241	1					
ANR	5066361	PrimaryExpression	16		5066241	0					
ANR	5066362	ExpressionStatement	mb_w = width >> 4	41:4:764:790	5066241	10	True				
ANR	5066363	AssignmentExpression	mb_w = width >> 4		5066241	0		=			
ANR	5066364	Identifier	mb_w		5066241	0					
ANR	5066365	ShiftExpression	width >> 4		5066241	1		>>			
ANR	5066366	Identifier	width		5066241	0					
ANR	5066367	PrimaryExpression	4		5066241	1					
ANR	5066368	ExpressionStatement	mb_h = ( height + 15 ) >> 4	43:4:797:823	5066241	11	True				
ANR	5066369	AssignmentExpression	mb_h = ( height + 15 ) >> 4		5066241	0		=			
ANR	5066370	Identifier	mb_h		5066241	0					
ANR	5066371	ShiftExpression	( height + 15 ) >> 4		5066241	1		>>			
ANR	5066372	AdditiveExpression	height + 15		5066241	0		+			
ANR	5066373	Identifier	height		5066241	0					
ANR	5066374	PrimaryExpression	15		5066241	1					
ANR	5066375	PrimaryExpression	4		5066241	1					
ANR	5066376	IfStatement	if ( ! num_mbs )		5066241	12					
ANR	5066377	Condition	! num_mbs	47:8:836:843	5066241	0	True				
ANR	5066378	UnaryOperationExpression	! num_mbs		5066241	0					
ANR	5066379	UnaryOperator	!		5066241	0					
ANR	5066380	Identifier	num_mbs		5066241	1					
ANR	5066381	ExpressionStatement	num_mbs = mb_w * mb_h * 4	49:8:855:880	5066241	1	True				
ANR	5066382	AssignmentExpression	num_mbs = mb_w * mb_h * 4		5066241	0		=			
ANR	5066383	Identifier	num_mbs		5066241	0					
ANR	5066384	MultiplicativeExpression	mb_w * mb_h * 4		5066241	1		*			
ANR	5066385	Identifier	mb_w		5066241	0					
ANR	5066386	MultiplicativeExpression	mb_h * 4		5066241	1		*			
ANR	5066387	Identifier	mb_h		5066241	0					
ANR	5066388	PrimaryExpression	4		5066241	1					
ANR	5066389	ForStatement	for ( i = 0 ; i < 3 ; i ++ )		5066241	13					
ANR	5066390	ForInit	i = 0 ;	53:9:894:899	5066241	0	True				
ANR	5066391	AssignmentExpression	i = 0		5066241	0		=			
ANR	5066392	Identifier	i		5066241	0					
ANR	5066393	PrimaryExpression	0		5066241	1					
ANR	5066394	Condition	i < 3	53:16:901:905	5066241	1	True				
ANR	5066395	RelationalExpression	i < 3		5066241	0		<			
ANR	5066396	Identifier	i		5066241	0					
ANR	5066397	PrimaryExpression	3		5066241	1					
ANR	5066398	PostIncDecOperationExpression	i ++	53:23:908:910	5066241	2	True				
ANR	5066399	Identifier	i		5066241	0					
ANR	5066400	IncDec	++		5066241	1					
ANR	5066401	ExpressionStatement	c -> prev_dc [ i ] = 1024	55:8:922:942	5066241	3	True				
ANR	5066402	AssignmentExpression	c -> prev_dc [ i ] = 1024		5066241	0		=			
ANR	5066403	ArrayIndexing	c -> prev_dc [ i ]		5066241	0					
ANR	5066404	PtrMemberAccess	c -> prev_dc		5066241	0					
ANR	5066405	Identifier	c		5066241	0					
ANR	5066406	Identifier	prev_dc		5066241	1					
ANR	5066407	Identifier	i		5066241	1					
ANR	5066408	PrimaryExpression	1024		5066241	1					
ANR	5066409	ExpressionStatement	bx = by = 0	57:4:949:965	5066241	14	True				
ANR	5066410	AssignmentExpression	bx = by = 0		5066241	0		=			
ANR	5066411	Identifier	bx		5066241	0					
ANR	5066412	AssignmentExpression	by = 0		5066241	1		=			
ANR	5066413	Identifier	by		5066241	0					
ANR	5066414	PrimaryExpression	0		5066241	1					
ANR	5066415	ExpressionStatement	c -> bdsp . clear_blocks ( c -> block [ 0 ] )	61:4:972:1005	5066241	15	True				
ANR	5066416	CallExpression	c -> bdsp . clear_blocks ( c -> block [ 0 ] )		5066241	0					
ANR	5066417	Callee	c -> bdsp . clear_blocks		5066241	0					
ANR	5066418	MemberAccess	c -> bdsp . clear_blocks		5066241	0					
ANR	5066419	PtrMemberAccess	c -> bdsp		5066241	0					
ANR	5066420	Identifier	c		5066241	0					
ANR	5066421	Identifier	bdsp		5066241	1					
ANR	5066422	Identifier	clear_blocks		5066241	1					
ANR	5066423	ArgumentList	c -> block [ 0 ]		5066241	1					
ANR	5066424	Argument	c -> block [ 0 ]		5066241	0					
ANR	5066425	ArrayIndexing	c -> block [ 0 ]		5066241	0					
ANR	5066426	PtrMemberAccess	c -> block		5066241	0					
ANR	5066427	Identifier	c		5066241	0					
ANR	5066428	Identifier	block		5066241	1					
ANR	5066429	PrimaryExpression	0		5066241	1					
ANR	5066430	ForStatement	for ( mb_y = 0 ; mb_y < mb_h ; mb_y ++ )		5066241	16					
ANR	5066431	ForInit	mb_y = 0 ;	63:9:1017:1025	5066241	0	True				
ANR	5066432	AssignmentExpression	mb_y = 0		5066241	0		=			
ANR	5066433	Identifier	mb_y		5066241	0					
ANR	5066434	PrimaryExpression	0		5066241	1					
ANR	5066435	Condition	mb_y < mb_h	63:19:1027:1037	5066241	1	True				
ANR	5066436	RelationalExpression	mb_y < mb_h		5066241	0		<			
ANR	5066437	Identifier	mb_y		5066241	0					
ANR	5066438	Identifier	mb_h		5066241	1					
ANR	5066439	PostIncDecOperationExpression	mb_y ++	63:32:1040:1045	5066241	2	True				
ANR	5066440	Identifier	mb_y		5066241	0					
ANR	5066441	IncDec	++		5066241	1					
ANR	5066442	CompoundStatement		53:40:742:742	5066241	3					
ANR	5066443	ForStatement	for ( mb_x = 0 ; mb_x < mb_w ; mb_x ++ )		5066241	0					
ANR	5066444	ForInit	mb_x = 0 ;	65:13:1064:1072	5066241	0	True				
ANR	5066445	AssignmentExpression	mb_x = 0		5066241	0		=			
ANR	5066446	Identifier	mb_x		5066241	0					
ANR	5066447	PrimaryExpression	0		5066241	1					
ANR	5066448	Condition	mb_x < mb_w	65:23:1074:1084	5066241	1	True				
ANR	5066449	RelationalExpression	mb_x < mb_w		5066241	0		<			
ANR	5066450	Identifier	mb_x		5066241	0					
ANR	5066451	Identifier	mb_w		5066241	1					
ANR	5066452	PostIncDecOperationExpression	mb_x ++	65:36:1087:1092	5066241	2	True				
ANR	5066453	Identifier	mb_x		5066241	0					
ANR	5066454	IncDec	++		5066241	1					
ANR	5066455	CompoundStatement		55:44:789:789	5066241	3					
ANR	5066456	IfStatement	if ( mask && ! mask [ mb_x * 2 ] && ! mask [ mb_x * 2 + 1 ] && ! mask [ mb_x * 2 + mask_stride ] && ! mask [ mb_x * 2 + 1 + mask_stride ] )		5066241	0					
ANR	5066457	Condition	mask && ! mask [ mb_x * 2 ] && ! mask [ mb_x * 2 + 1 ] && ! mask [ mb_x * 2 + mask_stride ] && ! mask [ mb_x * 2 + 1 + mask_stride ]	67:16:1114:1267	5066241	0	True				
ANR	5066458	AndExpression	mask && ! mask [ mb_x * 2 ] && ! mask [ mb_x * 2 + 1 ] && ! mask [ mb_x * 2 + mask_stride ] && ! mask [ mb_x * 2 + 1 + mask_stride ]		5066241	0		&&			
ANR	5066459	Identifier	mask		5066241	0					
ANR	5066460	AndExpression	! mask [ mb_x * 2 ] && ! mask [ mb_x * 2 + 1 ] && ! mask [ mb_x * 2 + mask_stride ] && ! mask [ mb_x * 2 + 1 + mask_stride ]		5066241	1		&&			
ANR	5066461	UnaryOperationExpression	! mask [ mb_x * 2 ]		5066241	0					
ANR	5066462	UnaryOperator	!		5066241	0					
ANR	5066463	ArrayIndexing	mask [ mb_x * 2 ]		5066241	1					
ANR	5066464	Identifier	mask		5066241	0					
ANR	5066465	MultiplicativeExpression	mb_x * 2		5066241	1		*			
ANR	5066466	Identifier	mb_x		5066241	0					
ANR	5066467	PrimaryExpression	2		5066241	1					
ANR	5066468	AndExpression	! mask [ mb_x * 2 + 1 ] && ! mask [ mb_x * 2 + mask_stride ] && ! mask [ mb_x * 2 + 1 + mask_stride ]		5066241	1		&&			
ANR	5066469	UnaryOperationExpression	! mask [ mb_x * 2 + 1 ]		5066241	0					
ANR	5066470	UnaryOperator	!		5066241	0					
ANR	5066471	ArrayIndexing	mask [ mb_x * 2 + 1 ]		5066241	1					
ANR	5066472	Identifier	mask		5066241	0					
ANR	5066473	AdditiveExpression	mb_x * 2 + 1		5066241	1		+			
ANR	5066474	MultiplicativeExpression	mb_x * 2		5066241	0		*			
ANR	5066475	Identifier	mb_x		5066241	0					
ANR	5066476	PrimaryExpression	2		5066241	1					
ANR	5066477	PrimaryExpression	1		5066241	1					
ANR	5066478	AndExpression	! mask [ mb_x * 2 + mask_stride ] && ! mask [ mb_x * 2 + 1 + mask_stride ]		5066241	1		&&			
ANR	5066479	UnaryOperationExpression	! mask [ mb_x * 2 + mask_stride ]		5066241	0					
ANR	5066480	UnaryOperator	!		5066241	0					
ANR	5066481	ArrayIndexing	mask [ mb_x * 2 + mask_stride ]		5066241	1					
ANR	5066482	Identifier	mask		5066241	0					
ANR	5066483	AdditiveExpression	mb_x * 2 + mask_stride		5066241	1		+			
ANR	5066484	MultiplicativeExpression	mb_x * 2		5066241	0		*			
ANR	5066485	Identifier	mb_x		5066241	0					
ANR	5066486	PrimaryExpression	2		5066241	1					
ANR	5066487	Identifier	mask_stride		5066241	1					
ANR	5066488	UnaryOperationExpression	! mask [ mb_x * 2 + 1 + mask_stride ]		5066241	1					
ANR	5066489	UnaryOperator	!		5066241	0					
ANR	5066490	ArrayIndexing	mask [ mb_x * 2 + 1 + mask_stride ]		5066241	1					
ANR	5066491	Identifier	mask		5066241	0					
ANR	5066492	AdditiveExpression	mb_x * 2 + 1 + mask_stride		5066241	1		+			
ANR	5066493	MultiplicativeExpression	mb_x * 2		5066241	0		*			
ANR	5066494	Identifier	mb_x		5066241	0					
ANR	5066495	PrimaryExpression	2		5066241	1					
ANR	5066496	AdditiveExpression	1 + mask_stride		5066241	1		+			
ANR	5066497	PrimaryExpression	1		5066241	0					
ANR	5066498	Identifier	mask_stride		5066241	1					
ANR	5066499	CompoundStatement		61:51:964:964	5066241	1					
ANR	5066500	ExpressionStatement	bx += 16	73:16:1289:1297	5066241	0	True				
ANR	5066501	AssignmentExpression	bx += 16		5066241	0		+=			
ANR	5066502	Identifier	bx		5066241	0					
ANR	5066503	PrimaryExpression	16		5066241	1					
ANR	5066504	ContinueStatement	continue ;	75:16:1316:1324	5066241	1	True				
ANR	5066505	ForStatement	for ( j = 0 ; j < 2 ; j ++ )		5066241	1					
ANR	5066506	ForInit	j = 0 ;	79:17:1359:1364	5066241	0	True				
ANR	5066507	AssignmentExpression	j = 0		5066241	0		=			
ANR	5066508	Identifier	j		5066241	0					
ANR	5066509	PrimaryExpression	0		5066241	1					
ANR	5066510	Condition	j < 2	79:24:1366:1370	5066241	1	True				
ANR	5066511	RelationalExpression	j < 2		5066241	0		<			
ANR	5066512	Identifier	j		5066241	0					
ANR	5066513	PrimaryExpression	2		5066241	1					
ANR	5066514	PostIncDecOperationExpression	j ++	79:31:1373:1375	5066241	2	True				
ANR	5066515	Identifier	j		5066241	0					
ANR	5066516	IncDec	++		5066241	1					
ANR	5066517	CompoundStatement		69:36:1072:1072	5066241	3					
ANR	5066518	ForStatement	for ( i = 0 ; i < 2 ; i ++ )		5066241	0					
ANR	5066519	ForInit	i = 0 ;	81:21:1402:1407	5066241	0	True				
ANR	5066520	AssignmentExpression	i = 0		5066241	0		=			
ANR	5066521	Identifier	i		5066241	0					
ANR	5066522	PrimaryExpression	0		5066241	1					
ANR	5066523	Condition	i < 2	81:28:1409:1413	5066241	1	True				
ANR	5066524	RelationalExpression	i < 2		5066241	0		<			
ANR	5066525	Identifier	i		5066241	0					
ANR	5066526	PrimaryExpression	2		5066241	1					
ANR	5066527	PostIncDecOperationExpression	i ++	81:35:1416:1418	5066241	2	True				
ANR	5066528	Identifier	i		5066241	0					
ANR	5066529	IncDec	++		5066241	1					
ANR	5066530	CompoundStatement		71:40:1115:1115	5066241	3					
ANR	5066531	IfStatement	if ( mask && ! mask [ mb_x * 2 + i + j * mask_stride ] )		5066241	0					
ANR	5066532	Condition	mask && ! mask [ mb_x * 2 + i + j * mask_stride ]	83:24:1448:1492	5066241	0	True				
ANR	5066533	AndExpression	mask && ! mask [ mb_x * 2 + i + j * mask_stride ]		5066241	0		&&			
ANR	5066534	Identifier	mask		5066241	0					
ANR	5066535	UnaryOperationExpression	! mask [ mb_x * 2 + i + j * mask_stride ]		5066241	1					
ANR	5066536	UnaryOperator	!		5066241	0					
ANR	5066537	ArrayIndexing	mask [ mb_x * 2 + i + j * mask_stride ]		5066241	1					
ANR	5066538	Identifier	mask		5066241	0					
ANR	5066539	AdditiveExpression	mb_x * 2 + i + j * mask_stride		5066241	1		+			
ANR	5066540	MultiplicativeExpression	mb_x * 2		5066241	0		*			
ANR	5066541	Identifier	mb_x		5066241	0					
ANR	5066542	PrimaryExpression	2		5066241	1					
ANR	5066543	AdditiveExpression	i + j * mask_stride		5066241	1		+			
ANR	5066544	Identifier	i		5066241	0					
ANR	5066545	MultiplicativeExpression	j * mask_stride		5066241	1		*			
ANR	5066546	Identifier	j		5066241	0					
ANR	5066547	Identifier	mask_stride		5066241	1					
ANR	5066548	ContinueStatement	continue ;	85:24:1520:1528	5066241	1	True				
ANR	5066549	ExpressionStatement	num_mbs --	87:20:1551:1560	5066241	1	True				
ANR	5066550	PostIncDecOperationExpression	num_mbs --		5066241	0					
ANR	5066551	Identifier	num_mbs		5066241	0					
ANR	5066552	IncDec	--		5066241	1					
ANR	5066553	IfStatement	"if ( ( ret = jpg_decode_block ( c , & gb , 0 , c -> block [ i + j * 2 ] ) ) != 0 )"		5066241	2					
ANR	5066554	Condition	"( ret = jpg_decode_block ( c , & gb , 0 , c -> block [ i + j * 2 ] ) ) != 0"	89:24:1587:1696	5066241	0	True				
ANR	5066555	EqualityExpression	"( ret = jpg_decode_block ( c , & gb , 0 , c -> block [ i + j * 2 ] ) ) != 0"		5066241	0		!=			
ANR	5066556	AssignmentExpression	"ret = jpg_decode_block ( c , & gb , 0 , c -> block [ i + j * 2 ] )"		5066241	0		=			
ANR	5066557	Identifier	ret		5066241	0					
ANR	5066558	CallExpression	"jpg_decode_block ( c , & gb , 0 , c -> block [ i + j * 2 ] )"		5066241	1					
ANR	5066559	Callee	jpg_decode_block		5066241	0					
ANR	5066560	Identifier	jpg_decode_block		5066241	0					
ANR	5066561	ArgumentList	c		5066241	1					
ANR	5066562	Argument	c		5066241	0					
ANR	5066563	Identifier	c		5066241	0					
ANR	5066564	Argument	& gb		5066241	1					
ANR	5066565	UnaryOperationExpression	& gb		5066241	0					
ANR	5066566	UnaryOperator	&		5066241	0					
ANR	5066567	Identifier	gb		5066241	1					
ANR	5066568	Argument	0		5066241	2					
ANR	5066569	PrimaryExpression	0		5066241	0					
ANR	5066570	Argument	c -> block [ i + j * 2 ]		5066241	3					
ANR	5066571	ArrayIndexing	c -> block [ i + j * 2 ]		5066241	0					
ANR	5066572	PtrMemberAccess	c -> block		5066241	0					
ANR	5066573	Identifier	c		5066241	0					
ANR	5066574	Identifier	block		5066241	1					
ANR	5066575	AdditiveExpression	i + j * 2		5066241	1		+			
ANR	5066576	Identifier	i		5066241	0					
ANR	5066577	MultiplicativeExpression	j * 2		5066241	1		*			
ANR	5066578	Identifier	j		5066241	0					
ANR	5066579	PrimaryExpression	2		5066241	1					
ANR	5066580	PrimaryExpression	0		5066241	1					
ANR	5066581	ReturnStatement	return ret ;	93:24:1724:1734	5066241	1	True				
ANR	5066582	Identifier	ret		5066241	0					
ANR	5066583	ExpressionStatement	c -> idsp . idct ( c -> block [ i + j * 2 ] )	95:20:1757:1790	5066241	3	True				
ANR	5066584	CallExpression	c -> idsp . idct ( c -> block [ i + j * 2 ] )		5066241	0					
ANR	5066585	Callee	c -> idsp . idct		5066241	0					
ANR	5066586	MemberAccess	c -> idsp . idct		5066241	0					
ANR	5066587	PtrMemberAccess	c -> idsp		5066241	0					
ANR	5066588	Identifier	c		5066241	0					
ANR	5066589	Identifier	idsp		5066241	1					
ANR	5066590	Identifier	idct		5066241	1					
ANR	5066591	ArgumentList	c -> block [ i + j * 2 ]		5066241	1					
ANR	5066592	Argument	c -> block [ i + j * 2 ]		5066241	0					
ANR	5066593	ArrayIndexing	c -> block [ i + j * 2 ]		5066241	0					
ANR	5066594	PtrMemberAccess	c -> block		5066241	0					
ANR	5066595	Identifier	c		5066241	0					
ANR	5066596	Identifier	block		5066241	1					
ANR	5066597	AdditiveExpression	i + j * 2		5066241	1		+			
ANR	5066598	Identifier	i		5066241	0					
ANR	5066599	MultiplicativeExpression	j * 2		5066241	1		*			
ANR	5066600	Identifier	j		5066241	0					
ANR	5066601	PrimaryExpression	2		5066241	1					
ANR	5066602	ForStatement	for ( i = 1 ; i < 3 ; i ++ )		5066241	2					
ANR	5066603	ForInit	i = 1 ;	101:17:1844:1849	5066241	0	True				
ANR	5066604	AssignmentExpression	i = 1		5066241	0		=			
ANR	5066605	Identifier	i		5066241	0					
ANR	5066606	PrimaryExpression	1		5066241	1					
ANR	5066607	Condition	i < 3	101:24:1851:1855	5066241	1	True				
ANR	5066608	RelationalExpression	i < 3		5066241	0		<			
ANR	5066609	Identifier	i		5066241	0					
ANR	5066610	PrimaryExpression	3		5066241	1					
ANR	5066611	PostIncDecOperationExpression	i ++	101:31:1858:1860	5066241	2	True				
ANR	5066612	Identifier	i		5066241	0					
ANR	5066613	IncDec	++		5066241	1					
ANR	5066614	CompoundStatement		91:36:1557:1557	5066241	3					
ANR	5066615	IfStatement	"if ( ( ret = jpg_decode_block ( c , & gb , i , c -> block [ i + 3 ] ) ) != 0 )"		5066241	0					
ANR	5066616	Condition	"( ret = jpg_decode_block ( c , & gb , i , c -> block [ i + 3 ] ) ) != 0"	103:20:1886:1942	5066241	0	True				
ANR	5066617	EqualityExpression	"( ret = jpg_decode_block ( c , & gb , i , c -> block [ i + 3 ] ) ) != 0"		5066241	0		!=			
ANR	5066618	AssignmentExpression	"ret = jpg_decode_block ( c , & gb , i , c -> block [ i + 3 ] )"		5066241	0		=			
ANR	5066619	Identifier	ret		5066241	0					
ANR	5066620	CallExpression	"jpg_decode_block ( c , & gb , i , c -> block [ i + 3 ] )"		5066241	1					
ANR	5066621	Callee	jpg_decode_block		5066241	0					
ANR	5066622	Identifier	jpg_decode_block		5066241	0					
ANR	5066623	ArgumentList	c		5066241	1					
ANR	5066624	Argument	c		5066241	0					
ANR	5066625	Identifier	c		5066241	0					
ANR	5066626	Argument	& gb		5066241	1					
ANR	5066627	UnaryOperationExpression	& gb		5066241	0					
ANR	5066628	UnaryOperator	&		5066241	0					
ANR	5066629	Identifier	gb		5066241	1					
ANR	5066630	Argument	i		5066241	2					
ANR	5066631	Identifier	i		5066241	0					
ANR	5066632	Argument	c -> block [ i + 3 ]		5066241	3					
ANR	5066633	ArrayIndexing	c -> block [ i + 3 ]		5066241	0					
ANR	5066634	PtrMemberAccess	c -> block		5066241	0					
ANR	5066635	Identifier	c		5066241	0					
ANR	5066636	Identifier	block		5066241	1					
ANR	5066637	AdditiveExpression	i + 3		5066241	1		+			
ANR	5066638	Identifier	i		5066241	0					
ANR	5066639	PrimaryExpression	3		5066241	1					
ANR	5066640	PrimaryExpression	0		5066241	1					
ANR	5066641	ReturnStatement	return ret ;	105:20:1966:1976	5066241	1	True				
ANR	5066642	Identifier	ret		5066241	0					
ANR	5066643	ExpressionStatement	c -> idsp . idct ( c -> block [ i + 3 ] )	107:16:1995:2024	5066241	1	True				
ANR	5066644	CallExpression	c -> idsp . idct ( c -> block [ i + 3 ] )		5066241	0					
ANR	5066645	Callee	c -> idsp . idct		5066241	0					
ANR	5066646	MemberAccess	c -> idsp . idct		5066241	0					
ANR	5066647	PtrMemberAccess	c -> idsp		5066241	0					
ANR	5066648	Identifier	c		5066241	0					
ANR	5066649	Identifier	idsp		5066241	1					
ANR	5066650	Identifier	idct		5066241	1					
ANR	5066651	ArgumentList	c -> block [ i + 3 ]		5066241	1					
ANR	5066652	Argument	c -> block [ i + 3 ]		5066241	0					
ANR	5066653	ArrayIndexing	c -> block [ i + 3 ]		5066241	0					
ANR	5066654	PtrMemberAccess	c -> block		5066241	0					
ANR	5066655	Identifier	c		5066241	0					
ANR	5066656	Identifier	block		5066241	1					
ANR	5066657	AdditiveExpression	i + 3		5066241	1		+			
ANR	5066658	Identifier	i		5066241	0					
ANR	5066659	PrimaryExpression	3		5066241	1					
ANR	5066660	ForStatement	for ( j = 0 ; j < 16 ; j ++ )		5066241	3					
ANR	5066661	ForInit	j = 0 ;	113:17:2061:2066	5066241	0	True				
ANR	5066662	AssignmentExpression	j = 0		5066241	0		=			
ANR	5066663	Identifier	j		5066241	0					
ANR	5066664	PrimaryExpression	0		5066241	1					
ANR	5066665	Condition	j < 16	113:24:2068:2073	5066241	1	True				
ANR	5066666	RelationalExpression	j < 16		5066241	0		<			
ANR	5066667	Identifier	j		5066241	0					
ANR	5066668	PrimaryExpression	16		5066241	1					
ANR	5066669	PostIncDecOperationExpression	j ++	113:32:2076:2078	5066241	2	True				
ANR	5066670	Identifier	j		5066241	0					
ANR	5066671	IncDec	++		5066241	1					
ANR	5066672	CompoundStatement		105:16:1794:1845	5066241	3					
ANR	5066673	IdentifierDeclStatement	uint8_t * out = dst + bx * 3 + ( by + j ) * dst_stride ;	115:16:2100:2151	5066241	0	True				
ANR	5066674	IdentifierDecl	* out = dst + bx * 3 + ( by + j ) * dst_stride		5066241	0					
ANR	5066675	IdentifierDeclType	uint8_t *		5066241	0					
ANR	5066676	Identifier	out		5066241	1					
ANR	5066677	AssignmentExpression	* out = dst + bx * 3 + ( by + j ) * dst_stride		5066241	2		=			
ANR	5066678	Identifier	out		5066241	0					
ANR	5066679	AdditiveExpression	dst + bx * 3 + ( by + j ) * dst_stride		5066241	1		+			
ANR	5066680	Identifier	dst		5066241	0					
ANR	5066681	AdditiveExpression	bx * 3 + ( by + j ) * dst_stride		5066241	1		+			
ANR	5066682	MultiplicativeExpression	bx * 3		5066241	0		*			
ANR	5066683	Identifier	bx		5066241	0					
ANR	5066684	PrimaryExpression	3		5066241	1					
ANR	5066685	MultiplicativeExpression	( by + j ) * dst_stride		5066241	1		*			
ANR	5066686	AdditiveExpression	by + j		5066241	0		+			
ANR	5066687	Identifier	by		5066241	0					
ANR	5066688	Identifier	j		5066241	1					
ANR	5066689	Identifier	dst_stride		5066241	1					
ANR	5066690	ForStatement	for ( i = 0 ; i < 16 ; i ++ )		5066241	1					
ANR	5066691	ForInit	i = 0 ;	117:21:2175:2180	5066241	0	True				
ANR	5066692	AssignmentExpression	i = 0		5066241	0		=			
ANR	5066693	Identifier	i		5066241	0					
ANR	5066694	PrimaryExpression	0		5066241	1					
ANR	5066695	Condition	i < 16	117:28:2182:2187	5066241	1	True				
ANR	5066696	RelationalExpression	i < 16		5066241	0		<			
ANR	5066697	Identifier	i		5066241	0					
ANR	5066698	PrimaryExpression	16		5066241	1					
ANR	5066699	PostIncDecOperationExpression	i ++	117:36:2190:2192	5066241	2	True				
ANR	5066700	Identifier	i		5066241	0					
ANR	5066701	IncDec	++		5066241	1					
ANR	5066702	CompoundStatement		109:20:1912:1923	5066241	3					
ANR	5066703	IdentifierDeclStatement	"int Y , U , V ;"	119:20:2218:2229	5066241	0	True				
ANR	5066704	IdentifierDecl	Y		5066241	0					
ANR	5066705	IdentifierDeclType	int		5066241	0					
ANR	5066706	Identifier	Y		5066241	1					
ANR	5066707	IdentifierDecl	U		5066241	1					
ANR	5066708	IdentifierDeclType	int		5066241	0					
ANR	5066709	Identifier	U		5066241	1					
ANR	5066710	IdentifierDecl	V		5066241	2					
ANR	5066711	IdentifierDeclType	int		5066241	0					
ANR	5066712	Identifier	V		5066241	1					
ANR	5066713	ExpressionStatement	Y = c -> block [ ( j >> 3 ) * 2 + ( i >> 3 ) ] [ ( i & 7 ) + ( j & 7 ) * 8 ]	123:20:2254:2314	5066241	1	True				
ANR	5066714	AssignmentExpression	Y = c -> block [ ( j >> 3 ) * 2 + ( i >> 3 ) ] [ ( i & 7 ) + ( j & 7 ) * 8 ]		5066241	0		=			
ANR	5066715	Identifier	Y		5066241	0					
ANR	5066716	ArrayIndexing	c -> block [ ( j >> 3 ) * 2 + ( i >> 3 ) ] [ ( i & 7 ) + ( j & 7 ) * 8 ]		5066241	1					
ANR	5066717	ArrayIndexing	c -> block [ ( j >> 3 ) * 2 + ( i >> 3 ) ]		5066241	0					
ANR	5066718	PtrMemberAccess	c -> block		5066241	0					
ANR	5066719	Identifier	c		5066241	0					
ANR	5066720	Identifier	block		5066241	1					
ANR	5066721	AdditiveExpression	( j >> 3 ) * 2 + ( i >> 3 )		5066241	1		+			
ANR	5066722	MultiplicativeExpression	( j >> 3 ) * 2		5066241	0		*			
ANR	5066723	ShiftExpression	j >> 3		5066241	0		>>			
ANR	5066724	Identifier	j		5066241	0					
ANR	5066725	PrimaryExpression	3		5066241	1					
ANR	5066726	PrimaryExpression	2		5066241	1					
ANR	5066727	ShiftExpression	i >> 3		5066241	1		>>			
ANR	5066728	Identifier	i		5066241	0					
ANR	5066729	PrimaryExpression	3		5066241	1					
ANR	5066730	AdditiveExpression	( i & 7 ) + ( j & 7 ) * 8		5066241	1		+			
ANR	5066731	BitAndExpression	i & 7		5066241	0		&			
ANR	5066732	Identifier	i		5066241	0					
ANR	5066733	PrimaryExpression	7		5066241	1					
ANR	5066734	MultiplicativeExpression	( j & 7 ) * 8		5066241	1		*			
ANR	5066735	BitAndExpression	j & 7		5066241	0		&			
ANR	5066736	Identifier	j		5066241	0					
ANR	5066737	PrimaryExpression	7		5066241	1					
ANR	5066738	PrimaryExpression	8		5066241	1					
ANR	5066739	ExpressionStatement	U = c -> block [ 4 ^ swapuv ] [ ( i >> 1 ) + ( j >> 1 ) * 8 ] - 128	125:20:2337:2392	5066241	2	True				
ANR	5066740	AssignmentExpression	U = c -> block [ 4 ^ swapuv ] [ ( i >> 1 ) + ( j >> 1 ) * 8 ] - 128		5066241	0		=			
ANR	5066741	Identifier	U		5066241	0					
ANR	5066742	AdditiveExpression	c -> block [ 4 ^ swapuv ] [ ( i >> 1 ) + ( j >> 1 ) * 8 ] - 128		5066241	1		-			
ANR	5066743	ArrayIndexing	c -> block [ 4 ^ swapuv ] [ ( i >> 1 ) + ( j >> 1 ) * 8 ]		5066241	0					
ANR	5066744	ArrayIndexing	c -> block [ 4 ^ swapuv ]		5066241	0					
ANR	5066745	PtrMemberAccess	c -> block		5066241	0					
ANR	5066746	Identifier	c		5066241	0					
ANR	5066747	Identifier	block		5066241	1					
ANR	5066748	ExclusiveOrExpression	4 ^ swapuv		5066241	1		^			
ANR	5066749	PrimaryExpression	4		5066241	0					
ANR	5066750	Identifier	swapuv		5066241	1					
ANR	5066751	AdditiveExpression	( i >> 1 ) + ( j >> 1 ) * 8		5066241	1		+			
ANR	5066752	ShiftExpression	i >> 1		5066241	0		>>			
ANR	5066753	Identifier	i		5066241	0					
ANR	5066754	PrimaryExpression	1		5066241	1					
ANR	5066755	MultiplicativeExpression	( j >> 1 ) * 8		5066241	1		*			
ANR	5066756	ShiftExpression	j >> 1		5066241	0		>>			
ANR	5066757	Identifier	j		5066241	0					
ANR	5066758	PrimaryExpression	1		5066241	1					
ANR	5066759	PrimaryExpression	8		5066241	1					
ANR	5066760	PrimaryExpression	128		5066241	1					
ANR	5066761	ExpressionStatement	V = c -> block [ 5 ^ swapuv ] [ ( i >> 1 ) + ( j >> 1 ) * 8 ] - 128	127:20:2415:2470	5066241	3	True				
ANR	5066762	AssignmentExpression	V = c -> block [ 5 ^ swapuv ] [ ( i >> 1 ) + ( j >> 1 ) * 8 ] - 128		5066241	0		=			
ANR	5066763	Identifier	V		5066241	0					
ANR	5066764	AdditiveExpression	c -> block [ 5 ^ swapuv ] [ ( i >> 1 ) + ( j >> 1 ) * 8 ] - 128		5066241	1		-			
ANR	5066765	ArrayIndexing	c -> block [ 5 ^ swapuv ] [ ( i >> 1 ) + ( j >> 1 ) * 8 ]		5066241	0					
ANR	5066766	ArrayIndexing	c -> block [ 5 ^ swapuv ]		5066241	0					
ANR	5066767	PtrMemberAccess	c -> block		5066241	0					
ANR	5066768	Identifier	c		5066241	0					
ANR	5066769	Identifier	block		5066241	1					
ANR	5066770	ExclusiveOrExpression	5 ^ swapuv		5066241	1		^			
ANR	5066771	PrimaryExpression	5		5066241	0					
ANR	5066772	Identifier	swapuv		5066241	1					
ANR	5066773	AdditiveExpression	( i >> 1 ) + ( j >> 1 ) * 8		5066241	1		+			
ANR	5066774	ShiftExpression	i >> 1		5066241	0		>>			
ANR	5066775	Identifier	i		5066241	0					
ANR	5066776	PrimaryExpression	1		5066241	1					
ANR	5066777	MultiplicativeExpression	( j >> 1 ) * 8		5066241	1		*			
ANR	5066778	ShiftExpression	j >> 1		5066241	0		>>			
ANR	5066779	Identifier	j		5066241	0					
ANR	5066780	PrimaryExpression	1		5066241	1					
ANR	5066781	PrimaryExpression	8		5066241	1					
ANR	5066782	PrimaryExpression	128		5066241	1					
ANR	5066783	ExpressionStatement	"yuv2rgb ( out + i * 3 , Y , U , V )"	129:20:2493:2522	5066241	4	True				
ANR	5066784	CallExpression	"yuv2rgb ( out + i * 3 , Y , U , V )"		5066241	0					
ANR	5066785	Callee	yuv2rgb		5066241	0					
ANR	5066786	Identifier	yuv2rgb		5066241	0					
ANR	5066787	ArgumentList	out + i * 3		5066241	1					
ANR	5066788	Argument	out + i * 3		5066241	0					
ANR	5066789	AdditiveExpression	out + i * 3		5066241	0		+			
ANR	5066790	Identifier	out		5066241	0					
ANR	5066791	MultiplicativeExpression	i * 3		5066241	1		*			
ANR	5066792	Identifier	i		5066241	0					
ANR	5066793	PrimaryExpression	3		5066241	1					
ANR	5066794	Argument	Y		5066241	1					
ANR	5066795	Identifier	Y		5066241	0					
ANR	5066796	Argument	U		5066241	2					
ANR	5066797	Identifier	U		5066241	0					
ANR	5066798	Argument	V		5066241	3					
ANR	5066799	Identifier	V		5066241	0					
ANR	5066800	IfStatement	if ( ! num_mbs )		5066241	4					
ANR	5066801	Condition	! num_mbs	137:16:2577:2584	5066241	0	True				
ANR	5066802	UnaryOperationExpression	! num_mbs		5066241	0					
ANR	5066803	UnaryOperator	!		5066241	0					
ANR	5066804	Identifier	num_mbs		5066241	1					
ANR	5066805	ReturnStatement	return 0 ;	139:16:2604:2612	5066241	1	True				
ANR	5066806	PrimaryExpression	0		5066241	0					
ANR	5066807	ExpressionStatement	bx += 16	141:12:2627:2635	5066241	5	True				
ANR	5066808	AssignmentExpression	bx += 16		5066241	0		+=			
ANR	5066809	Identifier	bx		5066241	0					
ANR	5066810	PrimaryExpression	16		5066241	1					
ANR	5066811	ExpressionStatement	bx = 0	145:8:2657:2664	5066241	1	True				
ANR	5066812	AssignmentExpression	bx = 0		5066241	0		=			
ANR	5066813	Identifier	bx		5066241	0					
ANR	5066814	PrimaryExpression	0		5066241	1					
ANR	5066815	ExpressionStatement	by += 16	147:8:2675:2683	5066241	2	True				
ANR	5066816	AssignmentExpression	by += 16		5066241	0		+=			
ANR	5066817	Identifier	by		5066241	0					
ANR	5066818	PrimaryExpression	16		5066241	1					
ANR	5066819	IfStatement	if ( mask )		5066241	3					
ANR	5066820	Condition	mask	149:12:2698:2701	5066241	0	True				
ANR	5066821	Identifier	mask		5066241	0					
ANR	5066822	ExpressionStatement	mask += mask_stride * 2	151:12:2717:2740	5066241	1	True				
ANR	5066823	AssignmentExpression	mask += mask_stride * 2		5066241	0		+=			
ANR	5066824	Identifier	mask		5066241	0					
ANR	5066825	MultiplicativeExpression	mask_stride * 2		5066241	1		*			
ANR	5066826	Identifier	mask_stride		5066241	0					
ANR	5066827	PrimaryExpression	2		5066241	1					
ANR	5066828	ReturnStatement	return 0 ;	157:4:2756:2764	5066241	17	True				
ANR	5066829	PrimaryExpression	0		5066241	0					
ANR	5066830	ReturnType	static int		5066241	1					
ANR	5066831	Identifier	jpg_decode_data		5066241	2					
ANR	5066832	ParameterList	"JPGContext * c , int width , int height , const uint8_t * src , int src_size , uint8_t * dst , int dst_stride , const uint8_t * mask , int mask_stride , int num_mbs , int swapuv"		5066241	3					
ANR	5066833	Parameter	JPGContext * c	1:27:27:39	5066241	0	True				
ANR	5066834	ParameterType	JPGContext *		5066241	0					
ANR	5066835	Identifier	c		5066241	1					
ANR	5066836	Parameter	int width	1:42:42:50	5066241	1	True				
ANR	5066837	ParameterType	int		5066241	0					
ANR	5066838	Identifier	width		5066241	1					
ANR	5066839	Parameter	int height	1:53:53:62	5066241	2	True				
ANR	5066840	ParameterType	int		5066241	0					
ANR	5066841	Identifier	height		5066241	1					
ANR	5066842	Parameter	const uint8_t * src	3:27:93:110	5066241	3	True				
ANR	5066843	ParameterType	const uint8_t *		5066241	0					
ANR	5066844	Identifier	src		5066241	1					
ANR	5066845	Parameter	int src_size	3:47:113:124	5066241	4	True				
ANR	5066846	ParameterType	int		5066241	0					
ANR	5066847	Identifier	src_size		5066241	1					
ANR	5066848	Parameter	uint8_t * dst	5:27:155:166	5066241	5	True				
ANR	5066849	ParameterType	uint8_t *		5066241	0					
ANR	5066850	Identifier	dst		5066241	1					
ANR	5066851	Parameter	int dst_stride	5:41:169:182	5066241	6	True				
ANR	5066852	ParameterType	int		5066241	0					
ANR	5066853	Identifier	dst_stride		5066241	1					
ANR	5066854	Parameter	const uint8_t * mask	7:27:213:231	5066241	7	True				
ANR	5066855	ParameterType	const uint8_t *		5066241	0					
ANR	5066856	Identifier	mask		5066241	1					
ANR	5066857	Parameter	int mask_stride	7:48:234:248	5066241	8	True				
ANR	5066858	ParameterType	int		5066241	0					
ANR	5066859	Identifier	mask_stride		5066241	1					
ANR	5066860	Parameter	int num_mbs	7:65:251:261	5066241	9	True				
ANR	5066861	ParameterType	int		5066241	0					
ANR	5066862	Identifier	num_mbs		5066241	1					
ANR	5066863	Parameter	int swapuv	9:27:292:301	5066241	10	True				
ANR	5066864	ParameterType	int		5066241	0					
ANR	5066865	Identifier	swapuv		5066241	1					
ANR	5066866	CFGEntryNode	ENTRY		5066241		True				
ANR	5066867	CFGExitNode	EXIT		5066241		True				
ANR	5066868	Symbol	* mask		5066241						
ANR	5066869	Symbol	num_mbs		5066241						
ANR	5066870	Symbol	& gb		5066241						
ANR	5066871	Symbol	c -> block		5066241						
ANR	5066872	Symbol	c -> prev_dc		5066241						
ANR	5066873	Symbol	* c -> block		5066241						
ANR	5066874	Symbol	swapuv		5066241						
ANR	5066875	Symbol	mb_h		5066241						
ANR	5066876	Symbol	& c -> buf		5066241						
ANR	5066877	Symbol	* c -> prev_dc		5066241						
ANR	5066878	Symbol	* * c -> block		5066241						
ANR	5066879	Symbol	* swapuv		5066241						
ANR	5066880	Symbol	* mask_stride		5066241						
ANR	5066881	Symbol	height		5066241						
ANR	5066882	Symbol	ret		5066241						
ANR	5066883	Symbol	* * j		5066241						
ANR	5066884	Symbol	* * i		5066241						
ANR	5066885	Symbol	c -> bdsp		5066241						
ANR	5066886	Symbol	* mb_x		5066241						
ANR	5066887	Symbol	dst_stride		5066241						
ANR	5066888	Symbol	* * c		5066241						
ANR	5066889	Symbol	* * swapuv		5066241						
ANR	5066890	Symbol	av_reallocp		5066241						
ANR	5066891	Symbol	unesc_size		5066241						
ANR	5066892	Symbol	FFALIGN		5066241						
ANR	5066893	Symbol	* * * c		5066241						
ANR	5066894	Symbol	dst		5066241						
ANR	5066895	Symbol	& unesc_size		5066241						
ANR	5066896	Symbol	out		5066241						
ANR	5066897	Symbol	FF_INPUT_BUFFER_PADDING_SIZE		5066241						
ANR	5066898	Symbol	U		5066241						
ANR	5066899	Symbol	bx		5066241						
ANR	5066900	Symbol	V		5066241						
ANR	5066901	Symbol	by		5066241						
ANR	5066902	Symbol	mask_stride		5066241						
ANR	5066903	Symbol	Y		5066241						
ANR	5066904	Symbol	gb		5066241						
ANR	5066905	Symbol	mask		5066241						
ANR	5066906	Symbol	c -> idsp		5066241						
ANR	5066907	Symbol	c		5066241						
ANR	5066908	Symbol	src		5066241						
ANR	5066909	Symbol	i		5066241						
ANR	5066910	Symbol	j		5066241						
ANR	5066911	Symbol	jpg_decode_block		5066241						
ANR	5066912	Symbol	* c		5066241						
ANR	5066913	Symbol	src_size		5066241						
ANR	5066914	Symbol	* i		5066241						
ANR	5066915	Symbol	* j		5066241						
ANR	5066916	Symbol	width		5066241						
ANR	5066917	Symbol	mb_y		5066241						
ANR	5066918	Symbol	mb_x		5066241						
ANR	5066919	Symbol	mb_w		5066241						
ANR	5066920	Symbol	c -> buf		5066241						
