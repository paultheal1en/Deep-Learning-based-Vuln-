command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3061593	File	/home/p4ultr4n/workplace/ReVeal/raw_code/envelope_instant16_0.c								
ANR	3061594	Function	envelope_instant16	1:0:0:1793							
ANR	3061595	FunctionDef	"envelope_instant16 (WaveformContext * s , AVFrame * out , int plane , int component)"		3061594	0					
ANR	3061596	CompoundStatement		3:0:92:1793	3061594	0					
ANR	3061597	IdentifierDeclStatement	const int dst_linesize = out -> linesize [ component ] / 2 ;	5:4:99:152	3061594	0	True				
ANR	3061598	IdentifierDecl	dst_linesize = out -> linesize [ component ] / 2		3061594	0					
ANR	3061599	IdentifierDeclType	const int		3061594	0					
ANR	3061600	Identifier	dst_linesize		3061594	1					
ANR	3061601	AssignmentExpression	dst_linesize = out -> linesize [ component ] / 2		3061594	2		=			
ANR	3061602	Identifier	dst_linesize		3061594	0					
ANR	3061603	MultiplicativeExpression	out -> linesize [ component ] / 2		3061594	1		/			
ANR	3061604	ArrayIndexing	out -> linesize [ component ]		3061594	0					
ANR	3061605	PtrMemberAccess	out -> linesize		3061594	0					
ANR	3061606	Identifier	out		3061594	0					
ANR	3061607	Identifier	linesize		3061594	1					
ANR	3061608	Identifier	component		3061594	1					
ANR	3061609	PrimaryExpression	2		3061594	1					
ANR	3061610	IdentifierDeclStatement	const int bg = s -> bg_color [ component ] * ( s -> size / 256 ) ;	7:4:159:214	3061594	1	True				
ANR	3061611	IdentifierDecl	bg = s -> bg_color [ component ] * ( s -> size / 256 )		3061594	0					
ANR	3061612	IdentifierDeclType	const int		3061594	0					
ANR	3061613	Identifier	bg		3061594	1					
ANR	3061614	AssignmentExpression	bg = s -> bg_color [ component ] * ( s -> size / 256 )		3061594	2		=			
ANR	3061615	Identifier	bg		3061594	0					
ANR	3061616	MultiplicativeExpression	s -> bg_color [ component ] * ( s -> size / 256 )		3061594	1		*			
ANR	3061617	ArrayIndexing	s -> bg_color [ component ]		3061594	0					
ANR	3061618	PtrMemberAccess	s -> bg_color		3061594	0					
ANR	3061619	Identifier	s		3061594	0					
ANR	3061620	Identifier	bg_color		3061594	1					
ANR	3061621	Identifier	component		3061594	1					
ANR	3061622	MultiplicativeExpression	s -> size / 256		3061594	1		/			
ANR	3061623	PtrMemberAccess	s -> size		3061594	0					
ANR	3061624	Identifier	s		3061594	0					
ANR	3061625	Identifier	size		3061594	1					
ANR	3061626	PrimaryExpression	256		3061594	1					
ANR	3061627	IdentifierDeclStatement	const int limit = s -> size - 1 ;	9:4:221:250	3061594	2	True				
ANR	3061628	IdentifierDecl	limit = s -> size - 1		3061594	0					
ANR	3061629	IdentifierDeclType	const int		3061594	0					
ANR	3061630	Identifier	limit		3061594	1					
ANR	3061631	AssignmentExpression	limit = s -> size - 1		3061594	2		=			
ANR	3061632	Identifier	limit		3061594	0					
ANR	3061633	AdditiveExpression	s -> size - 1		3061594	1		-			
ANR	3061634	PtrMemberAccess	s -> size		3061594	0					
ANR	3061635	Identifier	s		3061594	0					
ANR	3061636	Identifier	size		3061594	1					
ANR	3061637	PrimaryExpression	1		3061594	1					
ANR	3061638	IdentifierDeclStatement	const int is_chroma = ( component == 1 || component == 2 ) ;	11:4:257:313	3061594	3	True				
ANR	3061639	IdentifierDecl	is_chroma = ( component == 1 || component == 2 )		3061594	0					
ANR	3061640	IdentifierDeclType	const int		3061594	0					
ANR	3061641	Identifier	is_chroma		3061594	1					
ANR	3061642	AssignmentExpression	is_chroma = ( component == 1 || component == 2 )		3061594	2		=			
ANR	3061643	Identifier	is_chroma		3061594	0					
ANR	3061644	OrExpression	component == 1 || component == 2		3061594	1		||			
ANR	3061645	EqualityExpression	component == 1		3061594	0		==			
ANR	3061646	Identifier	component		3061594	0					
ANR	3061647	PrimaryExpression	1		3061594	1					
ANR	3061648	EqualityExpression	component == 2		3061594	1		==			
ANR	3061649	Identifier	component		3061594	0					
ANR	3061650	PrimaryExpression	2		3061594	1					
ANR	3061651	IdentifierDeclStatement	const int shift_w = ( is_chroma ? s -> desc -> log2_chroma_w : 0 ) ;	13:4:320:380	3061594	4	True				
ANR	3061652	IdentifierDecl	shift_w = ( is_chroma ? s -> desc -> log2_chroma_w : 0 )		3061594	0					
ANR	3061653	IdentifierDeclType	const int		3061594	0					
ANR	3061654	Identifier	shift_w		3061594	1					
ANR	3061655	AssignmentExpression	shift_w = ( is_chroma ? s -> desc -> log2_chroma_w : 0 )		3061594	2		=			
ANR	3061656	Identifier	shift_w		3061594	0					
ANR	3061657	ConditionalExpression	is_chroma ? s -> desc -> log2_chroma_w : 0		3061594	1					
ANR	3061658	Condition	is_chroma		3061594	0					
ANR	3061659	Identifier	is_chroma		3061594	0					
ANR	3061660	PtrMemberAccess	s -> desc -> log2_chroma_w		3061594	1					
ANR	3061661	PtrMemberAccess	s -> desc		3061594	0					
ANR	3061662	Identifier	s		3061594	0					
ANR	3061663	Identifier	desc		3061594	1					
ANR	3061664	Identifier	log2_chroma_w		3061594	1					
ANR	3061665	PrimaryExpression	0		3061594	2					
ANR	3061666	IdentifierDeclStatement	const int shift_h = ( is_chroma ? s -> desc -> log2_chroma_h : 0 ) ;	15:4:387:447	3061594	5	True				
ANR	3061667	IdentifierDecl	shift_h = ( is_chroma ? s -> desc -> log2_chroma_h : 0 )		3061594	0					
ANR	3061668	IdentifierDeclType	const int		3061594	0					
ANR	3061669	Identifier	shift_h		3061594	1					
ANR	3061670	AssignmentExpression	shift_h = ( is_chroma ? s -> desc -> log2_chroma_h : 0 )		3061594	2		=			
ANR	3061671	Identifier	shift_h		3061594	0					
ANR	3061672	ConditionalExpression	is_chroma ? s -> desc -> log2_chroma_h : 0		3061594	1					
ANR	3061673	Condition	is_chroma		3061594	0					
ANR	3061674	Identifier	is_chroma		3061594	0					
ANR	3061675	PtrMemberAccess	s -> desc -> log2_chroma_h		3061594	1					
ANR	3061676	PtrMemberAccess	s -> desc		3061594	0					
ANR	3061677	Identifier	s		3061594	0					
ANR	3061678	Identifier	desc		3061594	1					
ANR	3061679	Identifier	log2_chroma_h		3061594	1					
ANR	3061680	PrimaryExpression	0		3061594	2					
ANR	3061681	IdentifierDeclStatement	"const int dst_h = FF_CEIL_RSHIFT ( out -> height , shift_h ) ;"	17:4:454:508	3061594	6	True				
ANR	3061682	IdentifierDecl	"dst_h = FF_CEIL_RSHIFT ( out -> height , shift_h )"		3061594	0					
ANR	3061683	IdentifierDeclType	const int		3061594	0					
ANR	3061684	Identifier	dst_h		3061594	1					
ANR	3061685	AssignmentExpression	"dst_h = FF_CEIL_RSHIFT ( out -> height , shift_h )"		3061594	2		=			
ANR	3061686	Identifier	dst_h		3061594	0					
ANR	3061687	CallExpression	"FF_CEIL_RSHIFT ( out -> height , shift_h )"		3061594	1					
ANR	3061688	Callee	FF_CEIL_RSHIFT		3061594	0					
ANR	3061689	Identifier	FF_CEIL_RSHIFT		3061594	0					
ANR	3061690	ArgumentList	out -> height		3061594	1					
ANR	3061691	Argument	out -> height		3061594	0					
ANR	3061692	PtrMemberAccess	out -> height		3061594	0					
ANR	3061693	Identifier	out		3061594	0					
ANR	3061694	Identifier	height		3061594	1					
ANR	3061695	Argument	shift_h		3061594	1					
ANR	3061696	Identifier	shift_h		3061594	0					
ANR	3061697	IdentifierDeclStatement	"const int dst_w = FF_CEIL_RSHIFT ( out -> width , shift_w ) ;"	19:4:515:568	3061594	7	True				
ANR	3061698	IdentifierDecl	"dst_w = FF_CEIL_RSHIFT ( out -> width , shift_w )"		3061594	0					
ANR	3061699	IdentifierDeclType	const int		3061594	0					
ANR	3061700	Identifier	dst_w		3061594	1					
ANR	3061701	AssignmentExpression	"dst_w = FF_CEIL_RSHIFT ( out -> width , shift_w )"		3061594	2		=			
ANR	3061702	Identifier	dst_w		3061594	0					
ANR	3061703	CallExpression	"FF_CEIL_RSHIFT ( out -> width , shift_w )"		3061594	1					
ANR	3061704	Callee	FF_CEIL_RSHIFT		3061594	0					
ANR	3061705	Identifier	FF_CEIL_RSHIFT		3061594	0					
ANR	3061706	ArgumentList	out -> width		3061594	1					
ANR	3061707	Argument	out -> width		3061594	0					
ANR	3061708	PtrMemberAccess	out -> width		3061594	0					
ANR	3061709	Identifier	out		3061594	0					
ANR	3061710	Identifier	width		3061594	1					
ANR	3061711	Argument	shift_w		3061594	1					
ANR	3061712	Identifier	shift_w		3061594	0					
ANR	3061713	IdentifierDeclStatement	const int start = s -> estart [ plane ] ;	21:4:575:609	3061594	8	True				
ANR	3061714	IdentifierDecl	start = s -> estart [ plane ]		3061594	0					
ANR	3061715	IdentifierDeclType	const int		3061594	0					
ANR	3061716	Identifier	start		3061594	1					
ANR	3061717	AssignmentExpression	start = s -> estart [ plane ]		3061594	2		=			
ANR	3061718	Identifier	start		3061594	0					
ANR	3061719	ArrayIndexing	s -> estart [ plane ]		3061594	1					
ANR	3061720	PtrMemberAccess	s -> estart		3061594	0					
ANR	3061721	Identifier	s		3061594	0					
ANR	3061722	Identifier	estart		3061594	1					
ANR	3061723	Identifier	plane		3061594	1					
ANR	3061724	IdentifierDeclStatement	const int end = s -> eend [ plane ] ;	23:4:616:646	3061594	9	True				
ANR	3061725	IdentifierDecl	end = s -> eend [ plane ]		3061594	0					
ANR	3061726	IdentifierDeclType	const int		3061594	0					
ANR	3061727	Identifier	end		3061594	1					
ANR	3061728	AssignmentExpression	end = s -> eend [ plane ]		3061594	2		=			
ANR	3061729	Identifier	end		3061594	0					
ANR	3061730	ArrayIndexing	s -> eend [ plane ]		3061594	1					
ANR	3061731	PtrMemberAccess	s -> eend		3061594	0					
ANR	3061732	Identifier	s		3061594	0					
ANR	3061733	Identifier	eend		3061594	1					
ANR	3061734	Identifier	plane		3061594	1					
ANR	3061735	IdentifierDeclStatement	uint16_t * dst ;	25:4:653:666	3061594	10	True				
ANR	3061736	IdentifierDecl	* dst		3061594	0					
ANR	3061737	IdentifierDeclType	uint16_t *		3061594	0					
ANR	3061738	Identifier	dst		3061594	1					
ANR	3061739	IdentifierDeclStatement	"int x , y ;"	27:4:673:681	3061594	11	True				
ANR	3061740	IdentifierDecl	x		3061594	0					
ANR	3061741	IdentifierDeclType	int		3061594	0					
ANR	3061742	Identifier	x		3061594	1					
ANR	3061743	IdentifierDecl	y		3061594	1					
ANR	3061744	IdentifierDeclType	int		3061594	0					
ANR	3061745	Identifier	y		3061594	1					
ANR	3061746	IfStatement	if ( s -> mode )		3061594	12					
ANR	3061747	Condition	s -> mode	31:8:694:700	3061594	0	True				
ANR	3061748	PtrMemberAccess	s -> mode		3061594	0					
ANR	3061749	Identifier	s		3061594	0					
ANR	3061750	Identifier	mode		3061594	1					
ANR	3061751	CompoundStatement		29:17:610:610	3061594	1					
ANR	3061752	ForStatement	for ( x = 0 ; x < dst_w ; x ++ )		3061594	0					
ANR	3061753	ForInit	x = 0 ;	33:13:719:724	3061594	0	True				
ANR	3061754	AssignmentExpression	x = 0		3061594	0		=			
ANR	3061755	Identifier	x		3061594	0					
ANR	3061756	PrimaryExpression	0		3061594	1					
ANR	3061757	Condition	x < dst_w	33:20:726:734	3061594	1	True				
ANR	3061758	RelationalExpression	x < dst_w		3061594	0		<			
ANR	3061759	Identifier	x		3061594	0					
ANR	3061760	Identifier	dst_w		3061594	1					
ANR	3061761	PostIncDecOperationExpression	x ++	33:31:737:739	3061594	2	True				
ANR	3061762	Identifier	x		3061594	0					
ANR	3061763	IncDec	++		3061594	1					
ANR	3061764	CompoundStatement		31:36:649:649	3061594	3					
ANR	3061765	ForStatement	for ( y = start ; y < end ; y ++ )		3061594	0					
ANR	3061766	ForInit	y = start ;	35:17:762:771	3061594	0	True				
ANR	3061767	AssignmentExpression	y = start		3061594	0		=			
ANR	3061768	Identifier	y		3061594	0					
ANR	3061769	Identifier	start		3061594	1					
ANR	3061770	Condition	y < end	35:28:773:779	3061594	1	True				
ANR	3061771	RelationalExpression	y < end		3061594	0		<			
ANR	3061772	Identifier	y		3061594	0					
ANR	3061773	Identifier	end		3061594	1					
ANR	3061774	PostIncDecOperationExpression	y ++	35:37:782:784	3061594	2	True				
ANR	3061775	Identifier	y		3061594	0					
ANR	3061776	IncDec	++		3061594	1					
ANR	3061777	CompoundStatement		33:42:694:694	3061594	3					
ANR	3061778	ExpressionStatement	dst = ( uint16_t * ) out -> data [ component ] + y * dst_linesize + x	37:16:806:867	3061594	0	True				
ANR	3061779	AssignmentExpression	dst = ( uint16_t * ) out -> data [ component ] + y * dst_linesize + x		3061594	0		=			
ANR	3061780	Identifier	dst		3061594	0					
ANR	3061781	AdditiveExpression	( uint16_t * ) out -> data [ component ] + y * dst_linesize + x		3061594	1		+			
ANR	3061782	CastExpression	( uint16_t * ) out -> data [ component ]		3061594	0					
ANR	3061783	CastTarget	uint16_t *		3061594	0					
ANR	3061784	ArrayIndexing	out -> data [ component ]		3061594	1					
ANR	3061785	PtrMemberAccess	out -> data		3061594	0					
ANR	3061786	Identifier	out		3061594	0					
ANR	3061787	Identifier	data		3061594	1					
ANR	3061788	Identifier	component		3061594	1					
ANR	3061789	AdditiveExpression	y * dst_linesize + x		3061594	1		+			
ANR	3061790	MultiplicativeExpression	y * dst_linesize		3061594	0		*			
ANR	3061791	Identifier	y		3061594	0					
ANR	3061792	Identifier	dst_linesize		3061594	1					
ANR	3061793	Identifier	x		3061594	1					
ANR	3061794	IfStatement	if ( dst [ 0 ] != bg )		3061594	1					
ANR	3061795	Condition	dst [ 0 ] != bg	39:20:890:901	3061594	0	True				
ANR	3061796	EqualityExpression	dst [ 0 ] != bg		3061594	0		!=			
ANR	3061797	ArrayIndexing	dst [ 0 ]		3061594	0					
ANR	3061798	Identifier	dst		3061594	0					
ANR	3061799	PrimaryExpression	0		3061594	1					
ANR	3061800	Identifier	bg		3061594	1					
ANR	3061801	CompoundStatement		37:34:811:811	3061594	1					
ANR	3061802	ExpressionStatement	dst [ 0 ] = limit	41:20:927:941	3061594	0	True				
ANR	3061803	AssignmentExpression	dst [ 0 ] = limit		3061594	0		=			
ANR	3061804	ArrayIndexing	dst [ 0 ]		3061594	0					
ANR	3061805	Identifier	dst		3061594	0					
ANR	3061806	PrimaryExpression	0		3061594	1					
ANR	3061807	Identifier	limit		3061594	1					
ANR	3061808	BreakStatement	break ;	43:20:964:969	3061594	1	True				
ANR	3061809	ForStatement	for ( y = end - 1 ; y >= start ; y -- )		3061594	1					
ANR	3061810	ForInit	y = end - 1 ;	49:17:1023:1034	3061594	0	True				
ANR	3061811	AssignmentExpression	y = end - 1		3061594	0		=			
ANR	3061812	Identifier	y		3061594	0					
ANR	3061813	AdditiveExpression	end - 1		3061594	1		-			
ANR	3061814	Identifier	end		3061594	0					
ANR	3061815	PrimaryExpression	1		3061594	1					
ANR	3061816	Condition	y >= start	49:30:1036:1045	3061594	1	True				
ANR	3061817	RelationalExpression	y >= start		3061594	0		>=			
ANR	3061818	Identifier	y		3061594	0					
ANR	3061819	Identifier	start		3061594	1					
ANR	3061820	PostIncDecOperationExpression	y --	49:42:1048:1050	3061594	2	True				
ANR	3061821	Identifier	y		3061594	0					
ANR	3061822	IncDec	--		3061594	1					
ANR	3061823	CompoundStatement		47:47:960:960	3061594	3					
ANR	3061824	ExpressionStatement	dst = ( uint16_t * ) out -> data [ component ] + y * dst_linesize + x	51:16:1072:1133	3061594	0	True				
ANR	3061825	AssignmentExpression	dst = ( uint16_t * ) out -> data [ component ] + y * dst_linesize + x		3061594	0		=			
ANR	3061826	Identifier	dst		3061594	0					
ANR	3061827	AdditiveExpression	( uint16_t * ) out -> data [ component ] + y * dst_linesize + x		3061594	1		+			
ANR	3061828	CastExpression	( uint16_t * ) out -> data [ component ]		3061594	0					
ANR	3061829	CastTarget	uint16_t *		3061594	0					
ANR	3061830	ArrayIndexing	out -> data [ component ]		3061594	1					
ANR	3061831	PtrMemberAccess	out -> data		3061594	0					
ANR	3061832	Identifier	out		3061594	0					
ANR	3061833	Identifier	data		3061594	1					
ANR	3061834	Identifier	component		3061594	1					
ANR	3061835	AdditiveExpression	y * dst_linesize + x		3061594	1		+			
ANR	3061836	MultiplicativeExpression	y * dst_linesize		3061594	0		*			
ANR	3061837	Identifier	y		3061594	0					
ANR	3061838	Identifier	dst_linesize		3061594	1					
ANR	3061839	Identifier	x		3061594	1					
ANR	3061840	IfStatement	if ( dst [ 0 ] != bg )		3061594	1					
ANR	3061841	Condition	dst [ 0 ] != bg	53:20:1156:1167	3061594	0	True				
ANR	3061842	EqualityExpression	dst [ 0 ] != bg		3061594	0		!=			
ANR	3061843	ArrayIndexing	dst [ 0 ]		3061594	0					
ANR	3061844	Identifier	dst		3061594	0					
ANR	3061845	PrimaryExpression	0		3061594	1					
ANR	3061846	Identifier	bg		3061594	1					
ANR	3061847	CompoundStatement		51:34:1077:1077	3061594	1					
ANR	3061848	ExpressionStatement	dst [ 0 ] = limit	55:20:1193:1207	3061594	0	True				
ANR	3061849	AssignmentExpression	dst [ 0 ] = limit		3061594	0		=			
ANR	3061850	ArrayIndexing	dst [ 0 ]		3061594	0					
ANR	3061851	Identifier	dst		3061594	0					
ANR	3061852	PrimaryExpression	0		3061594	1					
ANR	3061853	Identifier	limit		3061594	1					
ANR	3061854	BreakStatement	break ;	57:20:1230:1235	3061594	1	True				
ANR	3061855	ElseStatement	else		3061594	0					
ANR	3061856	CompoundStatement		63:11:1201:1201	3061594	0					
ANR	3061857	ForStatement	for ( y = 0 ; y < dst_h ; y ++ )		3061594	0					
ANR	3061858	ForInit	y = 0 ;	67:13:1310:1315	3061594	0	True				
ANR	3061859	AssignmentExpression	y = 0		3061594	0		=			
ANR	3061860	Identifier	y		3061594	0					
ANR	3061861	PrimaryExpression	0		3061594	1					
ANR	3061862	Condition	y < dst_h	67:20:1317:1325	3061594	1	True				
ANR	3061863	RelationalExpression	y < dst_h		3061594	0		<			
ANR	3061864	Identifier	y		3061594	0					
ANR	3061865	Identifier	dst_h		3061594	1					
ANR	3061866	PostIncDecOperationExpression	y ++	67:31:1328:1330	3061594	2	True				
ANR	3061867	Identifier	y		3061594	0					
ANR	3061868	IncDec	++		3061594	1					
ANR	3061869	CompoundStatement		65:36:1240:1240	3061594	3					
ANR	3061870	ExpressionStatement	dst = ( uint16_t * ) out -> data [ component ] + y * dst_linesize	69:12:1348:1405	3061594	0	True				
ANR	3061871	AssignmentExpression	dst = ( uint16_t * ) out -> data [ component ] + y * dst_linesize		3061594	0		=			
ANR	3061872	Identifier	dst		3061594	0					
ANR	3061873	AdditiveExpression	( uint16_t * ) out -> data [ component ] + y * dst_linesize		3061594	1		+			
ANR	3061874	CastExpression	( uint16_t * ) out -> data [ component ]		3061594	0					
ANR	3061875	CastTarget	uint16_t *		3061594	0					
ANR	3061876	ArrayIndexing	out -> data [ component ]		3061594	1					
ANR	3061877	PtrMemberAccess	out -> data		3061594	0					
ANR	3061878	Identifier	out		3061594	0					
ANR	3061879	Identifier	data		3061594	1					
ANR	3061880	Identifier	component		3061594	1					
ANR	3061881	MultiplicativeExpression	y * dst_linesize		3061594	1		*			
ANR	3061882	Identifier	y		3061594	0					
ANR	3061883	Identifier	dst_linesize		3061594	1					
ANR	3061884	ForStatement	for ( x = start ; x < end ; x ++ )		3061594	1					
ANR	3061885	ForInit	x = start ;	71:17:1425:1434	3061594	0	True				
ANR	3061886	AssignmentExpression	x = start		3061594	0		=			
ANR	3061887	Identifier	x		3061594	0					
ANR	3061888	Identifier	start		3061594	1					
ANR	3061889	Condition	x < end	71:28:1436:1442	3061594	1	True				
ANR	3061890	RelationalExpression	x < end		3061594	0		<			
ANR	3061891	Identifier	x		3061594	0					
ANR	3061892	Identifier	end		3061594	1					
ANR	3061893	PostIncDecOperationExpression	x ++	71:37:1445:1447	3061594	2	True				
ANR	3061894	Identifier	x		3061594	0					
ANR	3061895	IncDec	++		3061594	1					
ANR	3061896	CompoundStatement		69:42:1357:1357	3061594	3					
ANR	3061897	IfStatement	if ( dst [ x ] != bg )		3061594	0					
ANR	3061898	Condition	dst [ x ] != bg	73:20:1473:1484	3061594	0	True				
ANR	3061899	EqualityExpression	dst [ x ] != bg		3061594	0		!=			
ANR	3061900	ArrayIndexing	dst [ x ]		3061594	0					
ANR	3061901	Identifier	dst		3061594	0					
ANR	3061902	Identifier	x		3061594	1					
ANR	3061903	Identifier	bg		3061594	1					
ANR	3061904	CompoundStatement		71:34:1394:1394	3061594	1					
ANR	3061905	ExpressionStatement	dst [ x ] = limit	75:20:1510:1524	3061594	0	True				
ANR	3061906	AssignmentExpression	dst [ x ] = limit		3061594	0		=			
ANR	3061907	ArrayIndexing	dst [ x ]		3061594	0					
ANR	3061908	Identifier	dst		3061594	0					
ANR	3061909	Identifier	x		3061594	1					
ANR	3061910	Identifier	limit		3061594	1					
ANR	3061911	BreakStatement	break ;	77:20:1547:1552	3061594	1	True				
ANR	3061912	ForStatement	for ( x = end - 1 ; x >= start ; x -- )		3061594	2					
ANR	3061913	ForInit	x = end - 1 ;	83:17:1606:1617	3061594	0	True				
ANR	3061914	AssignmentExpression	x = end - 1		3061594	0		=			
ANR	3061915	Identifier	x		3061594	0					
ANR	3061916	AdditiveExpression	end - 1		3061594	1		-			
ANR	3061917	Identifier	end		3061594	0					
ANR	3061918	PrimaryExpression	1		3061594	1					
ANR	3061919	Condition	x >= start	83:30:1619:1628	3061594	1	True				
ANR	3061920	RelationalExpression	x >= start		3061594	0		>=			
ANR	3061921	Identifier	x		3061594	0					
ANR	3061922	Identifier	start		3061594	1					
ANR	3061923	PostIncDecOperationExpression	x --	83:42:1631:1633	3061594	2	True				
ANR	3061924	Identifier	x		3061594	0					
ANR	3061925	IncDec	--		3061594	1					
ANR	3061926	CompoundStatement		81:47:1543:1543	3061594	3					
ANR	3061927	IfStatement	if ( dst [ x ] != bg )		3061594	0					
ANR	3061928	Condition	dst [ x ] != bg	85:20:1659:1670	3061594	0	True				
ANR	3061929	EqualityExpression	dst [ x ] != bg		3061594	0		!=			
ANR	3061930	ArrayIndexing	dst [ x ]		3061594	0					
ANR	3061931	Identifier	dst		3061594	0					
ANR	3061932	Identifier	x		3061594	1					
ANR	3061933	Identifier	bg		3061594	1					
ANR	3061934	CompoundStatement		83:34:1580:1580	3061594	1					
ANR	3061935	ExpressionStatement	dst [ x ] = limit	87:20:1696:1710	3061594	0	True				
ANR	3061936	AssignmentExpression	dst [ x ] = limit		3061594	0		=			
ANR	3061937	ArrayIndexing	dst [ x ]		3061594	0					
ANR	3061938	Identifier	dst		3061594	0					
ANR	3061939	Identifier	x		3061594	1					
ANR	3061940	Identifier	limit		3061594	1					
ANR	3061941	BreakStatement	break ;	89:20:1733:1738	3061594	1	True				
ANR	3061942	ReturnType	static void		3061594	1					
ANR	3061943	Identifier	envelope_instant16		3061594	2					
ANR	3061944	ParameterList	"WaveformContext * s , AVFrame * out , int plane , int component"		3061594	3					
ANR	3061945	Parameter	WaveformContext * s	1:31:31:48	3061594	0	True				
ANR	3061946	ParameterType	WaveformContext *		3061594	0					
ANR	3061947	Identifier	s		3061594	1					
ANR	3061948	Parameter	AVFrame * out	1:51:51:62	3061594	1	True				
ANR	3061949	ParameterType	AVFrame *		3061594	0					
ANR	3061950	Identifier	out		3061594	1					
ANR	3061951	Parameter	int plane	1:65:65:73	3061594	2	True				
ANR	3061952	ParameterType	int		3061594	0					
ANR	3061953	Identifier	plane		3061594	1					
ANR	3061954	Parameter	int component	1:76:76:88	3061594	3	True				
ANR	3061955	ParameterType	int		3061594	0					
ANR	3061956	Identifier	component		3061594	1					
ANR	3061957	CFGEntryNode	ENTRY		3061594		True				
ANR	3061958	CFGExitNode	EXIT		3061594		True				
ANR	3061959	Symbol	plane		3061594						
ANR	3061960	Symbol	s -> size		3061594						
ANR	3061961	Symbol	* x		3061594						
ANR	3061962	Symbol	dst		3061594						
ANR	3061963	Symbol	* component		3061594						
ANR	3061964	Symbol	bg		3061594						
ANR	3061965	Symbol	s -> desc -> log2_chroma_w		3061594						
ANR	3061966	Symbol	dst_w		3061594						
ANR	3061967	Symbol	* s -> eend		3061594						
ANR	3061968	Symbol	out		3061594						
ANR	3061969	Symbol	* dst		3061594						
ANR	3061970	Symbol	* s -> estart		3061594						
ANR	3061971	Symbol	* * s		3061594						
ANR	3061972	Symbol	limit		3061594						
ANR	3061973	Symbol	s -> desc -> log2_chroma_h		3061594						
ANR	3061974	Symbol	dst_h		3061594						
ANR	3061975	Symbol	s -> estart		3061594						
ANR	3061976	Symbol	end		3061594						
ANR	3061977	Symbol	dst_linesize		3061594						
ANR	3061978	Symbol	* plane		3061594						
ANR	3061979	Symbol	s -> mode		3061594						
ANR	3061980	Symbol	* out -> linesize		3061594						
ANR	3061981	Symbol	* * out		3061594						
ANR	3061982	Symbol	s -> eend		3061594						
ANR	3061983	Symbol	shift_w		3061594						
ANR	3061984	Symbol	start		3061594						
ANR	3061985	Symbol	s -> desc		3061594						
ANR	3061986	Symbol	is_chroma		3061594						
ANR	3061987	Symbol	* s -> desc		3061594						
ANR	3061988	Symbol	component		3061594						
ANR	3061989	Symbol	FF_CEIL_RSHIFT		3061594						
ANR	3061990	Symbol	s		3061594						
ANR	3061991	Symbol	out -> linesize		3061594						
ANR	3061992	Symbol	shift_h		3061594						
ANR	3061993	Symbol	* out		3061594						
ANR	3061994	Symbol	s -> bg_color		3061594						
ANR	3061995	Symbol	x		3061594						
ANR	3061996	Symbol	* s -> bg_color		3061594						
ANR	3061997	Symbol	y		3061594						
ANR	3061998	Symbol	out -> height		3061594						
ANR	3061999	Symbol	out -> width		3061594						
ANR	3062000	Symbol	* s		3061594						
ANR	3062001	Symbol	* out -> data		3061594						
ANR	3062002	Symbol	out -> data		3061594						
