command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6678761	File	/home/p4ultr4n/workplace/ReVeal/raw_code/print_execve_1.c								
ANR	6678762	Function	print_execve	1:0:0:889							
ANR	6678763	FunctionDef	"print_execve (const struct syscallname * name , abi_long arg1 , abi_long arg2 , abi_long arg3 , abi_long arg4 , abi_long arg5 , abi_long arg6)"		6678762	0					
ANR	6678764	CompoundStatement		7:0:164:889	6678762	0					
ANR	6678765	IdentifierDeclStatement	abi_ulong arg_ptr_addr ;	9:4:171:193	6678762	0	True				
ANR	6678766	IdentifierDecl	arg_ptr_addr		6678762	0					
ANR	6678767	IdentifierDeclType	abi_ulong		6678762	0					
ANR	6678768	Identifier	arg_ptr_addr		6678762	1					
ANR	6678769	IdentifierDeclStatement	char * s ;	11:4:200:207	6678762	1	True				
ANR	6678770	IdentifierDecl	* s		6678762	0					
ANR	6678771	IdentifierDeclType	char *		6678762	0					
ANR	6678772	Identifier	s		6678762	1					
ANR	6678773	IfStatement	if ( ! ( s = lock_user_string ( arg1 ) ) )		6678762	2					
ANR	6678774	Condition	! ( s = lock_user_string ( arg1 ) )	15:8:220:248	6678762	0	True				
ANR	6678775	UnaryOperationExpression	! ( s = lock_user_string ( arg1 ) )		6678762	0					
ANR	6678776	UnaryOperator	!		6678762	0					
ANR	6678777	AssignmentExpression	s = lock_user_string ( arg1 )		6678762	1		=			
ANR	6678778	Identifier	s		6678762	0					
ANR	6678779	CallExpression	lock_user_string ( arg1 )		6678762	1					
ANR	6678780	Callee	lock_user_string		6678762	0					
ANR	6678781	Identifier	lock_user_string		6678762	0					
ANR	6678782	ArgumentList	arg1		6678762	1					
ANR	6678783	Argument	arg1		6678762	0					
ANR	6678784	Identifier	arg1		6678762	0					
ANR	6678785	ReturnStatement	return ;	17:8:260:266	6678762	1	True				
ANR	6678786	ExpressionStatement	"gemu_log ( ""%s(\\""%s\\"",{"" , name -> name , s )"	19:4:273:311	6678762	3	True				
ANR	6678787	CallExpression	"gemu_log ( ""%s(\\""%s\\"",{"" , name -> name , s )"		6678762	0					
ANR	6678788	Callee	gemu_log		6678762	0					
ANR	6678789	Identifier	gemu_log		6678762	0					
ANR	6678790	ArgumentList	"""%s(\\""%s\\"",{"""		6678762	1					
ANR	6678791	Argument	"""%s(\\""%s\\"",{"""		6678762	0					
ANR	6678792	PrimaryExpression	"""%s(\\""%s\\"",{"""		6678762	0					
ANR	6678793	Argument	name -> name		6678762	1					
ANR	6678794	PtrMemberAccess	name -> name		6678762	0					
ANR	6678795	Identifier	name		6678762	0					
ANR	6678796	Identifier	name		6678762	1					
ANR	6678797	Argument	s		6678762	2					
ANR	6678798	Identifier	s		6678762	0					
ANR	6678799	ExpressionStatement	"unlock_user ( s , arg1 , 0 )"	21:4:318:341	6678762	4	True				
ANR	6678800	CallExpression	"unlock_user ( s , arg1 , 0 )"		6678762	0					
ANR	6678801	Callee	unlock_user		6678762	0					
ANR	6678802	Identifier	unlock_user		6678762	0					
ANR	6678803	ArgumentList	s		6678762	1					
ANR	6678804	Argument	s		6678762	0					
ANR	6678805	Identifier	s		6678762	0					
ANR	6678806	Argument	arg1		6678762	1					
ANR	6678807	Identifier	arg1		6678762	0					
ANR	6678808	Argument	0		6678762	2					
ANR	6678809	PrimaryExpression	0		6678762	0					
ANR	6678810	ForStatement	for ( arg_ptr_addr = arg2 ; ; arg_ptr_addr += sizeof ( abi_ulong ) )		6678762	5					
ANR	6678811	ForInit	arg_ptr_addr = arg2 ;	25:9:355:374	6678762	0	True				
ANR	6678812	AssignmentExpression	arg_ptr_addr = arg2		6678762	0		=			
ANR	6678813	Identifier	arg_ptr_addr		6678762	0					
ANR	6678814	Identifier	arg2		6678762	1					
ANR	6678815	AssignmentExpression	arg_ptr_addr += sizeof ( abi_ulong )	25:32:378:410	6678762	1	True	+=			
ANR	6678816	Identifier	arg_ptr_addr		6678762	0					
ANR	6678817	SizeofExpression	sizeof ( abi_ulong )		6678762	1					
ANR	6678818	Sizeof	sizeof		6678762	0					
ANR	6678819	SizeofOperand	abi_ulong		6678762	1					
ANR	6678820	CompoundStatement		21:8:259:295	6678762	2					
ANR	6678821	IdentifierDeclStatement	"abi_ulong * arg_ptr , arg_addr , s_addr ;"	27:8:424:460	6678762	0	True				
ANR	6678822	IdentifierDecl	* arg_ptr		6678762	0					
ANR	6678823	IdentifierDeclType	abi_ulong *		6678762	0					
ANR	6678824	Identifier	arg_ptr		6678762	1					
ANR	6678825	IdentifierDecl	arg_addr		6678762	1					
ANR	6678826	IdentifierDeclType	abi_ulong		6678762	0					
ANR	6678827	Identifier	arg_addr		6678762	1					
ANR	6678828	IdentifierDecl	s_addr		6678762	2					
ANR	6678829	IdentifierDeclType	abi_ulong		6678762	0					
ANR	6678830	Identifier	s_addr		6678762	1					
ANR	6678831	ExpressionStatement	"arg_ptr = lock_user ( VERIFY_READ , arg_ptr_addr , sizeof ( abi_ulong ) , 1 )"	31:8:473:541	6678762	1	True				
ANR	6678832	AssignmentExpression	"arg_ptr = lock_user ( VERIFY_READ , arg_ptr_addr , sizeof ( abi_ulong ) , 1 )"		6678762	0		=			
ANR	6678833	Identifier	arg_ptr		6678762	0					
ANR	6678834	CallExpression	"lock_user ( VERIFY_READ , arg_ptr_addr , sizeof ( abi_ulong ) , 1 )"		6678762	1					
ANR	6678835	Callee	lock_user		6678762	0					
ANR	6678836	Identifier	lock_user		6678762	0					
ANR	6678837	ArgumentList	VERIFY_READ		6678762	1					
ANR	6678838	Argument	VERIFY_READ		6678762	0					
ANR	6678839	Identifier	VERIFY_READ		6678762	0					
ANR	6678840	Argument	arg_ptr_addr		6678762	1					
ANR	6678841	Identifier	arg_ptr_addr		6678762	0					
ANR	6678842	Argument	sizeof ( abi_ulong )		6678762	2					
ANR	6678843	SizeofExpression	sizeof ( abi_ulong )		6678762	0					
ANR	6678844	Sizeof	sizeof		6678762	0					
ANR	6678845	SizeofOperand	abi_ulong		6678762	1					
ANR	6678846	Argument	1		6678762	3					
ANR	6678847	PrimaryExpression	1		6678762	0					
ANR	6678848	IfStatement	if ( ! arg_ptr )		6678762	2					
ANR	6678849	Condition	! arg_ptr	33:12:556:563	6678762	0	True				
ANR	6678850	UnaryOperationExpression	! arg_ptr		6678762	0					
ANR	6678851	UnaryOperator	!		6678762	0					
ANR	6678852	Identifier	arg_ptr		6678762	1					
ANR	6678853	ReturnStatement	return ;	35:12:579:585	6678762	1	True				
ANR	6678854	ExpressionStatement	arg_addr = tswapl ( * arg_ptr )	37:8:596:623	6678762	3	True				
ANR	6678855	AssignmentExpression	arg_addr = tswapl ( * arg_ptr )		6678762	0		=			
ANR	6678856	Identifier	arg_addr		6678762	0					
ANR	6678857	CallExpression	tswapl ( * arg_ptr )		6678762	1					
ANR	6678858	Callee	tswapl		6678762	0					
ANR	6678859	Identifier	tswapl		6678762	0					
ANR	6678860	ArgumentList	* arg_ptr		6678762	1					
ANR	6678861	Argument	* arg_ptr		6678762	0					
ANR	6678862	UnaryOperationExpression	* arg_ptr		6678762	0					
ANR	6678863	UnaryOperator	*		6678762	0					
ANR	6678864	Identifier	arg_ptr		6678762	1					
ANR	6678865	ExpressionStatement	"unlock_user ( arg_ptr , arg_ptr_addr , 0 )"	39:8:634:671	6678762	4	True				
ANR	6678866	CallExpression	"unlock_user ( arg_ptr , arg_ptr_addr , 0 )"		6678762	0					
ANR	6678867	Callee	unlock_user		6678762	0					
ANR	6678868	Identifier	unlock_user		6678762	0					
ANR	6678869	ArgumentList	arg_ptr		6678762	1					
ANR	6678870	Argument	arg_ptr		6678762	0					
ANR	6678871	Identifier	arg_ptr		6678762	0					
ANR	6678872	Argument	arg_ptr_addr		6678762	1					
ANR	6678873	Identifier	arg_ptr_addr		6678762	0					
ANR	6678874	Argument	0		6678762	2					
ANR	6678875	PrimaryExpression	0		6678762	0					
ANR	6678876	IfStatement	if ( ! arg_addr )		6678762	5					
ANR	6678877	Condition	! arg_addr	41:12:686:694	6678762	0	True				
ANR	6678878	UnaryOperationExpression	! arg_addr		6678762	0					
ANR	6678879	UnaryOperator	!		6678762	0					
ANR	6678880	Identifier	arg_addr		6678762	1					
ANR	6678881	BreakStatement	break ;	43:12:710:715	6678762	1	True				
ANR	6678882	IfStatement	if ( ( s = lock_user_string ( arg_addr ) ) )		6678762	6					
ANR	6678883	Condition	s = lock_user_string ( arg_addr )	45:12:730:761	6678762	0	True				
ANR	6678884	AssignmentExpression	s = lock_user_string ( arg_addr )		6678762	0		=			
ANR	6678885	Identifier	s		6678762	0					
ANR	6678886	CallExpression	lock_user_string ( arg_addr )		6678762	1					
ANR	6678887	Callee	lock_user_string		6678762	0					
ANR	6678888	Identifier	lock_user_string		6678762	0					
ANR	6678889	ArgumentList	arg_addr		6678762	1					
ANR	6678890	Argument	arg_addr		6678762	0					
ANR	6678891	Identifier	arg_addr		6678762	0					
ANR	6678892	CompoundStatement		39:46:599:599	6678762	1					
ANR	6678893	ExpressionStatement	"gemu_log ( ""\\""%s\\"","" , s )"	47:12:779:801	6678762	0	True				
ANR	6678894	CallExpression	"gemu_log ( ""\\""%s\\"","" , s )"		6678762	0					
ANR	6678895	Callee	gemu_log		6678762	0					
ANR	6678896	Identifier	gemu_log		6678762	0					
ANR	6678897	ArgumentList	"""\\""%s\\"","""		6678762	1					
ANR	6678898	Argument	"""\\""%s\\"","""		6678762	0					
ANR	6678899	PrimaryExpression	"""\\""%s\\"","""		6678762	0					
ANR	6678900	Argument	s		6678762	1					
ANR	6678901	Identifier	s		6678762	0					
ANR	6678902	ExpressionStatement	"unlock_user ( s , s_addr , 0 )"	49:12:816:841	6678762	1	True				
ANR	6678903	CallExpression	"unlock_user ( s , s_addr , 0 )"		6678762	0					
ANR	6678904	Callee	unlock_user		6678762	0					
ANR	6678905	Identifier	unlock_user		6678762	0					
ANR	6678906	ArgumentList	s		6678762	1					
ANR	6678907	Argument	s		6678762	0					
ANR	6678908	Identifier	s		6678762	0					
ANR	6678909	Argument	s_addr		6678762	1					
ANR	6678910	Identifier	s_addr		6678762	0					
ANR	6678911	Argument	0		6678762	2					
ANR	6678912	PrimaryExpression	0		6678762	0					
ANR	6678913	ExpressionStatement	"gemu_log ( ""NULL})"" )"	57:4:868:886	6678762	6	True				
ANR	6678914	CallExpression	"gemu_log ( ""NULL})"" )"		6678762	0					
ANR	6678915	Callee	gemu_log		6678762	0					
ANR	6678916	Identifier	gemu_log		6678762	0					
ANR	6678917	ArgumentList	"""NULL})"""		6678762	1					
ANR	6678918	Argument	"""NULL})"""		6678762	0					
ANR	6678919	PrimaryExpression	"""NULL})"""		6678762	0					
ANR	6678920	Identifier	print_execve		6678762	1					
ANR	6678921	ParameterList	"const struct syscallname * name , abi_long arg1 , abi_long arg2 , abi_long arg3 , abi_long arg4 , abi_long arg5 , abi_long arg6"		6678762	2					
ANR	6678922	Parameter	const struct syscallname * name	1:13:13:42	6678762	0	True				
ANR	6678923	ParameterType	const struct syscallname *		6678762	0					
ANR	6678924	Identifier	name		6678762	1					
ANR	6678925	Parameter	abi_long arg1	3:13:59:71	6678762	1	True				
ANR	6678926	ParameterType	abi_long		6678762	0					
ANR	6678927	Identifier	arg1		6678762	1					
ANR	6678928	Parameter	abi_long arg2	3:28:74:86	6678762	2	True				
ANR	6678929	ParameterType	abi_long		6678762	0					
ANR	6678930	Identifier	arg2		6678762	1					
ANR	6678931	Parameter	abi_long arg3	3:43:89:101	6678762	3	True				
ANR	6678932	ParameterType	abi_long		6678762	0					
ANR	6678933	Identifier	arg3		6678762	1					
ANR	6678934	Parameter	abi_long arg4	5:13:118:130	6678762	4	True				
ANR	6678935	ParameterType	abi_long		6678762	0					
ANR	6678936	Identifier	arg4		6678762	1					
ANR	6678937	Parameter	abi_long arg5	5:28:133:145	6678762	5	True				
ANR	6678938	ParameterType	abi_long		6678762	0					
ANR	6678939	Identifier	arg5		6678762	1					
ANR	6678940	Parameter	abi_long arg6	5:43:148:160	6678762	6	True				
ANR	6678941	ParameterType	abi_long		6678762	0					
ANR	6678942	Identifier	arg6		6678762	1					
ANR	6678943	CFGEntryNode	ENTRY		6678762		True				
ANR	6678944	CFGExitNode	EXIT		6678762		True				
ANR	6678945	InfiniteForNode	true		6678762		True				
ANR	6678946	Symbol	* name		6678762						
ANR	6678947	Symbol	lock_user_string		6678762						
ANR	6678948	Symbol	name -> name		6678762						
ANR	6678949	Symbol	VERIFY_READ		6678762						
ANR	6678950	Symbol	arg_ptr_addr		6678762						
ANR	6678951	Symbol	arg6		6678762						
ANR	6678952	Symbol	lock_user		6678762						
ANR	6678953	Symbol	arg3		6678762						
ANR	6678954	Symbol	arg2		6678762						
ANR	6678955	Symbol	arg5		6678762						
ANR	6678956	Symbol	* arg_ptr		6678762						
ANR	6678957	Symbol	arg4		6678762						
ANR	6678958	Symbol	s		6678762						
ANR	6678959	Symbol	arg1		6678762						
ANR	6678960	Symbol	name		6678762						
ANR	6678961	Symbol	s_addr		6678762						
ANR	6678962	Symbol	arg_ptr		6678762						
ANR	6678963	Symbol	arg_addr		6678762						
ANR	6678964	Symbol	tswapl		6678762						
