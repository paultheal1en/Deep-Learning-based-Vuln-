command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1162679	File	/home/p4ultr4n/workplace/ReVeal/raw_code/build_filter_01_1.c								
ANR	1162680	Function	build_filter	1:0:0:6232							
ANR	1162681	FunctionDef	"build_filter (ResampleContext * c , void * filter , double factor , int tap_count , int alloc , int phase_count , int scale , int filter_type , double kaiser_beta)"		1162680	0					
ANR	1162682	CompoundStatement		3:60:188:6232	1162680	0					
ANR	1162683	IdentifierDeclStatement	"int ph , i ;"	5:4:195:204	1162680	0	True				
ANR	1162684	IdentifierDecl	ph		1162680	0					
ANR	1162685	IdentifierDeclType	int		1162680	0					
ANR	1162686	Identifier	ph		1162680	1					
ANR	1162687	IdentifierDecl	i		1162680	1					
ANR	1162688	IdentifierDeclType	int		1162680	0					
ANR	1162689	Identifier	i		1162680	1					
ANR	1162690	IdentifierDeclStatement	"double x , y , w , t , s ;"	7:4:211:231	1162680	1	True				
ANR	1162691	IdentifierDecl	x		1162680	0					
ANR	1162692	IdentifierDeclType	double		1162680	0					
ANR	1162693	Identifier	x		1162680	1					
ANR	1162694	IdentifierDecl	y		1162680	1					
ANR	1162695	IdentifierDeclType	double		1162680	0					
ANR	1162696	Identifier	y		1162680	1					
ANR	1162697	IdentifierDecl	w		1162680	2					
ANR	1162698	IdentifierDeclType	double		1162680	0					
ANR	1162699	Identifier	w		1162680	1					
ANR	1162700	IdentifierDecl	t		1162680	3					
ANR	1162701	IdentifierDeclType	double		1162680	0					
ANR	1162702	Identifier	t		1162680	1					
ANR	1162703	IdentifierDecl	s		1162680	4					
ANR	1162704	IdentifierDeclType	double		1162680	0					
ANR	1162705	Identifier	s		1162680	1					
ANR	1162706	IdentifierDeclStatement	"double * tab = av_malloc_array ( tap_count + 1 , sizeof ( * tab ) ) ;"	9:4:238:295	1162680	2	True				
ANR	1162707	IdentifierDecl	"* tab = av_malloc_array ( tap_count + 1 , sizeof ( * tab ) )"		1162680	0					
ANR	1162708	IdentifierDeclType	double *		1162680	0					
ANR	1162709	Identifier	tab		1162680	1					
ANR	1162710	AssignmentExpression	"* tab = av_malloc_array ( tap_count + 1 , sizeof ( * tab ) )"		1162680	2		=			
ANR	1162711	Identifier	tab		1162680	0					
ANR	1162712	CallExpression	"av_malloc_array ( tap_count + 1 , sizeof ( * tab ) )"		1162680	1					
ANR	1162713	Callee	av_malloc_array		1162680	0					
ANR	1162714	Identifier	av_malloc_array		1162680	0					
ANR	1162715	ArgumentList	tap_count + 1		1162680	1					
ANR	1162716	Argument	tap_count + 1		1162680	0					
ANR	1162717	AdditiveExpression	tap_count + 1		1162680	0		+			
ANR	1162718	Identifier	tap_count		1162680	0					
ANR	1162719	PrimaryExpression	1		1162680	1					
ANR	1162720	Argument	sizeof ( * tab )		1162680	1					
ANR	1162721	SizeofExpression	sizeof ( * tab )		1162680	0					
ANR	1162722	Sizeof	sizeof		1162680	0					
ANR	1162723	UnaryOperationExpression	* tab		1162680	1					
ANR	1162724	UnaryOperator	*		1162680	0					
ANR	1162725	Identifier	tab		1162680	1					
ANR	1162726	IdentifierDeclStatement	"double * sin_lut = av_malloc_array ( phase_count / 2 + 1 , sizeof ( * sin_lut ) ) ;"	11:4:302:374	1162680	3	True				
ANR	1162727	IdentifierDecl	"* sin_lut = av_malloc_array ( phase_count / 2 + 1 , sizeof ( * sin_lut ) )"		1162680	0					
ANR	1162728	IdentifierDeclType	double *		1162680	0					
ANR	1162729	Identifier	sin_lut		1162680	1					
ANR	1162730	AssignmentExpression	"* sin_lut = av_malloc_array ( phase_count / 2 + 1 , sizeof ( * sin_lut ) )"		1162680	2		=			
ANR	1162731	Identifier	sin_lut		1162680	0					
ANR	1162732	CallExpression	"av_malloc_array ( phase_count / 2 + 1 , sizeof ( * sin_lut ) )"		1162680	1					
ANR	1162733	Callee	av_malloc_array		1162680	0					
ANR	1162734	Identifier	av_malloc_array		1162680	0					
ANR	1162735	ArgumentList	phase_count / 2 + 1		1162680	1					
ANR	1162736	Argument	phase_count / 2 + 1		1162680	0					
ANR	1162737	AdditiveExpression	phase_count / 2 + 1		1162680	0		+			
ANR	1162738	MultiplicativeExpression	phase_count / 2		1162680	0		/			
ANR	1162739	Identifier	phase_count		1162680	0					
ANR	1162740	PrimaryExpression	2		1162680	1					
ANR	1162741	PrimaryExpression	1		1162680	1					
ANR	1162742	Argument	sizeof ( * sin_lut )		1162680	1					
ANR	1162743	SizeofExpression	sizeof ( * sin_lut )		1162680	0					
ANR	1162744	Sizeof	sizeof		1162680	0					
ANR	1162745	UnaryOperationExpression	* sin_lut		1162680	1					
ANR	1162746	UnaryOperator	*		1162680	0					
ANR	1162747	Identifier	sin_lut		1162680	1					
ANR	1162748	IdentifierDeclStatement	const int center = ( tap_count - 1 ) / 2 ;	13:4:381:414	1162680	4	True				
ANR	1162749	IdentifierDecl	center = ( tap_count - 1 ) / 2		1162680	0					
ANR	1162750	IdentifierDeclType	const int		1162680	0					
ANR	1162751	Identifier	center		1162680	1					
ANR	1162752	AssignmentExpression	center = ( tap_count - 1 ) / 2		1162680	2		=			
ANR	1162753	Identifier	center		1162680	0					
ANR	1162754	MultiplicativeExpression	( tap_count - 1 ) / 2		1162680	1		/			
ANR	1162755	AdditiveExpression	tap_count - 1		1162680	0		-			
ANR	1162756	Identifier	tap_count		1162680	0					
ANR	1162757	PrimaryExpression	1		1162680	1					
ANR	1162758	PrimaryExpression	2		1162680	1					
ANR	1162759	IfStatement	if ( ! tab || ! sin_lut )		1162680	5					
ANR	1162760	Condition	! tab || ! sin_lut	17:8:427:442	1162680	0	True				
ANR	1162761	OrExpression	! tab || ! sin_lut		1162680	0		||			
ANR	1162762	UnaryOperationExpression	! tab		1162680	0					
ANR	1162763	UnaryOperator	!		1162680	0					
ANR	1162764	Identifier	tab		1162680	1					
ANR	1162765	UnaryOperationExpression	! sin_lut		1162680	1					
ANR	1162766	UnaryOperator	!		1162680	0					
ANR	1162767	Identifier	sin_lut		1162680	1					
ANR	1162768	GotoStatement	goto fail ;	19:8:454:463	1162680	1	True				
ANR	1162769	Identifier	fail		1162680	0					
ANR	1162770	IfStatement	if ( factor > 1.0 )		1162680	6					
ANR	1162771	Condition	factor > 1.0	25:8:538:549	1162680	0	True				
ANR	1162772	RelationalExpression	factor > 1.0		1162680	0		>			
ANR	1162773	Identifier	factor		1162680	0					
ANR	1162774	PrimaryExpression	1.0		1162680	1					
ANR	1162775	ExpressionStatement	factor = 1.0	27:8:561:573	1162680	1	True				
ANR	1162776	AssignmentExpression	factor = 1.0		1162680	0		=			
ANR	1162777	Identifier	factor		1162680	0					
ANR	1162778	PrimaryExpression	1.0		1162680	1					
ANR	1162779	ExpressionStatement	av_assert0 ( phase_count == 1 || phase_count % 2 == 0 )	31:4:582:634	1162680	7	True				
ANR	1162780	CallExpression	av_assert0 ( phase_count == 1 || phase_count % 2 == 0 )		1162680	0					
ANR	1162781	Callee	av_assert0		1162680	0					
ANR	1162782	Identifier	av_assert0		1162680	0					
ANR	1162783	ArgumentList	phase_count == 1 || phase_count % 2 == 0		1162680	1					
ANR	1162784	Argument	phase_count == 1 || phase_count % 2 == 0		1162680	0					
ANR	1162785	OrExpression	phase_count == 1 || phase_count % 2 == 0		1162680	0		||			
ANR	1162786	EqualityExpression	phase_count == 1		1162680	0		==			
ANR	1162787	Identifier	phase_count		1162680	0					
ANR	1162788	PrimaryExpression	1		1162680	1					
ANR	1162789	EqualityExpression	phase_count % 2 == 0		1162680	1		==			
ANR	1162790	MultiplicativeExpression	phase_count % 2		1162680	0		%			
ANR	1162791	Identifier	phase_count		1162680	0					
ANR	1162792	PrimaryExpression	2		1162680	1					
ANR	1162793	PrimaryExpression	0		1162680	1					
ANR	1162794	IfStatement	if ( factor == 1.0 )		1162680	8					
ANR	1162795	Condition	factor == 1.0	35:8:647:659	1162680	0	True				
ANR	1162796	EqualityExpression	factor == 1.0		1162680	0		==			
ANR	1162797	Identifier	factor		1162680	0					
ANR	1162798	PrimaryExpression	1.0		1162680	1					
ANR	1162799	CompoundStatement		33:23:473:473	1162680	1					
ANR	1162800	ForStatement	for ( ph = 0 ; ph <= phase_count / 2 ; ph ++ )		1162680	0					
ANR	1162801	ForInit	ph = 0 ;	37:13:678:684	1162680	0	True				
ANR	1162802	AssignmentExpression	ph = 0		1162680	0		=			
ANR	1162803	Identifier	ph		1162680	0					
ANR	1162804	PrimaryExpression	0		1162680	1					
ANR	1162805	Condition	ph <= phase_count / 2	37:21:686:706	1162680	1	True				
ANR	1162806	RelationalExpression	ph <= phase_count / 2		1162680	0		<=			
ANR	1162807	Identifier	ph		1162680	0					
ANR	1162808	MultiplicativeExpression	phase_count / 2		1162680	1		/			
ANR	1162809	Identifier	phase_count		1162680	0					
ANR	1162810	PrimaryExpression	2		1162680	1					
ANR	1162811	PostIncDecOperationExpression	ph ++	37:44:709:712	1162680	2	True				
ANR	1162812	Identifier	ph		1162680	0					
ANR	1162813	IncDec	++		1162680	1					
ANR	1162814	ExpressionStatement	sin_lut [ ph ] = sin ( M_PI * ph / phase_count )	39:12:728:770	1162680	3	True				
ANR	1162815	AssignmentExpression	sin_lut [ ph ] = sin ( M_PI * ph / phase_count )		1162680	0		=			
ANR	1162816	ArrayIndexing	sin_lut [ ph ]		1162680	0					
ANR	1162817	Identifier	sin_lut		1162680	0					
ANR	1162818	Identifier	ph		1162680	1					
ANR	1162819	CallExpression	sin ( M_PI * ph / phase_count )		1162680	1					
ANR	1162820	Callee	sin		1162680	0					
ANR	1162821	Identifier	sin		1162680	0					
ANR	1162822	ArgumentList	M_PI * ph / phase_count		1162680	1					
ANR	1162823	Argument	M_PI * ph / phase_count		1162680	0					
ANR	1162824	MultiplicativeExpression	M_PI * ph / phase_count		1162680	0		*			
ANR	1162825	Identifier	M_PI		1162680	0					
ANR	1162826	MultiplicativeExpression	ph / phase_count		1162680	1		/			
ANR	1162827	Identifier	ph		1162680	0					
ANR	1162828	Identifier	phase_count		1162680	1					
ANR	1162829	ForStatement	for ( ph = 0 ; ph <= phase_count / 2 ; ph ++ )		1162680	9					
ANR	1162830	ForInit	ph = 0 ;	43:8:788:794	1162680	0	True				
ANR	1162831	AssignmentExpression	ph = 0		1162680	0		=			
ANR	1162832	Identifier	ph		1162680	0					
ANR	1162833	PrimaryExpression	0		1162680	1					
ANR	1162834	Condition	ph <= phase_count / 2	43:16:796:816	1162680	1	True				
ANR	1162835	RelationalExpression	ph <= phase_count / 2		1162680	0		<=			
ANR	1162836	Identifier	ph		1162680	0					
ANR	1162837	MultiplicativeExpression	phase_count / 2		1162680	1		/			
ANR	1162838	Identifier	phase_count		1162680	0					
ANR	1162839	PrimaryExpression	2		1162680	1					
ANR	1162840	PostIncDecOperationExpression	ph ++	43:39:819:822	1162680	2	True				
ANR	1162841	Identifier	ph		1162680	0					
ANR	1162842	IncDec	++		1162680	1					
ANR	1162843	CompoundStatement		43:8:647:662	1162680	3					
ANR	1162844	IdentifierDeclStatement	double norm = 0 ;	45:8:836:851	1162680	0	True				
ANR	1162845	IdentifierDecl	norm = 0		1162680	0					
ANR	1162846	IdentifierDeclType	double		1162680	0					
ANR	1162847	Identifier	norm		1162680	1					
ANR	1162848	AssignmentExpression	norm = 0		1162680	2		=			
ANR	1162849	Identifier	norm		1162680	0					
ANR	1162850	PrimaryExpression	0		1162680	1					
ANR	1162851	ExpressionStatement	s = sin_lut [ ph ]	47:8:862:877	1162680	1	True				
ANR	1162852	AssignmentExpression	s = sin_lut [ ph ]		1162680	0		=			
ANR	1162853	Identifier	s		1162680	0					
ANR	1162854	ArrayIndexing	sin_lut [ ph ]		1162680	1					
ANR	1162855	Identifier	sin_lut		1162680	0					
ANR	1162856	Identifier	ph		1162680	1					
ANR	1162857	ForStatement	for ( i = 0 ; i <= tap_count ; i ++ )		1162680	2					
ANR	1162858	ForInit	i = 0 ;	49:12:892:895	1162680	0	True				
ANR	1162859	AssignmentExpression	i = 0		1162680	0		=			
ANR	1162860	Identifier	i		1162680	0					
ANR	1162861	PrimaryExpression	0		1162680	1					
ANR	1162862	Condition	i <= tap_count	49:16:896:907	1162680	1	True				
ANR	1162863	RelationalExpression	i <= tap_count		1162680	0		<=			
ANR	1162864	Identifier	i		1162680	0					
ANR	1162865	Identifier	tap_count		1162680	1					
ANR	1162866	PostIncDecOperationExpression	i ++	49:29:909:911	1162680	2	True				
ANR	1162867	Identifier	i		1162680	0					
ANR	1162868	IncDec	++		1162680	1					
ANR	1162869	CompoundStatement		47:34:725:725	1162680	3					
ANR	1162870	ExpressionStatement	x = M_PI * ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor	51:12:929:998	1162680	0	True				
ANR	1162871	AssignmentExpression	x = M_PI * ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1162680	0		=			
ANR	1162872	Identifier	x		1162680	0					
ANR	1162873	MultiplicativeExpression	M_PI * ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1162680	1		*			
ANR	1162874	Identifier	M_PI		1162680	0					
ANR	1162875	MultiplicativeExpression	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1162680	1		*			
ANR	1162876	AdditiveExpression	( double ) ( i - center ) - ( double ) ph / phase_count		1162680	0		-			
ANR	1162877	CastExpression	( double ) ( i - center )		1162680	0					
ANR	1162878	CastTarget	double		1162680	0					
ANR	1162879	AdditiveExpression	i - center		1162680	1		-			
ANR	1162880	Identifier	i		1162680	0					
ANR	1162881	Identifier	center		1162680	1					
ANR	1162882	MultiplicativeExpression	( double ) ph / phase_count		1162680	1		/			
ANR	1162883	CastExpression	( double ) ph		1162680	0					
ANR	1162884	CastTarget	double		1162680	0					
ANR	1162885	Identifier	ph		1162680	1					
ANR	1162886	Identifier	phase_count		1162680	1					
ANR	1162887	Identifier	factor		1162680	1					
ANR	1162888	IfStatement	if ( x == 0 )		1162680	1					
ANR	1162889	Condition	x == 0	53:16:1017:1022	1162680	0	True				
ANR	1162890	EqualityExpression	x == 0		1162680	0		==			
ANR	1162891	Identifier	x		1162680	0					
ANR	1162892	PrimaryExpression	0		1162680	1					
ANR	1162893	ExpressionStatement	y = 1.0	53:24:1025:1032	1162680	1	True				
ANR	1162894	AssignmentExpression	y = 1.0		1162680	0		=			
ANR	1162895	Identifier	y		1162680	0					
ANR	1162896	PrimaryExpression	1.0		1162680	1					
ANR	1162897	ElseStatement	else		1162680	0					
ANR	1162898	IfStatement	if ( factor == 1.0 )		1162680	0					
ANR	1162899	Condition	factor == 1.0	55:21:1056:1068	1162680	0	True				
ANR	1162900	EqualityExpression	factor == 1.0		1162680	0		==			
ANR	1162901	Identifier	factor		1162680	0					
ANR	1162902	PrimaryExpression	1.0		1162680	1					
ANR	1162903	ExpressionStatement	y = s / x	57:16:1088:1097	1162680	1	True				
ANR	1162904	AssignmentExpression	y = s / x		1162680	0		=			
ANR	1162905	Identifier	y		1162680	0					
ANR	1162906	MultiplicativeExpression	s / x		1162680	1		/			
ANR	1162907	Identifier	s		1162680	0					
ANR	1162908	Identifier	x		1162680	1					
ANR	1162909	ElseStatement	else		1162680	0					
ANR	1162910	ExpressionStatement	y = sin ( x ) / x	61:16:1134:1148	1162680	0	True				
ANR	1162911	AssignmentExpression	y = sin ( x ) / x		1162680	0		=			
ANR	1162912	Identifier	y		1162680	0					
ANR	1162913	MultiplicativeExpression	sin ( x ) / x		1162680	1		/			
ANR	1162914	CallExpression	sin ( x )		1162680	0					
ANR	1162915	Callee	sin		1162680	0					
ANR	1162916	Identifier	sin		1162680	0					
ANR	1162917	ArgumentList	x		1162680	1					
ANR	1162918	Argument	x		1162680	0					
ANR	1162919	Identifier	x		1162680	0					
ANR	1162920	Identifier	x		1162680	1					
ANR	1162921	SwitchStatement	switch ( filter_type )		1162680	2					
ANR	1162922	Condition	filter_type	63:19:1170:1180	1162680	0	True				
ANR	1162923	Identifier	filter_type		1162680	0					
ANR	1162924	CompoundStatement		61:31:993:993	1162680	1					
ANR	1162925	Label	case SWR_FILTER_TYPE_CUBIC :	65:12:1197:1223	1162680	0	True				
ANR	1162926	Identifier	SWR_FILTER_TYPE_CUBIC		1162680	0					
ANR	1162927	CompoundStatement		65:16:1054:1073	1162680	1					
ANR	1162928	IdentifierDeclStatement	const float d = - 0.5 ;	67:16:1243:1262	1162680	0	True				
ANR	1162929	IdentifierDecl	d = - 0.5		1162680	0					
ANR	1162930	IdentifierDeclType	const float		1162680	0					
ANR	1162931	Identifier	d		1162680	1					
ANR	1162932	AssignmentExpression	d = - 0.5		1162680	2		=			
ANR	1162933	Identifier	d		1162680	0					
ANR	1162934	UnaryOperationExpression	- 0.5		1162680	1					
ANR	1162935	UnaryOperator	-		1162680	0					
ANR	1162936	PrimaryExpression	0.5		1162680	1					
ANR	1162937	ExpressionStatement	x = fabs ( ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor )	69:16:1313:1381	1162680	1	True				
ANR	1162938	AssignmentExpression	x = fabs ( ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor )		1162680	0		=			
ANR	1162939	Identifier	x		1162680	0					
ANR	1162940	CallExpression	fabs ( ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor )		1162680	1					
ANR	1162941	Callee	fabs		1162680	0					
ANR	1162942	Identifier	fabs		1162680	0					
ANR	1162943	ArgumentList	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1162680	1					
ANR	1162944	Argument	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1162680	0					
ANR	1162945	MultiplicativeExpression	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1162680	0		*			
ANR	1162946	AdditiveExpression	( double ) ( i - center ) - ( double ) ph / phase_count		1162680	0		-			
ANR	1162947	CastExpression	( double ) ( i - center )		1162680	0					
ANR	1162948	CastTarget	double		1162680	0					
ANR	1162949	AdditiveExpression	i - center		1162680	1		-			
ANR	1162950	Identifier	i		1162680	0					
ANR	1162951	Identifier	center		1162680	1					
ANR	1162952	MultiplicativeExpression	( double ) ph / phase_count		1162680	1		/			
ANR	1162953	CastExpression	( double ) ph		1162680	0					
ANR	1162954	CastTarget	double		1162680	0					
ANR	1162955	Identifier	ph		1162680	1					
ANR	1162956	Identifier	phase_count		1162680	1					
ANR	1162957	Identifier	factor		1162680	1					
ANR	1162958	IfStatement	if ( x < 1.0 )		1162680	2					
ANR	1162959	Condition	x < 1.0	71:19:1403:1407	1162680	0	True				
ANR	1162960	RelationalExpression	x < 1.0		1162680	0		<			
ANR	1162961	Identifier	x		1162680	0					
ANR	1162962	PrimaryExpression	1.0		1162680	1					
ANR	1162963	ExpressionStatement	y = 1 - 3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )	71:26:1410:1463	1162680	1	True				
ANR	1162964	AssignmentExpression	y = 1 - 3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )		1162680	0		=			
ANR	1162965	Identifier	y		1162680	0					
ANR	1162966	AdditiveExpression	1 - 3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )		1162680	1		-			
ANR	1162967	PrimaryExpression	1		1162680	0					
ANR	1162968	AdditiveExpression	3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )		1162680	1		+			
ANR	1162969	MultiplicativeExpression	3 * x * x		1162680	0		*			
ANR	1162970	PrimaryExpression	3		1162680	0					
ANR	1162971	MultiplicativeExpression	x * x		1162680	1		*			
ANR	1162972	Identifier	x		1162680	0					
ANR	1162973	Identifier	x		1162680	1					
ANR	1162974	AdditiveExpression	2 * x * x * x + d * ( - x * x + x * x * x )		1162680	1		+			
ANR	1162975	MultiplicativeExpression	2 * x * x * x		1162680	0		*			
ANR	1162976	PrimaryExpression	2		1162680	0					
ANR	1162977	MultiplicativeExpression	x * x * x		1162680	1		*			
ANR	1162978	Identifier	x		1162680	0					
ANR	1162979	MultiplicativeExpression	x * x		1162680	1		*			
ANR	1162980	Identifier	x		1162680	0					
ANR	1162981	Identifier	x		1162680	1					
ANR	1162982	MultiplicativeExpression	d * ( - x * x + x * x * x )		1162680	1		*			
ANR	1162983	Identifier	d		1162680	0					
ANR	1162984	AdditiveExpression	- x * x + x * x * x		1162680	1		+			
ANR	1162985	MultiplicativeExpression	- x * x		1162680	0		*			
ANR	1162986	UnaryOperationExpression	- x		1162680	0					
ANR	1162987	UnaryOperator	-		1162680	0					
ANR	1162988	Identifier	x		1162680	1					
ANR	1162989	Identifier	x		1162680	1					
ANR	1162990	MultiplicativeExpression	x * x * x		1162680	1		*			
ANR	1162991	Identifier	x		1162680	0					
ANR	1162992	MultiplicativeExpression	x * x		1162680	1		*			
ANR	1162993	Identifier	x		1162680	0					
ANR	1162994	Identifier	x		1162680	1					
ANR	1162995	ElseStatement	else		1162680	0					
ANR	1162996	ExpressionStatement	y = d * ( - 4 + 8 * x - 5 * x * x + x * x * x )	73:26:1492:1545	1162680	0	True				
ANR	1162997	AssignmentExpression	y = d * ( - 4 + 8 * x - 5 * x * x + x * x * x )		1162680	0		=			
ANR	1162998	Identifier	y		1162680	0					
ANR	1162999	MultiplicativeExpression	d * ( - 4 + 8 * x - 5 * x * x + x * x * x )		1162680	1		*			
ANR	1163000	Identifier	d		1162680	0					
ANR	1163001	AdditiveExpression	- 4 + 8 * x - 5 * x * x + x * x * x		1162680	1		+			
ANR	1163002	UnaryOperationExpression	- 4		1162680	0					
ANR	1163003	UnaryOperator	-		1162680	0					
ANR	1163004	PrimaryExpression	4		1162680	1					
ANR	1163005	AdditiveExpression	8 * x - 5 * x * x + x * x * x		1162680	1		-			
ANR	1163006	MultiplicativeExpression	8 * x		1162680	0		*			
ANR	1163007	PrimaryExpression	8		1162680	0					
ANR	1163008	Identifier	x		1162680	1					
ANR	1163009	AdditiveExpression	5 * x * x + x * x * x		1162680	1		+			
ANR	1163010	MultiplicativeExpression	5 * x * x		1162680	0		*			
ANR	1163011	PrimaryExpression	5		1162680	0					
ANR	1163012	MultiplicativeExpression	x * x		1162680	1		*			
ANR	1163013	Identifier	x		1162680	0					
ANR	1163014	Identifier	x		1162680	1					
ANR	1163015	MultiplicativeExpression	x * x * x		1162680	1		*			
ANR	1163016	Identifier	x		1162680	0					
ANR	1163017	MultiplicativeExpression	x * x		1162680	1		*			
ANR	1163018	Identifier	x		1162680	0					
ANR	1163019	Identifier	x		1162680	1					
ANR	1163020	BreakStatement	break ;	75:16:1564:1569	1162680	3	True				
ANR	1163021	Label	case SWR_FILTER_TYPE_BLACKMAN_NUTTALL :	77:12:1585:1622	1162680	2	True				
ANR	1163022	Identifier	SWR_FILTER_TYPE_BLACKMAN_NUTTALL		1162680	0					
ANR	1163023	ExpressionStatement	w = 2.0 * x / ( factor * tap_count )	79:16:1641:1671	1162680	3	True				
ANR	1163024	AssignmentExpression	w = 2.0 * x / ( factor * tap_count )		1162680	0		=			
ANR	1163025	Identifier	w		1162680	0					
ANR	1163026	MultiplicativeExpression	2.0 * x / ( factor * tap_count )		1162680	1		*			
ANR	1163027	PrimaryExpression	2.0		1162680	0					
ANR	1163028	MultiplicativeExpression	x / ( factor * tap_count )		1162680	1		/			
ANR	1163029	Identifier	x		1162680	0					
ANR	1163030	MultiplicativeExpression	factor * tap_count		1162680	1		*			
ANR	1163031	Identifier	factor		1162680	0					
ANR	1163032	Identifier	tap_count		1162680	1					
ANR	1163033	ExpressionStatement	t = - cos ( w )	81:16:1690:1701	1162680	4	True				
ANR	1163034	AssignmentExpression	t = - cos ( w )		1162680	0		=			
ANR	1163035	Identifier	t		1162680	0					
ANR	1163036	UnaryOperationExpression	- cos ( w )		1162680	1					
ANR	1163037	UnaryOperator	-		1162680	0					
ANR	1163038	CallExpression	cos ( w )		1162680	1					
ANR	1163039	Callee	cos		1162680	0					
ANR	1163040	Identifier	cos		1162680	0					
ANR	1163041	ArgumentList	w		1162680	1					
ANR	1163042	Argument	w		1162680	0					
ANR	1163043	Identifier	w		1162680	0					
ANR	1163044	ExpressionStatement	y *= 0.3635819 - 0.4891775 * t + 0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )	83:16:1720:1804	1162680	5	True				
ANR	1163045	AssignmentExpression	y *= 0.3635819 - 0.4891775 * t + 0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )		1162680	0		*=			
ANR	1163046	Identifier	y		1162680	0					
ANR	1163047	AdditiveExpression	0.3635819 - 0.4891775 * t + 0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )		1162680	1		-			
ANR	1163048	PrimaryExpression	0.3635819		1162680	0					
ANR	1163049	AdditiveExpression	0.4891775 * t + 0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )		1162680	1		+			
ANR	1163050	MultiplicativeExpression	0.4891775 * t		1162680	0		*			
ANR	1163051	PrimaryExpression	0.4891775		1162680	0					
ANR	1163052	Identifier	t		1162680	1					
ANR	1163053	AdditiveExpression	0.1365995 * ( 2 * t * t - 1 ) - 0.0106411 * ( 4 * t * t * t - 3 * t )		1162680	1		-			
ANR	1163054	MultiplicativeExpression	0.1365995 * ( 2 * t * t - 1 )		1162680	0		*			
ANR	1163055	PrimaryExpression	0.1365995		1162680	0					
ANR	1163056	AdditiveExpression	2 * t * t - 1		1162680	1		-			
ANR	1163057	MultiplicativeExpression	2 * t * t		1162680	0		*			
ANR	1163058	PrimaryExpression	2		1162680	0					
ANR	1163059	MultiplicativeExpression	t * t		1162680	1		*			
ANR	1163060	Identifier	t		1162680	0					
ANR	1163061	Identifier	t		1162680	1					
ANR	1163062	PrimaryExpression	1		1162680	1					
ANR	1163063	MultiplicativeExpression	0.0106411 * ( 4 * t * t * t - 3 * t )		1162680	1		*			
ANR	1163064	PrimaryExpression	0.0106411		1162680	0					
ANR	1163065	AdditiveExpression	4 * t * t * t - 3 * t		1162680	1		-			
ANR	1163066	MultiplicativeExpression	4 * t * t * t		1162680	0		*			
ANR	1163067	PrimaryExpression	4		1162680	0					
ANR	1163068	MultiplicativeExpression	t * t * t		1162680	1		*			
ANR	1163069	Identifier	t		1162680	0					
ANR	1163070	MultiplicativeExpression	t * t		1162680	1		*			
ANR	1163071	Identifier	t		1162680	0					
ANR	1163072	Identifier	t		1162680	1					
ANR	1163073	MultiplicativeExpression	3 * t		1162680	1		*			
ANR	1163074	PrimaryExpression	3		1162680	0					
ANR	1163075	Identifier	t		1162680	1					
ANR	1163076	BreakStatement	break ;	85:16:1823:1828	1162680	6	True				
ANR	1163077	Label	case SWR_FILTER_TYPE_KAISER :	87:12:1843:1870	1162680	7	True				
ANR	1163078	Identifier	SWR_FILTER_TYPE_KAISER		1162680	0					
ANR	1163079	ExpressionStatement	w = 2.0 * x / ( factor * tap_count * M_PI )	89:16:1889:1924	1162680	8	True				
ANR	1163080	AssignmentExpression	w = 2.0 * x / ( factor * tap_count * M_PI )		1162680	0		=			
ANR	1163081	Identifier	w		1162680	0					
ANR	1163082	MultiplicativeExpression	2.0 * x / ( factor * tap_count * M_PI )		1162680	1		*			
ANR	1163083	PrimaryExpression	2.0		1162680	0					
ANR	1163084	MultiplicativeExpression	x / ( factor * tap_count * M_PI )		1162680	1		/			
ANR	1163085	Identifier	x		1162680	0					
ANR	1163086	MultiplicativeExpression	factor * tap_count * M_PI		1162680	1		*			
ANR	1163087	Identifier	factor		1162680	0					
ANR	1163088	MultiplicativeExpression	tap_count * M_PI		1162680	1		*			
ANR	1163089	Identifier	tap_count		1162680	0					
ANR	1163090	Identifier	M_PI		1162680	1					
ANR	1163091	ExpressionStatement	"y *= bessel ( kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) ) )"	91:16:1943:1989	1162680	9	True				
ANR	1163092	AssignmentExpression	"y *= bessel ( kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) ) )"		1162680	0		*=			
ANR	1163093	Identifier	y		1162680	0					
ANR	1163094	CallExpression	"bessel ( kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) ) )"		1162680	1					
ANR	1163095	Callee	bessel		1162680	0					
ANR	1163096	Identifier	bessel		1162680	0					
ANR	1163097	ArgumentList	"kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1162680	1					
ANR	1163098	Argument	"kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1162680	0					
ANR	1163099	MultiplicativeExpression	"kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1162680	0		*			
ANR	1163100	Identifier	kaiser_beta		1162680	0					
ANR	1163101	CallExpression	"sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1162680	1					
ANR	1163102	Callee	sqrt		1162680	0					
ANR	1163103	Identifier	sqrt		1162680	0					
ANR	1163104	ArgumentList	"FFMAX ( 1 - w * w , 0 )"		1162680	1					
ANR	1163105	Argument	"FFMAX ( 1 - w * w , 0 )"		1162680	0					
ANR	1163106	CallExpression	"FFMAX ( 1 - w * w , 0 )"		1162680	0					
ANR	1163107	Callee	FFMAX		1162680	0					
ANR	1163108	Identifier	FFMAX		1162680	0					
ANR	1163109	ArgumentList	1 - w * w		1162680	1					
ANR	1163110	Argument	1 - w * w		1162680	0					
ANR	1163111	AdditiveExpression	1 - w * w		1162680	0		-			
ANR	1163112	PrimaryExpression	1		1162680	0					
ANR	1163113	MultiplicativeExpression	w * w		1162680	1		*			
ANR	1163114	Identifier	w		1162680	0					
ANR	1163115	Identifier	w		1162680	1					
ANR	1163116	Argument	0		1162680	1					
ANR	1163117	PrimaryExpression	0		1162680	0					
ANR	1163118	BreakStatement	break ;	93:16:2008:2013	1162680	10	True				
ANR	1163119	Label	default :	95:12:2028:2035	1162680	11	True				
ANR	1163120	Identifier	default		1162680	0					
ANR	1163121	ExpressionStatement	av_assert0 ( 0 )	97:16:2054:2067	1162680	12	True				
ANR	1163122	CallExpression	av_assert0 ( 0 )		1162680	0					
ANR	1163123	Callee	av_assert0		1162680	0					
ANR	1163124	Identifier	av_assert0		1162680	0					
ANR	1163125	ArgumentList	0		1162680	1					
ANR	1163126	Argument	0		1162680	0					
ANR	1163127	PrimaryExpression	0		1162680	0					
ANR	1163128	ExpressionStatement	tab [ i ] = y	103:12:2099:2109	1162680	3	True				
ANR	1163129	AssignmentExpression	tab [ i ] = y		1162680	0		=			
ANR	1163130	ArrayIndexing	tab [ i ]		1162680	0					
ANR	1163131	Identifier	tab		1162680	0					
ANR	1163132	Identifier	i		1162680	1					
ANR	1163133	Identifier	y		1162680	1					
ANR	1163134	ExpressionStatement	s = - s	105:12:2124:2130	1162680	4	True				
ANR	1163135	AssignmentExpression	s = - s		1162680	0		=			
ANR	1163136	Identifier	s		1162680	0					
ANR	1163137	UnaryOperationExpression	- s		1162680	1					
ANR	1163138	UnaryOperator	-		1162680	0					
ANR	1163139	Identifier	s		1162680	1					
ANR	1163140	IfStatement	if ( i < tap_count )		1162680	5					
ANR	1163141	Condition	i < tap_count	107:16:2149:2161	1162680	0	True				
ANR	1163142	RelationalExpression	i < tap_count		1162680	0		<			
ANR	1163143	Identifier	i		1162680	0					
ANR	1163144	Identifier	tap_count		1162680	1					
ANR	1163145	ExpressionStatement	norm += y	109:16:2181:2190	1162680	1	True				
ANR	1163146	AssignmentExpression	norm += y		1162680	0		+=			
ANR	1163147	Identifier	norm		1162680	0					
ANR	1163148	Identifier	y		1162680	1					
ANR	1163149	SwitchStatement	switch ( c -> format )		1162680	3					
ANR	1163150	Condition	c -> format	117:15:2288:2296	1162680	0	True				
ANR	1163151	PtrMemberAccess	c -> format		1162680	0					
ANR	1163152	Identifier	c		1162680	0					
ANR	1163153	Identifier	format		1162680	1					
ANR	1163154	CompoundStatement		115:25:2109:2109	1162680	1					
ANR	1163155	Label	case AV_SAMPLE_FMT_S16P :	119:8:2309:2332	1162680	0	True				
ANR	1163156	Identifier	AV_SAMPLE_FMT_S16P		1162680	0					
ANR	1163157	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1162680	1					
ANR	1163158	ForInit	i = 0 ;	121:16:2351:2354	1162680	0	True				
ANR	1163159	AssignmentExpression	i = 0		1162680	0		=			
ANR	1163160	Identifier	i		1162680	0					
ANR	1163161	PrimaryExpression	0		1162680	1					
ANR	1163162	Condition	i < tap_count	121:20:2355:2365	1162680	1	True				
ANR	1163163	RelationalExpression	i < tap_count		1162680	0		<			
ANR	1163164	Identifier	i		1162680	0					
ANR	1163165	Identifier	tap_count		1162680	1					
ANR	1163166	PostIncDecOperationExpression	i ++	121:32:2367:2369	1162680	2	True				
ANR	1163167	Identifier	i		1162680	0					
ANR	1163168	IncDec	++		1162680	1					
ANR	1163169	ExpressionStatement	( ( int16_t * ) filter ) [ ph * alloc + i ] = av_clip_int16 ( lrintf ( tab [ i ] * scale / norm ) )	123:16:2389:2470	1162680	3	True				
ANR	1163170	AssignmentExpression	( ( int16_t * ) filter ) [ ph * alloc + i ] = av_clip_int16 ( lrintf ( tab [ i ] * scale / norm ) )		1162680	0		=			
ANR	1163171	ArrayIndexing	( ( int16_t * ) filter ) [ ph * alloc + i ]		1162680	0					
ANR	1163172	CastExpression	( int16_t * ) filter		1162680	0					
ANR	1163173	CastTarget	int16_t *		1162680	0					
ANR	1163174	Identifier	filter		1162680	1					
ANR	1163175	AdditiveExpression	ph * alloc + i		1162680	1		+			
ANR	1163176	MultiplicativeExpression	ph * alloc		1162680	0		*			
ANR	1163177	Identifier	ph		1162680	0					
ANR	1163178	Identifier	alloc		1162680	1					
ANR	1163179	Identifier	i		1162680	1					
ANR	1163180	CallExpression	av_clip_int16 ( lrintf ( tab [ i ] * scale / norm ) )		1162680	1					
ANR	1163181	Callee	av_clip_int16		1162680	0					
ANR	1163182	Identifier	av_clip_int16		1162680	0					
ANR	1163183	ArgumentList	lrintf ( tab [ i ] * scale / norm )		1162680	1					
ANR	1163184	Argument	lrintf ( tab [ i ] * scale / norm )		1162680	0					
ANR	1163185	CallExpression	lrintf ( tab [ i ] * scale / norm )		1162680	0					
ANR	1163186	Callee	lrintf		1162680	0					
ANR	1163187	Identifier	lrintf		1162680	0					
ANR	1163188	ArgumentList	tab [ i ] * scale / norm		1162680	1					
ANR	1163189	Argument	tab [ i ] * scale / norm		1162680	0					
ANR	1163190	MultiplicativeExpression	tab [ i ] * scale / norm		1162680	0		*			
ANR	1163191	ArrayIndexing	tab [ i ]		1162680	0					
ANR	1163192	Identifier	tab		1162680	0					
ANR	1163193	Identifier	i		1162680	1					
ANR	1163194	MultiplicativeExpression	scale / norm		1162680	1		/			
ANR	1163195	Identifier	scale		1162680	0					
ANR	1163196	Identifier	norm		1162680	1					
ANR	1163197	IfStatement	if ( tap_count % 2 == 0 )		1162680	2					
ANR	1163198	Condition	tap_count % 2 == 0	125:16:2489:2506	1162680	0	True				
ANR	1163199	EqualityExpression	tap_count % 2 == 0		1162680	0		==			
ANR	1163200	MultiplicativeExpression	tap_count % 2		1162680	0		%			
ANR	1163201	Identifier	tap_count		1162680	0					
ANR	1163202	PrimaryExpression	2		1162680	1					
ANR	1163203	PrimaryExpression	0		1162680	1					
ANR	1163204	CompoundStatement		123:36:2320:2320	1162680	1					
ANR	1163205	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1162680	0					
ANR	1163206	ForInit	i = 0 ;	127:21:2533:2538	1162680	0	True				
ANR	1163207	AssignmentExpression	i = 0		1162680	0		=			
ANR	1163208	Identifier	i		1162680	0					
ANR	1163209	PrimaryExpression	0		1162680	1					
ANR	1163210	Condition	i < tap_count	127:28:2540:2552	1162680	1	True				
ANR	1163211	RelationalExpression	i < tap_count		1162680	0		<			
ANR	1163212	Identifier	i		1162680	0					
ANR	1163213	Identifier	tap_count		1162680	1					
ANR	1163214	PostIncDecOperationExpression	i ++	127:43:2555:2557	1162680	2	True				
ANR	1163215	Identifier	i		1162680	0					
ANR	1163216	IncDec	++		1162680	1					
ANR	1163217	ExpressionStatement	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int16_t * ) filter ) [ ph * alloc + i ]	129:20:2581:2678	1162680	3	True				
ANR	1163218	AssignmentExpression	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int16_t * ) filter ) [ ph * alloc + i ]		1162680	0		=			
ANR	1163219	ArrayIndexing	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1162680	0					
ANR	1163220	CastExpression	( int16_t * ) filter		1162680	0					
ANR	1163221	CastTarget	int16_t *		1162680	0					
ANR	1163222	Identifier	filter		1162680	1					
ANR	1163223	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1162680	1		+			
ANR	1163224	MultiplicativeExpression	( phase_count - ph ) * alloc		1162680	0		*			
ANR	1163225	AdditiveExpression	phase_count - ph		1162680	0		-			
ANR	1163226	Identifier	phase_count		1162680	0					
ANR	1163227	Identifier	ph		1162680	1					
ANR	1163228	Identifier	alloc		1162680	1					
ANR	1163229	AdditiveExpression	tap_count - 1 - i		1162680	1		-			
ANR	1163230	Identifier	tap_count		1162680	0					
ANR	1163231	AdditiveExpression	1 - i		1162680	1		-			
ANR	1163232	PrimaryExpression	1		1162680	0					
ANR	1163233	Identifier	i		1162680	1					
ANR	1163234	ArrayIndexing	( ( int16_t * ) filter ) [ ph * alloc + i ]		1162680	1					
ANR	1163235	CastExpression	( int16_t * ) filter		1162680	0					
ANR	1163236	CastTarget	int16_t *		1162680	0					
ANR	1163237	Identifier	filter		1162680	1					
ANR	1163238	AdditiveExpression	ph * alloc + i		1162680	1		+			
ANR	1163239	MultiplicativeExpression	ph * alloc		1162680	0		*			
ANR	1163240	Identifier	ph		1162680	0					
ANR	1163241	Identifier	alloc		1162680	1					
ANR	1163242	Identifier	i		1162680	1					
ANR	1163243	ElseStatement	else		1162680	0					
ANR	1163244	CompoundStatement		131:17:2524:2524	1162680	0					
ANR	1163245	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1162680	0					
ANR	1163246	ForInit	i = 1 ;	135:21:2737:2742	1162680	0	True				
ANR	1163247	AssignmentExpression	i = 1		1162680	0		=			
ANR	1163248	Identifier	i		1162680	0					
ANR	1163249	PrimaryExpression	1		1162680	1					
ANR	1163250	Condition	i <= tap_count	135:28:2744:2757	1162680	1	True				
ANR	1163251	RelationalExpression	i <= tap_count		1162680	0		<=			
ANR	1163252	Identifier	i		1162680	0					
ANR	1163253	Identifier	tap_count		1162680	1					
ANR	1163254	PostIncDecOperationExpression	i ++	135:44:2760:2762	1162680	2	True				
ANR	1163255	Identifier	i		1162680	0					
ANR	1163256	IncDec	++		1162680	1					
ANR	1163257	ExpressionStatement	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clip_int16 ( lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )	137:20:2786:2944	1162680	3	True				
ANR	1163258	AssignmentExpression	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clip_int16 ( lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )		1162680	0		=			
ANR	1163259	ArrayIndexing	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1162680	0					
ANR	1163260	CastExpression	( int16_t * ) filter		1162680	0					
ANR	1163261	CastTarget	int16_t *		1162680	0					
ANR	1163262	Identifier	filter		1162680	1					
ANR	1163263	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1162680	1		+			
ANR	1163264	MultiplicativeExpression	( phase_count - ph ) * alloc		1162680	0		*			
ANR	1163265	AdditiveExpression	phase_count - ph		1162680	0		-			
ANR	1163266	Identifier	phase_count		1162680	0					
ANR	1163267	Identifier	ph		1162680	1					
ANR	1163268	Identifier	alloc		1162680	1					
ANR	1163269	AdditiveExpression	tap_count - i		1162680	1		-			
ANR	1163270	Identifier	tap_count		1162680	0					
ANR	1163271	Identifier	i		1162680	1					
ANR	1163272	CallExpression	av_clip_int16 ( lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )		1162680	1					
ANR	1163273	Callee	av_clip_int16		1162680	0					
ANR	1163274	Identifier	av_clip_int16		1162680	0					
ANR	1163275	ArgumentList	lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1162680	1					
ANR	1163276	Argument	lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1162680	0					
ANR	1163277	CallExpression	lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1162680	0					
ANR	1163278	Callee	lrintf		1162680	0					
ANR	1163279	Identifier	lrintf		1162680	0					
ANR	1163280	ArgumentList	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	1					
ANR	1163281	Argument	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	0					
ANR	1163282	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	0		*			
ANR	1163283	ArrayIndexing	tab [ i ]		1162680	0					
ANR	1163284	Identifier	tab		1162680	0					
ANR	1163285	Identifier	i		1162680	1					
ANR	1163286	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	1		/			
ANR	1163287	Identifier	scale		1162680	0					
ANR	1163288	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1162680	1		-			
ANR	1163289	Identifier	norm		1162680	0					
ANR	1163290	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1162680	1		+			
ANR	1163291	ArrayIndexing	tab [ 0 ]		1162680	0					
ANR	1163292	Identifier	tab		1162680	0					
ANR	1163293	PrimaryExpression	0		1162680	1					
ANR	1163294	ArrayIndexing	tab [ tap_count ]		1162680	1					
ANR	1163295	Identifier	tab		1162680	0					
ANR	1163296	Identifier	tap_count		1162680	1					
ANR	1163297	BreakStatement	break ;	143:12:2974:2979	1162680	3	True				
ANR	1163298	Label	case AV_SAMPLE_FMT_S32P :	145:8:2990:3013	1162680	4	True				
ANR	1163299	Identifier	AV_SAMPLE_FMT_S32P		1162680	0					
ANR	1163300	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1162680	5					
ANR	1163301	ForInit	i = 0 ;	147:16:3032:3035	1162680	0	True				
ANR	1163302	AssignmentExpression	i = 0		1162680	0		=			
ANR	1163303	Identifier	i		1162680	0					
ANR	1163304	PrimaryExpression	0		1162680	1					
ANR	1163305	Condition	i < tap_count	147:20:3036:3046	1162680	1	True				
ANR	1163306	RelationalExpression	i < tap_count		1162680	0		<			
ANR	1163307	Identifier	i		1162680	0					
ANR	1163308	Identifier	tap_count		1162680	1					
ANR	1163309	PostIncDecOperationExpression	i ++	147:32:3048:3050	1162680	2	True				
ANR	1163310	Identifier	i		1162680	0					
ANR	1163311	IncDec	++		1162680	1					
ANR	1163312	ExpressionStatement	( ( int32_t * ) filter ) [ ph * alloc + i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / norm ) )	149:16:3070:3152	1162680	3	True				
ANR	1163313	AssignmentExpression	( ( int32_t * ) filter ) [ ph * alloc + i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / norm ) )		1162680	0		=			
ANR	1163314	ArrayIndexing	( ( int32_t * ) filter ) [ ph * alloc + i ]		1162680	0					
ANR	1163315	CastExpression	( int32_t * ) filter		1162680	0					
ANR	1163316	CastTarget	int32_t *		1162680	0					
ANR	1163317	Identifier	filter		1162680	1					
ANR	1163318	AdditiveExpression	ph * alloc + i		1162680	1		+			
ANR	1163319	MultiplicativeExpression	ph * alloc		1162680	0		*			
ANR	1163320	Identifier	ph		1162680	0					
ANR	1163321	Identifier	alloc		1162680	1					
ANR	1163322	Identifier	i		1162680	1					
ANR	1163323	CallExpression	av_clipl_int32 ( llrint ( tab [ i ] * scale / norm ) )		1162680	1					
ANR	1163324	Callee	av_clipl_int32		1162680	0					
ANR	1163325	Identifier	av_clipl_int32		1162680	0					
ANR	1163326	ArgumentList	llrint ( tab [ i ] * scale / norm )		1162680	1					
ANR	1163327	Argument	llrint ( tab [ i ] * scale / norm )		1162680	0					
ANR	1163328	CallExpression	llrint ( tab [ i ] * scale / norm )		1162680	0					
ANR	1163329	Callee	llrint		1162680	0					
ANR	1163330	Identifier	llrint		1162680	0					
ANR	1163331	ArgumentList	tab [ i ] * scale / norm		1162680	1					
ANR	1163332	Argument	tab [ i ] * scale / norm		1162680	0					
ANR	1163333	MultiplicativeExpression	tab [ i ] * scale / norm		1162680	0		*			
ANR	1163334	ArrayIndexing	tab [ i ]		1162680	0					
ANR	1163335	Identifier	tab		1162680	0					
ANR	1163336	Identifier	i		1162680	1					
ANR	1163337	MultiplicativeExpression	scale / norm		1162680	1		/			
ANR	1163338	Identifier	scale		1162680	0					
ANR	1163339	Identifier	norm		1162680	1					
ANR	1163340	IfStatement	if ( tap_count % 2 == 0 )		1162680	6					
ANR	1163341	Condition	tap_count % 2 == 0	151:16:3171:3188	1162680	0	True				
ANR	1163342	EqualityExpression	tap_count % 2 == 0		1162680	0		==			
ANR	1163343	MultiplicativeExpression	tap_count % 2		1162680	0		%			
ANR	1163344	Identifier	tap_count		1162680	0					
ANR	1163345	PrimaryExpression	2		1162680	1					
ANR	1163346	PrimaryExpression	0		1162680	1					
ANR	1163347	CompoundStatement		149:36:3002:3002	1162680	1					
ANR	1163348	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1162680	0					
ANR	1163349	ForInit	i = 0 ;	153:21:3215:3220	1162680	0	True				
ANR	1163350	AssignmentExpression	i = 0		1162680	0		=			
ANR	1163351	Identifier	i		1162680	0					
ANR	1163352	PrimaryExpression	0		1162680	1					
ANR	1163353	Condition	i < tap_count	153:28:3222:3234	1162680	1	True				
ANR	1163354	RelationalExpression	i < tap_count		1162680	0		<			
ANR	1163355	Identifier	i		1162680	0					
ANR	1163356	Identifier	tap_count		1162680	1					
ANR	1163357	PostIncDecOperationExpression	i ++	153:43:3237:3239	1162680	2	True				
ANR	1163358	Identifier	i		1162680	0					
ANR	1163359	IncDec	++		1162680	1					
ANR	1163360	ExpressionStatement	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int32_t * ) filter ) [ ph * alloc + i ]	155:20:3263:3360	1162680	3	True				
ANR	1163361	AssignmentExpression	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int32_t * ) filter ) [ ph * alloc + i ]		1162680	0		=			
ANR	1163362	ArrayIndexing	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1162680	0					
ANR	1163363	CastExpression	( int32_t * ) filter		1162680	0					
ANR	1163364	CastTarget	int32_t *		1162680	0					
ANR	1163365	Identifier	filter		1162680	1					
ANR	1163366	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1162680	1		+			
ANR	1163367	MultiplicativeExpression	( phase_count - ph ) * alloc		1162680	0		*			
ANR	1163368	AdditiveExpression	phase_count - ph		1162680	0		-			
ANR	1163369	Identifier	phase_count		1162680	0					
ANR	1163370	Identifier	ph		1162680	1					
ANR	1163371	Identifier	alloc		1162680	1					
ANR	1163372	AdditiveExpression	tap_count - 1 - i		1162680	1		-			
ANR	1163373	Identifier	tap_count		1162680	0					
ANR	1163374	AdditiveExpression	1 - i		1162680	1		-			
ANR	1163375	PrimaryExpression	1		1162680	0					
ANR	1163376	Identifier	i		1162680	1					
ANR	1163377	ArrayIndexing	( ( int32_t * ) filter ) [ ph * alloc + i ]		1162680	1					
ANR	1163378	CastExpression	( int32_t * ) filter		1162680	0					
ANR	1163379	CastTarget	int32_t *		1162680	0					
ANR	1163380	Identifier	filter		1162680	1					
ANR	1163381	AdditiveExpression	ph * alloc + i		1162680	1		+			
ANR	1163382	MultiplicativeExpression	ph * alloc		1162680	0		*			
ANR	1163383	Identifier	ph		1162680	0					
ANR	1163384	Identifier	alloc		1162680	1					
ANR	1163385	Identifier	i		1162680	1					
ANR	1163386	ElseStatement	else		1162680	0					
ANR	1163387	CompoundStatement		157:17:3206:3206	1162680	0					
ANR	1163388	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1162680	0					
ANR	1163389	ForInit	i = 1 ;	161:21:3419:3424	1162680	0	True				
ANR	1163390	AssignmentExpression	i = 1		1162680	0		=			
ANR	1163391	Identifier	i		1162680	0					
ANR	1163392	PrimaryExpression	1		1162680	1					
ANR	1163393	Condition	i <= tap_count	161:28:3426:3439	1162680	1	True				
ANR	1163394	RelationalExpression	i <= tap_count		1162680	0		<=			
ANR	1163395	Identifier	i		1162680	0					
ANR	1163396	Identifier	tap_count		1162680	1					
ANR	1163397	PostIncDecOperationExpression	i ++	161:44:3442:3444	1162680	2	True				
ANR	1163398	Identifier	i		1162680	0					
ANR	1163399	IncDec	++		1162680	1					
ANR	1163400	ExpressionStatement	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )	163:20:3468:3627	1162680	3	True				
ANR	1163401	AssignmentExpression	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )		1162680	0		=			
ANR	1163402	ArrayIndexing	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1162680	0					
ANR	1163403	CastExpression	( int32_t * ) filter		1162680	0					
ANR	1163404	CastTarget	int32_t *		1162680	0					
ANR	1163405	Identifier	filter		1162680	1					
ANR	1163406	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1162680	1		+			
ANR	1163407	MultiplicativeExpression	( phase_count - ph ) * alloc		1162680	0		*			
ANR	1163408	AdditiveExpression	phase_count - ph		1162680	0		-			
ANR	1163409	Identifier	phase_count		1162680	0					
ANR	1163410	Identifier	ph		1162680	1					
ANR	1163411	Identifier	alloc		1162680	1					
ANR	1163412	AdditiveExpression	tap_count - i		1162680	1		-			
ANR	1163413	Identifier	tap_count		1162680	0					
ANR	1163414	Identifier	i		1162680	1					
ANR	1163415	CallExpression	av_clipl_int32 ( llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )		1162680	1					
ANR	1163416	Callee	av_clipl_int32		1162680	0					
ANR	1163417	Identifier	av_clipl_int32		1162680	0					
ANR	1163418	ArgumentList	llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1162680	1					
ANR	1163419	Argument	llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1162680	0					
ANR	1163420	CallExpression	llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1162680	0					
ANR	1163421	Callee	llrint		1162680	0					
ANR	1163422	Identifier	llrint		1162680	0					
ANR	1163423	ArgumentList	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	1					
ANR	1163424	Argument	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	0					
ANR	1163425	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	0		*			
ANR	1163426	ArrayIndexing	tab [ i ]		1162680	0					
ANR	1163427	Identifier	tab		1162680	0					
ANR	1163428	Identifier	i		1162680	1					
ANR	1163429	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	1		/			
ANR	1163430	Identifier	scale		1162680	0					
ANR	1163431	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1162680	1		-			
ANR	1163432	Identifier	norm		1162680	0					
ANR	1163433	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1162680	1		+			
ANR	1163434	ArrayIndexing	tab [ 0 ]		1162680	0					
ANR	1163435	Identifier	tab		1162680	0					
ANR	1163436	PrimaryExpression	0		1162680	1					
ANR	1163437	ArrayIndexing	tab [ tap_count ]		1162680	1					
ANR	1163438	Identifier	tab		1162680	0					
ANR	1163439	Identifier	tap_count		1162680	1					
ANR	1163440	BreakStatement	break ;	169:12:3657:3662	1162680	7	True				
ANR	1163441	Label	case AV_SAMPLE_FMT_FLTP :	171:8:3673:3696	1162680	8	True				
ANR	1163442	Identifier	AV_SAMPLE_FMT_FLTP		1162680	0					
ANR	1163443	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1162680	9					
ANR	1163444	ForInit	i = 0 ;	173:16:3715:3718	1162680	0	True				
ANR	1163445	AssignmentExpression	i = 0		1162680	0		=			
ANR	1163446	Identifier	i		1162680	0					
ANR	1163447	PrimaryExpression	0		1162680	1					
ANR	1163448	Condition	i < tap_count	173:20:3719:3729	1162680	1	True				
ANR	1163449	RelationalExpression	i < tap_count		1162680	0		<			
ANR	1163450	Identifier	i		1162680	0					
ANR	1163451	Identifier	tap_count		1162680	1					
ANR	1163452	PostIncDecOperationExpression	i ++	173:32:3731:3733	1162680	2	True				
ANR	1163453	Identifier	i		1162680	0					
ANR	1163454	IncDec	++		1162680	1					
ANR	1163455	ExpressionStatement	( ( float * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm	175:16:3753:3809	1162680	3	True				
ANR	1163456	AssignmentExpression	( ( float * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm		1162680	0		=			
ANR	1163457	ArrayIndexing	( ( float * ) filter ) [ ph * alloc + i ]		1162680	0					
ANR	1163458	CastExpression	( float * ) filter		1162680	0					
ANR	1163459	CastTarget	float *		1162680	0					
ANR	1163460	Identifier	filter		1162680	1					
ANR	1163461	AdditiveExpression	ph * alloc + i		1162680	1		+			
ANR	1163462	MultiplicativeExpression	ph * alloc		1162680	0		*			
ANR	1163463	Identifier	ph		1162680	0					
ANR	1163464	Identifier	alloc		1162680	1					
ANR	1163465	Identifier	i		1162680	1					
ANR	1163466	MultiplicativeExpression	tab [ i ] * scale / norm		1162680	1		*			
ANR	1163467	ArrayIndexing	tab [ i ]		1162680	0					
ANR	1163468	Identifier	tab		1162680	0					
ANR	1163469	Identifier	i		1162680	1					
ANR	1163470	MultiplicativeExpression	scale / norm		1162680	1		/			
ANR	1163471	Identifier	scale		1162680	0					
ANR	1163472	Identifier	norm		1162680	1					
ANR	1163473	IfStatement	if ( tap_count % 2 == 0 )		1162680	10					
ANR	1163474	Condition	tap_count % 2 == 0	177:16:3828:3845	1162680	0	True				
ANR	1163475	EqualityExpression	tap_count % 2 == 0		1162680	0		==			
ANR	1163476	MultiplicativeExpression	tap_count % 2		1162680	0		%			
ANR	1163477	Identifier	tap_count		1162680	0					
ANR	1163478	PrimaryExpression	2		1162680	1					
ANR	1163479	PrimaryExpression	0		1162680	1					
ANR	1163480	CompoundStatement		175:36:3659:3659	1162680	1					
ANR	1163481	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1162680	0					
ANR	1163482	ForInit	i = 0 ;	179:21:3872:3877	1162680	0	True				
ANR	1163483	AssignmentExpression	i = 0		1162680	0		=			
ANR	1163484	Identifier	i		1162680	0					
ANR	1163485	PrimaryExpression	0		1162680	1					
ANR	1163486	Condition	i < tap_count	179:28:3879:3891	1162680	1	True				
ANR	1163487	RelationalExpression	i < tap_count		1162680	0		<			
ANR	1163488	Identifier	i		1162680	0					
ANR	1163489	Identifier	tap_count		1162680	1					
ANR	1163490	PostIncDecOperationExpression	i ++	179:43:3894:3896	1162680	2	True				
ANR	1163491	Identifier	i		1162680	0					
ANR	1163492	IncDec	++		1162680	1					
ANR	1163493	ExpressionStatement	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( float * ) filter ) [ ph * alloc + i ]	181:20:3920:4013	1162680	3	True				
ANR	1163494	AssignmentExpression	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( float * ) filter ) [ ph * alloc + i ]		1162680	0		=			
ANR	1163495	ArrayIndexing	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1162680	0					
ANR	1163496	CastExpression	( float * ) filter		1162680	0					
ANR	1163497	CastTarget	float *		1162680	0					
ANR	1163498	Identifier	filter		1162680	1					
ANR	1163499	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1162680	1		+			
ANR	1163500	MultiplicativeExpression	( phase_count - ph ) * alloc		1162680	0		*			
ANR	1163501	AdditiveExpression	phase_count - ph		1162680	0		-			
ANR	1163502	Identifier	phase_count		1162680	0					
ANR	1163503	Identifier	ph		1162680	1					
ANR	1163504	Identifier	alloc		1162680	1					
ANR	1163505	AdditiveExpression	tap_count - 1 - i		1162680	1		-			
ANR	1163506	Identifier	tap_count		1162680	0					
ANR	1163507	AdditiveExpression	1 - i		1162680	1		-			
ANR	1163508	PrimaryExpression	1		1162680	0					
ANR	1163509	Identifier	i		1162680	1					
ANR	1163510	ArrayIndexing	( ( float * ) filter ) [ ph * alloc + i ]		1162680	1					
ANR	1163511	CastExpression	( float * ) filter		1162680	0					
ANR	1163512	CastTarget	float *		1162680	0					
ANR	1163513	Identifier	filter		1162680	1					
ANR	1163514	AdditiveExpression	ph * alloc + i		1162680	1		+			
ANR	1163515	MultiplicativeExpression	ph * alloc		1162680	0		*			
ANR	1163516	Identifier	ph		1162680	0					
ANR	1163517	Identifier	alloc		1162680	1					
ANR	1163518	Identifier	i		1162680	1					
ANR	1163519	ElseStatement	else		1162680	0					
ANR	1163520	CompoundStatement		183:17:3859:3859	1162680	0					
ANR	1163521	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1162680	0					
ANR	1163522	ForInit	i = 1 ;	187:21:4072:4077	1162680	0	True				
ANR	1163523	AssignmentExpression	i = 1		1162680	0		=			
ANR	1163524	Identifier	i		1162680	0					
ANR	1163525	PrimaryExpression	1		1162680	1					
ANR	1163526	Condition	i <= tap_count	187:28:4079:4092	1162680	1	True				
ANR	1163527	RelationalExpression	i <= tap_count		1162680	0		<=			
ANR	1163528	Identifier	i		1162680	0					
ANR	1163529	Identifier	tap_count		1162680	1					
ANR	1163530	PostIncDecOperationExpression	i ++	187:44:4095:4097	1162680	2	True				
ANR	1163531	Identifier	i		1162680	0					
ANR	1163532	IncDec	++		1162680	1					
ANR	1163533	ExpressionStatement	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )	189:20:4121:4229	1162680	3	True				
ANR	1163534	AssignmentExpression	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	0		=			
ANR	1163535	ArrayIndexing	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1162680	0					
ANR	1163536	CastExpression	( float * ) filter		1162680	0					
ANR	1163537	CastTarget	float *		1162680	0					
ANR	1163538	Identifier	filter		1162680	1					
ANR	1163539	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1162680	1		+			
ANR	1163540	MultiplicativeExpression	( phase_count - ph ) * alloc		1162680	0		*			
ANR	1163541	AdditiveExpression	phase_count - ph		1162680	0		-			
ANR	1163542	Identifier	phase_count		1162680	0					
ANR	1163543	Identifier	ph		1162680	1					
ANR	1163544	Identifier	alloc		1162680	1					
ANR	1163545	AdditiveExpression	tap_count - i		1162680	1		-			
ANR	1163546	Identifier	tap_count		1162680	0					
ANR	1163547	Identifier	i		1162680	1					
ANR	1163548	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	1		*			
ANR	1163549	ArrayIndexing	tab [ i ]		1162680	0					
ANR	1163550	Identifier	tab		1162680	0					
ANR	1163551	Identifier	i		1162680	1					
ANR	1163552	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	1		/			
ANR	1163553	Identifier	scale		1162680	0					
ANR	1163554	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1162680	1		-			
ANR	1163555	Identifier	norm		1162680	0					
ANR	1163556	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1162680	1		+			
ANR	1163557	ArrayIndexing	tab [ 0 ]		1162680	0					
ANR	1163558	Identifier	tab		1162680	0					
ANR	1163559	PrimaryExpression	0		1162680	1					
ANR	1163560	ArrayIndexing	tab [ tap_count ]		1162680	1					
ANR	1163561	Identifier	tab		1162680	0					
ANR	1163562	Identifier	tap_count		1162680	1					
ANR	1163563	BreakStatement	break ;	193:12:4259:4264	1162680	11	True				
ANR	1163564	Label	case AV_SAMPLE_FMT_DBLP :	195:8:4275:4298	1162680	12	True				
ANR	1163565	Identifier	AV_SAMPLE_FMT_DBLP		1162680	0					
ANR	1163566	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1162680	13					
ANR	1163567	ForInit	i = 0 ;	197:16:4317:4320	1162680	0	True				
ANR	1163568	AssignmentExpression	i = 0		1162680	0		=			
ANR	1163569	Identifier	i		1162680	0					
ANR	1163570	PrimaryExpression	0		1162680	1					
ANR	1163571	Condition	i < tap_count	197:20:4321:4331	1162680	1	True				
ANR	1163572	RelationalExpression	i < tap_count		1162680	0		<			
ANR	1163573	Identifier	i		1162680	0					
ANR	1163574	Identifier	tap_count		1162680	1					
ANR	1163575	PostIncDecOperationExpression	i ++	197:32:4333:4335	1162680	2	True				
ANR	1163576	Identifier	i		1162680	0					
ANR	1163577	IncDec	++		1162680	1					
ANR	1163578	ExpressionStatement	( ( double * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm	199:16:4355:4412	1162680	3	True				
ANR	1163579	AssignmentExpression	( ( double * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm		1162680	0		=			
ANR	1163580	ArrayIndexing	( ( double * ) filter ) [ ph * alloc + i ]		1162680	0					
ANR	1163581	CastExpression	( double * ) filter		1162680	0					
ANR	1163582	CastTarget	double *		1162680	0					
ANR	1163583	Identifier	filter		1162680	1					
ANR	1163584	AdditiveExpression	ph * alloc + i		1162680	1		+			
ANR	1163585	MultiplicativeExpression	ph * alloc		1162680	0		*			
ANR	1163586	Identifier	ph		1162680	0					
ANR	1163587	Identifier	alloc		1162680	1					
ANR	1163588	Identifier	i		1162680	1					
ANR	1163589	MultiplicativeExpression	tab [ i ] * scale / norm		1162680	1		*			
ANR	1163590	ArrayIndexing	tab [ i ]		1162680	0					
ANR	1163591	Identifier	tab		1162680	0					
ANR	1163592	Identifier	i		1162680	1					
ANR	1163593	MultiplicativeExpression	scale / norm		1162680	1		/			
ANR	1163594	Identifier	scale		1162680	0					
ANR	1163595	Identifier	norm		1162680	1					
ANR	1163596	IfStatement	if ( tap_count % 2 == 0 )		1162680	14					
ANR	1163597	Condition	tap_count % 2 == 0	201:16:4431:4448	1162680	0	True				
ANR	1163598	EqualityExpression	tap_count % 2 == 0		1162680	0		==			
ANR	1163599	MultiplicativeExpression	tap_count % 2		1162680	0		%			
ANR	1163600	Identifier	tap_count		1162680	0					
ANR	1163601	PrimaryExpression	2		1162680	1					
ANR	1163602	PrimaryExpression	0		1162680	1					
ANR	1163603	CompoundStatement		199:36:4262:4262	1162680	1					
ANR	1163604	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1162680	0					
ANR	1163605	ForInit	i = 0 ;	203:21:4475:4480	1162680	0	True				
ANR	1163606	AssignmentExpression	i = 0		1162680	0		=			
ANR	1163607	Identifier	i		1162680	0					
ANR	1163608	PrimaryExpression	0		1162680	1					
ANR	1163609	Condition	i < tap_count	203:28:4482:4494	1162680	1	True				
ANR	1163610	RelationalExpression	i < tap_count		1162680	0		<			
ANR	1163611	Identifier	i		1162680	0					
ANR	1163612	Identifier	tap_count		1162680	1					
ANR	1163613	PostIncDecOperationExpression	i ++	203:43:4497:4499	1162680	2	True				
ANR	1163614	Identifier	i		1162680	0					
ANR	1163615	IncDec	++		1162680	1					
ANR	1163616	ExpressionStatement	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( double * ) filter ) [ ph * alloc + i ]	205:20:4523:4618	1162680	3	True				
ANR	1163617	AssignmentExpression	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( double * ) filter ) [ ph * alloc + i ]		1162680	0		=			
ANR	1163618	ArrayIndexing	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1162680	0					
ANR	1163619	CastExpression	( double * ) filter		1162680	0					
ANR	1163620	CastTarget	double *		1162680	0					
ANR	1163621	Identifier	filter		1162680	1					
ANR	1163622	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1162680	1		+			
ANR	1163623	MultiplicativeExpression	( phase_count - ph ) * alloc		1162680	0		*			
ANR	1163624	AdditiveExpression	phase_count - ph		1162680	0		-			
ANR	1163625	Identifier	phase_count		1162680	0					
ANR	1163626	Identifier	ph		1162680	1					
ANR	1163627	Identifier	alloc		1162680	1					
ANR	1163628	AdditiveExpression	tap_count - 1 - i		1162680	1		-			
ANR	1163629	Identifier	tap_count		1162680	0					
ANR	1163630	AdditiveExpression	1 - i		1162680	1		-			
ANR	1163631	PrimaryExpression	1		1162680	0					
ANR	1163632	Identifier	i		1162680	1					
ANR	1163633	ArrayIndexing	( ( double * ) filter ) [ ph * alloc + i ]		1162680	1					
ANR	1163634	CastExpression	( double * ) filter		1162680	0					
ANR	1163635	CastTarget	double *		1162680	0					
ANR	1163636	Identifier	filter		1162680	1					
ANR	1163637	AdditiveExpression	ph * alloc + i		1162680	1		+			
ANR	1163638	MultiplicativeExpression	ph * alloc		1162680	0		*			
ANR	1163639	Identifier	ph		1162680	0					
ANR	1163640	Identifier	alloc		1162680	1					
ANR	1163641	Identifier	i		1162680	1					
ANR	1163642	ElseStatement	else		1162680	0					
ANR	1163643	CompoundStatement		207:17:4464:4464	1162680	0					
ANR	1163644	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1162680	0					
ANR	1163645	ForInit	i = 1 ;	211:21:4677:4682	1162680	0	True				
ANR	1163646	AssignmentExpression	i = 1		1162680	0		=			
ANR	1163647	Identifier	i		1162680	0					
ANR	1163648	PrimaryExpression	1		1162680	1					
ANR	1163649	Condition	i <= tap_count	211:28:4684:4697	1162680	1	True				
ANR	1163650	RelationalExpression	i <= tap_count		1162680	0		<=			
ANR	1163651	Identifier	i		1162680	0					
ANR	1163652	Identifier	tap_count		1162680	1					
ANR	1163653	PostIncDecOperationExpression	i ++	211:44:4700:4702	1162680	2	True				
ANR	1163654	Identifier	i		1162680	0					
ANR	1163655	IncDec	++		1162680	1					
ANR	1163656	ExpressionStatement	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )	213:20:4726:4835	1162680	3	True				
ANR	1163657	AssignmentExpression	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	0		=			
ANR	1163658	ArrayIndexing	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1162680	0					
ANR	1163659	CastExpression	( double * ) filter		1162680	0					
ANR	1163660	CastTarget	double *		1162680	0					
ANR	1163661	Identifier	filter		1162680	1					
ANR	1163662	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1162680	1		+			
ANR	1163663	MultiplicativeExpression	( phase_count - ph ) * alloc		1162680	0		*			
ANR	1163664	AdditiveExpression	phase_count - ph		1162680	0		-			
ANR	1163665	Identifier	phase_count		1162680	0					
ANR	1163666	Identifier	ph		1162680	1					
ANR	1163667	Identifier	alloc		1162680	1					
ANR	1163668	AdditiveExpression	tap_count - i		1162680	1		-			
ANR	1163669	Identifier	tap_count		1162680	0					
ANR	1163670	Identifier	i		1162680	1					
ANR	1163671	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	1		*			
ANR	1163672	ArrayIndexing	tab [ i ]		1162680	0					
ANR	1163673	Identifier	tab		1162680	0					
ANR	1163674	Identifier	i		1162680	1					
ANR	1163675	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1162680	1		/			
ANR	1163676	Identifier	scale		1162680	0					
ANR	1163677	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1162680	1		-			
ANR	1163678	Identifier	norm		1162680	0					
ANR	1163679	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1162680	1		+			
ANR	1163680	ArrayIndexing	tab [ 0 ]		1162680	0					
ANR	1163681	Identifier	tab		1162680	0					
ANR	1163682	PrimaryExpression	0		1162680	1					
ANR	1163683	ArrayIndexing	tab [ tap_count ]		1162680	1					
ANR	1163684	Identifier	tab		1162680	0					
ANR	1163685	Identifier	tap_count		1162680	1					
ANR	1163686	BreakStatement	break ;	217:12:4865:4870	1162680	15	True				
ANR	1163687	CompoundStatement		233:8:4830:4873	1162680	10					
ANR	1163688	Statement	define	227:1:4906:4911	1162680	0	True				
ANR	1163689	Statement	LEN	227:8:4913:4915	1162680	1	True				
ANR	1163690	Statement	1024	227:12:4917:4920	1162680	2	True				
ANR	1163691	IdentifierDeclStatement	"int j , k ;"	229:8:4931:4938	1162680	3	True				
ANR	1163692	IdentifierDecl	j		1162680	0					
ANR	1163693	IdentifierDeclType	int		1162680	0					
ANR	1163694	Identifier	j		1162680	1					
ANR	1163695	IdentifierDecl	k		1162680	1					
ANR	1163696	IdentifierDeclType	int		1162680	0					
ANR	1163697	Identifier	k		1162680	1					
ANR	1163698	IdentifierDeclStatement	double sine [ LEN + tap_count ] ;	231:8:4949:4977	1162680	4	True				
ANR	1163699	IdentifierDecl	sine [ LEN + tap_count ]		1162680	0					
ANR	1163700	IdentifierDeclType	double [ LEN + tap_count ]		1162680	0					
ANR	1163701	Identifier	sine		1162680	1					
ANR	1163702	AdditiveExpression	LEN + tap_count		1162680	2		+			
ANR	1163703	Identifier	LEN		1162680	0					
ANR	1163704	Identifier	tap_count		1162680	1					
ANR	1163705	IdentifierDeclStatement	double filtered [ LEN ] ;	233:8:4988:5008	1162680	5	True				
ANR	1163706	IdentifierDecl	filtered [ LEN ]		1162680	0					
ANR	1163707	IdentifierDeclType	double [ LEN ]		1162680	0					
ANR	1163708	Identifier	filtered		1162680	1					
ANR	1163709	Identifier	LEN		1162680	2					
ANR	1163710	IdentifierDeclStatement	"double maxff = - 2 , minff = 2 , maxsf = - 2 , minsf = 2 ;"	235:8:5019:5062	1162680	6	True				
ANR	1163711	IdentifierDecl	maxff = - 2		1162680	0					
ANR	1163712	IdentifierDeclType	double		1162680	0					
ANR	1163713	Identifier	maxff		1162680	1					
ANR	1163714	AssignmentExpression	maxff = - 2		1162680	2		=			
ANR	1163715	Identifier	maxff		1162680	0					
ANR	1163716	UnaryOperationExpression	- 2		1162680	1					
ANR	1163717	UnaryOperator	-		1162680	0					
ANR	1163718	PrimaryExpression	2		1162680	1					
ANR	1163719	IdentifierDecl	minff = 2		1162680	1					
ANR	1163720	IdentifierDeclType	double		1162680	0					
ANR	1163721	Identifier	minff		1162680	1					
ANR	1163722	AssignmentExpression	minff = 2		1162680	2		=			
ANR	1163723	Identifier	minff		1162680	0					
ANR	1163724	PrimaryExpression	2		1162680	1					
ANR	1163725	IdentifierDecl	maxsf = - 2		1162680	2					
ANR	1163726	IdentifierDeclType	double		1162680	0					
ANR	1163727	Identifier	maxsf		1162680	1					
ANR	1163728	AssignmentExpression	maxsf = - 2		1162680	2		=			
ANR	1163729	Identifier	maxsf		1162680	0					
ANR	1163730	UnaryOperationExpression	- 2		1162680	1					
ANR	1163731	UnaryOperator	-		1162680	0					
ANR	1163732	PrimaryExpression	2		1162680	1					
ANR	1163733	IdentifierDecl	minsf = 2		1162680	3					
ANR	1163734	IdentifierDeclType	double		1162680	0					
ANR	1163735	Identifier	minsf		1162680	1					
ANR	1163736	AssignmentExpression	minsf = 2		1162680	2		=			
ANR	1163737	Identifier	minsf		1162680	0					
ANR	1163738	PrimaryExpression	2		1162680	1					
ANR	1163739	ForStatement	for ( i = 0 ; i < LEN ; i ++ )		1162680	7					
ANR	1163740	ForInit	i = 0 ;	237:12:5077:5080	1162680	0	True				
ANR	1163741	AssignmentExpression	i = 0		1162680	0		=			
ANR	1163742	Identifier	i		1162680	0					
ANR	1163743	PrimaryExpression	0		1162680	1					
ANR	1163744	Condition	i < LEN	237:17:5082:5086	1162680	1	True				
ANR	1163745	RelationalExpression	i < LEN		1162680	0		<			
ANR	1163746	Identifier	i		1162680	0					
ANR	1163747	Identifier	LEN		1162680	1					
ANR	1163748	PostIncDecOperationExpression	i ++	237:24:5089:5091	1162680	2	True				
ANR	1163749	Identifier	i		1162680	0					
ANR	1163750	IncDec	++		1162680	1					
ANR	1163751	CompoundStatement		237:12:4919:4942	1162680	3					
ANR	1163752	IdentifierDeclStatement	"double ss = 0 , sf = 0 , ff = 0 ;"	239:12:5108:5131	1162680	0	True				
ANR	1163753	IdentifierDecl	ss = 0		1162680	0					
ANR	1163754	IdentifierDeclType	double		1162680	0					
ANR	1163755	Identifier	ss		1162680	1					
ANR	1163756	AssignmentExpression	ss = 0		1162680	2		=			
ANR	1163757	Identifier	ss		1162680	0					
ANR	1163758	PrimaryExpression	0		1162680	1					
ANR	1163759	IdentifierDecl	sf = 0		1162680	1					
ANR	1163760	IdentifierDeclType	double		1162680	0					
ANR	1163761	Identifier	sf		1162680	1					
ANR	1163762	AssignmentExpression	sf = 0		1162680	2		=			
ANR	1163763	Identifier	sf		1162680	0					
ANR	1163764	PrimaryExpression	0		1162680	1					
ANR	1163765	IdentifierDecl	ff = 0		1162680	2					
ANR	1163766	IdentifierDeclType	double		1162680	0					
ANR	1163767	Identifier	ff		1162680	1					
ANR	1163768	AssignmentExpression	ff = 0		1162680	2		=			
ANR	1163769	Identifier	ff		1162680	0					
ANR	1163770	PrimaryExpression	0		1162680	1					
ANR	1163771	ForStatement	for ( j = 0 ; j < LEN + tap_count ; j ++ )		1162680	1					
ANR	1163772	ForInit	j = 0 ;	241:16:5150:5153	1162680	0	True				
ANR	1163773	AssignmentExpression	j = 0		1162680	0		=			
ANR	1163774	Identifier	j		1162680	0					
ANR	1163775	PrimaryExpression	0		1162680	1					
ANR	1163776	Condition	j < LEN + tap_count	241:21:5155:5169	1162680	1	True				
ANR	1163777	RelationalExpression	j < LEN + tap_count		1162680	0		<			
ANR	1163778	Identifier	j		1162680	0					
ANR	1163779	AdditiveExpression	LEN + tap_count		1162680	1		+			
ANR	1163780	Identifier	LEN		1162680	0					
ANR	1163781	Identifier	tap_count		1162680	1					
ANR	1163782	PostIncDecOperationExpression	j ++	241:38:5172:5174	1162680	2	True				
ANR	1163783	Identifier	j		1162680	0					
ANR	1163784	IncDec	++		1162680	1					
ANR	1163785	ExpressionStatement	sine [ j ] = cos ( i * j * M_PI / LEN )	243:16:5194:5220	1162680	3	True				
ANR	1163786	AssignmentExpression	sine [ j ] = cos ( i * j * M_PI / LEN )		1162680	0		=			
ANR	1163787	ArrayIndexing	sine [ j ]		1162680	0					
ANR	1163788	Identifier	sine		1162680	0					
ANR	1163789	Identifier	j		1162680	1					
ANR	1163790	CallExpression	cos ( i * j * M_PI / LEN )		1162680	1					
ANR	1163791	Callee	cos		1162680	0					
ANR	1163792	Identifier	cos		1162680	0					
ANR	1163793	ArgumentList	i * j * M_PI / LEN		1162680	1					
ANR	1163794	Argument	i * j * M_PI / LEN		1162680	0					
ANR	1163795	MultiplicativeExpression	i * j * M_PI / LEN		1162680	0		*			
ANR	1163796	Identifier	i		1162680	0					
ANR	1163797	MultiplicativeExpression	j * M_PI / LEN		1162680	1		*			
ANR	1163798	Identifier	j		1162680	0					
ANR	1163799	MultiplicativeExpression	M_PI / LEN		1162680	1		/			
ANR	1163800	Identifier	M_PI		1162680	0					
ANR	1163801	Identifier	LEN		1162680	1					
ANR	1163802	ForStatement	for ( j = 0 ; j < LEN ; j ++ )		1162680	2					
ANR	1163803	ForInit	j = 0 ;	245:16:5239:5242	1162680	0	True				
ANR	1163804	AssignmentExpression	j = 0		1162680	0		=			
ANR	1163805	Identifier	j		1162680	0					
ANR	1163806	PrimaryExpression	0		1162680	1					
ANR	1163807	Condition	j < LEN	245:21:5244:5248	1162680	1	True				
ANR	1163808	RelationalExpression	j < LEN		1162680	0		<			
ANR	1163809	Identifier	j		1162680	0					
ANR	1163810	Identifier	LEN		1162680	1					
ANR	1163811	PostIncDecOperationExpression	j ++	245:28:5251:5253	1162680	2	True				
ANR	1163812	Identifier	j		1162680	0					
ANR	1163813	IncDec	++		1162680	1					
ANR	1163814	CompoundStatement		245:16:5085:5097	1162680	3					
ANR	1163815	IdentifierDeclStatement	double sum = 0 ;	247:16:5274:5286	1162680	0	True				
ANR	1163816	IdentifierDecl	sum = 0		1162680	0					
ANR	1163817	IdentifierDeclType	double		1162680	0					
ANR	1163818	Identifier	sum		1162680	1					
ANR	1163819	AssignmentExpression	sum = 0		1162680	2		=			
ANR	1163820	Identifier	sum		1162680	0					
ANR	1163821	PrimaryExpression	0		1162680	1					
ANR	1163822	ExpressionStatement	ph = 0	249:16:5305:5309	1162680	1	True				
ANR	1163823	AssignmentExpression	ph = 0		1162680	0		=			
ANR	1163824	Identifier	ph		1162680	0					
ANR	1163825	PrimaryExpression	0		1162680	1					
ANR	1163826	ForStatement	for ( k = 0 ; k < tap_count ; k ++ )		1162680	2					
ANR	1163827	ForInit	k = 0 ;	251:20:5332:5335	1162680	0	True				
ANR	1163828	AssignmentExpression	k = 0		1162680	0		=			
ANR	1163829	Identifier	k		1162680	0					
ANR	1163830	PrimaryExpression	0		1162680	1					
ANR	1163831	Condition	k < tap_count	251:25:5337:5347	1162680	1	True				
ANR	1163832	RelationalExpression	k < tap_count		1162680	0		<			
ANR	1163833	Identifier	k		1162680	0					
ANR	1163834	Identifier	tap_count		1162680	1					
ANR	1163835	PostIncDecOperationExpression	k ++	251:38:5350:5352	1162680	2	True				
ANR	1163836	Identifier	k		1162680	0					
ANR	1163837	IncDec	++		1162680	1					
ANR	1163838	ExpressionStatement	sum += filter [ ph * tap_count + k ] * sine [ k + j ]	253:20:5376:5421	1162680	3	True				
ANR	1163839	AssignmentExpression	sum += filter [ ph * tap_count + k ] * sine [ k + j ]		1162680	0		+=			
ANR	1163840	Identifier	sum		1162680	0					
ANR	1163841	MultiplicativeExpression	filter [ ph * tap_count + k ] * sine [ k + j ]		1162680	1		*			
ANR	1163842	ArrayIndexing	filter [ ph * tap_count + k ]		1162680	0					
ANR	1163843	Identifier	filter		1162680	0					
ANR	1163844	AdditiveExpression	ph * tap_count + k		1162680	1		+			
ANR	1163845	MultiplicativeExpression	ph * tap_count		1162680	0		*			
ANR	1163846	Identifier	ph		1162680	0					
ANR	1163847	Identifier	tap_count		1162680	1					
ANR	1163848	Identifier	k		1162680	1					
ANR	1163849	ArrayIndexing	sine [ k + j ]		1162680	1					
ANR	1163850	Identifier	sine		1162680	0					
ANR	1163851	AdditiveExpression	k + j		1162680	1		+			
ANR	1163852	Identifier	k		1162680	0					
ANR	1163853	Identifier	j		1162680	1					
ANR	1163854	ExpressionStatement	filtered [ j ] = sum / ( 1 << FILTER_SHIFT )	255:16:5440:5476	1162680	3	True				
ANR	1163855	AssignmentExpression	filtered [ j ] = sum / ( 1 << FILTER_SHIFT )		1162680	0		=			
ANR	1163856	ArrayIndexing	filtered [ j ]		1162680	0					
ANR	1163857	Identifier	filtered		1162680	0					
ANR	1163858	Identifier	j		1162680	1					
ANR	1163859	MultiplicativeExpression	sum / ( 1 << FILTER_SHIFT )		1162680	1		/			
ANR	1163860	Identifier	sum		1162680	0					
ANR	1163861	ShiftExpression	1 << FILTER_SHIFT		1162680	1		<<			
ANR	1163862	PrimaryExpression	1		1162680	0					
ANR	1163863	Identifier	FILTER_SHIFT		1162680	1					
ANR	1163864	ExpressionStatement	ss += sine [ j + center ] * sine [ j + center ]	257:16:5495:5535	1162680	4	True				
ANR	1163865	AssignmentExpression	ss += sine [ j + center ] * sine [ j + center ]		1162680	0		+=			
ANR	1163866	Identifier	ss		1162680	0					
ANR	1163867	MultiplicativeExpression	sine [ j + center ] * sine [ j + center ]		1162680	1		*			
ANR	1163868	ArrayIndexing	sine [ j + center ]		1162680	0					
ANR	1163869	Identifier	sine		1162680	0					
ANR	1163870	AdditiveExpression	j + center		1162680	1		+			
ANR	1163871	Identifier	j		1162680	0					
ANR	1163872	Identifier	center		1162680	1					
ANR	1163873	ArrayIndexing	sine [ j + center ]		1162680	1					
ANR	1163874	Identifier	sine		1162680	0					
ANR	1163875	AdditiveExpression	j + center		1162680	1		+			
ANR	1163876	Identifier	j		1162680	0					
ANR	1163877	Identifier	center		1162680	1					
ANR	1163878	ExpressionStatement	ff += filtered [ j ] * filtered [ j ]	259:16:5554:5584	1162680	5	True				
ANR	1163879	AssignmentExpression	ff += filtered [ j ] * filtered [ j ]		1162680	0		+=			
ANR	1163880	Identifier	ff		1162680	0					
ANR	1163881	MultiplicativeExpression	filtered [ j ] * filtered [ j ]		1162680	1		*			
ANR	1163882	ArrayIndexing	filtered [ j ]		1162680	0					
ANR	1163883	Identifier	filtered		1162680	0					
ANR	1163884	Identifier	j		1162680	1					
ANR	1163885	ArrayIndexing	filtered [ j ]		1162680	1					
ANR	1163886	Identifier	filtered		1162680	0					
ANR	1163887	Identifier	j		1162680	1					
ANR	1163888	ExpressionStatement	sf += sine [ j + center ] * filtered [ j ]	261:16:5603:5638	1162680	6	True				
ANR	1163889	AssignmentExpression	sf += sine [ j + center ] * filtered [ j ]		1162680	0		+=			
ANR	1163890	Identifier	sf		1162680	0					
ANR	1163891	MultiplicativeExpression	sine [ j + center ] * filtered [ j ]		1162680	1		*			
ANR	1163892	ArrayIndexing	sine [ j + center ]		1162680	0					
ANR	1163893	Identifier	sine		1162680	0					
ANR	1163894	AdditiveExpression	j + center		1162680	1		+			
ANR	1163895	Identifier	j		1162680	0					
ANR	1163896	Identifier	center		1162680	1					
ANR	1163897	ArrayIndexing	filtered [ j ]		1162680	1					
ANR	1163898	Identifier	filtered		1162680	0					
ANR	1163899	Identifier	j		1162680	1					
ANR	1163900	ExpressionStatement	ss = sqrt ( 2 * ss / LEN )	265:12:5668:5686	1162680	3	True				
ANR	1163901	AssignmentExpression	ss = sqrt ( 2 * ss / LEN )		1162680	0		=			
ANR	1163902	Identifier	ss		1162680	0					
ANR	1163903	CallExpression	sqrt ( 2 * ss / LEN )		1162680	1					
ANR	1163904	Callee	sqrt		1162680	0					
ANR	1163905	Identifier	sqrt		1162680	0					
ANR	1163906	ArgumentList	2 * ss / LEN		1162680	1					
ANR	1163907	Argument	2 * ss / LEN		1162680	0					
ANR	1163908	MultiplicativeExpression	2 * ss / LEN		1162680	0		*			
ANR	1163909	PrimaryExpression	2		1162680	0					
ANR	1163910	MultiplicativeExpression	ss / LEN		1162680	1		/			
ANR	1163911	Identifier	ss		1162680	0					
ANR	1163912	Identifier	LEN		1162680	1					
ANR	1163913	ExpressionStatement	ff = sqrt ( 2 * ff / LEN )	267:12:5701:5719	1162680	4	True				
ANR	1163914	AssignmentExpression	ff = sqrt ( 2 * ff / LEN )		1162680	0		=			
ANR	1163915	Identifier	ff		1162680	0					
ANR	1163916	CallExpression	sqrt ( 2 * ff / LEN )		1162680	1					
ANR	1163917	Callee	sqrt		1162680	0					
ANR	1163918	Identifier	sqrt		1162680	0					
ANR	1163919	ArgumentList	2 * ff / LEN		1162680	1					
ANR	1163920	Argument	2 * ff / LEN		1162680	0					
ANR	1163921	MultiplicativeExpression	2 * ff / LEN		1162680	0		*			
ANR	1163922	PrimaryExpression	2		1162680	0					
ANR	1163923	MultiplicativeExpression	ff / LEN		1162680	1		/			
ANR	1163924	Identifier	ff		1162680	0					
ANR	1163925	Identifier	LEN		1162680	1					
ANR	1163926	ExpressionStatement	sf = 2 * sf / LEN	269:12:5734:5746	1162680	5	True				
ANR	1163927	AssignmentExpression	sf = 2 * sf / LEN		1162680	0		=			
ANR	1163928	Identifier	sf		1162680	0					
ANR	1163929	MultiplicativeExpression	2 * sf / LEN		1162680	1		*			
ANR	1163930	PrimaryExpression	2		1162680	0					
ANR	1163931	MultiplicativeExpression	sf / LEN		1162680	1		/			
ANR	1163932	Identifier	sf		1162680	0					
ANR	1163933	Identifier	LEN		1162680	1					
ANR	1163934	ExpressionStatement	"maxff = FFMAX ( maxff , ff )"	271:12:5761:5784	1162680	6	True				
ANR	1163935	AssignmentExpression	"maxff = FFMAX ( maxff , ff )"		1162680	0		=			
ANR	1163936	Identifier	maxff		1162680	0					
ANR	1163937	CallExpression	"FFMAX ( maxff , ff )"		1162680	1					
ANR	1163938	Callee	FFMAX		1162680	0					
ANR	1163939	Identifier	FFMAX		1162680	0					
ANR	1163940	ArgumentList	maxff		1162680	1					
ANR	1163941	Argument	maxff		1162680	0					
ANR	1163942	Identifier	maxff		1162680	0					
ANR	1163943	Argument	ff		1162680	1					
ANR	1163944	Identifier	ff		1162680	0					
ANR	1163945	ExpressionStatement	"minff = FFMIN ( minff , ff )"	273:12:5799:5822	1162680	7	True				
ANR	1163946	AssignmentExpression	"minff = FFMIN ( minff , ff )"		1162680	0		=			
ANR	1163947	Identifier	minff		1162680	0					
ANR	1163948	CallExpression	"FFMIN ( minff , ff )"		1162680	1					
ANR	1163949	Callee	FFMIN		1162680	0					
ANR	1163950	Identifier	FFMIN		1162680	0					
ANR	1163951	ArgumentList	minff		1162680	1					
ANR	1163952	Argument	minff		1162680	0					
ANR	1163953	Identifier	minff		1162680	0					
ANR	1163954	Argument	ff		1162680	1					
ANR	1163955	Identifier	ff		1162680	0					
ANR	1163956	ExpressionStatement	"maxsf = FFMAX ( maxsf , sf )"	275:12:5837:5860	1162680	8	True				
ANR	1163957	AssignmentExpression	"maxsf = FFMAX ( maxsf , sf )"		1162680	0		=			
ANR	1163958	Identifier	maxsf		1162680	0					
ANR	1163959	CallExpression	"FFMAX ( maxsf , sf )"		1162680	1					
ANR	1163960	Callee	FFMAX		1162680	0					
ANR	1163961	Identifier	FFMAX		1162680	0					
ANR	1163962	ArgumentList	maxsf		1162680	1					
ANR	1163963	Argument	maxsf		1162680	0					
ANR	1163964	Identifier	maxsf		1162680	0					
ANR	1163965	Argument	sf		1162680	1					
ANR	1163966	Identifier	sf		1162680	0					
ANR	1163967	ExpressionStatement	"minsf = FFMIN ( minsf , sf )"	277:12:5875:5898	1162680	9	True				
ANR	1163968	AssignmentExpression	"minsf = FFMIN ( minsf , sf )"		1162680	0		=			
ANR	1163969	Identifier	minsf		1162680	0					
ANR	1163970	CallExpression	"FFMIN ( minsf , sf )"		1162680	1					
ANR	1163971	Callee	FFMIN		1162680	0					
ANR	1163972	Identifier	FFMIN		1162680	0					
ANR	1163973	ArgumentList	minsf		1162680	1					
ANR	1163974	Argument	minsf		1162680	0					
ANR	1163975	Identifier	minsf		1162680	0					
ANR	1163976	Argument	sf		1162680	1					
ANR	1163977	Identifier	sf		1162680	0					
ANR	1163978	IfStatement	if ( i % 11 == 0 )		1162680	10					
ANR	1163979	Condition	i % 11 == 0	279:15:5916:5922	1162680	0	True				
ANR	1163980	EqualityExpression	i % 11 == 0		1162680	0		==			
ANR	1163981	MultiplicativeExpression	i % 11		1162680	0		%			
ANR	1163982	Identifier	i		1162680	0					
ANR	1163983	PrimaryExpression	11		1162680	1					
ANR	1163984	PrimaryExpression	0		1162680	1					
ANR	1163985	CompoundStatement		277:23:5735:5735	1162680	1					
ANR	1163986	ExpressionStatement	"av_log ( NULL , AV_LOG_ERROR , ""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"" , i , ss , maxff , minff , maxsf , minsf )"	281:16:5943:6055	1162680	0	True				
ANR	1163987	CallExpression	"av_log ( NULL , AV_LOG_ERROR , ""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"" , i , ss , maxff , minff , maxsf , minsf )"		1162680	0					
ANR	1163988	Callee	av_log		1162680	0					
ANR	1163989	Identifier	av_log		1162680	0					
ANR	1163990	ArgumentList	NULL		1162680	1					
ANR	1163991	Argument	NULL		1162680	0					
ANR	1163992	Identifier	NULL		1162680	0					
ANR	1163993	Argument	AV_LOG_ERROR		1162680	1					
ANR	1163994	Identifier	AV_LOG_ERROR		1162680	0					
ANR	1163995	Argument	"""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"""		1162680	2					
ANR	1163996	PrimaryExpression	"""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"""		1162680	0					
ANR	1163997	Argument	i		1162680	3					
ANR	1163998	Identifier	i		1162680	0					
ANR	1163999	Argument	ss		1162680	4					
ANR	1164000	Identifier	ss		1162680	0					
ANR	1164001	Argument	maxff		1162680	5					
ANR	1164002	Identifier	maxff		1162680	0					
ANR	1164003	Argument	minff		1162680	6					
ANR	1164004	Identifier	minff		1162680	0					
ANR	1164005	Argument	maxsf		1162680	7					
ANR	1164006	Identifier	maxsf		1162680	0					
ANR	1164007	Argument	minsf		1162680	8					
ANR	1164008	Identifier	minsf		1162680	0					
ANR	1164009	ExpressionStatement	minff = minsf = 2	283:16:6074:6088	1162680	1	True				
ANR	1164010	AssignmentExpression	minff = minsf = 2		1162680	0		=			
ANR	1164011	Identifier	minff		1162680	0					
ANR	1164012	AssignmentExpression	minsf = 2		1162680	1		=			
ANR	1164013	Identifier	minsf		1162680	0					
ANR	1164014	PrimaryExpression	2		1162680	1					
ANR	1164015	ExpressionStatement	maxff = maxsf = - 2	285:16:6107:6122	1162680	2	True				
ANR	1164016	AssignmentExpression	maxff = maxsf = - 2		1162680	0		=			
ANR	1164017	Identifier	maxff		1162680	0					
ANR	1164018	AssignmentExpression	maxsf = - 2		1162680	1		=			
ANR	1164019	Identifier	maxsf		1162680	0					
ANR	1164020	UnaryOperationExpression	- 2		1162680	1					
ANR	1164021	UnaryOperator	-		1162680	0					
ANR	1164022	PrimaryExpression	2		1162680	1					
ANR	1164023	Label	fail :	297:0:6168:6172	1162680	11	True				
ANR	1164024	Identifier	fail		1162680	0					
ANR	1164025	ExpressionStatement	av_free ( tab )	299:4:6179:6191	1162680	12	True				
ANR	1164026	CallExpression	av_free ( tab )		1162680	0					
ANR	1164027	Callee	av_free		1162680	0					
ANR	1164028	Identifier	av_free		1162680	0					
ANR	1164029	ArgumentList	tab		1162680	1					
ANR	1164030	Argument	tab		1162680	0					
ANR	1164031	Identifier	tab		1162680	0					
ANR	1164032	ExpressionStatement	av_free ( sin_lut )	301:4:6198:6214	1162680	13	True				
ANR	1164033	CallExpression	av_free ( sin_lut )		1162680	0					
ANR	1164034	Callee	av_free		1162680	0					
ANR	1164035	Identifier	av_free		1162680	0					
ANR	1164036	ArgumentList	sin_lut		1162680	1					
ANR	1164037	Argument	sin_lut		1162680	0					
ANR	1164038	Identifier	sin_lut		1162680	0					
ANR	1164039	ReturnStatement	return 0 ;	303:4:6221:6229	1162680	14	True				
ANR	1164040	PrimaryExpression	0		1162680	0					
ANR	1164041	ReturnType	static int		1162680	1					
ANR	1164042	Identifier	build_filter		1162680	2					
ANR	1164043	ParameterList	"ResampleContext * c , void * filter , double factor , int tap_count , int alloc , int phase_count , int scale , int filter_type , double kaiser_beta"		1162680	3					
ANR	1164044	Parameter	ResampleContext * c	1:24:24:41	1162680	0	True				
ANR	1164045	ParameterType	ResampleContext *		1162680	0					
ANR	1164046	Identifier	c		1162680	1					
ANR	1164047	Parameter	void * filter	1:44:44:55	1162680	1	True				
ANR	1164048	ParameterType	void *		1162680	0					
ANR	1164049	Identifier	filter		1162680	1					
ANR	1164050	Parameter	double factor	1:58:58:70	1162680	2	True				
ANR	1164051	ParameterType	double		1162680	0					
ANR	1164052	Identifier	factor		1162680	1					
ANR	1164053	Parameter	int tap_count	1:73:73:85	1162680	3	True				
ANR	1164054	ParameterType	int		1162680	0					
ANR	1164055	Identifier	tap_count		1162680	1					
ANR	1164056	Parameter	int alloc	1:88:88:96	1162680	4	True				
ANR	1164057	ParameterType	int		1162680	0					
ANR	1164058	Identifier	alloc		1162680	1					
ANR	1164059	Parameter	int phase_count	1:99:99:113	1162680	5	True				
ANR	1164060	ParameterType	int		1162680	0					
ANR	1164061	Identifier	phase_count		1162680	1					
ANR	1164062	Parameter	int scale	1:116:116:124	1162680	6	True				
ANR	1164063	ParameterType	int		1162680	0					
ANR	1164064	Identifier	scale		1162680	1					
ANR	1164065	Parameter	int filter_type	3:24:152:166	1162680	7	True				
ANR	1164066	ParameterType	int		1162680	0					
ANR	1164067	Identifier	filter_type		1162680	1					
ANR	1164068	Parameter	double kaiser_beta	3:41:169:186	1162680	8	True				
ANR	1164069	ParameterType	double		1162680	0					
ANR	1164070	Identifier	kaiser_beta		1162680	1					
ANR	1164071	CFGEntryNode	ENTRY		1162680		True				
ANR	1164072	CFGExitNode	EXIT		1162680		True				
ANR	1164073	Symbol	cos		1162680						
ANR	1164074	Symbol	maxff		1162680						
ANR	1164075	Symbol	FFMIN		1162680						
ANR	1164076	Symbol	M_PI		1162680						
ANR	1164077	Symbol	norm		1162680						
ANR	1164078	Symbol	* phase_count		1162680						
ANR	1164079	Symbol	tab		1162680						
ANR	1164080	Symbol	filtered		1162680						
ANR	1164081	Symbol	minsf		1162680						
ANR	1164082	Symbol	sqrt		1162680						
ANR	1164083	Symbol	FILTER_SHIFT		1162680						
ANR	1164084	Symbol	* sin_lut		1162680						
ANR	1164085	Symbol	maxsf		1162680						
ANR	1164086	Symbol	c -> format		1162680						
ANR	1164087	Symbol	lrintf		1162680						
ANR	1164088	Symbol	tap_count		1162680						
ANR	1164089	Symbol	minff		1162680						
ANR	1164090	Symbol	NULL		1162680						
ANR	1164091	Symbol	kaiser_beta		1162680						
ANR	1164092	Symbol	av_clipl_int32		1162680						
ANR	1164093	Symbol	av_clip_int16		1162680						
ANR	1164094	Symbol	sine		1162680						
ANR	1164095	Symbol	alloc		1162680						
ANR	1164096	Symbol	* ph		1162680						
ANR	1164097	Symbol	ff		1162680						
ANR	1164098	Symbol	scale		1162680						
ANR	1164099	Symbol	bessel		1162680						
ANR	1164100	Symbol	sum		1162680						
ANR	1164101	Symbol	llrint		1162680						
ANR	1164102	Symbol	sf		1162680						
ANR	1164103	Symbol	* filtered		1162680						
ANR	1164104	Symbol	filter_type		1162680						
ANR	1164105	Symbol	* alloc		1162680						
ANR	1164106	Symbol	phase_count		1162680						
ANR	1164107	Symbol	sin		1162680						
ANR	1164108	Symbol	factor		1162680						
ANR	1164109	Symbol	ss		1162680						
ANR	1164110	Symbol	* center		1162680						
ANR	1164111	Symbol	c		1162680						
ANR	1164112	Symbol	fabs		1162680						
ANR	1164113	Symbol	d		1162680						
ANR	1164114	Symbol	AV_LOG_ERROR		1162680						
ANR	1164115	Symbol	center		1162680						
ANR	1164116	Symbol	* sine		1162680						
ANR	1164117	Symbol	i		1162680						
ANR	1164118	Symbol	j		1162680						
ANR	1164119	Symbol	k		1162680						
ANR	1164120	Symbol	* c		1162680						
ANR	1164121	Symbol	* filter		1162680						
ANR	1164122	Symbol	filter		1162680						
ANR	1164123	Symbol	sin_lut		1162680						
ANR	1164124	Symbol	s		1162680						
ANR	1164125	Symbol	* i		1162680						
ANR	1164126	Symbol	t		1162680						
ANR	1164127	Symbol	LEN		1162680						
ANR	1164128	Symbol	* j		1162680						
ANR	1164129	Symbol	* k		1162680						
ANR	1164130	Symbol	w		1162680						
ANR	1164131	Symbol	ph		1162680						
ANR	1164132	Symbol	x		1162680						
ANR	1164133	Symbol	* tap_count		1162680						
ANR	1164134	Symbol	y		1162680						
ANR	1164135	Symbol	av_malloc_array		1162680						
ANR	1164136	Symbol	* tab		1162680						
ANR	1164137	Symbol	FFMAX		1162680						
