command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2584432	File	/home/p4ultr4n/workplace/ReVeal/raw_code/do_getfd_0.c								
ANR	2584433	Function	do_getfd	1:0:0:1012							
ANR	2584434	FunctionDef	"do_getfd (Monitor * mon , const QDict * qdict)"		2584433	0					
ANR	2584435	CompoundStatement		3:0:56:1012	2584433	0					
ANR	2584436	IdentifierDeclStatement	"const char * fdname = qdict_get_str ( qdict , ""fdname"" ) ;"	5:4:63:114	2584433	0	True				
ANR	2584437	IdentifierDecl	"* fdname = qdict_get_str ( qdict , ""fdname"" )"		2584433	0					
ANR	2584438	IdentifierDeclType	const char *		2584433	0					
ANR	2584439	Identifier	fdname		2584433	1					
ANR	2584440	AssignmentExpression	"* fdname = qdict_get_str ( qdict , ""fdname"" )"		2584433	2		=			
ANR	2584441	Identifier	fdname		2584433	0					
ANR	2584442	CallExpression	"qdict_get_str ( qdict , ""fdname"" )"		2584433	1					
ANR	2584443	Callee	qdict_get_str		2584433	0					
ANR	2584444	Identifier	qdict_get_str		2584433	0					
ANR	2584445	ArgumentList	qdict		2584433	1					
ANR	2584446	Argument	qdict		2584433	0					
ANR	2584447	Identifier	qdict		2584433	0					
ANR	2584448	Argument	"""fdname"""		2584433	1					
ANR	2584449	PrimaryExpression	"""fdname"""		2584433	0					
ANR	2584450	IdentifierDeclStatement	mon_fd_t * monfd ;	7:4:121:136	2584433	1	True				
ANR	2584451	IdentifierDecl	* monfd		2584433	0					
ANR	2584452	IdentifierDeclType	mon_fd_t *		2584433	0					
ANR	2584453	Identifier	monfd		2584433	1					
ANR	2584454	IdentifierDeclStatement	int fd ;	9:4:143:149	2584433	2	True				
ANR	2584455	IdentifierDecl	fd		2584433	0					
ANR	2584456	IdentifierDeclType	int		2584433	0					
ANR	2584457	Identifier	fd		2584433	1					
ANR	2584458	ExpressionStatement	fd = qemu_chr_get_msgfd ( mon -> chr )	13:4:158:191	2584433	3	True				
ANR	2584459	AssignmentExpression	fd = qemu_chr_get_msgfd ( mon -> chr )		2584433	0		=			
ANR	2584460	Identifier	fd		2584433	0					
ANR	2584461	CallExpression	qemu_chr_get_msgfd ( mon -> chr )		2584433	1					
ANR	2584462	Callee	qemu_chr_get_msgfd		2584433	0					
ANR	2584463	Identifier	qemu_chr_get_msgfd		2584433	0					
ANR	2584464	ArgumentList	mon -> chr		2584433	1					
ANR	2584465	Argument	mon -> chr		2584433	0					
ANR	2584466	PtrMemberAccess	mon -> chr		2584433	0					
ANR	2584467	Identifier	mon		2584433	0					
ANR	2584468	Identifier	chr		2584433	1					
ANR	2584469	IfStatement	if ( fd == - 1 )		2584433	4					
ANR	2584470	Condition	fd == - 1	15:8:202:209	2584433	0	True				
ANR	2584471	EqualityExpression	fd == - 1		2584433	0		==			
ANR	2584472	Identifier	fd		2584433	0					
ANR	2584473	UnaryOperationExpression	- 1		2584433	1					
ANR	2584474	UnaryOperator	-		2584433	0					
ANR	2584475	PrimaryExpression	1		2584433	1					
ANR	2584476	CompoundStatement		13:18:155:155	2584433	1					
ANR	2584477	ExpressionStatement	"monitor_printf ( mon , ""getfd: no file descriptor supplied via SCM_RIGHTS\\n"" )"	17:8:223:297	2584433	0	True				
ANR	2584478	CallExpression	"monitor_printf ( mon , ""getfd: no file descriptor supplied via SCM_RIGHTS\\n"" )"		2584433	0					
ANR	2584479	Callee	monitor_printf		2584433	0					
ANR	2584480	Identifier	monitor_printf		2584433	0					
ANR	2584481	ArgumentList	mon		2584433	1					
ANR	2584482	Argument	mon		2584433	0					
ANR	2584483	Identifier	mon		2584433	0					
ANR	2584484	Argument	"""getfd: no file descriptor supplied via SCM_RIGHTS\\n"""		2584433	1					
ANR	2584485	PrimaryExpression	"""getfd: no file descriptor supplied via SCM_RIGHTS\\n"""		2584433	0					
ANR	2584486	ReturnStatement	return ;	19:8:308:314	2584433	1	True				
ANR	2584487	IfStatement	if ( qemu_isdigit ( fdname [ 0 ] ) )		2584433	5					
ANR	2584488	Condition	qemu_isdigit ( fdname [ 0 ] )	25:8:334:356	2584433	0	True				
ANR	2584489	CallExpression	qemu_isdigit ( fdname [ 0 ] )		2584433	0					
ANR	2584490	Callee	qemu_isdigit		2584433	0					
ANR	2584491	Identifier	qemu_isdigit		2584433	0					
ANR	2584492	ArgumentList	fdname [ 0 ]		2584433	1					
ANR	2584493	Argument	fdname [ 0 ]		2584433	0					
ANR	2584494	ArrayIndexing	fdname [ 0 ]		2584433	0					
ANR	2584495	Identifier	fdname		2584433	0					
ANR	2584496	PrimaryExpression	0		2584433	1					
ANR	2584497	CompoundStatement		23:33:302:302	2584433	1					
ANR	2584498	ExpressionStatement	"monitor_printf ( mon , ""getfd: monitor names may not begin with a number\\n"" )"	27:8:370:443	2584433	0	True				
ANR	2584499	CallExpression	"monitor_printf ( mon , ""getfd: monitor names may not begin with a number\\n"" )"		2584433	0					
ANR	2584500	Callee	monitor_printf		2584433	0					
ANR	2584501	Identifier	monitor_printf		2584433	0					
ANR	2584502	ArgumentList	mon		2584433	1					
ANR	2584503	Argument	mon		2584433	0					
ANR	2584504	Identifier	mon		2584433	0					
ANR	2584505	Argument	"""getfd: monitor names may not begin with a number\\n"""		2584433	1					
ANR	2584506	PrimaryExpression	"""getfd: monitor names may not begin with a number\\n"""		2584433	0					
ANR	2584507	ReturnStatement	return ;	29:8:454:460	2584433	1	True				
ANR	2584508	ExpressionStatement	fd = dup ( fd )	35:4:476:488	2584433	6	True				
ANR	2584509	AssignmentExpression	fd = dup ( fd )		2584433	0		=			
ANR	2584510	Identifier	fd		2584433	0					
ANR	2584511	CallExpression	dup ( fd )		2584433	1					
ANR	2584512	Callee	dup		2584433	0					
ANR	2584513	Identifier	dup		2584433	0					
ANR	2584514	ArgumentList	fd		2584433	1					
ANR	2584515	Argument	fd		2584433	0					
ANR	2584516	Identifier	fd		2584433	0					
ANR	2584517	IfStatement	if ( fd == - 1 )		2584433	7					
ANR	2584518	Condition	fd == - 1	37:8:499:506	2584433	0	True				
ANR	2584519	EqualityExpression	fd == - 1		2584433	0		==			
ANR	2584520	Identifier	fd		2584433	0					
ANR	2584521	UnaryOperationExpression	- 1		2584433	1					
ANR	2584522	UnaryOperator	-		2584433	0					
ANR	2584523	PrimaryExpression	1		2584433	1					
ANR	2584524	CompoundStatement		35:18:452:452	2584433	1					
ANR	2584525	ExpressionStatement	"monitor_printf ( mon , ""Failed to dup() file descriptor: %s\\n"" , strerror ( errno ) )"	39:8:520:621	2584433	0	True				
ANR	2584526	CallExpression	"monitor_printf ( mon , ""Failed to dup() file descriptor: %s\\n"" , strerror ( errno ) )"		2584433	0					
ANR	2584527	Callee	monitor_printf		2584433	0					
ANR	2584528	Identifier	monitor_printf		2584433	0					
ANR	2584529	ArgumentList	mon		2584433	1					
ANR	2584530	Argument	mon		2584433	0					
ANR	2584531	Identifier	mon		2584433	0					
ANR	2584532	Argument	"""Failed to dup() file descriptor: %s\\n"""		2584433	1					
ANR	2584533	PrimaryExpression	"""Failed to dup() file descriptor: %s\\n"""		2584433	0					
ANR	2584534	Argument	strerror ( errno )		2584433	2					
ANR	2584535	CallExpression	strerror ( errno )		2584433	0					
ANR	2584536	Callee	strerror		2584433	0					
ANR	2584537	Identifier	strerror		2584433	0					
ANR	2584538	ArgumentList	errno		2584433	1					
ANR	2584539	Argument	errno		2584433	0					
ANR	2584540	Identifier	errno		2584433	0					
ANR	2584541	ReturnStatement	return ;	43:8:632:638	2584433	1	True				
ANR	2584542	Statement	LIST_FOREACH	49:4:654:665	2584433	8	True				
ANR	2584543	Statement	(	49:16:666:666	2584433	9	True				
ANR	2584544	Statement	monfd	49:17:667:671	2584433	10	True				
ANR	2584545	Statement	","	49:22:672:672	2584433	11	True				
ANR	2584546	Statement	&	49:24:674:674	2584433	12	True				
ANR	2584547	Statement	mon	49:25:675:677	2584433	13	True				
ANR	2584548	Statement	->	49:28:678:679	2584433	14	True				
ANR	2584549	Statement	fds	49:30:680:682	2584433	15	True				
ANR	2584550	Statement	","	49:33:683:683	2584433	16	True				
ANR	2584551	Statement	next	49:35:685:688	2584433	17	True				
ANR	2584552	Statement	)	49:39:689:689	2584433	18	True				
ANR	2584553	CompoundStatement		47:41:634:634	2584433	19					
ANR	2584554	IfStatement	"if ( strcmp ( monfd -> name , fdname ) != 0 )"		2584433	0					
ANR	2584555	Condition	"strcmp ( monfd -> name , fdname ) != 0"	51:12:706:737	2584433	0	True				
ANR	2584556	EqualityExpression	"strcmp ( monfd -> name , fdname ) != 0"		2584433	0		!=			
ANR	2584557	CallExpression	"strcmp ( monfd -> name , fdname )"		2584433	0					
ANR	2584558	Callee	strcmp		2584433	0					
ANR	2584559	Identifier	strcmp		2584433	0					
ANR	2584560	ArgumentList	monfd -> name		2584433	1					
ANR	2584561	Argument	monfd -> name		2584433	0					
ANR	2584562	PtrMemberAccess	monfd -> name		2584433	0					
ANR	2584563	Identifier	monfd		2584433	0					
ANR	2584564	Identifier	name		2584433	1					
ANR	2584565	Argument	fdname		2584433	1					
ANR	2584566	Identifier	fdname		2584433	0					
ANR	2584567	PrimaryExpression	0		2584433	1					
ANR	2584568	CompoundStatement		49:46:683:683	2584433	1					
ANR	2584569	ContinueStatement	continue ;	53:12:755:763	2584433	0	True				
ANR	2584570	ExpressionStatement	close ( monfd -> fd )	59:8:787:803	2584433	1	True				
ANR	2584571	CallExpression	close ( monfd -> fd )		2584433	0					
ANR	2584572	Callee	close		2584433	0					
ANR	2584573	Identifier	close		2584433	0					
ANR	2584574	ArgumentList	monfd -> fd		2584433	1					
ANR	2584575	Argument	monfd -> fd		2584433	0					
ANR	2584576	PtrMemberAccess	monfd -> fd		2584433	0					
ANR	2584577	Identifier	monfd		2584433	0					
ANR	2584578	Identifier	fd		2584433	1					
ANR	2584579	ExpressionStatement	monfd -> fd = fd	61:8:814:828	2584433	2	True				
ANR	2584580	AssignmentExpression	monfd -> fd = fd		2584433	0		=			
ANR	2584581	PtrMemberAccess	monfd -> fd		2584433	0					
ANR	2584582	Identifier	monfd		2584433	0					
ANR	2584583	Identifier	fd		2584433	1					
ANR	2584584	Identifier	fd		2584433	1					
ANR	2584585	ReturnStatement	return ;	63:8:839:845	2584433	3	True				
ANR	2584586	ExpressionStatement	monfd = qemu_mallocz ( sizeof ( mon_fd_t ) )	69:4:861:899	2584433	20	True				
ANR	2584587	AssignmentExpression	monfd = qemu_mallocz ( sizeof ( mon_fd_t ) )		2584433	0		=			
ANR	2584588	Identifier	monfd		2584433	0					
ANR	2584589	CallExpression	qemu_mallocz ( sizeof ( mon_fd_t ) )		2584433	1					
ANR	2584590	Callee	qemu_mallocz		2584433	0					
ANR	2584591	Identifier	qemu_mallocz		2584433	0					
ANR	2584592	ArgumentList	sizeof ( mon_fd_t )		2584433	1					
ANR	2584593	Argument	sizeof ( mon_fd_t )		2584433	0					
ANR	2584594	SizeofExpression	sizeof ( mon_fd_t )		2584433	0					
ANR	2584595	Sizeof	sizeof		2584433	0					
ANR	2584596	SizeofOperand	mon_fd_t		2584433	1					
ANR	2584597	ExpressionStatement	monfd -> name = qemu_strdup ( fdname )	71:4:906:939	2584433	21	True				
ANR	2584598	AssignmentExpression	monfd -> name = qemu_strdup ( fdname )		2584433	0		=			
ANR	2584599	PtrMemberAccess	monfd -> name		2584433	0					
ANR	2584600	Identifier	monfd		2584433	0					
ANR	2584601	Identifier	name		2584433	1					
ANR	2584602	CallExpression	qemu_strdup ( fdname )		2584433	1					
ANR	2584603	Callee	qemu_strdup		2584433	0					
ANR	2584604	Identifier	qemu_strdup		2584433	0					
ANR	2584605	ArgumentList	fdname		2584433	1					
ANR	2584606	Argument	fdname		2584433	0					
ANR	2584607	Identifier	fdname		2584433	0					
ANR	2584608	ExpressionStatement	monfd -> fd = fd	73:4:946:960	2584433	22	True				
ANR	2584609	AssignmentExpression	monfd -> fd = fd		2584433	0		=			
ANR	2584610	PtrMemberAccess	monfd -> fd		2584433	0					
ANR	2584611	Identifier	monfd		2584433	0					
ANR	2584612	Identifier	fd		2584433	1					
ANR	2584613	Identifier	fd		2584433	1					
ANR	2584614	ExpressionStatement	"LIST_INSERT_HEAD ( & mon -> fds , monfd , next )"	77:4:969:1009	2584433	23	True				
ANR	2584615	CallExpression	"LIST_INSERT_HEAD ( & mon -> fds , monfd , next )"		2584433	0					
ANR	2584616	Callee	LIST_INSERT_HEAD		2584433	0					
ANR	2584617	Identifier	LIST_INSERT_HEAD		2584433	0					
ANR	2584618	ArgumentList	& mon -> fds		2584433	1					
ANR	2584619	Argument	& mon -> fds		2584433	0					
ANR	2584620	UnaryOperationExpression	& mon -> fds		2584433	0					
ANR	2584621	UnaryOperator	&		2584433	0					
ANR	2584622	PtrMemberAccess	mon -> fds		2584433	1					
ANR	2584623	Identifier	mon		2584433	0					
ANR	2584624	Identifier	fds		2584433	1					
ANR	2584625	Argument	monfd		2584433	1					
ANR	2584626	Identifier	monfd		2584433	0					
ANR	2584627	Argument	next		2584433	2					
ANR	2584628	Identifier	next		2584433	0					
ANR	2584629	ReturnType	static void		2584433	1					
ANR	2584630	Identifier	do_getfd		2584433	2					
ANR	2584631	ParameterList	"Monitor * mon , const QDict * qdict"		2584433	3					
ANR	2584632	Parameter	Monitor * mon	1:21:21:32	2584433	0	True				
ANR	2584633	ParameterType	Monitor *		2584433	0					
ANR	2584634	Identifier	mon		2584433	1					
ANR	2584635	Parameter	const QDict * qdict	1:35:35:52	2584433	1	True				
ANR	2584636	ParameterType	const QDict *		2584433	0					
ANR	2584637	Identifier	qdict		2584433	1					
ANR	2584638	CFGEntryNode	ENTRY		2584433		True				
ANR	2584639	CFGExitNode	EXIT		2584433		True				
ANR	2584640	CFGErrorNode	ERROR		2584433		True				
ANR	2584641	Symbol	qdict		2584433						
ANR	2584642	Symbol	* monfd		2584433						
ANR	2584643	Symbol	strcmp		2584433						
ANR	2584644	Symbol	next		2584433						
ANR	2584645	Symbol	errno		2584433						
ANR	2584646	Symbol	* fdname		2584433						
ANR	2584647	Symbol	& mon -> fds		2584433						
ANR	2584648	Symbol	fdname		2584433						
ANR	2584649	Symbol	qemu_chr_get_msgfd		2584433						
ANR	2584650	Symbol	mon		2584433						
ANR	2584651	Symbol	mon -> chr		2584433						
ANR	2584652	Symbol	monfd -> fd		2584433						
ANR	2584653	Symbol	qemu_strdup		2584433						
ANR	2584654	Symbol	strerror		2584433						
ANR	2584655	Symbol	monfd -> name		2584433						
ANR	2584656	Symbol	* mon		2584433						
ANR	2584657	Symbol	qdict_get_str		2584433						
ANR	2584658	Symbol	qemu_mallocz		2584433						
ANR	2584659	Symbol	monfd		2584433						
ANR	2584660	Symbol	fd		2584433						
ANR	2584661	Symbol	qemu_isdigit		2584433						
ANR	2584662	Symbol	dup		2584433						
