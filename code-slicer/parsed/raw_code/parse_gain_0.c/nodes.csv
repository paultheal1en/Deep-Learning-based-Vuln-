command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6326774	File	/home/p4ultr4n/workplace/ReVeal/raw_code/parse_gain_0.c								
ANR	6326775	Function	parse_gain	1:0:0:565							
ANR	6326776	FunctionDef	parse_gain (const char * gain)		6326775	0					
ANR	6326777	CompoundStatement		3:0:45:565	6326775	0					
ANR	6326778	IdentifierDeclStatement	char * fraction ;	5:4:52:66	6326775	0	True				
ANR	6326779	IdentifierDecl	* fraction		6326775	0					
ANR	6326780	IdentifierDeclType	char *		6326775	0					
ANR	6326781	Identifier	fraction		6326775	1					
ANR	6326782	IdentifierDeclStatement	int scale = 10000 ;	7:4:73:91	6326775	1	True				
ANR	6326783	IdentifierDecl	scale = 10000		6326775	0					
ANR	6326784	IdentifierDeclType	int		6326775	0					
ANR	6326785	Identifier	scale		6326775	1					
ANR	6326786	AssignmentExpression	scale = 10000		6326775	2		=			
ANR	6326787	Identifier	scale		6326775	0					
ANR	6326788	PrimaryExpression	10000		6326775	1					
ANR	6326789	IdentifierDeclStatement	int32_t mb = 0 ;	9:4:98:112	6326775	2	True				
ANR	6326790	IdentifierDecl	mb = 0		6326775	0					
ANR	6326791	IdentifierDeclType	int32_t		6326775	0					
ANR	6326792	Identifier	mb		6326775	1					
ANR	6326793	AssignmentExpression	mb = 0		6326775	2		=			
ANR	6326794	Identifier	mb		6326775	0					
ANR	6326795	PrimaryExpression	0		6326775	1					
ANR	6326796	IdentifierDeclStatement	int db ;	11:4:119:125	6326775	3	True				
ANR	6326797	IdentifierDecl	db		6326775	0					
ANR	6326798	IdentifierDeclType	int		6326775	0					
ANR	6326799	Identifier	db		6326775	1					
ANR	6326800	IfStatement	if ( ! gain )		6326775	4					
ANR	6326801	Condition	! gain	15:8:138:142	6326775	0	True				
ANR	6326802	UnaryOperationExpression	! gain		6326775	0					
ANR	6326803	UnaryOperator	!		6326775	0					
ANR	6326804	Identifier	gain		6326775	1					
ANR	6326805	ReturnStatement	return INT32_MIN ;	17:8:154:170	6326775	1	True				
ANR	6326806	Identifier	INT32_MIN		6326775	0					
ANR	6326807	ExpressionStatement	"gain += strspn ( gain , "" \\t"" )"	21:4:179:206	6326775	5	True				
ANR	6326808	AssignmentExpression	"gain += strspn ( gain , "" \\t"" )"		6326775	0		+=			
ANR	6326809	Identifier	gain		6326775	0					
ANR	6326810	CallExpression	"strspn ( gain , "" \\t"" )"		6326775	1					
ANR	6326811	Callee	strspn		6326775	0					
ANR	6326812	Identifier	strspn		6326775	0					
ANR	6326813	ArgumentList	gain		6326775	1					
ANR	6326814	Argument	gain		6326775	0					
ANR	6326815	Identifier	gain		6326775	0					
ANR	6326816	Argument	""" \\t"""		6326775	1					
ANR	6326817	PrimaryExpression	""" \\t"""		6326775	0					
ANR	6326818	ExpressionStatement	"db = strtol ( gain , & fraction , 0 )"	25:4:215:246	6326775	6	True				
ANR	6326819	AssignmentExpression	"db = strtol ( gain , & fraction , 0 )"		6326775	0		=			
ANR	6326820	Identifier	db		6326775	0					
ANR	6326821	CallExpression	"strtol ( gain , & fraction , 0 )"		6326775	1					
ANR	6326822	Callee	strtol		6326775	0					
ANR	6326823	Identifier	strtol		6326775	0					
ANR	6326824	ArgumentList	gain		6326775	1					
ANR	6326825	Argument	gain		6326775	0					
ANR	6326826	Identifier	gain		6326775	0					
ANR	6326827	Argument	& fraction		6326775	1					
ANR	6326828	UnaryOperationExpression	& fraction		6326775	0					
ANR	6326829	UnaryOperator	&		6326775	0					
ANR	6326830	Identifier	fraction		6326775	1					
ANR	6326831	Argument	0		6326775	2					
ANR	6326832	PrimaryExpression	0		6326775	0					
ANR	6326833	IfStatement	if ( * fraction ++ == '.' )		6326775	7					
ANR	6326834	Condition	* fraction ++ == '.'	27:8:257:274	6326775	0	True				
ANR	6326835	EqualityExpression	* fraction ++ == '.'		6326775	0		==			
ANR	6326836	UnaryOperationExpression	* fraction ++		6326775	0					
ANR	6326837	UnaryOperator	*		6326775	0					
ANR	6326838	PostIncDecOperationExpression	fraction ++		6326775	1					
ANR	6326839	Identifier	fraction		6326775	0					
ANR	6326840	IncDec	++		6326775	1					
ANR	6326841	PrimaryExpression	'.'		6326775	1					
ANR	6326842	CompoundStatement		25:28:231:231	6326775	1					
ANR	6326843	WhileStatement	while ( av_isdigit ( * fraction ) && scale )		6326775	0					
ANR	6326844	Condition	av_isdigit ( * fraction ) && scale	29:15:295:324	6326775	0	True				
ANR	6326845	AndExpression	av_isdigit ( * fraction ) && scale		6326775	0		&&			
ANR	6326846	CallExpression	av_isdigit ( * fraction )		6326775	0					
ANR	6326847	Callee	av_isdigit		6326775	0					
ANR	6326848	Identifier	av_isdigit		6326775	0					
ANR	6326849	ArgumentList	* fraction		6326775	1					
ANR	6326850	Argument	* fraction		6326775	0					
ANR	6326851	UnaryOperationExpression	* fraction		6326775	0					
ANR	6326852	UnaryOperator	*		6326775	0					
ANR	6326853	Identifier	fraction		6326775	1					
ANR	6326854	Identifier	scale		6326775	1					
ANR	6326855	CompoundStatement		27:47:281:281	6326775	1					
ANR	6326856	ExpressionStatement	mb += scale * ( * fraction - '0' )	31:12:342:373	6326775	0	True				
ANR	6326857	AssignmentExpression	mb += scale * ( * fraction - '0' )		6326775	0		+=			
ANR	6326858	Identifier	mb		6326775	0					
ANR	6326859	MultiplicativeExpression	scale * ( * fraction - '0' )		6326775	1		*			
ANR	6326860	Identifier	scale		6326775	0					
ANR	6326861	AdditiveExpression	* fraction - '0'		6326775	1		-			
ANR	6326862	UnaryOperationExpression	* fraction		6326775	0					
ANR	6326863	UnaryOperator	*		6326775	0					
ANR	6326864	Identifier	fraction		6326775	1					
ANR	6326865	PrimaryExpression	'0'		6326775	1					
ANR	6326866	ExpressionStatement	scale /= 10	33:12:388:399	6326775	1	True				
ANR	6326867	AssignmentExpression	scale /= 10		6326775	0		/=			
ANR	6326868	Identifier	scale		6326775	0					
ANR	6326869	PrimaryExpression	10		6326775	1					
ANR	6326870	ExpressionStatement	fraction ++	35:12:414:424	6326775	2	True				
ANR	6326871	PostIncDecOperationExpression	fraction ++		6326775	0					
ANR	6326872	Identifier	fraction		6326775	0					
ANR	6326873	IncDec	++		6326775	1					
ANR	6326874	IfStatement	if ( abs ( db ) > ( INT32_MAX - mb ) / 100000 )		6326775	8					
ANR	6326875	Condition	abs ( db ) > ( INT32_MAX - mb ) / 100000	43:8:455:489	6326775	0	True				
ANR	6326876	RelationalExpression	abs ( db ) > ( INT32_MAX - mb ) / 100000		6326775	0		>			
ANR	6326877	CallExpression	abs ( db )		6326775	0					
ANR	6326878	Callee	abs		6326775	0					
ANR	6326879	Identifier	abs		6326775	0					
ANR	6326880	ArgumentList	db		6326775	1					
ANR	6326881	Argument	db		6326775	0					
ANR	6326882	Identifier	db		6326775	0					
ANR	6326883	MultiplicativeExpression	( INT32_MAX - mb ) / 100000		6326775	1		/			
ANR	6326884	AdditiveExpression	INT32_MAX - mb		6326775	0		-			
ANR	6326885	Identifier	INT32_MAX		6326775	0					
ANR	6326886	Identifier	mb		6326775	1					
ANR	6326887	PrimaryExpression	100000		6326775	1					
ANR	6326888	ReturnStatement	return INT32_MIN ;	45:8:501:517	6326775	1	True				
ANR	6326889	Identifier	INT32_MIN		6326775	0					
ANR	6326890	ReturnStatement	return db * 100000 + FFSIGN ( db ) * mb ;	49:4:526:562	6326775	9	True				
ANR	6326891	AdditiveExpression	db * 100000 + FFSIGN ( db ) * mb		6326775	0		+			
ANR	6326892	MultiplicativeExpression	db * 100000		6326775	0		*			
ANR	6326893	Identifier	db		6326775	0					
ANR	6326894	PrimaryExpression	100000		6326775	1					
ANR	6326895	MultiplicativeExpression	FFSIGN ( db ) * mb		6326775	1		*			
ANR	6326896	CallExpression	FFSIGN ( db )		6326775	0					
ANR	6326897	Callee	FFSIGN		6326775	0					
ANR	6326898	Identifier	FFSIGN		6326775	0					
ANR	6326899	ArgumentList	db		6326775	1					
ANR	6326900	Argument	db		6326775	0					
ANR	6326901	Identifier	db		6326775	0					
ANR	6326902	Identifier	mb		6326775	1					
ANR	6326903	ReturnType	static int32_t		6326775	1					
ANR	6326904	Identifier	parse_gain		6326775	2					
ANR	6326905	ParameterList	const char * gain		6326775	3					
ANR	6326906	Parameter	const char * gain	1:26:26:41	6326775	0	True				
ANR	6326907	ParameterType	const char *		6326775	0					
ANR	6326908	Identifier	gain		6326775	1					
ANR	6326909	CFGEntryNode	ENTRY		6326775		True				
ANR	6326910	CFGExitNode	EXIT		6326775		True				
ANR	6326911	Symbol	scale		6326775						
ANR	6326912	Symbol	FFSIGN		6326775						
ANR	6326913	Symbol	INT32_MAX		6326775						
ANR	6326914	Symbol	gain		6326775						
ANR	6326915	Symbol	fraction		6326775						
ANR	6326916	Symbol	* fraction ++		6326775						
ANR	6326917	Symbol	* fraction		6326775						
ANR	6326918	Symbol	abs		6326775						
ANR	6326919	Symbol	mb		6326775						
ANR	6326920	Symbol	strspn		6326775						
ANR	6326921	Symbol	strtol		6326775						
ANR	6326922	Symbol	av_isdigit		6326775						
ANR	6326923	Symbol	db		6326775						
ANR	6326924	Symbol	& fraction		6326775						
ANR	6326925	Symbol	INT32_MIN		6326775						
