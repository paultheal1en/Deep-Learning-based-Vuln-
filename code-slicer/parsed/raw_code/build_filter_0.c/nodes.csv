command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1159937	File	/home/p4ultr4n/workplace/ReVeal/raw_code/build_filter_0.c								
ANR	1159938	Function	build_filter	1:0:0:5856							
ANR	1159939	FunctionDef	"build_filter (ResampleContext * c , void * filter , double factor , int tap_count , int alloc , int phase_count , int scale , int filter_type , int kaiser_beta)"		1159938	0					
ANR	1159940	CompoundStatement		3:57:185:5856	1159938	0					
ANR	1159941	IdentifierDeclStatement	"int ph , i ;"	5:4:192:201	1159938	0	True				
ANR	1159942	IdentifierDecl	ph		1159938	0					
ANR	1159943	IdentifierDeclType	int		1159938	0					
ANR	1159944	Identifier	ph		1159938	1					
ANR	1159945	IdentifierDecl	i		1159938	1					
ANR	1159946	IdentifierDeclType	int		1159938	0					
ANR	1159947	Identifier	i		1159938	1					
ANR	1159948	IdentifierDeclStatement	"double x , y , w ;"	7:4:208:222	1159938	1	True				
ANR	1159949	IdentifierDecl	x		1159938	0					
ANR	1159950	IdentifierDeclType	double		1159938	0					
ANR	1159951	Identifier	x		1159938	1					
ANR	1159952	IdentifierDecl	y		1159938	1					
ANR	1159953	IdentifierDeclType	double		1159938	0					
ANR	1159954	Identifier	y		1159938	1					
ANR	1159955	IdentifierDecl	w		1159938	2					
ANR	1159956	IdentifierDeclType	double		1159938	0					
ANR	1159957	Identifier	w		1159938	1					
ANR	1159958	IdentifierDeclStatement	"double * tab = av_malloc_array ( tap_count + 1 , sizeof ( * tab ) ) ;"	9:4:229:286	1159938	2	True				
ANR	1159959	IdentifierDecl	"* tab = av_malloc_array ( tap_count + 1 , sizeof ( * tab ) )"		1159938	0					
ANR	1159960	IdentifierDeclType	double *		1159938	0					
ANR	1159961	Identifier	tab		1159938	1					
ANR	1159962	AssignmentExpression	"* tab = av_malloc_array ( tap_count + 1 , sizeof ( * tab ) )"		1159938	2		=			
ANR	1159963	Identifier	tab		1159938	0					
ANR	1159964	CallExpression	"av_malloc_array ( tap_count + 1 , sizeof ( * tab ) )"		1159938	1					
ANR	1159965	Callee	av_malloc_array		1159938	0					
ANR	1159966	Identifier	av_malloc_array		1159938	0					
ANR	1159967	ArgumentList	tap_count + 1		1159938	1					
ANR	1159968	Argument	tap_count + 1		1159938	0					
ANR	1159969	AdditiveExpression	tap_count + 1		1159938	0		+			
ANR	1159970	Identifier	tap_count		1159938	0					
ANR	1159971	PrimaryExpression	1		1159938	1					
ANR	1159972	Argument	sizeof ( * tab )		1159938	1					
ANR	1159973	SizeofExpression	sizeof ( * tab )		1159938	0					
ANR	1159974	Sizeof	sizeof		1159938	0					
ANR	1159975	UnaryOperationExpression	* tab		1159938	1					
ANR	1159976	UnaryOperator	*		1159938	0					
ANR	1159977	Identifier	tab		1159938	1					
ANR	1159978	IdentifierDeclStatement	const int center = ( tap_count - 1 ) / 2 ;	11:4:293:326	1159938	3	True				
ANR	1159979	IdentifierDecl	center = ( tap_count - 1 ) / 2		1159938	0					
ANR	1159980	IdentifierDeclType	const int		1159938	0					
ANR	1159981	Identifier	center		1159938	1					
ANR	1159982	AssignmentExpression	center = ( tap_count - 1 ) / 2		1159938	2		=			
ANR	1159983	Identifier	center		1159938	0					
ANR	1159984	MultiplicativeExpression	( tap_count - 1 ) / 2		1159938	1		/			
ANR	1159985	AdditiveExpression	tap_count - 1		1159938	0		-			
ANR	1159986	Identifier	tap_count		1159938	0					
ANR	1159987	PrimaryExpression	1		1159938	1					
ANR	1159988	PrimaryExpression	2		1159938	1					
ANR	1159989	IfStatement	if ( ! tab )		1159938	4					
ANR	1159990	Condition	! tab	15:8:339:342	1159938	0	True				
ANR	1159991	UnaryOperationExpression	! tab		1159938	0					
ANR	1159992	UnaryOperator	!		1159938	0					
ANR	1159993	Identifier	tab		1159938	1					
ANR	1159994	ReturnStatement	return AVERROR ( ENOMEM ) ;	17:8:354:376	1159938	1	True				
ANR	1159995	CallExpression	AVERROR ( ENOMEM )		1159938	0					
ANR	1159996	Callee	AVERROR		1159938	0					
ANR	1159997	Identifier	AVERROR		1159938	0					
ANR	1159998	ArgumentList	ENOMEM		1159938	1					
ANR	1159999	Argument	ENOMEM		1159938	0					
ANR	1160000	Identifier	ENOMEM		1159938	0					
ANR	1160001	IfStatement	if ( factor > 1.0 )		1159938	5					
ANR	1160002	Condition	factor > 1.0	23:8:451:462	1159938	0	True				
ANR	1160003	RelationalExpression	factor > 1.0		1159938	0		>			
ANR	1160004	Identifier	factor		1159938	0					
ANR	1160005	PrimaryExpression	1.0		1159938	1					
ANR	1160006	ExpressionStatement	factor = 1.0	25:8:474:486	1159938	1	True				
ANR	1160007	AssignmentExpression	factor = 1.0		1159938	0		=			
ANR	1160008	Identifier	factor		1159938	0					
ANR	1160009	PrimaryExpression	1.0		1159938	1					
ANR	1160010	ExpressionStatement	av_assert0 ( phase_count == 1 || phase_count % 2 == 0 )	29:4:495:547	1159938	6	True				
ANR	1160011	CallExpression	av_assert0 ( phase_count == 1 || phase_count % 2 == 0 )		1159938	0					
ANR	1160012	Callee	av_assert0		1159938	0					
ANR	1160013	Identifier	av_assert0		1159938	0					
ANR	1160014	ArgumentList	phase_count == 1 || phase_count % 2 == 0		1159938	1					
ANR	1160015	Argument	phase_count == 1 || phase_count % 2 == 0		1159938	0					
ANR	1160016	OrExpression	phase_count == 1 || phase_count % 2 == 0		1159938	0		||			
ANR	1160017	EqualityExpression	phase_count == 1		1159938	0		==			
ANR	1160018	Identifier	phase_count		1159938	0					
ANR	1160019	PrimaryExpression	1		1159938	1					
ANR	1160020	EqualityExpression	phase_count % 2 == 0		1159938	1		==			
ANR	1160021	MultiplicativeExpression	phase_count % 2		1159938	0		%			
ANR	1160022	Identifier	phase_count		1159938	0					
ANR	1160023	PrimaryExpression	2		1159938	1					
ANR	1160024	PrimaryExpression	0		1159938	1					
ANR	1160025	ForStatement	for ( ph = 0 ; ph <= phase_count / 2 ; ph ++ )		1159938	7					
ANR	1160026	ForInit	ph = 0 ;	31:8:558:564	1159938	0	True				
ANR	1160027	AssignmentExpression	ph = 0		1159938	0		=			
ANR	1160028	Identifier	ph		1159938	0					
ANR	1160029	PrimaryExpression	0		1159938	1					
ANR	1160030	Condition	ph <= phase_count / 2	31:16:566:586	1159938	1	True				
ANR	1160031	RelationalExpression	ph <= phase_count / 2		1159938	0		<=			
ANR	1160032	Identifier	ph		1159938	0					
ANR	1160033	MultiplicativeExpression	phase_count / 2		1159938	1		/			
ANR	1160034	Identifier	phase_count		1159938	0					
ANR	1160035	PrimaryExpression	2		1159938	1					
ANR	1160036	PostIncDecOperationExpression	ph ++	31:39:589:592	1159938	2	True				
ANR	1160037	Identifier	ph		1159938	0					
ANR	1160038	IncDec	++		1159938	1					
ANR	1160039	CompoundStatement		31:8:420:435	1159938	3					
ANR	1160040	IdentifierDeclStatement	double norm = 0 ;	33:8:606:621	1159938	0	True				
ANR	1160041	IdentifierDecl	norm = 0		1159938	0					
ANR	1160042	IdentifierDeclType	double		1159938	0					
ANR	1160043	Identifier	norm		1159938	1					
ANR	1160044	AssignmentExpression	norm = 0		1159938	2		=			
ANR	1160045	Identifier	norm		1159938	0					
ANR	1160046	PrimaryExpression	0		1159938	1					
ANR	1160047	ForStatement	for ( i = 0 ; i <= tap_count ; i ++ )		1159938	1					
ANR	1160048	ForInit	i = 0 ;	35:12:636:639	1159938	0	True				
ANR	1160049	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160050	Identifier	i		1159938	0					
ANR	1160051	PrimaryExpression	0		1159938	1					
ANR	1160052	Condition	i <= tap_count	35:16:640:651	1159938	1	True				
ANR	1160053	RelationalExpression	i <= tap_count		1159938	0		<=			
ANR	1160054	Identifier	i		1159938	0					
ANR	1160055	Identifier	tap_count		1159938	1					
ANR	1160056	PostIncDecOperationExpression	i ++	35:29:653:655	1159938	2	True				
ANR	1160057	Identifier	i		1159938	0					
ANR	1160058	IncDec	++		1159938	1					
ANR	1160059	CompoundStatement		33:34:472:472	1159938	3					
ANR	1160060	ExpressionStatement	x = M_PI * ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor	37:12:673:742	1159938	0	True				
ANR	1160061	AssignmentExpression	x = M_PI * ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1159938	0		=			
ANR	1160062	Identifier	x		1159938	0					
ANR	1160063	MultiplicativeExpression	M_PI * ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1159938	1		*			
ANR	1160064	Identifier	M_PI		1159938	0					
ANR	1160065	MultiplicativeExpression	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1159938	1		*			
ANR	1160066	AdditiveExpression	( double ) ( i - center ) - ( double ) ph / phase_count		1159938	0		-			
ANR	1160067	CastExpression	( double ) ( i - center )		1159938	0					
ANR	1160068	CastTarget	double		1159938	0					
ANR	1160069	AdditiveExpression	i - center		1159938	1		-			
ANR	1160070	Identifier	i		1159938	0					
ANR	1160071	Identifier	center		1159938	1					
ANR	1160072	MultiplicativeExpression	( double ) ph / phase_count		1159938	1		/			
ANR	1160073	CastExpression	( double ) ph		1159938	0					
ANR	1160074	CastTarget	double		1159938	0					
ANR	1160075	Identifier	ph		1159938	1					
ANR	1160076	Identifier	phase_count		1159938	1					
ANR	1160077	Identifier	factor		1159938	1					
ANR	1160078	IfStatement	if ( x == 0 )		1159938	1					
ANR	1160079	Condition	x == 0	39:16:761:766	1159938	0	True				
ANR	1160080	EqualityExpression	x == 0		1159938	0		==			
ANR	1160081	Identifier	x		1159938	0					
ANR	1160082	PrimaryExpression	0		1159938	1					
ANR	1160083	ExpressionStatement	y = 1.0	39:24:769:776	1159938	1	True				
ANR	1160084	AssignmentExpression	y = 1.0		1159938	0		=			
ANR	1160085	Identifier	y		1159938	0					
ANR	1160086	PrimaryExpression	1.0		1159938	1					
ANR	1160087	ElseStatement	else		1159938	0					
ANR	1160088	ExpressionStatement	y = sin ( x ) / x	41:24:803:817	1159938	0	True				
ANR	1160089	AssignmentExpression	y = sin ( x ) / x		1159938	0		=			
ANR	1160090	Identifier	y		1159938	0					
ANR	1160091	MultiplicativeExpression	sin ( x ) / x		1159938	1		/			
ANR	1160092	CallExpression	sin ( x )		1159938	0					
ANR	1160093	Callee	sin		1159938	0					
ANR	1160094	Identifier	sin		1159938	0					
ANR	1160095	ArgumentList	x		1159938	1					
ANR	1160096	Argument	x		1159938	0					
ANR	1160097	Identifier	x		1159938	0					
ANR	1160098	Identifier	x		1159938	1					
ANR	1160099	SwitchStatement	switch ( filter_type )		1159938	2					
ANR	1160100	Condition	filter_type	43:19:839:849	1159938	0	True				
ANR	1160101	Identifier	filter_type		1159938	0					
ANR	1160102	CompoundStatement		41:31:665:665	1159938	1					
ANR	1160103	Label	case SWR_FILTER_TYPE_CUBIC :	45:12:866:892	1159938	0	True				
ANR	1160104	Identifier	SWR_FILTER_TYPE_CUBIC		1159938	0					
ANR	1160105	CompoundStatement		45:16:726:745	1159938	1					
ANR	1160106	IdentifierDeclStatement	const float d = - 0.5 ;	47:16:912:931	1159938	0	True				
ANR	1160107	IdentifierDecl	d = - 0.5		1159938	0					
ANR	1160108	IdentifierDeclType	const float		1159938	0					
ANR	1160109	Identifier	d		1159938	1					
ANR	1160110	AssignmentExpression	d = - 0.5		1159938	2		=			
ANR	1160111	Identifier	d		1159938	0					
ANR	1160112	UnaryOperationExpression	- 0.5		1159938	1					
ANR	1160113	UnaryOperator	-		1159938	0					
ANR	1160114	PrimaryExpression	0.5		1159938	1					
ANR	1160115	ExpressionStatement	x = fabs ( ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor )	49:16:982:1050	1159938	1	True				
ANR	1160116	AssignmentExpression	x = fabs ( ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor )		1159938	0		=			
ANR	1160117	Identifier	x		1159938	0					
ANR	1160118	CallExpression	fabs ( ( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor )		1159938	1					
ANR	1160119	Callee	fabs		1159938	0					
ANR	1160120	Identifier	fabs		1159938	0					
ANR	1160121	ArgumentList	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1159938	1					
ANR	1160122	Argument	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1159938	0					
ANR	1160123	MultiplicativeExpression	( ( double ) ( i - center ) - ( double ) ph / phase_count ) * factor		1159938	0		*			
ANR	1160124	AdditiveExpression	( double ) ( i - center ) - ( double ) ph / phase_count		1159938	0		-			
ANR	1160125	CastExpression	( double ) ( i - center )		1159938	0					
ANR	1160126	CastTarget	double		1159938	0					
ANR	1160127	AdditiveExpression	i - center		1159938	1		-			
ANR	1160128	Identifier	i		1159938	0					
ANR	1160129	Identifier	center		1159938	1					
ANR	1160130	MultiplicativeExpression	( double ) ph / phase_count		1159938	1		/			
ANR	1160131	CastExpression	( double ) ph		1159938	0					
ANR	1160132	CastTarget	double		1159938	0					
ANR	1160133	Identifier	ph		1159938	1					
ANR	1160134	Identifier	phase_count		1159938	1					
ANR	1160135	Identifier	factor		1159938	1					
ANR	1160136	IfStatement	if ( x < 1.0 )		1159938	2					
ANR	1160137	Condition	x < 1.0	51:19:1072:1076	1159938	0	True				
ANR	1160138	RelationalExpression	x < 1.0		1159938	0		<			
ANR	1160139	Identifier	x		1159938	0					
ANR	1160140	PrimaryExpression	1.0		1159938	1					
ANR	1160141	ExpressionStatement	y = 1 - 3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )	51:26:1079:1132	1159938	1	True				
ANR	1160142	AssignmentExpression	y = 1 - 3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )		1159938	0		=			
ANR	1160143	Identifier	y		1159938	0					
ANR	1160144	AdditiveExpression	1 - 3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )		1159938	1		-			
ANR	1160145	PrimaryExpression	1		1159938	0					
ANR	1160146	AdditiveExpression	3 * x * x + 2 * x * x * x + d * ( - x * x + x * x * x )		1159938	1		+			
ANR	1160147	MultiplicativeExpression	3 * x * x		1159938	0		*			
ANR	1160148	PrimaryExpression	3		1159938	0					
ANR	1160149	MultiplicativeExpression	x * x		1159938	1		*			
ANR	1160150	Identifier	x		1159938	0					
ANR	1160151	Identifier	x		1159938	1					
ANR	1160152	AdditiveExpression	2 * x * x * x + d * ( - x * x + x * x * x )		1159938	1		+			
ANR	1160153	MultiplicativeExpression	2 * x * x * x		1159938	0		*			
ANR	1160154	PrimaryExpression	2		1159938	0					
ANR	1160155	MultiplicativeExpression	x * x * x		1159938	1		*			
ANR	1160156	Identifier	x		1159938	0					
ANR	1160157	MultiplicativeExpression	x * x		1159938	1		*			
ANR	1160158	Identifier	x		1159938	0					
ANR	1160159	Identifier	x		1159938	1					
ANR	1160160	MultiplicativeExpression	d * ( - x * x + x * x * x )		1159938	1		*			
ANR	1160161	Identifier	d		1159938	0					
ANR	1160162	AdditiveExpression	- x * x + x * x * x		1159938	1		+			
ANR	1160163	MultiplicativeExpression	- x * x		1159938	0		*			
ANR	1160164	UnaryOperationExpression	- x		1159938	0					
ANR	1160165	UnaryOperator	-		1159938	0					
ANR	1160166	Identifier	x		1159938	1					
ANR	1160167	Identifier	x		1159938	1					
ANR	1160168	MultiplicativeExpression	x * x * x		1159938	1		*			
ANR	1160169	Identifier	x		1159938	0					
ANR	1160170	MultiplicativeExpression	x * x		1159938	1		*			
ANR	1160171	Identifier	x		1159938	0					
ANR	1160172	Identifier	x		1159938	1					
ANR	1160173	ElseStatement	else		1159938	0					
ANR	1160174	ExpressionStatement	y = d * ( - 4 + 8 * x - 5 * x * x + x * x * x )	53:26:1161:1214	1159938	0	True				
ANR	1160175	AssignmentExpression	y = d * ( - 4 + 8 * x - 5 * x * x + x * x * x )		1159938	0		=			
ANR	1160176	Identifier	y		1159938	0					
ANR	1160177	MultiplicativeExpression	d * ( - 4 + 8 * x - 5 * x * x + x * x * x )		1159938	1		*			
ANR	1160178	Identifier	d		1159938	0					
ANR	1160179	AdditiveExpression	- 4 + 8 * x - 5 * x * x + x * x * x		1159938	1		+			
ANR	1160180	UnaryOperationExpression	- 4		1159938	0					
ANR	1160181	UnaryOperator	-		1159938	0					
ANR	1160182	PrimaryExpression	4		1159938	1					
ANR	1160183	AdditiveExpression	8 * x - 5 * x * x + x * x * x		1159938	1		-			
ANR	1160184	MultiplicativeExpression	8 * x		1159938	0		*			
ANR	1160185	PrimaryExpression	8		1159938	0					
ANR	1160186	Identifier	x		1159938	1					
ANR	1160187	AdditiveExpression	5 * x * x + x * x * x		1159938	1		+			
ANR	1160188	MultiplicativeExpression	5 * x * x		1159938	0		*			
ANR	1160189	PrimaryExpression	5		1159938	0					
ANR	1160190	MultiplicativeExpression	x * x		1159938	1		*			
ANR	1160191	Identifier	x		1159938	0					
ANR	1160192	Identifier	x		1159938	1					
ANR	1160193	MultiplicativeExpression	x * x * x		1159938	1		*			
ANR	1160194	Identifier	x		1159938	0					
ANR	1160195	MultiplicativeExpression	x * x		1159938	1		*			
ANR	1160196	Identifier	x		1159938	0					
ANR	1160197	Identifier	x		1159938	1					
ANR	1160198	BreakStatement	break ;	55:16:1233:1238	1159938	3	True				
ANR	1160199	Label	case SWR_FILTER_TYPE_BLACKMAN_NUTTALL :	57:12:1254:1291	1159938	2	True				
ANR	1160200	Identifier	SWR_FILTER_TYPE_BLACKMAN_NUTTALL		1159938	0					
ANR	1160201	ExpressionStatement	w = 2.0 * x / ( factor * tap_count ) + M_PI	59:16:1310:1347	1159938	3	True				
ANR	1160202	AssignmentExpression	w = 2.0 * x / ( factor * tap_count ) + M_PI		1159938	0		=			
ANR	1160203	Identifier	w		1159938	0					
ANR	1160204	AdditiveExpression	2.0 * x / ( factor * tap_count ) + M_PI		1159938	1		+			
ANR	1160205	MultiplicativeExpression	2.0 * x / ( factor * tap_count )		1159938	0		*			
ANR	1160206	PrimaryExpression	2.0		1159938	0					
ANR	1160207	MultiplicativeExpression	x / ( factor * tap_count )		1159938	1		/			
ANR	1160208	Identifier	x		1159938	0					
ANR	1160209	MultiplicativeExpression	factor * tap_count		1159938	1		*			
ANR	1160210	Identifier	factor		1159938	0					
ANR	1160211	Identifier	tap_count		1159938	1					
ANR	1160212	Identifier	M_PI		1159938	1					
ANR	1160213	ExpressionStatement	y *= 0.3635819 - 0.4891775 * cos ( w ) + 0.1365995 * cos ( 2 * w ) - 0.0106411 * cos ( 3 * w )	61:16:1366:1447	1159938	4	True				
ANR	1160214	AssignmentExpression	y *= 0.3635819 - 0.4891775 * cos ( w ) + 0.1365995 * cos ( 2 * w ) - 0.0106411 * cos ( 3 * w )		1159938	0		*=			
ANR	1160215	Identifier	y		1159938	0					
ANR	1160216	AdditiveExpression	0.3635819 - 0.4891775 * cos ( w ) + 0.1365995 * cos ( 2 * w ) - 0.0106411 * cos ( 3 * w )		1159938	1		-			
ANR	1160217	PrimaryExpression	0.3635819		1159938	0					
ANR	1160218	AdditiveExpression	0.4891775 * cos ( w ) + 0.1365995 * cos ( 2 * w ) - 0.0106411 * cos ( 3 * w )		1159938	1		+			
ANR	1160219	MultiplicativeExpression	0.4891775 * cos ( w )		1159938	0		*			
ANR	1160220	PrimaryExpression	0.4891775		1159938	0					
ANR	1160221	CallExpression	cos ( w )		1159938	1					
ANR	1160222	Callee	cos		1159938	0					
ANR	1160223	Identifier	cos		1159938	0					
ANR	1160224	ArgumentList	w		1159938	1					
ANR	1160225	Argument	w		1159938	0					
ANR	1160226	Identifier	w		1159938	0					
ANR	1160227	AdditiveExpression	0.1365995 * cos ( 2 * w ) - 0.0106411 * cos ( 3 * w )		1159938	1		-			
ANR	1160228	MultiplicativeExpression	0.1365995 * cos ( 2 * w )		1159938	0		*			
ANR	1160229	PrimaryExpression	0.1365995		1159938	0					
ANR	1160230	CallExpression	cos ( 2 * w )		1159938	1					
ANR	1160231	Callee	cos		1159938	0					
ANR	1160232	Identifier	cos		1159938	0					
ANR	1160233	ArgumentList	2 * w		1159938	1					
ANR	1160234	Argument	2 * w		1159938	0					
ANR	1160235	MultiplicativeExpression	2 * w		1159938	0		*			
ANR	1160236	PrimaryExpression	2		1159938	0					
ANR	1160237	Identifier	w		1159938	1					
ANR	1160238	MultiplicativeExpression	0.0106411 * cos ( 3 * w )		1159938	1		*			
ANR	1160239	PrimaryExpression	0.0106411		1159938	0					
ANR	1160240	CallExpression	cos ( 3 * w )		1159938	1					
ANR	1160241	Callee	cos		1159938	0					
ANR	1160242	Identifier	cos		1159938	0					
ANR	1160243	ArgumentList	3 * w		1159938	1					
ANR	1160244	Argument	3 * w		1159938	0					
ANR	1160245	MultiplicativeExpression	3 * w		1159938	0		*			
ANR	1160246	PrimaryExpression	3		1159938	0					
ANR	1160247	Identifier	w		1159938	1					
ANR	1160248	BreakStatement	break ;	63:16:1466:1471	1159938	5	True				
ANR	1160249	Label	case SWR_FILTER_TYPE_KAISER :	65:12:1486:1513	1159938	6	True				
ANR	1160250	Identifier	SWR_FILTER_TYPE_KAISER		1159938	0					
ANR	1160251	ExpressionStatement	w = 2.0 * x / ( factor * tap_count * M_PI )	67:16:1532:1567	1159938	7	True				
ANR	1160252	AssignmentExpression	w = 2.0 * x / ( factor * tap_count * M_PI )		1159938	0		=			
ANR	1160253	Identifier	w		1159938	0					
ANR	1160254	MultiplicativeExpression	2.0 * x / ( factor * tap_count * M_PI )		1159938	1		*			
ANR	1160255	PrimaryExpression	2.0		1159938	0					
ANR	1160256	MultiplicativeExpression	x / ( factor * tap_count * M_PI )		1159938	1		/			
ANR	1160257	Identifier	x		1159938	0					
ANR	1160258	MultiplicativeExpression	factor * tap_count * M_PI		1159938	1		*			
ANR	1160259	Identifier	factor		1159938	0					
ANR	1160260	MultiplicativeExpression	tap_count * M_PI		1159938	1		*			
ANR	1160261	Identifier	tap_count		1159938	0					
ANR	1160262	Identifier	M_PI		1159938	1					
ANR	1160263	ExpressionStatement	"y *= bessel ( kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) ) )"	69:16:1586:1632	1159938	8	True				
ANR	1160264	AssignmentExpression	"y *= bessel ( kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) ) )"		1159938	0		*=			
ANR	1160265	Identifier	y		1159938	0					
ANR	1160266	CallExpression	"bessel ( kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) ) )"		1159938	1					
ANR	1160267	Callee	bessel		1159938	0					
ANR	1160268	Identifier	bessel		1159938	0					
ANR	1160269	ArgumentList	"kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1159938	1					
ANR	1160270	Argument	"kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1159938	0					
ANR	1160271	MultiplicativeExpression	"kaiser_beta * sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1159938	0		*			
ANR	1160272	Identifier	kaiser_beta		1159938	0					
ANR	1160273	CallExpression	"sqrt ( FFMAX ( 1 - w * w , 0 ) )"		1159938	1					
ANR	1160274	Callee	sqrt		1159938	0					
ANR	1160275	Identifier	sqrt		1159938	0					
ANR	1160276	ArgumentList	"FFMAX ( 1 - w * w , 0 )"		1159938	1					
ANR	1160277	Argument	"FFMAX ( 1 - w * w , 0 )"		1159938	0					
ANR	1160278	CallExpression	"FFMAX ( 1 - w * w , 0 )"		1159938	0					
ANR	1160279	Callee	FFMAX		1159938	0					
ANR	1160280	Identifier	FFMAX		1159938	0					
ANR	1160281	ArgumentList	1 - w * w		1159938	1					
ANR	1160282	Argument	1 - w * w		1159938	0					
ANR	1160283	AdditiveExpression	1 - w * w		1159938	0		-			
ANR	1160284	PrimaryExpression	1		1159938	0					
ANR	1160285	MultiplicativeExpression	w * w		1159938	1		*			
ANR	1160286	Identifier	w		1159938	0					
ANR	1160287	Identifier	w		1159938	1					
ANR	1160288	Argument	0		1159938	1					
ANR	1160289	PrimaryExpression	0		1159938	0					
ANR	1160290	BreakStatement	break ;	71:16:1651:1656	1159938	9	True				
ANR	1160291	Label	default :	73:12:1671:1678	1159938	10	True				
ANR	1160292	Identifier	default		1159938	0					
ANR	1160293	ExpressionStatement	av_assert0 ( 0 )	75:16:1697:1710	1159938	11	True				
ANR	1160294	CallExpression	av_assert0 ( 0 )		1159938	0					
ANR	1160295	Callee	av_assert0		1159938	0					
ANR	1160296	Identifier	av_assert0		1159938	0					
ANR	1160297	ArgumentList	0		1159938	1					
ANR	1160298	Argument	0		1159938	0					
ANR	1160299	PrimaryExpression	0		1159938	0					
ANR	1160300	ExpressionStatement	tab [ i ] = y	81:12:1742:1752	1159938	3	True				
ANR	1160301	AssignmentExpression	tab [ i ] = y		1159938	0		=			
ANR	1160302	ArrayIndexing	tab [ i ]		1159938	0					
ANR	1160303	Identifier	tab		1159938	0					
ANR	1160304	Identifier	i		1159938	1					
ANR	1160305	Identifier	y		1159938	1					
ANR	1160306	IfStatement	if ( i < tap_count )		1159938	4					
ANR	1160307	Condition	i < tap_count	83:16:1771:1783	1159938	0	True				
ANR	1160308	RelationalExpression	i < tap_count		1159938	0		<			
ANR	1160309	Identifier	i		1159938	0					
ANR	1160310	Identifier	tap_count		1159938	1					
ANR	1160311	ExpressionStatement	norm += y	85:16:1803:1812	1159938	1	True				
ANR	1160312	AssignmentExpression	norm += y		1159938	0		+=			
ANR	1160313	Identifier	norm		1159938	0					
ANR	1160314	Identifier	y		1159938	1					
ANR	1160315	SwitchStatement	switch ( c -> format )		1159938	2					
ANR	1160316	Condition	c -> format	93:15:1910:1918	1159938	0	True				
ANR	1160317	PtrMemberAccess	c -> format		1159938	0					
ANR	1160318	Identifier	c		1159938	0					
ANR	1160319	Identifier	format		1159938	1					
ANR	1160320	CompoundStatement		91:25:1734:1734	1159938	1					
ANR	1160321	Label	case AV_SAMPLE_FMT_S16P :	95:8:1931:1954	1159938	0	True				
ANR	1160322	Identifier	AV_SAMPLE_FMT_S16P		1159938	0					
ANR	1160323	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1159938	1					
ANR	1160324	ForInit	i = 0 ;	97:16:1973:1976	1159938	0	True				
ANR	1160325	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160326	Identifier	i		1159938	0					
ANR	1160327	PrimaryExpression	0		1159938	1					
ANR	1160328	Condition	i < tap_count	97:20:1977:1987	1159938	1	True				
ANR	1160329	RelationalExpression	i < tap_count		1159938	0		<			
ANR	1160330	Identifier	i		1159938	0					
ANR	1160331	Identifier	tap_count		1159938	1					
ANR	1160332	PostIncDecOperationExpression	i ++	97:32:1989:1991	1159938	2	True				
ANR	1160333	Identifier	i		1159938	0					
ANR	1160334	IncDec	++		1159938	1					
ANR	1160335	ExpressionStatement	"( ( int16_t * ) filter ) [ ph * alloc + i ] = av_clip ( lrintf ( tab [ i ] * scale / norm ) , INT16_MIN , INT16_MAX )"	99:16:2011:2108	1159938	3	True				
ANR	1160336	AssignmentExpression	"( ( int16_t * ) filter ) [ ph * alloc + i ] = av_clip ( lrintf ( tab [ i ] * scale / norm ) , INT16_MIN , INT16_MAX )"		1159938	0		=			
ANR	1160337	ArrayIndexing	( ( int16_t * ) filter ) [ ph * alloc + i ]		1159938	0					
ANR	1160338	CastExpression	( int16_t * ) filter		1159938	0					
ANR	1160339	CastTarget	int16_t *		1159938	0					
ANR	1160340	Identifier	filter		1159938	1					
ANR	1160341	AdditiveExpression	ph * alloc + i		1159938	1		+			
ANR	1160342	MultiplicativeExpression	ph * alloc		1159938	0		*			
ANR	1160343	Identifier	ph		1159938	0					
ANR	1160344	Identifier	alloc		1159938	1					
ANR	1160345	Identifier	i		1159938	1					
ANR	1160346	CallExpression	"av_clip ( lrintf ( tab [ i ] * scale / norm ) , INT16_MIN , INT16_MAX )"		1159938	1					
ANR	1160347	Callee	av_clip		1159938	0					
ANR	1160348	Identifier	av_clip		1159938	0					
ANR	1160349	ArgumentList	lrintf ( tab [ i ] * scale / norm )		1159938	1					
ANR	1160350	Argument	lrintf ( tab [ i ] * scale / norm )		1159938	0					
ANR	1160351	CallExpression	lrintf ( tab [ i ] * scale / norm )		1159938	0					
ANR	1160352	Callee	lrintf		1159938	0					
ANR	1160353	Identifier	lrintf		1159938	0					
ANR	1160354	ArgumentList	tab [ i ] * scale / norm		1159938	1					
ANR	1160355	Argument	tab [ i ] * scale / norm		1159938	0					
ANR	1160356	MultiplicativeExpression	tab [ i ] * scale / norm		1159938	0		*			
ANR	1160357	ArrayIndexing	tab [ i ]		1159938	0					
ANR	1160358	Identifier	tab		1159938	0					
ANR	1160359	Identifier	i		1159938	1					
ANR	1160360	MultiplicativeExpression	scale / norm		1159938	1		/			
ANR	1160361	Identifier	scale		1159938	0					
ANR	1160362	Identifier	norm		1159938	1					
ANR	1160363	Argument	INT16_MIN		1159938	1					
ANR	1160364	Identifier	INT16_MIN		1159938	0					
ANR	1160365	Argument	INT16_MAX		1159938	2					
ANR	1160366	Identifier	INT16_MAX		1159938	0					
ANR	1160367	IfStatement	if ( tap_count % 2 == 0 )		1159938	2					
ANR	1160368	Condition	tap_count % 2 == 0	101:16:2127:2144	1159938	0	True				
ANR	1160369	EqualityExpression	tap_count % 2 == 0		1159938	0		==			
ANR	1160370	MultiplicativeExpression	tap_count % 2		1159938	0		%			
ANR	1160371	Identifier	tap_count		1159938	0					
ANR	1160372	PrimaryExpression	2		1159938	1					
ANR	1160373	PrimaryExpression	0		1159938	1					
ANR	1160374	CompoundStatement		99:36:1961:1961	1159938	1					
ANR	1160375	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1159938	0					
ANR	1160376	ForInit	i = 0 ;	103:21:2171:2176	1159938	0	True				
ANR	1160377	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160378	Identifier	i		1159938	0					
ANR	1160379	PrimaryExpression	0		1159938	1					
ANR	1160380	Condition	i < tap_count	103:28:2178:2190	1159938	1	True				
ANR	1160381	RelationalExpression	i < tap_count		1159938	0		<			
ANR	1160382	Identifier	i		1159938	0					
ANR	1160383	Identifier	tap_count		1159938	1					
ANR	1160384	PostIncDecOperationExpression	i ++	103:43:2193:2195	1159938	2	True				
ANR	1160385	Identifier	i		1159938	0					
ANR	1160386	IncDec	++		1159938	1					
ANR	1160387	ExpressionStatement	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int16_t * ) filter ) [ ph * alloc + i ]	105:20:2219:2316	1159938	3	True				
ANR	1160388	AssignmentExpression	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int16_t * ) filter ) [ ph * alloc + i ]		1159938	0		=			
ANR	1160389	ArrayIndexing	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1159938	0					
ANR	1160390	CastExpression	( int16_t * ) filter		1159938	0					
ANR	1160391	CastTarget	int16_t *		1159938	0					
ANR	1160392	Identifier	filter		1159938	1					
ANR	1160393	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1159938	1		+			
ANR	1160394	MultiplicativeExpression	( phase_count - ph ) * alloc		1159938	0		*			
ANR	1160395	AdditiveExpression	phase_count - ph		1159938	0		-			
ANR	1160396	Identifier	phase_count		1159938	0					
ANR	1160397	Identifier	ph		1159938	1					
ANR	1160398	Identifier	alloc		1159938	1					
ANR	1160399	AdditiveExpression	tap_count - 1 - i		1159938	1		-			
ANR	1160400	Identifier	tap_count		1159938	0					
ANR	1160401	AdditiveExpression	1 - i		1159938	1		-			
ANR	1160402	PrimaryExpression	1		1159938	0					
ANR	1160403	Identifier	i		1159938	1					
ANR	1160404	ArrayIndexing	( ( int16_t * ) filter ) [ ph * alloc + i ]		1159938	1					
ANR	1160405	CastExpression	( int16_t * ) filter		1159938	0					
ANR	1160406	CastTarget	int16_t *		1159938	0					
ANR	1160407	Identifier	filter		1159938	1					
ANR	1160408	AdditiveExpression	ph * alloc + i		1159938	1		+			
ANR	1160409	MultiplicativeExpression	ph * alloc		1159938	0		*			
ANR	1160410	Identifier	ph		1159938	0					
ANR	1160411	Identifier	alloc		1159938	1					
ANR	1160412	Identifier	i		1159938	1					
ANR	1160413	ElseStatement	else		1159938	0					
ANR	1160414	CompoundStatement		107:17:2165:2165	1159938	0					
ANR	1160415	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1159938	0					
ANR	1160416	ForInit	i = 1 ;	111:21:2375:2380	1159938	0	True				
ANR	1160417	AssignmentExpression	i = 1		1159938	0		=			
ANR	1160418	Identifier	i		1159938	0					
ANR	1160419	PrimaryExpression	1		1159938	1					
ANR	1160420	Condition	i <= tap_count	111:28:2382:2395	1159938	1	True				
ANR	1160421	RelationalExpression	i <= tap_count		1159938	0		<=			
ANR	1160422	Identifier	i		1159938	0					
ANR	1160423	Identifier	tap_count		1159938	1					
ANR	1160424	PostIncDecOperationExpression	i ++	111:44:2398:2400	1159938	2	True				
ANR	1160425	Identifier	i		1159938	0					
ANR	1160426	IncDec	++		1159938	1					
ANR	1160427	ExpressionStatement	"( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clip ( lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) , INT16_MIN , INT16_MAX )"	113:20:2424:2598	1159938	3	True				
ANR	1160428	AssignmentExpression	"( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clip ( lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) , INT16_MIN , INT16_MAX )"		1159938	0		=			
ANR	1160429	ArrayIndexing	( ( int16_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1159938	0					
ANR	1160430	CastExpression	( int16_t * ) filter		1159938	0					
ANR	1160431	CastTarget	int16_t *		1159938	0					
ANR	1160432	Identifier	filter		1159938	1					
ANR	1160433	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1159938	1		+			
ANR	1160434	MultiplicativeExpression	( phase_count - ph ) * alloc		1159938	0		*			
ANR	1160435	AdditiveExpression	phase_count - ph		1159938	0		-			
ANR	1160436	Identifier	phase_count		1159938	0					
ANR	1160437	Identifier	ph		1159938	1					
ANR	1160438	Identifier	alloc		1159938	1					
ANR	1160439	AdditiveExpression	tap_count - i		1159938	1		-			
ANR	1160440	Identifier	tap_count		1159938	0					
ANR	1160441	Identifier	i		1159938	1					
ANR	1160442	CallExpression	"av_clip ( lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) , INT16_MIN , INT16_MAX )"		1159938	1					
ANR	1160443	Callee	av_clip		1159938	0					
ANR	1160444	Identifier	av_clip		1159938	0					
ANR	1160445	ArgumentList	lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1159938	1					
ANR	1160446	Argument	lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1159938	0					
ANR	1160447	CallExpression	lrintf ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1159938	0					
ANR	1160448	Callee	lrintf		1159938	0					
ANR	1160449	Identifier	lrintf		1159938	0					
ANR	1160450	ArgumentList	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	1					
ANR	1160451	Argument	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	0					
ANR	1160452	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	0		*			
ANR	1160453	ArrayIndexing	tab [ i ]		1159938	0					
ANR	1160454	Identifier	tab		1159938	0					
ANR	1160455	Identifier	i		1159938	1					
ANR	1160456	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	1		/			
ANR	1160457	Identifier	scale		1159938	0					
ANR	1160458	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1159938	1		-			
ANR	1160459	Identifier	norm		1159938	0					
ANR	1160460	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1159938	1		+			
ANR	1160461	ArrayIndexing	tab [ 0 ]		1159938	0					
ANR	1160462	Identifier	tab		1159938	0					
ANR	1160463	PrimaryExpression	0		1159938	1					
ANR	1160464	ArrayIndexing	tab [ tap_count ]		1159938	1					
ANR	1160465	Identifier	tab		1159938	0					
ANR	1160466	Identifier	tap_count		1159938	1					
ANR	1160467	Argument	INT16_MIN		1159938	1					
ANR	1160468	Identifier	INT16_MIN		1159938	0					
ANR	1160469	Argument	INT16_MAX		1159938	2					
ANR	1160470	Identifier	INT16_MAX		1159938	0					
ANR	1160471	BreakStatement	break ;	119:12:2628:2633	1159938	3	True				
ANR	1160472	Label	case AV_SAMPLE_FMT_S32P :	121:8:2644:2667	1159938	4	True				
ANR	1160473	Identifier	AV_SAMPLE_FMT_S32P		1159938	0					
ANR	1160474	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1159938	5					
ANR	1160475	ForInit	i = 0 ;	123:16:2686:2689	1159938	0	True				
ANR	1160476	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160477	Identifier	i		1159938	0					
ANR	1160478	PrimaryExpression	0		1159938	1					
ANR	1160479	Condition	i < tap_count	123:20:2690:2700	1159938	1	True				
ANR	1160480	RelationalExpression	i < tap_count		1159938	0		<			
ANR	1160481	Identifier	i		1159938	0					
ANR	1160482	Identifier	tap_count		1159938	1					
ANR	1160483	PostIncDecOperationExpression	i ++	123:32:2702:2704	1159938	2	True				
ANR	1160484	Identifier	i		1159938	0					
ANR	1160485	IncDec	++		1159938	1					
ANR	1160486	ExpressionStatement	( ( int32_t * ) filter ) [ ph * alloc + i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / norm ) )	125:16:2724:2806	1159938	3	True				
ANR	1160487	AssignmentExpression	( ( int32_t * ) filter ) [ ph * alloc + i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / norm ) )		1159938	0		=			
ANR	1160488	ArrayIndexing	( ( int32_t * ) filter ) [ ph * alloc + i ]		1159938	0					
ANR	1160489	CastExpression	( int32_t * ) filter		1159938	0					
ANR	1160490	CastTarget	int32_t *		1159938	0					
ANR	1160491	Identifier	filter		1159938	1					
ANR	1160492	AdditiveExpression	ph * alloc + i		1159938	1		+			
ANR	1160493	MultiplicativeExpression	ph * alloc		1159938	0		*			
ANR	1160494	Identifier	ph		1159938	0					
ANR	1160495	Identifier	alloc		1159938	1					
ANR	1160496	Identifier	i		1159938	1					
ANR	1160497	CallExpression	av_clipl_int32 ( llrint ( tab [ i ] * scale / norm ) )		1159938	1					
ANR	1160498	Callee	av_clipl_int32		1159938	0					
ANR	1160499	Identifier	av_clipl_int32		1159938	0					
ANR	1160500	ArgumentList	llrint ( tab [ i ] * scale / norm )		1159938	1					
ANR	1160501	Argument	llrint ( tab [ i ] * scale / norm )		1159938	0					
ANR	1160502	CallExpression	llrint ( tab [ i ] * scale / norm )		1159938	0					
ANR	1160503	Callee	llrint		1159938	0					
ANR	1160504	Identifier	llrint		1159938	0					
ANR	1160505	ArgumentList	tab [ i ] * scale / norm		1159938	1					
ANR	1160506	Argument	tab [ i ] * scale / norm		1159938	0					
ANR	1160507	MultiplicativeExpression	tab [ i ] * scale / norm		1159938	0		*			
ANR	1160508	ArrayIndexing	tab [ i ]		1159938	0					
ANR	1160509	Identifier	tab		1159938	0					
ANR	1160510	Identifier	i		1159938	1					
ANR	1160511	MultiplicativeExpression	scale / norm		1159938	1		/			
ANR	1160512	Identifier	scale		1159938	0					
ANR	1160513	Identifier	norm		1159938	1					
ANR	1160514	IfStatement	if ( tap_count % 2 == 0 )		1159938	6					
ANR	1160515	Condition	tap_count % 2 == 0	127:16:2825:2842	1159938	0	True				
ANR	1160516	EqualityExpression	tap_count % 2 == 0		1159938	0		==			
ANR	1160517	MultiplicativeExpression	tap_count % 2		1159938	0		%			
ANR	1160518	Identifier	tap_count		1159938	0					
ANR	1160519	PrimaryExpression	2		1159938	1					
ANR	1160520	PrimaryExpression	0		1159938	1					
ANR	1160521	CompoundStatement		125:36:2659:2659	1159938	1					
ANR	1160522	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1159938	0					
ANR	1160523	ForInit	i = 0 ;	129:21:2869:2874	1159938	0	True				
ANR	1160524	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160525	Identifier	i		1159938	0					
ANR	1160526	PrimaryExpression	0		1159938	1					
ANR	1160527	Condition	i < tap_count	129:28:2876:2888	1159938	1	True				
ANR	1160528	RelationalExpression	i < tap_count		1159938	0		<			
ANR	1160529	Identifier	i		1159938	0					
ANR	1160530	Identifier	tap_count		1159938	1					
ANR	1160531	PostIncDecOperationExpression	i ++	129:43:2891:2893	1159938	2	True				
ANR	1160532	Identifier	i		1159938	0					
ANR	1160533	IncDec	++		1159938	1					
ANR	1160534	ExpressionStatement	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int32_t * ) filter ) [ ph * alloc + i ]	131:20:2917:3014	1159938	3	True				
ANR	1160535	AssignmentExpression	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( int32_t * ) filter ) [ ph * alloc + i ]		1159938	0		=			
ANR	1160536	ArrayIndexing	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1159938	0					
ANR	1160537	CastExpression	( int32_t * ) filter		1159938	0					
ANR	1160538	CastTarget	int32_t *		1159938	0					
ANR	1160539	Identifier	filter		1159938	1					
ANR	1160540	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1159938	1		+			
ANR	1160541	MultiplicativeExpression	( phase_count - ph ) * alloc		1159938	0		*			
ANR	1160542	AdditiveExpression	phase_count - ph		1159938	0		-			
ANR	1160543	Identifier	phase_count		1159938	0					
ANR	1160544	Identifier	ph		1159938	1					
ANR	1160545	Identifier	alloc		1159938	1					
ANR	1160546	AdditiveExpression	tap_count - 1 - i		1159938	1		-			
ANR	1160547	Identifier	tap_count		1159938	0					
ANR	1160548	AdditiveExpression	1 - i		1159938	1		-			
ANR	1160549	PrimaryExpression	1		1159938	0					
ANR	1160550	Identifier	i		1159938	1					
ANR	1160551	ArrayIndexing	( ( int32_t * ) filter ) [ ph * alloc + i ]		1159938	1					
ANR	1160552	CastExpression	( int32_t * ) filter		1159938	0					
ANR	1160553	CastTarget	int32_t *		1159938	0					
ANR	1160554	Identifier	filter		1159938	1					
ANR	1160555	AdditiveExpression	ph * alloc + i		1159938	1		+			
ANR	1160556	MultiplicativeExpression	ph * alloc		1159938	0		*			
ANR	1160557	Identifier	ph		1159938	0					
ANR	1160558	Identifier	alloc		1159938	1					
ANR	1160559	Identifier	i		1159938	1					
ANR	1160560	ElseStatement	else		1159938	0					
ANR	1160561	CompoundStatement		133:17:2863:2863	1159938	0					
ANR	1160562	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1159938	0					
ANR	1160563	ForInit	i = 1 ;	137:21:3073:3078	1159938	0	True				
ANR	1160564	AssignmentExpression	i = 1		1159938	0		=			
ANR	1160565	Identifier	i		1159938	0					
ANR	1160566	PrimaryExpression	1		1159938	1					
ANR	1160567	Condition	i <= tap_count	137:28:3080:3093	1159938	1	True				
ANR	1160568	RelationalExpression	i <= tap_count		1159938	0		<=			
ANR	1160569	Identifier	i		1159938	0					
ANR	1160570	Identifier	tap_count		1159938	1					
ANR	1160571	PostIncDecOperationExpression	i ++	137:44:3096:3098	1159938	2	True				
ANR	1160572	Identifier	i		1159938	0					
ANR	1160573	IncDec	++		1159938	1					
ANR	1160574	ExpressionStatement	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )	139:20:3122:3281	1159938	3	True				
ANR	1160575	AssignmentExpression	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = av_clipl_int32 ( llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )		1159938	0		=			
ANR	1160576	ArrayIndexing	( ( int32_t * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1159938	0					
ANR	1160577	CastExpression	( int32_t * ) filter		1159938	0					
ANR	1160578	CastTarget	int32_t *		1159938	0					
ANR	1160579	Identifier	filter		1159938	1					
ANR	1160580	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1159938	1		+			
ANR	1160581	MultiplicativeExpression	( phase_count - ph ) * alloc		1159938	0		*			
ANR	1160582	AdditiveExpression	phase_count - ph		1159938	0		-			
ANR	1160583	Identifier	phase_count		1159938	0					
ANR	1160584	Identifier	ph		1159938	1					
ANR	1160585	Identifier	alloc		1159938	1					
ANR	1160586	AdditiveExpression	tap_count - i		1159938	1		-			
ANR	1160587	Identifier	tap_count		1159938	0					
ANR	1160588	Identifier	i		1159938	1					
ANR	1160589	CallExpression	av_clipl_int32 ( llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) ) )		1159938	1					
ANR	1160590	Callee	av_clipl_int32		1159938	0					
ANR	1160591	Identifier	av_clipl_int32		1159938	0					
ANR	1160592	ArgumentList	llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1159938	1					
ANR	1160593	Argument	llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1159938	0					
ANR	1160594	CallExpression	llrint ( tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] ) )		1159938	0					
ANR	1160595	Callee	llrint		1159938	0					
ANR	1160596	Identifier	llrint		1159938	0					
ANR	1160597	ArgumentList	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	1					
ANR	1160598	Argument	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	0					
ANR	1160599	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	0		*			
ANR	1160600	ArrayIndexing	tab [ i ]		1159938	0					
ANR	1160601	Identifier	tab		1159938	0					
ANR	1160602	Identifier	i		1159938	1					
ANR	1160603	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	1		/			
ANR	1160604	Identifier	scale		1159938	0					
ANR	1160605	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1159938	1		-			
ANR	1160606	Identifier	norm		1159938	0					
ANR	1160607	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1159938	1		+			
ANR	1160608	ArrayIndexing	tab [ 0 ]		1159938	0					
ANR	1160609	Identifier	tab		1159938	0					
ANR	1160610	PrimaryExpression	0		1159938	1					
ANR	1160611	ArrayIndexing	tab [ tap_count ]		1159938	1					
ANR	1160612	Identifier	tab		1159938	0					
ANR	1160613	Identifier	tap_count		1159938	1					
ANR	1160614	BreakStatement	break ;	145:12:3311:3316	1159938	7	True				
ANR	1160615	Label	case AV_SAMPLE_FMT_FLTP :	147:8:3327:3350	1159938	8	True				
ANR	1160616	Identifier	AV_SAMPLE_FMT_FLTP		1159938	0					
ANR	1160617	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1159938	9					
ANR	1160618	ForInit	i = 0 ;	149:16:3369:3372	1159938	0	True				
ANR	1160619	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160620	Identifier	i		1159938	0					
ANR	1160621	PrimaryExpression	0		1159938	1					
ANR	1160622	Condition	i < tap_count	149:20:3373:3383	1159938	1	True				
ANR	1160623	RelationalExpression	i < tap_count		1159938	0		<			
ANR	1160624	Identifier	i		1159938	0					
ANR	1160625	Identifier	tap_count		1159938	1					
ANR	1160626	PostIncDecOperationExpression	i ++	149:32:3385:3387	1159938	2	True				
ANR	1160627	Identifier	i		1159938	0					
ANR	1160628	IncDec	++		1159938	1					
ANR	1160629	ExpressionStatement	( ( float * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm	151:16:3407:3463	1159938	3	True				
ANR	1160630	AssignmentExpression	( ( float * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm		1159938	0		=			
ANR	1160631	ArrayIndexing	( ( float * ) filter ) [ ph * alloc + i ]		1159938	0					
ANR	1160632	CastExpression	( float * ) filter		1159938	0					
ANR	1160633	CastTarget	float *		1159938	0					
ANR	1160634	Identifier	filter		1159938	1					
ANR	1160635	AdditiveExpression	ph * alloc + i		1159938	1		+			
ANR	1160636	MultiplicativeExpression	ph * alloc		1159938	0		*			
ANR	1160637	Identifier	ph		1159938	0					
ANR	1160638	Identifier	alloc		1159938	1					
ANR	1160639	Identifier	i		1159938	1					
ANR	1160640	MultiplicativeExpression	tab [ i ] * scale / norm		1159938	1		*			
ANR	1160641	ArrayIndexing	tab [ i ]		1159938	0					
ANR	1160642	Identifier	tab		1159938	0					
ANR	1160643	Identifier	i		1159938	1					
ANR	1160644	MultiplicativeExpression	scale / norm		1159938	1		/			
ANR	1160645	Identifier	scale		1159938	0					
ANR	1160646	Identifier	norm		1159938	1					
ANR	1160647	IfStatement	if ( tap_count % 2 == 0 )		1159938	10					
ANR	1160648	Condition	tap_count % 2 == 0	153:16:3482:3499	1159938	0	True				
ANR	1160649	EqualityExpression	tap_count % 2 == 0		1159938	0		==			
ANR	1160650	MultiplicativeExpression	tap_count % 2		1159938	0		%			
ANR	1160651	Identifier	tap_count		1159938	0					
ANR	1160652	PrimaryExpression	2		1159938	1					
ANR	1160653	PrimaryExpression	0		1159938	1					
ANR	1160654	CompoundStatement		151:36:3316:3316	1159938	1					
ANR	1160655	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1159938	0					
ANR	1160656	ForInit	i = 0 ;	155:21:3526:3531	1159938	0	True				
ANR	1160657	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160658	Identifier	i		1159938	0					
ANR	1160659	PrimaryExpression	0		1159938	1					
ANR	1160660	Condition	i < tap_count	155:28:3533:3545	1159938	1	True				
ANR	1160661	RelationalExpression	i < tap_count		1159938	0		<			
ANR	1160662	Identifier	i		1159938	0					
ANR	1160663	Identifier	tap_count		1159938	1					
ANR	1160664	PostIncDecOperationExpression	i ++	155:43:3548:3550	1159938	2	True				
ANR	1160665	Identifier	i		1159938	0					
ANR	1160666	IncDec	++		1159938	1					
ANR	1160667	ExpressionStatement	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( float * ) filter ) [ ph * alloc + i ]	157:20:3574:3667	1159938	3	True				
ANR	1160668	AssignmentExpression	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( float * ) filter ) [ ph * alloc + i ]		1159938	0		=			
ANR	1160669	ArrayIndexing	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1159938	0					
ANR	1160670	CastExpression	( float * ) filter		1159938	0					
ANR	1160671	CastTarget	float *		1159938	0					
ANR	1160672	Identifier	filter		1159938	1					
ANR	1160673	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1159938	1		+			
ANR	1160674	MultiplicativeExpression	( phase_count - ph ) * alloc		1159938	0		*			
ANR	1160675	AdditiveExpression	phase_count - ph		1159938	0		-			
ANR	1160676	Identifier	phase_count		1159938	0					
ANR	1160677	Identifier	ph		1159938	1					
ANR	1160678	Identifier	alloc		1159938	1					
ANR	1160679	AdditiveExpression	tap_count - 1 - i		1159938	1		-			
ANR	1160680	Identifier	tap_count		1159938	0					
ANR	1160681	AdditiveExpression	1 - i		1159938	1		-			
ANR	1160682	PrimaryExpression	1		1159938	0					
ANR	1160683	Identifier	i		1159938	1					
ANR	1160684	ArrayIndexing	( ( float * ) filter ) [ ph * alloc + i ]		1159938	1					
ANR	1160685	CastExpression	( float * ) filter		1159938	0					
ANR	1160686	CastTarget	float *		1159938	0					
ANR	1160687	Identifier	filter		1159938	1					
ANR	1160688	AdditiveExpression	ph * alloc + i		1159938	1		+			
ANR	1160689	MultiplicativeExpression	ph * alloc		1159938	0		*			
ANR	1160690	Identifier	ph		1159938	0					
ANR	1160691	Identifier	alloc		1159938	1					
ANR	1160692	Identifier	i		1159938	1					
ANR	1160693	ElseStatement	else		1159938	0					
ANR	1160694	CompoundStatement		159:17:3516:3516	1159938	0					
ANR	1160695	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1159938	0					
ANR	1160696	ForInit	i = 1 ;	163:21:3726:3731	1159938	0	True				
ANR	1160697	AssignmentExpression	i = 1		1159938	0		=			
ANR	1160698	Identifier	i		1159938	0					
ANR	1160699	PrimaryExpression	1		1159938	1					
ANR	1160700	Condition	i <= tap_count	163:28:3733:3746	1159938	1	True				
ANR	1160701	RelationalExpression	i <= tap_count		1159938	0		<=			
ANR	1160702	Identifier	i		1159938	0					
ANR	1160703	Identifier	tap_count		1159938	1					
ANR	1160704	PostIncDecOperationExpression	i ++	163:44:3749:3751	1159938	2	True				
ANR	1160705	Identifier	i		1159938	0					
ANR	1160706	IncDec	++		1159938	1					
ANR	1160707	ExpressionStatement	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )	165:20:3775:3883	1159938	3	True				
ANR	1160708	AssignmentExpression	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	0		=			
ANR	1160709	ArrayIndexing	( ( float * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1159938	0					
ANR	1160710	CastExpression	( float * ) filter		1159938	0					
ANR	1160711	CastTarget	float *		1159938	0					
ANR	1160712	Identifier	filter		1159938	1					
ANR	1160713	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1159938	1		+			
ANR	1160714	MultiplicativeExpression	( phase_count - ph ) * alloc		1159938	0		*			
ANR	1160715	AdditiveExpression	phase_count - ph		1159938	0		-			
ANR	1160716	Identifier	phase_count		1159938	0					
ANR	1160717	Identifier	ph		1159938	1					
ANR	1160718	Identifier	alloc		1159938	1					
ANR	1160719	AdditiveExpression	tap_count - i		1159938	1		-			
ANR	1160720	Identifier	tap_count		1159938	0					
ANR	1160721	Identifier	i		1159938	1					
ANR	1160722	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	1		*			
ANR	1160723	ArrayIndexing	tab [ i ]		1159938	0					
ANR	1160724	Identifier	tab		1159938	0					
ANR	1160725	Identifier	i		1159938	1					
ANR	1160726	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	1		/			
ANR	1160727	Identifier	scale		1159938	0					
ANR	1160728	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1159938	1		-			
ANR	1160729	Identifier	norm		1159938	0					
ANR	1160730	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1159938	1		+			
ANR	1160731	ArrayIndexing	tab [ 0 ]		1159938	0					
ANR	1160732	Identifier	tab		1159938	0					
ANR	1160733	PrimaryExpression	0		1159938	1					
ANR	1160734	ArrayIndexing	tab [ tap_count ]		1159938	1					
ANR	1160735	Identifier	tab		1159938	0					
ANR	1160736	Identifier	tap_count		1159938	1					
ANR	1160737	BreakStatement	break ;	169:12:3913:3918	1159938	11	True				
ANR	1160738	Label	case AV_SAMPLE_FMT_DBLP :	171:8:3929:3952	1159938	12	True				
ANR	1160739	Identifier	AV_SAMPLE_FMT_DBLP		1159938	0					
ANR	1160740	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1159938	13					
ANR	1160741	ForInit	i = 0 ;	173:16:3971:3974	1159938	0	True				
ANR	1160742	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160743	Identifier	i		1159938	0					
ANR	1160744	PrimaryExpression	0		1159938	1					
ANR	1160745	Condition	i < tap_count	173:20:3975:3985	1159938	1	True				
ANR	1160746	RelationalExpression	i < tap_count		1159938	0		<			
ANR	1160747	Identifier	i		1159938	0					
ANR	1160748	Identifier	tap_count		1159938	1					
ANR	1160749	PostIncDecOperationExpression	i ++	173:32:3987:3989	1159938	2	True				
ANR	1160750	Identifier	i		1159938	0					
ANR	1160751	IncDec	++		1159938	1					
ANR	1160752	ExpressionStatement	( ( double * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm	175:16:4009:4066	1159938	3	True				
ANR	1160753	AssignmentExpression	( ( double * ) filter ) [ ph * alloc + i ] = tab [ i ] * scale / norm		1159938	0		=			
ANR	1160754	ArrayIndexing	( ( double * ) filter ) [ ph * alloc + i ]		1159938	0					
ANR	1160755	CastExpression	( double * ) filter		1159938	0					
ANR	1160756	CastTarget	double *		1159938	0					
ANR	1160757	Identifier	filter		1159938	1					
ANR	1160758	AdditiveExpression	ph * alloc + i		1159938	1		+			
ANR	1160759	MultiplicativeExpression	ph * alloc		1159938	0		*			
ANR	1160760	Identifier	ph		1159938	0					
ANR	1160761	Identifier	alloc		1159938	1					
ANR	1160762	Identifier	i		1159938	1					
ANR	1160763	MultiplicativeExpression	tab [ i ] * scale / norm		1159938	1		*			
ANR	1160764	ArrayIndexing	tab [ i ]		1159938	0					
ANR	1160765	Identifier	tab		1159938	0					
ANR	1160766	Identifier	i		1159938	1					
ANR	1160767	MultiplicativeExpression	scale / norm		1159938	1		/			
ANR	1160768	Identifier	scale		1159938	0					
ANR	1160769	Identifier	norm		1159938	1					
ANR	1160770	IfStatement	if ( tap_count % 2 == 0 )		1159938	14					
ANR	1160771	Condition	tap_count % 2 == 0	177:16:4085:4102	1159938	0	True				
ANR	1160772	EqualityExpression	tap_count % 2 == 0		1159938	0		==			
ANR	1160773	MultiplicativeExpression	tap_count % 2		1159938	0		%			
ANR	1160774	Identifier	tap_count		1159938	0					
ANR	1160775	PrimaryExpression	2		1159938	1					
ANR	1160776	PrimaryExpression	0		1159938	1					
ANR	1160777	CompoundStatement		175:36:3919:3919	1159938	1					
ANR	1160778	ForStatement	for ( i = 0 ; i < tap_count ; i ++ )		1159938	0					
ANR	1160779	ForInit	i = 0 ;	179:21:4129:4134	1159938	0	True				
ANR	1160780	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160781	Identifier	i		1159938	0					
ANR	1160782	PrimaryExpression	0		1159938	1					
ANR	1160783	Condition	i < tap_count	179:28:4136:4148	1159938	1	True				
ANR	1160784	RelationalExpression	i < tap_count		1159938	0		<			
ANR	1160785	Identifier	i		1159938	0					
ANR	1160786	Identifier	tap_count		1159938	1					
ANR	1160787	PostIncDecOperationExpression	i ++	179:43:4151:4153	1159938	2	True				
ANR	1160788	Identifier	i		1159938	0					
ANR	1160789	IncDec	++		1159938	1					
ANR	1160790	ExpressionStatement	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( double * ) filter ) [ ph * alloc + i ]	181:20:4177:4272	1159938	3	True				
ANR	1160791	AssignmentExpression	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ] = ( ( double * ) filter ) [ ph * alloc + i ]		1159938	0		=			
ANR	1160792	ArrayIndexing	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - 1 - i ]		1159938	0					
ANR	1160793	CastExpression	( double * ) filter		1159938	0					
ANR	1160794	CastTarget	double *		1159938	0					
ANR	1160795	Identifier	filter		1159938	1					
ANR	1160796	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - 1 - i		1159938	1		+			
ANR	1160797	MultiplicativeExpression	( phase_count - ph ) * alloc		1159938	0		*			
ANR	1160798	AdditiveExpression	phase_count - ph		1159938	0		-			
ANR	1160799	Identifier	phase_count		1159938	0					
ANR	1160800	Identifier	ph		1159938	1					
ANR	1160801	Identifier	alloc		1159938	1					
ANR	1160802	AdditiveExpression	tap_count - 1 - i		1159938	1		-			
ANR	1160803	Identifier	tap_count		1159938	0					
ANR	1160804	AdditiveExpression	1 - i		1159938	1		-			
ANR	1160805	PrimaryExpression	1		1159938	0					
ANR	1160806	Identifier	i		1159938	1					
ANR	1160807	ArrayIndexing	( ( double * ) filter ) [ ph * alloc + i ]		1159938	1					
ANR	1160808	CastExpression	( double * ) filter		1159938	0					
ANR	1160809	CastTarget	double *		1159938	0					
ANR	1160810	Identifier	filter		1159938	1					
ANR	1160811	AdditiveExpression	ph * alloc + i		1159938	1		+			
ANR	1160812	MultiplicativeExpression	ph * alloc		1159938	0		*			
ANR	1160813	Identifier	ph		1159938	0					
ANR	1160814	Identifier	alloc		1159938	1					
ANR	1160815	Identifier	i		1159938	1					
ANR	1160816	ElseStatement	else		1159938	0					
ANR	1160817	CompoundStatement		183:17:4121:4121	1159938	0					
ANR	1160818	ForStatement	for ( i = 1 ; i <= tap_count ; i ++ )		1159938	0					
ANR	1160819	ForInit	i = 1 ;	187:21:4331:4336	1159938	0	True				
ANR	1160820	AssignmentExpression	i = 1		1159938	0		=			
ANR	1160821	Identifier	i		1159938	0					
ANR	1160822	PrimaryExpression	1		1159938	1					
ANR	1160823	Condition	i <= tap_count	187:28:4338:4351	1159938	1	True				
ANR	1160824	RelationalExpression	i <= tap_count		1159938	0		<=			
ANR	1160825	Identifier	i		1159938	0					
ANR	1160826	Identifier	tap_count		1159938	1					
ANR	1160827	PostIncDecOperationExpression	i ++	187:44:4354:4356	1159938	2	True				
ANR	1160828	Identifier	i		1159938	0					
ANR	1160829	IncDec	++		1159938	1					
ANR	1160830	ExpressionStatement	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )	189:20:4380:4489	1159938	3	True				
ANR	1160831	AssignmentExpression	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ] = tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	0		=			
ANR	1160832	ArrayIndexing	( ( double * ) filter ) [ ( phase_count - ph ) * alloc + tap_count - i ]		1159938	0					
ANR	1160833	CastExpression	( double * ) filter		1159938	0					
ANR	1160834	CastTarget	double *		1159938	0					
ANR	1160835	Identifier	filter		1159938	1					
ANR	1160836	AdditiveExpression	( phase_count - ph ) * alloc + tap_count - i		1159938	1		+			
ANR	1160837	MultiplicativeExpression	( phase_count - ph ) * alloc		1159938	0		*			
ANR	1160838	AdditiveExpression	phase_count - ph		1159938	0		-			
ANR	1160839	Identifier	phase_count		1159938	0					
ANR	1160840	Identifier	ph		1159938	1					
ANR	1160841	Identifier	alloc		1159938	1					
ANR	1160842	AdditiveExpression	tap_count - i		1159938	1		-			
ANR	1160843	Identifier	tap_count		1159938	0					
ANR	1160844	Identifier	i		1159938	1					
ANR	1160845	MultiplicativeExpression	tab [ i ] * scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	1		*			
ANR	1160846	ArrayIndexing	tab [ i ]		1159938	0					
ANR	1160847	Identifier	tab		1159938	0					
ANR	1160848	Identifier	i		1159938	1					
ANR	1160849	MultiplicativeExpression	scale / ( norm - tab [ 0 ] + tab [ tap_count ] )		1159938	1		/			
ANR	1160850	Identifier	scale		1159938	0					
ANR	1160851	AdditiveExpression	norm - tab [ 0 ] + tab [ tap_count ]		1159938	1		-			
ANR	1160852	Identifier	norm		1159938	0					
ANR	1160853	AdditiveExpression	tab [ 0 ] + tab [ tap_count ]		1159938	1		+			
ANR	1160854	ArrayIndexing	tab [ 0 ]		1159938	0					
ANR	1160855	Identifier	tab		1159938	0					
ANR	1160856	PrimaryExpression	0		1159938	1					
ANR	1160857	ArrayIndexing	tab [ tap_count ]		1159938	1					
ANR	1160858	Identifier	tab		1159938	0					
ANR	1160859	Identifier	tap_count		1159938	1					
ANR	1160860	BreakStatement	break ;	193:12:4519:4524	1159938	15	True				
ANR	1160861	CompoundStatement		209:8:4487:4530	1159938	8					
ANR	1160862	Statement	define	203:1:4560:4565	1159938	0	True				
ANR	1160863	Statement	LEN	203:8:4567:4569	1159938	1	True				
ANR	1160864	Statement	1024	203:12:4571:4574	1159938	2	True				
ANR	1160865	IdentifierDeclStatement	"int j , k ;"	205:8:4585:4592	1159938	3	True				
ANR	1160866	IdentifierDecl	j		1159938	0					
ANR	1160867	IdentifierDeclType	int		1159938	0					
ANR	1160868	Identifier	j		1159938	1					
ANR	1160869	IdentifierDecl	k		1159938	1					
ANR	1160870	IdentifierDeclType	int		1159938	0					
ANR	1160871	Identifier	k		1159938	1					
ANR	1160872	IdentifierDeclStatement	double sine [ LEN + tap_count ] ;	207:8:4603:4631	1159938	4	True				
ANR	1160873	IdentifierDecl	sine [ LEN + tap_count ]		1159938	0					
ANR	1160874	IdentifierDeclType	double [ LEN + tap_count ]		1159938	0					
ANR	1160875	Identifier	sine		1159938	1					
ANR	1160876	AdditiveExpression	LEN + tap_count		1159938	2		+			
ANR	1160877	Identifier	LEN		1159938	0					
ANR	1160878	Identifier	tap_count		1159938	1					
ANR	1160879	IdentifierDeclStatement	double filtered [ LEN ] ;	209:8:4642:4662	1159938	5	True				
ANR	1160880	IdentifierDecl	filtered [ LEN ]		1159938	0					
ANR	1160881	IdentifierDeclType	double [ LEN ]		1159938	0					
ANR	1160882	Identifier	filtered		1159938	1					
ANR	1160883	Identifier	LEN		1159938	2					
ANR	1160884	IdentifierDeclStatement	"double maxff = - 2 , minff = 2 , maxsf = - 2 , minsf = 2 ;"	211:8:4673:4716	1159938	6	True				
ANR	1160885	IdentifierDecl	maxff = - 2		1159938	0					
ANR	1160886	IdentifierDeclType	double		1159938	0					
ANR	1160887	Identifier	maxff		1159938	1					
ANR	1160888	AssignmentExpression	maxff = - 2		1159938	2		=			
ANR	1160889	Identifier	maxff		1159938	0					
ANR	1160890	UnaryOperationExpression	- 2		1159938	1					
ANR	1160891	UnaryOperator	-		1159938	0					
ANR	1160892	PrimaryExpression	2		1159938	1					
ANR	1160893	IdentifierDecl	minff = 2		1159938	1					
ANR	1160894	IdentifierDeclType	double		1159938	0					
ANR	1160895	Identifier	minff		1159938	1					
ANR	1160896	AssignmentExpression	minff = 2		1159938	2		=			
ANR	1160897	Identifier	minff		1159938	0					
ANR	1160898	PrimaryExpression	2		1159938	1					
ANR	1160899	IdentifierDecl	maxsf = - 2		1159938	2					
ANR	1160900	IdentifierDeclType	double		1159938	0					
ANR	1160901	Identifier	maxsf		1159938	1					
ANR	1160902	AssignmentExpression	maxsf = - 2		1159938	2		=			
ANR	1160903	Identifier	maxsf		1159938	0					
ANR	1160904	UnaryOperationExpression	- 2		1159938	1					
ANR	1160905	UnaryOperator	-		1159938	0					
ANR	1160906	PrimaryExpression	2		1159938	1					
ANR	1160907	IdentifierDecl	minsf = 2		1159938	3					
ANR	1160908	IdentifierDeclType	double		1159938	0					
ANR	1160909	Identifier	minsf		1159938	1					
ANR	1160910	AssignmentExpression	minsf = 2		1159938	2		=			
ANR	1160911	Identifier	minsf		1159938	0					
ANR	1160912	PrimaryExpression	2		1159938	1					
ANR	1160913	ForStatement	for ( i = 0 ; i < LEN ; i ++ )		1159938	7					
ANR	1160914	ForInit	i = 0 ;	213:12:4731:4734	1159938	0	True				
ANR	1160915	AssignmentExpression	i = 0		1159938	0		=			
ANR	1160916	Identifier	i		1159938	0					
ANR	1160917	PrimaryExpression	0		1159938	1					
ANR	1160918	Condition	i < LEN	213:17:4736:4740	1159938	1	True				
ANR	1160919	RelationalExpression	i < LEN		1159938	0		<			
ANR	1160920	Identifier	i		1159938	0					
ANR	1160921	Identifier	LEN		1159938	1					
ANR	1160922	PostIncDecOperationExpression	i ++	213:24:4743:4745	1159938	2	True				
ANR	1160923	Identifier	i		1159938	0					
ANR	1160924	IncDec	++		1159938	1					
ANR	1160925	CompoundStatement		213:12:4576:4599	1159938	3					
ANR	1160926	IdentifierDeclStatement	"double ss = 0 , sf = 0 , ff = 0 ;"	215:12:4762:4785	1159938	0	True				
ANR	1160927	IdentifierDecl	ss = 0		1159938	0					
ANR	1160928	IdentifierDeclType	double		1159938	0					
ANR	1160929	Identifier	ss		1159938	1					
ANR	1160930	AssignmentExpression	ss = 0		1159938	2		=			
ANR	1160931	Identifier	ss		1159938	0					
ANR	1160932	PrimaryExpression	0		1159938	1					
ANR	1160933	IdentifierDecl	sf = 0		1159938	1					
ANR	1160934	IdentifierDeclType	double		1159938	0					
ANR	1160935	Identifier	sf		1159938	1					
ANR	1160936	AssignmentExpression	sf = 0		1159938	2		=			
ANR	1160937	Identifier	sf		1159938	0					
ANR	1160938	PrimaryExpression	0		1159938	1					
ANR	1160939	IdentifierDecl	ff = 0		1159938	2					
ANR	1160940	IdentifierDeclType	double		1159938	0					
ANR	1160941	Identifier	ff		1159938	1					
ANR	1160942	AssignmentExpression	ff = 0		1159938	2		=			
ANR	1160943	Identifier	ff		1159938	0					
ANR	1160944	PrimaryExpression	0		1159938	1					
ANR	1160945	ForStatement	for ( j = 0 ; j < LEN + tap_count ; j ++ )		1159938	1					
ANR	1160946	ForInit	j = 0 ;	217:16:4804:4807	1159938	0	True				
ANR	1160947	AssignmentExpression	j = 0		1159938	0		=			
ANR	1160948	Identifier	j		1159938	0					
ANR	1160949	PrimaryExpression	0		1159938	1					
ANR	1160950	Condition	j < LEN + tap_count	217:21:4809:4823	1159938	1	True				
ANR	1160951	RelationalExpression	j < LEN + tap_count		1159938	0		<			
ANR	1160952	Identifier	j		1159938	0					
ANR	1160953	AdditiveExpression	LEN + tap_count		1159938	1		+			
ANR	1160954	Identifier	LEN		1159938	0					
ANR	1160955	Identifier	tap_count		1159938	1					
ANR	1160956	PostIncDecOperationExpression	j ++	217:38:4826:4828	1159938	2	True				
ANR	1160957	Identifier	j		1159938	0					
ANR	1160958	IncDec	++		1159938	1					
ANR	1160959	ExpressionStatement	sine [ j ] = cos ( i * j * M_PI / LEN )	219:16:4848:4874	1159938	3	True				
ANR	1160960	AssignmentExpression	sine [ j ] = cos ( i * j * M_PI / LEN )		1159938	0		=			
ANR	1160961	ArrayIndexing	sine [ j ]		1159938	0					
ANR	1160962	Identifier	sine		1159938	0					
ANR	1160963	Identifier	j		1159938	1					
ANR	1160964	CallExpression	cos ( i * j * M_PI / LEN )		1159938	1					
ANR	1160965	Callee	cos		1159938	0					
ANR	1160966	Identifier	cos		1159938	0					
ANR	1160967	ArgumentList	i * j * M_PI / LEN		1159938	1					
ANR	1160968	Argument	i * j * M_PI / LEN		1159938	0					
ANR	1160969	MultiplicativeExpression	i * j * M_PI / LEN		1159938	0		*			
ANR	1160970	Identifier	i		1159938	0					
ANR	1160971	MultiplicativeExpression	j * M_PI / LEN		1159938	1		*			
ANR	1160972	Identifier	j		1159938	0					
ANR	1160973	MultiplicativeExpression	M_PI / LEN		1159938	1		/			
ANR	1160974	Identifier	M_PI		1159938	0					
ANR	1160975	Identifier	LEN		1159938	1					
ANR	1160976	ForStatement	for ( j = 0 ; j < LEN ; j ++ )		1159938	2					
ANR	1160977	ForInit	j = 0 ;	221:16:4893:4896	1159938	0	True				
ANR	1160978	AssignmentExpression	j = 0		1159938	0		=			
ANR	1160979	Identifier	j		1159938	0					
ANR	1160980	PrimaryExpression	0		1159938	1					
ANR	1160981	Condition	j < LEN	221:21:4898:4902	1159938	1	True				
ANR	1160982	RelationalExpression	j < LEN		1159938	0		<			
ANR	1160983	Identifier	j		1159938	0					
ANR	1160984	Identifier	LEN		1159938	1					
ANR	1160985	PostIncDecOperationExpression	j ++	221:28:4905:4907	1159938	2	True				
ANR	1160986	Identifier	j		1159938	0					
ANR	1160987	IncDec	++		1159938	1					
ANR	1160988	CompoundStatement		221:16:4742:4754	1159938	3					
ANR	1160989	IdentifierDeclStatement	double sum = 0 ;	223:16:4928:4940	1159938	0	True				
ANR	1160990	IdentifierDecl	sum = 0		1159938	0					
ANR	1160991	IdentifierDeclType	double		1159938	0					
ANR	1160992	Identifier	sum		1159938	1					
ANR	1160993	AssignmentExpression	sum = 0		1159938	2		=			
ANR	1160994	Identifier	sum		1159938	0					
ANR	1160995	PrimaryExpression	0		1159938	1					
ANR	1160996	ExpressionStatement	ph = 0	225:16:4959:4963	1159938	1	True				
ANR	1160997	AssignmentExpression	ph = 0		1159938	0		=			
ANR	1160998	Identifier	ph		1159938	0					
ANR	1160999	PrimaryExpression	0		1159938	1					
ANR	1161000	ForStatement	for ( k = 0 ; k < tap_count ; k ++ )		1159938	2					
ANR	1161001	ForInit	k = 0 ;	227:20:4986:4989	1159938	0	True				
ANR	1161002	AssignmentExpression	k = 0		1159938	0		=			
ANR	1161003	Identifier	k		1159938	0					
ANR	1161004	PrimaryExpression	0		1159938	1					
ANR	1161005	Condition	k < tap_count	227:25:4991:5001	1159938	1	True				
ANR	1161006	RelationalExpression	k < tap_count		1159938	0		<			
ANR	1161007	Identifier	k		1159938	0					
ANR	1161008	Identifier	tap_count		1159938	1					
ANR	1161009	PostIncDecOperationExpression	k ++	227:38:5004:5006	1159938	2	True				
ANR	1161010	Identifier	k		1159938	0					
ANR	1161011	IncDec	++		1159938	1					
ANR	1161012	ExpressionStatement	sum += filter [ ph * tap_count + k ] * sine [ k + j ]	229:20:5030:5075	1159938	3	True				
ANR	1161013	AssignmentExpression	sum += filter [ ph * tap_count + k ] * sine [ k + j ]		1159938	0		+=			
ANR	1161014	Identifier	sum		1159938	0					
ANR	1161015	MultiplicativeExpression	filter [ ph * tap_count + k ] * sine [ k + j ]		1159938	1		*			
ANR	1161016	ArrayIndexing	filter [ ph * tap_count + k ]		1159938	0					
ANR	1161017	Identifier	filter		1159938	0					
ANR	1161018	AdditiveExpression	ph * tap_count + k		1159938	1		+			
ANR	1161019	MultiplicativeExpression	ph * tap_count		1159938	0		*			
ANR	1161020	Identifier	ph		1159938	0					
ANR	1161021	Identifier	tap_count		1159938	1					
ANR	1161022	Identifier	k		1159938	1					
ANR	1161023	ArrayIndexing	sine [ k + j ]		1159938	1					
ANR	1161024	Identifier	sine		1159938	0					
ANR	1161025	AdditiveExpression	k + j		1159938	1		+			
ANR	1161026	Identifier	k		1159938	0					
ANR	1161027	Identifier	j		1159938	1					
ANR	1161028	ExpressionStatement	filtered [ j ] = sum / ( 1 << FILTER_SHIFT )	231:16:5094:5130	1159938	3	True				
ANR	1161029	AssignmentExpression	filtered [ j ] = sum / ( 1 << FILTER_SHIFT )		1159938	0		=			
ANR	1161030	ArrayIndexing	filtered [ j ]		1159938	0					
ANR	1161031	Identifier	filtered		1159938	0					
ANR	1161032	Identifier	j		1159938	1					
ANR	1161033	MultiplicativeExpression	sum / ( 1 << FILTER_SHIFT )		1159938	1		/			
ANR	1161034	Identifier	sum		1159938	0					
ANR	1161035	ShiftExpression	1 << FILTER_SHIFT		1159938	1		<<			
ANR	1161036	PrimaryExpression	1		1159938	0					
ANR	1161037	Identifier	FILTER_SHIFT		1159938	1					
ANR	1161038	ExpressionStatement	ss += sine [ j + center ] * sine [ j + center ]	233:16:5149:5189	1159938	4	True				
ANR	1161039	AssignmentExpression	ss += sine [ j + center ] * sine [ j + center ]		1159938	0		+=			
ANR	1161040	Identifier	ss		1159938	0					
ANR	1161041	MultiplicativeExpression	sine [ j + center ] * sine [ j + center ]		1159938	1		*			
ANR	1161042	ArrayIndexing	sine [ j + center ]		1159938	0					
ANR	1161043	Identifier	sine		1159938	0					
ANR	1161044	AdditiveExpression	j + center		1159938	1		+			
ANR	1161045	Identifier	j		1159938	0					
ANR	1161046	Identifier	center		1159938	1					
ANR	1161047	ArrayIndexing	sine [ j + center ]		1159938	1					
ANR	1161048	Identifier	sine		1159938	0					
ANR	1161049	AdditiveExpression	j + center		1159938	1		+			
ANR	1161050	Identifier	j		1159938	0					
ANR	1161051	Identifier	center		1159938	1					
ANR	1161052	ExpressionStatement	ff += filtered [ j ] * filtered [ j ]	235:16:5208:5238	1159938	5	True				
ANR	1161053	AssignmentExpression	ff += filtered [ j ] * filtered [ j ]		1159938	0		+=			
ANR	1161054	Identifier	ff		1159938	0					
ANR	1161055	MultiplicativeExpression	filtered [ j ] * filtered [ j ]		1159938	1		*			
ANR	1161056	ArrayIndexing	filtered [ j ]		1159938	0					
ANR	1161057	Identifier	filtered		1159938	0					
ANR	1161058	Identifier	j		1159938	1					
ANR	1161059	ArrayIndexing	filtered [ j ]		1159938	1					
ANR	1161060	Identifier	filtered		1159938	0					
ANR	1161061	Identifier	j		1159938	1					
ANR	1161062	ExpressionStatement	sf += sine [ j + center ] * filtered [ j ]	237:16:5257:5292	1159938	6	True				
ANR	1161063	AssignmentExpression	sf += sine [ j + center ] * filtered [ j ]		1159938	0		+=			
ANR	1161064	Identifier	sf		1159938	0					
ANR	1161065	MultiplicativeExpression	sine [ j + center ] * filtered [ j ]		1159938	1		*			
ANR	1161066	ArrayIndexing	sine [ j + center ]		1159938	0					
ANR	1161067	Identifier	sine		1159938	0					
ANR	1161068	AdditiveExpression	j + center		1159938	1		+			
ANR	1161069	Identifier	j		1159938	0					
ANR	1161070	Identifier	center		1159938	1					
ANR	1161071	ArrayIndexing	filtered [ j ]		1159938	1					
ANR	1161072	Identifier	filtered		1159938	0					
ANR	1161073	Identifier	j		1159938	1					
ANR	1161074	ExpressionStatement	ss = sqrt ( 2 * ss / LEN )	241:12:5322:5340	1159938	3	True				
ANR	1161075	AssignmentExpression	ss = sqrt ( 2 * ss / LEN )		1159938	0		=			
ANR	1161076	Identifier	ss		1159938	0					
ANR	1161077	CallExpression	sqrt ( 2 * ss / LEN )		1159938	1					
ANR	1161078	Callee	sqrt		1159938	0					
ANR	1161079	Identifier	sqrt		1159938	0					
ANR	1161080	ArgumentList	2 * ss / LEN		1159938	1					
ANR	1161081	Argument	2 * ss / LEN		1159938	0					
ANR	1161082	MultiplicativeExpression	2 * ss / LEN		1159938	0		*			
ANR	1161083	PrimaryExpression	2		1159938	0					
ANR	1161084	MultiplicativeExpression	ss / LEN		1159938	1		/			
ANR	1161085	Identifier	ss		1159938	0					
ANR	1161086	Identifier	LEN		1159938	1					
ANR	1161087	ExpressionStatement	ff = sqrt ( 2 * ff / LEN )	243:12:5355:5373	1159938	4	True				
ANR	1161088	AssignmentExpression	ff = sqrt ( 2 * ff / LEN )		1159938	0		=			
ANR	1161089	Identifier	ff		1159938	0					
ANR	1161090	CallExpression	sqrt ( 2 * ff / LEN )		1159938	1					
ANR	1161091	Callee	sqrt		1159938	0					
ANR	1161092	Identifier	sqrt		1159938	0					
ANR	1161093	ArgumentList	2 * ff / LEN		1159938	1					
ANR	1161094	Argument	2 * ff / LEN		1159938	0					
ANR	1161095	MultiplicativeExpression	2 * ff / LEN		1159938	0		*			
ANR	1161096	PrimaryExpression	2		1159938	0					
ANR	1161097	MultiplicativeExpression	ff / LEN		1159938	1		/			
ANR	1161098	Identifier	ff		1159938	0					
ANR	1161099	Identifier	LEN		1159938	1					
ANR	1161100	ExpressionStatement	sf = 2 * sf / LEN	245:12:5388:5400	1159938	5	True				
ANR	1161101	AssignmentExpression	sf = 2 * sf / LEN		1159938	0		=			
ANR	1161102	Identifier	sf		1159938	0					
ANR	1161103	MultiplicativeExpression	2 * sf / LEN		1159938	1		*			
ANR	1161104	PrimaryExpression	2		1159938	0					
ANR	1161105	MultiplicativeExpression	sf / LEN		1159938	1		/			
ANR	1161106	Identifier	sf		1159938	0					
ANR	1161107	Identifier	LEN		1159938	1					
ANR	1161108	ExpressionStatement	"maxff = FFMAX ( maxff , ff )"	247:12:5415:5438	1159938	6	True				
ANR	1161109	AssignmentExpression	"maxff = FFMAX ( maxff , ff )"		1159938	0		=			
ANR	1161110	Identifier	maxff		1159938	0					
ANR	1161111	CallExpression	"FFMAX ( maxff , ff )"		1159938	1					
ANR	1161112	Callee	FFMAX		1159938	0					
ANR	1161113	Identifier	FFMAX		1159938	0					
ANR	1161114	ArgumentList	maxff		1159938	1					
ANR	1161115	Argument	maxff		1159938	0					
ANR	1161116	Identifier	maxff		1159938	0					
ANR	1161117	Argument	ff		1159938	1					
ANR	1161118	Identifier	ff		1159938	0					
ANR	1161119	ExpressionStatement	"minff = FFMIN ( minff , ff )"	249:12:5453:5476	1159938	7	True				
ANR	1161120	AssignmentExpression	"minff = FFMIN ( minff , ff )"		1159938	0		=			
ANR	1161121	Identifier	minff		1159938	0					
ANR	1161122	CallExpression	"FFMIN ( minff , ff )"		1159938	1					
ANR	1161123	Callee	FFMIN		1159938	0					
ANR	1161124	Identifier	FFMIN		1159938	0					
ANR	1161125	ArgumentList	minff		1159938	1					
ANR	1161126	Argument	minff		1159938	0					
ANR	1161127	Identifier	minff		1159938	0					
ANR	1161128	Argument	ff		1159938	1					
ANR	1161129	Identifier	ff		1159938	0					
ANR	1161130	ExpressionStatement	"maxsf = FFMAX ( maxsf , sf )"	251:12:5491:5514	1159938	8	True				
ANR	1161131	AssignmentExpression	"maxsf = FFMAX ( maxsf , sf )"		1159938	0		=			
ANR	1161132	Identifier	maxsf		1159938	0					
ANR	1161133	CallExpression	"FFMAX ( maxsf , sf )"		1159938	1					
ANR	1161134	Callee	FFMAX		1159938	0					
ANR	1161135	Identifier	FFMAX		1159938	0					
ANR	1161136	ArgumentList	maxsf		1159938	1					
ANR	1161137	Argument	maxsf		1159938	0					
ANR	1161138	Identifier	maxsf		1159938	0					
ANR	1161139	Argument	sf		1159938	1					
ANR	1161140	Identifier	sf		1159938	0					
ANR	1161141	ExpressionStatement	"minsf = FFMIN ( minsf , sf )"	253:12:5529:5552	1159938	9	True				
ANR	1161142	AssignmentExpression	"minsf = FFMIN ( minsf , sf )"		1159938	0		=			
ANR	1161143	Identifier	minsf		1159938	0					
ANR	1161144	CallExpression	"FFMIN ( minsf , sf )"		1159938	1					
ANR	1161145	Callee	FFMIN		1159938	0					
ANR	1161146	Identifier	FFMIN		1159938	0					
ANR	1161147	ArgumentList	minsf		1159938	1					
ANR	1161148	Argument	minsf		1159938	0					
ANR	1161149	Identifier	minsf		1159938	0					
ANR	1161150	Argument	sf		1159938	1					
ANR	1161151	Identifier	sf		1159938	0					
ANR	1161152	IfStatement	if ( i % 11 == 0 )		1159938	10					
ANR	1161153	Condition	i % 11 == 0	255:15:5570:5576	1159938	0	True				
ANR	1161154	EqualityExpression	i % 11 == 0		1159938	0		==			
ANR	1161155	MultiplicativeExpression	i % 11		1159938	0		%			
ANR	1161156	Identifier	i		1159938	0					
ANR	1161157	PrimaryExpression	11		1159938	1					
ANR	1161158	PrimaryExpression	0		1159938	1					
ANR	1161159	CompoundStatement		253:23:5392:5392	1159938	1					
ANR	1161160	ExpressionStatement	"av_log ( NULL , AV_LOG_ERROR , ""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"" , i , ss , maxff , minff , maxsf , minsf )"	257:16:5597:5709	1159938	0	True				
ANR	1161161	CallExpression	"av_log ( NULL , AV_LOG_ERROR , ""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"" , i , ss , maxff , minff , maxsf , minsf )"		1159938	0					
ANR	1161162	Callee	av_log		1159938	0					
ANR	1161163	Identifier	av_log		1159938	0					
ANR	1161164	ArgumentList	NULL		1159938	1					
ANR	1161165	Argument	NULL		1159938	0					
ANR	1161166	Identifier	NULL		1159938	0					
ANR	1161167	Argument	AV_LOG_ERROR		1159938	1					
ANR	1161168	Identifier	AV_LOG_ERROR		1159938	0					
ANR	1161169	Argument	"""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"""		1159938	2					
ANR	1161170	PrimaryExpression	"""i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\\n"""		1159938	0					
ANR	1161171	Argument	i		1159938	3					
ANR	1161172	Identifier	i		1159938	0					
ANR	1161173	Argument	ss		1159938	4					
ANR	1161174	Identifier	ss		1159938	0					
ANR	1161175	Argument	maxff		1159938	5					
ANR	1161176	Identifier	maxff		1159938	0					
ANR	1161177	Argument	minff		1159938	6					
ANR	1161178	Identifier	minff		1159938	0					
ANR	1161179	Argument	maxsf		1159938	7					
ANR	1161180	Identifier	maxsf		1159938	0					
ANR	1161181	Argument	minsf		1159938	8					
ANR	1161182	Identifier	minsf		1159938	0					
ANR	1161183	ExpressionStatement	minff = minsf = 2	259:16:5728:5742	1159938	1	True				
ANR	1161184	AssignmentExpression	minff = minsf = 2		1159938	0		=			
ANR	1161185	Identifier	minff		1159938	0					
ANR	1161186	AssignmentExpression	minsf = 2		1159938	1		=			
ANR	1161187	Identifier	minsf		1159938	0					
ANR	1161188	PrimaryExpression	2		1159938	1					
ANR	1161189	ExpressionStatement	maxff = maxsf = - 2	261:16:5761:5776	1159938	2	True				
ANR	1161190	AssignmentExpression	maxff = maxsf = - 2		1159938	0		=			
ANR	1161191	Identifier	maxff		1159938	0					
ANR	1161192	AssignmentExpression	maxsf = - 2		1159938	1		=			
ANR	1161193	Identifier	maxsf		1159938	0					
ANR	1161194	UnaryOperationExpression	- 2		1159938	1					
ANR	1161195	UnaryOperator	-		1159938	0					
ANR	1161196	PrimaryExpression	2		1159938	1					
ANR	1161197	ExpressionStatement	av_free ( tab )	273:4:5826:5838	1159938	9	True				
ANR	1161198	CallExpression	av_free ( tab )		1159938	0					
ANR	1161199	Callee	av_free		1159938	0					
ANR	1161200	Identifier	av_free		1159938	0					
ANR	1161201	ArgumentList	tab		1159938	1					
ANR	1161202	Argument	tab		1159938	0					
ANR	1161203	Identifier	tab		1159938	0					
ANR	1161204	ReturnStatement	return 0 ;	275:4:5845:5853	1159938	10	True				
ANR	1161205	PrimaryExpression	0		1159938	0					
ANR	1161206	ReturnType	static int		1159938	1					
ANR	1161207	Identifier	build_filter		1159938	2					
ANR	1161208	ParameterList	"ResampleContext * c , void * filter , double factor , int tap_count , int alloc , int phase_count , int scale , int filter_type , int kaiser_beta"		1159938	3					
ANR	1161209	Parameter	ResampleContext * c	1:24:24:41	1159938	0	True				
ANR	1161210	ParameterType	ResampleContext *		1159938	0					
ANR	1161211	Identifier	c		1159938	1					
ANR	1161212	Parameter	void * filter	1:44:44:55	1159938	1	True				
ANR	1161213	ParameterType	void *		1159938	0					
ANR	1161214	Identifier	filter		1159938	1					
ANR	1161215	Parameter	double factor	1:58:58:70	1159938	2	True				
ANR	1161216	ParameterType	double		1159938	0					
ANR	1161217	Identifier	factor		1159938	1					
ANR	1161218	Parameter	int tap_count	1:73:73:85	1159938	3	True				
ANR	1161219	ParameterType	int		1159938	0					
ANR	1161220	Identifier	tap_count		1159938	1					
ANR	1161221	Parameter	int alloc	1:88:88:96	1159938	4	True				
ANR	1161222	ParameterType	int		1159938	0					
ANR	1161223	Identifier	alloc		1159938	1					
ANR	1161224	Parameter	int phase_count	1:99:99:113	1159938	5	True				
ANR	1161225	ParameterType	int		1159938	0					
ANR	1161226	Identifier	phase_count		1159938	1					
ANR	1161227	Parameter	int scale	1:116:116:124	1159938	6	True				
ANR	1161228	ParameterType	int		1159938	0					
ANR	1161229	Identifier	scale		1159938	1					
ANR	1161230	Parameter	int filter_type	3:24:152:166	1159938	7	True				
ANR	1161231	ParameterType	int		1159938	0					
ANR	1161232	Identifier	filter_type		1159938	1					
ANR	1161233	Parameter	int kaiser_beta	3:41:169:183	1159938	8	True				
ANR	1161234	ParameterType	int		1159938	0					
ANR	1161235	Identifier	kaiser_beta		1159938	1					
ANR	1161236	CFGEntryNode	ENTRY		1159938		True				
ANR	1161237	CFGExitNode	EXIT		1159938		True				
ANR	1161238	Symbol	ENOMEM		1159938						
ANR	1161239	Symbol	cos		1159938						
ANR	1161240	Symbol	maxff		1159938						
ANR	1161241	Symbol	FFMIN		1159938						
ANR	1161242	Symbol	norm		1159938						
ANR	1161243	Symbol	M_PI		1159938						
ANR	1161244	Symbol	* phase_count		1159938						
ANR	1161245	Symbol	tab		1159938						
ANR	1161246	Symbol	filtered		1159938						
ANR	1161247	Symbol	minsf		1159938						
ANR	1161248	Symbol	sqrt		1159938						
ANR	1161249	Symbol	FILTER_SHIFT		1159938						
ANR	1161250	Symbol	maxsf		1159938						
ANR	1161251	Symbol	av_clip		1159938						
ANR	1161252	Symbol	c -> format		1159938						
ANR	1161253	Symbol	lrintf		1159938						
ANR	1161254	Symbol	tap_count		1159938						
ANR	1161255	Symbol	minff		1159938						
ANR	1161256	Symbol	NULL		1159938						
ANR	1161257	Symbol	kaiser_beta		1159938						
ANR	1161258	Symbol	av_clipl_int32		1159938						
ANR	1161259	Symbol	sine		1159938						
ANR	1161260	Symbol	alloc		1159938						
ANR	1161261	Symbol	* ph		1159938						
ANR	1161262	Symbol	ff		1159938						
ANR	1161263	Symbol	scale		1159938						
ANR	1161264	Symbol	bessel		1159938						
ANR	1161265	Symbol	INT16_MIN		1159938						
ANR	1161266	Symbol	sum		1159938						
ANR	1161267	Symbol	llrint		1159938						
ANR	1161268	Symbol	sf		1159938						
ANR	1161269	Symbol	* filtered		1159938						
ANR	1161270	Symbol	INT16_MAX		1159938						
ANR	1161271	Symbol	filter_type		1159938						
ANR	1161272	Symbol	* alloc		1159938						
ANR	1161273	Symbol	phase_count		1159938						
ANR	1161274	Symbol	sin		1159938						
ANR	1161275	Symbol	factor		1159938						
ANR	1161276	Symbol	ss		1159938						
ANR	1161277	Symbol	* center		1159938						
ANR	1161278	Symbol	c		1159938						
ANR	1161279	Symbol	fabs		1159938						
ANR	1161280	Symbol	d		1159938						
ANR	1161281	Symbol	AV_LOG_ERROR		1159938						
ANR	1161282	Symbol	center		1159938						
ANR	1161283	Symbol	* sine		1159938						
ANR	1161284	Symbol	i		1159938						
ANR	1161285	Symbol	j		1159938						
ANR	1161286	Symbol	k		1159938						
ANR	1161287	Symbol	* c		1159938						
ANR	1161288	Symbol	* filter		1159938						
ANR	1161289	Symbol	filter		1159938						
ANR	1161290	Symbol	* i		1159938						
ANR	1161291	Symbol	LEN		1159938						
ANR	1161292	Symbol	* j		1159938						
ANR	1161293	Symbol	* k		1159938						
ANR	1161294	Symbol	w		1159938						
ANR	1161295	Symbol	ph		1159938						
ANR	1161296	Symbol	x		1159938						
ANR	1161297	Symbol	* tap_count		1159938						
ANR	1161298	Symbol	y		1159938						
ANR	1161299	Symbol	av_malloc_array		1159938						
ANR	1161300	Symbol	AVERROR		1159938						
ANR	1161301	Symbol	* tab		1159938						
ANR	1161302	Symbol	FFMAX		1159938						
