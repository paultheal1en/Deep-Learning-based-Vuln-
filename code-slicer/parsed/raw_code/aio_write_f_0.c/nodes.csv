command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	500323	File	/home/p4ultr4n/workplace/ReVeal/raw_code/aio_write_f_0.c								
ANR	500324	Function	aio_write_f	1:0:0:1697							
ANR	500325	FunctionDef	"aio_write_f (int argc , char * * argv)"		500324	0					
ANR	500326	CompoundStatement		3:0:36:1697	500324	0					
ANR	500327	IdentifierDeclStatement	char * p ;	5:1:40:47	500324	0	True				
ANR	500328	IdentifierDecl	* p		500324	0					
ANR	500329	IdentifierDeclType	char *		500324	0					
ANR	500330	Identifier	p		500324	1					
ANR	500331	IdentifierDeclStatement	int count = 0 ;	7:1:51:64	500324	1	True				
ANR	500332	IdentifierDecl	count = 0		500324	0					
ANR	500333	IdentifierDeclType	int		500324	0					
ANR	500334	Identifier	count		500324	1					
ANR	500335	AssignmentExpression	count = 0		500324	2		=			
ANR	500336	Identifier	count		500324	0					
ANR	500337	PrimaryExpression	0		500324	1					
ANR	500338	IdentifierDeclStatement	"int nr_iov , i , c ;"	9:1:68:84	500324	2	True				
ANR	500339	IdentifierDecl	nr_iov		500324	0					
ANR	500340	IdentifierDeclType	int		500324	0					
ANR	500341	Identifier	nr_iov		500324	1					
ANR	500342	IdentifierDecl	i		500324	1					
ANR	500343	IdentifierDeclType	int		500324	0					
ANR	500344	Identifier	i		500324	1					
ANR	500345	IdentifierDecl	c		500324	2					
ANR	500346	IdentifierDeclType	int		500324	0					
ANR	500347	Identifier	c		500324	1					
ANR	500348	IdentifierDeclStatement	int pattern = 0xcd ;	11:1:88:106	500324	3	True				
ANR	500349	IdentifierDecl	pattern = 0xcd		500324	0					
ANR	500350	IdentifierDeclType	int		500324	0					
ANR	500351	Identifier	pattern		500324	1					
ANR	500352	AssignmentExpression	pattern = 0xcd		500324	2		=			
ANR	500353	Identifier	pattern		500324	0					
ANR	500354	PrimaryExpression	0xcd		500324	1					
ANR	500355	IdentifierDeclStatement	"struct aio_ctx * ctx = calloc ( 1 , sizeof ( struct aio_ctx ) ) ;"	13:1:110:165	500324	4	True				
ANR	500356	IdentifierDecl	"* ctx = calloc ( 1 , sizeof ( struct aio_ctx ) )"		500324	0					
ANR	500357	IdentifierDeclType	struct aio_ctx *		500324	0					
ANR	500358	Identifier	ctx		500324	1					
ANR	500359	AssignmentExpression	"* ctx = calloc ( 1 , sizeof ( struct aio_ctx ) )"		500324	2		=			
ANR	500360	Identifier	ctx		500324	0					
ANR	500361	CallExpression	"calloc ( 1 , sizeof ( struct aio_ctx ) )"		500324	1					
ANR	500362	Callee	calloc		500324	0					
ANR	500363	Identifier	calloc		500324	0					
ANR	500364	ArgumentList	1		500324	1					
ANR	500365	Argument	1		500324	0					
ANR	500366	PrimaryExpression	1		500324	0					
ANR	500367	Argument	sizeof ( struct aio_ctx )		500324	1					
ANR	500368	SizeofExpression	sizeof ( struct aio_ctx )		500324	0					
ANR	500369	Sizeof	sizeof		500324	0					
ANR	500370	SizeofOperand	struct aio_ctx		500324	1					
ANR	500371	IdentifierDeclStatement	BlockDriverAIOCB * acb ;	15:1:169:190	500324	5	True				
ANR	500372	IdentifierDecl	* acb		500324	0					
ANR	500373	IdentifierDeclType	BlockDriverAIOCB *		500324	0					
ANR	500374	Identifier	acb		500324	1					
ANR	500375	WhileStatement	"while ( ( c = getopt ( argc , argv , ""CqP:"" ) ) != EOF )"		500324	6					
ANR	500376	Condition	"( c = getopt ( argc , argv , ""CqP:"" ) ) != EOF"	19:8:203:241	500324	0	True				
ANR	500377	EqualityExpression	"( c = getopt ( argc , argv , ""CqP:"" ) ) != EOF"		500324	0		!=			
ANR	500378	AssignmentExpression	"c = getopt ( argc , argv , ""CqP:"" )"		500324	0		=			
ANR	500379	Identifier	c		500324	0					
ANR	500380	CallExpression	"getopt ( argc , argv , ""CqP:"" )"		500324	1					
ANR	500381	Callee	getopt		500324	0					
ANR	500382	Identifier	getopt		500324	0					
ANR	500383	ArgumentList	argc		500324	1					
ANR	500384	Argument	argc		500324	0					
ANR	500385	Identifier	argc		500324	0					
ANR	500386	Argument	argv		500324	1					
ANR	500387	Identifier	argv		500324	0					
ANR	500388	Argument	"""CqP:"""		500324	2					
ANR	500389	PrimaryExpression	"""CqP:"""		500324	0					
ANR	500390	Identifier	EOF		500324	1					
ANR	500391	CompoundStatement		17:49:207:207	500324	1					
ANR	500392	SwitchStatement	switch ( c )		500324	0					
ANR	500393	Condition	c	21:10:257:257	500324	0	True				
ANR	500394	Identifier	c		500324	0					
ANR	500395	CompoundStatement		19:13:223:223	500324	1					
ANR	500396	Label	case 'C' :	23:2:265:273	500324	0	True				
ANR	500397	ExpressionStatement	ctx -> Cflag = 1	25:3:279:293	500324	1	True				
ANR	500398	AssignmentExpression	ctx -> Cflag = 1		500324	0		=			
ANR	500399	PtrMemberAccess	ctx -> Cflag		500324	0					
ANR	500400	Identifier	ctx		500324	0					
ANR	500401	Identifier	Cflag		500324	1					
ANR	500402	PrimaryExpression	1		500324	1					
ANR	500403	BreakStatement	break ;	27:3:299:304	500324	2	True				
ANR	500404	Label	case 'q' :	29:2:309:317	500324	3	True				
ANR	500405	ExpressionStatement	ctx -> qflag = 1	31:3:323:337	500324	4	True				
ANR	500406	AssignmentExpression	ctx -> qflag = 1		500324	0		=			
ANR	500407	PtrMemberAccess	ctx -> qflag		500324	0					
ANR	500408	Identifier	ctx		500324	0					
ANR	500409	Identifier	qflag		500324	1					
ANR	500410	PrimaryExpression	1		500324	1					
ANR	500411	BreakStatement	break ;	33:3:343:348	500324	5	True				
ANR	500412	Label	case 'P' :	35:2:353:361	500324	6	True				
ANR	500413	ExpressionStatement	pattern = atoi ( optarg )	37:3:367:389	500324	7	True				
ANR	500414	AssignmentExpression	pattern = atoi ( optarg )		500324	0		=			
ANR	500415	Identifier	pattern		500324	0					
ANR	500416	CallExpression	atoi ( optarg )		500324	1					
ANR	500417	Callee	atoi		500324	0					
ANR	500418	Identifier	atoi		500324	0					
ANR	500419	ArgumentList	optarg		500324	1					
ANR	500420	Argument	optarg		500324	0					
ANR	500421	Identifier	optarg		500324	0					
ANR	500422	BreakStatement	break ;	39:3:395:400	500324	8	True				
ANR	500423	Label	default :	41:2:405:412	500324	9	True				
ANR	500424	Identifier	default		500324	0					
ANR	500425	ReturnStatement	return command_usage ( & aio_write_cmd ) ;	43:3:418:454	500324	10	True				
ANR	500426	CallExpression	command_usage ( & aio_write_cmd )		500324	0					
ANR	500427	Callee	command_usage		500324	0					
ANR	500428	Identifier	command_usage		500324	0					
ANR	500429	ArgumentList	& aio_write_cmd		500324	1					
ANR	500430	Argument	& aio_write_cmd		500324	0					
ANR	500431	UnaryOperationExpression	& aio_write_cmd		500324	0					
ANR	500432	UnaryOperator	&		500324	0					
ANR	500433	Identifier	aio_write_cmd		500324	1					
ANR	500434	IfStatement	if ( optind > argc - 2 )		500324	7					
ANR	500435	Condition	optind > argc - 2	51:5:473:489	500324	0	True				
ANR	500436	RelationalExpression	optind > argc - 2		500324	0		>			
ANR	500437	Identifier	optind		500324	0					
ANR	500438	AdditiveExpression	argc - 2		500324	1		-			
ANR	500439	Identifier	argc		500324	0					
ANR	500440	PrimaryExpression	2		500324	1					
ANR	500441	ReturnStatement	return command_usage ( & aio_write_cmd ) ;	53:2:495:531	500324	1	True				
ANR	500442	CallExpression	command_usage ( & aio_write_cmd )		500324	0					
ANR	500443	Callee	command_usage		500324	0					
ANR	500444	Identifier	command_usage		500324	0					
ANR	500445	ArgumentList	& aio_write_cmd		500324	1					
ANR	500446	Argument	& aio_write_cmd		500324	0					
ANR	500447	UnaryOperationExpression	& aio_write_cmd		500324	0					
ANR	500448	UnaryOperator	&		500324	0					
ANR	500449	Identifier	aio_write_cmd		500324	1					
ANR	500450	ExpressionStatement	ctx -> offset = cvtnum ( argv [ optind ] )	57:1:537:571	500324	8	True				
ANR	500451	AssignmentExpression	ctx -> offset = cvtnum ( argv [ optind ] )		500324	0		=			
ANR	500452	PtrMemberAccess	ctx -> offset		500324	0					
ANR	500453	Identifier	ctx		500324	0					
ANR	500454	Identifier	offset		500324	1					
ANR	500455	CallExpression	cvtnum ( argv [ optind ] )		500324	1					
ANR	500456	Callee	cvtnum		500324	0					
ANR	500457	Identifier	cvtnum		500324	0					
ANR	500458	ArgumentList	argv [ optind ]		500324	1					
ANR	500459	Argument	argv [ optind ]		500324	0					
ANR	500460	ArrayIndexing	argv [ optind ]		500324	0					
ANR	500461	Identifier	argv		500324	0					
ANR	500462	Identifier	optind		500324	1					
ANR	500463	IfStatement	if ( ctx -> offset < 0 )		500324	9					
ANR	500464	Condition	ctx -> offset < 0	59:5:579:593	500324	0	True				
ANR	500465	RelationalExpression	ctx -> offset < 0		500324	0		<			
ANR	500466	PtrMemberAccess	ctx -> offset		500324	0					
ANR	500467	Identifier	ctx		500324	0					
ANR	500468	Identifier	offset		500324	1					
ANR	500469	PrimaryExpression	0		500324	1					
ANR	500470	CompoundStatement		57:22:559:559	500324	1					
ANR	500471	ExpressionStatement	"printf ( ""non-numeric length argument -- %s\\n"" , argv [ optind ] )"	61:2:601:660	500324	0	True				
ANR	500472	CallExpression	"printf ( ""non-numeric length argument -- %s\\n"" , argv [ optind ] )"		500324	0					
ANR	500473	Callee	printf		500324	0					
ANR	500474	Identifier	printf		500324	0					
ANR	500475	ArgumentList	"""non-numeric length argument -- %s\\n"""		500324	1					
ANR	500476	Argument	"""non-numeric length argument -- %s\\n"""		500324	0					
ANR	500477	PrimaryExpression	"""non-numeric length argument -- %s\\n"""		500324	0					
ANR	500478	Argument	argv [ optind ]		500324	1					
ANR	500479	ArrayIndexing	argv [ optind ]		500324	0					
ANR	500480	Identifier	argv		500324	0					
ANR	500481	Identifier	optind		500324	1					
ANR	500482	ReturnStatement	return 0 ;	63:2:665:673	500324	1	True				
ANR	500483	PrimaryExpression	0		500324	0					
ANR	500484	ExpressionStatement	optind ++	67:1:681:689	500324	10	True				
ANR	500485	PostIncDecOperationExpression	optind ++		500324	0					
ANR	500486	Identifier	optind		500324	0					
ANR	500487	IncDec	++		500324	1					
ANR	500488	IfStatement	if ( ctx -> offset & 0x1ff )		500324	11					
ANR	500489	Condition	ctx -> offset & 0x1ff	71:5:699:717	500324	0	True				
ANR	500490	BitAndExpression	ctx -> offset & 0x1ff		500324	0		&			
ANR	500491	PtrMemberAccess	ctx -> offset		500324	0					
ANR	500492	Identifier	ctx		500324	0					
ANR	500493	Identifier	offset		500324	1					
ANR	500494	PrimaryExpression	0x1ff		500324	1					
ANR	500495	CompoundStatement		69:26:683:683	500324	1					
ANR	500496	ExpressionStatement	"printf ( ""offset %lld is not sector aligned\\n"" , ( long long ) ctx -> offset )"	73:2:725:798	500324	0	True				
ANR	500497	CallExpression	"printf ( ""offset %lld is not sector aligned\\n"" , ( long long ) ctx -> offset )"		500324	0					
ANR	500498	Callee	printf		500324	0					
ANR	500499	Identifier	printf		500324	0					
ANR	500500	ArgumentList	"""offset %lld is not sector aligned\\n"""		500324	1					
ANR	500501	Argument	"""offset %lld is not sector aligned\\n"""		500324	0					
ANR	500502	PrimaryExpression	"""offset %lld is not sector aligned\\n"""		500324	0					
ANR	500503	Argument	( long long ) ctx -> offset		500324	1					
ANR	500504	CastExpression	( long long ) ctx -> offset		500324	0					
ANR	500505	CastTarget	long long		500324	0					
ANR	500506	PtrMemberAccess	ctx -> offset		500324	1					
ANR	500507	Identifier	ctx		500324	0					
ANR	500508	Identifier	offset		500324	1					
ANR	500509	ReturnStatement	return 0 ;	77:2:803:811	500324	1	True				
ANR	500510	PrimaryExpression	0		500324	0					
ANR	500511	IfStatement	if ( count & 0x1ff )		500324	12					
ANR	500512	Condition	count & 0x1ff	83:5:825:837	500324	0	True				
ANR	500513	BitAndExpression	count & 0x1ff		500324	0		&			
ANR	500514	Identifier	count		500324	0					
ANR	500515	PrimaryExpression	0x1ff		500324	1					
ANR	500516	CompoundStatement		81:20:803:803	500324	1					
ANR	500517	ExpressionStatement	"printf ( ""count %d is not sector aligned\\n"" , count )"	85:2:845:898	500324	0	True				
ANR	500518	CallExpression	"printf ( ""count %d is not sector aligned\\n"" , count )"		500324	0					
ANR	500519	Callee	printf		500324	0					
ANR	500520	Identifier	printf		500324	0					
ANR	500521	ArgumentList	"""count %d is not sector aligned\\n"""		500324	1					
ANR	500522	Argument	"""count %d is not sector aligned\\n"""		500324	0					
ANR	500523	PrimaryExpression	"""count %d is not sector aligned\\n"""		500324	0					
ANR	500524	Argument	count		500324	1					
ANR	500525	Identifier	count		500324	0					
ANR	500526	ReturnStatement	return 0 ;	89:2:903:911	500324	1	True				
ANR	500527	PrimaryExpression	0		500324	0					
ANR	500528	ForStatement	for ( i = optind ; i < argc ; i ++ )		500324	13					
ANR	500529	ForInit	i = optind ;	95:6:926:936	500324	0	True				
ANR	500530	AssignmentExpression	i = optind		500324	0		=			
ANR	500531	Identifier	i		500324	0					
ANR	500532	Identifier	optind		500324	1					
ANR	500533	Condition	i < argc	95:18:938:945	500324	1	True				
ANR	500534	RelationalExpression	i < argc		500324	0		<			
ANR	500535	Identifier	i		500324	0					
ANR	500536	Identifier	argc		500324	1					
ANR	500537	PostIncDecOperationExpression	i ++	95:28:948:950	500324	2	True				
ANR	500538	Identifier	i		500324	0					
ANR	500539	IncDec	++		500324	1					
ANR	500540	CompoundStatement		95:9:928:938	500324	3					
ANR	500541	IdentifierDeclStatement	size_t len ;	97:9:965:975	500324	0	True				
ANR	500542	IdentifierDecl	len		500324	0					
ANR	500543	IdentifierDeclType	size_t		500324	0					
ANR	500544	Identifier	len		500324	1					
ANR	500545	ExpressionStatement	len = cvtnum ( argv [ optind ] )	101:2:982:1008	500324	1	True				
ANR	500546	AssignmentExpression	len = cvtnum ( argv [ optind ] )		500324	0		=			
ANR	500547	Identifier	len		500324	0					
ANR	500548	CallExpression	cvtnum ( argv [ optind ] )		500324	1					
ANR	500549	Callee	cvtnum		500324	0					
ANR	500550	Identifier	cvtnum		500324	0					
ANR	500551	ArgumentList	argv [ optind ]		500324	1					
ANR	500552	Argument	argv [ optind ]		500324	0					
ANR	500553	ArrayIndexing	argv [ optind ]		500324	0					
ANR	500554	Identifier	argv		500324	0					
ANR	500555	Identifier	optind		500324	1					
ANR	500556	IfStatement	if ( len < 0 )		500324	2					
ANR	500557	Condition	len < 0	103:6:1017:1023	500324	0	True				
ANR	500558	RelationalExpression	len < 0		500324	0		<			
ANR	500559	Identifier	len		500324	0					
ANR	500560	PrimaryExpression	0		500324	1					
ANR	500561	CompoundStatement		101:15:989:989	500324	1					
ANR	500562	ExpressionStatement	"printf ( ""non-numeric length argument -- %s\\n"" , argv [ i ] )"	105:3:1032:1086	500324	0	True				
ANR	500563	CallExpression	"printf ( ""non-numeric length argument -- %s\\n"" , argv [ i ] )"		500324	0					
ANR	500564	Callee	printf		500324	0					
ANR	500565	Identifier	printf		500324	0					
ANR	500566	ArgumentList	"""non-numeric length argument -- %s\\n"""		500324	1					
ANR	500567	Argument	"""non-numeric length argument -- %s\\n"""		500324	0					
ANR	500568	PrimaryExpression	"""non-numeric length argument -- %s\\n"""		500324	0					
ANR	500569	Argument	argv [ i ]		500324	1					
ANR	500570	ArrayIndexing	argv [ i ]		500324	0					
ANR	500571	Identifier	argv		500324	0					
ANR	500572	Identifier	i		500324	1					
ANR	500573	ReturnStatement	return 0 ;	107:3:1092:1100	500324	1	True				
ANR	500574	PrimaryExpression	0		500324	0					
ANR	500575	ExpressionStatement	count += len	111:2:1110:1122	500324	3	True				
ANR	500576	AssignmentExpression	count += len		500324	0		+=			
ANR	500577	Identifier	count		500324	0					
ANR	500578	Identifier	len		500324	1					
ANR	500579	ExpressionStatement	nr_iov = argc - optind	117:1:1132:1154	500324	14	True				
ANR	500580	AssignmentExpression	nr_iov = argc - optind		500324	0		=			
ANR	500581	Identifier	nr_iov		500324	0					
ANR	500582	AdditiveExpression	argc - optind		500324	1		-			
ANR	500583	Identifier	argc		500324	0					
ANR	500584	Identifier	optind		500324	1					
ANR	500585	ExpressionStatement	"qemu_iovec_init ( & ctx -> qiov , nr_iov )"	119:1:1158:1193	500324	15	True				
ANR	500586	CallExpression	"qemu_iovec_init ( & ctx -> qiov , nr_iov )"		500324	0					
ANR	500587	Callee	qemu_iovec_init		500324	0					
ANR	500588	Identifier	qemu_iovec_init		500324	0					
ANR	500589	ArgumentList	& ctx -> qiov		500324	1					
ANR	500590	Argument	& ctx -> qiov		500324	0					
ANR	500591	UnaryOperationExpression	& ctx -> qiov		500324	0					
ANR	500592	UnaryOperator	&		500324	0					
ANR	500593	PtrMemberAccess	ctx -> qiov		500324	1					
ANR	500594	Identifier	ctx		500324	0					
ANR	500595	Identifier	qiov		500324	1					
ANR	500596	Argument	nr_iov		500324	1					
ANR	500597	Identifier	nr_iov		500324	0					
ANR	500598	ExpressionStatement	"ctx -> buf = p = qemu_io_alloc ( count , pattern )"	121:1:1197:1241	500324	16	True				
ANR	500599	AssignmentExpression	"ctx -> buf = p = qemu_io_alloc ( count , pattern )"		500324	0		=			
ANR	500600	PtrMemberAccess	ctx -> buf		500324	0					
ANR	500601	Identifier	ctx		500324	0					
ANR	500602	Identifier	buf		500324	1					
ANR	500603	AssignmentExpression	"p = qemu_io_alloc ( count , pattern )"		500324	1		=			
ANR	500604	Identifier	p		500324	0					
ANR	500605	CallExpression	"qemu_io_alloc ( count , pattern )"		500324	1					
ANR	500606	Callee	qemu_io_alloc		500324	0					
ANR	500607	Identifier	qemu_io_alloc		500324	0					
ANR	500608	ArgumentList	count		500324	1					
ANR	500609	Argument	count		500324	0					
ANR	500610	Identifier	count		500324	0					
ANR	500611	Argument	pattern		500324	1					
ANR	500612	Identifier	pattern		500324	0					
ANR	500613	ForStatement	for ( i = 0 ; i < nr_iov ; i ++ )		500324	17					
ANR	500614	ForInit	i = 0 ;	123:6:1250:1255	500324	0	True				
ANR	500615	AssignmentExpression	i = 0		500324	0		=			
ANR	500616	Identifier	i		500324	0					
ANR	500617	PrimaryExpression	0		500324	1					
ANR	500618	Condition	i < nr_iov	123:13:1257:1266	500324	1	True				
ANR	500619	RelationalExpression	i < nr_iov		500324	0		<			
ANR	500620	Identifier	i		500324	0					
ANR	500621	Identifier	nr_iov		500324	1					
ANR	500622	PostIncDecOperationExpression	i ++	123:25:1269:1271	500324	2	True				
ANR	500623	Identifier	i		500324	0					
ANR	500624	IncDec	++		500324	1					
ANR	500625	CompoundStatement		123:9:1249:1259	500324	3					
ANR	500626	IdentifierDeclStatement	size_t len ;	125:9:1286:1296	500324	0	True				
ANR	500627	IdentifierDecl	len		500324	0					
ANR	500628	IdentifierDeclType	size_t		500324	0					
ANR	500629	Identifier	len		500324	1					
ANR	500630	ExpressionStatement	len = cvtnum ( argv [ optind ] )	129:2:1303:1329	500324	1	True				
ANR	500631	AssignmentExpression	len = cvtnum ( argv [ optind ] )		500324	0		=			
ANR	500632	Identifier	len		500324	0					
ANR	500633	CallExpression	cvtnum ( argv [ optind ] )		500324	1					
ANR	500634	Callee	cvtnum		500324	0					
ANR	500635	Identifier	cvtnum		500324	0					
ANR	500636	ArgumentList	argv [ optind ]		500324	1					
ANR	500637	Argument	argv [ optind ]		500324	0					
ANR	500638	ArrayIndexing	argv [ optind ]		500324	0					
ANR	500639	Identifier	argv		500324	0					
ANR	500640	Identifier	optind		500324	1					
ANR	500641	IfStatement	if ( len < 0 )		500324	2					
ANR	500642	Condition	len < 0	131:6:1338:1344	500324	0	True				
ANR	500643	RelationalExpression	len < 0		500324	0		<			
ANR	500644	Identifier	len		500324	0					
ANR	500645	PrimaryExpression	0		500324	1					
ANR	500646	CompoundStatement		129:15:1310:1310	500324	1					
ANR	500647	ExpressionStatement	"printf ( ""non-numeric length argument -- %s\\n"" , argv [ optind ] )"	133:3:1353:1417	500324	0	True				
ANR	500648	CallExpression	"printf ( ""non-numeric length argument -- %s\\n"" , argv [ optind ] )"		500324	0					
ANR	500649	Callee	printf		500324	0					
ANR	500650	Identifier	printf		500324	0					
ANR	500651	ArgumentList	"""non-numeric length argument -- %s\\n"""		500324	1					
ANR	500652	Argument	"""non-numeric length argument -- %s\\n"""		500324	0					
ANR	500653	PrimaryExpression	"""non-numeric length argument -- %s\\n"""		500324	0					
ANR	500654	Argument	argv [ optind ]		500324	1					
ANR	500655	ArrayIndexing	argv [ optind ]		500324	0					
ANR	500656	Identifier	argv		500324	0					
ANR	500657	Identifier	optind		500324	1					
ANR	500658	ReturnStatement	return 0 ;	137:3:1423:1431	500324	1	True				
ANR	500659	PrimaryExpression	0		500324	0					
ANR	500660	ExpressionStatement	"qemu_iovec_add ( & ctx -> qiov , p , len )"	143:2:1443:1477	500324	3	True				
ANR	500661	CallExpression	"qemu_iovec_add ( & ctx -> qiov , p , len )"		500324	0					
ANR	500662	Callee	qemu_iovec_add		500324	0					
ANR	500663	Identifier	qemu_iovec_add		500324	0					
ANR	500664	ArgumentList	& ctx -> qiov		500324	1					
ANR	500665	Argument	& ctx -> qiov		500324	0					
ANR	500666	UnaryOperationExpression	& ctx -> qiov		500324	0					
ANR	500667	UnaryOperator	&		500324	0					
ANR	500668	PtrMemberAccess	ctx -> qiov		500324	1					
ANR	500669	Identifier	ctx		500324	0					
ANR	500670	Identifier	qiov		500324	1					
ANR	500671	Argument	p		500324	1					
ANR	500672	Identifier	p		500324	0					
ANR	500673	Argument	len		500324	2					
ANR	500674	Identifier	len		500324	0					
ANR	500675	ExpressionStatement	p += len	145:2:1482:1490	500324	4	True				
ANR	500676	AssignmentExpression	p += len		500324	0		+=			
ANR	500677	Identifier	p		500324	0					
ANR	500678	Identifier	len		500324	1					
ANR	500679	ExpressionStatement	optind ++	147:2:1495:1503	500324	5	True				
ANR	500680	PostIncDecOperationExpression	optind ++		500324	0					
ANR	500681	Identifier	optind		500324	0					
ANR	500682	IncDec	++		500324	1					
ANR	500683	ExpressionStatement	"gettimeofday ( & ctx -> t1 , NULL )"	153:1:1513:1541	500324	18	True				
ANR	500684	CallExpression	"gettimeofday ( & ctx -> t1 , NULL )"		500324	0					
ANR	500685	Callee	gettimeofday		500324	0					
ANR	500686	Identifier	gettimeofday		500324	0					
ANR	500687	ArgumentList	& ctx -> t1		500324	1					
ANR	500688	Argument	& ctx -> t1		500324	0					
ANR	500689	UnaryOperationExpression	& ctx -> t1		500324	0					
ANR	500690	UnaryOperator	&		500324	0					
ANR	500691	PtrMemberAccess	ctx -> t1		500324	1					
ANR	500692	Identifier	ctx		500324	0					
ANR	500693	Identifier	t1		500324	1					
ANR	500694	Argument	NULL		500324	1					
ANR	500695	Identifier	NULL		500324	0					
ANR	500696	ExpressionStatement	"acb = bdrv_aio_writev ( bs , ctx -> offset >> 9 , & ctx -> qiov , ctx -> qiov . size >> 9 , aio_write_done , ctx )"	155:1:1545:1652	500324	19	True				
ANR	500697	AssignmentExpression	"acb = bdrv_aio_writev ( bs , ctx -> offset >> 9 , & ctx -> qiov , ctx -> qiov . size >> 9 , aio_write_done , ctx )"		500324	0		=			
ANR	500698	Identifier	acb		500324	0					
ANR	500699	CallExpression	"bdrv_aio_writev ( bs , ctx -> offset >> 9 , & ctx -> qiov , ctx -> qiov . size >> 9 , aio_write_done , ctx )"		500324	1					
ANR	500700	Callee	bdrv_aio_writev		500324	0					
ANR	500701	Identifier	bdrv_aio_writev		500324	0					
ANR	500702	ArgumentList	bs		500324	1					
ANR	500703	Argument	bs		500324	0					
ANR	500704	Identifier	bs		500324	0					
ANR	500705	Argument	ctx -> offset >> 9		500324	1					
ANR	500706	ShiftExpression	ctx -> offset >> 9		500324	0		>>			
ANR	500707	PtrMemberAccess	ctx -> offset		500324	0					
ANR	500708	Identifier	ctx		500324	0					
ANR	500709	Identifier	offset		500324	1					
ANR	500710	PrimaryExpression	9		500324	1					
ANR	500711	Argument	& ctx -> qiov		500324	2					
ANR	500712	UnaryOperationExpression	& ctx -> qiov		500324	0					
ANR	500713	UnaryOperator	&		500324	0					
ANR	500714	PtrMemberAccess	ctx -> qiov		500324	1					
ANR	500715	Identifier	ctx		500324	0					
ANR	500716	Identifier	qiov		500324	1					
ANR	500717	Argument	ctx -> qiov . size >> 9		500324	3					
ANR	500718	ShiftExpression	ctx -> qiov . size >> 9		500324	0		>>			
ANR	500719	MemberAccess	ctx -> qiov . size		500324	0					
ANR	500720	PtrMemberAccess	ctx -> qiov		500324	0					
ANR	500721	Identifier	ctx		500324	0					
ANR	500722	Identifier	qiov		500324	1					
ANR	500723	Identifier	size		500324	1					
ANR	500724	PrimaryExpression	9		500324	1					
ANR	500725	Argument	aio_write_done		500324	4					
ANR	500726	Identifier	aio_write_done		500324	0					
ANR	500727	Argument	ctx		500324	5					
ANR	500728	Identifier	ctx		500324	0					
ANR	500729	IfStatement	if ( ! acb )		500324	20					
ANR	500730	Condition	! acb	159:5:1660:1663	500324	0	True				
ANR	500731	UnaryOperationExpression	! acb		500324	0					
ANR	500732	UnaryOperator	!		500324	0					
ANR	500733	Identifier	acb		500324	1					
ANR	500734	ReturnStatement	return - EIO ;	161:2:1669:1680	500324	1	True				
ANR	500735	UnaryOperationExpression	- EIO		500324	0					
ANR	500736	UnaryOperator	-		500324	0					
ANR	500737	Identifier	EIO		500324	1					
ANR	500738	ReturnStatement	return 0 ;	165:1:1686:1694	500324	21	True				
ANR	500739	PrimaryExpression	0		500324	0					
ANR	500740	Identifier	aio_write_f		500324	1					
ANR	500741	ParameterList	"int argc , char * * argv"		500324	2					
ANR	500742	Parameter	int argc	1:12:12:19	500324	0	True				
ANR	500743	ParameterType	int		500324	0					
ANR	500744	Identifier	argc		500324	1					
ANR	500745	Parameter	char * * argv	1:22:22:32	500324	1	True				
ANR	500746	ParameterType	char * *		500324	0					
ANR	500747	Identifier	argv		500324	1					
ANR	500748	CFGEntryNode	ENTRY		500324		True				
ANR	500749	CFGExitNode	EXIT		500324		True				
ANR	500750	Symbol	acb		500324						
ANR	500751	Symbol	& aio_write_cmd		500324						
ANR	500752	Symbol	* optind		500324						
ANR	500753	Symbol	optind		500324						
ANR	500754	Symbol	pattern		500324						
ANR	500755	Symbol	optarg		500324						
ANR	500756	Symbol	* argv		500324						
ANR	500757	Symbol	calloc		500324						
ANR	500758	Symbol	argv		500324						
ANR	500759	Symbol	& ctx -> qiov		500324						
ANR	500760	Symbol	bs		500324						
ANR	500761	Symbol	len		500324						
ANR	500762	Symbol	getopt		500324						
ANR	500763	Symbol	command_usage		500324						
ANR	500764	Symbol	ctx -> buf		500324						
ANR	500765	Symbol	EOF		500324						
ANR	500766	Symbol	argc		500324						
ANR	500767	Symbol	atoi		500324						
ANR	500768	Symbol	cvtnum		500324						
ANR	500769	Symbol	aio_write_done		500324						
ANR	500770	Symbol	c		500324						
ANR	500771	Symbol	NULL		500324						
ANR	500772	Symbol	& ctx -> t1		500324						
ANR	500773	Symbol	ctx		500324						
ANR	500774	Symbol	count		500324						
ANR	500775	Symbol	qemu_io_alloc		500324						
ANR	500776	Symbol	i		500324						
ANR	500777	Symbol	EIO		500324						
ANR	500778	Symbol	* ctx		500324						
ANR	500779	Symbol	ctx -> qflag		500324						
ANR	500780	Symbol	p		500324						
ANR	500781	Symbol	ctx -> offset		500324						
ANR	500782	Symbol	* i		500324						
ANR	500783	Symbol	bdrv_aio_writev		500324						
ANR	500784	Symbol	ctx -> Cflag		500324						
ANR	500785	Symbol	ctx -> qiov . size		500324						
ANR	500786	Symbol	ctx -> qiov		500324						
ANR	500787	Symbol	nr_iov		500324						
