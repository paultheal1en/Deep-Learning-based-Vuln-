command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1370905	File	/home/p4ultr4n/workplace/ReVeal/raw_code/compute_ldst_addr_0.c								
ANR	1370906	Function	compute_ldst_addr	1:0:0:1318							
ANR	1370907	FunctionDef	"compute_ldst_addr (DisasContext * dc , TCGv * t)"		1370906	0					
ANR	1370908	CompoundStatement		3:0:66:1318	1370906	0					
ANR	1370909	IdentifierDeclStatement	unsigned int extimm = dc -> tb_flags & IMM_FLAG ;	5:4:73:118	1370906	0	True				
ANR	1370910	IdentifierDecl	extimm = dc -> tb_flags & IMM_FLAG		1370906	0					
ANR	1370911	IdentifierDeclType	unsigned int		1370906	0					
ANR	1370912	Identifier	extimm		1370906	1					
ANR	1370913	AssignmentExpression	extimm = dc -> tb_flags & IMM_FLAG		1370906	2		=			
ANR	1370914	Identifier	extimm		1370906	0					
ANR	1370915	BitAndExpression	dc -> tb_flags & IMM_FLAG		1370906	1		&			
ANR	1370916	PtrMemberAccess	dc -> tb_flags		1370906	0					
ANR	1370917	Identifier	dc		1370906	0					
ANR	1370918	Identifier	tb_flags		1370906	1					
ANR	1370919	Identifier	IMM_FLAG		1370906	1					
ANR	1370920	IdentifierDeclStatement	int stackprot = 0 ;	9:4:187:204	1370906	1	True				
ANR	1370921	IdentifierDecl	stackprot = 0		1370906	0					
ANR	1370922	IdentifierDeclType	int		1370906	0					
ANR	1370923	Identifier	stackprot		1370906	1					
ANR	1370924	AssignmentExpression	stackprot = 0		1370906	2		=			
ANR	1370925	Identifier	stackprot		1370906	0					
ANR	1370926	PrimaryExpression	0		1370906	1					
ANR	1370927	IfStatement	if ( dc -> ra == 1 )		1370906	2					
ANR	1370928	Condition	dc -> ra == 1	15:8:253:263	1370906	0	True				
ANR	1370929	EqualityExpression	dc -> ra == 1		1370906	0		==			
ANR	1370930	PtrMemberAccess	dc -> ra		1370906	0					
ANR	1370931	Identifier	dc		1370906	0					
ANR	1370932	Identifier	ra		1370906	1					
ANR	1370933	PrimaryExpression	1		1370906	1					
ANR	1370934	CompoundStatement		13:21:199:199	1370906	1					
ANR	1370935	ExpressionStatement	stackprot = 1	17:8:277:290	1370906	0	True				
ANR	1370936	AssignmentExpression	stackprot = 1		1370906	0		=			
ANR	1370937	Identifier	stackprot		1370906	0					
ANR	1370938	PrimaryExpression	1		1370906	1					
ANR	1370939	IfStatement	if ( ! dc -> type_b )		1370906	3					
ANR	1370940	Condition	! dc -> type_b	25:8:352:362	1370906	0	True				
ANR	1370941	UnaryOperationExpression	! dc -> type_b		1370906	0					
ANR	1370942	UnaryOperator	!		1370906	0					
ANR	1370943	PtrMemberAccess	dc -> type_b		1370906	1					
ANR	1370944	Identifier	dc		1370906	0					
ANR	1370945	Identifier	type_b		1370906	1					
ANR	1370946	CompoundStatement		23:21:298:298	1370906	1					
ANR	1370947	IfStatement	if ( dc -> ra == 0 )		1370906	0					
ANR	1370948	Condition	dc -> ra == 0	29:12:449:459	1370906	0	True				
ANR	1370949	EqualityExpression	dc -> ra == 0		1370906	0		==			
ANR	1370950	PtrMemberAccess	dc -> ra		1370906	0					
ANR	1370951	Identifier	dc		1370906	0					
ANR	1370952	Identifier	ra		1370906	1					
ANR	1370953	PrimaryExpression	0		1370906	1					
ANR	1370954	CompoundStatement		27:25:395:395	1370906	1					
ANR	1370955	ReturnStatement	return & cpu_R [ dc -> rb ] ;	31:12:477:498	1370906	0	True				
ANR	1370956	UnaryOperationExpression	& cpu_R [ dc -> rb ]		1370906	0					
ANR	1370957	UnaryOperator	&		1370906	0					
ANR	1370958	ArrayIndexing	cpu_R [ dc -> rb ]		1370906	1					
ANR	1370959	Identifier	cpu_R		1370906	0					
ANR	1370960	PtrMemberAccess	dc -> rb		1370906	1					
ANR	1370961	Identifier	dc		1370906	0					
ANR	1370962	Identifier	rb		1370906	1					
ANR	1370963	ElseStatement	else		1370906	0					
ANR	1370964	IfStatement	if ( dc -> rb == 0 )		1370906	0					
ANR	1370965	Condition	dc -> rb == 0	33:19:520:530	1370906	0	True				
ANR	1370966	EqualityExpression	dc -> rb == 0		1370906	0		==			
ANR	1370967	PtrMemberAccess	dc -> rb		1370906	0					
ANR	1370968	Identifier	dc		1370906	0					
ANR	1370969	Identifier	rb		1370906	1					
ANR	1370970	PrimaryExpression	0		1370906	1					
ANR	1370971	CompoundStatement		31:32:466:466	1370906	1					
ANR	1370972	ReturnStatement	return & cpu_R [ dc -> ra ] ;	35:12:548:569	1370906	0	True				
ANR	1370973	UnaryOperationExpression	& cpu_R [ dc -> ra ]		1370906	0					
ANR	1370974	UnaryOperator	&		1370906	0					
ANR	1370975	ArrayIndexing	cpu_R [ dc -> ra ]		1370906	1					
ANR	1370976	Identifier	cpu_R		1370906	0					
ANR	1370977	PtrMemberAccess	dc -> ra		1370906	1					
ANR	1370978	Identifier	dc		1370906	0					
ANR	1370979	Identifier	ra		1370906	1					
ANR	1370980	IfStatement	if ( dc -> rb == 1 )		1370906	1					
ANR	1370981	Condition	dc -> rb == 1	41:12:597:607	1370906	0	True				
ANR	1370982	EqualityExpression	dc -> rb == 1		1370906	0		==			
ANR	1370983	PtrMemberAccess	dc -> rb		1370906	0					
ANR	1370984	Identifier	dc		1370906	0					
ANR	1370985	Identifier	rb		1370906	1					
ANR	1370986	PrimaryExpression	1		1370906	1					
ANR	1370987	CompoundStatement		39:25:543:543	1370906	1					
ANR	1370988	ExpressionStatement	stackprot = 1	43:12:625:638	1370906	0	True				
ANR	1370989	AssignmentExpression	stackprot = 1		1370906	0		=			
ANR	1370990	Identifier	stackprot		1370906	0					
ANR	1370991	PrimaryExpression	1		1370906	1					
ANR	1370992	ExpressionStatement	* t = tcg_temp_new ( )	49:8:662:681	1370906	2	True				
ANR	1370993	AssignmentExpression	* t = tcg_temp_new ( )		1370906	0		=			
ANR	1370994	UnaryOperationExpression	* t		1370906	0					
ANR	1370995	UnaryOperator	*		1370906	0					
ANR	1370996	Identifier	t		1370906	1					
ANR	1370997	CallExpression	tcg_temp_new ( )		1370906	1					
ANR	1370998	Callee	tcg_temp_new		1370906	0					
ANR	1370999	Identifier	tcg_temp_new		1370906	0					
ANR	1371000	ArgumentList			1370906	1					
ANR	1371001	ExpressionStatement	"tcg_gen_add_tl ( * t , cpu_R [ dc -> ra ] , cpu_R [ dc -> rb ] )"	51:8:692:740	1370906	3	True				
ANR	1371002	CallExpression	"tcg_gen_add_tl ( * t , cpu_R [ dc -> ra ] , cpu_R [ dc -> rb ] )"		1370906	0					
ANR	1371003	Callee	tcg_gen_add_tl		1370906	0					
ANR	1371004	Identifier	tcg_gen_add_tl		1370906	0					
ANR	1371005	ArgumentList	* t		1370906	1					
ANR	1371006	Argument	* t		1370906	0					
ANR	1371007	UnaryOperationExpression	* t		1370906	0					
ANR	1371008	UnaryOperator	*		1370906	0					
ANR	1371009	Identifier	t		1370906	1					
ANR	1371010	Argument	cpu_R [ dc -> ra ]		1370906	1					
ANR	1371011	ArrayIndexing	cpu_R [ dc -> ra ]		1370906	0					
ANR	1371012	Identifier	cpu_R		1370906	0					
ANR	1371013	PtrMemberAccess	dc -> ra		1370906	1					
ANR	1371014	Identifier	dc		1370906	0					
ANR	1371015	Identifier	ra		1370906	1					
ANR	1371016	Argument	cpu_R [ dc -> rb ]		1370906	2					
ANR	1371017	ArrayIndexing	cpu_R [ dc -> rb ]		1370906	0					
ANR	1371018	Identifier	cpu_R		1370906	0					
ANR	1371019	PtrMemberAccess	dc -> rb		1370906	1					
ANR	1371020	Identifier	dc		1370906	0					
ANR	1371021	Identifier	rb		1370906	1					
ANR	1371022	IfStatement	if ( stackprot )		1370906	4					
ANR	1371023	Condition	stackprot	55:12:757:765	1370906	0	True				
ANR	1371024	Identifier	stackprot		1370906	0					
ANR	1371025	CompoundStatement		53:23:701:701	1370906	1					
ANR	1371026	ExpressionStatement	"gen_helper_stackprot ( cpu_env , * t )"	57:12:783:816	1370906	0	True				
ANR	1371027	CallExpression	"gen_helper_stackprot ( cpu_env , * t )"		1370906	0					
ANR	1371028	Callee	gen_helper_stackprot		1370906	0					
ANR	1371029	Identifier	gen_helper_stackprot		1370906	0					
ANR	1371030	ArgumentList	cpu_env		1370906	1					
ANR	1371031	Argument	cpu_env		1370906	0					
ANR	1371032	Identifier	cpu_env		1370906	0					
ANR	1371033	Argument	* t		1370906	1					
ANR	1371034	UnaryOperationExpression	* t		1370906	0					
ANR	1371035	UnaryOperator	*		1370906	0					
ANR	1371036	Identifier	t		1370906	1					
ANR	1371037	ReturnStatement	return t ;	61:8:838:846	1370906	5	True				
ANR	1371038	Identifier	t		1370906	0					
ANR	1371039	IfStatement	if ( ! extimm )		1370906	4					
ANR	1371040	Condition	! extimm	67:8:887:893	1370906	0	True				
ANR	1371041	UnaryOperationExpression	! extimm		1370906	0					
ANR	1371042	UnaryOperator	!		1370906	0					
ANR	1371043	Identifier	extimm		1370906	1					
ANR	1371044	CompoundStatement		65:17:829:829	1370906	1					
ANR	1371045	IfStatement	if ( dc -> imm == 0 )		1370906	0					
ANR	1371046	Condition	dc -> imm == 0	69:12:911:922	1370906	0	True				
ANR	1371047	EqualityExpression	dc -> imm == 0		1370906	0		==			
ANR	1371048	PtrMemberAccess	dc -> imm		1370906	0					
ANR	1371049	Identifier	dc		1370906	0					
ANR	1371050	Identifier	imm		1370906	1					
ANR	1371051	PrimaryExpression	0		1370906	1					
ANR	1371052	CompoundStatement		67:26:858:858	1370906	1					
ANR	1371053	ReturnStatement	return & cpu_R [ dc -> ra ] ;	71:12:940:961	1370906	0	True				
ANR	1371054	UnaryOperationExpression	& cpu_R [ dc -> ra ]		1370906	0					
ANR	1371055	UnaryOperator	&		1370906	0					
ANR	1371056	ArrayIndexing	cpu_R [ dc -> ra ]		1370906	1					
ANR	1371057	Identifier	cpu_R		1370906	0					
ANR	1371058	PtrMemberAccess	dc -> ra		1370906	1					
ANR	1371059	Identifier	dc		1370906	0					
ANR	1371060	Identifier	ra		1370906	1					
ANR	1371061	ExpressionStatement	* t = tcg_temp_new ( )	75:8:983:1002	1370906	1	True				
ANR	1371062	AssignmentExpression	* t = tcg_temp_new ( )		1370906	0		=			
ANR	1371063	UnaryOperationExpression	* t		1370906	0					
ANR	1371064	UnaryOperator	*		1370906	0					
ANR	1371065	Identifier	t		1370906	1					
ANR	1371066	CallExpression	tcg_temp_new ( )		1370906	1					
ANR	1371067	Callee	tcg_temp_new		1370906	0					
ANR	1371068	Identifier	tcg_temp_new		1370906	0					
ANR	1371069	ArgumentList			1370906	1					
ANR	1371070	ExpressionStatement	"tcg_gen_movi_tl ( * t , ( int32_t ) ( ( int16_t ) dc -> imm ) )"	77:8:1013:1061	1370906	2	True				
ANR	1371071	CallExpression	"tcg_gen_movi_tl ( * t , ( int32_t ) ( ( int16_t ) dc -> imm ) )"		1370906	0					
ANR	1371072	Callee	tcg_gen_movi_tl		1370906	0					
ANR	1371073	Identifier	tcg_gen_movi_tl		1370906	0					
ANR	1371074	ArgumentList	* t		1370906	1					
ANR	1371075	Argument	* t		1370906	0					
ANR	1371076	UnaryOperationExpression	* t		1370906	0					
ANR	1371077	UnaryOperator	*		1370906	0					
ANR	1371078	Identifier	t		1370906	1					
ANR	1371079	Argument	( int32_t ) ( ( int16_t ) dc -> imm )		1370906	1					
ANR	1371080	CastExpression	( int32_t ) ( ( int16_t ) dc -> imm )		1370906	0					
ANR	1371081	CastTarget	int32_t		1370906	0					
ANR	1371082	CastExpression	( int16_t ) dc -> imm		1370906	1					
ANR	1371083	CastTarget	int16_t		1370906	0					
ANR	1371084	PtrMemberAccess	dc -> imm		1370906	1					
ANR	1371085	Identifier	dc		1370906	0					
ANR	1371086	Identifier	imm		1370906	1					
ANR	1371087	ExpressionStatement	"tcg_gen_add_tl ( * t , cpu_R [ dc -> ra ] , * t )"	79:8:1072:1109	1370906	3	True				
ANR	1371088	CallExpression	"tcg_gen_add_tl ( * t , cpu_R [ dc -> ra ] , * t )"		1370906	0					
ANR	1371089	Callee	tcg_gen_add_tl		1370906	0					
ANR	1371090	Identifier	tcg_gen_add_tl		1370906	0					
ANR	1371091	ArgumentList	* t		1370906	1					
ANR	1371092	Argument	* t		1370906	0					
ANR	1371093	UnaryOperationExpression	* t		1370906	0					
ANR	1371094	UnaryOperator	*		1370906	0					
ANR	1371095	Identifier	t		1370906	1					
ANR	1371096	Argument	cpu_R [ dc -> ra ]		1370906	1					
ANR	1371097	ArrayIndexing	cpu_R [ dc -> ra ]		1370906	0					
ANR	1371098	Identifier	cpu_R		1370906	0					
ANR	1371099	PtrMemberAccess	dc -> ra		1370906	1					
ANR	1371100	Identifier	dc		1370906	0					
ANR	1371101	Identifier	ra		1370906	1					
ANR	1371102	Argument	* t		1370906	2					
ANR	1371103	UnaryOperationExpression	* t		1370906	0					
ANR	1371104	UnaryOperator	*		1370906	0					
ANR	1371105	Identifier	t		1370906	1					
ANR	1371106	ElseStatement	else		1370906	0					
ANR	1371107	CompoundStatement		79:11:1056:1056	1370906	0					
ANR	1371108	ExpressionStatement	* t = tcg_temp_new ( )	83:8:1134:1153	1370906	0	True				
ANR	1371109	AssignmentExpression	* t = tcg_temp_new ( )		1370906	0		=			
ANR	1371110	UnaryOperationExpression	* t		1370906	0					
ANR	1371111	UnaryOperator	*		1370906	0					
ANR	1371112	Identifier	t		1370906	1					
ANR	1371113	CallExpression	tcg_temp_new ( )		1370906	1					
ANR	1371114	Callee	tcg_temp_new		1370906	0					
ANR	1371115	Identifier	tcg_temp_new		1370906	0					
ANR	1371116	ArgumentList			1370906	1					
ANR	1371117	ExpressionStatement	"tcg_gen_add_tl ( * t , cpu_R [ dc -> ra ] , * ( dec_alu_op_b ( dc ) ) )"	85:8:1164:1218	1370906	1	True				
ANR	1371118	CallExpression	"tcg_gen_add_tl ( * t , cpu_R [ dc -> ra ] , * ( dec_alu_op_b ( dc ) ) )"		1370906	0					
ANR	1371119	Callee	tcg_gen_add_tl		1370906	0					
ANR	1371120	Identifier	tcg_gen_add_tl		1370906	0					
ANR	1371121	ArgumentList	* t		1370906	1					
ANR	1371122	Argument	* t		1370906	0					
ANR	1371123	UnaryOperationExpression	* t		1370906	0					
ANR	1371124	UnaryOperator	*		1370906	0					
ANR	1371125	Identifier	t		1370906	1					
ANR	1371126	Argument	cpu_R [ dc -> ra ]		1370906	1					
ANR	1371127	ArrayIndexing	cpu_R [ dc -> ra ]		1370906	0					
ANR	1371128	Identifier	cpu_R		1370906	0					
ANR	1371129	PtrMemberAccess	dc -> ra		1370906	1					
ANR	1371130	Identifier	dc		1370906	0					
ANR	1371131	Identifier	ra		1370906	1					
ANR	1371132	Argument	* ( dec_alu_op_b ( dc ) )		1370906	2					
ANR	1371133	UnaryOperationExpression	* ( dec_alu_op_b ( dc ) )		1370906	0					
ANR	1371134	UnaryOperator	*		1370906	0					
ANR	1371135	CallExpression	dec_alu_op_b ( dc )		1370906	1					
ANR	1371136	Callee	dec_alu_op_b		1370906	0					
ANR	1371137	Identifier	dec_alu_op_b		1370906	0					
ANR	1371138	ArgumentList	dc		1370906	1					
ANR	1371139	Argument	dc		1370906	0					
ANR	1371140	Identifier	dc		1370906	0					
ANR	1371141	IfStatement	if ( stackprot )		1370906	5					
ANR	1371142	Condition	stackprot	91:8:1238:1246	1370906	0	True				
ANR	1371143	Identifier	stackprot		1370906	0					
ANR	1371144	CompoundStatement		89:19:1182:1182	1370906	1					
ANR	1371145	ExpressionStatement	"gen_helper_stackprot ( cpu_env , * t )"	93:8:1260:1293	1370906	0	True				
ANR	1371146	CallExpression	"gen_helper_stackprot ( cpu_env , * t )"		1370906	0					
ANR	1371147	Callee	gen_helper_stackprot		1370906	0					
ANR	1371148	Identifier	gen_helper_stackprot		1370906	0					
ANR	1371149	ArgumentList	cpu_env		1370906	1					
ANR	1371150	Argument	cpu_env		1370906	0					
ANR	1371151	Identifier	cpu_env		1370906	0					
ANR	1371152	Argument	* t		1370906	1					
ANR	1371153	UnaryOperationExpression	* t		1370906	0					
ANR	1371154	UnaryOperator	*		1370906	0					
ANR	1371155	Identifier	t		1370906	1					
ANR	1371156	ReturnStatement	return t ;	97:4:1307:1315	1370906	6	True				
ANR	1371157	Identifier	t		1370906	0					
ANR	1371158	ReturnType	static inline TCGv *		1370906	1					
ANR	1371159	Identifier	compute_ldst_addr		1370906	2					
ANR	1371160	ParameterList	"DisasContext * dc , TCGv * t"		1370906	3					
ANR	1371161	Parameter	DisasContext * dc	1:38:38:53	1370906	0	True				
ANR	1371162	ParameterType	DisasContext *		1370906	0					
ANR	1371163	Identifier	dc		1370906	1					
ANR	1371164	Parameter	TCGv * t	1:56:56:62	1370906	1	True				
ANR	1371165	ParameterType	TCGv *		1370906	0					
ANR	1371166	Identifier	t		1370906	1					
ANR	1371167	CFGEntryNode	ENTRY		1370906		True				
ANR	1371168	CFGExitNode	EXIT		1370906		True				
ANR	1371169	Symbol	dc -> tb_flags		1370906						
ANR	1371170	Symbol	dc -> type_b		1370906						
ANR	1371171	Symbol	dc -> imm		1370906						
ANR	1371172	Symbol	extimm		1370906						
ANR	1371173	Symbol	* ( dec_alu_op_b ( dc ) )		1370906						
ANR	1371174	Symbol	stackprot		1370906						
ANR	1371175	Symbol	dec_alu_op_b		1370906						
ANR	1371176	Symbol	* dc		1370906						
ANR	1371177	Symbol	* * dc		1370906						
ANR	1371178	Symbol	tcg_temp_new		1370906						
ANR	1371179	Symbol	dc -> ra		1370906						
ANR	1371180	Symbol	* cpu_R		1370906						
ANR	1371181	Symbol	dc -> rb		1370906						
ANR	1371182	Symbol	cpu_env		1370906						
ANR	1371183	Symbol	t		1370906						
ANR	1371184	Symbol	IMM_FLAG		1370906						
ANR	1371185	Symbol	* dc -> ra		1370906						
ANR	1371186	Symbol	* dec_alu_op_b		1370906						
ANR	1371187	Symbol	cpu_R		1370906						
ANR	1371188	Symbol	* t		1370906						
ANR	1371189	Symbol	* dc -> rb		1370906						
ANR	1371190	Symbol	dc		1370906						
