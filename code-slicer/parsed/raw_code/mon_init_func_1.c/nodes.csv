command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5558860	File	/home/p4ultr4n/workplace/ReVeal/raw_code/mon_init_func_1.c								
ANR	5558861	Function	mon_init_func	1:0:0:945							
ANR	5558862	FunctionDef	"mon_init_func (QemuOpts * opts , void * opaque)"		5558861	0					
ANR	5558863	CompoundStatement		3:0:56:945	5558861	0					
ANR	5558864	IdentifierDeclStatement	CharDriverState * chr ;	5:4:63:83	5558861	0	True				
ANR	5558865	IdentifierDecl	* chr		5558861	0					
ANR	5558866	IdentifierDeclType	CharDriverState *		5558861	0					
ANR	5558867	Identifier	chr		5558861	1					
ANR	5558868	IdentifierDeclStatement	const char * chardev ;	7:4:90:109	5558861	1	True				
ANR	5558869	IdentifierDecl	* chardev		5558861	0					
ANR	5558870	IdentifierDeclType	const char *		5558861	0					
ANR	5558871	Identifier	chardev		5558861	1					
ANR	5558872	IdentifierDeclStatement	const char * mode ;	9:4:116:132	5558861	2	True				
ANR	5558873	IdentifierDecl	* mode		5558861	0					
ANR	5558874	IdentifierDeclType	const char *		5558861	0					
ANR	5558875	Identifier	mode		5558861	1					
ANR	5558876	IdentifierDeclStatement	int flags ;	11:4:139:148	5558861	3	True				
ANR	5558877	IdentifierDecl	flags		5558861	0					
ANR	5558878	IdentifierDeclType	int		5558861	0					
ANR	5558879	Identifier	flags		5558861	1					
ANR	5558880	ExpressionStatement	"mode = qemu_opt_get ( opts , ""mode"" )"	15:4:157:190	5558861	4	True				
ANR	5558881	AssignmentExpression	"mode = qemu_opt_get ( opts , ""mode"" )"		5558861	0		=			
ANR	5558882	Identifier	mode		5558861	0					
ANR	5558883	CallExpression	"qemu_opt_get ( opts , ""mode"" )"		5558861	1					
ANR	5558884	Callee	qemu_opt_get		5558861	0					
ANR	5558885	Identifier	qemu_opt_get		5558861	0					
ANR	5558886	ArgumentList	opts		5558861	1					
ANR	5558887	Argument	opts		5558861	0					
ANR	5558888	Identifier	opts		5558861	0					
ANR	5558889	Argument	"""mode"""		5558861	1					
ANR	5558890	PrimaryExpression	"""mode"""		5558861	0					
ANR	5558891	IfStatement	if ( mode == NULL )		5558861	5					
ANR	5558892	Condition	mode == NULL	17:8:201:212	5558861	0	True				
ANR	5558893	EqualityExpression	mode == NULL		5558861	0		==			
ANR	5558894	Identifier	mode		5558861	0					
ANR	5558895	Identifier	NULL		5558861	1					
ANR	5558896	CompoundStatement		15:22:158:158	5558861	1					
ANR	5558897	ExpressionStatement	"mode = ""readline"""	19:8:226:243	5558861	0	True				
ANR	5558898	AssignmentExpression	"mode = ""readline"""		5558861	0		=			
ANR	5558899	Identifier	mode		5558861	0					
ANR	5558900	PrimaryExpression	"""readline"""		5558861	1					
ANR	5558901	IfStatement	"if ( strcmp ( mode , ""readline"" ) == 0 )"		5558861	6					
ANR	5558902	Condition	"strcmp ( mode , ""readline"" ) == 0"	23:8:261:289	5558861	0	True				
ANR	5558903	EqualityExpression	"strcmp ( mode , ""readline"" ) == 0"		5558861	0		==			
ANR	5558904	CallExpression	"strcmp ( mode , ""readline"" )"		5558861	0					
ANR	5558905	Callee	strcmp		5558861	0					
ANR	5558906	Identifier	strcmp		5558861	0					
ANR	5558907	ArgumentList	mode		5558861	1					
ANR	5558908	Argument	mode		5558861	0					
ANR	5558909	Identifier	mode		5558861	0					
ANR	5558910	Argument	"""readline"""		5558861	1					
ANR	5558911	PrimaryExpression	"""readline"""		5558861	0					
ANR	5558912	PrimaryExpression	0		5558861	1					
ANR	5558913	CompoundStatement		21:39:235:235	5558861	1					
ANR	5558914	ExpressionStatement	flags = MONITOR_USE_READLINE	25:8:303:331	5558861	0	True				
ANR	5558915	AssignmentExpression	flags = MONITOR_USE_READLINE		5558861	0		=			
ANR	5558916	Identifier	flags		5558861	0					
ANR	5558917	Identifier	MONITOR_USE_READLINE		5558861	1					
ANR	5558918	ElseStatement	else		5558861	0					
ANR	5558919	IfStatement	"if ( strcmp ( mode , ""control"" ) == 0 )"		5558861	0					
ANR	5558920	Condition	"strcmp ( mode , ""control"" ) == 0"	27:15:349:376	5558861	0	True				
ANR	5558921	EqualityExpression	"strcmp ( mode , ""control"" ) == 0"		5558861	0		==			
ANR	5558922	CallExpression	"strcmp ( mode , ""control"" )"		5558861	0					
ANR	5558923	Callee	strcmp		5558861	0					
ANR	5558924	Identifier	strcmp		5558861	0					
ANR	5558925	ArgumentList	mode		5558861	1					
ANR	5558926	Argument	mode		5558861	0					
ANR	5558927	Identifier	mode		5558861	0					
ANR	5558928	Argument	"""control"""		5558861	1					
ANR	5558929	PrimaryExpression	"""control"""		5558861	0					
ANR	5558930	PrimaryExpression	0		5558861	1					
ANR	5558931	CompoundStatement		25:45:322:322	5558861	1					
ANR	5558932	ExpressionStatement	flags = MONITOR_USE_CONTROL	29:8:390:417	5558861	0	True				
ANR	5558933	AssignmentExpression	flags = MONITOR_USE_CONTROL		5558861	0		=			
ANR	5558934	Identifier	flags		5558861	0					
ANR	5558935	Identifier	MONITOR_USE_CONTROL		5558861	1					
ANR	5558936	ElseStatement	else		5558861	0					
ANR	5558937	CompoundStatement		29:11:374:374	5558861	0					
ANR	5558938	ExpressionStatement	"fprintf ( stderr , ""unknown monitor mode \\""%s\\""\\n"" , mode )"	33:8:442:496	5558861	0	True				
ANR	5558939	CallExpression	"fprintf ( stderr , ""unknown monitor mode \\""%s\\""\\n"" , mode )"		5558861	0					
ANR	5558940	Callee	fprintf		5558861	0					
ANR	5558941	Identifier	fprintf		5558861	0					
ANR	5558942	ArgumentList	stderr		5558861	1					
ANR	5558943	Argument	stderr		5558861	0					
ANR	5558944	Identifier	stderr		5558861	0					
ANR	5558945	Argument	"""unknown monitor mode \\""%s\\""\\n"""		5558861	1					
ANR	5558946	PrimaryExpression	"""unknown monitor mode \\""%s\\""\\n"""		5558861	0					
ANR	5558947	Argument	mode		5558861	2					
ANR	5558948	Identifier	mode		5558861	0					
ANR	5558949	ExpressionStatement	exit ( 1 )	35:8:507:514	5558861	1	True				
ANR	5558950	CallExpression	exit ( 1 )		5558861	0					
ANR	5558951	Callee	exit		5558861	0					
ANR	5558952	Identifier	exit		5558861	0					
ANR	5558953	ArgumentList	1		5558861	1					
ANR	5558954	Argument	1		5558861	0					
ANR	5558955	PrimaryExpression	1		5558861	0					
ANR	5558956	IfStatement	"if ( qemu_opt_get_bool ( opts , ""pretty"" , 0 ) )"		5558861	7					
ANR	5558957	Condition	"qemu_opt_get_bool ( opts , ""pretty"" , 0 )"	41:8:534:569	5558861	0	True				
ANR	5558958	CallExpression	"qemu_opt_get_bool ( opts , ""pretty"" , 0 )"		5558861	0					
ANR	5558959	Callee	qemu_opt_get_bool		5558861	0					
ANR	5558960	Identifier	qemu_opt_get_bool		5558861	0					
ANR	5558961	ArgumentList	opts		5558861	1					
ANR	5558962	Argument	opts		5558861	0					
ANR	5558963	Identifier	opts		5558861	0					
ANR	5558964	Argument	"""pretty"""		5558861	1					
ANR	5558965	PrimaryExpression	"""pretty"""		5558861	0					
ANR	5558966	Argument	0		5558861	2					
ANR	5558967	PrimaryExpression	0		5558861	0					
ANR	5558968	ExpressionStatement	flags |= MONITOR_USE_PRETTY	43:8:581:608	5558861	1	True				
ANR	5558969	AssignmentExpression	flags |= MONITOR_USE_PRETTY		5558861	0		|=			
ANR	5558970	Identifier	flags		5558861	0					
ANR	5558971	Identifier	MONITOR_USE_PRETTY		5558861	1					
ANR	5558972	IfStatement	"if ( qemu_opt_get_bool ( opts , ""default"" , 0 ) )"		5558861	8					
ANR	5558973	Condition	"qemu_opt_get_bool ( opts , ""default"" , 0 )"	47:8:621:657	5558861	0	True				
ANR	5558974	CallExpression	"qemu_opt_get_bool ( opts , ""default"" , 0 )"		5558861	0					
ANR	5558975	Callee	qemu_opt_get_bool		5558861	0					
ANR	5558976	Identifier	qemu_opt_get_bool		5558861	0					
ANR	5558977	ArgumentList	opts		5558861	1					
ANR	5558978	Argument	opts		5558861	0					
ANR	5558979	Identifier	opts		5558861	0					
ANR	5558980	Argument	"""default"""		5558861	1					
ANR	5558981	PrimaryExpression	"""default"""		5558861	0					
ANR	5558982	Argument	0		5558861	2					
ANR	5558983	PrimaryExpression	0		5558861	0					
ANR	5558984	ExpressionStatement	flags |= MONITOR_IS_DEFAULT	49:8:669:696	5558861	1	True				
ANR	5558985	AssignmentExpression	flags |= MONITOR_IS_DEFAULT		5558861	0		|=			
ANR	5558986	Identifier	flags		5558861	0					
ANR	5558987	Identifier	MONITOR_IS_DEFAULT		5558861	1					
ANR	5558988	ExpressionStatement	"chardev = qemu_opt_get ( opts , ""chardev"" )"	53:4:705:744	5558861	9	True				
ANR	5558989	AssignmentExpression	"chardev = qemu_opt_get ( opts , ""chardev"" )"		5558861	0		=			
ANR	5558990	Identifier	chardev		5558861	0					
ANR	5558991	CallExpression	"qemu_opt_get ( opts , ""chardev"" )"		5558861	1					
ANR	5558992	Callee	qemu_opt_get		5558861	0					
ANR	5558993	Identifier	qemu_opt_get		5558861	0					
ANR	5558994	ArgumentList	opts		5558861	1					
ANR	5558995	Argument	opts		5558861	0					
ANR	5558996	Identifier	opts		5558861	0					
ANR	5558997	Argument	"""chardev"""		5558861	1					
ANR	5558998	PrimaryExpression	"""chardev"""		5558861	0					
ANR	5558999	ExpressionStatement	chr = qemu_chr_find ( chardev )	55:4:751:779	5558861	10	True				
ANR	5559000	AssignmentExpression	chr = qemu_chr_find ( chardev )		5558861	0		=			
ANR	5559001	Identifier	chr		5558861	0					
ANR	5559002	CallExpression	qemu_chr_find ( chardev )		5558861	1					
ANR	5559003	Callee	qemu_chr_find		5558861	0					
ANR	5559004	Identifier	qemu_chr_find		5558861	0					
ANR	5559005	ArgumentList	chardev		5558861	1					
ANR	5559006	Argument	chardev		5558861	0					
ANR	5559007	Identifier	chardev		5558861	0					
ANR	5559008	IfStatement	if ( chr == NULL )		5558861	11					
ANR	5559009	Condition	chr == NULL	57:8:790:800	5558861	0	True				
ANR	5559010	EqualityExpression	chr == NULL		5558861	0		==			
ANR	5559011	Identifier	chr		5558861	0					
ANR	5559012	Identifier	NULL		5558861	1					
ANR	5559013	CompoundStatement		55:21:746:746	5558861	1					
ANR	5559014	ExpressionStatement	"fprintf ( stderr , ""chardev \\""%s\\"" not found\\n"" , chardev )"	59:8:814:868	5558861	0	True				
ANR	5559015	CallExpression	"fprintf ( stderr , ""chardev \\""%s\\"" not found\\n"" , chardev )"		5558861	0					
ANR	5559016	Callee	fprintf		5558861	0					
ANR	5559017	Identifier	fprintf		5558861	0					
ANR	5559018	ArgumentList	stderr		5558861	1					
ANR	5559019	Argument	stderr		5558861	0					
ANR	5559020	Identifier	stderr		5558861	0					
ANR	5559021	Argument	"""chardev \\""%s\\"" not found\\n"""		5558861	1					
ANR	5559022	PrimaryExpression	"""chardev \\""%s\\"" not found\\n"""		5558861	0					
ANR	5559023	Argument	chardev		5558861	2					
ANR	5559024	Identifier	chardev		5558861	0					
ANR	5559025	ExpressionStatement	exit ( 1 )	61:8:879:886	5558861	1	True				
ANR	5559026	CallExpression	exit ( 1 )		5558861	0					
ANR	5559027	Callee	exit		5558861	0					
ANR	5559028	Identifier	exit		5558861	0					
ANR	5559029	ArgumentList	1		5558861	1					
ANR	5559030	Argument	1		5558861	0					
ANR	5559031	PrimaryExpression	1		5558861	0					
ANR	5559032	ExpressionStatement	"monitor_init ( chr , flags )"	68:4:903:927	5558861	12	True				
ANR	5559033	CallExpression	"monitor_init ( chr , flags )"		5558861	0					
ANR	5559034	Callee	monitor_init		5558861	0					
ANR	5559035	Identifier	monitor_init		5558861	0					
ANR	5559036	ArgumentList	chr		5558861	1					
ANR	5559037	Argument	chr		5558861	0					
ANR	5559038	Identifier	chr		5558861	0					
ANR	5559039	Argument	flags		5558861	1					
ANR	5559040	Identifier	flags		5558861	0					
ANR	5559041	ReturnStatement	return 0 ;	70:4:934:942	5558861	13	True				
ANR	5559042	PrimaryExpression	0		5558861	0					
ANR	5559043	ReturnType	static int		5558861	1					
ANR	5559044	Identifier	mon_init_func		5558861	2					
ANR	5559045	ParameterList	"QemuOpts * opts , void * opaque"		5558861	3					
ANR	5559046	Parameter	QemuOpts * opts	1:25:25:38	5558861	0	True				
ANR	5559047	ParameterType	QemuOpts *		5558861	0					
ANR	5559048	Identifier	opts		5558861	1					
ANR	5559049	Parameter	void * opaque	1:41:41:52	5558861	1	True				
ANR	5559050	ParameterType	void *		5558861	0					
ANR	5559051	Identifier	opaque		5558861	1					
ANR	5559052	CFGEntryNode	ENTRY		5558861		True				
ANR	5559053	CFGExitNode	EXIT		5558861		True				
ANR	5559054	Symbol	strcmp		5558861						
ANR	5559055	Symbol	opaque		5558861						
ANR	5559056	Symbol	NULL		5558861						
ANR	5559057	Symbol	qemu_opt_get		5558861						
ANR	5559058	Symbol	flags		5558861						
ANR	5559059	Symbol	MONITOR_USE_READLINE		5558861						
ANR	5559060	Symbol	MONITOR_IS_DEFAULT		5558861						
ANR	5559061	Symbol	chr		5558861						
ANR	5559062	Symbol	stderr		5558861						
ANR	5559063	Symbol	mode		5558861						
ANR	5559064	Symbol	chardev		5558861						
ANR	5559065	Symbol	opts		5558861						
ANR	5559066	Symbol	MONITOR_USE_CONTROL		5558861						
ANR	5559067	Symbol	MONITOR_USE_PRETTY		5558861						
ANR	5559068	Symbol	qemu_opt_get_bool		5558861						
ANR	5559069	Symbol	qemu_chr_find		5558861						
