command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8064150	File	/home/p4ultr4n/workplace/ReVeal/raw_code/svq3_add_idct_c_1.c								
ANR	8064151	Function	svq3_add_idct_c	1:0:0:1694							
ANR	8064152	FunctionDef	"svq3_add_idct_c (uint8_t * dst , int16_t * block , int stride , int qp , int dc)"		8064151	0					
ANR	8064153	CompoundStatement		5:0:116:1694	8064151	0					
ANR	8064154	IdentifierDeclStatement	const int qmul = svq3_dequant_coeff [ qp ] ;	7:4:123:162	8064151	0	True				
ANR	8064155	IdentifierDecl	qmul = svq3_dequant_coeff [ qp ]		8064151	0					
ANR	8064156	IdentifierDeclType	const int		8064151	0					
ANR	8064157	Identifier	qmul		8064151	1					
ANR	8064158	AssignmentExpression	qmul = svq3_dequant_coeff [ qp ]		8064151	2		=			
ANR	8064159	Identifier	qmul		8064151	0					
ANR	8064160	ArrayIndexing	svq3_dequant_coeff [ qp ]		8064151	1					
ANR	8064161	Identifier	svq3_dequant_coeff		8064151	0					
ANR	8064162	Identifier	qp		8064151	1					
ANR	8064163	IdentifierDeclStatement	int i ;	9:4:169:174	8064151	1	True				
ANR	8064164	IdentifierDecl	i		8064151	0					
ANR	8064165	IdentifierDeclType	int		8064151	0					
ANR	8064166	Identifier	i		8064151	1					
ANR	8064167	IfStatement	if ( dc )		8064151	2					
ANR	8064168	Condition	dc	13:8:187:188	8064151	0	True				
ANR	8064169	Identifier	dc		8064151	0					
ANR	8064170	CompoundStatement		9:12:74:74	8064151	1					
ANR	8064171	ExpressionStatement	dc = 13 * 13 * ( dc == 1 ? 1538U * block [ 0 ] : qmul * ( block [ 0 ] >> 3 ) / 2 )	15:8:202:318	8064151	0	True				
ANR	8064172	AssignmentExpression	dc = 13 * 13 * ( dc == 1 ? 1538U * block [ 0 ] : qmul * ( block [ 0 ] >> 3 ) / 2 )		8064151	0		=			
ANR	8064173	Identifier	dc		8064151	0					
ANR	8064174	MultiplicativeExpression	13 * 13 * ( dc == 1 ? 1538U * block [ 0 ] : qmul * ( block [ 0 ] >> 3 ) / 2 )		8064151	1		*			
ANR	8064175	PrimaryExpression	13		8064151	0					
ANR	8064176	MultiplicativeExpression	13 * ( dc == 1 ? 1538U * block [ 0 ] : qmul * ( block [ 0 ] >> 3 ) / 2 )		8064151	1		*			
ANR	8064177	PrimaryExpression	13		8064151	0					
ANR	8064178	ConditionalExpression	dc == 1 ? 1538U * block [ 0 ] : qmul * ( block [ 0 ] >> 3 ) / 2		8064151	1					
ANR	8064179	Condition	dc == 1		8064151	0					
ANR	8064180	EqualityExpression	dc == 1		8064151	0		==			
ANR	8064181	Identifier	dc		8064151	0					
ANR	8064182	PrimaryExpression	1		8064151	1					
ANR	8064183	MultiplicativeExpression	1538U * block [ 0 ]		8064151	1		*			
ANR	8064184	PrimaryExpression	1538U		8064151	0					
ANR	8064185	ArrayIndexing	block [ 0 ]		8064151	1					
ANR	8064186	Identifier	block		8064151	0					
ANR	8064187	PrimaryExpression	0		8064151	1					
ANR	8064188	MultiplicativeExpression	qmul * ( block [ 0 ] >> 3 ) / 2		8064151	2		*			
ANR	8064189	Identifier	qmul		8064151	0					
ANR	8064190	MultiplicativeExpression	( block [ 0 ] >> 3 ) / 2		8064151	1		/			
ANR	8064191	ShiftExpression	block [ 0 ] >> 3		8064151	0		>>			
ANR	8064192	ArrayIndexing	block [ 0 ]		8064151	0					
ANR	8064193	Identifier	block		8064151	0					
ANR	8064194	PrimaryExpression	0		8064151	1					
ANR	8064195	PrimaryExpression	3		8064151	1					
ANR	8064196	PrimaryExpression	2		8064151	1					
ANR	8064197	ExpressionStatement	block [ 0 ] = 0	19:8:329:341	8064151	1	True				
ANR	8064198	AssignmentExpression	block [ 0 ] = 0		8064151	0		=			
ANR	8064199	ArrayIndexing	block [ 0 ]		8064151	0					
ANR	8064200	Identifier	block		8064151	0					
ANR	8064201	PrimaryExpression	0		8064151	1					
ANR	8064202	PrimaryExpression	0		8064151	1					
ANR	8064203	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		8064151	3					
ANR	8064204	ForInit	i = 0 ;	25:9:362:367	8064151	0	True				
ANR	8064205	AssignmentExpression	i = 0		8064151	0		=			
ANR	8064206	Identifier	i		8064151	0					
ANR	8064207	PrimaryExpression	0		8064151	1					
ANR	8064208	Condition	i < 4	25:16:369:373	8064151	1	True				
ANR	8064209	RelationalExpression	i < 4		8064151	0		<			
ANR	8064210	Identifier	i		8064151	0					
ANR	8064211	PrimaryExpression	4		8064151	1					
ANR	8064212	PostIncDecOperationExpression	i ++	25:23:376:378	8064151	2	True				
ANR	8064213	Identifier	i		8064151	0					
ANR	8064214	IncDec	++		8064151	1					
ANR	8064215	CompoundStatement		29:8:493:554	8064151	3					
ANR	8064216	IdentifierDeclStatement	const int z0 = 13 * ( block [ 0 + 4 * i ] + block [ 2 + 4 * i ] ) ;	27:8:392:454	8064151	0	True				
ANR	8064217	IdentifierDecl	z0 = 13 * ( block [ 0 + 4 * i ] + block [ 2 + 4 * i ] )		8064151	0					
ANR	8064218	IdentifierDeclType	const int		8064151	0					
ANR	8064219	Identifier	z0		8064151	1					
ANR	8064220	AssignmentExpression	z0 = 13 * ( block [ 0 + 4 * i ] + block [ 2 + 4 * i ] )		8064151	2		=			
ANR	8064221	Identifier	z0		8064151	0					
ANR	8064222	MultiplicativeExpression	13 * ( block [ 0 + 4 * i ] + block [ 2 + 4 * i ] )		8064151	1		*			
ANR	8064223	PrimaryExpression	13		8064151	0					
ANR	8064224	AdditiveExpression	block [ 0 + 4 * i ] + block [ 2 + 4 * i ]		8064151	1		+			
ANR	8064225	ArrayIndexing	block [ 0 + 4 * i ]		8064151	0					
ANR	8064226	Identifier	block		8064151	0					
ANR	8064227	AdditiveExpression	0 + 4 * i		8064151	1		+			
ANR	8064228	PrimaryExpression	0		8064151	0					
ANR	8064229	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064230	PrimaryExpression	4		8064151	0					
ANR	8064231	Identifier	i		8064151	1					
ANR	8064232	ArrayIndexing	block [ 2 + 4 * i ]		8064151	1					
ANR	8064233	Identifier	block		8064151	0					
ANR	8064234	AdditiveExpression	2 + 4 * i		8064151	1		+			
ANR	8064235	PrimaryExpression	2		8064151	0					
ANR	8064236	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064237	PrimaryExpression	4		8064151	0					
ANR	8064238	Identifier	i		8064151	1					
ANR	8064239	IdentifierDeclStatement	const int z1 = 13 * ( block [ 0 + 4 * i ] - block [ 2 + 4 * i ] ) ;	29:8:465:527	8064151	1	True				
ANR	8064240	IdentifierDecl	z1 = 13 * ( block [ 0 + 4 * i ] - block [ 2 + 4 * i ] )		8064151	0					
ANR	8064241	IdentifierDeclType	const int		8064151	0					
ANR	8064242	Identifier	z1		8064151	1					
ANR	8064243	AssignmentExpression	z1 = 13 * ( block [ 0 + 4 * i ] - block [ 2 + 4 * i ] )		8064151	2		=			
ANR	8064244	Identifier	z1		8064151	0					
ANR	8064245	MultiplicativeExpression	13 * ( block [ 0 + 4 * i ] - block [ 2 + 4 * i ] )		8064151	1		*			
ANR	8064246	PrimaryExpression	13		8064151	0					
ANR	8064247	AdditiveExpression	block [ 0 + 4 * i ] - block [ 2 + 4 * i ]		8064151	1		-			
ANR	8064248	ArrayIndexing	block [ 0 + 4 * i ]		8064151	0					
ANR	8064249	Identifier	block		8064151	0					
ANR	8064250	AdditiveExpression	0 + 4 * i		8064151	1		+			
ANR	8064251	PrimaryExpression	0		8064151	0					
ANR	8064252	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064253	PrimaryExpression	4		8064151	0					
ANR	8064254	Identifier	i		8064151	1					
ANR	8064255	ArrayIndexing	block [ 2 + 4 * i ]		8064151	1					
ANR	8064256	Identifier	block		8064151	0					
ANR	8064257	AdditiveExpression	2 + 4 * i		8064151	1		+			
ANR	8064258	PrimaryExpression	2		8064151	0					
ANR	8064259	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064260	PrimaryExpression	4		8064151	0					
ANR	8064261	Identifier	i		8064151	1					
ANR	8064262	IdentifierDeclStatement	const int z2 = 7 * block [ 1 + 4 * i ] - 17 * block [ 3 + 4 * i ] ;	31:8:538:599	8064151	2	True				
ANR	8064263	IdentifierDecl	z2 = 7 * block [ 1 + 4 * i ] - 17 * block [ 3 + 4 * i ]		8064151	0					
ANR	8064264	IdentifierDeclType	const int		8064151	0					
ANR	8064265	Identifier	z2		8064151	1					
ANR	8064266	AssignmentExpression	z2 = 7 * block [ 1 + 4 * i ] - 17 * block [ 3 + 4 * i ]		8064151	2		=			
ANR	8064267	Identifier	z2		8064151	0					
ANR	8064268	AdditiveExpression	7 * block [ 1 + 4 * i ] - 17 * block [ 3 + 4 * i ]		8064151	1		-			
ANR	8064269	MultiplicativeExpression	7 * block [ 1 + 4 * i ]		8064151	0		*			
ANR	8064270	PrimaryExpression	7		8064151	0					
ANR	8064271	ArrayIndexing	block [ 1 + 4 * i ]		8064151	1					
ANR	8064272	Identifier	block		8064151	0					
ANR	8064273	AdditiveExpression	1 + 4 * i		8064151	1		+			
ANR	8064274	PrimaryExpression	1		8064151	0					
ANR	8064275	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064276	PrimaryExpression	4		8064151	0					
ANR	8064277	Identifier	i		8064151	1					
ANR	8064278	MultiplicativeExpression	17 * block [ 3 + 4 * i ]		8064151	1		*			
ANR	8064279	PrimaryExpression	17		8064151	0					
ANR	8064280	ArrayIndexing	block [ 3 + 4 * i ]		8064151	1					
ANR	8064281	Identifier	block		8064151	0					
ANR	8064282	AdditiveExpression	3 + 4 * i		8064151	1		+			
ANR	8064283	PrimaryExpression	3		8064151	0					
ANR	8064284	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064285	PrimaryExpression	4		8064151	0					
ANR	8064286	Identifier	i		8064151	1					
ANR	8064287	IdentifierDeclStatement	const int z3 = 17 * block [ 1 + 4 * i ] + 7 * block [ 3 + 4 * i ] ;	33:8:610:671	8064151	3	True				
ANR	8064288	IdentifierDecl	z3 = 17 * block [ 1 + 4 * i ] + 7 * block [ 3 + 4 * i ]		8064151	0					
ANR	8064289	IdentifierDeclType	const int		8064151	0					
ANR	8064290	Identifier	z3		8064151	1					
ANR	8064291	AssignmentExpression	z3 = 17 * block [ 1 + 4 * i ] + 7 * block [ 3 + 4 * i ]		8064151	2		=			
ANR	8064292	Identifier	z3		8064151	0					
ANR	8064293	AdditiveExpression	17 * block [ 1 + 4 * i ] + 7 * block [ 3 + 4 * i ]		8064151	1		+			
ANR	8064294	MultiplicativeExpression	17 * block [ 1 + 4 * i ]		8064151	0		*			
ANR	8064295	PrimaryExpression	17		8064151	0					
ANR	8064296	ArrayIndexing	block [ 1 + 4 * i ]		8064151	1					
ANR	8064297	Identifier	block		8064151	0					
ANR	8064298	AdditiveExpression	1 + 4 * i		8064151	1		+			
ANR	8064299	PrimaryExpression	1		8064151	0					
ANR	8064300	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064301	PrimaryExpression	4		8064151	0					
ANR	8064302	Identifier	i		8064151	1					
ANR	8064303	MultiplicativeExpression	7 * block [ 3 + 4 * i ]		8064151	1		*			
ANR	8064304	PrimaryExpression	7		8064151	0					
ANR	8064305	ArrayIndexing	block [ 3 + 4 * i ]		8064151	1					
ANR	8064306	Identifier	block		8064151	0					
ANR	8064307	AdditiveExpression	3 + 4 * i		8064151	1		+			
ANR	8064308	PrimaryExpression	3		8064151	0					
ANR	8064309	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064310	PrimaryExpression	4		8064151	0					
ANR	8064311	Identifier	i		8064151	1					
ANR	8064312	ExpressionStatement	block [ 0 + 4 * i ] = z0 + z3	37:8:684:710	8064151	4	True				
ANR	8064313	AssignmentExpression	block [ 0 + 4 * i ] = z0 + z3		8064151	0		=			
ANR	8064314	ArrayIndexing	block [ 0 + 4 * i ]		8064151	0					
ANR	8064315	Identifier	block		8064151	0					
ANR	8064316	AdditiveExpression	0 + 4 * i		8064151	1		+			
ANR	8064317	PrimaryExpression	0		8064151	0					
ANR	8064318	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064319	PrimaryExpression	4		8064151	0					
ANR	8064320	Identifier	i		8064151	1					
ANR	8064321	AdditiveExpression	z0 + z3		8064151	1		+			
ANR	8064322	Identifier	z0		8064151	0					
ANR	8064323	Identifier	z3		8064151	1					
ANR	8064324	ExpressionStatement	block [ 1 + 4 * i ] = z1 + z2	39:8:721:747	8064151	5	True				
ANR	8064325	AssignmentExpression	block [ 1 + 4 * i ] = z1 + z2		8064151	0		=			
ANR	8064326	ArrayIndexing	block [ 1 + 4 * i ]		8064151	0					
ANR	8064327	Identifier	block		8064151	0					
ANR	8064328	AdditiveExpression	1 + 4 * i		8064151	1		+			
ANR	8064329	PrimaryExpression	1		8064151	0					
ANR	8064330	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064331	PrimaryExpression	4		8064151	0					
ANR	8064332	Identifier	i		8064151	1					
ANR	8064333	AdditiveExpression	z1 + z2		8064151	1		+			
ANR	8064334	Identifier	z1		8064151	0					
ANR	8064335	Identifier	z2		8064151	1					
ANR	8064336	ExpressionStatement	block [ 2 + 4 * i ] = z1 - z2	41:8:758:784	8064151	6	True				
ANR	8064337	AssignmentExpression	block [ 2 + 4 * i ] = z1 - z2		8064151	0		=			
ANR	8064338	ArrayIndexing	block [ 2 + 4 * i ]		8064151	0					
ANR	8064339	Identifier	block		8064151	0					
ANR	8064340	AdditiveExpression	2 + 4 * i		8064151	1		+			
ANR	8064341	PrimaryExpression	2		8064151	0					
ANR	8064342	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064343	PrimaryExpression	4		8064151	0					
ANR	8064344	Identifier	i		8064151	1					
ANR	8064345	AdditiveExpression	z1 - z2		8064151	1		-			
ANR	8064346	Identifier	z1		8064151	0					
ANR	8064347	Identifier	z2		8064151	1					
ANR	8064348	ExpressionStatement	block [ 3 + 4 * i ] = z0 - z3	43:8:795:821	8064151	7	True				
ANR	8064349	AssignmentExpression	block [ 3 + 4 * i ] = z0 - z3		8064151	0		=			
ANR	8064350	ArrayIndexing	block [ 3 + 4 * i ]		8064151	0					
ANR	8064351	Identifier	block		8064151	0					
ANR	8064352	AdditiveExpression	3 + 4 * i		8064151	1		+			
ANR	8064353	PrimaryExpression	3		8064151	0					
ANR	8064354	MultiplicativeExpression	4 * i		8064151	1		*			
ANR	8064355	PrimaryExpression	4		8064151	0					
ANR	8064356	Identifier	i		8064151	1					
ANR	8064357	AdditiveExpression	z0 - z3		8064151	1		-			
ANR	8064358	Identifier	z0		8064151	0					
ANR	8064359	Identifier	z3		8064151	1					
ANR	8064360	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		8064151	4					
ANR	8064361	ForInit	i = 0 ;	49:9:842:847	8064151	0	True				
ANR	8064362	AssignmentExpression	i = 0		8064151	0		=			
ANR	8064363	Identifier	i		8064151	0					
ANR	8064364	PrimaryExpression	0		8064151	1					
ANR	8064365	Condition	i < 4	49:16:849:853	8064151	1	True				
ANR	8064366	RelationalExpression	i < 4		8064151	0		<			
ANR	8064367	Identifier	i		8064151	0					
ANR	8064368	PrimaryExpression	4		8064151	1					
ANR	8064369	PostIncDecOperationExpression	i ++	49:23:856:858	8064151	2	True				
ANR	8064370	Identifier	i		8064151	0					
ANR	8064371	IncDec	++		8064151	1					
ANR	8064372	CompoundStatement		55:8:1065:1094	8064151	3					
ANR	8064373	Statement	const	51:8:872:876	8064151	0	True				
ANR	8064374	IdentifierDeclStatement	unsigned z0 = 13 * ( block [ i + 4 * 0 ] + block [ i + 4 * 2 ] ) ;	51:14:878:939	8064151	1	True				
ANR	8064375	IdentifierDecl	z0 = 13 * ( block [ i + 4 * 0 ] + block [ i + 4 * 2 ] )		8064151	0					
ANR	8064376	IdentifierDeclType	unsigned		8064151	0					
ANR	8064377	Identifier	z0		8064151	1					
ANR	8064378	AssignmentExpression	z0 = 13 * ( block [ i + 4 * 0 ] + block [ i + 4 * 2 ] )		8064151	2		=			
ANR	8064379	Identifier	z0		8064151	0					
ANR	8064380	MultiplicativeExpression	13 * ( block [ i + 4 * 0 ] + block [ i + 4 * 2 ] )		8064151	1		*			
ANR	8064381	PrimaryExpression	13		8064151	0					
ANR	8064382	AdditiveExpression	block [ i + 4 * 0 ] + block [ i + 4 * 2 ]		8064151	1		+			
ANR	8064383	ArrayIndexing	block [ i + 4 * 0 ]		8064151	0					
ANR	8064384	Identifier	block		8064151	0					
ANR	8064385	AdditiveExpression	i + 4 * 0		8064151	1		+			
ANR	8064386	Identifier	i		8064151	0					
ANR	8064387	MultiplicativeExpression	4 * 0		8064151	1		*			
ANR	8064388	PrimaryExpression	4		8064151	0					
ANR	8064389	PrimaryExpression	0		8064151	1					
ANR	8064390	ArrayIndexing	block [ i + 4 * 2 ]		8064151	1					
ANR	8064391	Identifier	block		8064151	0					
ANR	8064392	AdditiveExpression	i + 4 * 2		8064151	1		+			
ANR	8064393	Identifier	i		8064151	0					
ANR	8064394	MultiplicativeExpression	4 * 2		8064151	1		*			
ANR	8064395	PrimaryExpression	4		8064151	0					
ANR	8064396	PrimaryExpression	2		8064151	1					
ANR	8064397	Statement	const	53:8:950:954	8064151	2	True				
ANR	8064398	IdentifierDeclStatement	unsigned z1 = 13 * ( block [ i + 4 * 0 ] - block [ i + 4 * 2 ] ) ;	53:14:956:1017	8064151	3	True				
ANR	8064399	IdentifierDecl	z1 = 13 * ( block [ i + 4 * 0 ] - block [ i + 4 * 2 ] )		8064151	0					
ANR	8064400	IdentifierDeclType	unsigned		8064151	0					
ANR	8064401	Identifier	z1		8064151	1					
ANR	8064402	AssignmentExpression	z1 = 13 * ( block [ i + 4 * 0 ] - block [ i + 4 * 2 ] )		8064151	2		=			
ANR	8064403	Identifier	z1		8064151	0					
ANR	8064404	MultiplicativeExpression	13 * ( block [ i + 4 * 0 ] - block [ i + 4 * 2 ] )		8064151	1		*			
ANR	8064405	PrimaryExpression	13		8064151	0					
ANR	8064406	AdditiveExpression	block [ i + 4 * 0 ] - block [ i + 4 * 2 ]		8064151	1		-			
ANR	8064407	ArrayIndexing	block [ i + 4 * 0 ]		8064151	0					
ANR	8064408	Identifier	block		8064151	0					
ANR	8064409	AdditiveExpression	i + 4 * 0		8064151	1		+			
ANR	8064410	Identifier	i		8064151	0					
ANR	8064411	MultiplicativeExpression	4 * 0		8064151	1		*			
ANR	8064412	PrimaryExpression	4		8064151	0					
ANR	8064413	PrimaryExpression	0		8064151	1					
ANR	8064414	ArrayIndexing	block [ i + 4 * 2 ]		8064151	1					
ANR	8064415	Identifier	block		8064151	0					
ANR	8064416	AdditiveExpression	i + 4 * 2		8064151	1		+			
ANR	8064417	Identifier	i		8064151	0					
ANR	8064418	MultiplicativeExpression	4 * 2		8064151	1		*			
ANR	8064419	PrimaryExpression	4		8064151	0					
ANR	8064420	PrimaryExpression	2		8064151	1					
ANR	8064421	Statement	const	55:8:1028:1032	8064151	4	True				
ANR	8064422	IdentifierDeclStatement	unsigned z2 = 7 * block [ i + 4 * 1 ] - 17 * block [ i + 4 * 3 ] ;	55:14:1034:1094	8064151	5	True				
ANR	8064423	IdentifierDecl	z2 = 7 * block [ i + 4 * 1 ] - 17 * block [ i + 4 * 3 ]		8064151	0					
ANR	8064424	IdentifierDeclType	unsigned		8064151	0					
ANR	8064425	Identifier	z2		8064151	1					
ANR	8064426	AssignmentExpression	z2 = 7 * block [ i + 4 * 1 ] - 17 * block [ i + 4 * 3 ]		8064151	2		=			
ANR	8064427	Identifier	z2		8064151	0					
ANR	8064428	AdditiveExpression	7 * block [ i + 4 * 1 ] - 17 * block [ i + 4 * 3 ]		8064151	1		-			
ANR	8064429	MultiplicativeExpression	7 * block [ i + 4 * 1 ]		8064151	0		*			
ANR	8064430	PrimaryExpression	7		8064151	0					
ANR	8064431	ArrayIndexing	block [ i + 4 * 1 ]		8064151	1					
ANR	8064432	Identifier	block		8064151	0					
ANR	8064433	AdditiveExpression	i + 4 * 1		8064151	1		+			
ANR	8064434	Identifier	i		8064151	0					
ANR	8064435	MultiplicativeExpression	4 * 1		8064151	1		*			
ANR	8064436	PrimaryExpression	4		8064151	0					
ANR	8064437	PrimaryExpression	1		8064151	1					
ANR	8064438	MultiplicativeExpression	17 * block [ i + 4 * 3 ]		8064151	1		*			
ANR	8064439	PrimaryExpression	17		8064151	0					
ANR	8064440	ArrayIndexing	block [ i + 4 * 3 ]		8064151	1					
ANR	8064441	Identifier	block		8064151	0					
ANR	8064442	AdditiveExpression	i + 4 * 3		8064151	1		+			
ANR	8064443	Identifier	i		8064151	0					
ANR	8064444	MultiplicativeExpression	4 * 3		8064151	1		*			
ANR	8064445	PrimaryExpression	4		8064151	0					
ANR	8064446	PrimaryExpression	3		8064151	1					
ANR	8064447	Statement	const	57:8:1105:1109	8064151	6	True				
ANR	8064448	IdentifierDeclStatement	unsigned z3 = 17 * block [ i + 4 * 1 ] + 7 * block [ i + 4 * 3 ] ;	57:14:1111:1171	8064151	7	True				
ANR	8064449	IdentifierDecl	z3 = 17 * block [ i + 4 * 1 ] + 7 * block [ i + 4 * 3 ]		8064151	0					
ANR	8064450	IdentifierDeclType	unsigned		8064151	0					
ANR	8064451	Identifier	z3		8064151	1					
ANR	8064452	AssignmentExpression	z3 = 17 * block [ i + 4 * 1 ] + 7 * block [ i + 4 * 3 ]		8064151	2		=			
ANR	8064453	Identifier	z3		8064151	0					
ANR	8064454	AdditiveExpression	17 * block [ i + 4 * 1 ] + 7 * block [ i + 4 * 3 ]		8064151	1		+			
ANR	8064455	MultiplicativeExpression	17 * block [ i + 4 * 1 ]		8064151	0		*			
ANR	8064456	PrimaryExpression	17		8064151	0					
ANR	8064457	ArrayIndexing	block [ i + 4 * 1 ]		8064151	1					
ANR	8064458	Identifier	block		8064151	0					
ANR	8064459	AdditiveExpression	i + 4 * 1		8064151	1		+			
ANR	8064460	Identifier	i		8064151	0					
ANR	8064461	MultiplicativeExpression	4 * 1		8064151	1		*			
ANR	8064462	PrimaryExpression	4		8064151	0					
ANR	8064463	PrimaryExpression	1		8064151	1					
ANR	8064464	MultiplicativeExpression	7 * block [ i + 4 * 3 ]		8064151	1		*			
ANR	8064465	PrimaryExpression	7		8064151	0					
ANR	8064466	ArrayIndexing	block [ i + 4 * 3 ]		8064151	1					
ANR	8064467	Identifier	block		8064151	0					
ANR	8064468	AdditiveExpression	i + 4 * 3		8064151	1		+			
ANR	8064469	Identifier	i		8064151	0					
ANR	8064470	MultiplicativeExpression	4 * 3		8064151	1		*			
ANR	8064471	PrimaryExpression	4		8064151	0					
ANR	8064472	PrimaryExpression	3		8064151	1					
ANR	8064473	IdentifierDeclStatement	const int rr = ( dc + 0x80000 ) ;	59:8:1182:1211	8064151	8	True				
ANR	8064474	IdentifierDecl	rr = ( dc + 0x80000 )		8064151	0					
ANR	8064475	IdentifierDeclType	const int		8064151	0					
ANR	8064476	Identifier	rr		8064151	1					
ANR	8064477	AssignmentExpression	rr = ( dc + 0x80000 )		8064151	2		=			
ANR	8064478	Identifier	rr		8064151	0					
ANR	8064479	AdditiveExpression	dc + 0x80000		8064151	1		+			
ANR	8064480	Identifier	dc		8064151	0					
ANR	8064481	PrimaryExpression	0x80000		8064151	1					
ANR	8064482	ExpressionStatement	dst [ i + stride * 0 ] = av_clip_uint8 ( dst [ i + stride * 0 ] + ( ( int ) ( ( z0 + z3 ) * qmul + rr ) >> 20 ) )	63:8:1224:1319	8064151	9	True				
ANR	8064483	AssignmentExpression	dst [ i + stride * 0 ] = av_clip_uint8 ( dst [ i + stride * 0 ] + ( ( int ) ( ( z0 + z3 ) * qmul + rr ) >> 20 ) )		8064151	0		=			
ANR	8064484	ArrayIndexing	dst [ i + stride * 0 ]		8064151	0					
ANR	8064485	Identifier	dst		8064151	0					
ANR	8064486	AdditiveExpression	i + stride * 0		8064151	1		+			
ANR	8064487	Identifier	i		8064151	0					
ANR	8064488	MultiplicativeExpression	stride * 0		8064151	1		*			
ANR	8064489	Identifier	stride		8064151	0					
ANR	8064490	PrimaryExpression	0		8064151	1					
ANR	8064491	CallExpression	av_clip_uint8 ( dst [ i + stride * 0 ] + ( ( int ) ( ( z0 + z3 ) * qmul + rr ) >> 20 ) )		8064151	1					
ANR	8064492	Callee	av_clip_uint8		8064151	0					
ANR	8064493	Identifier	av_clip_uint8		8064151	0					
ANR	8064494	ArgumentList	dst [ i + stride * 0 ] + ( ( int ) ( ( z0 + z3 ) * qmul + rr ) >> 20 )		8064151	1					
ANR	8064495	Argument	dst [ i + stride * 0 ] + ( ( int ) ( ( z0 + z3 ) * qmul + rr ) >> 20 )		8064151	0					
ANR	8064496	AdditiveExpression	dst [ i + stride * 0 ] + ( ( int ) ( ( z0 + z3 ) * qmul + rr ) >> 20 )		8064151	0		+			
ANR	8064497	ArrayIndexing	dst [ i + stride * 0 ]		8064151	0					
ANR	8064498	Identifier	dst		8064151	0					
ANR	8064499	AdditiveExpression	i + stride * 0		8064151	1		+			
ANR	8064500	Identifier	i		8064151	0					
ANR	8064501	MultiplicativeExpression	stride * 0		8064151	1		*			
ANR	8064502	Identifier	stride		8064151	0					
ANR	8064503	PrimaryExpression	0		8064151	1					
ANR	8064504	ShiftExpression	( int ) ( ( z0 + z3 ) * qmul + rr ) >> 20		8064151	1		>>			
ANR	8064505	CastExpression	( int ) ( ( z0 + z3 ) * qmul + rr )		8064151	0					
ANR	8064506	CastTarget	int		8064151	0					
ANR	8064507	AdditiveExpression	( z0 + z3 ) * qmul + rr		8064151	1		+			
ANR	8064508	MultiplicativeExpression	( z0 + z3 ) * qmul		8064151	0		*			
ANR	8064509	AdditiveExpression	z0 + z3		8064151	0		+			
ANR	8064510	Identifier	z0		8064151	0					
ANR	8064511	Identifier	z3		8064151	1					
ANR	8064512	Identifier	qmul		8064151	1					
ANR	8064513	Identifier	rr		8064151	1					
ANR	8064514	PrimaryExpression	20		8064151	1					
ANR	8064515	ExpressionStatement	dst [ i + stride * 1 ] = av_clip_uint8 ( dst [ i + stride * 1 ] + ( ( int ) ( ( z1 + z2 ) * qmul + rr ) >> 20 ) )	65:8:1330:1425	8064151	10	True				
ANR	8064516	AssignmentExpression	dst [ i + stride * 1 ] = av_clip_uint8 ( dst [ i + stride * 1 ] + ( ( int ) ( ( z1 + z2 ) * qmul + rr ) >> 20 ) )		8064151	0		=			
ANR	8064517	ArrayIndexing	dst [ i + stride * 1 ]		8064151	0					
ANR	8064518	Identifier	dst		8064151	0					
ANR	8064519	AdditiveExpression	i + stride * 1		8064151	1		+			
ANR	8064520	Identifier	i		8064151	0					
ANR	8064521	MultiplicativeExpression	stride * 1		8064151	1		*			
ANR	8064522	Identifier	stride		8064151	0					
ANR	8064523	PrimaryExpression	1		8064151	1					
ANR	8064524	CallExpression	av_clip_uint8 ( dst [ i + stride * 1 ] + ( ( int ) ( ( z1 + z2 ) * qmul + rr ) >> 20 ) )		8064151	1					
ANR	8064525	Callee	av_clip_uint8		8064151	0					
ANR	8064526	Identifier	av_clip_uint8		8064151	0					
ANR	8064527	ArgumentList	dst [ i + stride * 1 ] + ( ( int ) ( ( z1 + z2 ) * qmul + rr ) >> 20 )		8064151	1					
ANR	8064528	Argument	dst [ i + stride * 1 ] + ( ( int ) ( ( z1 + z2 ) * qmul + rr ) >> 20 )		8064151	0					
ANR	8064529	AdditiveExpression	dst [ i + stride * 1 ] + ( ( int ) ( ( z1 + z2 ) * qmul + rr ) >> 20 )		8064151	0		+			
ANR	8064530	ArrayIndexing	dst [ i + stride * 1 ]		8064151	0					
ANR	8064531	Identifier	dst		8064151	0					
ANR	8064532	AdditiveExpression	i + stride * 1		8064151	1		+			
ANR	8064533	Identifier	i		8064151	0					
ANR	8064534	MultiplicativeExpression	stride * 1		8064151	1		*			
ANR	8064535	Identifier	stride		8064151	0					
ANR	8064536	PrimaryExpression	1		8064151	1					
ANR	8064537	ShiftExpression	( int ) ( ( z1 + z2 ) * qmul + rr ) >> 20		8064151	1		>>			
ANR	8064538	CastExpression	( int ) ( ( z1 + z2 ) * qmul + rr )		8064151	0					
ANR	8064539	CastTarget	int		8064151	0					
ANR	8064540	AdditiveExpression	( z1 + z2 ) * qmul + rr		8064151	1		+			
ANR	8064541	MultiplicativeExpression	( z1 + z2 ) * qmul		8064151	0		*			
ANR	8064542	AdditiveExpression	z1 + z2		8064151	0		+			
ANR	8064543	Identifier	z1		8064151	0					
ANR	8064544	Identifier	z2		8064151	1					
ANR	8064545	Identifier	qmul		8064151	1					
ANR	8064546	Identifier	rr		8064151	1					
ANR	8064547	PrimaryExpression	20		8064151	1					
ANR	8064548	ExpressionStatement	dst [ i + stride * 2 ] = av_clip_uint8 ( dst [ i + stride * 2 ] + ( ( int ) ( ( z1 - z2 ) * qmul + rr ) >> 20 ) )	67:8:1436:1531	8064151	11	True				
ANR	8064549	AssignmentExpression	dst [ i + stride * 2 ] = av_clip_uint8 ( dst [ i + stride * 2 ] + ( ( int ) ( ( z1 - z2 ) * qmul + rr ) >> 20 ) )		8064151	0		=			
ANR	8064550	ArrayIndexing	dst [ i + stride * 2 ]		8064151	0					
ANR	8064551	Identifier	dst		8064151	0					
ANR	8064552	AdditiveExpression	i + stride * 2		8064151	1		+			
ANR	8064553	Identifier	i		8064151	0					
ANR	8064554	MultiplicativeExpression	stride * 2		8064151	1		*			
ANR	8064555	Identifier	stride		8064151	0					
ANR	8064556	PrimaryExpression	2		8064151	1					
ANR	8064557	CallExpression	av_clip_uint8 ( dst [ i + stride * 2 ] + ( ( int ) ( ( z1 - z2 ) * qmul + rr ) >> 20 ) )		8064151	1					
ANR	8064558	Callee	av_clip_uint8		8064151	0					
ANR	8064559	Identifier	av_clip_uint8		8064151	0					
ANR	8064560	ArgumentList	dst [ i + stride * 2 ] + ( ( int ) ( ( z1 - z2 ) * qmul + rr ) >> 20 )		8064151	1					
ANR	8064561	Argument	dst [ i + stride * 2 ] + ( ( int ) ( ( z1 - z2 ) * qmul + rr ) >> 20 )		8064151	0					
ANR	8064562	AdditiveExpression	dst [ i + stride * 2 ] + ( ( int ) ( ( z1 - z2 ) * qmul + rr ) >> 20 )		8064151	0		+			
ANR	8064563	ArrayIndexing	dst [ i + stride * 2 ]		8064151	0					
ANR	8064564	Identifier	dst		8064151	0					
ANR	8064565	AdditiveExpression	i + stride * 2		8064151	1		+			
ANR	8064566	Identifier	i		8064151	0					
ANR	8064567	MultiplicativeExpression	stride * 2		8064151	1		*			
ANR	8064568	Identifier	stride		8064151	0					
ANR	8064569	PrimaryExpression	2		8064151	1					
ANR	8064570	ShiftExpression	( int ) ( ( z1 - z2 ) * qmul + rr ) >> 20		8064151	1		>>			
ANR	8064571	CastExpression	( int ) ( ( z1 - z2 ) * qmul + rr )		8064151	0					
ANR	8064572	CastTarget	int		8064151	0					
ANR	8064573	AdditiveExpression	( z1 - z2 ) * qmul + rr		8064151	1		+			
ANR	8064574	MultiplicativeExpression	( z1 - z2 ) * qmul		8064151	0		*			
ANR	8064575	AdditiveExpression	z1 - z2		8064151	0		-			
ANR	8064576	Identifier	z1		8064151	0					
ANR	8064577	Identifier	z2		8064151	1					
ANR	8064578	Identifier	qmul		8064151	1					
ANR	8064579	Identifier	rr		8064151	1					
ANR	8064580	PrimaryExpression	20		8064151	1					
ANR	8064581	ExpressionStatement	dst [ i + stride * 3 ] = av_clip_uint8 ( dst [ i + stride * 3 ] + ( ( int ) ( ( z0 - z3 ) * qmul + rr ) >> 20 ) )	69:8:1542:1637	8064151	12	True				
ANR	8064582	AssignmentExpression	dst [ i + stride * 3 ] = av_clip_uint8 ( dst [ i + stride * 3 ] + ( ( int ) ( ( z0 - z3 ) * qmul + rr ) >> 20 ) )		8064151	0		=			
ANR	8064583	ArrayIndexing	dst [ i + stride * 3 ]		8064151	0					
ANR	8064584	Identifier	dst		8064151	0					
ANR	8064585	AdditiveExpression	i + stride * 3		8064151	1		+			
ANR	8064586	Identifier	i		8064151	0					
ANR	8064587	MultiplicativeExpression	stride * 3		8064151	1		*			
ANR	8064588	Identifier	stride		8064151	0					
ANR	8064589	PrimaryExpression	3		8064151	1					
ANR	8064590	CallExpression	av_clip_uint8 ( dst [ i + stride * 3 ] + ( ( int ) ( ( z0 - z3 ) * qmul + rr ) >> 20 ) )		8064151	1					
ANR	8064591	Callee	av_clip_uint8		8064151	0					
ANR	8064592	Identifier	av_clip_uint8		8064151	0					
ANR	8064593	ArgumentList	dst [ i + stride * 3 ] + ( ( int ) ( ( z0 - z3 ) * qmul + rr ) >> 20 )		8064151	1					
ANR	8064594	Argument	dst [ i + stride * 3 ] + ( ( int ) ( ( z0 - z3 ) * qmul + rr ) >> 20 )		8064151	0					
ANR	8064595	AdditiveExpression	dst [ i + stride * 3 ] + ( ( int ) ( ( z0 - z3 ) * qmul + rr ) >> 20 )		8064151	0		+			
ANR	8064596	ArrayIndexing	dst [ i + stride * 3 ]		8064151	0					
ANR	8064597	Identifier	dst		8064151	0					
ANR	8064598	AdditiveExpression	i + stride * 3		8064151	1		+			
ANR	8064599	Identifier	i		8064151	0					
ANR	8064600	MultiplicativeExpression	stride * 3		8064151	1		*			
ANR	8064601	Identifier	stride		8064151	0					
ANR	8064602	PrimaryExpression	3		8064151	1					
ANR	8064603	ShiftExpression	( int ) ( ( z0 - z3 ) * qmul + rr ) >> 20		8064151	1		>>			
ANR	8064604	CastExpression	( int ) ( ( z0 - z3 ) * qmul + rr )		8064151	0					
ANR	8064605	CastTarget	int		8064151	0					
ANR	8064606	AdditiveExpression	( z0 - z3 ) * qmul + rr		8064151	1		+			
ANR	8064607	MultiplicativeExpression	( z0 - z3 ) * qmul		8064151	0		*			
ANR	8064608	AdditiveExpression	z0 - z3		8064151	0		-			
ANR	8064609	Identifier	z0		8064151	0					
ANR	8064610	Identifier	z3		8064151	1					
ANR	8064611	Identifier	qmul		8064151	1					
ANR	8064612	Identifier	rr		8064151	1					
ANR	8064613	PrimaryExpression	20		8064151	1					
ANR	8064614	ExpressionStatement	"memset ( block , 0 , 16 * sizeof ( int16_t ) )"	75:4:1653:1691	8064151	5	True				
ANR	8064615	CallExpression	"memset ( block , 0 , 16 * sizeof ( int16_t ) )"		8064151	0					
ANR	8064616	Callee	memset		8064151	0					
ANR	8064617	Identifier	memset		8064151	0					
ANR	8064618	ArgumentList	block		8064151	1					
ANR	8064619	Argument	block		8064151	0					
ANR	8064620	Identifier	block		8064151	0					
ANR	8064621	Argument	0		8064151	1					
ANR	8064622	PrimaryExpression	0		8064151	0					
ANR	8064623	Argument	16 * sizeof ( int16_t )		8064151	2					
ANR	8064624	MultiplicativeExpression	16 * sizeof ( int16_t )		8064151	0		*			
ANR	8064625	PrimaryExpression	16		8064151	0					
ANR	8064626	SizeofExpression	sizeof ( int16_t )		8064151	1					
ANR	8064627	Sizeof	sizeof		8064151	0					
ANR	8064628	SizeofOperand	int16_t		8064151	1					
ANR	8064629	ReturnType	static void		8064151	1					
ANR	8064630	Identifier	svq3_add_idct_c		8064151	2					
ANR	8064631	ParameterList	"uint8_t * dst , int16_t * block , int stride , int qp , int dc"		8064151	3					
ANR	8064632	Parameter	uint8_t * dst	1:28:28:39	8064151	0	True				
ANR	8064633	ParameterType	uint8_t *		8064151	0					
ANR	8064634	Identifier	dst		8064151	1					
ANR	8064635	Parameter	int16_t * block	1:42:42:55	8064151	1	True				
ANR	8064636	ParameterType	int16_t *		8064151	0					
ANR	8064637	Identifier	block		8064151	1					
ANR	8064638	Parameter	int stride	3:28:87:96	8064151	2	True				
ANR	8064639	ParameterType	int		8064151	0					
ANR	8064640	Identifier	stride		8064151	1					
ANR	8064641	Parameter	int qp	3:40:99:104	8064151	3	True				
ANR	8064642	ParameterType	int		8064151	0					
ANR	8064643	Identifier	qp		8064151	1					
ANR	8064644	Parameter	int dc	3:48:107:112	8064151	4	True				
ANR	8064645	ParameterType	int		8064151	0					
ANR	8064646	Identifier	dc		8064151	1					
ANR	8064647	CFGEntryNode	ENTRY		8064151		True				
ANR	8064648	CFGExitNode	EXIT		8064151		True				
ANR	8064649	Symbol	rr		8064151						
ANR	8064650	Symbol	* stride		8064151						
ANR	8064651	Symbol	dst		8064151						
ANR	8064652	Symbol	qmul		8064151						
ANR	8064653	Symbol	* qp		8064151						
ANR	8064654	Symbol	av_clip_uint8		8064151						
ANR	8064655	Symbol	i		8064151						
ANR	8064656	Symbol	svq3_dequant_coeff		8064151						
ANR	8064657	Symbol	stride		8064151						
ANR	8064658	Symbol	* block		8064151						
ANR	8064659	Symbol	* dst		8064151						
ANR	8064660	Symbol	* i		8064151						
ANR	8064661	Symbol	z0		8064151						
ANR	8064662	Symbol	z1		8064151						
ANR	8064663	Symbol	z2		8064151						
ANR	8064664	Symbol	z3		8064151						
ANR	8064665	Symbol	block		8064151						
ANR	8064666	Symbol	* svq3_dequant_coeff		8064151						
ANR	8064667	Symbol	qp		8064151						
ANR	8064668	Symbol	dc		8064151						
