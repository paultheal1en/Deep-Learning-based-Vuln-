command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6344895	File	/home/p4ultr4n/workplace/ReVeal/raw_code/parse_numa_node_0.c								
ANR	6344896	Function	parse_numa_node	1:0:0:2210							
ANR	6344897	FunctionDef	"parse_numa_node (NumaNodeOptions * node , QemuOpts * opts , Error * * errp)"		6344896	0					
ANR	6344898	CompoundStatement		3:0:82:2210	6344896	0					
ANR	6344899	IdentifierDeclStatement	uint16_t nodenr ;	5:4:89:104	6344896	0	True				
ANR	6344900	IdentifierDecl	nodenr		6344896	0					
ANR	6344901	IdentifierDeclType	uint16_t		6344896	0					
ANR	6344902	Identifier	nodenr		6344896	1					
ANR	6344903	IdentifierDeclStatement	uint16List * cpus = NULL ;	7:4:111:134	6344896	1	True				
ANR	6344904	IdentifierDecl	* cpus = NULL		6344896	0					
ANR	6344905	IdentifierDeclType	uint16List *		6344896	0					
ANR	6344906	Identifier	cpus		6344896	1					
ANR	6344907	AssignmentExpression	* cpus = NULL		6344896	2		=			
ANR	6344908	Identifier	NULL		6344896	0					
ANR	6344909	Identifier	NULL		6344896	1					
ANR	6344910	IfStatement	if ( node -> has_nodeid )		6344896	2					
ANR	6344911	Condition	node -> has_nodeid	11:8:147:162	6344896	0	True				
ANR	6344912	PtrMemberAccess	node -> has_nodeid		6344896	0					
ANR	6344913	Identifier	node		6344896	0					
ANR	6344914	Identifier	has_nodeid		6344896	1					
ANR	6344915	CompoundStatement		9:26:82:82	6344896	1					
ANR	6344916	ExpressionStatement	nodenr = node -> nodeid	13:8:176:197	6344896	0	True				
ANR	6344917	AssignmentExpression	nodenr = node -> nodeid		6344896	0		=			
ANR	6344918	Identifier	nodenr		6344896	0					
ANR	6344919	PtrMemberAccess	node -> nodeid		6344896	1					
ANR	6344920	Identifier	node		6344896	0					
ANR	6344921	Identifier	nodeid		6344896	1					
ANR	6344922	ElseStatement	else		6344896	0					
ANR	6344923	CompoundStatement		13:11:128:128	6344896	0					
ANR	6344924	ExpressionStatement	nodenr = nb_numa_nodes	17:8:222:244	6344896	0	True				
ANR	6344925	AssignmentExpression	nodenr = nb_numa_nodes		6344896	0		=			
ANR	6344926	Identifier	nodenr		6344896	0					
ANR	6344927	Identifier	nb_numa_nodes		6344896	1					
ANR	6344928	IfStatement	if ( nodenr >= MAX_NODES )		6344896	3					
ANR	6344929	Condition	nodenr >= MAX_NODES	23:8:264:282	6344896	0	True				
ANR	6344930	RelationalExpression	nodenr >= MAX_NODES		6344896	0		>=			
ANR	6344931	Identifier	nodenr		6344896	0					
ANR	6344932	Identifier	MAX_NODES		6344896	1					
ANR	6344933	CompoundStatement		21:29:202:202	6344896	1					
ANR	6344934	Statement	error_setg	25:8:296:305	6344896	0	True				
ANR	6344935	Statement	(	25:18:306:306	6344896	1	True				
ANR	6344936	Statement	errp	25:19:307:310	6344896	2	True				
ANR	6344937	Statement	","	25:23:311:311	6344896	3	True				
ANR	6344938	Statement	"""Max number of NUMA nodes reached: %"""	25:25:313:349	6344896	4	True				
ANR	6344939	Statement	PRIu16	27:19:371:376	6344896	5	True				
ANR	6344940	Statement	""""""	27:26:378:379	6344896	6	True				
ANR	6344941	Statement	","	27:28:380:380	6344896	7	True				
ANR	6344942	Statement	nodenr	27:30:382:387	6344896	8	True				
ANR	6344943	Statement	)	27:36:388:388	6344896	9	True				
ANR	6344944	ExpressionStatement		27:37:389:389	6344896	10	True				
ANR	6344945	ReturnStatement	return ;	29:8:400:406	6344896	11	True				
ANR	6344946	IfStatement	if ( numa_info [ nodenr ] . present )		6344896	4					
ANR	6344947	Condition	numa_info [ nodenr ] . present	35:8:426:450	6344896	0	True				
ANR	6344948	MemberAccess	numa_info [ nodenr ] . present		6344896	0					
ANR	6344949	ArrayIndexing	numa_info [ nodenr ]		6344896	0					
ANR	6344950	Identifier	numa_info		6344896	0					
ANR	6344951	Identifier	nodenr		6344896	1					
ANR	6344952	Identifier	present		6344896	1					
ANR	6344953	CompoundStatement		33:35:370:370	6344896	1					
ANR	6344954	Statement	error_setg	37:8:464:473	6344896	0	True				
ANR	6344955	Statement	(	37:18:474:474	6344896	1	True				
ANR	6344956	Statement	errp	37:19:475:478	6344896	2	True				
ANR	6344957	Statement	","	37:23:479:479	6344896	3	True				
ANR	6344958	Statement	"""Duplicate NUMA nodeid: %"""	37:25:481:506	6344896	4	True				
ANR	6344959	Statement	PRIu16	37:52:508:513	6344896	5	True				
ANR	6344960	Statement	","	37:58:514:514	6344896	6	True				
ANR	6344961	Statement	nodenr	37:60:516:521	6344896	7	True				
ANR	6344962	Statement	)	37:66:522:522	6344896	8	True				
ANR	6344963	ExpressionStatement		37:67:523:523	6344896	9	True				
ANR	6344964	ReturnStatement	return ;	39:8:534:540	6344896	10	True				
ANR	6344965	ForStatement	for ( cpus = node -> cpus ; cpus ; cpus = cpus -> next )		6344896	5					
ANR	6344966	ForInit	cpus = node -> cpus ;	45:9:561:578	6344896	0	True				
ANR	6344967	AssignmentExpression	cpus = node -> cpus		6344896	0		=			
ANR	6344968	Identifier	cpus		6344896	0					
ANR	6344969	PtrMemberAccess	node -> cpus		6344896	1					
ANR	6344970	Identifier	node		6344896	0					
ANR	6344971	Identifier	cpus		6344896	1					
ANR	6344972	Condition	cpus	45:28:580:583	6344896	1	True				
ANR	6344973	Identifier	cpus		6344896	0					
ANR	6344974	AssignmentExpression	cpus = cpus -> next	45:34:586:602	6344896	2	True	=			
ANR	6344975	Identifier	cpus		6344896	0					
ANR	6344976	PtrMemberAccess	cpus -> next		6344896	1					
ANR	6344977	Identifier	cpus		6344896	0					
ANR	6344978	Identifier	next		6344896	1					
ANR	6344979	CompoundStatement		43:53:522:522	6344896	3					
ANR	6344980	IfStatement	if ( cpus -> value >= max_cpus )		6344896	0					
ANR	6344981	Condition	cpus -> value >= max_cpus	47:12:620:642	6344896	0	True				
ANR	6344982	RelationalExpression	cpus -> value >= max_cpus		6344896	0		>=			
ANR	6344983	PtrMemberAccess	cpus -> value		6344896	0					
ANR	6344984	Identifier	cpus		6344896	0					
ANR	6344985	Identifier	value		6344896	1					
ANR	6344986	Identifier	max_cpus		6344896	1					
ANR	6344987	CompoundStatement		45:37:562:562	6344896	1					
ANR	6344988	Statement	error_setg	49:12:660:669	6344896	0	True				
ANR	6344989	Statement	(	49:22:670:670	6344896	1	True				
ANR	6344990	Statement	errp	49:23:671:674	6344896	2	True				
ANR	6344991	Statement	","	49:27:675:675	6344896	3	True				
ANR	6344992	Statement	"""CPU index (%"""	51:23:701:714	6344896	4	True				
ANR	6344993	Statement	PRIu16	51:38:716:721	6344896	5	True				
ANR	6344994	Statement	""")"""	51:45:723:725	6344896	6	True				
ANR	6344995	Statement	""" should be smaller than maxcpus (%d)"""	53:23:751:788	6344896	7	True				
ANR	6344996	Statement	","	53:61:789:789	6344896	8	True				
ANR	6344997	Statement	cpus	55:23:815:818	6344896	9	True				
ANR	6344998	Statement	->	55:27:819:820	6344896	10	True				
ANR	6344999	Statement	value	55:29:821:825	6344896	11	True				
ANR	6345000	Statement	","	55:34:826:826	6344896	12	True				
ANR	6345001	Statement	max_cpus	55:36:828:835	6344896	13	True				
ANR	6345002	Statement	)	55:44:836:836	6344896	14	True				
ANR	6345003	ExpressionStatement		55:45:837:837	6344896	15	True				
ANR	6345004	ReturnStatement	return ;	57:12:852:858	6344896	16	True				
ANR	6345005	ExpressionStatement	"bitmap_set ( numa_info [ nodenr ] . node_cpu , cpus -> value , 1 )"	61:8:880:934	6344896	1	True				
ANR	6345006	CallExpression	"bitmap_set ( numa_info [ nodenr ] . node_cpu , cpus -> value , 1 )"		6344896	0					
ANR	6345007	Callee	bitmap_set		6344896	0					
ANR	6345008	Identifier	bitmap_set		6344896	0					
ANR	6345009	ArgumentList	numa_info [ nodenr ] . node_cpu		6344896	1					
ANR	6345010	Argument	numa_info [ nodenr ] . node_cpu		6344896	0					
ANR	6345011	MemberAccess	numa_info [ nodenr ] . node_cpu		6344896	0					
ANR	6345012	ArrayIndexing	numa_info [ nodenr ]		6344896	0					
ANR	6345013	Identifier	numa_info		6344896	0					
ANR	6345014	Identifier	nodenr		6344896	1					
ANR	6345015	Identifier	node_cpu		6344896	1					
ANR	6345016	Argument	cpus -> value		6344896	1					
ANR	6345017	PtrMemberAccess	cpus -> value		6344896	0					
ANR	6345018	Identifier	cpus		6344896	0					
ANR	6345019	Identifier	value		6344896	1					
ANR	6345020	Argument	1		6344896	2					
ANR	6345021	PrimaryExpression	1		6344896	0					
ANR	6345022	IfStatement	if ( node -> has_mem && node -> has_memdev )		6344896	6					
ANR	6345023	Condition	node -> has_mem && node -> has_memdev	67:8:954:986	6344896	0	True				
ANR	6345024	AndExpression	node -> has_mem && node -> has_memdev		6344896	0		&&			
ANR	6345025	PtrMemberAccess	node -> has_mem		6344896	0					
ANR	6345026	Identifier	node		6344896	0					
ANR	6345027	Identifier	has_mem		6344896	1					
ANR	6345028	PtrMemberAccess	node -> has_memdev		6344896	1					
ANR	6345029	Identifier	node		6344896	0					
ANR	6345030	Identifier	has_memdev		6344896	1					
ANR	6345031	CompoundStatement		65:43:906:906	6344896	1					
ANR	6345032	ExpressionStatement	"error_setg ( errp , ""qemu: cannot specify both mem= and memdev="" )"	69:8:1000:1062	6344896	0	True				
ANR	6345033	CallExpression	"error_setg ( errp , ""qemu: cannot specify both mem= and memdev="" )"		6344896	0					
ANR	6345034	Callee	error_setg		6344896	0					
ANR	6345035	Identifier	error_setg		6344896	0					
ANR	6345036	ArgumentList	errp		6344896	1					
ANR	6345037	Argument	errp		6344896	0					
ANR	6345038	Identifier	errp		6344896	0					
ANR	6345039	Argument	"""qemu: cannot specify both mem= and memdev="""		6344896	1					
ANR	6345040	PrimaryExpression	"""qemu: cannot specify both mem= and memdev="""		6344896	0					
ANR	6345041	ReturnStatement	return ;	71:8:1073:1079	6344896	1	True				
ANR	6345042	IfStatement	if ( have_memdevs == - 1 )		6344896	7					
ANR	6345043	Condition	have_memdevs == - 1	77:8:1099:1116	6344896	0	True				
ANR	6345044	EqualityExpression	have_memdevs == - 1		6344896	0		==			
ANR	6345045	Identifier	have_memdevs		6344896	0					
ANR	6345046	UnaryOperationExpression	- 1		6344896	1					
ANR	6345047	UnaryOperator	-		6344896	0					
ANR	6345048	PrimaryExpression	1		6344896	1					
ANR	6345049	CompoundStatement		75:28:1036:1036	6344896	1					
ANR	6345050	ExpressionStatement	have_memdevs = node -> has_memdev	79:8:1130:1161	6344896	0	True				
ANR	6345051	AssignmentExpression	have_memdevs = node -> has_memdev		6344896	0		=			
ANR	6345052	Identifier	have_memdevs		6344896	0					
ANR	6345053	PtrMemberAccess	node -> has_memdev		6344896	1					
ANR	6345054	Identifier	node		6344896	0					
ANR	6345055	Identifier	has_memdev		6344896	1					
ANR	6345056	IfStatement	if ( node -> has_memdev != have_memdevs )		6344896	8					
ANR	6345057	Condition	node -> has_memdev != have_memdevs	83:8:1179:1210	6344896	0	True				
ANR	6345058	EqualityExpression	node -> has_memdev != have_memdevs		6344896	0		!=			
ANR	6345059	PtrMemberAccess	node -> has_memdev		6344896	0					
ANR	6345060	Identifier	node		6344896	0					
ANR	6345061	Identifier	has_memdev		6344896	1					
ANR	6345062	Identifier	have_memdevs		6344896	1					
ANR	6345063	CompoundStatement		81:42:1130:1130	6344896	1					
ANR	6345064	Statement	error_setg	85:8:1224:1233	6344896	0	True				
ANR	6345065	Statement	(	85:18:1234:1234	6344896	1	True				
ANR	6345066	Statement	errp	85:19:1235:1238	6344896	2	True				
ANR	6345067	Statement	","	85:23:1239:1239	6344896	3	True				
ANR	6345068	Statement	"""qemu: memdev option must be specified for either """	85:25:1241:1291	6344896	4	True				
ANR	6345069	Statement	"""all or no nodes"""	87:19:1313:1329	6344896	5	True				
ANR	6345070	Statement	)	87:36:1330:1330	6344896	6	True				
ANR	6345071	ExpressionStatement		87:37:1331:1331	6344896	7	True				
ANR	6345072	ReturnStatement	return ;	89:8:1342:1348	6344896	8	True				
ANR	6345073	IfStatement	if ( node -> has_mem )		6344896	9					
ANR	6345074	Condition	node -> has_mem	95:8:1368:1380	6344896	0	True				
ANR	6345075	PtrMemberAccess	node -> has_mem		6344896	0					
ANR	6345076	Identifier	node		6344896	0					
ANR	6345077	Identifier	has_mem		6344896	1					
ANR	6345078	CompoundStatement		97:8:1351:1398	6344896	1					
ANR	6345079	IdentifierDeclStatement	uint64_t mem_size = node -> mem ;	97:8:1394:1423	6344896	0	True				
ANR	6345080	IdentifierDecl	mem_size = node -> mem		6344896	0					
ANR	6345081	IdentifierDeclType	uint64_t		6344896	0					
ANR	6345082	Identifier	mem_size		6344896	1					
ANR	6345083	AssignmentExpression	mem_size = node -> mem		6344896	2		=			
ANR	6345084	Identifier	mem_size		6344896	0					
ANR	6345085	PtrMemberAccess	node -> mem		6344896	1					
ANR	6345086	Identifier	node		6344896	0					
ANR	6345087	Identifier	mem		6344896	1					
ANR	6345088	IdentifierDeclStatement	"const char * mem_str = qemu_opt_get ( opts , ""mem"" ) ;"	99:8:1434:1481	6344896	1	True				
ANR	6345089	IdentifierDecl	"* mem_str = qemu_opt_get ( opts , ""mem"" )"		6344896	0					
ANR	6345090	IdentifierDeclType	const char *		6344896	0					
ANR	6345091	Identifier	mem_str		6344896	1					
ANR	6345092	AssignmentExpression	"* mem_str = qemu_opt_get ( opts , ""mem"" )"		6344896	2		=			
ANR	6345093	Identifier	mem_str		6344896	0					
ANR	6345094	CallExpression	"qemu_opt_get ( opts , ""mem"" )"		6344896	1					
ANR	6345095	Callee	qemu_opt_get		6344896	0					
ANR	6345096	Identifier	qemu_opt_get		6344896	0					
ANR	6345097	ArgumentList	opts		6344896	1					
ANR	6345098	Argument	opts		6344896	0					
ANR	6345099	Identifier	opts		6344896	0					
ANR	6345100	Argument	"""mem"""		6344896	1					
ANR	6345101	PrimaryExpression	"""mem"""		6344896	0					
ANR	6345102	IfStatement	if ( g_ascii_isdigit ( mem_str [ strlen ( mem_str ) - 1 ] ) )		6344896	2					
ANR	6345103	Condition	g_ascii_isdigit ( mem_str [ strlen ( mem_str ) - 1 ] )	103:12:1544:1588	6344896	0	True				
ANR	6345104	CallExpression	g_ascii_isdigit ( mem_str [ strlen ( mem_str ) - 1 ] )		6344896	0					
ANR	6345105	Callee	g_ascii_isdigit		6344896	0					
ANR	6345106	Identifier	g_ascii_isdigit		6344896	0					
ANR	6345107	ArgumentList	mem_str [ strlen ( mem_str ) - 1 ]		6344896	1					
ANR	6345108	Argument	mem_str [ strlen ( mem_str ) - 1 ]		6344896	0					
ANR	6345109	ArrayIndexing	mem_str [ strlen ( mem_str ) - 1 ]		6344896	0					
ANR	6345110	Identifier	mem_str		6344896	0					
ANR	6345111	AdditiveExpression	strlen ( mem_str ) - 1		6344896	1		-			
ANR	6345112	CallExpression	strlen ( mem_str )		6344896	0					
ANR	6345113	Callee	strlen		6344896	0					
ANR	6345114	Identifier	strlen		6344896	0					
ANR	6345115	ArgumentList	mem_str		6344896	1					
ANR	6345116	Argument	mem_str		6344896	0					
ANR	6345117	Identifier	mem_str		6344896	0					
ANR	6345118	PrimaryExpression	1		6344896	1					
ANR	6345119	CompoundStatement		101:59:1508:1508	6344896	1					
ANR	6345120	ExpressionStatement	mem_size <<= 20	105:12:1606:1621	6344896	0	True				
ANR	6345121	AssignmentExpression	mem_size <<= 20		6344896	0		<<=			
ANR	6345122	Identifier	mem_size		6344896	0					
ANR	6345123	PrimaryExpression	20		6344896	1					
ANR	6345124	ExpressionStatement	numa_info [ nodenr ] . node_mem = mem_size	109:8:1643:1680	6344896	3	True				
ANR	6345125	AssignmentExpression	numa_info [ nodenr ] . node_mem = mem_size		6344896	0		=			
ANR	6345126	MemberAccess	numa_info [ nodenr ] . node_mem		6344896	0					
ANR	6345127	ArrayIndexing	numa_info [ nodenr ]		6344896	0					
ANR	6345128	Identifier	numa_info		6344896	0					
ANR	6345129	Identifier	nodenr		6344896	1					
ANR	6345130	Identifier	node_mem		6344896	1					
ANR	6345131	Identifier	mem_size		6344896	1					
ANR	6345132	IfStatement	if ( node -> has_memdev )		6344896	10					
ANR	6345133	Condition	node -> has_memdev	113:8:1698:1713	6344896	0	True				
ANR	6345134	PtrMemberAccess	node -> has_memdev		6344896	0					
ANR	6345135	Identifier	node		6344896	0					
ANR	6345136	Identifier	has_memdev		6344896	1					
ANR	6345137	CompoundStatement		113:8:1644:1653	6344896	1					
ANR	6345138	IdentifierDeclStatement	Object * o ;	115:8:1727:1736	6344896	0	True				
ANR	6345139	IdentifierDecl	* o		6344896	0					
ANR	6345140	IdentifierDeclType	Object *		6344896	0					
ANR	6345141	Identifier	o		6344896	1					
ANR	6345142	ExpressionStatement	"o = object_resolve_path_type ( node -> memdev , TYPE_MEMORY_BACKEND , NULL )"	117:8:1747:1816	6344896	1	True				
ANR	6345143	AssignmentExpression	"o = object_resolve_path_type ( node -> memdev , TYPE_MEMORY_BACKEND , NULL )"		6344896	0		=			
ANR	6345144	Identifier	o		6344896	0					
ANR	6345145	CallExpression	"object_resolve_path_type ( node -> memdev , TYPE_MEMORY_BACKEND , NULL )"		6344896	1					
ANR	6345146	Callee	object_resolve_path_type		6344896	0					
ANR	6345147	Identifier	object_resolve_path_type		6344896	0					
ANR	6345148	ArgumentList	node -> memdev		6344896	1					
ANR	6345149	Argument	node -> memdev		6344896	0					
ANR	6345150	PtrMemberAccess	node -> memdev		6344896	0					
ANR	6345151	Identifier	node		6344896	0					
ANR	6345152	Identifier	memdev		6344896	1					
ANR	6345153	Argument	TYPE_MEMORY_BACKEND		6344896	1					
ANR	6345154	Identifier	TYPE_MEMORY_BACKEND		6344896	0					
ANR	6345155	Argument	NULL		6344896	2					
ANR	6345156	Identifier	NULL		6344896	0					
ANR	6345157	IfStatement	if ( ! o )		6344896	2					
ANR	6345158	Condition	! o	119:12:1831:1832	6344896	0	True				
ANR	6345159	UnaryOperationExpression	! o		6344896	0					
ANR	6345160	UnaryOperator	!		6344896	0					
ANR	6345161	Identifier	o		6344896	1					
ANR	6345162	CompoundStatement		117:16:1752:1752	6344896	1					
ANR	6345163	ExpressionStatement	"error_setg ( errp , ""memdev=%s is ambiguous"" , node -> memdev )"	121:12:1850:1906	6344896	0	True				
ANR	6345164	CallExpression	"error_setg ( errp , ""memdev=%s is ambiguous"" , node -> memdev )"		6344896	0					
ANR	6345165	Callee	error_setg		6344896	0					
ANR	6345166	Identifier	error_setg		6344896	0					
ANR	6345167	ArgumentList	errp		6344896	1					
ANR	6345168	Argument	errp		6344896	0					
ANR	6345169	Identifier	errp		6344896	0					
ANR	6345170	Argument	"""memdev=%s is ambiguous"""		6344896	1					
ANR	6345171	PrimaryExpression	"""memdev=%s is ambiguous"""		6344896	0					
ANR	6345172	Argument	node -> memdev		6344896	2					
ANR	6345173	PtrMemberAccess	node -> memdev		6344896	0					
ANR	6345174	Identifier	node		6344896	0					
ANR	6345175	Identifier	memdev		6344896	1					
ANR	6345176	ReturnStatement	return ;	123:12:1921:1927	6344896	1	True				
ANR	6345177	ExpressionStatement	object_ref ( o )	129:8:1951:1964	6344896	3	True				
ANR	6345178	CallExpression	object_ref ( o )		6344896	0					
ANR	6345179	Callee	object_ref		6344896	0					
ANR	6345180	Identifier	object_ref		6344896	0					
ANR	6345181	ArgumentList	o		6344896	1					
ANR	6345182	Argument	o		6344896	0					
ANR	6345183	Identifier	o		6344896	0					
ANR	6345184	ExpressionStatement	"numa_info [ nodenr ] . node_mem = object_property_get_int ( o , ""size"" , NULL )"	131:8:1975:2044	6344896	4	True				
ANR	6345185	AssignmentExpression	"numa_info [ nodenr ] . node_mem = object_property_get_int ( o , ""size"" , NULL )"		6344896	0		=			
ANR	6345186	MemberAccess	numa_info [ nodenr ] . node_mem		6344896	0					
ANR	6345187	ArrayIndexing	numa_info [ nodenr ]		6344896	0					
ANR	6345188	Identifier	numa_info		6344896	0					
ANR	6345189	Identifier	nodenr		6344896	1					
ANR	6345190	Identifier	node_mem		6344896	1					
ANR	6345191	CallExpression	"object_property_get_int ( o , ""size"" , NULL )"		6344896	1					
ANR	6345192	Callee	object_property_get_int		6344896	0					
ANR	6345193	Identifier	object_property_get_int		6344896	0					
ANR	6345194	ArgumentList	o		6344896	1					
ANR	6345195	Argument	o		6344896	0					
ANR	6345196	Identifier	o		6344896	0					
ANR	6345197	Argument	"""size"""		6344896	1					
ANR	6345198	PrimaryExpression	"""size"""		6344896	0					
ANR	6345199	Argument	NULL		6344896	2					
ANR	6345200	Identifier	NULL		6344896	0					
ANR	6345201	ExpressionStatement	numa_info [ nodenr ] . node_memdev = MEMORY_BACKEND ( o )	133:8:2055:2104	6344896	5	True				
ANR	6345202	AssignmentExpression	numa_info [ nodenr ] . node_memdev = MEMORY_BACKEND ( o )		6344896	0		=			
ANR	6345203	MemberAccess	numa_info [ nodenr ] . node_memdev		6344896	0					
ANR	6345204	ArrayIndexing	numa_info [ nodenr ]		6344896	0					
ANR	6345205	Identifier	numa_info		6344896	0					
ANR	6345206	Identifier	nodenr		6344896	1					
ANR	6345207	Identifier	node_memdev		6344896	1					
ANR	6345208	CallExpression	MEMORY_BACKEND ( o )		6344896	1					
ANR	6345209	Callee	MEMORY_BACKEND		6344896	0					
ANR	6345210	Identifier	MEMORY_BACKEND		6344896	0					
ANR	6345211	ArgumentList	o		6344896	1					
ANR	6345212	Argument	o		6344896	0					
ANR	6345213	Identifier	o		6344896	0					
ANR	6345214	ExpressionStatement	numa_info [ nodenr ] . present = true	137:4:2118:2150	6344896	11	True				
ANR	6345215	AssignmentExpression	numa_info [ nodenr ] . present = true		6344896	0		=			
ANR	6345216	MemberAccess	numa_info [ nodenr ] . present		6344896	0					
ANR	6345217	ArrayIndexing	numa_info [ nodenr ]		6344896	0					
ANR	6345218	Identifier	numa_info		6344896	0					
ANR	6345219	Identifier	nodenr		6344896	1					
ANR	6345220	Identifier	present		6344896	1					
ANR	6345221	Identifier	true		6344896	1					
ANR	6345222	ExpressionStatement	"max_numa_nodeid = MAX ( max_numa_nodeid , nodenr + 1 )"	139:4:2157:2207	6344896	12	True				
ANR	6345223	AssignmentExpression	"max_numa_nodeid = MAX ( max_numa_nodeid , nodenr + 1 )"		6344896	0		=			
ANR	6345224	Identifier	max_numa_nodeid		6344896	0					
ANR	6345225	CallExpression	"MAX ( max_numa_nodeid , nodenr + 1 )"		6344896	1					
ANR	6345226	Callee	MAX		6344896	0					
ANR	6345227	Identifier	MAX		6344896	0					
ANR	6345228	ArgumentList	max_numa_nodeid		6344896	1					
ANR	6345229	Argument	max_numa_nodeid		6344896	0					
ANR	6345230	Identifier	max_numa_nodeid		6344896	0					
ANR	6345231	Argument	nodenr + 1		6344896	1					
ANR	6345232	AdditiveExpression	nodenr + 1		6344896	0		+			
ANR	6345233	Identifier	nodenr		6344896	0					
ANR	6345234	PrimaryExpression	1		6344896	1					
ANR	6345235	ReturnType	static void		6344896	1					
ANR	6345236	Identifier	parse_numa_node		6344896	2					
ANR	6345237	ParameterList	"NumaNodeOptions * node , QemuOpts * opts , Error * * errp"		6344896	3					
ANR	6345238	Parameter	NumaNodeOptions * node	1:28:28:48	6344896	0	True				
ANR	6345239	ParameterType	NumaNodeOptions *		6344896	0					
ANR	6345240	Identifier	node		6344896	1					
ANR	6345241	Parameter	QemuOpts * opts	1:51:51:64	6344896	1	True				
ANR	6345242	ParameterType	QemuOpts *		6344896	0					
ANR	6345243	Identifier	opts		6344896	1					
ANR	6345244	Parameter	Error * * errp	1:67:67:78	6344896	2	True				
ANR	6345245	ParameterType	Error * *		6344896	0					
ANR	6345246	Identifier	errp		6344896	1					
ANR	6345247	CFGEntryNode	ENTRY		6344896		True				
ANR	6345248	CFGExitNode	EXIT		6344896		True				
ANR	6345249	Symbol	errp		6344896						
ANR	6345250	Symbol	nb_numa_nodes		6344896						
ANR	6345251	Symbol	* nodenr		6344896						
ANR	6345252	Symbol	MAX		6344896						
ANR	6345253	Symbol	nodenr		6344896						
ANR	6345254	Symbol	qemu_opt_get		6344896						
ANR	6345255	Symbol	numa_info [ nodenr ] . node_mem		6344896						
ANR	6345256	Symbol	node -> has_nodeid		6344896						
ANR	6345257	Symbol	object_property_get_int		6344896						
ANR	6345258	Symbol	mem_str		6344896						
ANR	6345259	Symbol	node -> has_memdev		6344896						
ANR	6345260	Symbol	max_cpus		6344896						
ANR	6345261	Symbol	mem_size		6344896						
ANR	6345262	Symbol	node -> nodeid		6344896						
ANR	6345263	Symbol	strlen		6344896						
ANR	6345264	Symbol	opts		6344896						
ANR	6345265	Symbol	node -> memdev		6344896						
ANR	6345266	Symbol	numa_info		6344896						
ANR	6345267	Symbol	* node		6344896						
ANR	6345268	Symbol	* cpus		6344896						
ANR	6345269	Symbol	cpus -> next		6344896						
ANR	6345270	Symbol	object_resolve_path_type		6344896						
ANR	6345271	Symbol	node -> has_mem		6344896						
ANR	6345272	Symbol	* numa_info		6344896						
ANR	6345273	Symbol	NULL		6344896						
ANR	6345274	Symbol	cpus -> value		6344896						
ANR	6345275	Symbol	MAX_NODES		6344896						
ANR	6345276	Symbol	cpus		6344896						
ANR	6345277	Symbol	g_ascii_isdigit		6344896						
ANR	6345278	Symbol	numa_info [ nodenr ] . present		6344896						
ANR	6345279	Symbol	max_numa_nodeid		6344896						
ANR	6345280	Symbol	o		6344896						
ANR	6345281	Symbol	TYPE_MEMORY_BACKEND		6344896						
ANR	6345282	Symbol	have_memdevs		6344896						
ANR	6345283	Symbol	node		6344896						
ANR	6345284	Symbol	numa_info [ nodenr ] . node_memdev		6344896						
ANR	6345285	Symbol	numa_info [ nodenr ] . node_cpu		6344896						
ANR	6345286	Symbol	* strlen		6344896						
ANR	6345287	Symbol	MEMORY_BACKEND		6344896						
ANR	6345288	Symbol	node -> cpus		6344896						
ANR	6345289	Symbol	true		6344896						
ANR	6345290	Symbol	* mem_str		6344896						
ANR	6345291	Symbol	node -> mem		6344896						
