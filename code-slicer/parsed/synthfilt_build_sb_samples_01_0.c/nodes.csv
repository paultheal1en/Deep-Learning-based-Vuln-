command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8154702	File	/home/p4ultr4n/workplace/ReVeal/raw_code/synthfilt_build_sb_samples_01_0.c								
ANR	8154703	Function	synthfilt_build_sb_samples	1:0:0:9091							
ANR	8154704	FunctionDef	"synthfilt_build_sb_samples (QDM2Context * q , GetBitContext * gb , int length , int sb_min , int sb_max)"		8154703	0					
ANR	8154705	CompoundStatement		5:0:150:9091	8154703	0					
ANR	8154706	IdentifierDeclStatement	"int sb , j , k , n , ch , run , channels ;"	7:4:157:191	8154703	0	True				
ANR	8154707	IdentifierDecl	sb		8154703	0					
ANR	8154708	IdentifierDeclType	int		8154703	0					
ANR	8154709	Identifier	sb		8154703	1					
ANR	8154710	IdentifierDecl	j		8154703	1					
ANR	8154711	IdentifierDeclType	int		8154703	0					
ANR	8154712	Identifier	j		8154703	1					
ANR	8154713	IdentifierDecl	k		8154703	2					
ANR	8154714	IdentifierDeclType	int		8154703	0					
ANR	8154715	Identifier	k		8154703	1					
ANR	8154716	IdentifierDecl	n		8154703	3					
ANR	8154717	IdentifierDeclType	int		8154703	0					
ANR	8154718	Identifier	n		8154703	1					
ANR	8154719	IdentifierDecl	ch		8154703	4					
ANR	8154720	IdentifierDeclType	int		8154703	0					
ANR	8154721	Identifier	ch		8154703	1					
ANR	8154722	IdentifierDecl	run		8154703	5					
ANR	8154723	IdentifierDeclType	int		8154703	0					
ANR	8154724	Identifier	run		8154703	1					
ANR	8154725	IdentifierDecl	channels		8154703	6					
ANR	8154726	IdentifierDeclType	int		8154703	0					
ANR	8154727	Identifier	channels		8154703	1					
ANR	8154728	IdentifierDeclStatement	"int joined_stereo , zero_encoding ;"	9:4:198:230	8154703	1	True				
ANR	8154729	IdentifierDecl	joined_stereo		8154703	0					
ANR	8154730	IdentifierDeclType	int		8154703	0					
ANR	8154731	Identifier	joined_stereo		8154703	1					
ANR	8154732	IdentifierDecl	zero_encoding		8154703	1					
ANR	8154733	IdentifierDeclType	int		8154703	0					
ANR	8154734	Identifier	zero_encoding		8154703	1					
ANR	8154735	IdentifierDeclStatement	int type34_first ;	11:4:237:253	8154703	2	True				
ANR	8154736	IdentifierDecl	type34_first		8154703	0					
ANR	8154737	IdentifierDeclType	int		8154703	0					
ANR	8154738	Identifier	type34_first		8154703	1					
ANR	8154739	IdentifierDeclStatement	float type34_div = 0 ;	13:4:260:280	8154703	3	True				
ANR	8154740	IdentifierDecl	type34_div = 0		8154703	0					
ANR	8154741	IdentifierDeclType	float		8154703	0					
ANR	8154742	Identifier	type34_div		8154703	1					
ANR	8154743	AssignmentExpression	type34_div = 0		8154703	2		=			
ANR	8154744	Identifier	type34_div		8154703	0					
ANR	8154745	PrimaryExpression	0		8154703	1					
ANR	8154746	IdentifierDeclStatement	float type34_predictor ;	15:4:287:309	8154703	4	True				
ANR	8154747	IdentifierDecl	type34_predictor		8154703	0					
ANR	8154748	IdentifierDeclType	float		8154703	0					
ANR	8154749	Identifier	type34_predictor		8154703	1					
ANR	8154750	IdentifierDeclStatement	float samples [ 10 ] ;	17:4:316:333	8154703	5	True				
ANR	8154751	IdentifierDecl	samples [ 10 ]		8154703	0					
ANR	8154752	IdentifierDeclType	float [ 10 ]		8154703	0					
ANR	8154753	Identifier	samples		8154703	1					
ANR	8154754	PrimaryExpression	10		8154703	2					
ANR	8154755	IdentifierDeclStatement	int sign_bits [ 16 ] ;	19:4:340:357	8154703	6	True				
ANR	8154756	IdentifierDecl	sign_bits [ 16 ]		8154703	0					
ANR	8154757	IdentifierDeclType	int [ 16 ]		8154703	0					
ANR	8154758	Identifier	sign_bits		8154703	1					
ANR	8154759	PrimaryExpression	16		8154703	2					
ANR	8154760	IfStatement	if ( length == 0 )		8154703	7					
ANR	8154761	Condition	length == 0	23:8:370:380	8154703	0	True				
ANR	8154762	EqualityExpression	length == 0		8154703	0		==			
ANR	8154763	Identifier	length		8154703	0					
ANR	8154764	PrimaryExpression	0		8154703	1					
ANR	8154765	CompoundStatement		19:21:232:232	8154703	1					
ANR	8154766	ForStatement	for ( sb = sb_min ; sb < sb_max ; sb ++ )		8154703	0					
ANR	8154767	ForInit	sb = sb_min ;	27:13:432:441	8154703	0	True				
ANR	8154768	AssignmentExpression	sb = sb_min		8154703	0		=			
ANR	8154769	Identifier	sb		8154703	0					
ANR	8154770	Identifier	sb_min		8154703	1					
ANR	8154771	Condition	sb < sb_max	27:24:443:453	8154703	1	True				
ANR	8154772	RelationalExpression	sb < sb_max		8154703	0		<			
ANR	8154773	Identifier	sb		8154703	0					
ANR	8154774	Identifier	sb_max		8154703	1					
ANR	8154775	PostIncDecOperationExpression	sb ++	27:37:456:459	8154703	2	True				
ANR	8154776	Identifier	sb		8154703	0					
ANR	8154777	IncDec	++		8154703	1					
ANR	8154778	ExpressionStatement	"build_sb_samples_from_noise ( q , sb )"	29:12:475:510	8154703	3	True				
ANR	8154779	CallExpression	"build_sb_samples_from_noise ( q , sb )"		8154703	0					
ANR	8154780	Callee	build_sb_samples_from_noise		8154703	0					
ANR	8154781	Identifier	build_sb_samples_from_noise		8154703	0					
ANR	8154782	ArgumentList	q		8154703	1					
ANR	8154783	Argument	q		8154703	0					
ANR	8154784	Identifier	q		8154703	0					
ANR	8154785	Argument	sb		8154703	1					
ANR	8154786	Identifier	sb		8154703	0					
ANR	8154787	ReturnStatement	return 0 ;	33:8:523:531	8154703	1	True				
ANR	8154788	PrimaryExpression	0		8154703	0					
ANR	8154789	ForStatement	for ( sb = sb_min ; sb < sb_max ; sb ++ )		8154703	8					
ANR	8154790	ForInit	sb = sb_min ;	39:9:552:563	8154703	0	True				
ANR	8154791	AssignmentExpression	sb = sb_min		8154703	0		=			
ANR	8154792	Identifier	sb		8154703	0					
ANR	8154793	Identifier	sb_min		8154703	1					
ANR	8154794	Condition	sb < sb_max	39:22:565:575	8154703	1	True				
ANR	8154795	RelationalExpression	sb < sb_max		8154703	0		<			
ANR	8154796	Identifier	sb		8154703	0					
ANR	8154797	Identifier	sb_max		8154703	1					
ANR	8154798	PostIncDecOperationExpression	sb ++	39:35:578:581	8154703	2	True				
ANR	8154799	Identifier	sb		8154703	0					
ANR	8154800	IncDec	++		8154703	1					
ANR	8154801	CompoundStatement		35:41:433:433	8154703	3					
ANR	8154802	ExpressionStatement	channels = q -> nb_channels	41:8:595:620	8154703	0	True				
ANR	8154803	AssignmentExpression	channels = q -> nb_channels		8154703	0		=			
ANR	8154804	Identifier	channels		8154703	0					
ANR	8154805	PtrMemberAccess	q -> nb_channels		8154703	1					
ANR	8154806	Identifier	q		8154703	0					
ANR	8154807	Identifier	nb_channels		8154703	1					
ANR	8154808	IfStatement	if ( q -> nb_channels <= 1 || sb < 12 )		8154703	1					
ANR	8154809	Condition	q -> nb_channels <= 1 || sb < 12	45:12:637:666	8154703	0	True				
ANR	8154810	OrExpression	q -> nb_channels <= 1 || sb < 12		8154703	0		||			
ANR	8154811	RelationalExpression	q -> nb_channels <= 1		8154703	0		<=			
ANR	8154812	PtrMemberAccess	q -> nb_channels		8154703	0					
ANR	8154813	Identifier	q		8154703	0					
ANR	8154814	Identifier	nb_channels		8154703	1					
ANR	8154815	PrimaryExpression	1		8154703	1					
ANR	8154816	RelationalExpression	sb < 12		8154703	1		<			
ANR	8154817	Identifier	sb		8154703	0					
ANR	8154818	PrimaryExpression	12		8154703	1					
ANR	8154819	ExpressionStatement	joined_stereo = 0	47:12:682:699	8154703	1	True				
ANR	8154820	AssignmentExpression	joined_stereo = 0		8154703	0		=			
ANR	8154821	Identifier	joined_stereo		8154703	0					
ANR	8154822	PrimaryExpression	0		8154703	1					
ANR	8154823	ElseStatement	else		8154703	0					
ANR	8154824	IfStatement	if ( sb >= 24 )		8154703	0					
ANR	8154825	Condition	sb >= 24	49:17:719:726	8154703	0	True				
ANR	8154826	RelationalExpression	sb >= 24		8154703	0		>=			
ANR	8154827	Identifier	sb		8154703	0					
ANR	8154828	PrimaryExpression	24		8154703	1					
ANR	8154829	ExpressionStatement	joined_stereo = 1	51:12:742:759	8154703	1	True				
ANR	8154830	AssignmentExpression	joined_stereo = 1		8154703	0		=			
ANR	8154831	Identifier	joined_stereo		8154703	0					
ANR	8154832	PrimaryExpression	1		8154703	1					
ANR	8154833	ElseStatement	else		8154703	0					
ANR	8154834	ExpressionStatement	joined_stereo = ( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0	55:12:788:849	8154703	0	True				
ANR	8154835	AssignmentExpression	joined_stereo = ( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0		8154703	0		=			
ANR	8154836	Identifier	joined_stereo		8154703	0					
ANR	8154837	ConditionalExpression	( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0		8154703	1					
ANR	8154838	Condition	get_bits_left ( gb ) >= 1		8154703	0					
ANR	8154839	RelationalExpression	get_bits_left ( gb ) >= 1		8154703	0		>=			
ANR	8154840	CallExpression	get_bits_left ( gb )		8154703	0					
ANR	8154841	Callee	get_bits_left		8154703	0					
ANR	8154842	Identifier	get_bits_left		8154703	0					
ANR	8154843	ArgumentList	gb		8154703	1					
ANR	8154844	Argument	gb		8154703	0					
ANR	8154845	Identifier	gb		8154703	0					
ANR	8154846	PrimaryExpression	1		8154703	1					
ANR	8154847	CallExpression	get_bits1 ( gb )		8154703	1					
ANR	8154848	Callee	get_bits1		8154703	0					
ANR	8154849	Identifier	get_bits1		8154703	0					
ANR	8154850	ArgumentList	gb		8154703	1					
ANR	8154851	Argument	gb		8154703	0					
ANR	8154852	Identifier	gb		8154703	0					
ANR	8154853	PrimaryExpression	0		8154703	2					
ANR	8154854	IfStatement	if ( joined_stereo )		8154703	2					
ANR	8154855	Condition	joined_stereo	59:12:866:878	8154703	0	True				
ANR	8154856	Identifier	joined_stereo		8154703	0					
ANR	8154857	CompoundStatement		55:27:730:730	8154703	1					
ANR	8154858	IfStatement	if ( get_bits_left ( gb ) >= 16 )		8154703	0					
ANR	8154859	Condition	get_bits_left ( gb ) >= 16	61:16:900:922	8154703	0	True				
ANR	8154860	RelationalExpression	get_bits_left ( gb ) >= 16		8154703	0		>=			
ANR	8154861	CallExpression	get_bits_left ( gb )		8154703	0					
ANR	8154862	Callee	get_bits_left		8154703	0					
ANR	8154863	Identifier	get_bits_left		8154703	0					
ANR	8154864	ArgumentList	gb		8154703	1					
ANR	8154865	Argument	gb		8154703	0					
ANR	8154866	Identifier	gb		8154703	0					
ANR	8154867	PrimaryExpression	16		8154703	1					
ANR	8154868	ForStatement	for ( j = 0 ; j < 16 ; j ++ )		8154703	1					
ANR	8154869	ForInit	j = 0 ;	63:21:947:952	8154703	0	True				
ANR	8154870	AssignmentExpression	j = 0		8154703	0		=			
ANR	8154871	Identifier	j		8154703	0					
ANR	8154872	PrimaryExpression	0		8154703	1					
ANR	8154873	Condition	j < 16	63:28:954:959	8154703	1	True				
ANR	8154874	RelationalExpression	j < 16		8154703	0		<			
ANR	8154875	Identifier	j		8154703	0					
ANR	8154876	PrimaryExpression	16		8154703	1					
ANR	8154877	PostIncDecOperationExpression	j ++	63:36:962:964	8154703	2	True				
ANR	8154878	Identifier	j		8154703	0					
ANR	8154879	IncDec	++		8154703	1					
ANR	8154880	ExpressionStatement	sign_bits [ j ] = get_bits1 ( gb )	65:20:988:1017	8154703	3	True				
ANR	8154881	AssignmentExpression	sign_bits [ j ] = get_bits1 ( gb )		8154703	0		=			
ANR	8154882	ArrayIndexing	sign_bits [ j ]		8154703	0					
ANR	8154883	Identifier	sign_bits		8154703	0					
ANR	8154884	Identifier	j		8154703	1					
ANR	8154885	CallExpression	get_bits1 ( gb )		8154703	1					
ANR	8154886	Callee	get_bits1		8154703	0					
ANR	8154887	Identifier	get_bits1		8154703	0					
ANR	8154888	ArgumentList	gb		8154703	1					
ANR	8154889	Argument	gb		8154703	0					
ANR	8154890	Identifier	gb		8154703	0					
ANR	8154891	ForStatement	for ( j = 0 ; j < 64 ; j ++ )		8154703	1					
ANR	8154892	ForInit	j = 0 ;	69:17:1039:1044	8154703	0	True				
ANR	8154893	AssignmentExpression	j = 0		8154703	0		=			
ANR	8154894	Identifier	j		8154703	0					
ANR	8154895	PrimaryExpression	0		8154703	1					
ANR	8154896	Condition	j < 64	69:24:1046:1051	8154703	1	True				
ANR	8154897	RelationalExpression	j < 64		8154703	0		<			
ANR	8154898	Identifier	j		8154703	0					
ANR	8154899	PrimaryExpression	64		8154703	1					
ANR	8154900	PostIncDecOperationExpression	j ++	69:32:1054:1056	8154703	2	True				
ANR	8154901	Identifier	j		8154703	0					
ANR	8154902	IncDec	++		8154703	1					
ANR	8154903	IfStatement	if ( q -> coding_method [ 1 ] [ sb ] [ j ] > q -> coding_method [ 0 ] [ sb ] [ j ] )		8154703	3					
ANR	8154904	Condition	q -> coding_method [ 1 ] [ sb ] [ j ] > q -> coding_method [ 0 ] [ sb ] [ j ]	71:20:1080:1134	8154703	0	True				
ANR	8154905	RelationalExpression	q -> coding_method [ 1 ] [ sb ] [ j ] > q -> coding_method [ 0 ] [ sb ] [ j ]		8154703	0		>			
ANR	8154906	ArrayIndexing	q -> coding_method [ 1 ] [ sb ] [ j ]		8154703	0					
ANR	8154907	ArrayIndexing	q -> coding_method [ 1 ] [ sb ]		8154703	0					
ANR	8154908	ArrayIndexing	q -> coding_method [ 1 ]		8154703	0					
ANR	8154909	PtrMemberAccess	q -> coding_method		8154703	0					
ANR	8154910	Identifier	q		8154703	0					
ANR	8154911	Identifier	coding_method		8154703	1					
ANR	8154912	PrimaryExpression	1		8154703	1					
ANR	8154913	Identifier	sb		8154703	1					
ANR	8154914	Identifier	j		8154703	1					
ANR	8154915	ArrayIndexing	q -> coding_method [ 0 ] [ sb ] [ j ]		8154703	1					
ANR	8154916	ArrayIndexing	q -> coding_method [ 0 ] [ sb ]		8154703	0					
ANR	8154917	ArrayIndexing	q -> coding_method [ 0 ]		8154703	0					
ANR	8154918	PtrMemberAccess	q -> coding_method		8154703	0					
ANR	8154919	Identifier	q		8154703	0					
ANR	8154920	Identifier	coding_method		8154703	1					
ANR	8154921	PrimaryExpression	0		8154703	1					
ANR	8154922	Identifier	sb		8154703	1					
ANR	8154923	Identifier	j		8154703	1					
ANR	8154924	ExpressionStatement	q -> coding_method [ 0 ] [ sb ] [ j ] = q -> coding_method [ 1 ] [ sb ] [ j ]	73:20:1158:1213	8154703	1	True				
ANR	8154925	AssignmentExpression	q -> coding_method [ 0 ] [ sb ] [ j ] = q -> coding_method [ 1 ] [ sb ] [ j ]		8154703	0		=			
ANR	8154926	ArrayIndexing	q -> coding_method [ 0 ] [ sb ] [ j ]		8154703	0					
ANR	8154927	ArrayIndexing	q -> coding_method [ 0 ] [ sb ]		8154703	0					
ANR	8154928	ArrayIndexing	q -> coding_method [ 0 ]		8154703	0					
ANR	8154929	PtrMemberAccess	q -> coding_method		8154703	0					
ANR	8154930	Identifier	q		8154703	0					
ANR	8154931	Identifier	coding_method		8154703	1					
ANR	8154932	PrimaryExpression	0		8154703	1					
ANR	8154933	Identifier	sb		8154703	1					
ANR	8154934	Identifier	j		8154703	1					
ANR	8154935	ArrayIndexing	q -> coding_method [ 1 ] [ sb ] [ j ]		8154703	1					
ANR	8154936	ArrayIndexing	q -> coding_method [ 1 ] [ sb ]		8154703	0					
ANR	8154937	ArrayIndexing	q -> coding_method [ 1 ]		8154703	0					
ANR	8154938	PtrMemberAccess	q -> coding_method		8154703	0					
ANR	8154939	Identifier	q		8154703	0					
ANR	8154940	Identifier	coding_method		8154703	1					
ANR	8154941	PrimaryExpression	1		8154703	1					
ANR	8154942	Identifier	sb		8154703	1					
ANR	8154943	Identifier	j		8154703	1					
ANR	8154944	IfStatement	"if ( fix_coding_method_array ( sb , q -> nb_channels , q -> coding_method ) )"		8154703	2					
ANR	8154945	Condition	"fix_coding_method_array ( sb , q -> nb_channels , q -> coding_method )"	77:16:1234:1339	8154703	0	True				
ANR	8154946	CallExpression	"fix_coding_method_array ( sb , q -> nb_channels , q -> coding_method )"		8154703	0					
ANR	8154947	Callee	fix_coding_method_array		8154703	0					
ANR	8154948	Identifier	fix_coding_method_array		8154703	0					
ANR	8154949	ArgumentList	sb		8154703	1					
ANR	8154950	Argument	sb		8154703	0					
ANR	8154951	Identifier	sb		8154703	0					
ANR	8154952	Argument	q -> nb_channels		8154703	1					
ANR	8154953	PtrMemberAccess	q -> nb_channels		8154703	0					
ANR	8154954	Identifier	q		8154703	0					
ANR	8154955	Identifier	nb_channels		8154703	1					
ANR	8154956	Argument	q -> coding_method		8154703	2					
ANR	8154957	PtrMemberAccess	q -> coding_method		8154703	0					
ANR	8154958	Identifier	q		8154703	0					
ANR	8154959	Identifier	coding_method		8154703	1					
ANR	8154960	CompoundStatement		75:63:1191:1191	8154703	1					
ANR	8154961	ExpressionStatement	"av_log ( NULL , AV_LOG_ERROR , ""coding method invalid\\n"" )"	81:16:1361:1414	8154703	0	True				
ANR	8154962	CallExpression	"av_log ( NULL , AV_LOG_ERROR , ""coding method invalid\\n"" )"		8154703	0					
ANR	8154963	Callee	av_log		8154703	0					
ANR	8154964	Identifier	av_log		8154703	0					
ANR	8154965	ArgumentList	NULL		8154703	1					
ANR	8154966	Argument	NULL		8154703	0					
ANR	8154967	Identifier	NULL		8154703	0					
ANR	8154968	Argument	AV_LOG_ERROR		8154703	1					
ANR	8154969	Identifier	AV_LOG_ERROR		8154703	0					
ANR	8154970	Argument	"""coding method invalid\\n"""		8154703	2					
ANR	8154971	PrimaryExpression	"""coding method invalid\\n"""		8154703	0					
ANR	8154972	ExpressionStatement	"build_sb_samples_from_noise ( q , sb )"	83:16:1433:1467	8154703	1	True				
ANR	8154973	CallExpression	"build_sb_samples_from_noise ( q , sb )"		8154703	0					
ANR	8154974	Callee	build_sb_samples_from_noise		8154703	0					
ANR	8154975	Identifier	build_sb_samples_from_noise		8154703	0					
ANR	8154976	ArgumentList	q		8154703	1					
ANR	8154977	Argument	q		8154703	0					
ANR	8154978	Identifier	q		8154703	0					
ANR	8154979	Argument	sb		8154703	1					
ANR	8154980	Identifier	sb		8154703	0					
ANR	8154981	ContinueStatement	continue ;	85:16:1486:1494	8154703	2	True				
ANR	8154982	ExpressionStatement	channels = 1	89:12:1524:1536	8154703	3	True				
ANR	8154983	AssignmentExpression	channels = 1		8154703	0		=			
ANR	8154984	Identifier	channels		8154703	0					
ANR	8154985	PrimaryExpression	1		8154703	1					
ANR	8154986	ForStatement	for ( ch = 0 ; ch < channels ; ch ++ )		8154703	3					
ANR	8154987	ForInit	ch = 0 ;	95:13:1565:1571	8154703	0	True				
ANR	8154988	AssignmentExpression	ch = 0		8154703	0		=			
ANR	8154989	Identifier	ch		8154703	0					
ANR	8154990	PrimaryExpression	0		8154703	1					
ANR	8154991	Condition	ch < channels	95:21:1573:1585	8154703	1	True				
ANR	8154992	RelationalExpression	ch < channels		8154703	0		<			
ANR	8154993	Identifier	ch		8154703	0					
ANR	8154994	Identifier	channels		8154703	1					
ANR	8154995	PostIncDecOperationExpression	ch ++	95:36:1588:1591	8154703	2	True				
ANR	8154996	Identifier	ch		8154703	0					
ANR	8154997	IncDec	++		8154703	1					
ANR	8154998	CompoundStatement		91:42:1443:1443	8154703	3					
ANR	8154999	ExpressionStatement	FIX_NOISE_IDX ( q -> noise_idx )	97:12:1609:1636	8154703	0	True				
ANR	8155000	CallExpression	FIX_NOISE_IDX ( q -> noise_idx )		8154703	0					
ANR	8155001	Callee	FIX_NOISE_IDX		8154703	0					
ANR	8155002	Identifier	FIX_NOISE_IDX		8154703	0					
ANR	8155003	ArgumentList	q -> noise_idx		8154703	1					
ANR	8155004	Argument	q -> noise_idx		8154703	0					
ANR	8155005	PtrMemberAccess	q -> noise_idx		8154703	0					
ANR	8155006	Identifier	q		8154703	0					
ANR	8155007	Identifier	noise_idx		8154703	1					
ANR	8155008	ExpressionStatement	zero_encoding = ( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0	99:12:1651:1711	8154703	1	True				
ANR	8155009	AssignmentExpression	zero_encoding = ( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0		8154703	0		=			
ANR	8155010	Identifier	zero_encoding		8154703	0					
ANR	8155011	ConditionalExpression	( get_bits_left ( gb ) >= 1 ) ? get_bits1 ( gb ) : 0		8154703	1					
ANR	8155012	Condition	get_bits_left ( gb ) >= 1		8154703	0					
ANR	8155013	RelationalExpression	get_bits_left ( gb ) >= 1		8154703	0		>=			
ANR	8155014	CallExpression	get_bits_left ( gb )		8154703	0					
ANR	8155015	Callee	get_bits_left		8154703	0					
ANR	8155016	Identifier	get_bits_left		8154703	0					
ANR	8155017	ArgumentList	gb		8154703	1					
ANR	8155018	Argument	gb		8154703	0					
ANR	8155019	Identifier	gb		8154703	0					
ANR	8155020	PrimaryExpression	1		8154703	1					
ANR	8155021	CallExpression	get_bits1 ( gb )		8154703	1					
ANR	8155022	Callee	get_bits1		8154703	0					
ANR	8155023	Identifier	get_bits1		8154703	0					
ANR	8155024	ArgumentList	gb		8154703	1					
ANR	8155025	Argument	gb		8154703	0					
ANR	8155026	Identifier	gb		8154703	0					
ANR	8155027	PrimaryExpression	0		8154703	2					
ANR	8155028	ExpressionStatement	type34_predictor = 0.0	101:12:1726:1748	8154703	2	True				
ANR	8155029	AssignmentExpression	type34_predictor = 0.0		8154703	0		=			
ANR	8155030	Identifier	type34_predictor		8154703	0					
ANR	8155031	PrimaryExpression	0.0		8154703	1					
ANR	8155032	ExpressionStatement	type34_first = 1	103:12:1763:1779	8154703	3	True				
ANR	8155033	AssignmentExpression	type34_first = 1		8154703	0		=			
ANR	8155034	Identifier	type34_first		8154703	0					
ANR	8155035	PrimaryExpression	1		8154703	1					
ANR	8155036	ForStatement	for ( j = 0 ; j < 128 ; )		8154703	4					
ANR	8155037	ForInit	j = 0 ;	107:17:1801:1806	8154703	0	True				
ANR	8155038	AssignmentExpression	j = 0		8154703	0		=			
ANR	8155039	Identifier	j		8154703	0					
ANR	8155040	PrimaryExpression	0		8154703	1					
ANR	8155041	Condition	j < 128	107:24:1808:1814	8154703	1	True				
ANR	8155042	RelationalExpression	j < 128		8154703	0		<			
ANR	8155043	Identifier	j		8154703	0					
ANR	8155044	PrimaryExpression	128		8154703	1					
ANR	8155045	CompoundStatement		103:35:1668:1668	8154703	2					
ANR	8155046	SwitchStatement	switch ( q -> coding_method [ ch ] [ sb ] [ j / 2 ] )		8154703	0					
ANR	8155047	Condition	q -> coding_method [ ch ] [ sb ] [ j / 2 ]	109:24:1846:1876	8154703	0	True				
ANR	8155048	ArrayIndexing	q -> coding_method [ ch ] [ sb ] [ j / 2 ]		8154703	0					
ANR	8155049	ArrayIndexing	q -> coding_method [ ch ] [ sb ]		8154703	0					
ANR	8155050	ArrayIndexing	q -> coding_method [ ch ]		8154703	0					
ANR	8155051	PtrMemberAccess	q -> coding_method		8154703	0					
ANR	8155052	Identifier	q		8154703	0					
ANR	8155053	Identifier	coding_method		8154703	1					
ANR	8155054	Identifier	ch		8154703	1					
ANR	8155055	Identifier	sb		8154703	1					
ANR	8155056	MultiplicativeExpression	j / 2		8154703	1		/			
ANR	8155057	Identifier	j		8154703	0					
ANR	8155058	PrimaryExpression	2		8154703	1					
ANR	8155059	CompoundStatement		105:57:1728:1728	8154703	1					
ANR	8155060	Label	case 8 :	111:20:1902:1908	8154703	0	True				
ANR	8155061	IfStatement	if ( get_bits_left ( gb ) >= 10 )		8154703	1					
ANR	8155062	Condition	get_bits_left ( gb ) >= 10	113:28:1939:1961	8154703	0	True				
ANR	8155063	RelationalExpression	get_bits_left ( gb ) >= 10		8154703	0		>=			
ANR	8155064	CallExpression	get_bits_left ( gb )		8154703	0					
ANR	8155065	Callee	get_bits_left		8154703	0					
ANR	8155066	Identifier	get_bits_left		8154703	0					
ANR	8155067	ArgumentList	gb		8154703	1					
ANR	8155068	Argument	gb		8154703	0					
ANR	8155069	Identifier	gb		8154703	0					
ANR	8155070	PrimaryExpression	10		8154703	1					
ANR	8155071	CompoundStatement		109:53:1813:1813	8154703	1					
ANR	8155072	IfStatement	if ( zero_encoding )		8154703	0					
ANR	8155073	Condition	zero_encoding	115:32:1999:2011	8154703	0	True				
ANR	8155074	Identifier	zero_encoding		8154703	0					
ANR	8155075	CompoundStatement		111:47:1863:1863	8154703	1					
ANR	8155076	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8154703	0					
ANR	8155077	ForInit	k = 0 ;	117:37:2054:2059	8154703	0	True				
ANR	8155078	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155079	Identifier	k		8154703	0					
ANR	8155080	PrimaryExpression	0		8154703	1					
ANR	8155081	Condition	k < 5	117:44:2061:2065	8154703	1	True				
ANR	8155082	RelationalExpression	k < 5		8154703	0		<			
ANR	8155083	Identifier	k		8154703	0					
ANR	8155084	PrimaryExpression	5		8154703	1					
ANR	8155085	PostIncDecOperationExpression	k ++	117:51:2068:2070	8154703	2	True				
ANR	8155086	Identifier	k		8154703	0					
ANR	8155087	IncDec	++		8154703	1					
ANR	8155088	CompoundStatement		113:56:1922:1922	8154703	3					
ANR	8155089	IfStatement	if ( ( j + 2 * k ) >= 128 )		8154703	0					
ANR	8155090	Condition	( j + 2 * k ) >= 128	119:40:2116:2133	8154703	0	True				
ANR	8155091	RelationalExpression	( j + 2 * k ) >= 128		8154703	0		>=			
ANR	8155092	AdditiveExpression	j + 2 * k		8154703	0		+			
ANR	8155093	Identifier	j		8154703	0					
ANR	8155094	MultiplicativeExpression	2 * k		8154703	1		*			
ANR	8155095	PrimaryExpression	2		8154703	0					
ANR	8155096	Identifier	k		8154703	1					
ANR	8155097	PrimaryExpression	128		8154703	1					
ANR	8155098	BreakStatement	break ;	121:40:2177:2182	8154703	1	True				
ANR	8155099	ExpressionStatement	samples [ 2 * k ] = get_bits1 ( gb ) ? dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ] : 0	123:36:2221:2304	8154703	1	True				
ANR	8155100	AssignmentExpression	samples [ 2 * k ] = get_bits1 ( gb ) ? dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ] : 0		8154703	0		=			
ANR	8155101	ArrayIndexing	samples [ 2 * k ]		8154703	0					
ANR	8155102	Identifier	samples		8154703	0					
ANR	8155103	MultiplicativeExpression	2 * k		8154703	1		*			
ANR	8155104	PrimaryExpression	2		8154703	0					
ANR	8155105	Identifier	k		8154703	1					
ANR	8155106	ConditionalExpression	get_bits1 ( gb ) ? dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ] : 0		8154703	1					
ANR	8155107	Condition	get_bits1 ( gb )		8154703	0					
ANR	8155108	CallExpression	get_bits1 ( gb )		8154703	0					
ANR	8155109	Callee	get_bits1		8154703	0					
ANR	8155110	Identifier	get_bits1		8154703	0					
ANR	8155111	ArgumentList	gb		8154703	1					
ANR	8155112	Argument	gb		8154703	0					
ANR	8155113	Identifier	gb		8154703	0					
ANR	8155114	ArrayIndexing	dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8154703	1					
ANR	8155115	ArrayIndexing	dequant_1bit [ joined_stereo ]		8154703	0					
ANR	8155116	Identifier	dequant_1bit		8154703	0					
ANR	8155117	Identifier	joined_stereo		8154703	1					
ANR	8155118	MultiplicativeExpression	2 * get_bits1 ( gb )		8154703	1		*			
ANR	8155119	PrimaryExpression	2		8154703	0					
ANR	8155120	CallExpression	get_bits1 ( gb )		8154703	1					
ANR	8155121	Callee	get_bits1		8154703	0					
ANR	8155122	Identifier	get_bits1		8154703	0					
ANR	8155123	ArgumentList	gb		8154703	1					
ANR	8155124	Argument	gb		8154703	0					
ANR	8155125	Identifier	gb		8154703	0					
ANR	8155126	PrimaryExpression	0		8154703	2					
ANR	8155127	ElseStatement	else		8154703	0					
ANR	8155128	CompoundStatement		123:35:2226:2226	8154703	0					
ANR	8155129	ExpressionStatement	"n = get_bits ( gb , 8 )"	129:32:2412:2431	8154703	0	True				
ANR	8155130	AssignmentExpression	"n = get_bits ( gb , 8 )"		8154703	0		=			
ANR	8155131	Identifier	n		8154703	0					
ANR	8155132	CallExpression	"get_bits ( gb , 8 )"		8154703	1					
ANR	8155133	Callee	get_bits		8154703	0					
ANR	8155134	Identifier	get_bits		8154703	0					
ANR	8155135	ArgumentList	gb		8154703	1					
ANR	8155136	Argument	gb		8154703	0					
ANR	8155137	Identifier	gb		8154703	0					
ANR	8155138	Argument	8		8154703	1					
ANR	8155139	PrimaryExpression	8		8154703	0					
ANR	8155140	IfStatement	if ( n >= 243 )		8154703	1					
ANR	8155141	Condition	n >= 243	131:36:2470:2477	8154703	0	True				
ANR	8155142	RelationalExpression	n >= 243		8154703	0		>=			
ANR	8155143	Identifier	n		8154703	0					
ANR	8155144	PrimaryExpression	243		8154703	1					
ANR	8155145	CompoundStatement		127:46:2329:2329	8154703	1					
ANR	8155146	ExpressionStatement	"av_log ( NULL , AV_LOG_ERROR , ""Invalid 8bit codeword\\n"" )"	133:36:2519:2572	8154703	0	True				
ANR	8155147	CallExpression	"av_log ( NULL , AV_LOG_ERROR , ""Invalid 8bit codeword\\n"" )"		8154703	0					
ANR	8155148	Callee	av_log		8154703	0					
ANR	8155149	Identifier	av_log		8154703	0					
ANR	8155150	ArgumentList	NULL		8154703	1					
ANR	8155151	Argument	NULL		8154703	0					
ANR	8155152	Identifier	NULL		8154703	0					
ANR	8155153	Argument	AV_LOG_ERROR		8154703	1					
ANR	8155154	Identifier	AV_LOG_ERROR		8154703	0					
ANR	8155155	Argument	"""Invalid 8bit codeword\\n"""		8154703	2					
ANR	8155156	PrimaryExpression	"""Invalid 8bit codeword\\n"""		8154703	0					
ANR	8155157	ReturnStatement	return AVERROR_INVALIDDATA ;	135:36:2611:2637	8154703	1	True				
ANR	8155158	Identifier	AVERROR_INVALIDDATA		8154703	0					
ANR	8155159	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8154703	2					
ANR	8155160	ForInit	k = 0 ;	141:37:2714:2719	8154703	0	True				
ANR	8155161	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155162	Identifier	k		8154703	0					
ANR	8155163	PrimaryExpression	0		8154703	1					
ANR	8155164	Condition	k < 5	141:44:2721:2725	8154703	1	True				
ANR	8155165	RelationalExpression	k < 5		8154703	0		<			
ANR	8155166	Identifier	k		8154703	0					
ANR	8155167	PrimaryExpression	5		8154703	1					
ANR	8155168	PostIncDecOperationExpression	k ++	141:51:2728:2730	8154703	2	True				
ANR	8155169	Identifier	k		8154703	0					
ANR	8155170	IncDec	++		8154703	1					
ANR	8155171	ExpressionStatement	samples [ 2 * k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]	143:36:2770:2842	8154703	3	True				
ANR	8155172	AssignmentExpression	samples [ 2 * k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8154703	0		=			
ANR	8155173	ArrayIndexing	samples [ 2 * k ]		8154703	0					
ANR	8155174	Identifier	samples		8154703	0					
ANR	8155175	MultiplicativeExpression	2 * k		8154703	1		*			
ANR	8155176	PrimaryExpression	2		8154703	0					
ANR	8155177	Identifier	k		8154703	1					
ANR	8155178	ArrayIndexing	dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8154703	1					
ANR	8155179	ArrayIndexing	dequant_1bit [ joined_stereo ]		8154703	0					
ANR	8155180	Identifier	dequant_1bit		8154703	0					
ANR	8155181	Identifier	joined_stereo		8154703	1					
ANR	8155182	ArrayIndexing	random_dequant_index [ n ] [ k ]		8154703	1					
ANR	8155183	ArrayIndexing	random_dequant_index [ n ]		8154703	0					
ANR	8155184	Identifier	random_dequant_index		8154703	0					
ANR	8155185	Identifier	n		8154703	1					
ANR	8155186	Identifier	k		8154703	1					
ANR	8155187	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8154703	1					
ANR	8155188	ForInit	k = 0 ;	147:33:2909:2914	8154703	0	True				
ANR	8155189	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155190	Identifier	k		8154703	0					
ANR	8155191	PrimaryExpression	0		8154703	1					
ANR	8155192	Condition	k < 5	147:40:2916:2920	8154703	1	True				
ANR	8155193	RelationalExpression	k < 5		8154703	0		<			
ANR	8155194	Identifier	k		8154703	0					
ANR	8155195	PrimaryExpression	5		8154703	1					
ANR	8155196	PostIncDecOperationExpression	k ++	147:47:2923:2925	8154703	2	True				
ANR	8155197	Identifier	k		8154703	0					
ANR	8155198	IncDec	++		8154703	1					
ANR	8155199	ExpressionStatement	"samples [ 2 * k + 1 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	149:32:2961:3017	8154703	3	True				
ANR	8155200	AssignmentExpression	"samples [ 2 * k + 1 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	0		=			
ANR	8155201	ArrayIndexing	samples [ 2 * k + 1 ]		8154703	0					
ANR	8155202	Identifier	samples		8154703	0					
ANR	8155203	AdditiveExpression	2 * k + 1		8154703	1		+			
ANR	8155204	MultiplicativeExpression	2 * k		8154703	0		*			
ANR	8155205	PrimaryExpression	2		8154703	0					
ANR	8155206	Identifier	k		8154703	1					
ANR	8155207	PrimaryExpression	1		8154703	1					
ANR	8155208	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	1					
ANR	8155209	Callee	SB_DITHERING_NOISE		8154703	0					
ANR	8155210	Identifier	SB_DITHERING_NOISE		8154703	0					
ANR	8155211	ArgumentList	sb		8154703	1					
ANR	8155212	Argument	sb		8154703	0					
ANR	8155213	Identifier	sb		8154703	0					
ANR	8155214	Argument	q -> noise_idx		8154703	1					
ANR	8155215	PtrMemberAccess	q -> noise_idx		8154703	0					
ANR	8155216	Identifier	q		8154703	0					
ANR	8155217	Identifier	noise_idx		8154703	1					
ANR	8155218	ElseStatement	else		8154703	0					
ANR	8155219	CompoundStatement		147:31:2900:2900	8154703	0					
ANR	8155220	ForStatement	for ( k = 0 ; k < 10 ; k ++ )		8154703	0					
ANR	8155221	ForInit	k = 0 ;	153:33:3087:3092	8154703	0	True				
ANR	8155222	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155223	Identifier	k		8154703	0					
ANR	8155224	PrimaryExpression	0		8154703	1					
ANR	8155225	Condition	k < 10	153:40:3094:3099	8154703	1	True				
ANR	8155226	RelationalExpression	k < 10		8154703	0		<			
ANR	8155227	Identifier	k		8154703	0					
ANR	8155228	PrimaryExpression	10		8154703	1					
ANR	8155229	PostIncDecOperationExpression	k ++	153:48:3102:3104	8154703	2	True				
ANR	8155230	Identifier	k		8154703	0					
ANR	8155231	IncDec	++		8154703	1					
ANR	8155232	ExpressionStatement	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	155:32:3140:3188	8154703	3	True				
ANR	8155233	AssignmentExpression	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	0		=			
ANR	8155234	ArrayIndexing	samples [ k ]		8154703	0					
ANR	8155235	Identifier	samples		8154703	0					
ANR	8155236	Identifier	k		8154703	1					
ANR	8155237	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	1					
ANR	8155238	Callee	SB_DITHERING_NOISE		8154703	0					
ANR	8155239	Identifier	SB_DITHERING_NOISE		8154703	0					
ANR	8155240	ArgumentList	sb		8154703	1					
ANR	8155241	Argument	sb		8154703	0					
ANR	8155242	Identifier	sb		8154703	0					
ANR	8155243	Argument	q -> noise_idx		8154703	1					
ANR	8155244	PtrMemberAccess	q -> noise_idx		8154703	0					
ANR	8155245	Identifier	q		8154703	0					
ANR	8155246	Identifier	noise_idx		8154703	1					
ANR	8155247	ExpressionStatement	run = 10	159:24:3242:3250	8154703	2	True				
ANR	8155248	AssignmentExpression	run = 10		8154703	0		=			
ANR	8155249	Identifier	run		8154703	0					
ANR	8155250	PrimaryExpression	10		8154703	1					
ANR	8155251	BreakStatement	break ;	161:24:3277:3282	8154703	3	True				
ANR	8155252	Label	case 10 :	165:20:3307:3314	8154703	4	True				
ANR	8155253	IfStatement	if ( get_bits_left ( gb ) >= 1 )		8154703	5					
ANR	8155254	Condition	get_bits_left ( gb ) >= 1	167:28:3345:3366	8154703	0	True				
ANR	8155255	RelationalExpression	get_bits_left ( gb ) >= 1		8154703	0		>=			
ANR	8155256	CallExpression	get_bits_left ( gb )		8154703	0					
ANR	8155257	Callee	get_bits_left		8154703	0					
ANR	8155258	Identifier	get_bits_left		8154703	0					
ANR	8155259	ArgumentList	gb		8154703	1					
ANR	8155260	Argument	gb		8154703	0					
ANR	8155261	Identifier	gb		8154703	0					
ANR	8155262	PrimaryExpression	1		8154703	1					
ANR	8155263	CompoundStatement		165:28:3249:3263	8154703	1					
ANR	8155264	IdentifierDeclStatement	float f = 0.81 ;	169:28:3400:3414	8154703	0	True				
ANR	8155265	IdentifierDecl	f = 0.81		8154703	0					
ANR	8155266	IdentifierDeclType	float		8154703	0					
ANR	8155267	Identifier	f		8154703	1					
ANR	8155268	AssignmentExpression	f = 0.81		8154703	2		=			
ANR	8155269	Identifier	f		8154703	0					
ANR	8155270	PrimaryExpression	0.81		8154703	1					
ANR	8155271	IfStatement	if ( get_bits1 ( gb ) )		8154703	1					
ANR	8155272	Condition	get_bits1 ( gb )	173:32:3451:3463	8154703	0	True				
ANR	8155273	CallExpression	get_bits1 ( gb )		8154703	0					
ANR	8155274	Callee	get_bits1		8154703	0					
ANR	8155275	Identifier	get_bits1		8154703	0					
ANR	8155276	ArgumentList	gb		8154703	1					
ANR	8155277	Argument	gb		8154703	0					
ANR	8155278	Identifier	gb		8154703	0					
ANR	8155279	ExpressionStatement	f = - f	175:32:3499:3505	8154703	1	True				
ANR	8155280	AssignmentExpression	f = - f		8154703	0		=			
ANR	8155281	Identifier	f		8154703	0					
ANR	8155282	UnaryOperationExpression	- f		8154703	1					
ANR	8155283	UnaryOperator	-		8154703	0					
ANR	8155284	Identifier	f		8154703	1					
ANR	8155285	ExpressionStatement	f -= noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ] * 9.0 / 40.0	177:28:3536:3603	8154703	2	True				
ANR	8155286	AssignmentExpression	f -= noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ] * 9.0 / 40.0		8154703	0		-=			
ANR	8155287	Identifier	f		8154703	0					
ANR	8155288	MultiplicativeExpression	noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ] * 9.0 / 40.0		8154703	1		*			
ANR	8155289	ArrayIndexing	noise_samples [ ( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127 ]		8154703	0					
ANR	8155290	Identifier	noise_samples		8154703	0					
ANR	8155291	BitAndExpression	( ( sb + 1 ) * ( j + 5 * ch + 1 ) ) & 127		8154703	1		&			
ANR	8155292	MultiplicativeExpression	( sb + 1 ) * ( j + 5 * ch + 1 )		8154703	0		*			
ANR	8155293	AdditiveExpression	sb + 1		8154703	0		+			
ANR	8155294	Identifier	sb		8154703	0					
ANR	8155295	PrimaryExpression	1		8154703	1					
ANR	8155296	AdditiveExpression	j + 5 * ch + 1		8154703	1		+			
ANR	8155297	Identifier	j		8154703	0					
ANR	8155298	AdditiveExpression	5 * ch + 1		8154703	1		+			
ANR	8155299	MultiplicativeExpression	5 * ch		8154703	0		*			
ANR	8155300	PrimaryExpression	5		8154703	0					
ANR	8155301	Identifier	ch		8154703	1					
ANR	8155302	PrimaryExpression	1		8154703	1					
ANR	8155303	PrimaryExpression	127		8154703	1					
ANR	8155304	MultiplicativeExpression	9.0 / 40.0		8154703	1		/			
ANR	8155305	PrimaryExpression	9.0		8154703	0					
ANR	8155306	PrimaryExpression	40.0		8154703	1					
ANR	8155307	ExpressionStatement	samples [ 0 ] = f	179:28:3634:3648	8154703	3	True				
ANR	8155308	AssignmentExpression	samples [ 0 ] = f		8154703	0		=			
ANR	8155309	ArrayIndexing	samples [ 0 ]		8154703	0					
ANR	8155310	Identifier	samples		8154703	0					
ANR	8155311	PrimaryExpression	0		8154703	1					
ANR	8155312	Identifier	f		8154703	1					
ANR	8155313	ElseStatement	else		8154703	0					
ANR	8155314	CompoundStatement		177:31:3531:3531	8154703	0					
ANR	8155315	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	183:28:3713:3761	8154703	0	True				
ANR	8155316	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	0		=			
ANR	8155317	ArrayIndexing	samples [ 0 ]		8154703	0					
ANR	8155318	Identifier	samples		8154703	0					
ANR	8155319	PrimaryExpression	0		8154703	1					
ANR	8155320	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	1					
ANR	8155321	Callee	SB_DITHERING_NOISE		8154703	0					
ANR	8155322	Identifier	SB_DITHERING_NOISE		8154703	0					
ANR	8155323	ArgumentList	sb		8154703	1					
ANR	8155324	Argument	sb		8154703	0					
ANR	8155325	Identifier	sb		8154703	0					
ANR	8155326	Argument	q -> noise_idx		8154703	1					
ANR	8155327	PtrMemberAccess	q -> noise_idx		8154703	0					
ANR	8155328	Identifier	q		8154703	0					
ANR	8155329	Identifier	noise_idx		8154703	1					
ANR	8155330	ExpressionStatement	run = 1	187:24:3815:3822	8154703	6	True				
ANR	8155331	AssignmentExpression	run = 1		8154703	0		=			
ANR	8155332	Identifier	run		8154703	0					
ANR	8155333	PrimaryExpression	1		8154703	1					
ANR	8155334	BreakStatement	break ;	189:24:3849:3854	8154703	7	True				
ANR	8155335	Label	case 16 :	193:20:3879:3886	8154703	8	True				
ANR	8155336	IfStatement	if ( get_bits_left ( gb ) >= 10 )		8154703	9					
ANR	8155337	Condition	get_bits_left ( gb ) >= 10	195:28:3917:3939	8154703	0	True				
ANR	8155338	RelationalExpression	get_bits_left ( gb ) >= 10		8154703	0		>=			
ANR	8155339	CallExpression	get_bits_left ( gb )		8154703	0					
ANR	8155340	Callee	get_bits_left		8154703	0					
ANR	8155341	Identifier	get_bits_left		8154703	0					
ANR	8155342	ArgumentList	gb		8154703	1					
ANR	8155343	Argument	gb		8154703	0					
ANR	8155344	Identifier	gb		8154703	0					
ANR	8155345	PrimaryExpression	10		8154703	1					
ANR	8155346	CompoundStatement		191:53:3791:3791	8154703	1					
ANR	8155347	IfStatement	if ( zero_encoding )		8154703	0					
ANR	8155348	Condition	zero_encoding	197:32:3977:3989	8154703	0	True				
ANR	8155349	Identifier	zero_encoding		8154703	0					
ANR	8155350	CompoundStatement		193:47:3841:3841	8154703	1					
ANR	8155351	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8154703	0					
ANR	8155352	ForInit	k = 0 ;	199:37:4032:4037	8154703	0	True				
ANR	8155353	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155354	Identifier	k		8154703	0					
ANR	8155355	PrimaryExpression	0		8154703	1					
ANR	8155356	Condition	k < 5	199:44:4039:4043	8154703	1	True				
ANR	8155357	RelationalExpression	k < 5		8154703	0		<			
ANR	8155358	Identifier	k		8154703	0					
ANR	8155359	PrimaryExpression	5		8154703	1					
ANR	8155360	PostIncDecOperationExpression	k ++	199:51:4046:4048	8154703	2	True				
ANR	8155361	Identifier	k		8154703	0					
ANR	8155362	IncDec	++		8154703	1					
ANR	8155363	CompoundStatement		195:56:3900:3900	8154703	3					
ANR	8155364	IfStatement	if ( ( j + k ) >= 128 )		8154703	0					
ANR	8155365	Condition	( j + k ) >= 128	201:40:4094:4107	8154703	0	True				
ANR	8155366	RelationalExpression	( j + k ) >= 128		8154703	0		>=			
ANR	8155367	AdditiveExpression	j + k		8154703	0		+			
ANR	8155368	Identifier	j		8154703	0					
ANR	8155369	Identifier	k		8154703	1					
ANR	8155370	PrimaryExpression	128		8154703	1					
ANR	8155371	BreakStatement	break ;	203:40:4151:4156	8154703	1	True				
ANR	8155372	ExpressionStatement	samples [ k ] = ( get_bits1 ( gb ) == 0 ) ? 0 : dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]	205:36:4195:4281	8154703	1	True				
ANR	8155373	AssignmentExpression	samples [ k ] = ( get_bits1 ( gb ) == 0 ) ? 0 : dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8154703	0		=			
ANR	8155374	ArrayIndexing	samples [ k ]		8154703	0					
ANR	8155375	Identifier	samples		8154703	0					
ANR	8155376	Identifier	k		8154703	1					
ANR	8155377	ConditionalExpression	( get_bits1 ( gb ) == 0 ) ? 0 : dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8154703	1					
ANR	8155378	Condition	get_bits1 ( gb ) == 0		8154703	0					
ANR	8155379	EqualityExpression	get_bits1 ( gb ) == 0		8154703	0		==			
ANR	8155380	CallExpression	get_bits1 ( gb )		8154703	0					
ANR	8155381	Callee	get_bits1		8154703	0					
ANR	8155382	Identifier	get_bits1		8154703	0					
ANR	8155383	ArgumentList	gb		8154703	1					
ANR	8155384	Argument	gb		8154703	0					
ANR	8155385	Identifier	gb		8154703	0					
ANR	8155386	PrimaryExpression	0		8154703	1					
ANR	8155387	PrimaryExpression	0		8154703	1					
ANR	8155388	ArrayIndexing	dequant_1bit [ joined_stereo ] [ 2 * get_bits1 ( gb ) ]		8154703	2					
ANR	8155389	ArrayIndexing	dequant_1bit [ joined_stereo ]		8154703	0					
ANR	8155390	Identifier	dequant_1bit		8154703	0					
ANR	8155391	Identifier	joined_stereo		8154703	1					
ANR	8155392	MultiplicativeExpression	2 * get_bits1 ( gb )		8154703	1		*			
ANR	8155393	PrimaryExpression	2		8154703	0					
ANR	8155394	CallExpression	get_bits1 ( gb )		8154703	1					
ANR	8155395	Callee	get_bits1		8154703	0					
ANR	8155396	Identifier	get_bits1		8154703	0					
ANR	8155397	ArgumentList	gb		8154703	1					
ANR	8155398	Argument	gb		8154703	0					
ANR	8155399	Identifier	gb		8154703	0					
ANR	8155400	ElseStatement	else		8154703	0					
ANR	8155401	CompoundStatement		205:35:4203:4203	8154703	0					
ANR	8155402	ExpressionStatement	"n = get_bits ( gb , 8 )"	211:32:4389:4409	8154703	0	True				
ANR	8155403	AssignmentExpression	"n = get_bits ( gb , 8 )"		8154703	0		=			
ANR	8155404	Identifier	n		8154703	0					
ANR	8155405	CallExpression	"get_bits ( gb , 8 )"		8154703	1					
ANR	8155406	Callee	get_bits		8154703	0					
ANR	8155407	Identifier	get_bits		8154703	0					
ANR	8155408	ArgumentList	gb		8154703	1					
ANR	8155409	Argument	gb		8154703	0					
ANR	8155410	Identifier	gb		8154703	0					
ANR	8155411	Argument	8		8154703	1					
ANR	8155412	PrimaryExpression	8		8154703	0					
ANR	8155413	IfStatement	if ( n >= 243 )		8154703	1					
ANR	8155414	Condition	n >= 243	213:36:4448:4455	8154703	0	True				
ANR	8155415	RelationalExpression	n >= 243		8154703	0		>=			
ANR	8155416	Identifier	n		8154703	0					
ANR	8155417	PrimaryExpression	243		8154703	1					
ANR	8155418	CompoundStatement		209:46:4307:4307	8154703	1					
ANR	8155419	ExpressionStatement	"av_log ( NULL , AV_LOG_ERROR , ""Invalid 8bit codeword\\n"" )"	215:36:4497:4550	8154703	0	True				
ANR	8155420	CallExpression	"av_log ( NULL , AV_LOG_ERROR , ""Invalid 8bit codeword\\n"" )"		8154703	0					
ANR	8155421	Callee	av_log		8154703	0					
ANR	8155422	Identifier	av_log		8154703	0					
ANR	8155423	ArgumentList	NULL		8154703	1					
ANR	8155424	Argument	NULL		8154703	0					
ANR	8155425	Identifier	NULL		8154703	0					
ANR	8155426	Argument	AV_LOG_ERROR		8154703	1					
ANR	8155427	Identifier	AV_LOG_ERROR		8154703	0					
ANR	8155428	Argument	"""Invalid 8bit codeword\\n"""		8154703	2					
ANR	8155429	PrimaryExpression	"""Invalid 8bit codeword\\n"""		8154703	0					
ANR	8155430	ReturnStatement	return AVERROR_INVALIDDATA ;	217:36:4589:4615	8154703	1	True				
ANR	8155431	Identifier	AVERROR_INVALIDDATA		8154703	0					
ANR	8155432	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8154703	2					
ANR	8155433	ForInit	k = 0 ;	223:37:4692:4697	8154703	0	True				
ANR	8155434	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155435	Identifier	k		8154703	0					
ANR	8155436	PrimaryExpression	0		8154703	1					
ANR	8155437	Condition	k < 5	223:44:4699:4703	8154703	1	True				
ANR	8155438	RelationalExpression	k < 5		8154703	0		<			
ANR	8155439	Identifier	k		8154703	0					
ANR	8155440	PrimaryExpression	5		8154703	1					
ANR	8155441	PostIncDecOperationExpression	k ++	223:51:4706:4708	8154703	2	True				
ANR	8155442	Identifier	k		8154703	0					
ANR	8155443	IncDec	++		8154703	1					
ANR	8155444	ExpressionStatement	samples [ k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]	225:36:4748:4816	8154703	3	True				
ANR	8155445	AssignmentExpression	samples [ k ] = dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8154703	0		=			
ANR	8155446	ArrayIndexing	samples [ k ]		8154703	0					
ANR	8155447	Identifier	samples		8154703	0					
ANR	8155448	Identifier	k		8154703	1					
ANR	8155449	ArrayIndexing	dequant_1bit [ joined_stereo ] [ random_dequant_index [ n ] [ k ] ]		8154703	1					
ANR	8155450	ArrayIndexing	dequant_1bit [ joined_stereo ]		8154703	0					
ANR	8155451	Identifier	dequant_1bit		8154703	0					
ANR	8155452	Identifier	joined_stereo		8154703	1					
ANR	8155453	ArrayIndexing	random_dequant_index [ n ] [ k ]		8154703	1					
ANR	8155454	ArrayIndexing	random_dequant_index [ n ]		8154703	0					
ANR	8155455	Identifier	random_dequant_index		8154703	0					
ANR	8155456	Identifier	n		8154703	1					
ANR	8155457	Identifier	k		8154703	1					
ANR	8155458	ElseStatement	else		8154703	0					
ANR	8155459	CompoundStatement		225:31:4730:4730	8154703	0					
ANR	8155460	ForStatement	for ( k = 0 ; k < 5 ; k ++ )		8154703	0					
ANR	8155461	ForInit	k = 0 ;	231:33:4917:4922	8154703	0	True				
ANR	8155462	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155463	Identifier	k		8154703	0					
ANR	8155464	PrimaryExpression	0		8154703	1					
ANR	8155465	Condition	k < 5	231:40:4924:4928	8154703	1	True				
ANR	8155466	RelationalExpression	k < 5		8154703	0		<			
ANR	8155467	Identifier	k		8154703	0					
ANR	8155468	PrimaryExpression	5		8154703	1					
ANR	8155469	PostIncDecOperationExpression	k ++	231:47:4931:4933	8154703	2	True				
ANR	8155470	Identifier	k		8154703	0					
ANR	8155471	IncDec	++		8154703	1					
ANR	8155472	ExpressionStatement	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	233:32:4969:5017	8154703	3	True				
ANR	8155473	AssignmentExpression	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	0		=			
ANR	8155474	ArrayIndexing	samples [ k ]		8154703	0					
ANR	8155475	Identifier	samples		8154703	0					
ANR	8155476	Identifier	k		8154703	1					
ANR	8155477	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	1					
ANR	8155478	Callee	SB_DITHERING_NOISE		8154703	0					
ANR	8155479	Identifier	SB_DITHERING_NOISE		8154703	0					
ANR	8155480	ArgumentList	sb		8154703	1					
ANR	8155481	Argument	sb		8154703	0					
ANR	8155482	Identifier	sb		8154703	0					
ANR	8155483	Argument	q -> noise_idx		8154703	1					
ANR	8155484	PtrMemberAccess	q -> noise_idx		8154703	0					
ANR	8155485	Identifier	q		8154703	0					
ANR	8155486	Identifier	noise_idx		8154703	1					
ANR	8155487	ExpressionStatement	run = 5	237:24:5071:5078	8154703	10	True				
ANR	8155488	AssignmentExpression	run = 5		8154703	0		=			
ANR	8155489	Identifier	run		8154703	0					
ANR	8155490	PrimaryExpression	5		8154703	1					
ANR	8155491	BreakStatement	break ;	239:24:5105:5110	8154703	11	True				
ANR	8155492	Label	case 24 :	243:20:5135:5142	8154703	12	True				
ANR	8155493	IfStatement	if ( get_bits_left ( gb ) >= 7 )		8154703	13					
ANR	8155494	Condition	get_bits_left ( gb ) >= 7	245:28:5173:5194	8154703	0	True				
ANR	8155495	RelationalExpression	get_bits_left ( gb ) >= 7		8154703	0		>=			
ANR	8155496	CallExpression	get_bits_left ( gb )		8154703	0					
ANR	8155497	Callee	get_bits_left		8154703	0					
ANR	8155498	Identifier	get_bits_left		8154703	0					
ANR	8155499	ArgumentList	gb		8154703	1					
ANR	8155500	Argument	gb		8154703	0					
ANR	8155501	Identifier	gb		8154703	0					
ANR	8155502	PrimaryExpression	7		8154703	1					
ANR	8155503	CompoundStatement		241:52:5046:5046	8154703	1					
ANR	8155504	ExpressionStatement	"n = get_bits ( gb , 7 )"	247:28:5228:5247	8154703	0	True				
ANR	8155505	AssignmentExpression	"n = get_bits ( gb , 7 )"		8154703	0		=			
ANR	8155506	Identifier	n		8154703	0					
ANR	8155507	CallExpression	"get_bits ( gb , 7 )"		8154703	1					
ANR	8155508	Callee	get_bits		8154703	0					
ANR	8155509	Identifier	get_bits		8154703	0					
ANR	8155510	ArgumentList	gb		8154703	1					
ANR	8155511	Argument	gb		8154703	0					
ANR	8155512	Identifier	gb		8154703	0					
ANR	8155513	Argument	7		8154703	1					
ANR	8155514	PrimaryExpression	7		8154703	0					
ANR	8155515	IfStatement	if ( n >= 125 )		8154703	1					
ANR	8155516	Condition	n >= 125	249:32:5282:5289	8154703	0	True				
ANR	8155517	RelationalExpression	n >= 125		8154703	0		>=			
ANR	8155518	Identifier	n		8154703	0					
ANR	8155519	PrimaryExpression	125		8154703	1					
ANR	8155520	CompoundStatement		245:42:5141:5141	8154703	1					
ANR	8155521	ExpressionStatement	"av_log ( NULL , AV_LOG_ERROR , ""Invalid 7bit codeword\\n"" )"	251:32:5327:5380	8154703	0	True				
ANR	8155522	CallExpression	"av_log ( NULL , AV_LOG_ERROR , ""Invalid 7bit codeword\\n"" )"		8154703	0					
ANR	8155523	Callee	av_log		8154703	0					
ANR	8155524	Identifier	av_log		8154703	0					
ANR	8155525	ArgumentList	NULL		8154703	1					
ANR	8155526	Argument	NULL		8154703	0					
ANR	8155527	Identifier	NULL		8154703	0					
ANR	8155528	Argument	AV_LOG_ERROR		8154703	1					
ANR	8155529	Identifier	AV_LOG_ERROR		8154703	0					
ANR	8155530	Argument	"""Invalid 7bit codeword\\n"""		8154703	2					
ANR	8155531	PrimaryExpression	"""Invalid 7bit codeword\\n"""		8154703	0					
ANR	8155532	ReturnStatement	return AVERROR_INVALIDDATA ;	253:32:5415:5441	8154703	1	True				
ANR	8155533	Identifier	AVERROR_INVALIDDATA		8154703	0					
ANR	8155534	ForStatement	for ( k = 0 ; k < 3 ; k ++ )		8154703	2					
ANR	8155535	ForInit	k = 0 ;	259:33:5510:5515	8154703	0	True				
ANR	8155536	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155537	Identifier	k		8154703	0					
ANR	8155538	PrimaryExpression	0		8154703	1					
ANR	8155539	Condition	k < 3	259:40:5517:5521	8154703	1	True				
ANR	8155540	RelationalExpression	k < 3		8154703	0		<			
ANR	8155541	Identifier	k		8154703	0					
ANR	8155542	PrimaryExpression	3		8154703	1					
ANR	8155543	PostIncDecOperationExpression	k ++	259:47:5524:5526	8154703	2	True				
ANR	8155544	Identifier	k		8154703	0					
ANR	8155545	IncDec	++		8154703	1					
ANR	8155546	ExpressionStatement	samples [ k ] = ( random_dequant_type24 [ n ] [ k ] - 2.0 ) * 0.5	261:32:5562:5616	8154703	3	True				
ANR	8155547	AssignmentExpression	samples [ k ] = ( random_dequant_type24 [ n ] [ k ] - 2.0 ) * 0.5		8154703	0		=			
ANR	8155548	ArrayIndexing	samples [ k ]		8154703	0					
ANR	8155549	Identifier	samples		8154703	0					
ANR	8155550	Identifier	k		8154703	1					
ANR	8155551	MultiplicativeExpression	( random_dequant_type24 [ n ] [ k ] - 2.0 ) * 0.5		8154703	1		*			
ANR	8155552	AdditiveExpression	random_dequant_type24 [ n ] [ k ] - 2.0		8154703	0		-			
ANR	8155553	ArrayIndexing	random_dequant_type24 [ n ] [ k ]		8154703	0					
ANR	8155554	ArrayIndexing	random_dequant_type24 [ n ]		8154703	0					
ANR	8155555	Identifier	random_dequant_type24		8154703	0					
ANR	8155556	Identifier	n		8154703	1					
ANR	8155557	Identifier	k		8154703	1					
ANR	8155558	PrimaryExpression	2.0		8154703	1					
ANR	8155559	PrimaryExpression	0.5		8154703	1					
ANR	8155560	ElseStatement	else		8154703	0					
ANR	8155561	CompoundStatement		259:31:5499:5499	8154703	0					
ANR	8155562	ForStatement	for ( k = 0 ; k < 3 ; k ++ )		8154703	0					
ANR	8155563	ForInit	k = 0 ;	265:33:5686:5691	8154703	0	True				
ANR	8155564	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155565	Identifier	k		8154703	0					
ANR	8155566	PrimaryExpression	0		8154703	1					
ANR	8155567	Condition	k < 3	265:40:5693:5697	8154703	1	True				
ANR	8155568	RelationalExpression	k < 3		8154703	0		<			
ANR	8155569	Identifier	k		8154703	0					
ANR	8155570	PrimaryExpression	3		8154703	1					
ANR	8155571	PostIncDecOperationExpression	k ++	265:47:5700:5702	8154703	2	True				
ANR	8155572	Identifier	k		8154703	0					
ANR	8155573	IncDec	++		8154703	1					
ANR	8155574	ExpressionStatement	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	267:32:5738:5786	8154703	3	True				
ANR	8155575	AssignmentExpression	"samples [ k ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	0		=			
ANR	8155576	ArrayIndexing	samples [ k ]		8154703	0					
ANR	8155577	Identifier	samples		8154703	0					
ANR	8155578	Identifier	k		8154703	1					
ANR	8155579	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	1					
ANR	8155580	Callee	SB_DITHERING_NOISE		8154703	0					
ANR	8155581	Identifier	SB_DITHERING_NOISE		8154703	0					
ANR	8155582	ArgumentList	sb		8154703	1					
ANR	8155583	Argument	sb		8154703	0					
ANR	8155584	Identifier	sb		8154703	0					
ANR	8155585	Argument	q -> noise_idx		8154703	1					
ANR	8155586	PtrMemberAccess	q -> noise_idx		8154703	0					
ANR	8155587	Identifier	q		8154703	0					
ANR	8155588	Identifier	noise_idx		8154703	1					
ANR	8155589	ExpressionStatement	run = 3	271:24:5840:5847	8154703	14	True				
ANR	8155590	AssignmentExpression	run = 3		8154703	0		=			
ANR	8155591	Identifier	run		8154703	0					
ANR	8155592	PrimaryExpression	3		8154703	1					
ANR	8155593	BreakStatement	break ;	273:24:5874:5879	8154703	15	True				
ANR	8155594	Label	case 30 :	277:20:5904:5911	8154703	16	True				
ANR	8155595	IfStatement	if ( get_bits_left ( gb ) >= 4 )		8154703	17					
ANR	8155596	Condition	get_bits_left ( gb ) >= 4	279:28:5942:5963	8154703	0	True				
ANR	8155597	RelationalExpression	get_bits_left ( gb ) >= 4		8154703	0		>=			
ANR	8155598	CallExpression	get_bits_left ( gb )		8154703	0					
ANR	8155599	Callee	get_bits_left		8154703	0					
ANR	8155600	Identifier	get_bits_left		8154703	0					
ANR	8155601	ArgumentList	gb		8154703	1					
ANR	8155602	Argument	gb		8154703	0					
ANR	8155603	Identifier	gb		8154703	0					
ANR	8155604	PrimaryExpression	4		8154703	1					
ANR	8155605	CompoundStatement		277:28:5846:5902	8154703	1					
ANR	8155606	IdentifierDeclStatement	"unsigned index = qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 ) ;"	281:28:5997:6053	8154703	0	True				
ANR	8155607	IdentifierDecl	"index = qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 )"		8154703	0					
ANR	8155608	IdentifierDeclType	unsigned		8154703	0					
ANR	8155609	Identifier	index		8154703	1					
ANR	8155610	AssignmentExpression	"index = qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 )"		8154703	2		=			
ANR	8155611	Identifier	index		8154703	0					
ANR	8155612	CallExpression	"qdm2_get_vlc ( gb , & vlc_tab_type30 , 0 , 1 )"		8154703	1					
ANR	8155613	Callee	qdm2_get_vlc		8154703	0					
ANR	8155614	Identifier	qdm2_get_vlc		8154703	0					
ANR	8155615	ArgumentList	gb		8154703	1					
ANR	8155616	Argument	gb		8154703	0					
ANR	8155617	Identifier	gb		8154703	0					
ANR	8155618	Argument	& vlc_tab_type30		8154703	1					
ANR	8155619	UnaryOperationExpression	& vlc_tab_type30		8154703	0					
ANR	8155620	UnaryOperator	&		8154703	0					
ANR	8155621	Identifier	vlc_tab_type30		8154703	1					
ANR	8155622	Argument	0		8154703	2					
ANR	8155623	PrimaryExpression	0		8154703	0					
ANR	8155624	Argument	1		8154703	3					
ANR	8155625	PrimaryExpression	1		8154703	0					
ANR	8155626	IfStatement	if ( index >= FF_ARRAY_ELEMS ( type30_dequant ) )		8154703	1					
ANR	8155627	Condition	index >= FF_ARRAY_ELEMS ( type30_dequant )	283:32:6088:6126	8154703	0	True				
ANR	8155628	RelationalExpression	index >= FF_ARRAY_ELEMS ( type30_dequant )		8154703	0		>=			
ANR	8155629	Identifier	index		8154703	0					
ANR	8155630	CallExpression	FF_ARRAY_ELEMS ( type30_dequant )		8154703	1					
ANR	8155631	Callee	FF_ARRAY_ELEMS		8154703	0					
ANR	8155632	Identifier	FF_ARRAY_ELEMS		8154703	0					
ANR	8155633	ArgumentList	type30_dequant		8154703	1					
ANR	8155634	Argument	type30_dequant		8154703	0					
ANR	8155635	Identifier	type30_dequant		8154703	0					
ANR	8155636	CompoundStatement		279:73:5978:5978	8154703	1					
ANR	8155637	ExpressionStatement	"av_log ( NULL , AV_LOG_ERROR , ""index %d out of type30_dequant array\\n"" , index )"	285:32:6164:6239	8154703	0	True				
ANR	8155638	CallExpression	"av_log ( NULL , AV_LOG_ERROR , ""index %d out of type30_dequant array\\n"" , index )"		8154703	0					
ANR	8155639	Callee	av_log		8154703	0					
ANR	8155640	Identifier	av_log		8154703	0					
ANR	8155641	ArgumentList	NULL		8154703	1					
ANR	8155642	Argument	NULL		8154703	0					
ANR	8155643	Identifier	NULL		8154703	0					
ANR	8155644	Argument	AV_LOG_ERROR		8154703	1					
ANR	8155645	Identifier	AV_LOG_ERROR		8154703	0					
ANR	8155646	Argument	"""index %d out of type30_dequant array\\n"""		8154703	2					
ANR	8155647	PrimaryExpression	"""index %d out of type30_dequant array\\n"""		8154703	0					
ANR	8155648	Argument	index		8154703	3					
ANR	8155649	Identifier	index		8154703	0					
ANR	8155650	ReturnStatement	return AVERROR_INVALIDDATA ;	287:32:6274:6300	8154703	1	True				
ANR	8155651	Identifier	AVERROR_INVALIDDATA		8154703	0					
ANR	8155652	ExpressionStatement	samples [ 0 ] = type30_dequant [ index ]	291:28:6362:6396	8154703	2	True				
ANR	8155653	AssignmentExpression	samples [ 0 ] = type30_dequant [ index ]		8154703	0		=			
ANR	8155654	ArrayIndexing	samples [ 0 ]		8154703	0					
ANR	8155655	Identifier	samples		8154703	0					
ANR	8155656	PrimaryExpression	0		8154703	1					
ANR	8155657	ArrayIndexing	type30_dequant [ index ]		8154703	1					
ANR	8155658	Identifier	type30_dequant		8154703	0					
ANR	8155659	Identifier	index		8154703	1					
ANR	8155660	ElseStatement	else		8154703	0					
ANR	8155661	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	295:28:6459:6507	8154703	0	True				
ANR	8155662	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	0		=			
ANR	8155663	ArrayIndexing	samples [ 0 ]		8154703	0					
ANR	8155664	Identifier	samples		8154703	0					
ANR	8155665	PrimaryExpression	0		8154703	1					
ANR	8155666	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	1					
ANR	8155667	Callee	SB_DITHERING_NOISE		8154703	0					
ANR	8155668	Identifier	SB_DITHERING_NOISE		8154703	0					
ANR	8155669	ArgumentList	sb		8154703	1					
ANR	8155670	Argument	sb		8154703	0					
ANR	8155671	Identifier	sb		8154703	0					
ANR	8155672	Argument	q -> noise_idx		8154703	1					
ANR	8155673	PtrMemberAccess	q -> noise_idx		8154703	0					
ANR	8155674	Identifier	q		8154703	0					
ANR	8155675	Identifier	noise_idx		8154703	1					
ANR	8155676	ExpressionStatement	run = 1	299:24:6536:6543	8154703	18	True				
ANR	8155677	AssignmentExpression	run = 1		8154703	0		=			
ANR	8155678	Identifier	run		8154703	0					
ANR	8155679	PrimaryExpression	1		8154703	1					
ANR	8155680	BreakStatement	break ;	301:24:6570:6575	8154703	19	True				
ANR	8155681	Label	case 34 :	305:20:6600:6607	8154703	20	True				
ANR	8155682	IfStatement	if ( get_bits_left ( gb ) >= 7 )		8154703	21					
ANR	8155683	Condition	get_bits_left ( gb ) >= 7	307:28:6638:6659	8154703	0	True				
ANR	8155684	RelationalExpression	get_bits_left ( gb ) >= 7		8154703	0		>=			
ANR	8155685	CallExpression	get_bits_left ( gb )		8154703	0					
ANR	8155686	Callee	get_bits_left		8154703	0					
ANR	8155687	Identifier	get_bits_left		8154703	0					
ANR	8155688	ArgumentList	gb		8154703	1					
ANR	8155689	Argument	gb		8154703	0					
ANR	8155690	Identifier	gb		8154703	0					
ANR	8155691	PrimaryExpression	7		8154703	1					
ANR	8155692	CompoundStatement		303:52:6511:6511	8154703	1					
ANR	8155693	IfStatement	if ( type34_first )		8154703	0					
ANR	8155694	Condition	type34_first	309:32:6697:6708	8154703	0	True				
ANR	8155695	Identifier	type34_first		8154703	0					
ANR	8155696	CompoundStatement		305:46:6560:6560	8154703	1					
ANR	8155697	ExpressionStatement	"type34_div = ( float ) ( 1 << get_bits ( gb , 2 ) )"	311:32:6746:6788	8154703	0	True				
ANR	8155698	AssignmentExpression	"type34_div = ( float ) ( 1 << get_bits ( gb , 2 ) )"		8154703	0		=			
ANR	8155699	Identifier	type34_div		8154703	0					
ANR	8155700	CastExpression	"( float ) ( 1 << get_bits ( gb , 2 ) )"		8154703	1					
ANR	8155701	CastTarget	float		8154703	0					
ANR	8155702	ShiftExpression	"1 << get_bits ( gb , 2 )"		8154703	1		<<			
ANR	8155703	PrimaryExpression	1		8154703	0					
ANR	8155704	CallExpression	"get_bits ( gb , 2 )"		8154703	1					
ANR	8155705	Callee	get_bits		8154703	0					
ANR	8155706	Identifier	get_bits		8154703	0					
ANR	8155707	ArgumentList	gb		8154703	1					
ANR	8155708	Argument	gb		8154703	0					
ANR	8155709	Identifier	gb		8154703	0					
ANR	8155710	Argument	2		8154703	1					
ANR	8155711	PrimaryExpression	2		8154703	0					
ANR	8155712	ExpressionStatement	"samples [ 0 ] = ( ( float ) get_bits ( gb , 5 ) - 16.0 ) / 15.0"	313:32:6823:6874	8154703	1	True				
ANR	8155713	AssignmentExpression	"samples [ 0 ] = ( ( float ) get_bits ( gb , 5 ) - 16.0 ) / 15.0"		8154703	0		=			
ANR	8155714	ArrayIndexing	samples [ 0 ]		8154703	0					
ANR	8155715	Identifier	samples		8154703	0					
ANR	8155716	PrimaryExpression	0		8154703	1					
ANR	8155717	MultiplicativeExpression	"( ( float ) get_bits ( gb , 5 ) - 16.0 ) / 15.0"		8154703	1		/			
ANR	8155718	AdditiveExpression	"( float ) get_bits ( gb , 5 ) - 16.0"		8154703	0		-			
ANR	8155719	CastExpression	"( float ) get_bits ( gb , 5 )"		8154703	0					
ANR	8155720	CastTarget	float		8154703	0					
ANR	8155721	CallExpression	"get_bits ( gb , 5 )"		8154703	1					
ANR	8155722	Callee	get_bits		8154703	0					
ANR	8155723	Identifier	get_bits		8154703	0					
ANR	8155724	ArgumentList	gb		8154703	1					
ANR	8155725	Argument	gb		8154703	0					
ANR	8155726	Identifier	gb		8154703	0					
ANR	8155727	Argument	5		8154703	1					
ANR	8155728	PrimaryExpression	5		8154703	0					
ANR	8155729	PrimaryExpression	16.0		8154703	1					
ANR	8155730	PrimaryExpression	15.0		8154703	1					
ANR	8155731	ExpressionStatement	type34_predictor = samples [ 0 ]	315:32:6909:6938	8154703	2	True				
ANR	8155732	AssignmentExpression	type34_predictor = samples [ 0 ]		8154703	0		=			
ANR	8155733	Identifier	type34_predictor		8154703	0					
ANR	8155734	ArrayIndexing	samples [ 0 ]		8154703	1					
ANR	8155735	Identifier	samples		8154703	0					
ANR	8155736	PrimaryExpression	0		8154703	1					
ANR	8155737	ExpressionStatement	type34_first = 0	317:32:6973:6989	8154703	3	True				
ANR	8155738	AssignmentExpression	type34_first = 0		8154703	0		=			
ANR	8155739	Identifier	type34_first		8154703	0					
ANR	8155740	PrimaryExpression	0		8154703	1					
ANR	8155741	ElseStatement	else		8154703	0					
ANR	8155742	CompoundStatement		317:32:6911:6967	8154703	0					
ANR	8155743	IdentifierDeclStatement	"unsigned index = qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 ) ;"	321:32:7062:7118	8154703	0	True				
ANR	8155744	IdentifierDecl	"index = qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 )"		8154703	0					
ANR	8155745	IdentifierDeclType	unsigned		8154703	0					
ANR	8155746	Identifier	index		8154703	1					
ANR	8155747	AssignmentExpression	"index = qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 )"		8154703	2		=			
ANR	8155748	Identifier	index		8154703	0					
ANR	8155749	CallExpression	"qdm2_get_vlc ( gb , & vlc_tab_type34 , 0 , 1 )"		8154703	1					
ANR	8155750	Callee	qdm2_get_vlc		8154703	0					
ANR	8155751	Identifier	qdm2_get_vlc		8154703	0					
ANR	8155752	ArgumentList	gb		8154703	1					
ANR	8155753	Argument	gb		8154703	0					
ANR	8155754	Identifier	gb		8154703	0					
ANR	8155755	Argument	& vlc_tab_type34		8154703	1					
ANR	8155756	UnaryOperationExpression	& vlc_tab_type34		8154703	0					
ANR	8155757	UnaryOperator	&		8154703	0					
ANR	8155758	Identifier	vlc_tab_type34		8154703	1					
ANR	8155759	Argument	0		8154703	2					
ANR	8155760	PrimaryExpression	0		8154703	0					
ANR	8155761	Argument	1		8154703	3					
ANR	8155762	PrimaryExpression	1		8154703	0					
ANR	8155763	IfStatement	if ( index >= FF_ARRAY_ELEMS ( type34_delta ) )		8154703	1					
ANR	8155764	Condition	index >= FF_ARRAY_ELEMS ( type34_delta )	323:36:7157:7193	8154703	0	True				
ANR	8155765	RelationalExpression	index >= FF_ARRAY_ELEMS ( type34_delta )		8154703	0		>=			
ANR	8155766	Identifier	index		8154703	0					
ANR	8155767	CallExpression	FF_ARRAY_ELEMS ( type34_delta )		8154703	1					
ANR	8155768	Callee	FF_ARRAY_ELEMS		8154703	0					
ANR	8155769	Identifier	FF_ARRAY_ELEMS		8154703	0					
ANR	8155770	ArgumentList	type34_delta		8154703	1					
ANR	8155771	Argument	type34_delta		8154703	0					
ANR	8155772	Identifier	type34_delta		8154703	0					
ANR	8155773	CompoundStatement		319:75:7045:7045	8154703	1					
ANR	8155774	ExpressionStatement	"av_log ( NULL , AV_LOG_ERROR , ""index %d out of type34_delta array\\n"" , index )"	325:36:7235:7308	8154703	0	True				
ANR	8155775	CallExpression	"av_log ( NULL , AV_LOG_ERROR , ""index %d out of type34_delta array\\n"" , index )"		8154703	0					
ANR	8155776	Callee	av_log		8154703	0					
ANR	8155777	Identifier	av_log		8154703	0					
ANR	8155778	ArgumentList	NULL		8154703	1					
ANR	8155779	Argument	NULL		8154703	0					
ANR	8155780	Identifier	NULL		8154703	0					
ANR	8155781	Argument	AV_LOG_ERROR		8154703	1					
ANR	8155782	Identifier	AV_LOG_ERROR		8154703	0					
ANR	8155783	Argument	"""index %d out of type34_delta array\\n"""		8154703	2					
ANR	8155784	PrimaryExpression	"""index %d out of type34_delta array\\n"""		8154703	0					
ANR	8155785	Argument	index		8154703	3					
ANR	8155786	Identifier	index		8154703	0					
ANR	8155787	ReturnStatement	return AVERROR_INVALIDDATA ;	327:36:7347:7373	8154703	1	True				
ANR	8155788	Identifier	AVERROR_INVALIDDATA		8154703	0					
ANR	8155789	ExpressionStatement	samples [ 0 ] = type34_delta [ index ] / type34_div + type34_predictor	331:32:7443:7507	8154703	2	True				
ANR	8155790	AssignmentExpression	samples [ 0 ] = type34_delta [ index ] / type34_div + type34_predictor		8154703	0		=			
ANR	8155791	ArrayIndexing	samples [ 0 ]		8154703	0					
ANR	8155792	Identifier	samples		8154703	0					
ANR	8155793	PrimaryExpression	0		8154703	1					
ANR	8155794	AdditiveExpression	type34_delta [ index ] / type34_div + type34_predictor		8154703	1		+			
ANR	8155795	MultiplicativeExpression	type34_delta [ index ] / type34_div		8154703	0		/			
ANR	8155796	ArrayIndexing	type34_delta [ index ]		8154703	0					
ANR	8155797	Identifier	type34_delta		8154703	0					
ANR	8155798	Identifier	index		8154703	1					
ANR	8155799	Identifier	type34_div		8154703	1					
ANR	8155800	Identifier	type34_predictor		8154703	1					
ANR	8155801	ExpressionStatement	type34_predictor = samples [ 0 ]	333:32:7542:7571	8154703	3	True				
ANR	8155802	AssignmentExpression	type34_predictor = samples [ 0 ]		8154703	0		=			
ANR	8155803	Identifier	type34_predictor		8154703	0					
ANR	8155804	ArrayIndexing	samples [ 0 ]		8154703	1					
ANR	8155805	Identifier	samples		8154703	0					
ANR	8155806	PrimaryExpression	0		8154703	1					
ANR	8155807	ElseStatement	else		8154703	0					
ANR	8155808	CompoundStatement		333:31:7485:7485	8154703	0					
ANR	8155809	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	339:28:7667:7715	8154703	0	True				
ANR	8155810	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	0		=			
ANR	8155811	ArrayIndexing	samples [ 0 ]		8154703	0					
ANR	8155812	Identifier	samples		8154703	0					
ANR	8155813	PrimaryExpression	0		8154703	1					
ANR	8155814	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	1					
ANR	8155815	Callee	SB_DITHERING_NOISE		8154703	0					
ANR	8155816	Identifier	SB_DITHERING_NOISE		8154703	0					
ANR	8155817	ArgumentList	sb		8154703	1					
ANR	8155818	Argument	sb		8154703	0					
ANR	8155819	Identifier	sb		8154703	0					
ANR	8155820	Argument	q -> noise_idx		8154703	1					
ANR	8155821	PtrMemberAccess	q -> noise_idx		8154703	0					
ANR	8155822	Identifier	q		8154703	0					
ANR	8155823	Identifier	noise_idx		8154703	1					
ANR	8155824	ExpressionStatement	run = 1	343:24:7769:7776	8154703	22	True				
ANR	8155825	AssignmentExpression	run = 1		8154703	0		=			
ANR	8155826	Identifier	run		8154703	0					
ANR	8155827	PrimaryExpression	1		8154703	1					
ANR	8155828	BreakStatement	break ;	345:24:7803:7808	8154703	23	True				
ANR	8155829	Label	default :	349:20:7833:7840	8154703	24	True				
ANR	8155830	Identifier	default		8154703	0					
ANR	8155831	ExpressionStatement	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"	351:24:7867:7915	8154703	25	True				
ANR	8155832	AssignmentExpression	"samples [ 0 ] = SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	0		=			
ANR	8155833	ArrayIndexing	samples [ 0 ]		8154703	0					
ANR	8155834	Identifier	samples		8154703	0					
ANR	8155835	PrimaryExpression	0		8154703	1					
ANR	8155836	CallExpression	"SB_DITHERING_NOISE ( sb , q -> noise_idx )"		8154703	1					
ANR	8155837	Callee	SB_DITHERING_NOISE		8154703	0					
ANR	8155838	Identifier	SB_DITHERING_NOISE		8154703	0					
ANR	8155839	ArgumentList	sb		8154703	1					
ANR	8155840	Argument	sb		8154703	0					
ANR	8155841	Identifier	sb		8154703	0					
ANR	8155842	Argument	q -> noise_idx		8154703	1					
ANR	8155843	PtrMemberAccess	q -> noise_idx		8154703	0					
ANR	8155844	Identifier	q		8154703	0					
ANR	8155845	Identifier	noise_idx		8154703	1					
ANR	8155846	ExpressionStatement	run = 1	353:24:7942:7949	8154703	26	True				
ANR	8155847	AssignmentExpression	run = 1		8154703	0		=			
ANR	8155848	Identifier	run		8154703	0					
ANR	8155849	PrimaryExpression	1		8154703	1					
ANR	8155850	BreakStatement	break ;	355:24:7976:7981	8154703	27	True				
ANR	8155851	IfStatement	if ( joined_stereo )		8154703	1					
ANR	8155852	Condition	joined_stereo	361:20:8025:8037	8154703	0	True				
ANR	8155853	Identifier	joined_stereo		8154703	0					
ANR	8155854	CompoundStatement		357:35:7889:7889	8154703	1					
ANR	8155855	ForStatement	for ( k = 0 ; k < run && j + k < 128 ; k ++ )		8154703	0					
ANR	8155856	ForInit	k = 0 ;	363:25:8068:8073	8154703	0	True				
ANR	8155857	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155858	Identifier	k		8154703	0					
ANR	8155859	PrimaryExpression	0		8154703	1					
ANR	8155860	Condition	k < run && j + k < 128	363:32:8075:8096	8154703	1	True				
ANR	8155861	AndExpression	k < run && j + k < 128		8154703	0		&&			
ANR	8155862	RelationalExpression	k < run		8154703	0		<			
ANR	8155863	Identifier	k		8154703	0					
ANR	8155864	Identifier	run		8154703	1					
ANR	8155865	RelationalExpression	j + k < 128		8154703	1		<			
ANR	8155866	AdditiveExpression	j + k		8154703	0		+			
ANR	8155867	Identifier	j		8154703	0					
ANR	8155868	Identifier	k		8154703	1					
ANR	8155869	PrimaryExpression	128		8154703	1					
ANR	8155870	PostIncDecOperationExpression	k ++	363:56:8099:8101	8154703	2	True				
ANR	8155871	Identifier	k		8154703	0					
ANR	8155872	IncDec	++		8154703	1					
ANR	8155873	CompoundStatement		359:61:7953:7953	8154703	3					
ANR	8155874	ExpressionStatement	q -> sb_samples [ 0 ] [ j + k ] [ sb ] = q -> tone_level [ 0 ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]	365:24:8131:8236	8154703	0	True				
ANR	8155875	AssignmentExpression	q -> sb_samples [ 0 ] [ j + k ] [ sb ] = q -> tone_level [ 0 ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8154703	0		=			
ANR	8155876	ArrayIndexing	q -> sb_samples [ 0 ] [ j + k ] [ sb ]		8154703	0					
ANR	8155877	ArrayIndexing	q -> sb_samples [ 0 ] [ j + k ]		8154703	0					
ANR	8155878	ArrayIndexing	q -> sb_samples [ 0 ]		8154703	0					
ANR	8155879	PtrMemberAccess	q -> sb_samples		8154703	0					
ANR	8155880	Identifier	q		8154703	0					
ANR	8155881	Identifier	sb_samples		8154703	1					
ANR	8155882	PrimaryExpression	0		8154703	1					
ANR	8155883	AdditiveExpression	j + k		8154703	1		+			
ANR	8155884	Identifier	j		8154703	0					
ANR	8155885	Identifier	k		8154703	1					
ANR	8155886	Identifier	sb		8154703	1					
ANR	8155887	MultiplicativeExpression	q -> tone_level [ 0 ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8154703	1		*			
ANR	8155888	ArrayIndexing	q -> tone_level [ 0 ] [ sb ] [ ( j + k ) / 2 ]		8154703	0					
ANR	8155889	ArrayIndexing	q -> tone_level [ 0 ] [ sb ]		8154703	0					
ANR	8155890	ArrayIndexing	q -> tone_level [ 0 ]		8154703	0					
ANR	8155891	PtrMemberAccess	q -> tone_level		8154703	0					
ANR	8155892	Identifier	q		8154703	0					
ANR	8155893	Identifier	tone_level		8154703	1					
ANR	8155894	PrimaryExpression	0		8154703	1					
ANR	8155895	Identifier	sb		8154703	1					
ANR	8155896	MultiplicativeExpression	( j + k ) / 2		8154703	1		/			
ANR	8155897	AdditiveExpression	j + k		8154703	0		+			
ANR	8155898	Identifier	j		8154703	0					
ANR	8155899	Identifier	k		8154703	1					
ANR	8155900	PrimaryExpression	2		8154703	1					
ANR	8155901	ArrayIndexing	samples [ k ]		8154703	1					
ANR	8155902	Identifier	samples		8154703	0					
ANR	8155903	Identifier	k		8154703	1					
ANR	8155904	IfStatement	if ( q -> nb_channels == 2 )		8154703	1					
ANR	8155905	Condition	q -> nb_channels == 2	369:28:8267:8285	8154703	0	True				
ANR	8155906	EqualityExpression	q -> nb_channels == 2		8154703	0		==			
ANR	8155907	PtrMemberAccess	q -> nb_channels		8154703	0					
ANR	8155908	Identifier	q		8154703	0					
ANR	8155909	Identifier	nb_channels		8154703	1					
ANR	8155910	PrimaryExpression	2		8154703	1					
ANR	8155911	CompoundStatement		365:49:8137:8137	8154703	1					
ANR	8155912	IfStatement	if ( sign_bits [ ( j + k ) / 8 ] )		8154703	0					
ANR	8155913	Condition	sign_bits [ ( j + k ) / 8 ]	371:32:8323:8344	8154703	0	True				
ANR	8155914	ArrayIndexing	sign_bits [ ( j + k ) / 8 ]		8154703	0					
ANR	8155915	Identifier	sign_bits		8154703	0					
ANR	8155916	MultiplicativeExpression	( j + k ) / 8		8154703	1		/			
ANR	8155917	AdditiveExpression	j + k		8154703	0		+			
ANR	8155918	Identifier	j		8154703	0					
ANR	8155919	Identifier	k		8154703	1					
ANR	8155920	PrimaryExpression	8		8154703	1					
ANR	8155921	ExpressionStatement	q -> sb_samples [ 1 ] [ j + k ] [ sb ] = q -> tone_level [ 1 ] [ sb ] [ ( j + k ) / 2 ] * - samples [ k ]	373:32:8380:8494	8154703	1	True				
ANR	8155922	AssignmentExpression	q -> sb_samples [ 1 ] [ j + k ] [ sb ] = q -> tone_level [ 1 ] [ sb ] [ ( j + k ) / 2 ] * - samples [ k ]		8154703	0		=			
ANR	8155923	ArrayIndexing	q -> sb_samples [ 1 ] [ j + k ] [ sb ]		8154703	0					
ANR	8155924	ArrayIndexing	q -> sb_samples [ 1 ] [ j + k ]		8154703	0					
ANR	8155925	ArrayIndexing	q -> sb_samples [ 1 ]		8154703	0					
ANR	8155926	PtrMemberAccess	q -> sb_samples		8154703	0					
ANR	8155927	Identifier	q		8154703	0					
ANR	8155928	Identifier	sb_samples		8154703	1					
ANR	8155929	PrimaryExpression	1		8154703	1					
ANR	8155930	AdditiveExpression	j + k		8154703	1		+			
ANR	8155931	Identifier	j		8154703	0					
ANR	8155932	Identifier	k		8154703	1					
ANR	8155933	Identifier	sb		8154703	1					
ANR	8155934	MultiplicativeExpression	q -> tone_level [ 1 ] [ sb ] [ ( j + k ) / 2 ] * - samples [ k ]		8154703	1		*			
ANR	8155935	ArrayIndexing	q -> tone_level [ 1 ] [ sb ] [ ( j + k ) / 2 ]		8154703	0					
ANR	8155936	ArrayIndexing	q -> tone_level [ 1 ] [ sb ]		8154703	0					
ANR	8155937	ArrayIndexing	q -> tone_level [ 1 ]		8154703	0					
ANR	8155938	PtrMemberAccess	q -> tone_level		8154703	0					
ANR	8155939	Identifier	q		8154703	0					
ANR	8155940	Identifier	tone_level		8154703	1					
ANR	8155941	PrimaryExpression	1		8154703	1					
ANR	8155942	Identifier	sb		8154703	1					
ANR	8155943	MultiplicativeExpression	( j + k ) / 2		8154703	1		/			
ANR	8155944	AdditiveExpression	j + k		8154703	0		+			
ANR	8155945	Identifier	j		8154703	0					
ANR	8155946	Identifier	k		8154703	1					
ANR	8155947	PrimaryExpression	2		8154703	1					
ANR	8155948	UnaryOperationExpression	- samples [ k ]		8154703	1					
ANR	8155949	UnaryOperator	-		8154703	0					
ANR	8155950	ArrayIndexing	samples [ k ]		8154703	1					
ANR	8155951	Identifier	samples		8154703	0					
ANR	8155952	Identifier	k		8154703	1					
ANR	8155953	ElseStatement	else		8154703	0					
ANR	8155954	ExpressionStatement	q -> sb_samples [ 1 ] [ j + k ] [ sb ] = q -> tone_level [ 1 ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]	379:32:8563:8676	8154703	0	True				
ANR	8155955	AssignmentExpression	q -> sb_samples [ 1 ] [ j + k ] [ sb ] = q -> tone_level [ 1 ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8154703	0		=			
ANR	8155956	ArrayIndexing	q -> sb_samples [ 1 ] [ j + k ] [ sb ]		8154703	0					
ANR	8155957	ArrayIndexing	q -> sb_samples [ 1 ] [ j + k ]		8154703	0					
ANR	8155958	ArrayIndexing	q -> sb_samples [ 1 ]		8154703	0					
ANR	8155959	PtrMemberAccess	q -> sb_samples		8154703	0					
ANR	8155960	Identifier	q		8154703	0					
ANR	8155961	Identifier	sb_samples		8154703	1					
ANR	8155962	PrimaryExpression	1		8154703	1					
ANR	8155963	AdditiveExpression	j + k		8154703	1		+			
ANR	8155964	Identifier	j		8154703	0					
ANR	8155965	Identifier	k		8154703	1					
ANR	8155966	Identifier	sb		8154703	1					
ANR	8155967	MultiplicativeExpression	q -> tone_level [ 1 ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8154703	1		*			
ANR	8155968	ArrayIndexing	q -> tone_level [ 1 ] [ sb ] [ ( j + k ) / 2 ]		8154703	0					
ANR	8155969	ArrayIndexing	q -> tone_level [ 1 ] [ sb ]		8154703	0					
ANR	8155970	ArrayIndexing	q -> tone_level [ 1 ]		8154703	0					
ANR	8155971	PtrMemberAccess	q -> tone_level		8154703	0					
ANR	8155972	Identifier	q		8154703	0					
ANR	8155973	Identifier	tone_level		8154703	1					
ANR	8155974	PrimaryExpression	1		8154703	1					
ANR	8155975	Identifier	sb		8154703	1					
ANR	8155976	MultiplicativeExpression	( j + k ) / 2		8154703	1		/			
ANR	8155977	AdditiveExpression	j + k		8154703	0		+			
ANR	8155978	Identifier	j		8154703	0					
ANR	8155979	Identifier	k		8154703	1					
ANR	8155980	PrimaryExpression	2		8154703	1					
ANR	8155981	ArrayIndexing	samples [ k ]		8154703	1					
ANR	8155982	Identifier	samples		8154703	0					
ANR	8155983	Identifier	k		8154703	1					
ANR	8155984	ElseStatement	else		8154703	0					
ANR	8155985	CompoundStatement		383:23:8601:8601	8154703	0					
ANR	8155986	ForStatement	for ( k = 0 ; k < run ; k ++ )		8154703	0					
ANR	8155987	ForInit	k = 0 ;	389:25:8780:8785	8154703	0	True				
ANR	8155988	AssignmentExpression	k = 0		8154703	0		=			
ANR	8155989	Identifier	k		8154703	0					
ANR	8155990	PrimaryExpression	0		8154703	1					
ANR	8155991	Condition	k < run	389:32:8787:8793	8154703	1	True				
ANR	8155992	RelationalExpression	k < run		8154703	0		<			
ANR	8155993	Identifier	k		8154703	0					
ANR	8155994	Identifier	run		8154703	1					
ANR	8155995	PostIncDecOperationExpression	k ++	389:41:8796:8798	8154703	2	True				
ANR	8155996	Identifier	k		8154703	0					
ANR	8155997	IncDec	++		8154703	1					
ANR	8155998	IfStatement	if ( ( j + k ) < 128 )		8154703	3					
ANR	8155999	Condition	( j + k ) < 128	391:28:8830:8842	8154703	0	True				
ANR	8156000	RelationalExpression	( j + k ) < 128		8154703	0		<			
ANR	8156001	AdditiveExpression	j + k		8154703	0		+			
ANR	8156002	Identifier	j		8154703	0					
ANR	8156003	Identifier	k		8154703	1					
ANR	8156004	PrimaryExpression	128		8154703	1					
ANR	8156005	ExpressionStatement	q -> sb_samples [ ch ] [ j + k ] [ sb ] = q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]	393:28:8874:8950	8154703	1	True				
ANR	8156006	AssignmentExpression	q -> sb_samples [ ch ] [ j + k ] [ sb ] = q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8154703	0		=			
ANR	8156007	ArrayIndexing	q -> sb_samples [ ch ] [ j + k ] [ sb ]		8154703	0					
ANR	8156008	ArrayIndexing	q -> sb_samples [ ch ] [ j + k ]		8154703	0					
ANR	8156009	ArrayIndexing	q -> sb_samples [ ch ]		8154703	0					
ANR	8156010	PtrMemberAccess	q -> sb_samples		8154703	0					
ANR	8156011	Identifier	q		8154703	0					
ANR	8156012	Identifier	sb_samples		8154703	1					
ANR	8156013	Identifier	ch		8154703	1					
ANR	8156014	AdditiveExpression	j + k		8154703	1		+			
ANR	8156015	Identifier	j		8154703	0					
ANR	8156016	Identifier	k		8154703	1					
ANR	8156017	Identifier	sb		8154703	1					
ANR	8156018	MultiplicativeExpression	q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ] * samples [ k ]		8154703	1		*			
ANR	8156019	ArrayIndexing	q -> tone_level [ ch ] [ sb ] [ ( j + k ) / 2 ]		8154703	0					
ANR	8156020	ArrayIndexing	q -> tone_level [ ch ] [ sb ]		8154703	0					
ANR	8156021	ArrayIndexing	q -> tone_level [ ch ]		8154703	0					
ANR	8156022	PtrMemberAccess	q -> tone_level		8154703	0					
ANR	8156023	Identifier	q		8154703	0					
ANR	8156024	Identifier	tone_level		8154703	1					
ANR	8156025	Identifier	ch		8154703	1					
ANR	8156026	Identifier	sb		8154703	1					
ANR	8156027	MultiplicativeExpression	( j + k ) / 2		8154703	1		/			
ANR	8156028	AdditiveExpression	j + k		8154703	0		+			
ANR	8156029	Identifier	j		8154703	0					
ANR	8156030	Identifier	k		8154703	1					
ANR	8156031	PrimaryExpression	2		8154703	1					
ANR	8156032	ArrayIndexing	samples [ k ]		8154703	1					
ANR	8156033	Identifier	samples		8154703	0					
ANR	8156034	Identifier	k		8154703	1					
ANR	8156035	ExpressionStatement	j += run	399:16:8990:8998	8154703	2	True				
ANR	8156036	AssignmentExpression	j += run		8154703	0		+=			
ANR	8156037	Identifier	j		8154703	0					
ANR	8156038	Identifier	run		8154703	1					
ANR	8156039	ReturnStatement	return 0 ;	407:4:9080:9088	8154703	9	True				
ANR	8156040	PrimaryExpression	0		8154703	0					
ANR	8156041	ReturnType	static int		8154703	1					
ANR	8156042	Identifier	synthfilt_build_sb_samples		8154703	2					
ANR	8156043	ParameterList	"QDM2Context * q , GetBitContext * gb , int length , int sb_min , int sb_max"		8154703	3					
ANR	8156044	Parameter	QDM2Context * q	1:38:38:51	8154703	0	True				
ANR	8156045	ParameterType	QDM2Context *		8154703	0					
ANR	8156046	Identifier	q		8154703	1					
ANR	8156047	Parameter	GetBitContext * gb	1:54:54:70	8154703	1	True				
ANR	8156048	ParameterType	GetBitContext *		8154703	0					
ANR	8156049	Identifier	gb		8154703	1					
ANR	8156050	Parameter	int length	3:39:113:122	8154703	2	True				
ANR	8156051	ParameterType	int		8154703	0					
ANR	8156052	Identifier	length		8154703	1					
ANR	8156053	Parameter	int sb_min	3:51:125:134	8154703	3	True				
ANR	8156054	ParameterType	int		8154703	0					
ANR	8156055	Identifier	sb_min		8154703	1					
ANR	8156056	Parameter	int sb_max	3:63:137:146	8154703	4	True				
ANR	8156057	ParameterType	int		8154703	0					
ANR	8156058	Identifier	sb_max		8154703	1					
ANR	8156059	CFGEntryNode	ENTRY		8154703		True				
ANR	8156060	CFGExitNode	EXIT		8154703		True				
ANR	8156061	Symbol	qdm2_get_vlc		8154703						
ANR	8156062	Symbol	& vlc_tab_type30		8154703						
ANR	8156063	Symbol	SB_DITHERING_NOISE		8154703						
ANR	8156064	Symbol	* * * * q		8154703						
ANR	8156065	Symbol	get_bits		8154703						
ANR	8156066	Symbol	fix_coding_method_array		8154703						
ANR	8156067	Symbol	* index		8154703						
ANR	8156068	Symbol	* ch		8154703						
ANR	8156069	Symbol	q -> coding_method		8154703						
ANR	8156070	Symbol	* type30_dequant		8154703						
ANR	8156071	Symbol	run		8154703						
ANR	8156072	Symbol	* * q -> coding_method		8154703						
ANR	8156073	Symbol	* random_dequant_type24		8154703						
ANR	8156074	Symbol	zero_encoding		8154703						
ANR	8156075	Symbol	sign_bits		8154703						
ANR	8156076	Symbol	* * dequant_1bit		8154703						
ANR	8156077	Symbol	* samples		8154703						
ANR	8156078	Symbol	* sb		8154703						
ANR	8156079	Symbol	* * random_dequant_type24		8154703						
ANR	8156080	Symbol	& vlc_tab_type34		8154703						
ANR	8156081	Symbol	type34_predictor		8154703						
ANR	8156082	Symbol	* * k		8154703						
ANR	8156083	Symbol	* * j		8154703						
ANR	8156084	Symbol	* * q -> tone_level		8154703						
ANR	8156085	Symbol	NULL		8154703						
ANR	8156086	Symbol	* type34_delta		8154703						
ANR	8156087	Symbol	get_bits1		8154703						
ANR	8156088	Symbol	type30_dequant		8154703						
ANR	8156089	Symbol	* joined_stereo		8154703						
ANR	8156090	Symbol	q -> tone_level		8154703						
ANR	8156091	Symbol	index		8154703						
ANR	8156092	Symbol	* * * q -> sb_samples		8154703						
ANR	8156093	Symbol	* * random_dequant_index		8154703						
ANR	8156094	Symbol	sb_min		8154703						
ANR	8156095	Symbol	dequant_1bit		8154703						
ANR	8156096	Symbol	samples		8154703						
ANR	8156097	Symbol	* * * q		8154703						
ANR	8156098	Symbol	noise_samples		8154703						
ANR	8156099	Symbol	type34_delta		8154703						
ANR	8156100	Symbol	* * * n		8154703						
ANR	8156101	Symbol	channels		8154703						
ANR	8156102	Symbol	FF_ARRAY_ELEMS		8154703						
ANR	8156103	Symbol	* dequant_1bit		8154703						
ANR	8156104	Symbol	* * sb		8154703						
ANR	8156105	Symbol	* q -> sb_samples		8154703						
ANR	8156106	Symbol	sb_max		8154703						
ANR	8156107	Symbol	q -> noise_idx		8154703						
ANR	8156108	Symbol	random_dequant_index		8154703						
ANR	8156109	Symbol	* * * ch		8154703						
ANR	8156110	Symbol	* * * q -> coding_method		8154703						
ANR	8156111	Symbol	get_bits_left		8154703						
ANR	8156112	Symbol	sb		8154703						
ANR	8156113	Symbol	type34_first		8154703						
ANR	8156114	Symbol	* * ch		8154703						
ANR	8156115	Symbol	* get_bits1		8154703						
ANR	8156116	Symbol	* * q		8154703						
ANR	8156117	Symbol	gb		8154703						
ANR	8156118	Symbol	* * n		8154703						
ANR	8156119	Symbol	* sign_bits		8154703						
ANR	8156120	Symbol	* * * random_dequant_index		8154703						
ANR	8156121	Symbol	* noise_samples		8154703						
ANR	8156122	Symbol	type34_div		8154703						
ANR	8156123	Symbol	AV_LOG_ERROR		8154703						
ANR	8156124	Symbol	* * q -> sb_samples		8154703						
ANR	8156125	Symbol	ch		8154703						
ANR	8156126	Symbol	f		8154703						
ANR	8156127	Symbol	q -> sb_samples		8154703						
ANR	8156128	Symbol	length		8154703						
ANR	8156129	Symbol	* * * q -> tone_level		8154703						
ANR	8156130	Symbol	* * joined_stereo		8154703						
ANR	8156131	Symbol	j		8154703						
ANR	8156132	Symbol	k		8154703						
ANR	8156133	Symbol	random_dequant_type24		8154703						
ANR	8156134	Symbol	n		8154703						
ANR	8156135	Symbol	q		8154703						
ANR	8156136	Symbol	q -> nb_channels		8154703						
ANR	8156137	Symbol	* j		8154703						
ANR	8156138	Symbol	* q -> coding_method		8154703						
ANR	8156139	Symbol	* k		8154703						
ANR	8156140	Symbol	joined_stereo		8154703						
ANR	8156141	Symbol	* n		8154703						
ANR	8156142	Symbol	* q -> tone_level		8154703						
ANR	8156143	Symbol	AVERROR_INVALIDDATA		8154703						
ANR	8156144	Symbol	* random_dequant_index		8154703						
ANR	8156145	Symbol	* q		8154703						
