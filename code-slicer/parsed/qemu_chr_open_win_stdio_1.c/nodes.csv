command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6964007	File	/home/p4ultr4n/workplace/ReVeal/raw_code/qemu_chr_open_win_stdio_1.c								
ANR	6964008	Function	qemu_chr_open_win_stdio	1:0:0:2465							
ANR	6964009	FunctionDef	"qemu_chr_open_win_stdio (QemuOpts * opts , CharDriverState * * _chr)"		6964008	0					
ANR	6964010	CompoundStatement		3:0:76:2465	6964008	0					
ANR	6964011	IdentifierDeclStatement	CharDriverState * chr ;	5:4:83:105	6964008	0	True				
ANR	6964012	IdentifierDecl	* chr		6964008	0					
ANR	6964013	IdentifierDeclType	CharDriverState *		6964008	0					
ANR	6964014	Identifier	chr		6964008	1					
ANR	6964015	IdentifierDeclStatement	WinStdioCharState * stdio ;	7:4:112:136	6964008	1	True				
ANR	6964016	IdentifierDecl	* stdio		6964008	0					
ANR	6964017	IdentifierDeclType	WinStdioCharState *		6964008	0					
ANR	6964018	Identifier	stdio		6964008	1					
ANR	6964019	IdentifierDeclStatement	DWORD dwMode ;	9:4:143:168	6964008	2	True				
ANR	6964020	IdentifierDecl	dwMode		6964008	0					
ANR	6964021	IdentifierDeclType	DWORD		6964008	0					
ANR	6964022	Identifier	dwMode		6964008	1					
ANR	6964023	IdentifierDeclStatement	int is_console = 0 ;	11:4:175:208	6964008	3	True				
ANR	6964024	IdentifierDecl	is_console = 0		6964008	0					
ANR	6964025	IdentifierDeclType	int		6964008	0					
ANR	6964026	Identifier	is_console		6964008	1					
ANR	6964027	AssignmentExpression	is_console = 0		6964008	2		=			
ANR	6964028	Identifier	is_console		6964008	0					
ANR	6964029	PrimaryExpression	0		6964008	1					
ANR	6964030	IfStatement	if ( stdio_nb_clients >= STDIO_MAX_CLIENTS || ( ( display_type != DT_NOGRAPHIC ) && ( stdio_nb_clients != 0 ) ) )		6964008	4					
ANR	6964031	Condition	stdio_nb_clients >= STDIO_MAX_CLIENTS || ( ( display_type != DT_NOGRAPHIC ) && ( stdio_nb_clients != 0 ) )	15:8:221:329	6964008	0	True				
ANR	6964032	OrExpression	stdio_nb_clients >= STDIO_MAX_CLIENTS || ( ( display_type != DT_NOGRAPHIC ) && ( stdio_nb_clients != 0 ) )		6964008	0		||			
ANR	6964033	RelationalExpression	stdio_nb_clients >= STDIO_MAX_CLIENTS		6964008	0		>=			
ANR	6964034	Identifier	stdio_nb_clients		6964008	0					
ANR	6964035	Identifier	STDIO_MAX_CLIENTS		6964008	1					
ANR	6964036	AndExpression	( display_type != DT_NOGRAPHIC ) && ( stdio_nb_clients != 0 )		6964008	1		&&			
ANR	6964037	EqualityExpression	display_type != DT_NOGRAPHIC		6964008	0		!=			
ANR	6964038	Identifier	display_type		6964008	0					
ANR	6964039	Identifier	DT_NOGRAPHIC		6964008	1					
ANR	6964040	EqualityExpression	stdio_nb_clients != 0		6964008	1		!=			
ANR	6964041	Identifier	stdio_nb_clients		6964008	0					
ANR	6964042	PrimaryExpression	0		6964008	1					
ANR	6964043	CompoundStatement		15:72:255:255	6964008	1					
ANR	6964044	ReturnStatement	return - EIO ;	19:8:343:354	6964008	0	True				
ANR	6964045	UnaryOperationExpression	- EIO		6964008	0					
ANR	6964046	UnaryOperator	-		6964008	0					
ANR	6964047	Identifier	EIO		6964008	1					
ANR	6964048	ExpressionStatement	chr = g_malloc0 ( sizeof ( CharDriverState ) )	25:4:370:412	6964008	5	True				
ANR	6964049	AssignmentExpression	chr = g_malloc0 ( sizeof ( CharDriverState ) )		6964008	0		=			
ANR	6964050	Identifier	chr		6964008	0					
ANR	6964051	CallExpression	g_malloc0 ( sizeof ( CharDriverState ) )		6964008	1					
ANR	6964052	Callee	g_malloc0		6964008	0					
ANR	6964053	Identifier	g_malloc0		6964008	0					
ANR	6964054	ArgumentList	sizeof ( CharDriverState )		6964008	1					
ANR	6964055	Argument	sizeof ( CharDriverState )		6964008	0					
ANR	6964056	SizeofExpression	sizeof ( CharDriverState )		6964008	0					
ANR	6964057	Sizeof	sizeof		6964008	0					
ANR	6964058	SizeofOperand	CharDriverState		6964008	1					
ANR	6964059	ExpressionStatement	stdio = g_malloc0 ( sizeof ( WinStdioCharState ) )	27:4:419:463	6964008	6	True				
ANR	6964060	AssignmentExpression	stdio = g_malloc0 ( sizeof ( WinStdioCharState ) )		6964008	0		=			
ANR	6964061	Identifier	stdio		6964008	0					
ANR	6964062	CallExpression	g_malloc0 ( sizeof ( WinStdioCharState ) )		6964008	1					
ANR	6964063	Callee	g_malloc0		6964008	0					
ANR	6964064	Identifier	g_malloc0		6964008	0					
ANR	6964065	ArgumentList	sizeof ( WinStdioCharState )		6964008	1					
ANR	6964066	Argument	sizeof ( WinStdioCharState )		6964008	0					
ANR	6964067	SizeofExpression	sizeof ( WinStdioCharState )		6964008	0					
ANR	6964068	Sizeof	sizeof		6964008	0					
ANR	6964069	SizeofOperand	WinStdioCharState		6964008	1					
ANR	6964070	ExpressionStatement	stdio -> hStdIn = GetStdHandle ( STD_INPUT_HANDLE )	31:4:472:518	6964008	7	True				
ANR	6964071	AssignmentExpression	stdio -> hStdIn = GetStdHandle ( STD_INPUT_HANDLE )		6964008	0		=			
ANR	6964072	PtrMemberAccess	stdio -> hStdIn		6964008	0					
ANR	6964073	Identifier	stdio		6964008	0					
ANR	6964074	Identifier	hStdIn		6964008	1					
ANR	6964075	CallExpression	GetStdHandle ( STD_INPUT_HANDLE )		6964008	1					
ANR	6964076	Callee	GetStdHandle		6964008	0					
ANR	6964077	Identifier	GetStdHandle		6964008	0					
ANR	6964078	ArgumentList	STD_INPUT_HANDLE		6964008	1					
ANR	6964079	Argument	STD_INPUT_HANDLE		6964008	0					
ANR	6964080	Identifier	STD_INPUT_HANDLE		6964008	0					
ANR	6964081	IfStatement	if ( stdio -> hStdIn == INVALID_HANDLE_VALUE )		6964008	8					
ANR	6964082	Condition	stdio -> hStdIn == INVALID_HANDLE_VALUE	33:8:529:565	6964008	0	True				
ANR	6964083	EqualityExpression	stdio -> hStdIn == INVALID_HANDLE_VALUE		6964008	0		==			
ANR	6964084	PtrMemberAccess	stdio -> hStdIn		6964008	0					
ANR	6964085	Identifier	stdio		6964008	0					
ANR	6964086	Identifier	hStdIn		6964008	1					
ANR	6964087	Identifier	INVALID_HANDLE_VALUE		6964008	1					
ANR	6964088	CompoundStatement		31:47:491:491	6964008	1					
ANR	6964089	ExpressionStatement	"fprintf ( stderr , ""cannot open stdio: invalid handle\\n"" )"	35:8:579:633	6964008	0	True				
ANR	6964090	CallExpression	"fprintf ( stderr , ""cannot open stdio: invalid handle\\n"" )"		6964008	0					
ANR	6964091	Callee	fprintf		6964008	0					
ANR	6964092	Identifier	fprintf		6964008	0					
ANR	6964093	ArgumentList	stderr		6964008	1					
ANR	6964094	Argument	stderr		6964008	0					
ANR	6964095	Identifier	stderr		6964008	0					
ANR	6964096	Argument	"""cannot open stdio: invalid handle\\n"""		6964008	1					
ANR	6964097	PrimaryExpression	"""cannot open stdio: invalid handle\\n"""		6964008	0					
ANR	6964098	ExpressionStatement	exit ( 1 )	37:8:644:651	6964008	1	True				
ANR	6964099	CallExpression	exit ( 1 )		6964008	0					
ANR	6964100	Callee	exit		6964008	0					
ANR	6964101	Identifier	exit		6964008	0					
ANR	6964102	ArgumentList	1		6964008	1					
ANR	6964103	Argument	1		6964008	0					
ANR	6964104	PrimaryExpression	1		6964008	0					
ANR	6964105	ExpressionStatement	"is_console = GetConsoleMode ( stdio -> hStdIn , & dwMode ) != 0"	43:4:667:723	6964008	9	True				
ANR	6964106	AssignmentExpression	"is_console = GetConsoleMode ( stdio -> hStdIn , & dwMode ) != 0"		6964008	0		=			
ANR	6964107	Identifier	is_console		6964008	0					
ANR	6964108	EqualityExpression	"GetConsoleMode ( stdio -> hStdIn , & dwMode ) != 0"		6964008	1		!=			
ANR	6964109	CallExpression	"GetConsoleMode ( stdio -> hStdIn , & dwMode )"		6964008	0					
ANR	6964110	Callee	GetConsoleMode		6964008	0					
ANR	6964111	Identifier	GetConsoleMode		6964008	0					
ANR	6964112	ArgumentList	stdio -> hStdIn		6964008	1					
ANR	6964113	Argument	stdio -> hStdIn		6964008	0					
ANR	6964114	PtrMemberAccess	stdio -> hStdIn		6964008	0					
ANR	6964115	Identifier	stdio		6964008	0					
ANR	6964116	Identifier	hStdIn		6964008	1					
ANR	6964117	Argument	& dwMode		6964008	1					
ANR	6964118	UnaryOperationExpression	& dwMode		6964008	0					
ANR	6964119	UnaryOperator	&		6964008	0					
ANR	6964120	Identifier	dwMode		6964008	1					
ANR	6964121	PrimaryExpression	0		6964008	1					
ANR	6964122	ExpressionStatement	chr -> opaque = stdio	47:4:732:754	6964008	10	True				
ANR	6964123	AssignmentExpression	chr -> opaque = stdio		6964008	0		=			
ANR	6964124	PtrMemberAccess	chr -> opaque		6964008	0					
ANR	6964125	Identifier	chr		6964008	0					
ANR	6964126	Identifier	opaque		6964008	1					
ANR	6964127	Identifier	stdio		6964008	1					
ANR	6964128	ExpressionStatement	chr -> chr_write = win_stdio_write	49:4:761:793	6964008	11	True				
ANR	6964129	AssignmentExpression	chr -> chr_write = win_stdio_write		6964008	0		=			
ANR	6964130	PtrMemberAccess	chr -> chr_write		6964008	0					
ANR	6964131	Identifier	chr		6964008	0					
ANR	6964132	Identifier	chr_write		6964008	1					
ANR	6964133	Identifier	win_stdio_write		6964008	1					
ANR	6964134	ExpressionStatement	chr -> chr_close = win_stdio_close	51:4:800:832	6964008	12	True				
ANR	6964135	AssignmentExpression	chr -> chr_close = win_stdio_close		6964008	0		=			
ANR	6964136	PtrMemberAccess	chr -> chr_close		6964008	0					
ANR	6964137	Identifier	chr		6964008	0					
ANR	6964138	Identifier	chr_close		6964008	1					
ANR	6964139	Identifier	win_stdio_close		6964008	1					
ANR	6964140	IfStatement	if ( stdio_nb_clients == 0 )		6964008	13					
ANR	6964141	Condition	stdio_nb_clients == 0	55:8:845:865	6964008	0	True				
ANR	6964142	EqualityExpression	stdio_nb_clients == 0		6964008	0		==			
ANR	6964143	Identifier	stdio_nb_clients		6964008	0					
ANR	6964144	PrimaryExpression	0		6964008	1					
ANR	6964145	CompoundStatement		53:31:791:791	6964008	1					
ANR	6964146	IfStatement	if ( is_console )		6964008	0					
ANR	6964147	Condition	is_console	57:12:883:892	6964008	0	True				
ANR	6964148	Identifier	is_console		6964008	0					
ANR	6964149	CompoundStatement		55:24:818:818	6964008	1					
ANR	6964150	IfStatement	"if ( qemu_add_wait_object ( stdio -> hStdIn , win_stdio_wait_func , chr ) )"		6964008	0					
ANR	6964151	Condition	"qemu_add_wait_object ( stdio -> hStdIn , win_stdio_wait_func , chr )"	59:16:914:1012	6964008	0	True				
ANR	6964152	CallExpression	"qemu_add_wait_object ( stdio -> hStdIn , win_stdio_wait_func , chr )"		6964008	0					
ANR	6964153	Callee	qemu_add_wait_object		6964008	0					
ANR	6964154	Identifier	qemu_add_wait_object		6964008	0					
ANR	6964155	ArgumentList	stdio -> hStdIn		6964008	1					
ANR	6964156	Argument	stdio -> hStdIn		6964008	0					
ANR	6964157	PtrMemberAccess	stdio -> hStdIn		6964008	0					
ANR	6964158	Identifier	stdio		6964008	0					
ANR	6964159	Identifier	hStdIn		6964008	1					
ANR	6964160	Argument	win_stdio_wait_func		6964008	1					
ANR	6964161	Identifier	win_stdio_wait_func		6964008	0					
ANR	6964162	Argument	chr		6964008	2					
ANR	6964163	Identifier	chr		6964008	0					
ANR	6964164	CompoundStatement		59:64:938:938	6964008	1					
ANR	6964165	ExpressionStatement	"fprintf ( stderr , ""qemu_add_wait_object: failed\\n"" )"	63:16:1034:1083	6964008	0	True				
ANR	6964166	CallExpression	"fprintf ( stderr , ""qemu_add_wait_object: failed\\n"" )"		6964008	0					
ANR	6964167	Callee	fprintf		6964008	0					
ANR	6964168	Identifier	fprintf		6964008	0					
ANR	6964169	ArgumentList	stderr		6964008	1					
ANR	6964170	Argument	stderr		6964008	0					
ANR	6964171	Identifier	stderr		6964008	0					
ANR	6964172	Argument	"""qemu_add_wait_object: failed\\n"""		6964008	1					
ANR	6964173	PrimaryExpression	"""qemu_add_wait_object: failed\\n"""		6964008	0					
ANR	6964174	ElseStatement	else		6964008	0					
ANR	6964175	CompoundStatement		67:12:1054:1066	6964008	0					
ANR	6964176	IdentifierDeclStatement	DWORD dwId ;	69:12:1131:1143	6964008	0	True				
ANR	6964177	IdentifierDecl	dwId		6964008	0					
ANR	6964178	IdentifierDeclType	DWORD		6964008	0					
ANR	6964179	Identifier	dwId		6964008	1					
ANR	6964180	ExpressionStatement	"stdio -> hInputReadyEvent = CreateEvent ( NULL , FALSE , FALSE , NULL )"	73:12:1160:1223	6964008	1	True				
ANR	6964181	AssignmentExpression	"stdio -> hInputReadyEvent = CreateEvent ( NULL , FALSE , FALSE , NULL )"		6964008	0		=			
ANR	6964182	PtrMemberAccess	stdio -> hInputReadyEvent		6964008	0					
ANR	6964183	Identifier	stdio		6964008	0					
ANR	6964184	Identifier	hInputReadyEvent		6964008	1					
ANR	6964185	CallExpression	"CreateEvent ( NULL , FALSE , FALSE , NULL )"		6964008	1					
ANR	6964186	Callee	CreateEvent		6964008	0					
ANR	6964187	Identifier	CreateEvent		6964008	0					
ANR	6964188	ArgumentList	NULL		6964008	1					
ANR	6964189	Argument	NULL		6964008	0					
ANR	6964190	Identifier	NULL		6964008	0					
ANR	6964191	Argument	FALSE		6964008	1					
ANR	6964192	Identifier	FALSE		6964008	0					
ANR	6964193	Argument	FALSE		6964008	2					
ANR	6964194	Identifier	FALSE		6964008	0					
ANR	6964195	Argument	NULL		6964008	3					
ANR	6964196	Identifier	NULL		6964008	0					
ANR	6964197	ExpressionStatement	"stdio -> hInputDoneEvent = CreateEvent ( NULL , FALSE , FALSE , NULL )"	75:12:1238:1301	6964008	2	True				
ANR	6964198	AssignmentExpression	"stdio -> hInputDoneEvent = CreateEvent ( NULL , FALSE , FALSE , NULL )"		6964008	0		=			
ANR	6964199	PtrMemberAccess	stdio -> hInputDoneEvent		6964008	0					
ANR	6964200	Identifier	stdio		6964008	0					
ANR	6964201	Identifier	hInputDoneEvent		6964008	1					
ANR	6964202	CallExpression	"CreateEvent ( NULL , FALSE , FALSE , NULL )"		6964008	1					
ANR	6964203	Callee	CreateEvent		6964008	0					
ANR	6964204	Identifier	CreateEvent		6964008	0					
ANR	6964205	ArgumentList	NULL		6964008	1					
ANR	6964206	Argument	NULL		6964008	0					
ANR	6964207	Identifier	NULL		6964008	0					
ANR	6964208	Argument	FALSE		6964008	1					
ANR	6964209	Identifier	FALSE		6964008	0					
ANR	6964210	Argument	FALSE		6964008	2					
ANR	6964211	Identifier	FALSE		6964008	0					
ANR	6964212	Argument	NULL		6964008	3					
ANR	6964213	Identifier	NULL		6964008	0					
ANR	6964214	ExpressionStatement	"stdio -> hInputThread = CreateThread ( NULL , 0 , win_stdio_thread , chr , 0 , & dwId )"	77:12:1316:1441	6964008	3	True				
ANR	6964215	AssignmentExpression	"stdio -> hInputThread = CreateThread ( NULL , 0 , win_stdio_thread , chr , 0 , & dwId )"		6964008	0		=			
ANR	6964216	PtrMemberAccess	stdio -> hInputThread		6964008	0					
ANR	6964217	Identifier	stdio		6964008	0					
ANR	6964218	Identifier	hInputThread		6964008	1					
ANR	6964219	CallExpression	"CreateThread ( NULL , 0 , win_stdio_thread , chr , 0 , & dwId )"		6964008	1					
ANR	6964220	Callee	CreateThread		6964008	0					
ANR	6964221	Identifier	CreateThread		6964008	0					
ANR	6964222	ArgumentList	NULL		6964008	1					
ANR	6964223	Argument	NULL		6964008	0					
ANR	6964224	Identifier	NULL		6964008	0					
ANR	6964225	Argument	0		6964008	1					
ANR	6964226	PrimaryExpression	0		6964008	0					
ANR	6964227	Argument	win_stdio_thread		6964008	2					
ANR	6964228	Identifier	win_stdio_thread		6964008	0					
ANR	6964229	Argument	chr		6964008	3					
ANR	6964230	Identifier	chr		6964008	0					
ANR	6964231	Argument	0		6964008	4					
ANR	6964232	PrimaryExpression	0		6964008	0					
ANR	6964233	Argument	& dwId		6964008	5					
ANR	6964234	UnaryOperationExpression	& dwId		6964008	0					
ANR	6964235	UnaryOperator	&		6964008	0					
ANR	6964236	Identifier	dwId		6964008	1					
ANR	6964237	IfStatement	if ( stdio -> hInputThread == INVALID_HANDLE_VALUE || stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE || stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE )		6964008	4					
ANR	6964238	Condition	stdio -> hInputThread == INVALID_HANDLE_VALUE || stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE || stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE	83:16:1462:1639	6964008	0	True				
ANR	6964239	OrExpression	stdio -> hInputThread == INVALID_HANDLE_VALUE || stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE || stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE		6964008	0		||			
ANR	6964240	EqualityExpression	stdio -> hInputThread == INVALID_HANDLE_VALUE		6964008	0		==			
ANR	6964241	PtrMemberAccess	stdio -> hInputThread		6964008	0					
ANR	6964242	Identifier	stdio		6964008	0					
ANR	6964243	Identifier	hInputThread		6964008	1					
ANR	6964244	Identifier	INVALID_HANDLE_VALUE		6964008	1					
ANR	6964245	OrExpression	stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE || stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE		6964008	1		||			
ANR	6964246	EqualityExpression	stdio -> hInputReadyEvent == INVALID_HANDLE_VALUE		6964008	0		==			
ANR	6964247	PtrMemberAccess	stdio -> hInputReadyEvent		6964008	0					
ANR	6964248	Identifier	stdio		6964008	0					
ANR	6964249	Identifier	hInputReadyEvent		6964008	1					
ANR	6964250	Identifier	INVALID_HANDLE_VALUE		6964008	1					
ANR	6964251	EqualityExpression	stdio -> hInputDoneEvent == INVALID_HANDLE_VALUE		6964008	1		==			
ANR	6964252	PtrMemberAccess	stdio -> hInputDoneEvent		6964008	0					
ANR	6964253	Identifier	stdio		6964008	0					
ANR	6964254	Identifier	hInputDoneEvent		6964008	1					
ANR	6964255	Identifier	INVALID_HANDLE_VALUE		6964008	1					
ANR	6964256	CompoundStatement		85:67:1565:1565	6964008	1					
ANR	6964257	ExpressionStatement	"fprintf ( stderr , ""cannot create stdio thread or event\\n"" )"	89:16:1661:1717	6964008	0	True				
ANR	6964258	CallExpression	"fprintf ( stderr , ""cannot create stdio thread or event\\n"" )"		6964008	0					
ANR	6964259	Callee	fprintf		6964008	0					
ANR	6964260	Identifier	fprintf		6964008	0					
ANR	6964261	ArgumentList	stderr		6964008	1					
ANR	6964262	Argument	stderr		6964008	0					
ANR	6964263	Identifier	stderr		6964008	0					
ANR	6964264	Argument	"""cannot create stdio thread or event\\n"""		6964008	1					
ANR	6964265	PrimaryExpression	"""cannot create stdio thread or event\\n"""		6964008	0					
ANR	6964266	ExpressionStatement	exit ( 1 )	91:16:1736:1743	6964008	1	True				
ANR	6964267	CallExpression	exit ( 1 )		6964008	0					
ANR	6964268	Callee	exit		6964008	0					
ANR	6964269	Identifier	exit		6964008	0					
ANR	6964270	ArgumentList	1		6964008	1					
ANR	6964271	Argument	1		6964008	0					
ANR	6964272	PrimaryExpression	1		6964008	0					
ANR	6964273	IfStatement	"if ( qemu_add_wait_object ( stdio -> hInputReadyEvent , win_stdio_thread_wait_func , chr ) )"		6964008	5					
ANR	6964274	Condition	"qemu_add_wait_object ( stdio -> hInputReadyEvent , win_stdio_thread_wait_func , chr )"	95:16:1777:1892	6964008	0	True				
ANR	6964275	CallExpression	"qemu_add_wait_object ( stdio -> hInputReadyEvent , win_stdio_thread_wait_func , chr )"		6964008	0					
ANR	6964276	Callee	qemu_add_wait_object		6964008	0					
ANR	6964277	Identifier	qemu_add_wait_object		6964008	0					
ANR	6964278	ArgumentList	stdio -> hInputReadyEvent		6964008	1					
ANR	6964279	Argument	stdio -> hInputReadyEvent		6964008	0					
ANR	6964280	PtrMemberAccess	stdio -> hInputReadyEvent		6964008	0					
ANR	6964281	Identifier	stdio		6964008	0					
ANR	6964282	Identifier	hInputReadyEvent		6964008	1					
ANR	6964283	Argument	win_stdio_thread_wait_func		6964008	1					
ANR	6964284	Identifier	win_stdio_thread_wait_func		6964008	0					
ANR	6964285	Argument	chr		6964008	2					
ANR	6964286	Identifier	chr		6964008	0					
ANR	6964287	CompoundStatement		95:71:1818:1818	6964008	1					
ANR	6964288	ExpressionStatement	"fprintf ( stderr , ""qemu_add_wait_object: failed\\n"" )"	99:16:1914:1963	6964008	0	True				
ANR	6964289	CallExpression	"fprintf ( stderr , ""qemu_add_wait_object: failed\\n"" )"		6964008	0					
ANR	6964290	Callee	fprintf		6964008	0					
ANR	6964291	Identifier	fprintf		6964008	0					
ANR	6964292	ArgumentList	stderr		6964008	1					
ANR	6964293	Argument	stderr		6964008	0					
ANR	6964294	Identifier	stderr		6964008	0					
ANR	6964295	Argument	"""qemu_add_wait_object: failed\\n"""		6964008	1					
ANR	6964296	PrimaryExpression	"""qemu_add_wait_object: failed\\n"""		6964008	0					
ANR	6964297	ExpressionStatement	dwMode |= ENABLE_LINE_INPUT	109:4:2005:2032	6964008	14	True				
ANR	6964298	AssignmentExpression	dwMode |= ENABLE_LINE_INPUT		6964008	0		|=			
ANR	6964299	Identifier	dwMode		6964008	0					
ANR	6964300	Identifier	ENABLE_LINE_INPUT		6964008	1					
ANR	6964301	ExpressionStatement	stdio_clients [ stdio_nb_clients ++ ] = chr	113:4:2041:2080	6964008	15	True				
ANR	6964302	AssignmentExpression	stdio_clients [ stdio_nb_clients ++ ] = chr		6964008	0		=			
ANR	6964303	ArrayIndexing	stdio_clients [ stdio_nb_clients ++ ]		6964008	0					
ANR	6964304	Identifier	stdio_clients		6964008	0					
ANR	6964305	PostIncDecOperationExpression	stdio_nb_clients ++		6964008	1					
ANR	6964306	Identifier	stdio_nb_clients		6964008	0					
ANR	6964307	IncDec	++		6964008	1					
ANR	6964308	Identifier	chr		6964008	1					
ANR	6964309	IfStatement	if ( stdio_nb_clients == 1 && is_console )		6964008	16					
ANR	6964310	Condition	stdio_nb_clients == 1 && is_console	115:8:2091:2125	6964008	0	True				
ANR	6964311	AndExpression	stdio_nb_clients == 1 && is_console		6964008	0		&&			
ANR	6964312	EqualityExpression	stdio_nb_clients == 1		6964008	0		==			
ANR	6964313	Identifier	stdio_nb_clients		6964008	0					
ANR	6964314	PrimaryExpression	1		6964008	1					
ANR	6964315	Identifier	is_console		6964008	1					
ANR	6964316	CompoundStatement		113:45:2051:2051	6964008	1					
ANR	6964317	ExpressionStatement	dwMode |= ENABLE_PROCESSED_INPUT	121:8:2245:2277	6964008	0	True				
ANR	6964318	AssignmentExpression	dwMode |= ENABLE_PROCESSED_INPUT		6964008	0		|=			
ANR	6964319	Identifier	dwMode		6964008	0					
ANR	6964320	Identifier	ENABLE_PROCESSED_INPUT		6964008	1					
ANR	6964321	ExpressionStatement	"SetConsoleMode ( stdio -> hStdIn , dwMode )"	127:4:2293:2330	6964008	17	True				
ANR	6964322	CallExpression	"SetConsoleMode ( stdio -> hStdIn , dwMode )"		6964008	0					
ANR	6964323	Callee	SetConsoleMode		6964008	0					
ANR	6964324	Identifier	SetConsoleMode		6964008	0					
ANR	6964325	ArgumentList	stdio -> hStdIn		6964008	1					
ANR	6964326	Argument	stdio -> hStdIn		6964008	0					
ANR	6964327	PtrMemberAccess	stdio -> hStdIn		6964008	0					
ANR	6964328	Identifier	stdio		6964008	0					
ANR	6964329	Identifier	hStdIn		6964008	1					
ANR	6964330	Argument	dwMode		6964008	1					
ANR	6964331	Identifier	dwMode		6964008	0					
ANR	6964332	ExpressionStatement	chr -> chr_set_echo = qemu_chr_set_echo_win_stdio	131:4:2339:2386	6964008	18	True				
ANR	6964333	AssignmentExpression	chr -> chr_set_echo = qemu_chr_set_echo_win_stdio		6964008	0		=			
ANR	6964334	PtrMemberAccess	chr -> chr_set_echo		6964008	0					
ANR	6964335	Identifier	chr		6964008	0					
ANR	6964336	Identifier	chr_set_echo		6964008	1					
ANR	6964337	Identifier	qemu_chr_set_echo_win_stdio		6964008	1					
ANR	6964338	ExpressionStatement	"qemu_chr_fe_set_echo ( chr , false )"	133:4:2393:2425	6964008	19	True				
ANR	6964339	CallExpression	"qemu_chr_fe_set_echo ( chr , false )"		6964008	0					
ANR	6964340	Callee	qemu_chr_fe_set_echo		6964008	0					
ANR	6964341	Identifier	qemu_chr_fe_set_echo		6964008	0					
ANR	6964342	ArgumentList	chr		6964008	1					
ANR	6964343	Argument	chr		6964008	0					
ANR	6964344	Identifier	chr		6964008	0					
ANR	6964345	Argument	false		6964008	1					
ANR	6964346	Identifier	false		6964008	0					
ANR	6964347	ExpressionStatement	* _chr = chr	137:4:2434:2445	6964008	20	True				
ANR	6964348	AssignmentExpression	* _chr = chr		6964008	0		=			
ANR	6964349	UnaryOperationExpression	* _chr		6964008	0					
ANR	6964350	UnaryOperator	*		6964008	0					
ANR	6964351	Identifier	_chr		6964008	1					
ANR	6964352	Identifier	chr		6964008	1					
ANR	6964353	ReturnStatement	return 0 ;	141:4:2454:2462	6964008	21	True				
ANR	6964354	PrimaryExpression	0		6964008	0					
ANR	6964355	ReturnType	static int		6964008	1					
ANR	6964356	Identifier	qemu_chr_open_win_stdio		6964008	2					
ANR	6964357	ParameterList	"QemuOpts * opts , CharDriverState * * _chr"		6964008	3					
ANR	6964358	Parameter	QemuOpts * opts	1:35:35:48	6964008	0	True				
ANR	6964359	ParameterType	QemuOpts *		6964008	0					
ANR	6964360	Identifier	opts		6964008	1					
ANR	6964361	Parameter	CharDriverState * * _chr	1:51:51:72	6964008	1	True				
ANR	6964362	ParameterType	CharDriverState * *		6964008	0					
ANR	6964363	Identifier	_chr		6964008	1					
ANR	6964364	CFGEntryNode	ENTRY		6964008		True				
ANR	6964365	CFGExitNode	EXIT		6964008		True				
ANR	6964366	Symbol	dwMode		6964008						
ANR	6964367	Symbol	GetStdHandle		6964008						
ANR	6964368	Symbol	win_stdio_close		6964008						
ANR	6964369	Symbol	_chr		6964008						
ANR	6964370	Symbol	& dwId		6964008						
ANR	6964371	Symbol	stdio		6964008						
ANR	6964372	Symbol	stdio_clients		6964008						
ANR	6964373	Symbol	chr -> opaque		6964008						
ANR	6964374	Symbol	GetConsoleMode		6964008						
ANR	6964375	Symbol	* stdio_clients		6964008						
ANR	6964376	Symbol	CreateEvent		6964008						
ANR	6964377	Symbol	display_type		6964008						
ANR	6964378	Symbol	qemu_chr_set_echo_win_stdio		6964008						
ANR	6964379	Symbol	stdio -> hStdIn		6964008						
ANR	6964380	Symbol	opts		6964008						
ANR	6964381	Symbol	& dwMode		6964008						
ANR	6964382	Symbol	win_stdio_thread		6964008						
ANR	6964383	Symbol	ENABLE_LINE_INPUT		6964008						
ANR	6964384	Symbol	is_console		6964008						
ANR	6964385	Symbol	dwId		6964008						
ANR	6964386	Symbol	win_stdio_thread_wait_func		6964008						
ANR	6964387	Symbol	chr -> chr_write		6964008						
ANR	6964388	Symbol	NULL		6964008						
ANR	6964389	Symbol	STD_INPUT_HANDLE		6964008						
ANR	6964390	Symbol	stdio_nb_clients		6964008						
ANR	6964391	Symbol	CreateThread		6964008						
ANR	6964392	Symbol	* chr		6964008						
ANR	6964393	Symbol	false		6964008						
ANR	6964394	Symbol	EIO		6964008						
ANR	6964395	Symbol	stdio -> hInputReadyEvent		6964008						
ANR	6964396	Symbol	DT_NOGRAPHIC		6964008						
ANR	6964397	Symbol	chr		6964008						
ANR	6964398	Symbol	stderr		6964008						
ANR	6964399	Symbol	INVALID_HANDLE_VALUE		6964008						
ANR	6964400	Symbol	stdio -> hInputDoneEvent		6964008						
ANR	6964401	Symbol	win_stdio_wait_func		6964008						
ANR	6964402	Symbol	chr -> chr_set_echo		6964008						
ANR	6964403	Symbol	ENABLE_PROCESSED_INPUT		6964008						
ANR	6964404	Symbol	* stdio		6964008						
ANR	6964405	Symbol	STDIO_MAX_CLIENTS		6964008						
ANR	6964406	Symbol	g_malloc0		6964008						
ANR	6964407	Symbol	FALSE		6964008						
ANR	6964408	Symbol	stdio -> hInputThread		6964008						
ANR	6964409	Symbol	win_stdio_write		6964008						
ANR	6964410	Symbol	chr -> chr_close		6964008						
ANR	6964411	Symbol	qemu_add_wait_object		6964008						
ANR	6964412	Symbol	* _chr		6964008						
