command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	32400	File	/home/p4ultr4n/workplace/ReVeal/raw_code/FUNC_09_0.c								
ANR	32401	Function	hl_decode_mb	1:0:0:11914							
ANR	32402	FunctionDef	"hl_decode_mb (H264Context * h , H264SliceContext * sl)"		32401	0					
ANR	32403	CompoundStatement		3:0:82:11914	32401	0					
ANR	32404	IdentifierDeclStatement	const int mb_x = h -> mb_x ;	5:4:89:116	32401	0	True				
ANR	32405	IdentifierDecl	mb_x = h -> mb_x		32401	0					
ANR	32406	IdentifierDeclType	const int		32401	0					
ANR	32407	Identifier	mb_x		32401	1					
ANR	32408	AssignmentExpression	mb_x = h -> mb_x		32401	2		=			
ANR	32409	Identifier	mb_x		32401	0					
ANR	32410	PtrMemberAccess	h -> mb_x		32401	1					
ANR	32411	Identifier	h		32401	0					
ANR	32412	Identifier	mb_x		32401	1					
ANR	32413	IdentifierDeclStatement	const int mb_y = h -> mb_y ;	7:4:123:150	32401	1	True				
ANR	32414	IdentifierDecl	mb_y = h -> mb_y		32401	0					
ANR	32415	IdentifierDeclType	const int		32401	0					
ANR	32416	Identifier	mb_y		32401	1					
ANR	32417	AssignmentExpression	mb_y = h -> mb_y		32401	2		=			
ANR	32418	Identifier	mb_y		32401	0					
ANR	32419	PtrMemberAccess	h -> mb_y		32401	1					
ANR	32420	Identifier	h		32401	0					
ANR	32421	Identifier	mb_y		32401	1					
ANR	32422	IdentifierDeclStatement	const int mb_xy = h -> mb_xy ;	9:4:157:185	32401	2	True				
ANR	32423	IdentifierDecl	mb_xy = h -> mb_xy		32401	0					
ANR	32424	IdentifierDeclType	const int		32401	0					
ANR	32425	Identifier	mb_xy		32401	1					
ANR	32426	AssignmentExpression	mb_xy = h -> mb_xy		32401	2		=			
ANR	32427	Identifier	mb_xy		32401	0					
ANR	32428	PtrMemberAccess	h -> mb_xy		32401	1					
ANR	32429	Identifier	h		32401	0					
ANR	32430	Identifier	mb_xy		32401	1					
ANR	32431	IdentifierDeclStatement	const int mb_type = h -> cur_pic . mb_type [ mb_xy ] ;	11:4:192:237	32401	3	True				
ANR	32432	IdentifierDecl	mb_type = h -> cur_pic . mb_type [ mb_xy ]		32401	0					
ANR	32433	IdentifierDeclType	const int		32401	0					
ANR	32434	Identifier	mb_type		32401	1					
ANR	32435	AssignmentExpression	mb_type = h -> cur_pic . mb_type [ mb_xy ]		32401	2		=			
ANR	32436	Identifier	mb_type		32401	0					
ANR	32437	ArrayIndexing	h -> cur_pic . mb_type [ mb_xy ]		32401	1					
ANR	32438	MemberAccess	h -> cur_pic . mb_type		32401	0					
ANR	32439	PtrMemberAccess	h -> cur_pic		32401	0					
ANR	32440	Identifier	h		32401	0					
ANR	32441	Identifier	cur_pic		32401	1					
ANR	32442	Identifier	mb_type		32401	1					
ANR	32443	Identifier	mb_xy		32401	1					
ANR	32444	IdentifierDeclStatement	"uint8_t * dest_y , * dest_cb , * dest_cr ;"	13:4:244:279	32401	4	True				
ANR	32445	IdentifierDecl	* dest_y		32401	0					
ANR	32446	IdentifierDeclType	uint8_t *		32401	0					
ANR	32447	Identifier	dest_y		32401	1					
ANR	32448	IdentifierDecl	* dest_cb		32401	1					
ANR	32449	IdentifierDeclType	uint8_t *		32401	0					
ANR	32450	Identifier	dest_cb		32401	1					
ANR	32451	IdentifierDecl	* dest_cr		32401	2					
ANR	32452	IdentifierDeclType	uint8_t *		32401	0					
ANR	32453	Identifier	dest_cr		32401	1					
ANR	32454	IdentifierDeclStatement	"int linesize , uvlinesize ;"	15:4:286:325	32401	5	True				
ANR	32455	IdentifierDecl	linesize		32401	0					
ANR	32456	IdentifierDeclType	int		32401	0					
ANR	32457	Identifier	linesize		32401	1					
ANR	32458	IdentifierDecl	uvlinesize		32401	1					
ANR	32459	IdentifierDeclType	int		32401	0					
ANR	32460	Identifier	uvlinesize		32401	1					
ANR	32461	IdentifierDeclStatement	"int i , j ;"	17:4:332:340	32401	6	True				
ANR	32462	IdentifierDecl	i		32401	0					
ANR	32463	IdentifierDeclType	int		32401	0					
ANR	32464	Identifier	i		32401	1					
ANR	32465	IdentifierDecl	j		32401	1					
ANR	32466	IdentifierDeclType	int		32401	0					
ANR	32467	Identifier	j		32401	1					
ANR	32468	IdentifierDeclStatement	int * block_offset = & h -> block_offset [ 0 ] ;	19:4:347:386	32401	7	True				
ANR	32469	IdentifierDecl	* block_offset = & h -> block_offset [ 0 ]		32401	0					
ANR	32470	IdentifierDeclType	int *		32401	0					
ANR	32471	Identifier	block_offset		32401	1					
ANR	32472	AssignmentExpression	* block_offset = & h -> block_offset [ 0 ]		32401	2		=			
ANR	32473	Identifier	block_offset		32401	0					
ANR	32474	UnaryOperationExpression	& h -> block_offset [ 0 ]		32401	1					
ANR	32475	UnaryOperator	&		32401	0					
ANR	32476	ArrayIndexing	h -> block_offset [ 0 ]		32401	1					
ANR	32477	PtrMemberAccess	h -> block_offset		32401	0					
ANR	32478	Identifier	h		32401	0					
ANR	32479	Identifier	block_offset		32401	1					
ANR	32480	PrimaryExpression	0		32401	1					
ANR	32481	IdentifierDeclStatement	const int transform_bypass = ! SIMPLE && ( sl -> qscale == 0 && h -> sps . transform_bypass ) ;	21:4:393:477	32401	8	True				
ANR	32482	IdentifierDecl	transform_bypass = ! SIMPLE && ( sl -> qscale == 0 && h -> sps . transform_bypass )		32401	0					
ANR	32483	IdentifierDeclType	const int		32401	0					
ANR	32484	Identifier	transform_bypass		32401	1					
ANR	32485	AssignmentExpression	transform_bypass = ! SIMPLE && ( sl -> qscale == 0 && h -> sps . transform_bypass )		32401	2		=			
ANR	32486	Identifier	transform_bypass		32401	0					
ANR	32487	AndExpression	! SIMPLE && ( sl -> qscale == 0 && h -> sps . transform_bypass )		32401	1		&&			
ANR	32488	UnaryOperationExpression	! SIMPLE		32401	0					
ANR	32489	UnaryOperator	!		32401	0					
ANR	32490	Identifier	SIMPLE		32401	1					
ANR	32491	AndExpression	sl -> qscale == 0 && h -> sps . transform_bypass		32401	1		&&			
ANR	32492	EqualityExpression	sl -> qscale == 0		32401	0		==			
ANR	32493	PtrMemberAccess	sl -> qscale		32401	0					
ANR	32494	Identifier	sl		32401	0					
ANR	32495	Identifier	qscale		32401	1					
ANR	32496	PrimaryExpression	0		32401	1					
ANR	32497	MemberAccess	h -> sps . transform_bypass		32401	1					
ANR	32498	PtrMemberAccess	h -> sps		32401	0					
ANR	32499	Identifier	h		32401	0					
ANR	32500	Identifier	sps		32401	1					
ANR	32501	Identifier	transform_bypass		32401	1					
ANR	32502	IdentifierDeclStatement	const int is_h264 = ! CONFIG_SVQ3_DECODER || SIMPLE || h -> avctx -> codec_id == AV_CODEC_ID_H264 ;	25:4:546:638	32401	9	True				
ANR	32503	IdentifierDecl	is_h264 = ! CONFIG_SVQ3_DECODER || SIMPLE || h -> avctx -> codec_id == AV_CODEC_ID_H264		32401	0					
ANR	32504	IdentifierDeclType	const int		32401	0					
ANR	32505	Identifier	is_h264		32401	1					
ANR	32506	AssignmentExpression	is_h264 = ! CONFIG_SVQ3_DECODER || SIMPLE || h -> avctx -> codec_id == AV_CODEC_ID_H264		32401	2		=			
ANR	32507	Identifier	is_h264		32401	0					
ANR	32508	OrExpression	! CONFIG_SVQ3_DECODER || SIMPLE || h -> avctx -> codec_id == AV_CODEC_ID_H264		32401	1		||			
ANR	32509	UnaryOperationExpression	! CONFIG_SVQ3_DECODER		32401	0					
ANR	32510	UnaryOperator	!		32401	0					
ANR	32511	Identifier	CONFIG_SVQ3_DECODER		32401	1					
ANR	32512	OrExpression	SIMPLE || h -> avctx -> codec_id == AV_CODEC_ID_H264		32401	1		||			
ANR	32513	Identifier	SIMPLE		32401	0					
ANR	32514	EqualityExpression	h -> avctx -> codec_id == AV_CODEC_ID_H264		32401	1		==			
ANR	32515	PtrMemberAccess	h -> avctx -> codec_id		32401	0					
ANR	32516	PtrMemberAccess	h -> avctx		32401	0					
ANR	32517	Identifier	h		32401	0					
ANR	32518	Identifier	avctx		32401	1					
ANR	32519	Identifier	codec_id		32401	1					
ANR	32520	Identifier	AV_CODEC_ID_H264		32401	1					
ANR	32521	IdentifierDeclStatement	"void ( * idct_add ) ( uint8_t * dst , int16_t * block , int stride ) ;"	27:4:645:703	32401	10	True				
ANR	32522	IdentifierDecl	"( * idct_add ) ( uint8_t * dst , int16_t * block , int stride )"		32401	0					
ANR	32523	IdentifierDeclType	"void ( * ) ( uint8_t * dst , int16_t * block , int stride )"		32401	0					
ANR	32524	Identifier	idct_add		32401	1					
ANR	32525	Identifier	dst		32401	2					
ANR	32526	Identifier	block		32401	3					
ANR	32527	IdentifierDeclStatement	const int block_h = 16 >> h -> chroma_y_shift ;	29:4:710:755	32401	11	True				
ANR	32528	IdentifierDecl	block_h = 16 >> h -> chroma_y_shift		32401	0					
ANR	32529	IdentifierDeclType	const int		32401	0					
ANR	32530	Identifier	block_h		32401	1					
ANR	32531	AssignmentExpression	block_h = 16 >> h -> chroma_y_shift		32401	2		=			
ANR	32532	Identifier	block_h		32401	0					
ANR	32533	ShiftExpression	16 >> h -> chroma_y_shift		32401	1		>>			
ANR	32534	PrimaryExpression	16		32401	0					
ANR	32535	PtrMemberAccess	h -> chroma_y_shift		32401	1					
ANR	32536	Identifier	h		32401	0					
ANR	32537	Identifier	chroma_y_shift		32401	1					
ANR	32538	IdentifierDeclStatement	const int chroma422 = CHROMA422 ( h ) ;	31:4:762:796	32401	12	True				
ANR	32539	IdentifierDecl	chroma422 = CHROMA422 ( h )		32401	0					
ANR	32540	IdentifierDeclType	const int		32401	0					
ANR	32541	Identifier	chroma422		32401	1					
ANR	32542	AssignmentExpression	chroma422 = CHROMA422 ( h )		32401	2		=			
ANR	32543	Identifier	chroma422		32401	0					
ANR	32544	CallExpression	CHROMA422 ( h )		32401	1					
ANR	32545	Callee	CHROMA422		32401	0					
ANR	32546	Identifier	CHROMA422		32401	0					
ANR	32547	ArgumentList	h		32401	1					
ANR	32548	Argument	h		32401	0					
ANR	32549	Identifier	h		32401	0					
ANR	32550	ExpressionStatement	dest_y = h -> cur_pic . f . data [ 0 ] + ( ( mb_x << PIXEL_SHIFT ) + mb_y * h -> linesize ) * 16	35:4:805:892	32401	13	True				
ANR	32551	AssignmentExpression	dest_y = h -> cur_pic . f . data [ 0 ] + ( ( mb_x << PIXEL_SHIFT ) + mb_y * h -> linesize ) * 16		32401	0		=			
ANR	32552	Identifier	dest_y		32401	0					
ANR	32553	AdditiveExpression	h -> cur_pic . f . data [ 0 ] + ( ( mb_x << PIXEL_SHIFT ) + mb_y * h -> linesize ) * 16		32401	1		+			
ANR	32554	ArrayIndexing	h -> cur_pic . f . data [ 0 ]		32401	0					
ANR	32555	MemberAccess	h -> cur_pic . f . data		32401	0					
ANR	32556	MemberAccess	h -> cur_pic . f		32401	0					
ANR	32557	PtrMemberAccess	h -> cur_pic		32401	0					
ANR	32558	Identifier	h		32401	0					
ANR	32559	Identifier	cur_pic		32401	1					
ANR	32560	Identifier	f		32401	1					
ANR	32561	Identifier	data		32401	1					
ANR	32562	PrimaryExpression	0		32401	1					
ANR	32563	MultiplicativeExpression	( ( mb_x << PIXEL_SHIFT ) + mb_y * h -> linesize ) * 16		32401	1		*			
ANR	32564	AdditiveExpression	( mb_x << PIXEL_SHIFT ) + mb_y * h -> linesize		32401	0		+			
ANR	32565	ShiftExpression	mb_x << PIXEL_SHIFT		32401	0		<<			
ANR	32566	Identifier	mb_x		32401	0					
ANR	32567	Identifier	PIXEL_SHIFT		32401	1					
ANR	32568	MultiplicativeExpression	mb_y * h -> linesize		32401	1		*			
ANR	32569	Identifier	mb_y		32401	0					
ANR	32570	PtrMemberAccess	h -> linesize		32401	1					
ANR	32571	Identifier	h		32401	0					
ANR	32572	Identifier	linesize		32401	1					
ANR	32573	PrimaryExpression	16		32401	1					
ANR	32574	ExpressionStatement	dest_cb = h -> cur_pic . f . data [ 1 ] + ( mb_x << PIXEL_SHIFT ) * 8 + mb_y * h -> uvlinesize * block_h	37:4:899:991	32401	14	True				
ANR	32575	AssignmentExpression	dest_cb = h -> cur_pic . f . data [ 1 ] + ( mb_x << PIXEL_SHIFT ) * 8 + mb_y * h -> uvlinesize * block_h		32401	0		=			
ANR	32576	Identifier	dest_cb		32401	0					
ANR	32577	AdditiveExpression	h -> cur_pic . f . data [ 1 ] + ( mb_x << PIXEL_SHIFT ) * 8 + mb_y * h -> uvlinesize * block_h		32401	1		+			
ANR	32578	ArrayIndexing	h -> cur_pic . f . data [ 1 ]		32401	0					
ANR	32579	MemberAccess	h -> cur_pic . f . data		32401	0					
ANR	32580	MemberAccess	h -> cur_pic . f		32401	0					
ANR	32581	PtrMemberAccess	h -> cur_pic		32401	0					
ANR	32582	Identifier	h		32401	0					
ANR	32583	Identifier	cur_pic		32401	1					
ANR	32584	Identifier	f		32401	1					
ANR	32585	Identifier	data		32401	1					
ANR	32586	PrimaryExpression	1		32401	1					
ANR	32587	AdditiveExpression	( mb_x << PIXEL_SHIFT ) * 8 + mb_y * h -> uvlinesize * block_h		32401	1		+			
ANR	32588	MultiplicativeExpression	( mb_x << PIXEL_SHIFT ) * 8		32401	0		*			
ANR	32589	ShiftExpression	mb_x << PIXEL_SHIFT		32401	0		<<			
ANR	32590	Identifier	mb_x		32401	0					
ANR	32591	Identifier	PIXEL_SHIFT		32401	1					
ANR	32592	PrimaryExpression	8		32401	1					
ANR	32593	MultiplicativeExpression	mb_y * h -> uvlinesize * block_h		32401	1		*			
ANR	32594	Identifier	mb_y		32401	0					
ANR	32595	MultiplicativeExpression	h -> uvlinesize * block_h		32401	1		*			
ANR	32596	PtrMemberAccess	h -> uvlinesize		32401	0					
ANR	32597	Identifier	h		32401	0					
ANR	32598	Identifier	uvlinesize		32401	1					
ANR	32599	Identifier	block_h		32401	1					
ANR	32600	ExpressionStatement	dest_cr = h -> cur_pic . f . data [ 2 ] + ( mb_x << PIXEL_SHIFT ) * 8 + mb_y * h -> uvlinesize * block_h	39:4:998:1090	32401	15	True				
ANR	32601	AssignmentExpression	dest_cr = h -> cur_pic . f . data [ 2 ] + ( mb_x << PIXEL_SHIFT ) * 8 + mb_y * h -> uvlinesize * block_h		32401	0		=			
ANR	32602	Identifier	dest_cr		32401	0					
ANR	32603	AdditiveExpression	h -> cur_pic . f . data [ 2 ] + ( mb_x << PIXEL_SHIFT ) * 8 + mb_y * h -> uvlinesize * block_h		32401	1		+			
ANR	32604	ArrayIndexing	h -> cur_pic . f . data [ 2 ]		32401	0					
ANR	32605	MemberAccess	h -> cur_pic . f . data		32401	0					
ANR	32606	MemberAccess	h -> cur_pic . f		32401	0					
ANR	32607	PtrMemberAccess	h -> cur_pic		32401	0					
ANR	32608	Identifier	h		32401	0					
ANR	32609	Identifier	cur_pic		32401	1					
ANR	32610	Identifier	f		32401	1					
ANR	32611	Identifier	data		32401	1					
ANR	32612	PrimaryExpression	2		32401	1					
ANR	32613	AdditiveExpression	( mb_x << PIXEL_SHIFT ) * 8 + mb_y * h -> uvlinesize * block_h		32401	1		+			
ANR	32614	MultiplicativeExpression	( mb_x << PIXEL_SHIFT ) * 8		32401	0		*			
ANR	32615	ShiftExpression	mb_x << PIXEL_SHIFT		32401	0		<<			
ANR	32616	Identifier	mb_x		32401	0					
ANR	32617	Identifier	PIXEL_SHIFT		32401	1					
ANR	32618	PrimaryExpression	8		32401	1					
ANR	32619	MultiplicativeExpression	mb_y * h -> uvlinesize * block_h		32401	1		*			
ANR	32620	Identifier	mb_y		32401	0					
ANR	32621	MultiplicativeExpression	h -> uvlinesize * block_h		32401	1		*			
ANR	32622	PtrMemberAccess	h -> uvlinesize		32401	0					
ANR	32623	Identifier	h		32401	0					
ANR	32624	Identifier	uvlinesize		32401	1					
ANR	32625	Identifier	block_h		32401	1					
ANR	32626	ExpressionStatement	"h -> vdsp . prefetch ( dest_y + ( h -> mb_x & 3 ) * 4 * h -> linesize + ( 64 << PIXEL_SHIFT ) , h -> linesize , 4 )"	43:4:1099:1204	32401	16	True				
ANR	32627	CallExpression	"h -> vdsp . prefetch ( dest_y + ( h -> mb_x & 3 ) * 4 * h -> linesize + ( 64 << PIXEL_SHIFT ) , h -> linesize , 4 )"		32401	0					
ANR	32628	Callee	h -> vdsp . prefetch		32401	0					
ANR	32629	MemberAccess	h -> vdsp . prefetch		32401	0					
ANR	32630	PtrMemberAccess	h -> vdsp		32401	0					
ANR	32631	Identifier	h		32401	0					
ANR	32632	Identifier	vdsp		32401	1					
ANR	32633	Identifier	prefetch		32401	1					
ANR	32634	ArgumentList	dest_y + ( h -> mb_x & 3 ) * 4 * h -> linesize + ( 64 << PIXEL_SHIFT )		32401	1					
ANR	32635	Argument	dest_y + ( h -> mb_x & 3 ) * 4 * h -> linesize + ( 64 << PIXEL_SHIFT )		32401	0					
ANR	32636	AdditiveExpression	dest_y + ( h -> mb_x & 3 ) * 4 * h -> linesize + ( 64 << PIXEL_SHIFT )		32401	0		+			
ANR	32637	Identifier	dest_y		32401	0					
ANR	32638	AdditiveExpression	( h -> mb_x & 3 ) * 4 * h -> linesize + ( 64 << PIXEL_SHIFT )		32401	1		+			
ANR	32639	MultiplicativeExpression	( h -> mb_x & 3 ) * 4 * h -> linesize		32401	0		*			
ANR	32640	BitAndExpression	h -> mb_x & 3		32401	0		&			
ANR	32641	PtrMemberAccess	h -> mb_x		32401	0					
ANR	32642	Identifier	h		32401	0					
ANR	32643	Identifier	mb_x		32401	1					
ANR	32644	PrimaryExpression	3		32401	1					
ANR	32645	MultiplicativeExpression	4 * h -> linesize		32401	1		*			
ANR	32646	PrimaryExpression	4		32401	0					
ANR	32647	PtrMemberAccess	h -> linesize		32401	1					
ANR	32648	Identifier	h		32401	0					
ANR	32649	Identifier	linesize		32401	1					
ANR	32650	ShiftExpression	64 << PIXEL_SHIFT		32401	1		<<			
ANR	32651	PrimaryExpression	64		32401	0					
ANR	32652	Identifier	PIXEL_SHIFT		32401	1					
ANR	32653	Argument	h -> linesize		32401	1					
ANR	32654	PtrMemberAccess	h -> linesize		32401	0					
ANR	32655	Identifier	h		32401	0					
ANR	32656	Identifier	linesize		32401	1					
ANR	32657	Argument	4		32401	2					
ANR	32658	PrimaryExpression	4		32401	0					
ANR	32659	ExpressionStatement	"h -> vdsp . prefetch ( dest_cb + ( h -> mb_x & 7 ) * h -> uvlinesize + ( 64 << PIXEL_SHIFT ) , dest_cr - dest_cb , 2 )"	45:4:1211:1316	32401	17	True				
ANR	32660	CallExpression	"h -> vdsp . prefetch ( dest_cb + ( h -> mb_x & 7 ) * h -> uvlinesize + ( 64 << PIXEL_SHIFT ) , dest_cr - dest_cb , 2 )"		32401	0					
ANR	32661	Callee	h -> vdsp . prefetch		32401	0					
ANR	32662	MemberAccess	h -> vdsp . prefetch		32401	0					
ANR	32663	PtrMemberAccess	h -> vdsp		32401	0					
ANR	32664	Identifier	h		32401	0					
ANR	32665	Identifier	vdsp		32401	1					
ANR	32666	Identifier	prefetch		32401	1					
ANR	32667	ArgumentList	dest_cb + ( h -> mb_x & 7 ) * h -> uvlinesize + ( 64 << PIXEL_SHIFT )		32401	1					
ANR	32668	Argument	dest_cb + ( h -> mb_x & 7 ) * h -> uvlinesize + ( 64 << PIXEL_SHIFT )		32401	0					
ANR	32669	AdditiveExpression	dest_cb + ( h -> mb_x & 7 ) * h -> uvlinesize + ( 64 << PIXEL_SHIFT )		32401	0		+			
ANR	32670	Identifier	dest_cb		32401	0					
ANR	32671	AdditiveExpression	( h -> mb_x & 7 ) * h -> uvlinesize + ( 64 << PIXEL_SHIFT )		32401	1		+			
ANR	32672	MultiplicativeExpression	( h -> mb_x & 7 ) * h -> uvlinesize		32401	0		*			
ANR	32673	BitAndExpression	h -> mb_x & 7		32401	0		&			
ANR	32674	PtrMemberAccess	h -> mb_x		32401	0					
ANR	32675	Identifier	h		32401	0					
ANR	32676	Identifier	mb_x		32401	1					
ANR	32677	PrimaryExpression	7		32401	1					
ANR	32678	PtrMemberAccess	h -> uvlinesize		32401	1					
ANR	32679	Identifier	h		32401	0					
ANR	32680	Identifier	uvlinesize		32401	1					
ANR	32681	ShiftExpression	64 << PIXEL_SHIFT		32401	1		<<			
ANR	32682	PrimaryExpression	64		32401	0					
ANR	32683	Identifier	PIXEL_SHIFT		32401	1					
ANR	32684	Argument	dest_cr - dest_cb		32401	1					
ANR	32685	AdditiveExpression	dest_cr - dest_cb		32401	0		-			
ANR	32686	Identifier	dest_cr		32401	0					
ANR	32687	Identifier	dest_cb		32401	1					
ANR	32688	Argument	2		32401	2					
ANR	32689	PrimaryExpression	2		32401	0					
ANR	32690	ExpressionStatement	h -> list_counts [ mb_xy ] = sl -> list_count	49:4:1325:1363	32401	18	True				
ANR	32691	AssignmentExpression	h -> list_counts [ mb_xy ] = sl -> list_count		32401	0		=			
ANR	32692	ArrayIndexing	h -> list_counts [ mb_xy ]		32401	0					
ANR	32693	PtrMemberAccess	h -> list_counts		32401	0					
ANR	32694	Identifier	h		32401	0					
ANR	32695	Identifier	list_counts		32401	1					
ANR	32696	Identifier	mb_xy		32401	1					
ANR	32697	PtrMemberAccess	sl -> list_count		32401	1					
ANR	32698	Identifier	sl		32401	0					
ANR	32699	Identifier	list_count		32401	1					
ANR	32700	IfStatement	if ( ! SIMPLE && MB_FIELD ( h ) )		32401	19					
ANR	32701	Condition	! SIMPLE && MB_FIELD ( h )	53:8:1376:1397	32401	0	True				
ANR	32702	AndExpression	! SIMPLE && MB_FIELD ( h )		32401	0		&&			
ANR	32703	UnaryOperationExpression	! SIMPLE		32401	0					
ANR	32704	UnaryOperator	!		32401	0					
ANR	32705	Identifier	SIMPLE		32401	1					
ANR	32706	CallExpression	MB_FIELD ( h )		32401	1					
ANR	32707	Callee	MB_FIELD		32401	0					
ANR	32708	Identifier	MB_FIELD		32401	0					
ANR	32709	ArgumentList	h		32401	1					
ANR	32710	Argument	h		32401	0					
ANR	32711	Identifier	h		32401	0					
ANR	32712	CompoundStatement		51:32:1317:1317	32401	1					
ANR	32713	ExpressionStatement	linesize = sl -> mb_linesize = h -> linesize * 2	55:8:1411:1459	32401	0	True				
ANR	32714	AssignmentExpression	linesize = sl -> mb_linesize = h -> linesize * 2		32401	0		=			
ANR	32715	Identifier	linesize		32401	0					
ANR	32716	AssignmentExpression	sl -> mb_linesize = h -> linesize * 2		32401	1		=			
ANR	32717	PtrMemberAccess	sl -> mb_linesize		32401	0					
ANR	32718	Identifier	sl		32401	0					
ANR	32719	Identifier	mb_linesize		32401	1					
ANR	32720	MultiplicativeExpression	h -> linesize * 2		32401	1		*			
ANR	32721	PtrMemberAccess	h -> linesize		32401	0					
ANR	32722	Identifier	h		32401	0					
ANR	32723	Identifier	linesize		32401	1					
ANR	32724	PrimaryExpression	2		32401	1					
ANR	32725	ExpressionStatement	uvlinesize = sl -> mb_uvlinesize = h -> uvlinesize * 2	57:8:1470:1522	32401	1	True				
ANR	32726	AssignmentExpression	uvlinesize = sl -> mb_uvlinesize = h -> uvlinesize * 2		32401	0		=			
ANR	32727	Identifier	uvlinesize		32401	0					
ANR	32728	AssignmentExpression	sl -> mb_uvlinesize = h -> uvlinesize * 2		32401	1		=			
ANR	32729	PtrMemberAccess	sl -> mb_uvlinesize		32401	0					
ANR	32730	Identifier	sl		32401	0					
ANR	32731	Identifier	mb_uvlinesize		32401	1					
ANR	32732	MultiplicativeExpression	h -> uvlinesize * 2		32401	1		*			
ANR	32733	PtrMemberAccess	h -> uvlinesize		32401	0					
ANR	32734	Identifier	h		32401	0					
ANR	32735	Identifier	uvlinesize		32401	1					
ANR	32736	PrimaryExpression	2		32401	1					
ANR	32737	ExpressionStatement	block_offset = & h -> block_offset [ 48 ]	59:8:1533:1568	32401	2	True				
ANR	32738	AssignmentExpression	block_offset = & h -> block_offset [ 48 ]		32401	0		=			
ANR	32739	Identifier	block_offset		32401	0					
ANR	32740	UnaryOperationExpression	& h -> block_offset [ 48 ]		32401	1					
ANR	32741	UnaryOperator	&		32401	0					
ANR	32742	ArrayIndexing	h -> block_offset [ 48 ]		32401	1					
ANR	32743	PtrMemberAccess	h -> block_offset		32401	0					
ANR	32744	Identifier	h		32401	0					
ANR	32745	Identifier	block_offset		32401	1					
ANR	32746	PrimaryExpression	48		32401	1					
ANR	32747	IfStatement	if ( mb_y & 1 )		32401	3					
ANR	32748	Condition	mb_y & 1	61:12:1583:1590	32401	0	True				
ANR	32749	BitAndExpression	mb_y & 1		32401	0		&			
ANR	32750	Identifier	mb_y		32401	0					
ANR	32751	PrimaryExpression	1		32401	1					
ANR	32752	CompoundStatement		59:22:1510:1510	32401	1					
ANR	32753	ExpressionStatement	dest_y -= h -> linesize * 15	63:12:1644:1671	32401	0	True				
ANR	32754	AssignmentExpression	dest_y -= h -> linesize * 15		32401	0		-=			
ANR	32755	Identifier	dest_y		32401	0					
ANR	32756	MultiplicativeExpression	h -> linesize * 15		32401	1		*			
ANR	32757	PtrMemberAccess	h -> linesize		32401	0					
ANR	32758	Identifier	h		32401	0					
ANR	32759	Identifier	linesize		32401	1					
ANR	32760	PrimaryExpression	15		32401	1					
ANR	32761	ExpressionStatement	dest_cb -= h -> uvlinesize * ( block_h - 1 )	65:12:1686:1726	32401	1	True				
ANR	32762	AssignmentExpression	dest_cb -= h -> uvlinesize * ( block_h - 1 )		32401	0		-=			
ANR	32763	Identifier	dest_cb		32401	0					
ANR	32764	MultiplicativeExpression	h -> uvlinesize * ( block_h - 1 )		32401	1		*			
ANR	32765	PtrMemberAccess	h -> uvlinesize		32401	0					
ANR	32766	Identifier	h		32401	0					
ANR	32767	Identifier	uvlinesize		32401	1					
ANR	32768	AdditiveExpression	block_h - 1		32401	1		-			
ANR	32769	Identifier	block_h		32401	0					
ANR	32770	PrimaryExpression	1		32401	1					
ANR	32771	ExpressionStatement	dest_cr -= h -> uvlinesize * ( block_h - 1 )	67:12:1741:1781	32401	2	True				
ANR	32772	AssignmentExpression	dest_cr -= h -> uvlinesize * ( block_h - 1 )		32401	0		-=			
ANR	32773	Identifier	dest_cr		32401	0					
ANR	32774	MultiplicativeExpression	h -> uvlinesize * ( block_h - 1 )		32401	1		*			
ANR	32775	PtrMemberAccess	h -> uvlinesize		32401	0					
ANR	32776	Identifier	h		32401	0					
ANR	32777	Identifier	uvlinesize		32401	1					
ANR	32778	AdditiveExpression	block_h - 1		32401	1		-			
ANR	32779	Identifier	block_h		32401	0					
ANR	32780	PrimaryExpression	1		32401	1					
ANR	32781	IfStatement	if ( FRAME_MBAFF ( h ) )		32401	4					
ANR	32782	Condition	FRAME_MBAFF ( h )	71:12:1807:1820	32401	0	True				
ANR	32783	CallExpression	FRAME_MBAFF ( h )		32401	0					
ANR	32784	Callee	FRAME_MBAFF		32401	0					
ANR	32785	Identifier	FRAME_MBAFF		32401	0					
ANR	32786	ArgumentList	h		32401	1					
ANR	32787	Argument	h		32401	0					
ANR	32788	Identifier	h		32401	0					
ANR	32789	CompoundStatement		71:12:1755:1763	32401	1					
ANR	32790	IdentifierDeclStatement	int list ;	73:12:1838:1846	32401	0	True				
ANR	32791	IdentifierDecl	list		32401	0					
ANR	32792	IdentifierDeclType	int		32401	0					
ANR	32793	Identifier	list		32401	1					
ANR	32794	ForStatement	for ( list = 0 ; list < sl -> list_count ; list ++ )		32401	1					
ANR	32795	ForInit	list = 0 ;	75:17:1866:1874	32401	0	True				
ANR	32796	AssignmentExpression	list = 0		32401	0		=			
ANR	32797	Identifier	list		32401	0					
ANR	32798	PrimaryExpression	0		32401	1					
ANR	32799	Condition	list < sl -> list_count	75:27:1876:1896	32401	1	True				
ANR	32800	RelationalExpression	list < sl -> list_count		32401	0		<			
ANR	32801	Identifier	list		32401	0					
ANR	32802	PtrMemberAccess	sl -> list_count		32401	1					
ANR	32803	Identifier	sl		32401	0					
ANR	32804	Identifier	list_count		32401	1					
ANR	32805	PostIncDecOperationExpression	list ++	75:50:1899:1904	32401	2	True				
ANR	32806	Identifier	list		32401	0					
ANR	32807	IncDec	++		32401	1					
ANR	32808	CompoundStatement		73:58:1824:1824	32401	3					
ANR	32809	IfStatement	"if ( ! USES_LIST ( mb_type , list ) )"		32401	0					
ANR	32810	Condition	"! USES_LIST ( mb_type , list )"	77:20:1930:1954	32401	0	True				
ANR	32811	UnaryOperationExpression	"! USES_LIST ( mb_type , list )"		32401	0					
ANR	32812	UnaryOperator	!		32401	0					
ANR	32813	CallExpression	"USES_LIST ( mb_type , list )"		32401	1					
ANR	32814	Callee	USES_LIST		32401	0					
ANR	32815	Identifier	USES_LIST		32401	0					
ANR	32816	ArgumentList	mb_type		32401	1					
ANR	32817	Argument	mb_type		32401	0					
ANR	32818	Identifier	mb_type		32401	0					
ANR	32819	Argument	list		32401	1					
ANR	32820	Identifier	list		32401	0					
ANR	32821	ContinueStatement	continue ;	79:20:1978:1986	32401	1	True				
ANR	32822	IfStatement	if ( IS_16X16 ( mb_type ) )		32401	1					
ANR	32823	Condition	IS_16X16 ( mb_type )	81:20:2009:2025	32401	0	True				
ANR	32824	CallExpression	IS_16X16 ( mb_type )		32401	0					
ANR	32825	Callee	IS_16X16		32401	0					
ANR	32826	Identifier	IS_16X16		32401	0					
ANR	32827	ArgumentList	mb_type		32401	1					
ANR	32828	Argument	mb_type		32401	0					
ANR	32829	Identifier	mb_type		32401	0					
ANR	32830	CompoundStatement		81:20:1968:2012	32401	1					
ANR	32831	IdentifierDeclStatement	int8_t * ref = & sl -> ref_cache [ list ] [ scan8 [ 0 ] ] ;	83:20:2051:2095	32401	0	True				
ANR	32832	IdentifierDecl	* ref = & sl -> ref_cache [ list ] [ scan8 [ 0 ] ]		32401	0					
ANR	32833	IdentifierDeclType	int8_t *		32401	0					
ANR	32834	Identifier	ref		32401	1					
ANR	32835	AssignmentExpression	* ref = & sl -> ref_cache [ list ] [ scan8 [ 0 ] ]		32401	2		=			
ANR	32836	Identifier	ref		32401	0					
ANR	32837	UnaryOperationExpression	& sl -> ref_cache [ list ] [ scan8 [ 0 ] ]		32401	1					
ANR	32838	UnaryOperator	&		32401	0					
ANR	32839	ArrayIndexing	sl -> ref_cache [ list ] [ scan8 [ 0 ] ]		32401	1					
ANR	32840	ArrayIndexing	sl -> ref_cache [ list ]		32401	0					
ANR	32841	PtrMemberAccess	sl -> ref_cache		32401	0					
ANR	32842	Identifier	sl		32401	0					
ANR	32843	Identifier	ref_cache		32401	1					
ANR	32844	Identifier	list		32401	1					
ANR	32845	ArrayIndexing	scan8 [ 0 ]		32401	1					
ANR	32846	Identifier	scan8		32401	0					
ANR	32847	PrimaryExpression	0		32401	1					
ANR	32848	ExpressionStatement	"fill_rectangle ( ref , 4 , 4 , 8 , ( 16 + * ref ) ^ ( h -> mb_y & 1 ) , 1 )"	85:20:2118:2178	32401	1	True				
ANR	32849	CallExpression	"fill_rectangle ( ref , 4 , 4 , 8 , ( 16 + * ref ) ^ ( h -> mb_y & 1 ) , 1 )"		32401	0					
ANR	32850	Callee	fill_rectangle		32401	0					
ANR	32851	Identifier	fill_rectangle		32401	0					
ANR	32852	ArgumentList	ref		32401	1					
ANR	32853	Argument	ref		32401	0					
ANR	32854	Identifier	ref		32401	0					
ANR	32855	Argument	4		32401	1					
ANR	32856	PrimaryExpression	4		32401	0					
ANR	32857	Argument	4		32401	2					
ANR	32858	PrimaryExpression	4		32401	0					
ANR	32859	Argument	8		32401	3					
ANR	32860	PrimaryExpression	8		32401	0					
ANR	32861	Argument	( 16 + * ref ) ^ ( h -> mb_y & 1 )		32401	4					
ANR	32862	ExclusiveOrExpression	( 16 + * ref ) ^ ( h -> mb_y & 1 )		32401	0		^			
ANR	32863	AdditiveExpression	16 + * ref		32401	0		+			
ANR	32864	PrimaryExpression	16		32401	0					
ANR	32865	UnaryOperationExpression	* ref		32401	1					
ANR	32866	UnaryOperator	*		32401	0					
ANR	32867	Identifier	ref		32401	1					
ANR	32868	BitAndExpression	h -> mb_y & 1		32401	1		&			
ANR	32869	PtrMemberAccess	h -> mb_y		32401	0					
ANR	32870	Identifier	h		32401	0					
ANR	32871	Identifier	mb_y		32401	1					
ANR	32872	PrimaryExpression	1		32401	1					
ANR	32873	Argument	1		32401	5					
ANR	32874	PrimaryExpression	1		32401	0					
ANR	32875	ElseStatement	else		32401	0					
ANR	32876	CompoundStatement		85:23:2121:2121	32401	0					
ANR	32877	ForStatement	for ( i = 0 ; i < 16 ; i += 4 )		32401	0					
ANR	32878	ForInit	i = 0 ;	89:25:2232:2237	32401	0	True				
ANR	32879	AssignmentExpression	i = 0		32401	0		=			
ANR	32880	Identifier	i		32401	0					
ANR	32881	PrimaryExpression	0		32401	1					
ANR	32882	Condition	i < 16	89:32:2239:2244	32401	1	True				
ANR	32883	RelationalExpression	i < 16		32401	0		<			
ANR	32884	Identifier	i		32401	0					
ANR	32885	PrimaryExpression	16		32401	1					
ANR	32886	AssignmentExpression	i += 4	89:40:2247:2252	32401	2	True	+=			
ANR	32887	Identifier	i		32401	0					
ANR	32888	PrimaryExpression	4		32401	1					
ANR	32889	CompoundStatement		89:24:2199:2238	32401	3					
ANR	32890	IdentifierDeclStatement	int ref = sl -> ref_cache [ list ] [ scan8 [ i ] ] ;	91:24:2282:2321	32401	0	True				
ANR	32891	IdentifierDecl	ref = sl -> ref_cache [ list ] [ scan8 [ i ] ]		32401	0					
ANR	32892	IdentifierDeclType	int		32401	0					
ANR	32893	Identifier	ref		32401	1					
ANR	32894	AssignmentExpression	ref = sl -> ref_cache [ list ] [ scan8 [ i ] ]		32401	2		=			
ANR	32895	Identifier	ref		32401	0					
ANR	32896	ArrayIndexing	sl -> ref_cache [ list ] [ scan8 [ i ] ]		32401	1					
ANR	32897	ArrayIndexing	sl -> ref_cache [ list ]		32401	0					
ANR	32898	PtrMemberAccess	sl -> ref_cache		32401	0					
ANR	32899	Identifier	sl		32401	0					
ANR	32900	Identifier	ref_cache		32401	1					
ANR	32901	Identifier	list		32401	1					
ANR	32902	ArrayIndexing	scan8 [ i ]		32401	1					
ANR	32903	Identifier	scan8		32401	0					
ANR	32904	Identifier	i		32401	1					
ANR	32905	IfStatement	if ( ref >= 0 )		32401	1					
ANR	32906	Condition	ref >= 0	93:28:2352:2359	32401	0	True				
ANR	32907	RelationalExpression	ref >= 0		32401	0		>=			
ANR	32908	Identifier	ref		32401	0					
ANR	32909	PrimaryExpression	0		32401	1					
ANR	32910	ExpressionStatement	"fill_rectangle ( & sl -> ref_cache [ list ] [ scan8 [ i ] ] , 2 , 2 , 8 , ( 16 + ref ) ^ ( h -> mb_y & 1 ) , 1 )"	95:28:2391:2521	32401	1	True				
ANR	32911	CallExpression	"fill_rectangle ( & sl -> ref_cache [ list ] [ scan8 [ i ] ] , 2 , 2 , 8 , ( 16 + ref ) ^ ( h -> mb_y & 1 ) , 1 )"		32401	0					
ANR	32912	Callee	fill_rectangle		32401	0					
ANR	32913	Identifier	fill_rectangle		32401	0					
ANR	32914	ArgumentList	& sl -> ref_cache [ list ] [ scan8 [ i ] ]		32401	1					
ANR	32915	Argument	& sl -> ref_cache [ list ] [ scan8 [ i ] ]		32401	0					
ANR	32916	UnaryOperationExpression	& sl -> ref_cache [ list ] [ scan8 [ i ] ]		32401	0					
ANR	32917	UnaryOperator	&		32401	0					
ANR	32918	ArrayIndexing	sl -> ref_cache [ list ] [ scan8 [ i ] ]		32401	1					
ANR	32919	ArrayIndexing	sl -> ref_cache [ list ]		32401	0					
ANR	32920	PtrMemberAccess	sl -> ref_cache		32401	0					
ANR	32921	Identifier	sl		32401	0					
ANR	32922	Identifier	ref_cache		32401	1					
ANR	32923	Identifier	list		32401	1					
ANR	32924	ArrayIndexing	scan8 [ i ]		32401	1					
ANR	32925	Identifier	scan8		32401	0					
ANR	32926	Identifier	i		32401	1					
ANR	32927	Argument	2		32401	1					
ANR	32928	PrimaryExpression	2		32401	0					
ANR	32929	Argument	2		32401	2					
ANR	32930	PrimaryExpression	2		32401	0					
ANR	32931	Argument	8		32401	3					
ANR	32932	PrimaryExpression	8		32401	0					
ANR	32933	Argument	( 16 + ref ) ^ ( h -> mb_y & 1 )		32401	4					
ANR	32934	ExclusiveOrExpression	( 16 + ref ) ^ ( h -> mb_y & 1 )		32401	0		^			
ANR	32935	AdditiveExpression	16 + ref		32401	0		+			
ANR	32936	PrimaryExpression	16		32401	0					
ANR	32937	Identifier	ref		32401	1					
ANR	32938	BitAndExpression	h -> mb_y & 1		32401	1		&			
ANR	32939	PtrMemberAccess	h -> mb_y		32401	0					
ANR	32940	Identifier	h		32401	0					
ANR	32941	Identifier	mb_y		32401	1					
ANR	32942	PrimaryExpression	1		32401	1					
ANR	32943	Argument	1		32401	5					
ANR	32944	PrimaryExpression	1		32401	0					
ANR	32945	ElseStatement	else		32401	0					
ANR	32946	CompoundStatement		105:11:2520:2520	32401	0					
ANR	32947	ExpressionStatement	linesize = sl -> mb_linesize = h -> linesize	109:8:2614:2658	32401	0	True				
ANR	32948	AssignmentExpression	linesize = sl -> mb_linesize = h -> linesize		32401	0		=			
ANR	32949	Identifier	linesize		32401	0					
ANR	32950	AssignmentExpression	sl -> mb_linesize = h -> linesize		32401	1		=			
ANR	32951	PtrMemberAccess	sl -> mb_linesize		32401	0					
ANR	32952	Identifier	sl		32401	0					
ANR	32953	Identifier	mb_linesize		32401	1					
ANR	32954	PtrMemberAccess	h -> linesize		32401	1					
ANR	32955	Identifier	h		32401	0					
ANR	32956	Identifier	linesize		32401	1					
ANR	32957	ExpressionStatement	uvlinesize = sl -> mb_uvlinesize = h -> uvlinesize	111:8:2669:2715	32401	1	True				
ANR	32958	AssignmentExpression	uvlinesize = sl -> mb_uvlinesize = h -> uvlinesize		32401	0		=			
ANR	32959	Identifier	uvlinesize		32401	0					
ANR	32960	AssignmentExpression	sl -> mb_uvlinesize = h -> uvlinesize		32401	1		=			
ANR	32961	PtrMemberAccess	sl -> mb_uvlinesize		32401	0					
ANR	32962	Identifier	sl		32401	0					
ANR	32963	Identifier	mb_uvlinesize		32401	1					
ANR	32964	PtrMemberAccess	h -> uvlinesize		32401	1					
ANR	32965	Identifier	h		32401	0					
ANR	32966	Identifier	uvlinesize		32401	1					
ANR	32967	IfStatement	if ( ! SIMPLE && IS_INTRA_PCM ( mb_type ) )		32401	20					
ANR	32968	Condition	! SIMPLE && IS_INTRA_PCM ( mb_type )	119:8:2778:2809	32401	0	True				
ANR	32969	AndExpression	! SIMPLE && IS_INTRA_PCM ( mb_type )		32401	0		&&			
ANR	32970	UnaryOperationExpression	! SIMPLE		32401	0					
ANR	32971	UnaryOperator	!		32401	0					
ANR	32972	Identifier	SIMPLE		32401	1					
ANR	32973	CallExpression	IS_INTRA_PCM ( mb_type )		32401	1					
ANR	32974	Callee	IS_INTRA_PCM		32401	0					
ANR	32975	Identifier	IS_INTRA_PCM		32401	0					
ANR	32976	ArgumentList	mb_type		32401	1					
ANR	32977	Argument	mb_type		32401	0					
ANR	32978	Identifier	mb_type		32401	0					
ANR	32979	CompoundStatement		117:42:2729:2729	32401	1					
ANR	32980	IfStatement	if ( PIXEL_SHIFT )		32401	0					
ANR	32981	Condition	PIXEL_SHIFT	121:12:2827:2837	32401	0	True				
ANR	32982	Identifier	PIXEL_SHIFT		32401	0					
ANR	32983	CompoundStatement		125:12:2850:2866	32401	1					
ANR	32984	IdentifierDeclStatement	const int bit_depth = h -> sps . bit_depth_luma ;	123:12:2855:2898	32401	0	True				
ANR	32985	IdentifierDecl	bit_depth = h -> sps . bit_depth_luma		32401	0					
ANR	32986	IdentifierDeclType	const int		32401	0					
ANR	32987	Identifier	bit_depth		32401	1					
ANR	32988	AssignmentExpression	bit_depth = h -> sps . bit_depth_luma		32401	2		=			
ANR	32989	Identifier	bit_depth		32401	0					
ANR	32990	MemberAccess	h -> sps . bit_depth_luma		32401	1					
ANR	32991	PtrMemberAccess	h -> sps		32401	0					
ANR	32992	Identifier	h		32401	0					
ANR	32993	Identifier	sps		32401	1					
ANR	32994	Identifier	bit_depth_luma		32401	1					
ANR	32995	IdentifierDeclStatement	int j ;	125:12:2913:2918	32401	1	True				
ANR	32996	IdentifierDecl	j		32401	0					
ANR	32997	IdentifierDeclType	int		32401	0					
ANR	32998	Identifier	j		32401	1					
ANR	32999	IdentifierDeclStatement	GetBitContext gb ;	127:12:2933:2949	32401	2	True				
ANR	33000	IdentifierDecl	gb		32401	0					
ANR	33001	IdentifierDeclType	GetBitContext		32401	0					
ANR	33002	Identifier	gb		32401	1					
ANR	33003	ExpressionStatement	"init_get_bits ( & gb , sl -> intra_pcm_ptr , ff_h264_mb_sizes [ h -> sps . chroma_format_idc ] * bit_depth )"	129:12:2964:3084	32401	3	True				
ANR	33004	CallExpression	"init_get_bits ( & gb , sl -> intra_pcm_ptr , ff_h264_mb_sizes [ h -> sps . chroma_format_idc ] * bit_depth )"		32401	0					
ANR	33005	Callee	init_get_bits		32401	0					
ANR	33006	Identifier	init_get_bits		32401	0					
ANR	33007	ArgumentList	& gb		32401	1					
ANR	33008	Argument	& gb		32401	0					
ANR	33009	UnaryOperationExpression	& gb		32401	0					
ANR	33010	UnaryOperator	&		32401	0					
ANR	33011	Identifier	gb		32401	1					
ANR	33012	Argument	sl -> intra_pcm_ptr		32401	1					
ANR	33013	PtrMemberAccess	sl -> intra_pcm_ptr		32401	0					
ANR	33014	Identifier	sl		32401	0					
ANR	33015	Identifier	intra_pcm_ptr		32401	1					
ANR	33016	Argument	ff_h264_mb_sizes [ h -> sps . chroma_format_idc ] * bit_depth		32401	2					
ANR	33017	MultiplicativeExpression	ff_h264_mb_sizes [ h -> sps . chroma_format_idc ] * bit_depth		32401	0		*			
ANR	33018	ArrayIndexing	ff_h264_mb_sizes [ h -> sps . chroma_format_idc ]		32401	0					
ANR	33019	Identifier	ff_h264_mb_sizes		32401	0					
ANR	33020	MemberAccess	h -> sps . chroma_format_idc		32401	1					
ANR	33021	PtrMemberAccess	h -> sps		32401	0					
ANR	33022	Identifier	h		32401	0					
ANR	33023	Identifier	sps		32401	1					
ANR	33024	Identifier	chroma_format_idc		32401	1					
ANR	33025	Identifier	bit_depth		32401	1					
ANR	33026	ForStatement	for ( i = 0 ; i < 16 ; i ++ )		32401	4					
ANR	33027	ForInit	i = 0 ;	135:17:3106:3111	32401	0	True				
ANR	33028	AssignmentExpression	i = 0		32401	0		=			
ANR	33029	Identifier	i		32401	0					
ANR	33030	PrimaryExpression	0		32401	1					
ANR	33031	Condition	i < 16	135:24:3113:3118	32401	1	True				
ANR	33032	RelationalExpression	i < 16		32401	0		<			
ANR	33033	Identifier	i		32401	0					
ANR	33034	PrimaryExpression	16		32401	1					
ANR	33035	PostIncDecOperationExpression	i ++	135:32:3121:3123	32401	2	True				
ANR	33036	Identifier	i		32401	0					
ANR	33037	IncDec	++		32401	1					
ANR	33038	CompoundStatement		135:16:3062:3115	32401	3					
ANR	33039	IdentifierDeclStatement	uint16_t * tmp_y = ( uint16_t * ) ( dest_y + i * linesize ) ;	137:16:3145:3198	32401	0	True				
ANR	33040	IdentifierDecl	* tmp_y = ( uint16_t * ) ( dest_y + i * linesize )		32401	0					
ANR	33041	IdentifierDeclType	uint16_t *		32401	0					
ANR	33042	Identifier	tmp_y		32401	1					
ANR	33043	AssignmentExpression	* tmp_y = ( uint16_t * ) ( dest_y + i * linesize )		32401	2		=			
ANR	33044	Identifier	tmp_y		32401	0					
ANR	33045	CastExpression	( uint16_t * ) ( dest_y + i * linesize )		32401	1					
ANR	33046	CastTarget	uint16_t *		32401	0					
ANR	33047	AdditiveExpression	dest_y + i * linesize		32401	1		+			
ANR	33048	Identifier	dest_y		32401	0					
ANR	33049	MultiplicativeExpression	i * linesize		32401	1		*			
ANR	33050	Identifier	i		32401	0					
ANR	33051	Identifier	linesize		32401	1					
ANR	33052	ForStatement	for ( j = 0 ; j < 16 ; j ++ )		32401	1					
ANR	33053	ForInit	j = 0 ;	139:21:3222:3227	32401	0	True				
ANR	33054	AssignmentExpression	j = 0		32401	0		=			
ANR	33055	Identifier	j		32401	0					
ANR	33056	PrimaryExpression	0		32401	1					
ANR	33057	Condition	j < 16	139:28:3229:3234	32401	1	True				
ANR	33058	RelationalExpression	j < 16		32401	0		<			
ANR	33059	Identifier	j		32401	0					
ANR	33060	PrimaryExpression	16		32401	1					
ANR	33061	PostIncDecOperationExpression	j ++	139:36:3237:3239	32401	2	True				
ANR	33062	Identifier	j		32401	0					
ANR	33063	IncDec	++		32401	1					
ANR	33064	ExpressionStatement	"tmp_y [ j ] = get_bits ( & gb , bit_depth )"	141:20:3263:3298	32401	3	True				
ANR	33065	AssignmentExpression	"tmp_y [ j ] = get_bits ( & gb , bit_depth )"		32401	0		=			
ANR	33066	ArrayIndexing	tmp_y [ j ]		32401	0					
ANR	33067	Identifier	tmp_y		32401	0					
ANR	33068	Identifier	j		32401	1					
ANR	33069	CallExpression	"get_bits ( & gb , bit_depth )"		32401	1					
ANR	33070	Callee	get_bits		32401	0					
ANR	33071	Identifier	get_bits		32401	0					
ANR	33072	ArgumentList	& gb		32401	1					
ANR	33073	Argument	& gb		32401	0					
ANR	33074	UnaryOperationExpression	& gb		32401	0					
ANR	33075	UnaryOperator	&		32401	0					
ANR	33076	Identifier	gb		32401	1					
ANR	33077	Argument	bit_depth		32401	1					
ANR	33078	Identifier	bit_depth		32401	0					
ANR	33079	IfStatement	if ( SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY ) )		32401	5					
ANR	33080	Condition	SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )	145:16:3332:3386	32401	0	True				
ANR	33081	OrExpression	SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )		32401	0		||			
ANR	33082	Identifier	SIMPLE		32401	0					
ANR	33083	OrExpression	! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )		32401	1		||			
ANR	33084	UnaryOperationExpression	! CONFIG_GRAY		32401	0					
ANR	33085	UnaryOperator	!		32401	0					
ANR	33086	Identifier	CONFIG_GRAY		32401	1					
ANR	33087	UnaryOperationExpression	! ( h -> flags & CODEC_FLAG_GRAY )		32401	1					
ANR	33088	UnaryOperator	!		32401	0					
ANR	33089	BitAndExpression	h -> flags & CODEC_FLAG_GRAY		32401	1		&			
ANR	33090	PtrMemberAccess	h -> flags		32401	0					
ANR	33091	Identifier	h		32401	0					
ANR	33092	Identifier	flags		32401	1					
ANR	33093	Identifier	CODEC_FLAG_GRAY		32401	1					
ANR	33094	CompoundStatement		143:73:3306:3306	32401	1					
ANR	33095	IfStatement	if ( ! h -> sps . chroma_format_idc )		32401	0					
ANR	33096	Condition	! h -> sps . chroma_format_idc	147:20:3412:3436	32401	0	True				
ANR	33097	UnaryOperationExpression	! h -> sps . chroma_format_idc		32401	0					
ANR	33098	UnaryOperator	!		32401	0					
ANR	33099	MemberAccess	h -> sps . chroma_format_idc		32401	1					
ANR	33100	PtrMemberAccess	h -> sps		32401	0					
ANR	33101	Identifier	h		32401	0					
ANR	33102	Identifier	sps		32401	1					
ANR	33103	Identifier	chroma_format_idc		32401	1					
ANR	33104	CompoundStatement		145:47:3356:3356	32401	1					
ANR	33105	ForStatement	for ( i = 0 ; i < block_h ; i ++ )		32401	0					
ANR	33106	ForInit	i = 0 ;	149:25:3467:3472	32401	0	True				
ANR	33107	AssignmentExpression	i = 0		32401	0		=			
ANR	33108	Identifier	i		32401	0					
ANR	33109	PrimaryExpression	0		32401	1					
ANR	33110	Condition	i < block_h	149:32:3474:3484	32401	1	True				
ANR	33111	RelationalExpression	i < block_h		32401	0		<			
ANR	33112	Identifier	i		32401	0					
ANR	33113	Identifier	block_h		32401	1					
ANR	33114	PostIncDecOperationExpression	i ++	149:45:3487:3489	32401	2	True				
ANR	33115	Identifier	i		32401	0					
ANR	33116	IncDec	++		32401	1					
ANR	33117	CompoundStatement		149:24:3436:3493	32401	3					
ANR	33118	IdentifierDeclStatement	uint16_t * tmp_cb = ( uint16_t * ) ( dest_cb + i * uvlinesize ) ;	151:24:3519:3576	32401	0	True				
ANR	33119	IdentifierDecl	* tmp_cb = ( uint16_t * ) ( dest_cb + i * uvlinesize )		32401	0					
ANR	33120	IdentifierDeclType	uint16_t *		32401	0					
ANR	33121	Identifier	tmp_cb		32401	1					
ANR	33122	AssignmentExpression	* tmp_cb = ( uint16_t * ) ( dest_cb + i * uvlinesize )		32401	2		=			
ANR	33123	Identifier	tmp_cb		32401	0					
ANR	33124	CastExpression	( uint16_t * ) ( dest_cb + i * uvlinesize )		32401	1					
ANR	33125	CastTarget	uint16_t *		32401	0					
ANR	33126	AdditiveExpression	dest_cb + i * uvlinesize		32401	1		+			
ANR	33127	Identifier	dest_cb		32401	0					
ANR	33128	MultiplicativeExpression	i * uvlinesize		32401	1		*			
ANR	33129	Identifier	i		32401	0					
ANR	33130	Identifier	uvlinesize		32401	1					
ANR	33131	ForStatement	for ( j = 0 ; j < 8 ; j ++ )		32401	1					
ANR	33132	ForInit	j = 0 ;	153:29:3608:3613	32401	0	True				
ANR	33133	AssignmentExpression	j = 0		32401	0		=			
ANR	33134	Identifier	j		32401	0					
ANR	33135	PrimaryExpression	0		32401	1					
ANR	33136	Condition	j < 8	153:36:3615:3619	32401	1	True				
ANR	33137	RelationalExpression	j < 8		32401	0		<			
ANR	33138	Identifier	j		32401	0					
ANR	33139	PrimaryExpression	8		32401	1					
ANR	33140	PostIncDecOperationExpression	j ++	153:43:3622:3624	32401	2	True				
ANR	33141	Identifier	j		32401	0					
ANR	33142	IncDec	++		32401	1					
ANR	33143	ExpressionStatement	tmp_cb [ j ] = 1 << ( bit_depth - 1 )	155:28:3656:3688	32401	3	True				
ANR	33144	AssignmentExpression	tmp_cb [ j ] = 1 << ( bit_depth - 1 )		32401	0		=			
ANR	33145	ArrayIndexing	tmp_cb [ j ]		32401	0					
ANR	33146	Identifier	tmp_cb		32401	0					
ANR	33147	Identifier	j		32401	1					
ANR	33148	ShiftExpression	1 << ( bit_depth - 1 )		32401	1		<<			
ANR	33149	PrimaryExpression	1		32401	0					
ANR	33150	AdditiveExpression	bit_depth - 1		32401	1		-			
ANR	33151	Identifier	bit_depth		32401	0					
ANR	33152	PrimaryExpression	1		32401	1					
ANR	33153	ForStatement	for ( i = 0 ; i < block_h ; i ++ )		32401	1					
ANR	33154	ForInit	i = 0 ;	159:25:3739:3744	32401	0	True				
ANR	33155	AssignmentExpression	i = 0		32401	0		=			
ANR	33156	Identifier	i		32401	0					
ANR	33157	PrimaryExpression	0		32401	1					
ANR	33158	Condition	i < block_h	159:32:3746:3756	32401	1	True				
ANR	33159	RelationalExpression	i < block_h		32401	0		<			
ANR	33160	Identifier	i		32401	0					
ANR	33161	Identifier	block_h		32401	1					
ANR	33162	PostIncDecOperationExpression	i ++	159:45:3759:3761	32401	2	True				
ANR	33163	Identifier	i		32401	0					
ANR	33164	IncDec	++		32401	1					
ANR	33165	CompoundStatement		159:24:3708:3765	32401	3					
ANR	33166	IdentifierDeclStatement	uint16_t * tmp_cr = ( uint16_t * ) ( dest_cr + i * uvlinesize ) ;	161:24:3791:3848	32401	0	True				
ANR	33167	IdentifierDecl	* tmp_cr = ( uint16_t * ) ( dest_cr + i * uvlinesize )		32401	0					
ANR	33168	IdentifierDeclType	uint16_t *		32401	0					
ANR	33169	Identifier	tmp_cr		32401	1					
ANR	33170	AssignmentExpression	* tmp_cr = ( uint16_t * ) ( dest_cr + i * uvlinesize )		32401	2		=			
ANR	33171	Identifier	tmp_cr		32401	0					
ANR	33172	CastExpression	( uint16_t * ) ( dest_cr + i * uvlinesize )		32401	1					
ANR	33173	CastTarget	uint16_t *		32401	0					
ANR	33174	AdditiveExpression	dest_cr + i * uvlinesize		32401	1		+			
ANR	33175	Identifier	dest_cr		32401	0					
ANR	33176	MultiplicativeExpression	i * uvlinesize		32401	1		*			
ANR	33177	Identifier	i		32401	0					
ANR	33178	Identifier	uvlinesize		32401	1					
ANR	33179	ForStatement	for ( j = 0 ; j < 8 ; j ++ )		32401	1					
ANR	33180	ForInit	j = 0 ;	163:29:3880:3885	32401	0	True				
ANR	33181	AssignmentExpression	j = 0		32401	0		=			
ANR	33182	Identifier	j		32401	0					
ANR	33183	PrimaryExpression	0		32401	1					
ANR	33184	Condition	j < 8	163:36:3887:3891	32401	1	True				
ANR	33185	RelationalExpression	j < 8		32401	0		<			
ANR	33186	Identifier	j		32401	0					
ANR	33187	PrimaryExpression	8		32401	1					
ANR	33188	PostIncDecOperationExpression	j ++	163:43:3894:3896	32401	2	True				
ANR	33189	Identifier	j		32401	0					
ANR	33190	IncDec	++		32401	1					
ANR	33191	ExpressionStatement	tmp_cr [ j ] = 1 << ( bit_depth - 1 )	165:28:3928:3960	32401	3	True				
ANR	33192	AssignmentExpression	tmp_cr [ j ] = 1 << ( bit_depth - 1 )		32401	0		=			
ANR	33193	ArrayIndexing	tmp_cr [ j ]		32401	0					
ANR	33194	Identifier	tmp_cr		32401	0					
ANR	33195	Identifier	j		32401	1					
ANR	33196	ShiftExpression	1 << ( bit_depth - 1 )		32401	1		<<			
ANR	33197	PrimaryExpression	1		32401	0					
ANR	33198	AdditiveExpression	bit_depth - 1		32401	1		-			
ANR	33199	Identifier	bit_depth		32401	0					
ANR	33200	PrimaryExpression	1		32401	1					
ANR	33201	ElseStatement	else		32401	0					
ANR	33202	CompoundStatement		167:23:3926:3926	32401	0					
ANR	33203	ForStatement	for ( i = 0 ; i < block_h ; i ++ )		32401	0					
ANR	33204	ForInit	i = 0 ;	171:25:4037:4042	32401	0	True				
ANR	33205	AssignmentExpression	i = 0		32401	0		=			
ANR	33206	Identifier	i		32401	0					
ANR	33207	PrimaryExpression	0		32401	1					
ANR	33208	Condition	i < block_h	171:32:4044:4054	32401	1	True				
ANR	33209	RelationalExpression	i < block_h		32401	0		<			
ANR	33210	Identifier	i		32401	0					
ANR	33211	Identifier	block_h		32401	1					
ANR	33212	PostIncDecOperationExpression	i ++	171:45:4057:4059	32401	2	True				
ANR	33213	Identifier	i		32401	0					
ANR	33214	IncDec	++		32401	1					
ANR	33215	CompoundStatement		171:24:4006:4063	32401	3					
ANR	33216	IdentifierDeclStatement	uint16_t * tmp_cb = ( uint16_t * ) ( dest_cb + i * uvlinesize ) ;	173:24:4089:4146	32401	0	True				
ANR	33217	IdentifierDecl	* tmp_cb = ( uint16_t * ) ( dest_cb + i * uvlinesize )		32401	0					
ANR	33218	IdentifierDeclType	uint16_t *		32401	0					
ANR	33219	Identifier	tmp_cb		32401	1					
ANR	33220	AssignmentExpression	* tmp_cb = ( uint16_t * ) ( dest_cb + i * uvlinesize )		32401	2		=			
ANR	33221	Identifier	tmp_cb		32401	0					
ANR	33222	CastExpression	( uint16_t * ) ( dest_cb + i * uvlinesize )		32401	1					
ANR	33223	CastTarget	uint16_t *		32401	0					
ANR	33224	AdditiveExpression	dest_cb + i * uvlinesize		32401	1		+			
ANR	33225	Identifier	dest_cb		32401	0					
ANR	33226	MultiplicativeExpression	i * uvlinesize		32401	1		*			
ANR	33227	Identifier	i		32401	0					
ANR	33228	Identifier	uvlinesize		32401	1					
ANR	33229	ForStatement	for ( j = 0 ; j < 8 ; j ++ )		32401	1					
ANR	33230	ForInit	j = 0 ;	175:29:4178:4183	32401	0	True				
ANR	33231	AssignmentExpression	j = 0		32401	0		=			
ANR	33232	Identifier	j		32401	0					
ANR	33233	PrimaryExpression	0		32401	1					
ANR	33234	Condition	j < 8	175:36:4185:4189	32401	1	True				
ANR	33235	RelationalExpression	j < 8		32401	0		<			
ANR	33236	Identifier	j		32401	0					
ANR	33237	PrimaryExpression	8		32401	1					
ANR	33238	PostIncDecOperationExpression	j ++	175:43:4192:4194	32401	2	True				
ANR	33239	Identifier	j		32401	0					
ANR	33240	IncDec	++		32401	1					
ANR	33241	ExpressionStatement	"tmp_cb [ j ] = get_bits ( & gb , bit_depth )"	177:28:4226:4262	32401	3	True				
ANR	33242	AssignmentExpression	"tmp_cb [ j ] = get_bits ( & gb , bit_depth )"		32401	0		=			
ANR	33243	ArrayIndexing	tmp_cb [ j ]		32401	0					
ANR	33244	Identifier	tmp_cb		32401	0					
ANR	33245	Identifier	j		32401	1					
ANR	33246	CallExpression	"get_bits ( & gb , bit_depth )"		32401	1					
ANR	33247	Callee	get_bits		32401	0					
ANR	33248	Identifier	get_bits		32401	0					
ANR	33249	ArgumentList	& gb		32401	1					
ANR	33250	Argument	& gb		32401	0					
ANR	33251	UnaryOperationExpression	& gb		32401	0					
ANR	33252	UnaryOperator	&		32401	0					
ANR	33253	Identifier	gb		32401	1					
ANR	33254	Argument	bit_depth		32401	1					
ANR	33255	Identifier	bit_depth		32401	0					
ANR	33256	ForStatement	for ( i = 0 ; i < block_h ; i ++ )		32401	1					
ANR	33257	ForInit	i = 0 ;	181:25:4313:4318	32401	0	True				
ANR	33258	AssignmentExpression	i = 0		32401	0		=			
ANR	33259	Identifier	i		32401	0					
ANR	33260	PrimaryExpression	0		32401	1					
ANR	33261	Condition	i < block_h	181:32:4320:4330	32401	1	True				
ANR	33262	RelationalExpression	i < block_h		32401	0		<			
ANR	33263	Identifier	i		32401	0					
ANR	33264	Identifier	block_h		32401	1					
ANR	33265	PostIncDecOperationExpression	i ++	181:45:4333:4335	32401	2	True				
ANR	33266	Identifier	i		32401	0					
ANR	33267	IncDec	++		32401	1					
ANR	33268	CompoundStatement		181:24:4282:4339	32401	3					
ANR	33269	IdentifierDeclStatement	uint16_t * tmp_cr = ( uint16_t * ) ( dest_cr + i * uvlinesize ) ;	183:24:4365:4422	32401	0	True				
ANR	33270	IdentifierDecl	* tmp_cr = ( uint16_t * ) ( dest_cr + i * uvlinesize )		32401	0					
ANR	33271	IdentifierDeclType	uint16_t *		32401	0					
ANR	33272	Identifier	tmp_cr		32401	1					
ANR	33273	AssignmentExpression	* tmp_cr = ( uint16_t * ) ( dest_cr + i * uvlinesize )		32401	2		=			
ANR	33274	Identifier	tmp_cr		32401	0					
ANR	33275	CastExpression	( uint16_t * ) ( dest_cr + i * uvlinesize )		32401	1					
ANR	33276	CastTarget	uint16_t *		32401	0					
ANR	33277	AdditiveExpression	dest_cr + i * uvlinesize		32401	1		+			
ANR	33278	Identifier	dest_cr		32401	0					
ANR	33279	MultiplicativeExpression	i * uvlinesize		32401	1		*			
ANR	33280	Identifier	i		32401	0					
ANR	33281	Identifier	uvlinesize		32401	1					
ANR	33282	ForStatement	for ( j = 0 ; j < 8 ; j ++ )		32401	1					
ANR	33283	ForInit	j = 0 ;	185:29:4454:4459	32401	0	True				
ANR	33284	AssignmentExpression	j = 0		32401	0		=			
ANR	33285	Identifier	j		32401	0					
ANR	33286	PrimaryExpression	0		32401	1					
ANR	33287	Condition	j < 8	185:36:4461:4465	32401	1	True				
ANR	33288	RelationalExpression	j < 8		32401	0		<			
ANR	33289	Identifier	j		32401	0					
ANR	33290	PrimaryExpression	8		32401	1					
ANR	33291	PostIncDecOperationExpression	j ++	185:43:4468:4470	32401	2	True				
ANR	33292	Identifier	j		32401	0					
ANR	33293	IncDec	++		32401	1					
ANR	33294	ExpressionStatement	"tmp_cr [ j ] = get_bits ( & gb , bit_depth )"	187:28:4502:4538	32401	3	True				
ANR	33295	AssignmentExpression	"tmp_cr [ j ] = get_bits ( & gb , bit_depth )"		32401	0		=			
ANR	33296	ArrayIndexing	tmp_cr [ j ]		32401	0					
ANR	33297	Identifier	tmp_cr		32401	0					
ANR	33298	Identifier	j		32401	1					
ANR	33299	CallExpression	"get_bits ( & gb , bit_depth )"		32401	1					
ANR	33300	Callee	get_bits		32401	0					
ANR	33301	Identifier	get_bits		32401	0					
ANR	33302	ArgumentList	& gb		32401	1					
ANR	33303	Argument	& gb		32401	0					
ANR	33304	UnaryOperationExpression	& gb		32401	0					
ANR	33305	UnaryOperator	&		32401	0					
ANR	33306	Identifier	gb		32401	1					
ANR	33307	Argument	bit_depth		32401	1					
ANR	33308	Identifier	bit_depth		32401	0					
ANR	33309	ElseStatement	else		32401	0					
ANR	33310	CompoundStatement		193:15:4530:4530	32401	0					
ANR	33311	ForStatement	for ( i = 0 ; i < 16 ; i ++ )		32401	0					
ANR	33312	ForInit	i = 0 ;	197:17:4633:4638	32401	0	True				
ANR	33313	AssignmentExpression	i = 0		32401	0		=			
ANR	33314	Identifier	i		32401	0					
ANR	33315	PrimaryExpression	0		32401	1					
ANR	33316	Condition	i < 16	197:24:4640:4645	32401	1	True				
ANR	33317	RelationalExpression	i < 16		32401	0		<			
ANR	33318	Identifier	i		32401	0					
ANR	33319	PrimaryExpression	16		32401	1					
ANR	33320	PostIncDecOperationExpression	i ++	197:32:4648:4650	32401	2	True				
ANR	33321	Identifier	i		32401	0					
ANR	33322	IncDec	++		32401	1					
ANR	33323	ExpressionStatement	"memcpy ( dest_y + i * linesize , sl -> intra_pcm_ptr + i * 16 , 16 )"	199:16:4670:4731	32401	3	True				
ANR	33324	CallExpression	"memcpy ( dest_y + i * linesize , sl -> intra_pcm_ptr + i * 16 , 16 )"		32401	0					
ANR	33325	Callee	memcpy		32401	0					
ANR	33326	Identifier	memcpy		32401	0					
ANR	33327	ArgumentList	dest_y + i * linesize		32401	1					
ANR	33328	Argument	dest_y + i * linesize		32401	0					
ANR	33329	AdditiveExpression	dest_y + i * linesize		32401	0		+			
ANR	33330	Identifier	dest_y		32401	0					
ANR	33331	MultiplicativeExpression	i * linesize		32401	1		*			
ANR	33332	Identifier	i		32401	0					
ANR	33333	Identifier	linesize		32401	1					
ANR	33334	Argument	sl -> intra_pcm_ptr + i * 16		32401	1					
ANR	33335	AdditiveExpression	sl -> intra_pcm_ptr + i * 16		32401	0		+			
ANR	33336	PtrMemberAccess	sl -> intra_pcm_ptr		32401	0					
ANR	33337	Identifier	sl		32401	0					
ANR	33338	Identifier	intra_pcm_ptr		32401	1					
ANR	33339	MultiplicativeExpression	i * 16		32401	1		*			
ANR	33340	Identifier	i		32401	0					
ANR	33341	PrimaryExpression	16		32401	1					
ANR	33342	Argument	16		32401	2					
ANR	33343	PrimaryExpression	16		32401	0					
ANR	33344	IfStatement	if ( SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY ) )		32401	1					
ANR	33345	Condition	SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )	201:16:4750:4804	32401	0	True				
ANR	33346	OrExpression	SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )		32401	0		||			
ANR	33347	Identifier	SIMPLE		32401	0					
ANR	33348	OrExpression	! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )		32401	1		||			
ANR	33349	UnaryOperationExpression	! CONFIG_GRAY		32401	0					
ANR	33350	UnaryOperator	!		32401	0					
ANR	33351	Identifier	CONFIG_GRAY		32401	1					
ANR	33352	UnaryOperationExpression	! ( h -> flags & CODEC_FLAG_GRAY )		32401	1					
ANR	33353	UnaryOperator	!		32401	0					
ANR	33354	BitAndExpression	h -> flags & CODEC_FLAG_GRAY		32401	1		&			
ANR	33355	PtrMemberAccess	h -> flags		32401	0					
ANR	33356	Identifier	h		32401	0					
ANR	33357	Identifier	flags		32401	1					
ANR	33358	Identifier	CODEC_FLAG_GRAY		32401	1					
ANR	33359	CompoundStatement		199:73:4724:4724	32401	1					
ANR	33360	IfStatement	if ( ! h -> sps . chroma_format_idc )		32401	0					
ANR	33361	Condition	! h -> sps . chroma_format_idc	203:20:4830:4854	32401	0	True				
ANR	33362	UnaryOperationExpression	! h -> sps . chroma_format_idc		32401	0					
ANR	33363	UnaryOperator	!		32401	0					
ANR	33364	MemberAccess	h -> sps . chroma_format_idc		32401	1					
ANR	33365	PtrMemberAccess	h -> sps		32401	0					
ANR	33366	Identifier	h		32401	0					
ANR	33367	Identifier	sps		32401	1					
ANR	33368	Identifier	chroma_format_idc		32401	1					
ANR	33369	CompoundStatement		201:47:4774:4774	32401	1					
ANR	33370	ForStatement	for ( i = 0 ; i < block_h ; i ++ )		32401	0					
ANR	33371	ForInit	i = 0 ;	205:25:4885:4890	32401	0	True				
ANR	33372	AssignmentExpression	i = 0		32401	0		=			
ANR	33373	Identifier	i		32401	0					
ANR	33374	PrimaryExpression	0		32401	1					
ANR	33375	Condition	i < block_h	205:32:4892:4902	32401	1	True				
ANR	33376	RelationalExpression	i < block_h		32401	0		<			
ANR	33377	Identifier	i		32401	0					
ANR	33378	Identifier	block_h		32401	1					
ANR	33379	PostIncDecOperationExpression	i ++	205:45:4905:4907	32401	2	True				
ANR	33380	Identifier	i		32401	0					
ANR	33381	IncDec	++		32401	1					
ANR	33382	CompoundStatement		203:50:4827:4827	32401	3					
ANR	33383	ExpressionStatement	"memset ( dest_cb + i * uvlinesize , 128 , 8 )"	207:24:4937:4977	32401	0	True				
ANR	33384	CallExpression	"memset ( dest_cb + i * uvlinesize , 128 , 8 )"		32401	0					
ANR	33385	Callee	memset		32401	0					
ANR	33386	Identifier	memset		32401	0					
ANR	33387	ArgumentList	dest_cb + i * uvlinesize		32401	1					
ANR	33388	Argument	dest_cb + i * uvlinesize		32401	0					
ANR	33389	AdditiveExpression	dest_cb + i * uvlinesize		32401	0		+			
ANR	33390	Identifier	dest_cb		32401	0					
ANR	33391	MultiplicativeExpression	i * uvlinesize		32401	1		*			
ANR	33392	Identifier	i		32401	0					
ANR	33393	Identifier	uvlinesize		32401	1					
ANR	33394	Argument	128		32401	1					
ANR	33395	PrimaryExpression	128		32401	0					
ANR	33396	Argument	8		32401	2					
ANR	33397	PrimaryExpression	8		32401	0					
ANR	33398	ExpressionStatement	"memset ( dest_cr + i * uvlinesize , 128 , 8 )"	209:24:5004:5044	32401	1	True				
ANR	33399	CallExpression	"memset ( dest_cr + i * uvlinesize , 128 , 8 )"		32401	0					
ANR	33400	Callee	memset		32401	0					
ANR	33401	Identifier	memset		32401	0					
ANR	33402	ArgumentList	dest_cr + i * uvlinesize		32401	1					
ANR	33403	Argument	dest_cr + i * uvlinesize		32401	0					
ANR	33404	AdditiveExpression	dest_cr + i * uvlinesize		32401	0		+			
ANR	33405	Identifier	dest_cr		32401	0					
ANR	33406	MultiplicativeExpression	i * uvlinesize		32401	1		*			
ANR	33407	Identifier	i		32401	0					
ANR	33408	Identifier	uvlinesize		32401	1					
ANR	33409	Argument	128		32401	1					
ANR	33410	PrimaryExpression	128		32401	0					
ANR	33411	Argument	8		32401	2					
ANR	33412	PrimaryExpression	8		32401	0					
ANR	33413	ElseStatement	else		32401	0					
ANR	33414	CompoundStatement		215:20:5103:5164	32401	0					
ANR	33415	IdentifierDeclStatement	const uint8_t * src_cb = sl -> intra_pcm_ptr + 256 ;	215:20:5116:5163	32401	0	True				
ANR	33416	IdentifierDecl	* src_cb = sl -> intra_pcm_ptr + 256		32401	0					
ANR	33417	IdentifierDeclType	const uint8_t *		32401	0					
ANR	33418	Identifier	src_cb		32401	1					
ANR	33419	AssignmentExpression	* src_cb = sl -> intra_pcm_ptr + 256		32401	2		=			
ANR	33420	Identifier	src_cb		32401	0					
ANR	33421	AdditiveExpression	sl -> intra_pcm_ptr + 256		32401	1		+			
ANR	33422	PtrMemberAccess	sl -> intra_pcm_ptr		32401	0					
ANR	33423	Identifier	sl		32401	0					
ANR	33424	Identifier	intra_pcm_ptr		32401	1					
ANR	33425	PrimaryExpression	256		32401	1					
ANR	33426	IdentifierDeclStatement	const uint8_t * src_cr = sl -> intra_pcm_ptr + 256 + block_h * 8 ;	217:20:5186:5247	32401	1	True				
ANR	33427	IdentifierDecl	* src_cr = sl -> intra_pcm_ptr + 256 + block_h * 8		32401	0					
ANR	33428	IdentifierDeclType	const uint8_t *		32401	0					
ANR	33429	Identifier	src_cr		32401	1					
ANR	33430	AssignmentExpression	* src_cr = sl -> intra_pcm_ptr + 256 + block_h * 8		32401	2		=			
ANR	33431	Identifier	src_cr		32401	0					
ANR	33432	AdditiveExpression	sl -> intra_pcm_ptr + 256 + block_h * 8		32401	1		+			
ANR	33433	PtrMemberAccess	sl -> intra_pcm_ptr		32401	0					
ANR	33434	Identifier	sl		32401	0					
ANR	33435	Identifier	intra_pcm_ptr		32401	1					
ANR	33436	AdditiveExpression	256 + block_h * 8		32401	1		+			
ANR	33437	PrimaryExpression	256		32401	0					
ANR	33438	MultiplicativeExpression	block_h * 8		32401	1		*			
ANR	33439	Identifier	block_h		32401	0					
ANR	33440	PrimaryExpression	8		32401	1					
ANR	33441	ForStatement	for ( i = 0 ; i < block_h ; i ++ )		32401	2					
ANR	33442	ForInit	i = 0 ;	219:25:5275:5280	32401	0	True				
ANR	33443	AssignmentExpression	i = 0		32401	0		=			
ANR	33444	Identifier	i		32401	0					
ANR	33445	PrimaryExpression	0		32401	1					
ANR	33446	Condition	i < block_h	219:32:5282:5292	32401	1	True				
ANR	33447	RelationalExpression	i < block_h		32401	0		<			
ANR	33448	Identifier	i		32401	0					
ANR	33449	Identifier	block_h		32401	1					
ANR	33450	PostIncDecOperationExpression	i ++	219:45:5295:5297	32401	2	True				
ANR	33451	Identifier	i		32401	0					
ANR	33452	IncDec	++		32401	1					
ANR	33453	CompoundStatement		217:50:5217:5217	32401	3					
ANR	33454	ExpressionStatement	"memcpy ( dest_cb + i * uvlinesize , src_cb + i * 8 , 8 )"	221:24:5327:5378	32401	0	True				
ANR	33455	CallExpression	"memcpy ( dest_cb + i * uvlinesize , src_cb + i * 8 , 8 )"		32401	0					
ANR	33456	Callee	memcpy		32401	0					
ANR	33457	Identifier	memcpy		32401	0					
ANR	33458	ArgumentList	dest_cb + i * uvlinesize		32401	1					
ANR	33459	Argument	dest_cb + i * uvlinesize		32401	0					
ANR	33460	AdditiveExpression	dest_cb + i * uvlinesize		32401	0		+			
ANR	33461	Identifier	dest_cb		32401	0					
ANR	33462	MultiplicativeExpression	i * uvlinesize		32401	1		*			
ANR	33463	Identifier	i		32401	0					
ANR	33464	Identifier	uvlinesize		32401	1					
ANR	33465	Argument	src_cb + i * 8		32401	1					
ANR	33466	AdditiveExpression	src_cb + i * 8		32401	0		+			
ANR	33467	Identifier	src_cb		32401	0					
ANR	33468	MultiplicativeExpression	i * 8		32401	1		*			
ANR	33469	Identifier	i		32401	0					
ANR	33470	PrimaryExpression	8		32401	1					
ANR	33471	Argument	8		32401	2					
ANR	33472	PrimaryExpression	8		32401	0					
ANR	33473	ExpressionStatement	"memcpy ( dest_cr + i * uvlinesize , src_cr + i * 8 , 8 )"	223:24:5405:5456	32401	1	True				
ANR	33474	CallExpression	"memcpy ( dest_cr + i * uvlinesize , src_cr + i * 8 , 8 )"		32401	0					
ANR	33475	Callee	memcpy		32401	0					
ANR	33476	Identifier	memcpy		32401	0					
ANR	33477	ArgumentList	dest_cr + i * uvlinesize		32401	1					
ANR	33478	Argument	dest_cr + i * uvlinesize		32401	0					
ANR	33479	AdditiveExpression	dest_cr + i * uvlinesize		32401	0		+			
ANR	33480	Identifier	dest_cr		32401	0					
ANR	33481	MultiplicativeExpression	i * uvlinesize		32401	1		*			
ANR	33482	Identifier	i		32401	0					
ANR	33483	Identifier	uvlinesize		32401	1					
ANR	33484	Argument	src_cr + i * 8		32401	1					
ANR	33485	AdditiveExpression	src_cr + i * 8		32401	0		+			
ANR	33486	Identifier	src_cr		32401	0					
ANR	33487	MultiplicativeExpression	i * 8		32401	1		*			
ANR	33488	Identifier	i		32401	0					
ANR	33489	PrimaryExpression	8		32401	1					
ANR	33490	Argument	8		32401	2					
ANR	33491	PrimaryExpression	8		32401	0					
ANR	33492	ElseStatement	else		32401	0					
ANR	33493	CompoundStatement		231:11:5455:5455	32401	0					
ANR	33494	IfStatement	if ( IS_INTRA ( mb_type ) )		32401	0					
ANR	33495	Condition	IS_INTRA ( mb_type )	235:12:5553:5569	32401	0	True				
ANR	33496	CallExpression	IS_INTRA ( mb_type )		32401	0					
ANR	33497	Callee	IS_INTRA		32401	0					
ANR	33498	Identifier	IS_INTRA		32401	0					
ANR	33499	ArgumentList	mb_type		32401	1					
ANR	33500	Argument	mb_type		32401	0					
ANR	33501	Identifier	mb_type		32401	0					
ANR	33502	CompoundStatement		233:31:5489:5489	32401	1					
ANR	33503	IfStatement	if ( h -> deblocking_filter )		32401	0					
ANR	33504	Condition	h -> deblocking_filter	237:16:5591:5610	32401	0	True				
ANR	33505	PtrMemberAccess	h -> deblocking_filter		32401	0					
ANR	33506	Identifier	h		32401	0					
ANR	33507	Identifier	deblocking_filter		32401	1					
ANR	33508	ExpressionStatement	"xchg_mb_border ( h , sl , dest_y , dest_cb , dest_cr , linesize , uvlinesize , 1 , 0 , SIMPLE , PIXEL_SHIFT )"	239:16:5630:5758	32401	1	True				
ANR	33509	CallExpression	"xchg_mb_border ( h , sl , dest_y , dest_cb , dest_cr , linesize , uvlinesize , 1 , 0 , SIMPLE , PIXEL_SHIFT )"		32401	0					
ANR	33510	Callee	xchg_mb_border		32401	0					
ANR	33511	Identifier	xchg_mb_border		32401	0					
ANR	33512	ArgumentList	h		32401	1					
ANR	33513	Argument	h		32401	0					
ANR	33514	Identifier	h		32401	0					
ANR	33515	Argument	sl		32401	1					
ANR	33516	Identifier	sl		32401	0					
ANR	33517	Argument	dest_y		32401	2					
ANR	33518	Identifier	dest_y		32401	0					
ANR	33519	Argument	dest_cb		32401	3					
ANR	33520	Identifier	dest_cb		32401	0					
ANR	33521	Argument	dest_cr		32401	4					
ANR	33522	Identifier	dest_cr		32401	0					
ANR	33523	Argument	linesize		32401	5					
ANR	33524	Identifier	linesize		32401	0					
ANR	33525	Argument	uvlinesize		32401	6					
ANR	33526	Identifier	uvlinesize		32401	0					
ANR	33527	Argument	1		32401	7					
ANR	33528	PrimaryExpression	1		32401	0					
ANR	33529	Argument	0		32401	8					
ANR	33530	PrimaryExpression	0		32401	0					
ANR	33531	Argument	SIMPLE		32401	9					
ANR	33532	Identifier	SIMPLE		32401	0					
ANR	33533	Argument	PIXEL_SHIFT		32401	10					
ANR	33534	Identifier	PIXEL_SHIFT		32401	0					
ANR	33535	IfStatement	if ( SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY ) )		32401	1					
ANR	33536	Condition	SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )	245:16:5779:5833	32401	0	True				
ANR	33537	OrExpression	SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )		32401	0		||			
ANR	33538	Identifier	SIMPLE		32401	0					
ANR	33539	OrExpression	! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )		32401	1		||			
ANR	33540	UnaryOperationExpression	! CONFIG_GRAY		32401	0					
ANR	33541	UnaryOperator	!		32401	0					
ANR	33542	Identifier	CONFIG_GRAY		32401	1					
ANR	33543	UnaryOperationExpression	! ( h -> flags & CODEC_FLAG_GRAY )		32401	1					
ANR	33544	UnaryOperator	!		32401	0					
ANR	33545	BitAndExpression	h -> flags & CODEC_FLAG_GRAY		32401	1		&			
ANR	33546	PtrMemberAccess	h -> flags		32401	0					
ANR	33547	Identifier	h		32401	0					
ANR	33548	Identifier	flags		32401	1					
ANR	33549	Identifier	CODEC_FLAG_GRAY		32401	1					
ANR	33550	CompoundStatement		243:73:5753:5753	32401	1					
ANR	33551	ExpressionStatement	"h -> hpc . pred8x8 [ sl -> chroma_pred_mode ] ( dest_cb , uvlinesize )"	247:16:5855:5912	32401	0	True				
ANR	33552	CallExpression	"h -> hpc . pred8x8 [ sl -> chroma_pred_mode ] ( dest_cb , uvlinesize )"		32401	0					
ANR	33553	Callee	h -> hpc . pred8x8 [ sl -> chroma_pred_mode ]		32401	0					
ANR	33554	ArrayIndexing	h -> hpc . pred8x8 [ sl -> chroma_pred_mode ]		32401	0					
ANR	33555	MemberAccess	h -> hpc . pred8x8		32401	0					
ANR	33556	PtrMemberAccess	h -> hpc		32401	0					
ANR	33557	Identifier	h		32401	0					
ANR	33558	Identifier	hpc		32401	1					
ANR	33559	Identifier	pred8x8		32401	1					
ANR	33560	PtrMemberAccess	sl -> chroma_pred_mode		32401	1					
ANR	33561	Identifier	sl		32401	0					
ANR	33562	Identifier	chroma_pred_mode		32401	1					
ANR	33563	ArgumentList	dest_cb		32401	1					
ANR	33564	Argument	dest_cb		32401	0					
ANR	33565	Identifier	dest_cb		32401	0					
ANR	33566	Argument	uvlinesize		32401	1					
ANR	33567	Identifier	uvlinesize		32401	0					
ANR	33568	ExpressionStatement	"h -> hpc . pred8x8 [ sl -> chroma_pred_mode ] ( dest_cr , uvlinesize )"	249:16:5931:5988	32401	1	True				
ANR	33569	CallExpression	"h -> hpc . pred8x8 [ sl -> chroma_pred_mode ] ( dest_cr , uvlinesize )"		32401	0					
ANR	33570	Callee	h -> hpc . pred8x8 [ sl -> chroma_pred_mode ]		32401	0					
ANR	33571	ArrayIndexing	h -> hpc . pred8x8 [ sl -> chroma_pred_mode ]		32401	0					
ANR	33572	MemberAccess	h -> hpc . pred8x8		32401	0					
ANR	33573	PtrMemberAccess	h -> hpc		32401	0					
ANR	33574	Identifier	h		32401	0					
ANR	33575	Identifier	hpc		32401	1					
ANR	33576	Identifier	pred8x8		32401	1					
ANR	33577	PtrMemberAccess	sl -> chroma_pred_mode		32401	1					
ANR	33578	Identifier	sl		32401	0					
ANR	33579	Identifier	chroma_pred_mode		32401	1					
ANR	33580	ArgumentList	dest_cr		32401	1					
ANR	33581	Argument	dest_cr		32401	0					
ANR	33582	Identifier	dest_cr		32401	0					
ANR	33583	Argument	uvlinesize		32401	1					
ANR	33584	Identifier	uvlinesize		32401	0					
ANR	33585	ExpressionStatement	"hl_decode_mb_predict_luma ( h , sl , mb_type , is_h264 , SIMPLE , transform_bypass , PIXEL_SHIFT , block_offset , linesize , dest_y , 0 )"	255:12:6020:6222	32401	2	True				
ANR	33586	CallExpression	"hl_decode_mb_predict_luma ( h , sl , mb_type , is_h264 , SIMPLE , transform_bypass , PIXEL_SHIFT , block_offset , linesize , dest_y , 0 )"		32401	0					
ANR	33587	Callee	hl_decode_mb_predict_luma		32401	0					
ANR	33588	Identifier	hl_decode_mb_predict_luma		32401	0					
ANR	33589	ArgumentList	h		32401	1					
ANR	33590	Argument	h		32401	0					
ANR	33591	Identifier	h		32401	0					
ANR	33592	Argument	sl		32401	1					
ANR	33593	Identifier	sl		32401	0					
ANR	33594	Argument	mb_type		32401	2					
ANR	33595	Identifier	mb_type		32401	0					
ANR	33596	Argument	is_h264		32401	3					
ANR	33597	Identifier	is_h264		32401	0					
ANR	33598	Argument	SIMPLE		32401	4					
ANR	33599	Identifier	SIMPLE		32401	0					
ANR	33600	Argument	transform_bypass		32401	5					
ANR	33601	Identifier	transform_bypass		32401	0					
ANR	33602	Argument	PIXEL_SHIFT		32401	6					
ANR	33603	Identifier	PIXEL_SHIFT		32401	0					
ANR	33604	Argument	block_offset		32401	7					
ANR	33605	Identifier	block_offset		32401	0					
ANR	33606	Argument	linesize		32401	8					
ANR	33607	Identifier	linesize		32401	0					
ANR	33608	Argument	dest_y		32401	9					
ANR	33609	Identifier	dest_y		32401	0					
ANR	33610	Argument	0		32401	10					
ANR	33611	PrimaryExpression	0		32401	0					
ANR	33612	IfStatement	if ( h -> deblocking_filter )		32401	3					
ANR	33613	Condition	h -> deblocking_filter	263:16:6243:6262	32401	0	True				
ANR	33614	PtrMemberAccess	h -> deblocking_filter		32401	0					
ANR	33615	Identifier	h		32401	0					
ANR	33616	Identifier	deblocking_filter		32401	1					
ANR	33617	ExpressionStatement	"xchg_mb_border ( h , sl , dest_y , dest_cb , dest_cr , linesize , uvlinesize , 0 , 0 , SIMPLE , PIXEL_SHIFT )"	265:16:6282:6410	32401	1	True				
ANR	33618	CallExpression	"xchg_mb_border ( h , sl , dest_y , dest_cb , dest_cr , linesize , uvlinesize , 0 , 0 , SIMPLE , PIXEL_SHIFT )"		32401	0					
ANR	33619	Callee	xchg_mb_border		32401	0					
ANR	33620	Identifier	xchg_mb_border		32401	0					
ANR	33621	ArgumentList	h		32401	1					
ANR	33622	Argument	h		32401	0					
ANR	33623	Identifier	h		32401	0					
ANR	33624	Argument	sl		32401	1					
ANR	33625	Identifier	sl		32401	0					
ANR	33626	Argument	dest_y		32401	2					
ANR	33627	Identifier	dest_y		32401	0					
ANR	33628	Argument	dest_cb		32401	3					
ANR	33629	Identifier	dest_cb		32401	0					
ANR	33630	Argument	dest_cr		32401	4					
ANR	33631	Identifier	dest_cr		32401	0					
ANR	33632	Argument	linesize		32401	5					
ANR	33633	Identifier	linesize		32401	0					
ANR	33634	Argument	uvlinesize		32401	6					
ANR	33635	Identifier	uvlinesize		32401	0					
ANR	33636	Argument	0		32401	7					
ANR	33637	PrimaryExpression	0		32401	0					
ANR	33638	Argument	0		32401	8					
ANR	33639	PrimaryExpression	0		32401	0					
ANR	33640	Argument	SIMPLE		32401	9					
ANR	33641	Identifier	SIMPLE		32401	0					
ANR	33642	Argument	PIXEL_SHIFT		32401	10					
ANR	33643	Identifier	PIXEL_SHIFT		32401	0					
ANR	33644	ElseStatement	else		32401	0					
ANR	33645	IfStatement	if ( is_h264 )		32401	0					
ANR	33646	Condition	is_h264	269:19:6432:6438	32401	0	True				
ANR	33647	Identifier	is_h264		32401	0					
ANR	33648	CompoundStatement		267:28:6358:6358	32401	1					
ANR	33649	IfStatement	if ( chroma422 )		32401	0					
ANR	33650	Condition	chroma422	271:16:6460:6468	32401	0	True				
ANR	33651	Identifier	chroma422		32401	0					
ANR	33652	CompoundStatement		269:27:6388:6388	32401	1					
ANR	33653	ExpressionStatement	"FUNC ( hl_motion_422 ) ( h , sl , dest_y , dest_cb , dest_cr , h -> qpel_put , h -> h264chroma . put_h264_chroma_pixels_tab , h -> qpel_avg , h -> h264chroma . avg_h264_chroma_pixels_tab , h -> h264dsp . weight_h264_pixels_tab , h -> h264dsp . biweight_h264_pixels_tab )"	273:16:6490:6848	32401	0	True				
ANR	33654	CallExpression	"FUNC ( hl_motion_422 ) ( h , sl , dest_y , dest_cb , dest_cr , h -> qpel_put , h -> h264chroma . put_h264_chroma_pixels_tab , h -> qpel_avg , h -> h264chroma . avg_h264_chroma_pixels_tab , h -> h264dsp . weight_h264_pixels_tab , h -> h264dsp . biweight_h264_pixels_tab )"		32401	0					
ANR	33655	Callee	FUNC ( hl_motion_422 )		32401	0					
ANR	33656	CallExpression	FUNC ( hl_motion_422 )		32401	0					
ANR	33657	Callee	FUNC		32401	0					
ANR	33658	Identifier	FUNC		32401	0					
ANR	33659	ArgumentList	hl_motion_422		32401	1					
ANR	33660	Argument	hl_motion_422		32401	0					
ANR	33661	Identifier	hl_motion_422		32401	0					
ANR	33662	ArgumentList	h		32401	1					
ANR	33663	Argument	h		32401	0					
ANR	33664	Identifier	h		32401	0					
ANR	33665	Argument	sl		32401	1					
ANR	33666	Identifier	sl		32401	0					
ANR	33667	Argument	dest_y		32401	2					
ANR	33668	Identifier	dest_y		32401	0					
ANR	33669	Argument	dest_cb		32401	3					
ANR	33670	Identifier	dest_cb		32401	0					
ANR	33671	Argument	dest_cr		32401	4					
ANR	33672	Identifier	dest_cr		32401	0					
ANR	33673	Argument	h -> qpel_put		32401	5					
ANR	33674	PtrMemberAccess	h -> qpel_put		32401	0					
ANR	33675	Identifier	h		32401	0					
ANR	33676	Identifier	qpel_put		32401	1					
ANR	33677	Argument	h -> h264chroma . put_h264_chroma_pixels_tab		32401	6					
ANR	33678	MemberAccess	h -> h264chroma . put_h264_chroma_pixels_tab		32401	0					
ANR	33679	PtrMemberAccess	h -> h264chroma		32401	0					
ANR	33680	Identifier	h		32401	0					
ANR	33681	Identifier	h264chroma		32401	1					
ANR	33682	Identifier	put_h264_chroma_pixels_tab		32401	1					
ANR	33683	Argument	h -> qpel_avg		32401	7					
ANR	33684	PtrMemberAccess	h -> qpel_avg		32401	0					
ANR	33685	Identifier	h		32401	0					
ANR	33686	Identifier	qpel_avg		32401	1					
ANR	33687	Argument	h -> h264chroma . avg_h264_chroma_pixels_tab		32401	8					
ANR	33688	MemberAccess	h -> h264chroma . avg_h264_chroma_pixels_tab		32401	0					
ANR	33689	PtrMemberAccess	h -> h264chroma		32401	0					
ANR	33690	Identifier	h		32401	0					
ANR	33691	Identifier	h264chroma		32401	1					
ANR	33692	Identifier	avg_h264_chroma_pixels_tab		32401	1					
ANR	33693	Argument	h -> h264dsp . weight_h264_pixels_tab		32401	9					
ANR	33694	MemberAccess	h -> h264dsp . weight_h264_pixels_tab		32401	0					
ANR	33695	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	33696	Identifier	h		32401	0					
ANR	33697	Identifier	h264dsp		32401	1					
ANR	33698	Identifier	weight_h264_pixels_tab		32401	1					
ANR	33699	Argument	h -> h264dsp . biweight_h264_pixels_tab		32401	10					
ANR	33700	MemberAccess	h -> h264dsp . biweight_h264_pixels_tab		32401	0					
ANR	33701	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	33702	Identifier	h		32401	0					
ANR	33703	Identifier	h264dsp		32401	1					
ANR	33704	Identifier	biweight_h264_pixels_tab		32401	1					
ANR	33705	ElseStatement	else		32401	0					
ANR	33706	CompoundStatement		281:19:6787:6787	32401	0					
ANR	33707	ExpressionStatement	"FUNC ( hl_motion_420 ) ( h , sl , dest_y , dest_cb , dest_cr , h -> qpel_put , h -> h264chroma . put_h264_chroma_pixels_tab , h -> qpel_avg , h -> h264chroma . avg_h264_chroma_pixels_tab , h -> h264dsp . weight_h264_pixels_tab , h -> h264dsp . biweight_h264_pixels_tab )"	285:16:6889:7247	32401	0	True				
ANR	33708	CallExpression	"FUNC ( hl_motion_420 ) ( h , sl , dest_y , dest_cb , dest_cr , h -> qpel_put , h -> h264chroma . put_h264_chroma_pixels_tab , h -> qpel_avg , h -> h264chroma . avg_h264_chroma_pixels_tab , h -> h264dsp . weight_h264_pixels_tab , h -> h264dsp . biweight_h264_pixels_tab )"		32401	0					
ANR	33709	Callee	FUNC ( hl_motion_420 )		32401	0					
ANR	33710	CallExpression	FUNC ( hl_motion_420 )		32401	0					
ANR	33711	Callee	FUNC		32401	0					
ANR	33712	Identifier	FUNC		32401	0					
ANR	33713	ArgumentList	hl_motion_420		32401	1					
ANR	33714	Argument	hl_motion_420		32401	0					
ANR	33715	Identifier	hl_motion_420		32401	0					
ANR	33716	ArgumentList	h		32401	1					
ANR	33717	Argument	h		32401	0					
ANR	33718	Identifier	h		32401	0					
ANR	33719	Argument	sl		32401	1					
ANR	33720	Identifier	sl		32401	0					
ANR	33721	Argument	dest_y		32401	2					
ANR	33722	Identifier	dest_y		32401	0					
ANR	33723	Argument	dest_cb		32401	3					
ANR	33724	Identifier	dest_cb		32401	0					
ANR	33725	Argument	dest_cr		32401	4					
ANR	33726	Identifier	dest_cr		32401	0					
ANR	33727	Argument	h -> qpel_put		32401	5					
ANR	33728	PtrMemberAccess	h -> qpel_put		32401	0					
ANR	33729	Identifier	h		32401	0					
ANR	33730	Identifier	qpel_put		32401	1					
ANR	33731	Argument	h -> h264chroma . put_h264_chroma_pixels_tab		32401	6					
ANR	33732	MemberAccess	h -> h264chroma . put_h264_chroma_pixels_tab		32401	0					
ANR	33733	PtrMemberAccess	h -> h264chroma		32401	0					
ANR	33734	Identifier	h		32401	0					
ANR	33735	Identifier	h264chroma		32401	1					
ANR	33736	Identifier	put_h264_chroma_pixels_tab		32401	1					
ANR	33737	Argument	h -> qpel_avg		32401	7					
ANR	33738	PtrMemberAccess	h -> qpel_avg		32401	0					
ANR	33739	Identifier	h		32401	0					
ANR	33740	Identifier	qpel_avg		32401	1					
ANR	33741	Argument	h -> h264chroma . avg_h264_chroma_pixels_tab		32401	8					
ANR	33742	MemberAccess	h -> h264chroma . avg_h264_chroma_pixels_tab		32401	0					
ANR	33743	PtrMemberAccess	h -> h264chroma		32401	0					
ANR	33744	Identifier	h		32401	0					
ANR	33745	Identifier	h264chroma		32401	1					
ANR	33746	Identifier	avg_h264_chroma_pixels_tab		32401	1					
ANR	33747	Argument	h -> h264dsp . weight_h264_pixels_tab		32401	9					
ANR	33748	MemberAccess	h -> h264dsp . weight_h264_pixels_tab		32401	0					
ANR	33749	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	33750	Identifier	h		32401	0					
ANR	33751	Identifier	h264dsp		32401	1					
ANR	33752	Identifier	weight_h264_pixels_tab		32401	1					
ANR	33753	Argument	h -> h264dsp . biweight_h264_pixels_tab		32401	10					
ANR	33754	MemberAccess	h -> h264dsp . biweight_h264_pixels_tab		32401	0					
ANR	33755	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	33756	Identifier	h		32401	0					
ANR	33757	Identifier	h264dsp		32401	1					
ANR	33758	Identifier	biweight_h264_pixels_tab		32401	1					
ANR	33759	ExpressionStatement	"hl_decode_mb_idct_luma ( h , sl , mb_type , is_h264 , SIMPLE , transform_bypass , PIXEL_SHIFT , block_offset , linesize , dest_y , 0 )"	301:8:7286:7439	32401	1	True				
ANR	33760	CallExpression	"hl_decode_mb_idct_luma ( h , sl , mb_type , is_h264 , SIMPLE , transform_bypass , PIXEL_SHIFT , block_offset , linesize , dest_y , 0 )"		32401	0					
ANR	33761	Callee	hl_decode_mb_idct_luma		32401	0					
ANR	33762	Identifier	hl_decode_mb_idct_luma		32401	0					
ANR	33763	ArgumentList	h		32401	1					
ANR	33764	Argument	h		32401	0					
ANR	33765	Identifier	h		32401	0					
ANR	33766	Argument	sl		32401	1					
ANR	33767	Identifier	sl		32401	0					
ANR	33768	Argument	mb_type		32401	2					
ANR	33769	Identifier	mb_type		32401	0					
ANR	33770	Argument	is_h264		32401	3					
ANR	33771	Identifier	is_h264		32401	0					
ANR	33772	Argument	SIMPLE		32401	4					
ANR	33773	Identifier	SIMPLE		32401	0					
ANR	33774	Argument	transform_bypass		32401	5					
ANR	33775	Identifier	transform_bypass		32401	0					
ANR	33776	Argument	PIXEL_SHIFT		32401	6					
ANR	33777	Identifier	PIXEL_SHIFT		32401	0					
ANR	33778	Argument	block_offset		32401	7					
ANR	33779	Identifier	block_offset		32401	0					
ANR	33780	Argument	linesize		32401	8					
ANR	33781	Identifier	linesize		32401	0					
ANR	33782	Argument	dest_y		32401	9					
ANR	33783	Identifier	dest_y		32401	0					
ANR	33784	Argument	0		32401	10					
ANR	33785	PrimaryExpression	0		32401	0					
ANR	33786	IfStatement	if ( ( SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY ) ) && ( sl -> cbp & 0x30 ) )		32401	2					
ANR	33787	Condition	( SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY ) ) && ( sl -> cbp & 0x30 )	307:12:7456:7545	32401	0	True				
ANR	33788	AndExpression	( SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY ) ) && ( sl -> cbp & 0x30 )		32401	0		&&			
ANR	33789	OrExpression	SIMPLE || ! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )		32401	0		||			
ANR	33790	Identifier	SIMPLE		32401	0					
ANR	33791	OrExpression	! CONFIG_GRAY || ! ( h -> flags & CODEC_FLAG_GRAY )		32401	1		||			
ANR	33792	UnaryOperationExpression	! CONFIG_GRAY		32401	0					
ANR	33793	UnaryOperator	!		32401	0					
ANR	33794	Identifier	CONFIG_GRAY		32401	1					
ANR	33795	UnaryOperationExpression	! ( h -> flags & CODEC_FLAG_GRAY )		32401	1					
ANR	33796	UnaryOperator	!		32401	0					
ANR	33797	BitAndExpression	h -> flags & CODEC_FLAG_GRAY		32401	1		&			
ANR	33798	PtrMemberAccess	h -> flags		32401	0					
ANR	33799	Identifier	h		32401	0					
ANR	33800	Identifier	flags		32401	1					
ANR	33801	Identifier	CODEC_FLAG_GRAY		32401	1					
ANR	33802	BitAndExpression	sl -> cbp & 0x30		32401	1		&			
ANR	33803	PtrMemberAccess	sl -> cbp		32401	0					
ANR	33804	Identifier	sl		32401	0					
ANR	33805	Identifier	cbp		32401	1					
ANR	33806	PrimaryExpression	0x30		32401	1					
ANR	33807	CompoundStatement		309:12:7480:7519	32401	1					
ANR	33808	IdentifierDeclStatement	"uint8_t * dest [ 2 ] = { dest_cb , dest_cr } ;"	311:12:7563:7602	32401	0	True				
ANR	33809	IdentifierDecl	"* dest [ 2 ] = { dest_cb , dest_cr }"		32401	0					
ANR	33810	IdentifierDeclType	uint8_t * [ 2 ]		32401	0					
ANR	33811	Identifier	dest		32401	1					
ANR	33812	PrimaryExpression	2		32401	2					
ANR	33813	AssignmentExpression	"* dest [ 2 ] = { dest_cb , dest_cr }"		32401	3		=			
ANR	33814	Identifier	dest		32401	0					
ANR	33815	InitializerList	dest_cb		32401	1					
ANR	33816	Identifier	dest_cb		32401	0					
ANR	33817	Identifier	dest_cr		32401	1					
ANR	33818	IfStatement	if ( transform_bypass )		32401	1					
ANR	33819	Condition	transform_bypass	313:16:7621:7636	32401	0	True				
ANR	33820	Identifier	transform_bypass		32401	0					
ANR	33821	CompoundStatement		311:34:7556:7556	32401	1					
ANR	33822	IfStatement	if ( IS_INTRA ( mb_type ) && h -> sps . profile_idc == 244 && ( sl -> chroma_pred_mode == VERT_PRED8x8 || sl -> chroma_pred_mode == HOR_PRED8x8 ) )		32401	0					
ANR	33823	Condition	IS_INTRA ( mb_type ) && h -> sps . profile_idc == 244 && ( sl -> chroma_pred_mode == VERT_PRED8x8 || sl -> chroma_pred_mode == HOR_PRED8x8 )	315:20:7662:7831	32401	0	True				
ANR	33824	AndExpression	IS_INTRA ( mb_type ) && h -> sps . profile_idc == 244 && ( sl -> chroma_pred_mode == VERT_PRED8x8 || sl -> chroma_pred_mode == HOR_PRED8x8 )		32401	0		&&			
ANR	33825	CallExpression	IS_INTRA ( mb_type )		32401	0					
ANR	33826	Callee	IS_INTRA		32401	0					
ANR	33827	Identifier	IS_INTRA		32401	0					
ANR	33828	ArgumentList	mb_type		32401	1					
ANR	33829	Argument	mb_type		32401	0					
ANR	33830	Identifier	mb_type		32401	0					
ANR	33831	AndExpression	h -> sps . profile_idc == 244 && ( sl -> chroma_pred_mode == VERT_PRED8x8 || sl -> chroma_pred_mode == HOR_PRED8x8 )		32401	1		&&			
ANR	33832	EqualityExpression	h -> sps . profile_idc == 244		32401	0		==			
ANR	33833	MemberAccess	h -> sps . profile_idc		32401	0					
ANR	33834	PtrMemberAccess	h -> sps		32401	0					
ANR	33835	Identifier	h		32401	0					
ANR	33836	Identifier	sps		32401	1					
ANR	33837	Identifier	profile_idc		32401	1					
ANR	33838	PrimaryExpression	244		32401	1					
ANR	33839	OrExpression	sl -> chroma_pred_mode == VERT_PRED8x8 || sl -> chroma_pred_mode == HOR_PRED8x8		32401	1		||			
ANR	33840	EqualityExpression	sl -> chroma_pred_mode == VERT_PRED8x8		32401	0		==			
ANR	33841	PtrMemberAccess	sl -> chroma_pred_mode		32401	0					
ANR	33842	Identifier	sl		32401	0					
ANR	33843	Identifier	chroma_pred_mode		32401	1					
ANR	33844	Identifier	VERT_PRED8x8		32401	1					
ANR	33845	EqualityExpression	sl -> chroma_pred_mode == HOR_PRED8x8		32401	1		==			
ANR	33846	PtrMemberAccess	sl -> chroma_pred_mode		32401	0					
ANR	33847	Identifier	sl		32401	0					
ANR	33848	Identifier	chroma_pred_mode		32401	1					
ANR	33849	Identifier	HOR_PRED8x8		32401	1					
ANR	33850	CompoundStatement		317:59:7751:7751	32401	1					
ANR	33851	ExpressionStatement	"h -> hpc . pred8x8_add [ sl -> chroma_pred_mode ] ( dest [ 0 ] , block_offset + 16 , sl -> mb + ( 16 * 16 * 1 << PIXEL_SHIFT ) , uvlinesize )"	321:20:7857:8159	32401	0	True				
ANR	33852	CallExpression	"h -> hpc . pred8x8_add [ sl -> chroma_pred_mode ] ( dest [ 0 ] , block_offset + 16 , sl -> mb + ( 16 * 16 * 1 << PIXEL_SHIFT ) , uvlinesize )"		32401	0					
ANR	33853	Callee	h -> hpc . pred8x8_add [ sl -> chroma_pred_mode ]		32401	0					
ANR	33854	ArrayIndexing	h -> hpc . pred8x8_add [ sl -> chroma_pred_mode ]		32401	0					
ANR	33855	MemberAccess	h -> hpc . pred8x8_add		32401	0					
ANR	33856	PtrMemberAccess	h -> hpc		32401	0					
ANR	33857	Identifier	h		32401	0					
ANR	33858	Identifier	hpc		32401	1					
ANR	33859	Identifier	pred8x8_add		32401	1					
ANR	33860	PtrMemberAccess	sl -> chroma_pred_mode		32401	1					
ANR	33861	Identifier	sl		32401	0					
ANR	33862	Identifier	chroma_pred_mode		32401	1					
ANR	33863	ArgumentList	dest [ 0 ]		32401	1					
ANR	33864	Argument	dest [ 0 ]		32401	0					
ANR	33865	ArrayIndexing	dest [ 0 ]		32401	0					
ANR	33866	Identifier	dest		32401	0					
ANR	33867	PrimaryExpression	0		32401	1					
ANR	33868	Argument	block_offset + 16		32401	1					
ANR	33869	AdditiveExpression	block_offset + 16		32401	0		+			
ANR	33870	Identifier	block_offset		32401	0					
ANR	33871	PrimaryExpression	16		32401	1					
ANR	33872	Argument	sl -> mb + ( 16 * 16 * 1 << PIXEL_SHIFT )		32401	2					
ANR	33873	AdditiveExpression	sl -> mb + ( 16 * 16 * 1 << PIXEL_SHIFT )		32401	0		+			
ANR	33874	PtrMemberAccess	sl -> mb		32401	0					
ANR	33875	Identifier	sl		32401	0					
ANR	33876	Identifier	mb		32401	1					
ANR	33877	ShiftExpression	16 * 16 * 1 << PIXEL_SHIFT		32401	1		<<			
ANR	33878	MultiplicativeExpression	16 * 16 * 1		32401	0		*			
ANR	33879	PrimaryExpression	16		32401	0					
ANR	33880	MultiplicativeExpression	16 * 1		32401	1		*			
ANR	33881	PrimaryExpression	16		32401	0					
ANR	33882	PrimaryExpression	1		32401	1					
ANR	33883	Identifier	PIXEL_SHIFT		32401	1					
ANR	33884	Argument	uvlinesize		32401	3					
ANR	33885	Identifier	uvlinesize		32401	0					
ANR	33886	ExpressionStatement	"h -> hpc . pred8x8_add [ sl -> chroma_pred_mode ] ( dest [ 1 ] , block_offset + 32 , sl -> mb + ( 16 * 16 * 2 << PIXEL_SHIFT ) , uvlinesize )"	329:20:8182:8484	32401	1	True				
ANR	33887	CallExpression	"h -> hpc . pred8x8_add [ sl -> chroma_pred_mode ] ( dest [ 1 ] , block_offset + 32 , sl -> mb + ( 16 * 16 * 2 << PIXEL_SHIFT ) , uvlinesize )"		32401	0					
ANR	33888	Callee	h -> hpc . pred8x8_add [ sl -> chroma_pred_mode ]		32401	0					
ANR	33889	ArrayIndexing	h -> hpc . pred8x8_add [ sl -> chroma_pred_mode ]		32401	0					
ANR	33890	MemberAccess	h -> hpc . pred8x8_add		32401	0					
ANR	33891	PtrMemberAccess	h -> hpc		32401	0					
ANR	33892	Identifier	h		32401	0					
ANR	33893	Identifier	hpc		32401	1					
ANR	33894	Identifier	pred8x8_add		32401	1					
ANR	33895	PtrMemberAccess	sl -> chroma_pred_mode		32401	1					
ANR	33896	Identifier	sl		32401	0					
ANR	33897	Identifier	chroma_pred_mode		32401	1					
ANR	33898	ArgumentList	dest [ 1 ]		32401	1					
ANR	33899	Argument	dest [ 1 ]		32401	0					
ANR	33900	ArrayIndexing	dest [ 1 ]		32401	0					
ANR	33901	Identifier	dest		32401	0					
ANR	33902	PrimaryExpression	1		32401	1					
ANR	33903	Argument	block_offset + 32		32401	1					
ANR	33904	AdditiveExpression	block_offset + 32		32401	0		+			
ANR	33905	Identifier	block_offset		32401	0					
ANR	33906	PrimaryExpression	32		32401	1					
ANR	33907	Argument	sl -> mb + ( 16 * 16 * 2 << PIXEL_SHIFT )		32401	2					
ANR	33908	AdditiveExpression	sl -> mb + ( 16 * 16 * 2 << PIXEL_SHIFT )		32401	0		+			
ANR	33909	PtrMemberAccess	sl -> mb		32401	0					
ANR	33910	Identifier	sl		32401	0					
ANR	33911	Identifier	mb		32401	1					
ANR	33912	ShiftExpression	16 * 16 * 2 << PIXEL_SHIFT		32401	1		<<			
ANR	33913	MultiplicativeExpression	16 * 16 * 2		32401	0		*			
ANR	33914	PrimaryExpression	16		32401	0					
ANR	33915	MultiplicativeExpression	16 * 2		32401	1		*			
ANR	33916	PrimaryExpression	16		32401	0					
ANR	33917	PrimaryExpression	2		32401	1					
ANR	33918	Identifier	PIXEL_SHIFT		32401	1					
ANR	33919	Argument	uvlinesize		32401	3					
ANR	33920	Identifier	uvlinesize		32401	0					
ANR	33921	ElseStatement	else		32401	0					
ANR	33922	CompoundStatement		335:23:8427:8427	32401	0					
ANR	33923	ExpressionStatement	idct_add = h -> h264dsp . h264_add_pixels4_clear	339:20:8533:8577	32401	0	True				
ANR	33924	AssignmentExpression	idct_add = h -> h264dsp . h264_add_pixels4_clear		32401	0		=			
ANR	33925	Identifier	idct_add		32401	0					
ANR	33926	MemberAccess	h -> h264dsp . h264_add_pixels4_clear		32401	1					
ANR	33927	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	33928	Identifier	h		32401	0					
ANR	33929	Identifier	h264dsp		32401	1					
ANR	33930	Identifier	h264_add_pixels4_clear		32401	1					
ANR	33931	ForStatement	for ( j = 1 ; j < 3 ; j ++ )		32401	1					
ANR	33932	ForInit	j = 1 ;	341:25:8605:8610	32401	0	True				
ANR	33933	AssignmentExpression	j = 1		32401	0		=			
ANR	33934	Identifier	j		32401	0					
ANR	33935	PrimaryExpression	1		32401	1					
ANR	33936	Condition	j < 3	341:32:8612:8616	32401	1	True				
ANR	33937	RelationalExpression	j < 3		32401	0		<			
ANR	33938	Identifier	j		32401	0					
ANR	33939	PrimaryExpression	3		32401	1					
ANR	33940	PostIncDecOperationExpression	j ++	341:39:8619:8621	32401	2	True				
ANR	33941	Identifier	j		32401	0					
ANR	33942	IncDec	++		32401	1					
ANR	33943	CompoundStatement		339:44:8541:8541	32401	3					
ANR	33944	ForStatement	for ( i = j * 16 ; i < j * 16 + 4 ; i ++ )		32401	0					
ANR	33945	ForInit	i = j * 16 ;	343:29:8656:8666	32401	0	True				
ANR	33946	AssignmentExpression	i = j * 16		32401	0		=			
ANR	33947	Identifier	i		32401	0					
ANR	33948	MultiplicativeExpression	j * 16		32401	1		*			
ANR	33949	Identifier	j		32401	0					
ANR	33950	PrimaryExpression	16		32401	1					
ANR	33951	Condition	i < j * 16 + 4	343:41:8668:8681	32401	1	True				
ANR	33952	RelationalExpression	i < j * 16 + 4		32401	0		<			
ANR	33953	Identifier	i		32401	0					
ANR	33954	AdditiveExpression	j * 16 + 4		32401	1		+			
ANR	33955	MultiplicativeExpression	j * 16		32401	0		*			
ANR	33956	Identifier	j		32401	0					
ANR	33957	PrimaryExpression	16		32401	1					
ANR	33958	PrimaryExpression	4		32401	1					
ANR	33959	PostIncDecOperationExpression	i ++	343:57:8684:8686	32401	2	True				
ANR	33960	Identifier	i		32401	0					
ANR	33961	IncDec	++		32401	1					
ANR	33962	IfStatement	"if ( sl -> non_zero_count_cache [ scan8 [ i ] ] || dctcoef_get ( sl -> mb , PIXEL_SHIFT , i * 16 ) )"		32401	3					
ANR	33963	Condition	"sl -> non_zero_count_cache [ scan8 [ i ] ] || dctcoef_get ( sl -> mb , PIXEL_SHIFT , i * 16 )"	345:32:8722:8832	32401	0	True				
ANR	33964	OrExpression	"sl -> non_zero_count_cache [ scan8 [ i ] ] || dctcoef_get ( sl -> mb , PIXEL_SHIFT , i * 16 )"		32401	0		||			
ANR	33965	ArrayIndexing	sl -> non_zero_count_cache [ scan8 [ i ] ]		32401	0					
ANR	33966	PtrMemberAccess	sl -> non_zero_count_cache		32401	0					
ANR	33967	Identifier	sl		32401	0					
ANR	33968	Identifier	non_zero_count_cache		32401	1					
ANR	33969	ArrayIndexing	scan8 [ i ]		32401	1					
ANR	33970	Identifier	scan8		32401	0					
ANR	33971	Identifier	i		32401	1					
ANR	33972	CallExpression	"dctcoef_get ( sl -> mb , PIXEL_SHIFT , i * 16 )"		32401	1					
ANR	33973	Callee	dctcoef_get		32401	0					
ANR	33974	Identifier	dctcoef_get		32401	0					
ANR	33975	ArgumentList	sl -> mb		32401	1					
ANR	33976	Argument	sl -> mb		32401	0					
ANR	33977	PtrMemberAccess	sl -> mb		32401	0					
ANR	33978	Identifier	sl		32401	0					
ANR	33979	Identifier	mb		32401	1					
ANR	33980	Argument	PIXEL_SHIFT		32401	1					
ANR	33981	Identifier	PIXEL_SHIFT		32401	0					
ANR	33982	Argument	i * 16		32401	2					
ANR	33983	MultiplicativeExpression	i * 16		32401	0		*			
ANR	33984	Identifier	i		32401	0					
ANR	33985	PrimaryExpression	16		32401	1					
ANR	33986	ExpressionStatement	"idct_add ( dest [ j - 1 ] + block_offset [ i ] , sl -> mb + ( i * 16 << PIXEL_SHIFT ) , uvlinesize )"	349:32:8868:9037	32401	1	True				
ANR	33987	CallExpression	"idct_add ( dest [ j - 1 ] + block_offset [ i ] , sl -> mb + ( i * 16 << PIXEL_SHIFT ) , uvlinesize )"		32401	0					
ANR	33988	Callee	idct_add		32401	0					
ANR	33989	Identifier	idct_add		32401	0					
ANR	33990	ArgumentList	dest [ j - 1 ] + block_offset [ i ]		32401	1					
ANR	33991	Argument	dest [ j - 1 ] + block_offset [ i ]		32401	0					
ANR	33992	AdditiveExpression	dest [ j - 1 ] + block_offset [ i ]		32401	0		+			
ANR	33993	ArrayIndexing	dest [ j - 1 ]		32401	0					
ANR	33994	Identifier	dest		32401	0					
ANR	33995	AdditiveExpression	j - 1		32401	1		-			
ANR	33996	Identifier	j		32401	0					
ANR	33997	PrimaryExpression	1		32401	1					
ANR	33998	ArrayIndexing	block_offset [ i ]		32401	1					
ANR	33999	Identifier	block_offset		32401	0					
ANR	34000	Identifier	i		32401	1					
ANR	34001	Argument	sl -> mb + ( i * 16 << PIXEL_SHIFT )		32401	1					
ANR	34002	AdditiveExpression	sl -> mb + ( i * 16 << PIXEL_SHIFT )		32401	0		+			
ANR	34003	PtrMemberAccess	sl -> mb		32401	0					
ANR	34004	Identifier	sl		32401	0					
ANR	34005	Identifier	mb		32401	1					
ANR	34006	ShiftExpression	i * 16 << PIXEL_SHIFT		32401	1		<<			
ANR	34007	MultiplicativeExpression	i * 16		32401	0		*			
ANR	34008	Identifier	i		32401	0					
ANR	34009	PrimaryExpression	16		32401	1					
ANR	34010	Identifier	PIXEL_SHIFT		32401	1					
ANR	34011	Argument	uvlinesize		32401	2					
ANR	34012	Identifier	uvlinesize		32401	0					
ANR	34013	IfStatement	if ( chroma422 )		32401	1					
ANR	34014	Condition	chroma422	355:28:9068:9076	32401	0	True				
ANR	34015	Identifier	chroma422		32401	0					
ANR	34016	CompoundStatement		353:39:8996:8996	32401	1					
ANR	34017	ForStatement	for ( i = j * 16 + 4 ; i < j * 16 + 8 ; i ++ )		32401	0					
ANR	34018	ForInit	i = j * 16 + 4 ;	357:33:9115:9129	32401	0	True				
ANR	34019	AssignmentExpression	i = j * 16 + 4		32401	0		=			
ANR	34020	Identifier	i		32401	0					
ANR	34021	AdditiveExpression	j * 16 + 4		32401	1		+			
ANR	34022	MultiplicativeExpression	j * 16		32401	0		*			
ANR	34023	Identifier	j		32401	0					
ANR	34024	PrimaryExpression	16		32401	1					
ANR	34025	PrimaryExpression	4		32401	1					
ANR	34026	Condition	i < j * 16 + 8	357:49:9131:9144	32401	1	True				
ANR	34027	RelationalExpression	i < j * 16 + 8		32401	0		<			
ANR	34028	Identifier	i		32401	0					
ANR	34029	AdditiveExpression	j * 16 + 8		32401	1		+			
ANR	34030	MultiplicativeExpression	j * 16		32401	0		*			
ANR	34031	Identifier	j		32401	0					
ANR	34032	PrimaryExpression	16		32401	1					
ANR	34033	PrimaryExpression	8		32401	1					
ANR	34034	PostIncDecOperationExpression	i ++	357:65:9147:9149	32401	2	True				
ANR	34035	Identifier	i		32401	0					
ANR	34036	IncDec	++		32401	1					
ANR	34037	IfStatement	"if ( sl -> non_zero_count_cache [ scan8 [ i + 4 ] ] || dctcoef_get ( sl -> mb , PIXEL_SHIFT , i * 16 ) )"		32401	3					
ANR	34038	Condition	"sl -> non_zero_count_cache [ scan8 [ i + 4 ] ] || dctcoef_get ( sl -> mb , PIXEL_SHIFT , i * 16 )"	359:36:9189:9307	32401	0	True				
ANR	34039	OrExpression	"sl -> non_zero_count_cache [ scan8 [ i + 4 ] ] || dctcoef_get ( sl -> mb , PIXEL_SHIFT , i * 16 )"		32401	0		||			
ANR	34040	ArrayIndexing	sl -> non_zero_count_cache [ scan8 [ i + 4 ] ]		32401	0					
ANR	34041	PtrMemberAccess	sl -> non_zero_count_cache		32401	0					
ANR	34042	Identifier	sl		32401	0					
ANR	34043	Identifier	non_zero_count_cache		32401	1					
ANR	34044	ArrayIndexing	scan8 [ i + 4 ]		32401	1					
ANR	34045	Identifier	scan8		32401	0					
ANR	34046	AdditiveExpression	i + 4		32401	1		+			
ANR	34047	Identifier	i		32401	0					
ANR	34048	PrimaryExpression	4		32401	1					
ANR	34049	CallExpression	"dctcoef_get ( sl -> mb , PIXEL_SHIFT , i * 16 )"		32401	1					
ANR	34050	Callee	dctcoef_get		32401	0					
ANR	34051	Identifier	dctcoef_get		32401	0					
ANR	34052	ArgumentList	sl -> mb		32401	1					
ANR	34053	Argument	sl -> mb		32401	0					
ANR	34054	PtrMemberAccess	sl -> mb		32401	0					
ANR	34055	Identifier	sl		32401	0					
ANR	34056	Identifier	mb		32401	1					
ANR	34057	Argument	PIXEL_SHIFT		32401	1					
ANR	34058	Identifier	PIXEL_SHIFT		32401	0					
ANR	34059	Argument	i * 16		32401	2					
ANR	34060	MultiplicativeExpression	i * 16		32401	0		*			
ANR	34061	Identifier	i		32401	0					
ANR	34062	PrimaryExpression	16		32401	1					
ANR	34063	ExpressionStatement	"idct_add ( dest [ j - 1 ] + block_offset [ i + 4 ] , sl -> mb + ( i * 16 << PIXEL_SHIFT ) , uvlinesize )"	363:36:9347:9528	32401	1	True				
ANR	34064	CallExpression	"idct_add ( dest [ j - 1 ] + block_offset [ i + 4 ] , sl -> mb + ( i * 16 << PIXEL_SHIFT ) , uvlinesize )"		32401	0					
ANR	34065	Callee	idct_add		32401	0					
ANR	34066	Identifier	idct_add		32401	0					
ANR	34067	ArgumentList	dest [ j - 1 ] + block_offset [ i + 4 ]		32401	1					
ANR	34068	Argument	dest [ j - 1 ] + block_offset [ i + 4 ]		32401	0					
ANR	34069	AdditiveExpression	dest [ j - 1 ] + block_offset [ i + 4 ]		32401	0		+			
ANR	34070	ArrayIndexing	dest [ j - 1 ]		32401	0					
ANR	34071	Identifier	dest		32401	0					
ANR	34072	AdditiveExpression	j - 1		32401	1		-			
ANR	34073	Identifier	j		32401	0					
ANR	34074	PrimaryExpression	1		32401	1					
ANR	34075	ArrayIndexing	block_offset [ i + 4 ]		32401	1					
ANR	34076	Identifier	block_offset		32401	0					
ANR	34077	AdditiveExpression	i + 4		32401	1		+			
ANR	34078	Identifier	i		32401	0					
ANR	34079	PrimaryExpression	4		32401	1					
ANR	34080	Argument	sl -> mb + ( i * 16 << PIXEL_SHIFT )		32401	1					
ANR	34081	AdditiveExpression	sl -> mb + ( i * 16 << PIXEL_SHIFT )		32401	0		+			
ANR	34082	PtrMemberAccess	sl -> mb		32401	0					
ANR	34083	Identifier	sl		32401	0					
ANR	34084	Identifier	mb		32401	1					
ANR	34085	ShiftExpression	i * 16 << PIXEL_SHIFT		32401	1		<<			
ANR	34086	MultiplicativeExpression	i * 16		32401	0		*			
ANR	34087	Identifier	i		32401	0					
ANR	34088	PrimaryExpression	16		32401	1					
ANR	34089	Identifier	PIXEL_SHIFT		32401	1					
ANR	34090	Argument	uvlinesize		32401	2					
ANR	34091	Identifier	uvlinesize		32401	0					
ANR	34092	ElseStatement	else		32401	0					
ANR	34093	CompoundStatement		373:19:9536:9536	32401	0					
ANR	34094	IfStatement	if ( is_h264 )		32401	0					
ANR	34095	Condition	is_h264	377:20:9642:9648	32401	0	True				
ANR	34096	Identifier	is_h264		32401	0					
ANR	34097	CompoundStatement		377:20:9591:9600	32401	1					
ANR	34098	IdentifierDeclStatement	int qp [ 2 ] ;	379:20:9674:9683	32401	0	True				
ANR	34099	IdentifierDecl	qp [ 2 ]		32401	0					
ANR	34100	IdentifierDeclType	int [ 2 ]		32401	0					
ANR	34101	Identifier	qp		32401	1					
ANR	34102	PrimaryExpression	2		32401	2					
ANR	34103	IfStatement	if ( chroma422 )		32401	1					
ANR	34104	Condition	chroma422	381:24:9710:9718	32401	0	True				
ANR	34105	Identifier	chroma422		32401	0					
ANR	34106	CompoundStatement		379:35:9638:9638	32401	1					
ANR	34107	ExpressionStatement	qp [ 0 ] = sl -> chroma_qp [ 0 ] + 3	383:24:9748:9776	32401	0	True				
ANR	34108	AssignmentExpression	qp [ 0 ] = sl -> chroma_qp [ 0 ] + 3		32401	0		=			
ANR	34109	ArrayIndexing	qp [ 0 ]		32401	0					
ANR	34110	Identifier	qp		32401	0					
ANR	34111	PrimaryExpression	0		32401	1					
ANR	34112	AdditiveExpression	sl -> chroma_qp [ 0 ] + 3		32401	1		+			
ANR	34113	ArrayIndexing	sl -> chroma_qp [ 0 ]		32401	0					
ANR	34114	PtrMemberAccess	sl -> chroma_qp		32401	0					
ANR	34115	Identifier	sl		32401	0					
ANR	34116	Identifier	chroma_qp		32401	1					
ANR	34117	PrimaryExpression	0		32401	1					
ANR	34118	PrimaryExpression	3		32401	1					
ANR	34119	ExpressionStatement	qp [ 1 ] = sl -> chroma_qp [ 1 ] + 3	385:24:9803:9831	32401	1	True				
ANR	34120	AssignmentExpression	qp [ 1 ] = sl -> chroma_qp [ 1 ] + 3		32401	0		=			
ANR	34121	ArrayIndexing	qp [ 1 ]		32401	0					
ANR	34122	Identifier	qp		32401	0					
ANR	34123	PrimaryExpression	1		32401	1					
ANR	34124	AdditiveExpression	sl -> chroma_qp [ 1 ] + 3		32401	1		+			
ANR	34125	ArrayIndexing	sl -> chroma_qp [ 1 ]		32401	0					
ANR	34126	PtrMemberAccess	sl -> chroma_qp		32401	0					
ANR	34127	Identifier	sl		32401	0					
ANR	34128	Identifier	chroma_qp		32401	1					
ANR	34129	PrimaryExpression	1		32401	1					
ANR	34130	PrimaryExpression	3		32401	1					
ANR	34131	ElseStatement	else		32401	0					
ANR	34132	CompoundStatement		385:27:9778:9778	32401	0					
ANR	34133	ExpressionStatement	qp [ 0 ] = sl -> chroma_qp [ 0 ]	389:24:9888:9912	32401	0	True				
ANR	34134	AssignmentExpression	qp [ 0 ] = sl -> chroma_qp [ 0 ]		32401	0		=			
ANR	34135	ArrayIndexing	qp [ 0 ]		32401	0					
ANR	34136	Identifier	qp		32401	0					
ANR	34137	PrimaryExpression	0		32401	1					
ANR	34138	ArrayIndexing	sl -> chroma_qp [ 0 ]		32401	1					
ANR	34139	PtrMemberAccess	sl -> chroma_qp		32401	0					
ANR	34140	Identifier	sl		32401	0					
ANR	34141	Identifier	chroma_qp		32401	1					
ANR	34142	PrimaryExpression	0		32401	1					
ANR	34143	ExpressionStatement	qp [ 1 ] = sl -> chroma_qp [ 1 ]	391:24:9939:9963	32401	1	True				
ANR	34144	AssignmentExpression	qp [ 1 ] = sl -> chroma_qp [ 1 ]		32401	0		=			
ANR	34145	ArrayIndexing	qp [ 1 ]		32401	0					
ANR	34146	Identifier	qp		32401	0					
ANR	34147	PrimaryExpression	1		32401	1					
ANR	34148	ArrayIndexing	sl -> chroma_qp [ 1 ]		32401	1					
ANR	34149	PtrMemberAccess	sl -> chroma_qp		32401	0					
ANR	34150	Identifier	sl		32401	0					
ANR	34151	Identifier	chroma_qp		32401	1					
ANR	34152	PrimaryExpression	1		32401	1					
ANR	34153	IfStatement	if ( sl -> non_zero_count_cache [ scan8 [ CHROMA_DC_BLOCK_INDEX + 0 ] ] )		32401	2					
ANR	34154	Condition	sl -> non_zero_count_cache [ scan8 [ CHROMA_DC_BLOCK_INDEX + 0 ] ]	395:24:10013:10070	32401	0	True				
ANR	34155	ArrayIndexing	sl -> non_zero_count_cache [ scan8 [ CHROMA_DC_BLOCK_INDEX + 0 ] ]		32401	0					
ANR	34156	PtrMemberAccess	sl -> non_zero_count_cache		32401	0					
ANR	34157	Identifier	sl		32401	0					
ANR	34158	Identifier	non_zero_count_cache		32401	1					
ANR	34159	ArrayIndexing	scan8 [ CHROMA_DC_BLOCK_INDEX + 0 ]		32401	1					
ANR	34160	Identifier	scan8		32401	0					
ANR	34161	AdditiveExpression	CHROMA_DC_BLOCK_INDEX + 0		32401	1		+			
ANR	34162	Identifier	CHROMA_DC_BLOCK_INDEX		32401	0					
ANR	34163	PrimaryExpression	0		32401	1					
ANR	34164	ExpressionStatement	"h -> h264dsp . h264_chroma_dc_dequant_idct ( sl -> mb + ( 16 * 16 * 1 << PIXEL_SHIFT ) , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ qp [ 0 ] ] [ 0 ] )"	397:24:10098:10295	32401	1	True				
ANR	34165	CallExpression	"h -> h264dsp . h264_chroma_dc_dequant_idct ( sl -> mb + ( 16 * 16 * 1 << PIXEL_SHIFT ) , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ qp [ 0 ] ] [ 0 ] )"		32401	0					
ANR	34166	Callee	h -> h264dsp . h264_chroma_dc_dequant_idct		32401	0					
ANR	34167	MemberAccess	h -> h264dsp . h264_chroma_dc_dequant_idct		32401	0					
ANR	34168	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	34169	Identifier	h		32401	0					
ANR	34170	Identifier	h264dsp		32401	1					
ANR	34171	Identifier	h264_chroma_dc_dequant_idct		32401	1					
ANR	34172	ArgumentList	sl -> mb + ( 16 * 16 * 1 << PIXEL_SHIFT )		32401	1					
ANR	34173	Argument	sl -> mb + ( 16 * 16 * 1 << PIXEL_SHIFT )		32401	0					
ANR	34174	AdditiveExpression	sl -> mb + ( 16 * 16 * 1 << PIXEL_SHIFT )		32401	0		+			
ANR	34175	PtrMemberAccess	sl -> mb		32401	0					
ANR	34176	Identifier	sl		32401	0					
ANR	34177	Identifier	mb		32401	1					
ANR	34178	ShiftExpression	16 * 16 * 1 << PIXEL_SHIFT		32401	1		<<			
ANR	34179	MultiplicativeExpression	16 * 16 * 1		32401	0		*			
ANR	34180	PrimaryExpression	16		32401	0					
ANR	34181	MultiplicativeExpression	16 * 1		32401	1		*			
ANR	34182	PrimaryExpression	16		32401	0					
ANR	34183	PrimaryExpression	1		32401	1					
ANR	34184	Identifier	PIXEL_SHIFT		32401	1					
ANR	34185	Argument	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ qp [ 0 ] ] [ 0 ]		32401	1					
ANR	34186	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ qp [ 0 ] ] [ 0 ]		32401	0					
ANR	34187	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ qp [ 0 ] ]		32401	0					
ANR	34188	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ]		32401	0					
ANR	34189	PtrMemberAccess	h -> dequant4_coeff		32401	0					
ANR	34190	Identifier	h		32401	0					
ANR	34191	Identifier	dequant4_coeff		32401	1					
ANR	34192	ConditionalExpression	IS_INTRA ( mb_type ) ? 1 : 4		32401	1					
ANR	34193	Condition	IS_INTRA ( mb_type )		32401	0					
ANR	34194	CallExpression	IS_INTRA ( mb_type )		32401	0					
ANR	34195	Callee	IS_INTRA		32401	0					
ANR	34196	Identifier	IS_INTRA		32401	0					
ANR	34197	ArgumentList	mb_type		32401	1					
ANR	34198	Argument	mb_type		32401	0					
ANR	34199	Identifier	mb_type		32401	0					
ANR	34200	PrimaryExpression	1		32401	1					
ANR	34201	PrimaryExpression	4		32401	2					
ANR	34202	ArrayIndexing	qp [ 0 ]		32401	1					
ANR	34203	Identifier	qp		32401	0					
ANR	34204	PrimaryExpression	0		32401	1					
ANR	34205	PrimaryExpression	0		32401	1					
ANR	34206	IfStatement	if ( sl -> non_zero_count_cache [ scan8 [ CHROMA_DC_BLOCK_INDEX + 1 ] ] )		32401	3					
ANR	34207	Condition	sl -> non_zero_count_cache [ scan8 [ CHROMA_DC_BLOCK_INDEX + 1 ] ]	401:24:10322:10379	32401	0	True				
ANR	34208	ArrayIndexing	sl -> non_zero_count_cache [ scan8 [ CHROMA_DC_BLOCK_INDEX + 1 ] ]		32401	0					
ANR	34209	PtrMemberAccess	sl -> non_zero_count_cache		32401	0					
ANR	34210	Identifier	sl		32401	0					
ANR	34211	Identifier	non_zero_count_cache		32401	1					
ANR	34212	ArrayIndexing	scan8 [ CHROMA_DC_BLOCK_INDEX + 1 ]		32401	1					
ANR	34213	Identifier	scan8		32401	0					
ANR	34214	AdditiveExpression	CHROMA_DC_BLOCK_INDEX + 1		32401	1		+			
ANR	34215	Identifier	CHROMA_DC_BLOCK_INDEX		32401	0					
ANR	34216	PrimaryExpression	1		32401	1					
ANR	34217	ExpressionStatement	"h -> h264dsp . h264_chroma_dc_dequant_idct ( sl -> mb + ( 16 * 16 * 2 << PIXEL_SHIFT ) , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ qp [ 1 ] ] [ 0 ] )"	403:24:10407:10604	32401	1	True				
ANR	34218	CallExpression	"h -> h264dsp . h264_chroma_dc_dequant_idct ( sl -> mb + ( 16 * 16 * 2 << PIXEL_SHIFT ) , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ qp [ 1 ] ] [ 0 ] )"		32401	0					
ANR	34219	Callee	h -> h264dsp . h264_chroma_dc_dequant_idct		32401	0					
ANR	34220	MemberAccess	h -> h264dsp . h264_chroma_dc_dequant_idct		32401	0					
ANR	34221	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	34222	Identifier	h		32401	0					
ANR	34223	Identifier	h264dsp		32401	1					
ANR	34224	Identifier	h264_chroma_dc_dequant_idct		32401	1					
ANR	34225	ArgumentList	sl -> mb + ( 16 * 16 * 2 << PIXEL_SHIFT )		32401	1					
ANR	34226	Argument	sl -> mb + ( 16 * 16 * 2 << PIXEL_SHIFT )		32401	0					
ANR	34227	AdditiveExpression	sl -> mb + ( 16 * 16 * 2 << PIXEL_SHIFT )		32401	0		+			
ANR	34228	PtrMemberAccess	sl -> mb		32401	0					
ANR	34229	Identifier	sl		32401	0					
ANR	34230	Identifier	mb		32401	1					
ANR	34231	ShiftExpression	16 * 16 * 2 << PIXEL_SHIFT		32401	1		<<			
ANR	34232	MultiplicativeExpression	16 * 16 * 2		32401	0		*			
ANR	34233	PrimaryExpression	16		32401	0					
ANR	34234	MultiplicativeExpression	16 * 2		32401	1		*			
ANR	34235	PrimaryExpression	16		32401	0					
ANR	34236	PrimaryExpression	2		32401	1					
ANR	34237	Identifier	PIXEL_SHIFT		32401	1					
ANR	34238	Argument	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ qp [ 1 ] ] [ 0 ]		32401	1					
ANR	34239	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ qp [ 1 ] ] [ 0 ]		32401	0					
ANR	34240	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ qp [ 1 ] ]		32401	0					
ANR	34241	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ]		32401	0					
ANR	34242	PtrMemberAccess	h -> dequant4_coeff		32401	0					
ANR	34243	Identifier	h		32401	0					
ANR	34244	Identifier	dequant4_coeff		32401	1					
ANR	34245	ConditionalExpression	IS_INTRA ( mb_type ) ? 2 : 5		32401	1					
ANR	34246	Condition	IS_INTRA ( mb_type )		32401	0					
ANR	34247	CallExpression	IS_INTRA ( mb_type )		32401	0					
ANR	34248	Callee	IS_INTRA		32401	0					
ANR	34249	Identifier	IS_INTRA		32401	0					
ANR	34250	ArgumentList	mb_type		32401	1					
ANR	34251	Argument	mb_type		32401	0					
ANR	34252	Identifier	mb_type		32401	0					
ANR	34253	PrimaryExpression	2		32401	1					
ANR	34254	PrimaryExpression	5		32401	2					
ANR	34255	ArrayIndexing	qp [ 1 ]		32401	1					
ANR	34256	Identifier	qp		32401	0					
ANR	34257	PrimaryExpression	1		32401	1					
ANR	34258	PrimaryExpression	0		32401	1					
ANR	34259	ExpressionStatement	"h -> h264dsp . h264_idct_add8 ( dest , block_offset , sl -> mb , uvlinesize , sl -> non_zero_count_cache )"	407:20:10627:10812	32401	4	True				
ANR	34260	CallExpression	"h -> h264dsp . h264_idct_add8 ( dest , block_offset , sl -> mb , uvlinesize , sl -> non_zero_count_cache )"		32401	0					
ANR	34261	Callee	h -> h264dsp . h264_idct_add8		32401	0					
ANR	34262	MemberAccess	h -> h264dsp . h264_idct_add8		32401	0					
ANR	34263	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	34264	Identifier	h		32401	0					
ANR	34265	Identifier	h264dsp		32401	1					
ANR	34266	Identifier	h264_idct_add8		32401	1					
ANR	34267	ArgumentList	dest		32401	1					
ANR	34268	Argument	dest		32401	0					
ANR	34269	Identifier	dest		32401	0					
ANR	34270	Argument	block_offset		32401	1					
ANR	34271	Identifier	block_offset		32401	0					
ANR	34272	Argument	sl -> mb		32401	2					
ANR	34273	PtrMemberAccess	sl -> mb		32401	0					
ANR	34274	Identifier	sl		32401	0					
ANR	34275	Identifier	mb		32401	1					
ANR	34276	Argument	uvlinesize		32401	3					
ANR	34277	Identifier	uvlinesize		32401	0					
ANR	34278	Argument	sl -> non_zero_count_cache		32401	4					
ANR	34279	PtrMemberAccess	sl -> non_zero_count_cache		32401	0					
ANR	34280	Identifier	sl		32401	0					
ANR	34281	Identifier	non_zero_count_cache		32401	1					
ANR	34282	ElseStatement	else		32401	0					
ANR	34283	IfStatement	if ( CONFIG_SVQ3_DECODER )		32401	0					
ANR	34284	Condition	CONFIG_SVQ3_DECODER	413:27:10842:10860	32401	0	True				
ANR	34285	Identifier	CONFIG_SVQ3_DECODER		32401	0					
ANR	34286	CompoundStatement		411:48:10780:10780	32401	1					
ANR	34287	ExpressionStatement	"h -> h264dsp . h264_chroma_dc_dequant_idct ( sl -> mb + 16 * 16 * 1 , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ sl -> chroma_qp [ 0 ] ] [ 0 ] )"	415:20:10886:11073	32401	0	True				
ANR	34288	CallExpression	"h -> h264dsp . h264_chroma_dc_dequant_idct ( sl -> mb + 16 * 16 * 1 , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ sl -> chroma_qp [ 0 ] ] [ 0 ] )"		32401	0					
ANR	34289	Callee	h -> h264dsp . h264_chroma_dc_dequant_idct		32401	0					
ANR	34290	MemberAccess	h -> h264dsp . h264_chroma_dc_dequant_idct		32401	0					
ANR	34291	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	34292	Identifier	h		32401	0					
ANR	34293	Identifier	h264dsp		32401	1					
ANR	34294	Identifier	h264_chroma_dc_dequant_idct		32401	1					
ANR	34295	ArgumentList	sl -> mb + 16 * 16 * 1		32401	1					
ANR	34296	Argument	sl -> mb + 16 * 16 * 1		32401	0					
ANR	34297	AdditiveExpression	sl -> mb + 16 * 16 * 1		32401	0		+			
ANR	34298	PtrMemberAccess	sl -> mb		32401	0					
ANR	34299	Identifier	sl		32401	0					
ANR	34300	Identifier	mb		32401	1					
ANR	34301	MultiplicativeExpression	16 * 16 * 1		32401	1		*			
ANR	34302	PrimaryExpression	16		32401	0					
ANR	34303	MultiplicativeExpression	16 * 1		32401	1		*			
ANR	34304	PrimaryExpression	16		32401	0					
ANR	34305	PrimaryExpression	1		32401	1					
ANR	34306	Argument	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ sl -> chroma_qp [ 0 ] ] [ 0 ]		32401	1					
ANR	34307	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ sl -> chroma_qp [ 0 ] ] [ 0 ]		32401	0					
ANR	34308	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ] [ sl -> chroma_qp [ 0 ] ]		32401	0					
ANR	34309	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 1 : 4 ]		32401	0					
ANR	34310	PtrMemberAccess	h -> dequant4_coeff		32401	0					
ANR	34311	Identifier	h		32401	0					
ANR	34312	Identifier	dequant4_coeff		32401	1					
ANR	34313	ConditionalExpression	IS_INTRA ( mb_type ) ? 1 : 4		32401	1					
ANR	34314	Condition	IS_INTRA ( mb_type )		32401	0					
ANR	34315	CallExpression	IS_INTRA ( mb_type )		32401	0					
ANR	34316	Callee	IS_INTRA		32401	0					
ANR	34317	Identifier	IS_INTRA		32401	0					
ANR	34318	ArgumentList	mb_type		32401	1					
ANR	34319	Argument	mb_type		32401	0					
ANR	34320	Identifier	mb_type		32401	0					
ANR	34321	PrimaryExpression	1		32401	1					
ANR	34322	PrimaryExpression	4		32401	2					
ANR	34323	ArrayIndexing	sl -> chroma_qp [ 0 ]		32401	1					
ANR	34324	PtrMemberAccess	sl -> chroma_qp		32401	0					
ANR	34325	Identifier	sl		32401	0					
ANR	34326	Identifier	chroma_qp		32401	1					
ANR	34327	PrimaryExpression	0		32401	1					
ANR	34328	PrimaryExpression	0		32401	1					
ANR	34329	ExpressionStatement	"h -> h264dsp . h264_chroma_dc_dequant_idct ( sl -> mb + 16 * 16 * 2 , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ sl -> chroma_qp [ 1 ] ] [ 0 ] )"	419:20:11096:11283	32401	1	True				
ANR	34330	CallExpression	"h -> h264dsp . h264_chroma_dc_dequant_idct ( sl -> mb + 16 * 16 * 2 , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ sl -> chroma_qp [ 1 ] ] [ 0 ] )"		32401	0					
ANR	34331	Callee	h -> h264dsp . h264_chroma_dc_dequant_idct		32401	0					
ANR	34332	MemberAccess	h -> h264dsp . h264_chroma_dc_dequant_idct		32401	0					
ANR	34333	PtrMemberAccess	h -> h264dsp		32401	0					
ANR	34334	Identifier	h		32401	0					
ANR	34335	Identifier	h264dsp		32401	1					
ANR	34336	Identifier	h264_chroma_dc_dequant_idct		32401	1					
ANR	34337	ArgumentList	sl -> mb + 16 * 16 * 2		32401	1					
ANR	34338	Argument	sl -> mb + 16 * 16 * 2		32401	0					
ANR	34339	AdditiveExpression	sl -> mb + 16 * 16 * 2		32401	0		+			
ANR	34340	PtrMemberAccess	sl -> mb		32401	0					
ANR	34341	Identifier	sl		32401	0					
ANR	34342	Identifier	mb		32401	1					
ANR	34343	MultiplicativeExpression	16 * 16 * 2		32401	1		*			
ANR	34344	PrimaryExpression	16		32401	0					
ANR	34345	MultiplicativeExpression	16 * 2		32401	1		*			
ANR	34346	PrimaryExpression	16		32401	0					
ANR	34347	PrimaryExpression	2		32401	1					
ANR	34348	Argument	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ sl -> chroma_qp [ 1 ] ] [ 0 ]		32401	1					
ANR	34349	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ sl -> chroma_qp [ 1 ] ] [ 0 ]		32401	0					
ANR	34350	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ] [ sl -> chroma_qp [ 1 ] ]		32401	0					
ANR	34351	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 2 : 5 ]		32401	0					
ANR	34352	PtrMemberAccess	h -> dequant4_coeff		32401	0					
ANR	34353	Identifier	h		32401	0					
ANR	34354	Identifier	dequant4_coeff		32401	1					
ANR	34355	ConditionalExpression	IS_INTRA ( mb_type ) ? 2 : 5		32401	1					
ANR	34356	Condition	IS_INTRA ( mb_type )		32401	0					
ANR	34357	CallExpression	IS_INTRA ( mb_type )		32401	0					
ANR	34358	Callee	IS_INTRA		32401	0					
ANR	34359	Identifier	IS_INTRA		32401	0					
ANR	34360	ArgumentList	mb_type		32401	1					
ANR	34361	Argument	mb_type		32401	0					
ANR	34362	Identifier	mb_type		32401	0					
ANR	34363	PrimaryExpression	2		32401	1					
ANR	34364	PrimaryExpression	5		32401	2					
ANR	34365	ArrayIndexing	sl -> chroma_qp [ 1 ]		32401	1					
ANR	34366	PtrMemberAccess	sl -> chroma_qp		32401	0					
ANR	34367	Identifier	sl		32401	0					
ANR	34368	Identifier	chroma_qp		32401	1					
ANR	34369	PrimaryExpression	1		32401	1					
ANR	34370	PrimaryExpression	0		32401	1					
ANR	34371	ForStatement	for ( j = 1 ; j < 3 ; j ++ )		32401	2					
ANR	34372	ForInit	j = 1 ;	423:25:11311:11316	32401	0	True				
ANR	34373	AssignmentExpression	j = 1		32401	0		=			
ANR	34374	Identifier	j		32401	0					
ANR	34375	PrimaryExpression	1		32401	1					
ANR	34376	Condition	j < 3	423:32:11318:11322	32401	1	True				
ANR	34377	RelationalExpression	j < 3		32401	0		<			
ANR	34378	Identifier	j		32401	0					
ANR	34379	PrimaryExpression	3		32401	1					
ANR	34380	PostIncDecOperationExpression	j ++	423:39:11325:11327	32401	2	True				
ANR	34381	Identifier	j		32401	0					
ANR	34382	IncDec	++		32401	1					
ANR	34383	CompoundStatement		421:44:11247:11247	32401	3					
ANR	34384	ForStatement	for ( i = j * 16 ; i < j * 16 + 4 ; i ++ )		32401	0					
ANR	34385	ForInit	i = j * 16 ;	425:29:11362:11372	32401	0	True				
ANR	34386	AssignmentExpression	i = j * 16		32401	0		=			
ANR	34387	Identifier	i		32401	0					
ANR	34388	MultiplicativeExpression	j * 16		32401	1		*			
ANR	34389	Identifier	j		32401	0					
ANR	34390	PrimaryExpression	16		32401	1					
ANR	34391	Condition	i < j * 16 + 4	425:41:11374:11387	32401	1	True				
ANR	34392	RelationalExpression	i < j * 16 + 4		32401	0		<			
ANR	34393	Identifier	i		32401	0					
ANR	34394	AdditiveExpression	j * 16 + 4		32401	1		+			
ANR	34395	MultiplicativeExpression	j * 16		32401	0		*			
ANR	34396	Identifier	j		32401	0					
ANR	34397	PrimaryExpression	16		32401	1					
ANR	34398	PrimaryExpression	4		32401	1					
ANR	34399	PostIncDecOperationExpression	i ++	425:57:11390:11392	32401	2	True				
ANR	34400	Identifier	i		32401	0					
ANR	34401	IncDec	++		32401	1					
ANR	34402	IfStatement	if ( sl -> non_zero_count_cache [ scan8 [ i ] ] || sl -> mb [ i * 16 ] )		32401	3					
ANR	34403	Condition	sl -> non_zero_count_cache [ scan8 [ i ] ] || sl -> mb [ i * 16 ]	427:32:11428:11479	32401	0	True				
ANR	34404	OrExpression	sl -> non_zero_count_cache [ scan8 [ i ] ] || sl -> mb [ i * 16 ]		32401	0		||			
ANR	34405	ArrayIndexing	sl -> non_zero_count_cache [ scan8 [ i ] ]		32401	0					
ANR	34406	PtrMemberAccess	sl -> non_zero_count_cache		32401	0					
ANR	34407	Identifier	sl		32401	0					
ANR	34408	Identifier	non_zero_count_cache		32401	1					
ANR	34409	ArrayIndexing	scan8 [ i ]		32401	1					
ANR	34410	Identifier	scan8		32401	0					
ANR	34411	Identifier	i		32401	1					
ANR	34412	ArrayIndexing	sl -> mb [ i * 16 ]		32401	1					
ANR	34413	PtrMemberAccess	sl -> mb		32401	0					
ANR	34414	Identifier	sl		32401	0					
ANR	34415	Identifier	mb		32401	1					
ANR	34416	MultiplicativeExpression	i * 16		32401	1		*			
ANR	34417	Identifier	i		32401	0					
ANR	34418	PrimaryExpression	16		32401	1					
ANR	34419	CompoundStatement		425:86:11399:11399	32401	1					
ANR	34420	Statement	uint8_t	429:32:11517:11523	32401	0	True				
ANR	34421	Statement	*	429:40:11525:11525	32401	1	True				
ANR	34422	Statement	const	429:41:11526:11530	32401	2	True				
ANR	34423	ExpressionStatement	ptr = dest [ j - 1 ] + block_offset [ i ]	429:47:11532:11567	32401	3	True				
ANR	34424	AssignmentExpression	ptr = dest [ j - 1 ] + block_offset [ i ]		32401	0		=			
ANR	34425	Identifier	ptr		32401	0					
ANR	34426	AdditiveExpression	dest [ j - 1 ] + block_offset [ i ]		32401	1		+			
ANR	34427	ArrayIndexing	dest [ j - 1 ]		32401	0					
ANR	34428	Identifier	dest		32401	0					
ANR	34429	AdditiveExpression	j - 1		32401	1		-			
ANR	34430	Identifier	j		32401	0					
ANR	34431	PrimaryExpression	1		32401	1					
ANR	34432	ArrayIndexing	block_offset [ i ]		32401	1					
ANR	34433	Identifier	block_offset		32401	0					
ANR	34434	Identifier	i		32401	1					
ANR	34435	ExpressionStatement	"ff_svq3_add_idct_c ( ptr , sl -> mb + i * 16 , uvlinesize , ff_h264_chroma_qp [ 0 ] [ sl -> qscale + 12 ] - 12 , 2 )"	431:32:11602:11805	32401	4	True				
ANR	34436	CallExpression	"ff_svq3_add_idct_c ( ptr , sl -> mb + i * 16 , uvlinesize , ff_h264_chroma_qp [ 0 ] [ sl -> qscale + 12 ] - 12 , 2 )"		32401	0					
ANR	34437	Callee	ff_svq3_add_idct_c		32401	0					
ANR	34438	Identifier	ff_svq3_add_idct_c		32401	0					
ANR	34439	ArgumentList	ptr		32401	1					
ANR	34440	Argument	ptr		32401	0					
ANR	34441	Identifier	ptr		32401	0					
ANR	34442	Argument	sl -> mb + i * 16		32401	1					
ANR	34443	AdditiveExpression	sl -> mb + i * 16		32401	0		+			
ANR	34444	PtrMemberAccess	sl -> mb		32401	0					
ANR	34445	Identifier	sl		32401	0					
ANR	34446	Identifier	mb		32401	1					
ANR	34447	MultiplicativeExpression	i * 16		32401	1		*			
ANR	34448	Identifier	i		32401	0					
ANR	34449	PrimaryExpression	16		32401	1					
ANR	34450	Argument	uvlinesize		32401	2					
ANR	34451	Identifier	uvlinesize		32401	0					
ANR	34452	Argument	ff_h264_chroma_qp [ 0 ] [ sl -> qscale + 12 ] - 12		32401	3					
ANR	34453	AdditiveExpression	ff_h264_chroma_qp [ 0 ] [ sl -> qscale + 12 ] - 12		32401	0		-			
ANR	34454	ArrayIndexing	ff_h264_chroma_qp [ 0 ] [ sl -> qscale + 12 ]		32401	0					
ANR	34455	ArrayIndexing	ff_h264_chroma_qp [ 0 ]		32401	0					
ANR	34456	Identifier	ff_h264_chroma_qp		32401	0					
ANR	34457	PrimaryExpression	0		32401	1					
ANR	34458	AdditiveExpression	sl -> qscale + 12		32401	1		+			
ANR	34459	PtrMemberAccess	sl -> qscale		32401	0					
ANR	34460	Identifier	sl		32401	0					
ANR	34461	Identifier	qscale		32401	1					
ANR	34462	PrimaryExpression	12		32401	1					
ANR	34463	PrimaryExpression	12		32401	1					
ANR	34464	Argument	2		32401	4					
ANR	34465	PrimaryExpression	2		32401	0					
ANR	34466	ReturnType	static av_noinline void FUNC		32401	1					
ANR	34467	Identifier	( hl_decode_mb )		32401	2					
ANR	34468	Identifier	hl_decode_mb		32401	3					
ANR	34469	ParameterList	"H264Context * h , H264SliceContext * sl"		32401	4					
ANR	34470	Parameter	H264Context * h	1:43:43:56	32401	0	True				
ANR	34471	ParameterType	H264Context *		32401	0					
ANR	34472	Identifier	h		32401	1					
ANR	34473	Parameter	H264SliceContext * sl	1:59:59:78	32401	1	True				
ANR	34474	ParameterType	H264SliceContext *		32401	0					
ANR	34475	Identifier	sl		32401	1					
ANR	34476	CFGEntryNode	ENTRY		32401		True				
ANR	34477	CFGExitNode	EXIT		32401		True				
ANR	34478	Symbol	IS_INTRA_PCM		32401						
ANR	34479	Symbol	h -> dequant4_coeff		32401						
ANR	34480	Symbol	& gb		32401						
ANR	34481	Symbol	* scan8		32401						
ANR	34482	Symbol	* sl -> mb		32401						
ANR	34483	Symbol	h -> hpc . pred8x8_add		32401						
ANR	34484	Symbol	linesize		32401						
ANR	34485	Symbol	h -> sps . profile_idc		32401						
ANR	34486	Symbol	block_offset		32401						
ANR	34487	Symbol	h -> h264dsp . weight_h264_pixels_tab		32401						
ANR	34488	Symbol	mb_type		32401						
ANR	34489	Symbol	CHROMA422		32401						
ANR	34490	Symbol	src_cr		32401						
ANR	34491	Symbol	* sl		32401						
ANR	34492	Symbol	sl -> chroma_qp		32401						
ANR	34493	Symbol	* sl -> qscale		32401						
ANR	34494	Symbol	qp		32401						
ANR	34495	Symbol	IS_16X16		32401						
ANR	34496	Symbol	* * * sl -> chroma_qp		32401						
ANR	34497	Symbol	* CHROMA_DC_BLOCK_INDEX		32401						
ANR	34498	Symbol	src_cb		32401						
ANR	34499	Symbol	h -> uvlinesize		32401						
ANR	34500	Symbol	FRAME_MBAFF		32401						
ANR	34501	Symbol	h -> linesize		32401						
ANR	34502	Symbol	* tmp_y		32401						
ANR	34503	Symbol	chroma422		32401						
ANR	34504	Symbol	sl -> non_zero_count_cache		32401						
ANR	34505	Symbol	* * * IS_INTRA		32401						
ANR	34506	Symbol	dctcoef_get		32401						
ANR	34507	Symbol	h -> flags		32401						
ANR	34508	Symbol	h -> cur_pic . f . data		32401						
ANR	34509	Symbol	h -> cur_pic . f		32401						
ANR	34510	Symbol	* * * h		32401						
ANR	34511	Symbol	h -> h264dsp . biweight_h264_pixels_tab		32401						
ANR	34512	Symbol	* sl -> chroma_qp		32401						
ANR	34513	Symbol	* * sl -> ref_cache		32401						
ANR	34514	Symbol	h -> h264chroma		32401						
ANR	34515	Symbol	* dest		32401						
ANR	34516	Symbol	sl -> mb_uvlinesize		32401						
ANR	34517	Symbol	* * CHROMA_DC_BLOCK_INDEX		32401						
ANR	34518	Symbol	* h -> sps . chroma_format_idc		32401						
ANR	34519	Symbol	h -> hpc . pred8x8		32401						
ANR	34520	Symbol	h -> h264dsp		32401						
ANR	34521	Symbol	h -> cur_pic . mb_type		32401						
ANR	34522	Symbol	ff_h264_chroma_qp		32401						
ANR	34523	Symbol	sl		32401						
ANR	34524	Symbol	CONFIG_GRAY		32401						
ANR	34525	Symbol	* h -> dequant4_coeff		32401						
ANR	34526	Symbol	h -> qpel_avg		32401						
ANR	34527	Symbol	HOR_PRED8x8		32401						
ANR	34528	Symbol	h -> list_counts		32401						
ANR	34529	Symbol	sl -> cbp		32401						
ANR	34530	Symbol	* h -> cur_pic . f		32401						
ANR	34531	Symbol	idct_add		32401						
ANR	34532	Symbol	h		32401						
ANR	34533	Symbol	i		32401						
ANR	34534	Symbol	j		32401						
ANR	34535	Symbol	h -> sps . transform_bypass		32401						
ANR	34536	Symbol	sl -> intra_pcm_ptr		32401						
ANR	34537	Symbol	* * sl -> chroma_qp		32401						
ANR	34538	Symbol	dest_y		32401						
ANR	34539	Symbol	* list		32401						
ANR	34540	Symbol	ff_h264_mb_sizes		32401						
ANR	34541	Symbol	SIMPLE		32401						
ANR	34542	Symbol	mb_y		32401						
ANR	34543	Symbol	mb_x		32401						
ANR	34544	Symbol	CODEC_FLAG_GRAY		32401						
ANR	34545	Symbol	PIXEL_SHIFT		32401						
ANR	34546	Symbol	VERT_PRED8x8		32401						
ANR	34547	Symbol	h -> chroma_y_shift		32401						
ANR	34548	Symbol	get_bits		32401						
ANR	34549	Symbol	h -> mb_x		32401						
ANR	34550	Symbol	* * qp		32401						
ANR	34551	Symbol	h -> mb_y		32401						
ANR	34552	Symbol	dest		32401						
ANR	34553	Symbol	* h -> avctx		32401						
ANR	34554	Symbol	block_h		32401						
ANR	34555	Symbol	* * * * h		32401						
ANR	34556	Symbol	hl_motion_422		32401						
ANR	34557	Symbol	ref		32401						
ANR	34558	Symbol	* tmp_cr		32401						
ANR	34559	Symbol	hl_motion_420		32401						
ANR	34560	Symbol	uvlinesize		32401						
ANR	34561	Symbol	* h -> sps		32401						
ANR	34562	Symbol	* ff_h264_mb_sizes		32401						
ANR	34563	Symbol	sl -> ref_cache		32401						
ANR	34564	Symbol	* sl -> non_zero_count_cache		32401						
ANR	34565	Symbol	MB_FIELD		32401						
ANR	34566	Symbol	tmp_cb		32401						
ANR	34567	Symbol	h -> hpc		32401						
ANR	34568	Symbol	* * i		32401						
ANR	34569	Symbol	* * h		32401						
ANR	34570	Symbol	h -> h264dsp . h264_add_pixels4_clear		32401						
ANR	34571	Symbol	* * IS_INTRA		32401						
ANR	34572	Symbol	h -> block_offset		32401						
ANR	34573	Symbol	h -> deblocking_filter		32401						
ANR	34574	Symbol	* IS_INTRA		32401						
ANR	34575	Symbol	sl -> mb		32401						
ANR	34576	Symbol	* sl -> ref_cache		32401						
ANR	34577	Symbol	list		32401						
ANR	34578	Symbol	* * scan8		32401						
ANR	34579	Symbol	* * * h -> dequant4_coeff		32401						
ANR	34580	Symbol	* ff_h264_chroma_qp		32401						
ANR	34581	Symbol	* * ff_h264_chroma_qp		32401						
ANR	34582	Symbol	* h -> cur_pic . mb_type		32401						
ANR	34583	Symbol	tmp_cr		32401						
ANR	34584	Symbol	sl -> list_count		32401						
ANR	34585	Symbol	bit_depth		32401						
ANR	34586	Symbol	h -> qpel_put		32401						
ANR	34587	Symbol	h -> avctx		32401						
ANR	34588	Symbol	* h -> cur_pic		32401						
ANR	34589	Symbol	AV_CODEC_ID_H264		32401						
ANR	34590	Symbol	* * * sl		32401						
ANR	34591	Symbol	tmp_y		32401						
ANR	34592	Symbol	h -> h264chroma . put_h264_chroma_pixels_tab		32401						
ANR	34593	Symbol	mb_xy		32401						
ANR	34594	Symbol	* qp		32401						
ANR	34595	Symbol	* * sl		32401						
ANR	34596	Symbol	IS_INTRA		32401						
ANR	34597	Symbol	dest_cb		32401						
ANR	34598	Symbol	transform_bypass		32401						
ANR	34599	Symbol	h -> cur_pic		32401						
ANR	34600	Symbol	h -> vdsp		32401						
ANR	34601	Symbol	* * list		32401						
ANR	34602	Symbol	* h -> cur_pic . f . data		32401						
ANR	34603	Symbol	CHROMA_DC_BLOCK_INDEX		32401						
ANR	34604	Symbol	scan8		32401						
ANR	34605	Symbol	gb		32401						
ANR	34606	Symbol	* h -> list_counts		32401						
ANR	34607	Symbol	h -> sps . bit_depth_luma		32401						
ANR	34608	Symbol	h -> sps . chroma_format_idc		32401						
ANR	34609	Symbol	h -> avctx -> codec_id		32401						
ANR	34610	Symbol	* tmp_cb		32401						
ANR	34611	Symbol	sl -> chroma_pred_mode		32401						
ANR	34612	Symbol	sl -> qscale		32401						
ANR	34613	Symbol	* * * * sl		32401						
ANR	34614	Symbol	is_h264		32401						
ANR	34615	Symbol	sl -> mb_linesize		32401						
ANR	34616	Symbol	CONFIG_SVQ3_DECODER		32401						
ANR	34617	Symbol	* block_offset		32401						
ANR	34618	Symbol	ptr		32401						
ANR	34619	Symbol	h -> mb_xy		32401						
ANR	34620	Symbol	* h		32401						
ANR	34621	Symbol	* i		32401						
ANR	34622	Symbol	* j		32401						
ANR	34623	Symbol	h -> h264chroma . avg_h264_chroma_pixels_tab		32401						
ANR	34624	Symbol	USES_LIST		32401						
ANR	34625	Symbol	h -> sps		32401						
ANR	34626	Symbol	* * h -> dequant4_coeff		32401						
ANR	34627	Symbol	* mb_xy		32401						
ANR	34628	Symbol	* * * qp		32401						
ANR	34629	Symbol	* ref		32401						
ANR	34630	Symbol	dest_cr		32401						
