command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5099769	File	/home/p4ultr4n/workplace/ReVeal/raw_code/kvm_arch_pre_run_0.c								
ANR	5099770	Function	kvm_arch_pre_run	1:0:0:1703							
ANR	5099771	FunctionDef	"kvm_arch_pre_run (CPUState * env , struct kvm_run * run)"		5099770	0					
ANR	5099772	CompoundStatement		3:0:58:1703	5099770	0					
ANR	5099773	IfStatement	if ( env -> interrupt_request & CPU_INTERRUPT_NMI )		5099770	0					
ANR	5099774	Condition	env -> interrupt_request & CPU_INTERRUPT_NMI	7:8:91:132	5099770	0	True				
ANR	5099775	BitAndExpression	env -> interrupt_request & CPU_INTERRUPT_NMI		5099770	0		&			
ANR	5099776	PtrMemberAccess	env -> interrupt_request		5099770	0					
ANR	5099777	Identifier	env		5099770	0					
ANR	5099778	Identifier	interrupt_request		5099770	1					
ANR	5099779	Identifier	CPU_INTERRUPT_NMI		5099770	1					
ANR	5099780	CompoundStatement		5:52:76:76	5099770	1					
ANR	5099781	ExpressionStatement	env -> interrupt_request &= ~CPU_INTERRUPT_NMI	9:8:146:190	5099770	0	True				
ANR	5099782	AssignmentExpression	env -> interrupt_request &= ~CPU_INTERRUPT_NMI		5099770	0		&=			
ANR	5099783	PtrMemberAccess	env -> interrupt_request		5099770	0					
ANR	5099784	Identifier	env		5099770	0					
ANR	5099785	Identifier	interrupt_request		5099770	1					
ANR	5099786	Identifier	~CPU_INTERRUPT_NMI		5099770	1					
ANR	5099787	ExpressionStatement	"DPRINTF ( ""injected NMI\\n"" )"	11:8:201:226	5099770	1	True				
ANR	5099788	CallExpression	"DPRINTF ( ""injected NMI\\n"" )"		5099770	0					
ANR	5099789	Callee	DPRINTF		5099770	0					
ANR	5099790	Identifier	DPRINTF		5099770	0					
ANR	5099791	ArgumentList	"""injected NMI\\n"""		5099770	1					
ANR	5099792	Argument	"""injected NMI\\n"""		5099770	0					
ANR	5099793	PrimaryExpression	"""injected NMI\\n"""		5099770	0					
ANR	5099794	ExpressionStatement	"kvm_vcpu_ioctl ( env , KVM_NMI )"	13:8:237:265	5099770	2	True				
ANR	5099795	CallExpression	"kvm_vcpu_ioctl ( env , KVM_NMI )"		5099770	0					
ANR	5099796	Callee	kvm_vcpu_ioctl		5099770	0					
ANR	5099797	Identifier	kvm_vcpu_ioctl		5099770	0					
ANR	5099798	ArgumentList	env		5099770	1					
ANR	5099799	Argument	env		5099770	0					
ANR	5099800	Identifier	env		5099770	0					
ANR	5099801	Argument	KVM_NMI		5099770	1					
ANR	5099802	Identifier	KVM_NMI		5099770	0					
ANR	5099803	IfStatement	if ( ! kvm_irqchip_in_kernel ( ) )		5099770	1					
ANR	5099804	Condition	! kvm_irqchip_in_kernel ( )	19:8:285:308	5099770	0	True				
ANR	5099805	UnaryOperationExpression	! kvm_irqchip_in_kernel ( )		5099770	0					
ANR	5099806	UnaryOperator	!		5099770	0					
ANR	5099807	CallExpression	kvm_irqchip_in_kernel ( )		5099770	1					
ANR	5099808	Callee	kvm_irqchip_in_kernel		5099770	0					
ANR	5099809	Identifier	kvm_irqchip_in_kernel		5099770	0					
ANR	5099810	ArgumentList			5099770	1					
ANR	5099811	CompoundStatement		17:34:252:252	5099770	1					
ANR	5099812	IfStatement	if ( env -> interrupt_request & CPU_INTERRUPT_INIT )		5099770	0					
ANR	5099813	Condition	env -> interrupt_request & CPU_INTERRUPT_INIT	23:12:406:448	5099770	0	True				
ANR	5099814	BitAndExpression	env -> interrupt_request & CPU_INTERRUPT_INIT		5099770	0		&			
ANR	5099815	PtrMemberAccess	env -> interrupt_request		5099770	0					
ANR	5099816	Identifier	env		5099770	0					
ANR	5099817	Identifier	interrupt_request		5099770	1					
ANR	5099818	Identifier	CPU_INTERRUPT_INIT		5099770	1					
ANR	5099819	CompoundStatement		21:57:392:392	5099770	1					
ANR	5099820	ExpressionStatement	env -> exit_request = 1	25:12:466:487	5099770	0	True				
ANR	5099821	AssignmentExpression	env -> exit_request = 1		5099770	0		=			
ANR	5099822	PtrMemberAccess	env -> exit_request		5099770	0					
ANR	5099823	Identifier	env		5099770	0					
ANR	5099824	Identifier	exit_request		5099770	1					
ANR	5099825	PrimaryExpression	1		5099770	1					
ANR	5099826	IfStatement	if ( run -> ready_for_interrupt_injection && ( env -> interrupt_request & CPU_INTERRUPT_HARD ) && ( env -> eflags & IF_MASK ) )		5099770	1					
ANR	5099827	Condition	run -> ready_for_interrupt_injection && ( env -> interrupt_request & CPU_INTERRUPT_HARD ) && ( env -> eflags & IF_MASK )	33:12:584:719	5099770	0	True				
ANR	5099828	AndExpression	run -> ready_for_interrupt_injection && ( env -> interrupt_request & CPU_INTERRUPT_HARD ) && ( env -> eflags & IF_MASK )		5099770	0		&&			
ANR	5099829	PtrMemberAccess	run -> ready_for_interrupt_injection		5099770	0					
ANR	5099830	Identifier	run		5099770	0					
ANR	5099831	Identifier	ready_for_interrupt_injection		5099770	1					
ANR	5099832	AndExpression	( env -> interrupt_request & CPU_INTERRUPT_HARD ) && ( env -> eflags & IF_MASK )		5099770	1		&&			
ANR	5099833	BitAndExpression	env -> interrupt_request & CPU_INTERRUPT_HARD		5099770	0		&			
ANR	5099834	PtrMemberAccess	env -> interrupt_request		5099770	0					
ANR	5099835	Identifier	env		5099770	0					
ANR	5099836	Identifier	interrupt_request		5099770	1					
ANR	5099837	Identifier	CPU_INTERRUPT_HARD		5099770	1					
ANR	5099838	BitAndExpression	env -> eflags & IF_MASK		5099770	1		&			
ANR	5099839	PtrMemberAccess	env -> eflags		5099770	0					
ANR	5099840	Identifier	env		5099770	0					
ANR	5099841	Identifier	eflags		5099770	1					
ANR	5099842	Identifier	IF_MASK		5099770	1					
ANR	5099843	CompoundStatement		37:12:678:685	5099770	1					
ANR	5099844	IdentifierDeclStatement	int irq ;	39:12:737:744	5099770	0	True				
ANR	5099845	IdentifierDecl	irq		5099770	0					
ANR	5099846	IdentifierDeclType	int		5099770	0					
ANR	5099847	Identifier	irq		5099770	1					
ANR	5099848	ExpressionStatement	env -> interrupt_request &= ~CPU_INTERRUPT_HARD	43:12:761:806	5099770	1	True				
ANR	5099849	AssignmentExpression	env -> interrupt_request &= ~CPU_INTERRUPT_HARD		5099770	0		&=			
ANR	5099850	PtrMemberAccess	env -> interrupt_request		5099770	0					
ANR	5099851	Identifier	env		5099770	0					
ANR	5099852	Identifier	interrupt_request		5099770	1					
ANR	5099853	Identifier	~CPU_INTERRUPT_HARD		5099770	1					
ANR	5099854	ExpressionStatement	irq = cpu_get_pic_interrupt ( env )	45:12:821:853	5099770	2	True				
ANR	5099855	AssignmentExpression	irq = cpu_get_pic_interrupt ( env )		5099770	0		=			
ANR	5099856	Identifier	irq		5099770	0					
ANR	5099857	CallExpression	cpu_get_pic_interrupt ( env )		5099770	1					
ANR	5099858	Callee	cpu_get_pic_interrupt		5099770	0					
ANR	5099859	Identifier	cpu_get_pic_interrupt		5099770	0					
ANR	5099860	ArgumentList	env		5099770	1					
ANR	5099861	Argument	env		5099770	0					
ANR	5099862	Identifier	env		5099770	0					
ANR	5099863	IfStatement	if ( irq >= 0 )		5099770	3					
ANR	5099864	Condition	irq >= 0	47:16:872:879	5099770	0	True				
ANR	5099865	RelationalExpression	irq >= 0		5099770	0		>=			
ANR	5099866	Identifier	irq		5099770	0					
ANR	5099867	PrimaryExpression	0		5099770	1					
ANR	5099868	CompoundStatement		47:16:842:867	5099770	1					
ANR	5099869	IdentifierDeclStatement	struct kvm_interrupt intr ;	49:16:901:926	5099770	0	True				
ANR	5099870	IdentifierDecl	intr		5099770	0					
ANR	5099871	IdentifierDeclType	struct kvm_interrupt		5099770	0					
ANR	5099872	Identifier	intr		5099770	1					
ANR	5099873	ExpressionStatement	intr . irq = irq	53:16:947:961	5099770	1	True				
ANR	5099874	AssignmentExpression	intr . irq = irq		5099770	0		=			
ANR	5099875	MemberAccess	intr . irq		5099770	0					
ANR	5099876	Identifier	intr		5099770	0					
ANR	5099877	Identifier	irq		5099770	1					
ANR	5099878	Identifier	irq		5099770	1					
ANR	5099879	ExpressionStatement	"DPRINTF ( ""injected interrupt %d\\n"" , irq )"	57:16:1017:1056	5099770	2	True				
ANR	5099880	CallExpression	"DPRINTF ( ""injected interrupt %d\\n"" , irq )"		5099770	0					
ANR	5099881	Callee	DPRINTF		5099770	0					
ANR	5099882	Identifier	DPRINTF		5099770	0					
ANR	5099883	ArgumentList	"""injected interrupt %d\\n"""		5099770	1					
ANR	5099884	Argument	"""injected interrupt %d\\n"""		5099770	0					
ANR	5099885	PrimaryExpression	"""injected interrupt %d\\n"""		5099770	0					
ANR	5099886	Argument	irq		5099770	1					
ANR	5099887	Identifier	irq		5099770	0					
ANR	5099888	ExpressionStatement	"kvm_vcpu_ioctl ( env , KVM_INTERRUPT , & intr )"	59:16:1075:1116	5099770	3	True				
ANR	5099889	CallExpression	"kvm_vcpu_ioctl ( env , KVM_INTERRUPT , & intr )"		5099770	0					
ANR	5099890	Callee	kvm_vcpu_ioctl		5099770	0					
ANR	5099891	Identifier	kvm_vcpu_ioctl		5099770	0					
ANR	5099892	ArgumentList	env		5099770	1					
ANR	5099893	Argument	env		5099770	0					
ANR	5099894	Identifier	env		5099770	0					
ANR	5099895	Argument	KVM_INTERRUPT		5099770	1					
ANR	5099896	Identifier	KVM_INTERRUPT		5099770	0					
ANR	5099897	Argument	& intr		5099770	2					
ANR	5099898	UnaryOperationExpression	& intr		5099770	0					
ANR	5099899	UnaryOperator	&		5099770	0					
ANR	5099900	Identifier	intr		5099770	1					
ANR	5099901	IfStatement	if ( ( env -> interrupt_request & CPU_INTERRUPT_HARD ) )		5099770	2					
ANR	5099902	Condition	env -> interrupt_request & CPU_INTERRUPT_HARD	75:12:1412:1456	5099770	0	True				
ANR	5099903	BitAndExpression	env -> interrupt_request & CPU_INTERRUPT_HARD		5099770	0		&			
ANR	5099904	PtrMemberAccess	env -> interrupt_request		5099770	0					
ANR	5099905	Identifier	env		5099770	0					
ANR	5099906	Identifier	interrupt_request		5099770	1					
ANR	5099907	Identifier	CPU_INTERRUPT_HARD		5099770	1					
ANR	5099908	CompoundStatement		73:59:1400:1400	5099770	1					
ANR	5099909	ExpressionStatement	run -> request_interrupt_window = 1	77:12:1474:1507	5099770	0	True				
ANR	5099910	AssignmentExpression	run -> request_interrupt_window = 1		5099770	0		=			
ANR	5099911	PtrMemberAccess	run -> request_interrupt_window		5099770	0					
ANR	5099912	Identifier	run		5099770	0					
ANR	5099913	Identifier	request_interrupt_window		5099770	1					
ANR	5099914	PrimaryExpression	1		5099770	1					
ANR	5099915	ElseStatement	else		5099770	0					
ANR	5099916	CompoundStatement		77:15:1466:1466	5099770	0					
ANR	5099917	ExpressionStatement	run -> request_interrupt_window = 0	81:12:1540:1573	5099770	0	True				
ANR	5099918	AssignmentExpression	run -> request_interrupt_window = 0		5099770	0		=			
ANR	5099919	PtrMemberAccess	run -> request_interrupt_window		5099770	0					
ANR	5099920	Identifier	run		5099770	0					
ANR	5099921	Identifier	request_interrupt_window		5099770	1					
ANR	5099922	PrimaryExpression	0		5099770	1					
ANR	5099923	ExpressionStatement	"DPRINTF ( ""setting tpr\\n"" )"	87:8:1597:1621	5099770	3	True				
ANR	5099924	CallExpression	"DPRINTF ( ""setting tpr\\n"" )"		5099770	0					
ANR	5099925	Callee	DPRINTF		5099770	0					
ANR	5099926	Identifier	DPRINTF		5099770	0					
ANR	5099927	ArgumentList	"""setting tpr\\n"""		5099770	1					
ANR	5099928	Argument	"""setting tpr\\n"""		5099770	0					
ANR	5099929	PrimaryExpression	"""setting tpr\\n"""		5099770	0					
ANR	5099930	ExpressionStatement	run -> cr8 = cpu_get_apic_tpr ( env -> apic_state )	89:8:1632:1676	5099770	4	True				
ANR	5099931	AssignmentExpression	run -> cr8 = cpu_get_apic_tpr ( env -> apic_state )		5099770	0		=			
ANR	5099932	PtrMemberAccess	run -> cr8		5099770	0					
ANR	5099933	Identifier	run		5099770	0					
ANR	5099934	Identifier	cr8		5099770	1					
ANR	5099935	CallExpression	cpu_get_apic_tpr ( env -> apic_state )		5099770	1					
ANR	5099936	Callee	cpu_get_apic_tpr		5099770	0					
ANR	5099937	Identifier	cpu_get_apic_tpr		5099770	0					
ANR	5099938	ArgumentList	env -> apic_state		5099770	1					
ANR	5099939	Argument	env -> apic_state		5099770	0					
ANR	5099940	PtrMemberAccess	env -> apic_state		5099770	0					
ANR	5099941	Identifier	env		5099770	0					
ANR	5099942	Identifier	apic_state		5099770	1					
ANR	5099943	ReturnStatement	return 0 ;	95:4:1692:1700	5099770	2	True				
ANR	5099944	PrimaryExpression	0		5099770	0					
ANR	5099945	ReturnType	int		5099770	1					
ANR	5099946	Identifier	kvm_arch_pre_run		5099770	2					
ANR	5099947	ParameterList	"CPUState * env , struct kvm_run * run"		5099770	3					
ANR	5099948	Parameter	CPUState * env	1:21:21:33	5099770	0	True				
ANR	5099949	ParameterType	CPUState *		5099770	0					
ANR	5099950	Identifier	env		5099770	1					
ANR	5099951	Parameter	struct kvm_run * run	1:36:36:54	5099770	1	True				
ANR	5099952	ParameterType	struct kvm_run *		5099770	0					
ANR	5099953	Identifier	run		5099770	1					
ANR	5099954	CFGEntryNode	ENTRY		5099770		True				
ANR	5099955	CFGExitNode	EXIT		5099770		True				
ANR	5099956	Symbol	run -> request_interrupt_window		5099770						
ANR	5099957	Symbol	run		5099770						
ANR	5099958	Symbol	& intr		5099770						
ANR	5099959	Symbol	intr		5099770						
ANR	5099960	Symbol	~CPU_INTERRUPT_HARD		5099770						
ANR	5099961	Symbol	kvm_irqchip_in_kernel		5099770						
ANR	5099962	Symbol	~CPU_INTERRUPT_NMI		5099770						
ANR	5099963	Symbol	run -> ready_for_interrupt_injection		5099770						
ANR	5099964	Symbol	cpu_get_pic_interrupt		5099770						
ANR	5099965	Symbol	cpu_get_apic_tpr		5099770						
ANR	5099966	Symbol	CPU_INTERRUPT_NMI		5099770						
ANR	5099967	Symbol	* env		5099770						
ANR	5099968	Symbol	KVM_INTERRUPT		5099770						
ANR	5099969	Symbol	run -> cr8		5099770						
ANR	5099970	Symbol	env -> exit_request		5099770						
ANR	5099971	Symbol	irq		5099770						
ANR	5099972	Symbol	env		5099770						
ANR	5099973	Symbol	CPU_INTERRUPT_HARD		5099770						
ANR	5099974	Symbol	KVM_NMI		5099770						
ANR	5099975	Symbol	CPU_INTERRUPT_INIT		5099770						
ANR	5099976	Symbol	intr . irq		5099770						
ANR	5099977	Symbol	env -> interrupt_request		5099770						
ANR	5099978	Symbol	* run		5099770						
ANR	5099979	Symbol	env -> apic_state		5099770						
ANR	5099980	Symbol	IF_MASK		5099770						
ANR	5099981	Symbol	env -> eflags		5099770						
