command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6367679	File	/home/p4ultr4n/workplace/ReVeal/raw_code/parse_str_0.c								
ANR	6367680	Function	parse_str	1:0:0:2523							
ANR	6367681	FunctionDef	"parse_str (StringInputVisitor * siv , const char * name , Error * * errp)"		6367680	0					
ANR	6367682	CompoundStatement		3:0:79:2523	6367680	0					
ANR	6367683	IdentifierDeclStatement	char * str = ( char * ) siv -> string ;	5:4:86:118	6367680	0	True				
ANR	6367684	IdentifierDecl	* str = ( char * ) siv -> string		6367680	0					
ANR	6367685	IdentifierDeclType	char *		6367680	0					
ANR	6367686	Identifier	str		6367680	1					
ANR	6367687	AssignmentExpression	* str = ( char * ) siv -> string		6367680	2		=			
ANR	6367688	Identifier	str		6367680	0					
ANR	6367689	CastExpression	( char * ) siv -> string		6367680	1					
ANR	6367690	CastTarget	char *		6367680	0					
ANR	6367691	PtrMemberAccess	siv -> string		6367680	1					
ANR	6367692	Identifier	siv		6367680	0					
ANR	6367693	Identifier	string		6367680	1					
ANR	6367694	IdentifierDeclStatement	"long long start , end ;"	7:4:125:145	6367680	1	True				
ANR	6367695	IdentifierDecl	start		6367680	0					
ANR	6367696	IdentifierDeclType	long long		6367680	0					
ANR	6367697	Identifier	start		6367680	1					
ANR	6367698	IdentifierDecl	end		6367680	1					
ANR	6367699	IdentifierDeclType	long long		6367680	0					
ANR	6367700	Identifier	end		6367680	1					
ANR	6367701	IdentifierDeclStatement	Range * cur ;	9:4:152:162	6367680	2	True				
ANR	6367702	IdentifierDecl	* cur		6367680	0					
ANR	6367703	IdentifierDeclType	Range *		6367680	0					
ANR	6367704	Identifier	cur		6367680	1					
ANR	6367705	IdentifierDeclStatement	char * endptr ;	11:4:169:181	6367680	3	True				
ANR	6367706	IdentifierDecl	* endptr		6367680	0					
ANR	6367707	IdentifierDeclType	char *		6367680	0					
ANR	6367708	Identifier	endptr		6367680	1					
ANR	6367709	IfStatement	if ( siv -> ranges )		6367680	4					
ANR	6367710	Condition	siv -> ranges	15:8:194:204	6367680	0	True				
ANR	6367711	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6367712	Identifier	siv		6367680	0					
ANR	6367713	Identifier	ranges		6367680	1					
ANR	6367714	CompoundStatement		13:21:127:127	6367680	1					
ANR	6367715	ReturnStatement	return 0 ;	17:8:218:226	6367680	0	True				
ANR	6367716	PrimaryExpression	0		6367680	0					
ANR	6367717	DoStatement	do		6367680	5					
ANR	6367718	CompoundStatement		21:7:165:165	6367680	0					
ANR	6367719	ExpressionStatement	errno = 0	25:8:256:265	6367680	0	True				
ANR	6367720	AssignmentExpression	errno = 0		6367680	0		=			
ANR	6367721	Identifier	errno		6367680	0					
ANR	6367722	PrimaryExpression	0		6367680	1					
ANR	6367723	ExpressionStatement	"start = strtoll ( str , & endptr , 0 )"	27:8:276:308	6367680	1	True				
ANR	6367724	AssignmentExpression	"start = strtoll ( str , & endptr , 0 )"		6367680	0		=			
ANR	6367725	Identifier	start		6367680	0					
ANR	6367726	CallExpression	"strtoll ( str , & endptr , 0 )"		6367680	1					
ANR	6367727	Callee	strtoll		6367680	0					
ANR	6367728	Identifier	strtoll		6367680	0					
ANR	6367729	ArgumentList	str		6367680	1					
ANR	6367730	Argument	str		6367680	0					
ANR	6367731	Identifier	str		6367680	0					
ANR	6367732	Argument	& endptr		6367680	1					
ANR	6367733	UnaryOperationExpression	& endptr		6367680	0					
ANR	6367734	UnaryOperator	&		6367680	0					
ANR	6367735	Identifier	endptr		6367680	1					
ANR	6367736	Argument	0		6367680	2					
ANR	6367737	PrimaryExpression	0		6367680	0					
ANR	6367738	IfStatement	if ( errno == 0 && endptr > str )		6367680	2					
ANR	6367739	Condition	errno == 0 && endptr > str	29:12:323:348	6367680	0	True				
ANR	6367740	AndExpression	errno == 0 && endptr > str		6367680	0		&&			
ANR	6367741	EqualityExpression	errno == 0		6367680	0		==			
ANR	6367742	Identifier	errno		6367680	0					
ANR	6367743	PrimaryExpression	0		6367680	1					
ANR	6367744	RelationalExpression	endptr > str		6367680	1		>			
ANR	6367745	Identifier	endptr		6367680	0					
ANR	6367746	Identifier	str		6367680	1					
ANR	6367747	CompoundStatement		27:40:271:271	6367680	1					
ANR	6367748	IfStatement	if ( * endptr == '\\0' )		6367680	0					
ANR	6367749	Condition	* endptr == '\\0'	31:16:370:384	6367680	0	True				
ANR	6367750	EqualityExpression	* endptr == '\\0'		6367680	0		==			
ANR	6367751	UnaryOperationExpression	* endptr		6367680	0					
ANR	6367752	UnaryOperator	*		6367680	0					
ANR	6367753	Identifier	endptr		6367680	1					
ANR	6367754	PrimaryExpression	'\\0'		6367680	1					
ANR	6367755	CompoundStatement		29:33:307:307	6367680	1					
ANR	6367756	ExpressionStatement	cur = g_malloc0 ( sizeof ( * cur ) )	33:16:406:435	6367680	0	True				
ANR	6367757	AssignmentExpression	cur = g_malloc0 ( sizeof ( * cur ) )		6367680	0		=			
ANR	6367758	Identifier	cur		6367680	0					
ANR	6367759	CallExpression	g_malloc0 ( sizeof ( * cur ) )		6367680	1					
ANR	6367760	Callee	g_malloc0		6367680	0					
ANR	6367761	Identifier	g_malloc0		6367680	0					
ANR	6367762	ArgumentList	sizeof ( * cur )		6367680	1					
ANR	6367763	Argument	sizeof ( * cur )		6367680	0					
ANR	6367764	SizeofExpression	sizeof ( * cur )		6367680	0					
ANR	6367765	Sizeof	sizeof		6367680	0					
ANR	6367766	UnaryOperationExpression	* cur		6367680	1					
ANR	6367767	UnaryOperator	*		6367680	0					
ANR	6367768	Identifier	cur		6367680	1					
ANR	6367769	ExpressionStatement	cur -> begin = start	35:16:454:472	6367680	1	True				
ANR	6367770	AssignmentExpression	cur -> begin = start		6367680	0		=			
ANR	6367771	PtrMemberAccess	cur -> begin		6367680	0					
ANR	6367772	Identifier	cur		6367680	0					
ANR	6367773	Identifier	begin		6367680	1					
ANR	6367774	Identifier	start		6367680	1					
ANR	6367775	ExpressionStatement	cur -> end = start + 1	37:16:491:511	6367680	2	True				
ANR	6367776	AssignmentExpression	cur -> end = start + 1		6367680	0		=			
ANR	6367777	PtrMemberAccess	cur -> end		6367680	0					
ANR	6367778	Identifier	cur		6367680	0					
ANR	6367779	Identifier	end		6367680	1					
ANR	6367780	AdditiveExpression	start + 1		6367680	1		+			
ANR	6367781	Identifier	start		6367680	0					
ANR	6367782	PrimaryExpression	1		6367680	1					
ANR	6367783	ExpressionStatement	"siv -> ranges = range_list_insert ( siv -> ranges , cur )"	39:16:530:579	6367680	3	True				
ANR	6367784	AssignmentExpression	"siv -> ranges = range_list_insert ( siv -> ranges , cur )"		6367680	0		=			
ANR	6367785	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6367786	Identifier	siv		6367680	0					
ANR	6367787	Identifier	ranges		6367680	1					
ANR	6367788	CallExpression	"range_list_insert ( siv -> ranges , cur )"		6367680	1					
ANR	6367789	Callee	range_list_insert		6367680	0					
ANR	6367790	Identifier	range_list_insert		6367680	0					
ANR	6367791	ArgumentList	siv -> ranges		6367680	1					
ANR	6367792	Argument	siv -> ranges		6367680	0					
ANR	6367793	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6367794	Identifier	siv		6367680	0					
ANR	6367795	Identifier	ranges		6367680	1					
ANR	6367796	Argument	cur		6367680	1					
ANR	6367797	Identifier	cur		6367680	0					
ANR	6367798	ExpressionStatement	cur = NULL	41:16:598:608	6367680	4	True				
ANR	6367799	AssignmentExpression	cur = NULL		6367680	0		=			
ANR	6367800	Identifier	cur		6367680	0					
ANR	6367801	Identifier	NULL		6367680	1					
ANR	6367802	ExpressionStatement	str = NULL	43:16:627:637	6367680	5	True				
ANR	6367803	AssignmentExpression	str = NULL		6367680	0		=			
ANR	6367804	Identifier	str		6367680	0					
ANR	6367805	Identifier	NULL		6367680	1					
ANR	6367806	ElseStatement	else		6367680	0					
ANR	6367807	IfStatement	if ( * endptr == '-' )		6367680	0					
ANR	6367808	Condition	* endptr == '-'	45:23:663:676	6367680	0	True				
ANR	6367809	EqualityExpression	* endptr == '-'		6367680	0		==			
ANR	6367810	UnaryOperationExpression	* endptr		6367680	0					
ANR	6367811	UnaryOperator	*		6367680	0					
ANR	6367812	Identifier	endptr		6367680	1					
ANR	6367813	PrimaryExpression	'-'		6367680	1					
ANR	6367814	CompoundStatement		43:39:599:599	6367680	1					
ANR	6367815	ExpressionStatement	str = endptr + 1	47:16:698:714	6367680	0	True				
ANR	6367816	AssignmentExpression	str = endptr + 1		6367680	0		=			
ANR	6367817	Identifier	str		6367680	0					
ANR	6367818	AdditiveExpression	endptr + 1		6367680	1		+			
ANR	6367819	Identifier	endptr		6367680	0					
ANR	6367820	PrimaryExpression	1		6367680	1					
ANR	6367821	ExpressionStatement	errno = 0	49:16:733:742	6367680	1	True				
ANR	6367822	AssignmentExpression	errno = 0		6367680	0		=			
ANR	6367823	Identifier	errno		6367680	0					
ANR	6367824	PrimaryExpression	0		6367680	1					
ANR	6367825	ExpressionStatement	"end = strtoll ( str , & endptr , 0 )"	51:16:761:791	6367680	2	True				
ANR	6367826	AssignmentExpression	"end = strtoll ( str , & endptr , 0 )"		6367680	0		=			
ANR	6367827	Identifier	end		6367680	0					
ANR	6367828	CallExpression	"strtoll ( str , & endptr , 0 )"		6367680	1					
ANR	6367829	Callee	strtoll		6367680	0					
ANR	6367830	Identifier	strtoll		6367680	0					
ANR	6367831	ArgumentList	str		6367680	1					
ANR	6367832	Argument	str		6367680	0					
ANR	6367833	Identifier	str		6367680	0					
ANR	6367834	Argument	& endptr		6367680	1					
ANR	6367835	UnaryOperationExpression	& endptr		6367680	0					
ANR	6367836	UnaryOperator	&		6367680	0					
ANR	6367837	Identifier	endptr		6367680	1					
ANR	6367838	Argument	0		6367680	2					
ANR	6367839	PrimaryExpression	0		6367680	0					
ANR	6367840	IfStatement	if ( errno == 0 && endptr > str && start <= end && ( start > INT64_MAX - 65536 || end < start + 65536 ) )		6367680	3					
ANR	6367841	Condition	errno == 0 && endptr > str && start <= end && ( start > INT64_MAX - 65536 || end < start + 65536 )	53:20:814:952	6367680	0	True				
ANR	6367842	AndExpression	errno == 0 && endptr > str && start <= end && ( start > INT64_MAX - 65536 || end < start + 65536 )		6367680	0		&&			
ANR	6367843	EqualityExpression	errno == 0		6367680	0		==			
ANR	6367844	Identifier	errno		6367680	0					
ANR	6367845	PrimaryExpression	0		6367680	1					
ANR	6367846	AndExpression	endptr > str && start <= end && ( start > INT64_MAX - 65536 || end < start + 65536 )		6367680	1		&&			
ANR	6367847	RelationalExpression	endptr > str		6367680	0		>			
ANR	6367848	Identifier	endptr		6367680	0					
ANR	6367849	Identifier	str		6367680	1					
ANR	6367850	AndExpression	start <= end && ( start > INT64_MAX - 65536 || end < start + 65536 )		6367680	1		&&			
ANR	6367851	RelationalExpression	start <= end		6367680	0		<=			
ANR	6367852	Identifier	start		6367680	0					
ANR	6367853	Identifier	end		6367680	1					
ANR	6367854	OrExpression	start > INT64_MAX - 65536 || end < start + 65536		6367680	1		||			
ANR	6367855	RelationalExpression	start > INT64_MAX - 65536		6367680	0		>			
ANR	6367856	Identifier	start		6367680	0					
ANR	6367857	AdditiveExpression	INT64_MAX - 65536		6367680	1		-			
ANR	6367858	Identifier	INT64_MAX		6367680	0					
ANR	6367859	PrimaryExpression	65536		6367680	1					
ANR	6367860	RelationalExpression	end < start + 65536		6367680	1		<			
ANR	6367861	Identifier	end		6367680	0					
ANR	6367862	AdditiveExpression	start + 65536		6367680	1		+			
ANR	6367863	Identifier	start		6367680	0					
ANR	6367864	PrimaryExpression	65536		6367680	1					
ANR	6367865	CompoundStatement		55:43:875:875	6367680	1					
ANR	6367866	IfStatement	if ( * endptr == '\\0' )		6367680	0					
ANR	6367867	Condition	* endptr == '\\0'	59:24:982:996	6367680	0	True				
ANR	6367868	EqualityExpression	* endptr == '\\0'		6367680	0		==			
ANR	6367869	UnaryOperationExpression	* endptr		6367680	0					
ANR	6367870	UnaryOperator	*		6367680	0					
ANR	6367871	Identifier	endptr		6367680	1					
ANR	6367872	PrimaryExpression	'\\0'		6367680	1					
ANR	6367873	CompoundStatement		57:41:919:919	6367680	1					
ANR	6367874	ExpressionStatement	cur = g_malloc0 ( sizeof ( * cur ) )	61:24:1026:1055	6367680	0	True				
ANR	6367875	AssignmentExpression	cur = g_malloc0 ( sizeof ( * cur ) )		6367680	0		=			
ANR	6367876	Identifier	cur		6367680	0					
ANR	6367877	CallExpression	g_malloc0 ( sizeof ( * cur ) )		6367680	1					
ANR	6367878	Callee	g_malloc0		6367680	0					
ANR	6367879	Identifier	g_malloc0		6367680	0					
ANR	6367880	ArgumentList	sizeof ( * cur )		6367680	1					
ANR	6367881	Argument	sizeof ( * cur )		6367680	0					
ANR	6367882	SizeofExpression	sizeof ( * cur )		6367680	0					
ANR	6367883	Sizeof	sizeof		6367680	0					
ANR	6367884	UnaryOperationExpression	* cur		6367680	1					
ANR	6367885	UnaryOperator	*		6367680	0					
ANR	6367886	Identifier	cur		6367680	1					
ANR	6367887	ExpressionStatement	cur -> begin = start	63:24:1082:1100	6367680	1	True				
ANR	6367888	AssignmentExpression	cur -> begin = start		6367680	0		=			
ANR	6367889	PtrMemberAccess	cur -> begin		6367680	0					
ANR	6367890	Identifier	cur		6367680	0					
ANR	6367891	Identifier	begin		6367680	1					
ANR	6367892	Identifier	start		6367680	1					
ANR	6367893	ExpressionStatement	cur -> end = end + 1	65:24:1127:1145	6367680	2	True				
ANR	6367894	AssignmentExpression	cur -> end = end + 1		6367680	0		=			
ANR	6367895	PtrMemberAccess	cur -> end		6367680	0					
ANR	6367896	Identifier	cur		6367680	0					
ANR	6367897	Identifier	end		6367680	1					
ANR	6367898	AdditiveExpression	end + 1		6367680	1		+			
ANR	6367899	Identifier	end		6367680	0					
ANR	6367900	PrimaryExpression	1		6367680	1					
ANR	6367901	ExpressionStatement	"siv -> ranges = range_list_insert ( siv -> ranges , cur )"	67:24:1172:1221	6367680	3	True				
ANR	6367902	AssignmentExpression	"siv -> ranges = range_list_insert ( siv -> ranges , cur )"		6367680	0		=			
ANR	6367903	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6367904	Identifier	siv		6367680	0					
ANR	6367905	Identifier	ranges		6367680	1					
ANR	6367906	CallExpression	"range_list_insert ( siv -> ranges , cur )"		6367680	1					
ANR	6367907	Callee	range_list_insert		6367680	0					
ANR	6367908	Identifier	range_list_insert		6367680	0					
ANR	6367909	ArgumentList	siv -> ranges		6367680	1					
ANR	6367910	Argument	siv -> ranges		6367680	0					
ANR	6367911	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6367912	Identifier	siv		6367680	0					
ANR	6367913	Identifier	ranges		6367680	1					
ANR	6367914	Argument	cur		6367680	1					
ANR	6367915	Identifier	cur		6367680	0					
ANR	6367916	ExpressionStatement	cur = NULL	69:24:1248:1258	6367680	4	True				
ANR	6367917	AssignmentExpression	cur = NULL		6367680	0		=			
ANR	6367918	Identifier	cur		6367680	0					
ANR	6367919	Identifier	NULL		6367680	1					
ANR	6367920	ExpressionStatement	str = NULL	71:24:1285:1295	6367680	5	True				
ANR	6367921	AssignmentExpression	str = NULL		6367680	0		=			
ANR	6367922	Identifier	str		6367680	0					
ANR	6367923	Identifier	NULL		6367680	1					
ANR	6367924	ElseStatement	else		6367680	0					
ANR	6367925	IfStatement	"if ( * endptr == ',' )"		6367680	0					
ANR	6367926	Condition	"* endptr == ','"	73:31:1329:1342	6367680	0	True				
ANR	6367927	EqualityExpression	"* endptr == ','"		6367680	0		==			
ANR	6367928	UnaryOperationExpression	* endptr		6367680	0					
ANR	6367929	UnaryOperator	*		6367680	0					
ANR	6367930	Identifier	endptr		6367680	1					
ANR	6367931	PrimaryExpression	"','"		6367680	1					
ANR	6367932	CompoundStatement		71:47:1265:1265	6367680	1					
ANR	6367933	ExpressionStatement	str = endptr + 1	75:24:1372:1388	6367680	0	True				
ANR	6367934	AssignmentExpression	str = endptr + 1		6367680	0		=			
ANR	6367935	Identifier	str		6367680	0					
ANR	6367936	AdditiveExpression	endptr + 1		6367680	1		+			
ANR	6367937	Identifier	endptr		6367680	0					
ANR	6367938	PrimaryExpression	1		6367680	1					
ANR	6367939	ExpressionStatement	cur = g_malloc0 ( sizeof ( * cur ) )	77:24:1415:1444	6367680	1	True				
ANR	6367940	AssignmentExpression	cur = g_malloc0 ( sizeof ( * cur ) )		6367680	0		=			
ANR	6367941	Identifier	cur		6367680	0					
ANR	6367942	CallExpression	g_malloc0 ( sizeof ( * cur ) )		6367680	1					
ANR	6367943	Callee	g_malloc0		6367680	0					
ANR	6367944	Identifier	g_malloc0		6367680	0					
ANR	6367945	ArgumentList	sizeof ( * cur )		6367680	1					
ANR	6367946	Argument	sizeof ( * cur )		6367680	0					
ANR	6367947	SizeofExpression	sizeof ( * cur )		6367680	0					
ANR	6367948	Sizeof	sizeof		6367680	0					
ANR	6367949	UnaryOperationExpression	* cur		6367680	1					
ANR	6367950	UnaryOperator	*		6367680	0					
ANR	6367951	Identifier	cur		6367680	1					
ANR	6367952	ExpressionStatement	cur -> begin = start	79:24:1471:1489	6367680	2	True				
ANR	6367953	AssignmentExpression	cur -> begin = start		6367680	0		=			
ANR	6367954	PtrMemberAccess	cur -> begin		6367680	0					
ANR	6367955	Identifier	cur		6367680	0					
ANR	6367956	Identifier	begin		6367680	1					
ANR	6367957	Identifier	start		6367680	1					
ANR	6367958	ExpressionStatement	cur -> end = end + 1	81:24:1516:1534	6367680	3	True				
ANR	6367959	AssignmentExpression	cur -> end = end + 1		6367680	0		=			
ANR	6367960	PtrMemberAccess	cur -> end		6367680	0					
ANR	6367961	Identifier	cur		6367680	0					
ANR	6367962	Identifier	end		6367680	1					
ANR	6367963	AdditiveExpression	end + 1		6367680	1		+			
ANR	6367964	Identifier	end		6367680	0					
ANR	6367965	PrimaryExpression	1		6367680	1					
ANR	6367966	ExpressionStatement	"siv -> ranges = range_list_insert ( siv -> ranges , cur )"	83:24:1561:1610	6367680	4	True				
ANR	6367967	AssignmentExpression	"siv -> ranges = range_list_insert ( siv -> ranges , cur )"		6367680	0		=			
ANR	6367968	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6367969	Identifier	siv		6367680	0					
ANR	6367970	Identifier	ranges		6367680	1					
ANR	6367971	CallExpression	"range_list_insert ( siv -> ranges , cur )"		6367680	1					
ANR	6367972	Callee	range_list_insert		6367680	0					
ANR	6367973	Identifier	range_list_insert		6367680	0					
ANR	6367974	ArgumentList	siv -> ranges		6367680	1					
ANR	6367975	Argument	siv -> ranges		6367680	0					
ANR	6367976	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6367977	Identifier	siv		6367680	0					
ANR	6367978	Identifier	ranges		6367680	1					
ANR	6367979	Argument	cur		6367680	1					
ANR	6367980	Identifier	cur		6367680	0					
ANR	6367981	ExpressionStatement	cur = NULL	85:24:1637:1647	6367680	5	True				
ANR	6367982	AssignmentExpression	cur = NULL		6367680	0		=			
ANR	6367983	Identifier	cur		6367680	0					
ANR	6367984	Identifier	NULL		6367680	1					
ANR	6367985	ElseStatement	else		6367680	0					
ANR	6367986	CompoundStatement		85:27:1597:1597	6367680	0					
ANR	6367987	GotoStatement	goto error ;	89:24:1704:1714	6367680	0	True				
ANR	6367988	Identifier	error		6367680	0					
ANR	6367989	ElseStatement	else		6367680	0					
ANR	6367990	CompoundStatement		91:23:1683:1683	6367680	0					
ANR	6367991	GotoStatement	goto error ;	95:20:1786:1796	6367680	0	True				
ANR	6367992	Identifier	error		6367680	0					
ANR	6367993	ElseStatement	else		6367680	0					
ANR	6367994	IfStatement	"if ( * endptr == ',' )"		6367680	0					
ANR	6367995	Condition	"* endptr == ','"	99:23:1841:1854	6367680	0	True				
ANR	6367996	EqualityExpression	"* endptr == ','"		6367680	0		==			
ANR	6367997	UnaryOperationExpression	* endptr		6367680	0					
ANR	6367998	UnaryOperator	*		6367680	0					
ANR	6367999	Identifier	endptr		6367680	1					
ANR	6368000	PrimaryExpression	"','"		6367680	1					
ANR	6368001	CompoundStatement		97:39:1777:1777	6367680	1					
ANR	6368002	ExpressionStatement	str = endptr + 1	101:16:1876:1892	6367680	0	True				
ANR	6368003	AssignmentExpression	str = endptr + 1		6367680	0		=			
ANR	6368004	Identifier	str		6367680	0					
ANR	6368005	AdditiveExpression	endptr + 1		6367680	1		+			
ANR	6368006	Identifier	endptr		6367680	0					
ANR	6368007	PrimaryExpression	1		6367680	1					
ANR	6368008	ExpressionStatement	cur = g_malloc0 ( sizeof ( * cur ) )	103:16:1911:1940	6367680	1	True				
ANR	6368009	AssignmentExpression	cur = g_malloc0 ( sizeof ( * cur ) )		6367680	0		=			
ANR	6368010	Identifier	cur		6367680	0					
ANR	6368011	CallExpression	g_malloc0 ( sizeof ( * cur ) )		6367680	1					
ANR	6368012	Callee	g_malloc0		6367680	0					
ANR	6368013	Identifier	g_malloc0		6367680	0					
ANR	6368014	ArgumentList	sizeof ( * cur )		6367680	1					
ANR	6368015	Argument	sizeof ( * cur )		6367680	0					
ANR	6368016	SizeofExpression	sizeof ( * cur )		6367680	0					
ANR	6368017	Sizeof	sizeof		6367680	0					
ANR	6368018	UnaryOperationExpression	* cur		6367680	1					
ANR	6368019	UnaryOperator	*		6367680	0					
ANR	6368020	Identifier	cur		6367680	1					
ANR	6368021	ExpressionStatement	cur -> begin = start	105:16:1959:1977	6367680	2	True				
ANR	6368022	AssignmentExpression	cur -> begin = start		6367680	0		=			
ANR	6368023	PtrMemberAccess	cur -> begin		6367680	0					
ANR	6368024	Identifier	cur		6367680	0					
ANR	6368025	Identifier	begin		6367680	1					
ANR	6368026	Identifier	start		6367680	1					
ANR	6368027	ExpressionStatement	cur -> end = start + 1	107:16:1996:2016	6367680	3	True				
ANR	6368028	AssignmentExpression	cur -> end = start + 1		6367680	0		=			
ANR	6368029	PtrMemberAccess	cur -> end		6367680	0					
ANR	6368030	Identifier	cur		6367680	0					
ANR	6368031	Identifier	end		6367680	1					
ANR	6368032	AdditiveExpression	start + 1		6367680	1		+			
ANR	6368033	Identifier	start		6367680	0					
ANR	6368034	PrimaryExpression	1		6367680	1					
ANR	6368035	ExpressionStatement	"siv -> ranges = range_list_insert ( siv -> ranges , cur )"	109:16:2035:2084	6367680	4	True				
ANR	6368036	AssignmentExpression	"siv -> ranges = range_list_insert ( siv -> ranges , cur )"		6367680	0		=			
ANR	6368037	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6368038	Identifier	siv		6367680	0					
ANR	6368039	Identifier	ranges		6367680	1					
ANR	6368040	CallExpression	"range_list_insert ( siv -> ranges , cur )"		6367680	1					
ANR	6368041	Callee	range_list_insert		6367680	0					
ANR	6368042	Identifier	range_list_insert		6367680	0					
ANR	6368043	ArgumentList	siv -> ranges		6367680	1					
ANR	6368044	Argument	siv -> ranges		6367680	0					
ANR	6368045	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6368046	Identifier	siv		6367680	0					
ANR	6368047	Identifier	ranges		6367680	1					
ANR	6368048	Argument	cur		6367680	1					
ANR	6368049	Identifier	cur		6367680	0					
ANR	6368050	ExpressionStatement	cur = NULL	111:16:2103:2113	6367680	5	True				
ANR	6368051	AssignmentExpression	cur = NULL		6367680	0		=			
ANR	6368052	Identifier	cur		6367680	0					
ANR	6368053	Identifier	NULL		6367680	1					
ANR	6368054	ElseStatement	else		6367680	0					
ANR	6368055	CompoundStatement		111:19:2055:2055	6367680	0					
ANR	6368056	GotoStatement	goto error ;	115:16:2154:2164	6367680	0	True				
ANR	6368057	Identifier	error		6367680	0					
ANR	6368058	ElseStatement	else		6367680	0					
ANR	6368059	CompoundStatement		117:15:2117:2117	6367680	0					
ANR	6368060	GotoStatement	goto error ;	121:12:2212:2222	6367680	0	True				
ANR	6368061	Identifier	error		6367680	0					
ANR	6368062	Condition	str	125:13:2249:2251	6367680	1	True				
ANR	6368063	Identifier	str		6367680	0					
ANR	6368064	ReturnStatement	return 0 ;	129:4:2262:2270	6367680	6	True				
ANR	6368065	PrimaryExpression	0		6367680	0					
ANR	6368066	Label	error :	131:0:2273:2278	6367680	7	True				
ANR	6368067	Identifier	error		6367680	0					
ANR	6368068	ExpressionStatement	"g_list_foreach ( siv -> ranges , free_range , NULL )"	133:4:2285:2330	6367680	8	True				
ANR	6368069	CallExpression	"g_list_foreach ( siv -> ranges , free_range , NULL )"		6367680	0					
ANR	6368070	Callee	g_list_foreach		6367680	0					
ANR	6368071	Identifier	g_list_foreach		6367680	0					
ANR	6368072	ArgumentList	siv -> ranges		6367680	1					
ANR	6368073	Argument	siv -> ranges		6367680	0					
ANR	6368074	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6368075	Identifier	siv		6367680	0					
ANR	6368076	Identifier	ranges		6367680	1					
ANR	6368077	Argument	free_range		6367680	1					
ANR	6368078	Identifier	free_range		6367680	0					
ANR	6368079	Argument	NULL		6367680	2					
ANR	6368080	Identifier	NULL		6367680	0					
ANR	6368081	ExpressionStatement	g_list_free ( siv -> ranges )	135:4:2337:2361	6367680	9	True				
ANR	6368082	CallExpression	g_list_free ( siv -> ranges )		6367680	0					
ANR	6368083	Callee	g_list_free		6367680	0					
ANR	6368084	Identifier	g_list_free		6367680	0					
ANR	6368085	ArgumentList	siv -> ranges		6367680	1					
ANR	6368086	Argument	siv -> ranges		6367680	0					
ANR	6368087	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6368088	Identifier	siv		6367680	0					
ANR	6368089	Identifier	ranges		6367680	1					
ANR	6368090	ExpressionStatement	siv -> ranges = NULL	137:4:2368:2386	6367680	10	True				
ANR	6368091	AssignmentExpression	siv -> ranges = NULL		6367680	0		=			
ANR	6368092	PtrMemberAccess	siv -> ranges		6367680	0					
ANR	6368093	Identifier	siv		6367680	0					
ANR	6368094	Identifier	ranges		6367680	1					
ANR	6368095	Identifier	NULL		6367680	1					
ANR	6368096	ExpressionStatement	"error_setg ( errp , QERR_INVALID_PARAMETER_VALUE , name ? name : ""null"" , ""an int64 value or range"" )"	139:4:2393:2504	6367680	11	True				
ANR	6368097	CallExpression	"error_setg ( errp , QERR_INVALID_PARAMETER_VALUE , name ? name : ""null"" , ""an int64 value or range"" )"		6367680	0					
ANR	6368098	Callee	error_setg		6367680	0					
ANR	6368099	Identifier	error_setg		6367680	0					
ANR	6368100	ArgumentList	errp		6367680	1					
ANR	6368101	Argument	errp		6367680	0					
ANR	6368102	Identifier	errp		6367680	0					
ANR	6368103	Argument	QERR_INVALID_PARAMETER_VALUE		6367680	1					
ANR	6368104	Identifier	QERR_INVALID_PARAMETER_VALUE		6367680	0					
ANR	6368105	Argument	"name ? name : ""null"""		6367680	2					
ANR	6368106	ConditionalExpression	"name ? name : ""null"""		6367680	0					
ANR	6368107	Condition	name		6367680	0					
ANR	6368108	Identifier	name		6367680	0					
ANR	6368109	Identifier	name		6367680	1					
ANR	6368110	PrimaryExpression	"""null"""		6367680	2					
ANR	6368111	Argument	"""an int64 value or range"""		6367680	3					
ANR	6368112	PrimaryExpression	"""an int64 value or range"""		6367680	0					
ANR	6368113	ReturnStatement	return - 1 ;	143:4:2511:2520	6367680	12	True				
ANR	6368114	UnaryOperationExpression	- 1		6367680	0					
ANR	6368115	UnaryOperator	-		6367680	0					
ANR	6368116	PrimaryExpression	1		6367680	1					
ANR	6368117	ReturnType	static int		6367680	1					
ANR	6368118	Identifier	parse_str		6367680	2					
ANR	6368119	ParameterList	"StringInputVisitor * siv , const char * name , Error * * errp"		6367680	3					
ANR	6368120	Parameter	StringInputVisitor * siv	1:21:21:43	6367680	0	True				
ANR	6368121	ParameterType	StringInputVisitor *		6367680	0					
ANR	6368122	Identifier	siv		6367680	1					
ANR	6368123	Parameter	const char * name	1:46:46:61	6367680	1	True				
ANR	6368124	ParameterType	const char *		6367680	0					
ANR	6368125	Identifier	name		6367680	1					
ANR	6368126	Parameter	Error * * errp	1:64:64:75	6367680	2	True				
ANR	6368127	ParameterType	Error * *		6367680	0					
ANR	6368128	Identifier	errp		6367680	1					
ANR	6368129	CFGEntryNode	ENTRY		6367680		True				
ANR	6368130	CFGExitNode	EXIT		6367680		True				
ANR	6368131	Symbol	siv		6367680						
ANR	6368132	Symbol	cur		6367680						
ANR	6368133	Symbol	errno		6367680						
ANR	6368134	Symbol	NULL		6367680						
ANR	6368135	Symbol	errp		6367680						
ANR	6368136	Symbol	endptr		6367680						
ANR	6368137	Symbol	* endptr		6367680						
ANR	6368138	Symbol	& endptr		6367680						
ANR	6368139	Symbol	start		6367680						
ANR	6368140	Symbol	* siv		6367680						
ANR	6368141	Symbol	INT64_MAX		6367680						
ANR	6368142	Symbol	str		6367680						
ANR	6368143	Symbol	cur -> end		6367680						
ANR	6368144	Symbol	free_range		6367680						
ANR	6368145	Symbol	* cur		6367680						
ANR	6368146	Symbol	range_list_insert		6367680						
ANR	6368147	Symbol	strtoll		6367680						
ANR	6368148	Symbol	name		6367680						
ANR	6368149	Symbol	siv -> ranges		6367680						
ANR	6368150	Symbol	end		6367680						
ANR	6368151	Symbol	g_malloc0		6367680						
ANR	6368152	Symbol	cur -> begin		6367680						
ANR	6368153	Symbol	siv -> string		6367680						
ANR	6368154	Symbol	QERR_INVALID_PARAMETER_VALUE		6367680						
