command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8033670	File	/home/p4ultr4n/workplace/ReVeal/raw_code/sunrast_decode_frame_0.c								
ANR	8033671	Function	sunrast_decode_frame	1:0:0:4245							
ANR	8033672	FunctionDef	"sunrast_decode_frame (AVCodecContext * avctx , void * data , int * data_size , AVPacket * avpkt)"		8033671	0					
ANR	8033673	CompoundStatement		3:65:133:4245	8033671	0					
ANR	8033674	IdentifierDeclStatement	const uint8_t * buf = avpkt -> data ;	5:4:140:172	8033671	0	True				
ANR	8033675	IdentifierDecl	* buf = avpkt -> data		8033671	0					
ANR	8033676	IdentifierDeclType	const uint8_t *		8033671	0					
ANR	8033677	Identifier	buf		8033671	1					
ANR	8033678	AssignmentExpression	* buf = avpkt -> data		8033671	2		=			
ANR	8033679	Identifier	buf		8033671	0					
ANR	8033680	PtrMemberAccess	avpkt -> data		8033671	1					
ANR	8033681	Identifier	avpkt		8033671	0					
ANR	8033682	Identifier	data		8033671	1					
ANR	8033683	IdentifierDeclStatement	const uint8_t * buf_end = avpkt -> data + avpkt -> size ;	7:4:179:229	8033671	1	True				
ANR	8033684	IdentifierDecl	* buf_end = avpkt -> data + avpkt -> size		8033671	0					
ANR	8033685	IdentifierDeclType	const uint8_t *		8033671	0					
ANR	8033686	Identifier	buf_end		8033671	1					
ANR	8033687	AssignmentExpression	* buf_end = avpkt -> data + avpkt -> size		8033671	2		=			
ANR	8033688	Identifier	buf_end		8033671	0					
ANR	8033689	AdditiveExpression	avpkt -> data + avpkt -> size		8033671	1		+			
ANR	8033690	PtrMemberAccess	avpkt -> data		8033671	0					
ANR	8033691	Identifier	avpkt		8033671	0					
ANR	8033692	Identifier	data		8033671	1					
ANR	8033693	PtrMemberAccess	avpkt -> size		8033671	1					
ANR	8033694	Identifier	avpkt		8033671	0					
ANR	8033695	Identifier	size		8033671	1					
ANR	8033696	Statement	SUNRASTContext	9:4:236:249	8033671	2	True				
ANR	8033697	Statement	*	9:19:251:251	8033671	3	True				
ANR	8033698	Statement	const	9:21:253:257	8033671	4	True				
ANR	8033699	ExpressionStatement	s = avctx -> priv_data	9:27:259:279	8033671	5	True				
ANR	8033700	AssignmentExpression	s = avctx -> priv_data		8033671	0		=			
ANR	8033701	Identifier	s		8033671	0					
ANR	8033702	PtrMemberAccess	avctx -> priv_data		8033671	1					
ANR	8033703	Identifier	avctx		8033671	0					
ANR	8033704	Identifier	priv_data		8033671	1					
ANR	8033705	IdentifierDeclStatement	AVFrame * picture = data ;	11:4:286:309	8033671	6	True				
ANR	8033706	IdentifierDecl	* picture = data		8033671	0					
ANR	8033707	IdentifierDeclType	AVFrame *		8033671	0					
ANR	8033708	Identifier	picture		8033671	1					
ANR	8033709	AssignmentExpression	* picture = data		8033671	2		=			
ANR	8033710	Identifier	data		8033671	0					
ANR	8033711	Identifier	data		8033671	1					
ANR	8033712	Statement	AVFrame	13:4:316:322	8033671	7	True				
ANR	8033713	Statement	*	13:12:324:324	8033671	8	True				
ANR	8033714	Statement	const	13:14:326:330	8033671	9	True				
ANR	8033715	ExpressionStatement	p = & s -> picture	13:20:332:347	8033671	10	True				
ANR	8033716	AssignmentExpression	p = & s -> picture		8033671	0		=			
ANR	8033717	Identifier	p		8033671	0					
ANR	8033718	UnaryOperationExpression	& s -> picture		8033671	1					
ANR	8033719	UnaryOperator	&		8033671	0					
ANR	8033720	PtrMemberAccess	s -> picture		8033671	1					
ANR	8033721	Identifier	s		8033671	0					
ANR	8033722	Identifier	picture		8033671	1					
ANR	8033723	IdentifierDeclStatement	"unsigned int w , h , depth , type , maptype , maplength , stride , x , y , len , alen ;"	15:4:354:429	8033671	11	True				
ANR	8033724	IdentifierDecl	w		8033671	0					
ANR	8033725	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033726	Identifier	w		8033671	1					
ANR	8033727	IdentifierDecl	h		8033671	1					
ANR	8033728	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033729	Identifier	h		8033671	1					
ANR	8033730	IdentifierDecl	depth		8033671	2					
ANR	8033731	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033732	Identifier	depth		8033671	1					
ANR	8033733	IdentifierDecl	type		8033671	3					
ANR	8033734	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033735	Identifier	type		8033671	1					
ANR	8033736	IdentifierDecl	maptype		8033671	4					
ANR	8033737	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033738	Identifier	maptype		8033671	1					
ANR	8033739	IdentifierDecl	maplength		8033671	5					
ANR	8033740	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033741	Identifier	maplength		8033671	1					
ANR	8033742	IdentifierDecl	stride		8033671	6					
ANR	8033743	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033744	Identifier	stride		8033671	1					
ANR	8033745	IdentifierDecl	x		8033671	7					
ANR	8033746	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033747	Identifier	x		8033671	1					
ANR	8033748	IdentifierDecl	y		8033671	8					
ANR	8033749	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033750	Identifier	y		8033671	1					
ANR	8033751	IdentifierDecl	len		8033671	9					
ANR	8033752	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033753	Identifier	len		8033671	1					
ANR	8033754	IdentifierDecl	alen		8033671	10					
ANR	8033755	IdentifierDeclType	unsigned int		8033671	0					
ANR	8033756	Identifier	alen		8033671	1					
ANR	8033757	IdentifierDeclStatement	uint8_t * ptr ;	17:4:436:448	8033671	12	True				
ANR	8033758	IdentifierDecl	* ptr		8033671	0					
ANR	8033759	IdentifierDeclType	uint8_t *		8033671	0					
ANR	8033760	Identifier	ptr		8033671	1					
ANR	8033761	IdentifierDeclStatement	const uint8_t * bufstart = buf ;	19:4:455:484	8033671	13	True				
ANR	8033762	IdentifierDecl	* bufstart = buf		8033671	0					
ANR	8033763	IdentifierDeclType	const uint8_t *		8033671	0					
ANR	8033764	Identifier	bufstart		8033671	1					
ANR	8033765	AssignmentExpression	* bufstart = buf		8033671	2		=			
ANR	8033766	Identifier	buf		8033671	0					
ANR	8033767	Identifier	buf		8033671	1					
ANR	8033768	IfStatement	if ( avpkt -> size < 32 )		8033671	14					
ANR	8033769	Condition	avpkt -> size < 32	23:8:497:512	8033671	0	True				
ANR	8033770	RelationalExpression	avpkt -> size < 32		8033671	0		<			
ANR	8033771	PtrMemberAccess	avpkt -> size		8033671	0					
ANR	8033772	Identifier	avpkt		8033671	0					
ANR	8033773	Identifier	size		8033671	1					
ANR	8033774	PrimaryExpression	32		8033671	1					
ANR	8033775	ReturnStatement	return AVERROR_INVALIDDATA ;	25:8:524:550	8033671	1	True				
ANR	8033776	Identifier	AVERROR_INVALIDDATA		8033671	0					
ANR	8033777	IfStatement	if ( AV_RB32 ( buf ) != 0x59a66a95 )		8033671	15					
ANR	8033778	Condition	AV_RB32 ( buf ) != 0x59a66a95	29:8:563:588	8033671	0	True				
ANR	8033779	EqualityExpression	AV_RB32 ( buf ) != 0x59a66a95		8033671	0		!=			
ANR	8033780	CallExpression	AV_RB32 ( buf )		8033671	0					
ANR	8033781	Callee	AV_RB32		8033671	0					
ANR	8033782	Identifier	AV_RB32		8033671	0					
ANR	8033783	ArgumentList	buf		8033671	1					
ANR	8033784	Argument	buf		8033671	0					
ANR	8033785	Identifier	buf		8033671	0					
ANR	8033786	PrimaryExpression	0x59a66a95		8033671	1					
ANR	8033787	CompoundStatement		27:36:457:457	8033671	1					
ANR	8033788	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""this is not sunras encoded data\\n"" )"	31:8:602:666	8033671	0	True				
ANR	8033789	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""this is not sunras encoded data\\n"" )"		8033671	0					
ANR	8033790	Callee	av_log		8033671	0					
ANR	8033791	Identifier	av_log		8033671	0					
ANR	8033792	ArgumentList	avctx		8033671	1					
ANR	8033793	Argument	avctx		8033671	0					
ANR	8033794	Identifier	avctx		8033671	0					
ANR	8033795	Argument	AV_LOG_ERROR		8033671	1					
ANR	8033796	Identifier	AV_LOG_ERROR		8033671	0					
ANR	8033797	Argument	"""this is not sunras encoded data\\n"""		8033671	2					
ANR	8033798	PrimaryExpression	"""this is not sunras encoded data\\n"""		8033671	0					
ANR	8033799	ReturnStatement	return - 1 ;	33:8:677:686	8033671	1	True				
ANR	8033800	UnaryOperationExpression	- 1		8033671	0					
ANR	8033801	UnaryOperator	-		8033671	0					
ANR	8033802	PrimaryExpression	1		8033671	1					
ANR	8033803	ExpressionStatement	w = AV_RB32 ( buf + 4 )	39:4:702:728	8033671	16	True				
ANR	8033804	AssignmentExpression	w = AV_RB32 ( buf + 4 )		8033671	0		=			
ANR	8033805	Identifier	w		8033671	0					
ANR	8033806	CallExpression	AV_RB32 ( buf + 4 )		8033671	1					
ANR	8033807	Callee	AV_RB32		8033671	0					
ANR	8033808	Identifier	AV_RB32		8033671	0					
ANR	8033809	ArgumentList	buf + 4		8033671	1					
ANR	8033810	Argument	buf + 4		8033671	0					
ANR	8033811	AdditiveExpression	buf + 4		8033671	0		+			
ANR	8033812	Identifier	buf		8033671	0					
ANR	8033813	PrimaryExpression	4		8033671	1					
ANR	8033814	ExpressionStatement	h = AV_RB32 ( buf + 8 )	41:4:735:761	8033671	17	True				
ANR	8033815	AssignmentExpression	h = AV_RB32 ( buf + 8 )		8033671	0		=			
ANR	8033816	Identifier	h		8033671	0					
ANR	8033817	CallExpression	AV_RB32 ( buf + 8 )		8033671	1					
ANR	8033818	Callee	AV_RB32		8033671	0					
ANR	8033819	Identifier	AV_RB32		8033671	0					
ANR	8033820	ArgumentList	buf + 8		8033671	1					
ANR	8033821	Argument	buf + 8		8033671	0					
ANR	8033822	AdditiveExpression	buf + 8		8033671	0		+			
ANR	8033823	Identifier	buf		8033671	0					
ANR	8033824	PrimaryExpression	8		8033671	1					
ANR	8033825	ExpressionStatement	depth = AV_RB32 ( buf + 12 )	43:4:768:795	8033671	18	True				
ANR	8033826	AssignmentExpression	depth = AV_RB32 ( buf + 12 )		8033671	0		=			
ANR	8033827	Identifier	depth		8033671	0					
ANR	8033828	CallExpression	AV_RB32 ( buf + 12 )		8033671	1					
ANR	8033829	Callee	AV_RB32		8033671	0					
ANR	8033830	Identifier	AV_RB32		8033671	0					
ANR	8033831	ArgumentList	buf + 12		8033671	1					
ANR	8033832	Argument	buf + 12		8033671	0					
ANR	8033833	AdditiveExpression	buf + 12		8033671	0		+			
ANR	8033834	Identifier	buf		8033671	0					
ANR	8033835	PrimaryExpression	12		8033671	1					
ANR	8033836	ExpressionStatement	type = AV_RB32 ( buf + 20 )	45:4:802:829	8033671	19	True				
ANR	8033837	AssignmentExpression	type = AV_RB32 ( buf + 20 )		8033671	0		=			
ANR	8033838	Identifier	type		8033671	0					
ANR	8033839	CallExpression	AV_RB32 ( buf + 20 )		8033671	1					
ANR	8033840	Callee	AV_RB32		8033671	0					
ANR	8033841	Identifier	AV_RB32		8033671	0					
ANR	8033842	ArgumentList	buf + 20		8033671	1					
ANR	8033843	Argument	buf + 20		8033671	0					
ANR	8033844	AdditiveExpression	buf + 20		8033671	0		+			
ANR	8033845	Identifier	buf		8033671	0					
ANR	8033846	PrimaryExpression	20		8033671	1					
ANR	8033847	ExpressionStatement	maptype = AV_RB32 ( buf + 24 )	47:4:836:863	8033671	20	True				
ANR	8033848	AssignmentExpression	maptype = AV_RB32 ( buf + 24 )		8033671	0		=			
ANR	8033849	Identifier	maptype		8033671	0					
ANR	8033850	CallExpression	AV_RB32 ( buf + 24 )		8033671	1					
ANR	8033851	Callee	AV_RB32		8033671	0					
ANR	8033852	Identifier	AV_RB32		8033671	0					
ANR	8033853	ArgumentList	buf + 24		8033671	1					
ANR	8033854	Argument	buf + 24		8033671	0					
ANR	8033855	AdditiveExpression	buf + 24		8033671	0		+			
ANR	8033856	Identifier	buf		8033671	0					
ANR	8033857	PrimaryExpression	24		8033671	1					
ANR	8033858	ExpressionStatement	maplength = AV_RB32 ( buf + 28 )	49:4:870:897	8033671	21	True				
ANR	8033859	AssignmentExpression	maplength = AV_RB32 ( buf + 28 )		8033671	0		=			
ANR	8033860	Identifier	maplength		8033671	0					
ANR	8033861	CallExpression	AV_RB32 ( buf + 28 )		8033671	1					
ANR	8033862	Callee	AV_RB32		8033671	0					
ANR	8033863	Identifier	AV_RB32		8033671	0					
ANR	8033864	ArgumentList	buf + 28		8033671	1					
ANR	8033865	Argument	buf + 28		8033671	0					
ANR	8033866	AdditiveExpression	buf + 28		8033671	0		+			
ANR	8033867	Identifier	buf		8033671	0					
ANR	8033868	PrimaryExpression	28		8033671	1					
ANR	8033869	ExpressionStatement	buf += 32	51:4:904:918	8033671	22	True				
ANR	8033870	AssignmentExpression	buf += 32		8033671	0		+=			
ANR	8033871	Identifier	buf		8033671	0					
ANR	8033872	PrimaryExpression	32		8033671	1					
ANR	8033873	IfStatement	if ( type == RT_FORMAT_TIFF || type == RT_FORMAT_IFF )		8033671	23					
ANR	8033874	Condition	type == RT_FORMAT_TIFF || type == RT_FORMAT_IFF	55:8:931:977	8033671	0	True				
ANR	8033875	OrExpression	type == RT_FORMAT_TIFF || type == RT_FORMAT_IFF		8033671	0		||			
ANR	8033876	EqualityExpression	type == RT_FORMAT_TIFF		8033671	0		==			
ANR	8033877	Identifier	type		8033671	0					
ANR	8033878	Identifier	RT_FORMAT_TIFF		8033671	1					
ANR	8033879	EqualityExpression	type == RT_FORMAT_IFF		8033671	1		==			
ANR	8033880	Identifier	type		8033671	0					
ANR	8033881	Identifier	RT_FORMAT_IFF		8033671	1					
ANR	8033882	CompoundStatement		53:57:846:846	8033671	1					
ANR	8033883	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""unsupported (compression) type\\n"" )"	57:8:991:1054	8033671	0	True				
ANR	8033884	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""unsupported (compression) type\\n"" )"		8033671	0					
ANR	8033885	Callee	av_log		8033671	0					
ANR	8033886	Identifier	av_log		8033671	0					
ANR	8033887	ArgumentList	avctx		8033671	1					
ANR	8033888	Argument	avctx		8033671	0					
ANR	8033889	Identifier	avctx		8033671	0					
ANR	8033890	Argument	AV_LOG_ERROR		8033671	1					
ANR	8033891	Identifier	AV_LOG_ERROR		8033671	0					
ANR	8033892	Argument	"""unsupported (compression) type\\n"""		8033671	2					
ANR	8033893	PrimaryExpression	"""unsupported (compression) type\\n"""		8033671	0					
ANR	8033894	ReturnStatement	return - 1 ;	59:8:1065:1074	8033671	1	True				
ANR	8033895	UnaryOperationExpression	- 1		8033671	0					
ANR	8033896	UnaryOperator	-		8033671	0					
ANR	8033897	PrimaryExpression	1		8033671	1					
ANR	8033898	IfStatement	if ( type < RT_OLD || type > RT_FORMAT_IFF )		8033671	24					
ANR	8033899	Condition	type < RT_OLD || type > RT_FORMAT_IFF	63:8:1092:1128	8033671	0	True				
ANR	8033900	OrExpression	type < RT_OLD || type > RT_FORMAT_IFF		8033671	0		||			
ANR	8033901	RelationalExpression	type < RT_OLD		8033671	0		<			
ANR	8033902	Identifier	type		8033671	0					
ANR	8033903	Identifier	RT_OLD		8033671	1					
ANR	8033904	RelationalExpression	type > RT_FORMAT_IFF		8033671	1		>			
ANR	8033905	Identifier	type		8033671	0					
ANR	8033906	Identifier	RT_FORMAT_IFF		8033671	1					
ANR	8033907	CompoundStatement		61:47:997:997	8033671	1					
ANR	8033908	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""invalid (compression) type\\n"" )"	65:8:1142:1201	8033671	0	True				
ANR	8033909	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""invalid (compression) type\\n"" )"		8033671	0					
ANR	8033910	Callee	av_log		8033671	0					
ANR	8033911	Identifier	av_log		8033671	0					
ANR	8033912	ArgumentList	avctx		8033671	1					
ANR	8033913	Argument	avctx		8033671	0					
ANR	8033914	Identifier	avctx		8033671	0					
ANR	8033915	Argument	AV_LOG_ERROR		8033671	1					
ANR	8033916	Identifier	AV_LOG_ERROR		8033671	0					
ANR	8033917	Argument	"""invalid (compression) type\\n"""		8033671	2					
ANR	8033918	PrimaryExpression	"""invalid (compression) type\\n"""		8033671	0					
ANR	8033919	ReturnStatement	return - 1 ;	67:8:1212:1221	8033671	1	True				
ANR	8033920	UnaryOperationExpression	- 1		8033671	0					
ANR	8033921	UnaryOperator	-		8033671	0					
ANR	8033922	PrimaryExpression	1		8033671	1					
ANR	8033923	IfStatement	"if ( av_image_check_size ( w , h , 0 , avctx ) )"		8033671	25					
ANR	8033924	Condition	"av_image_check_size ( w , h , 0 , avctx )"	71:8:1239:1273	8033671	0	True				
ANR	8033925	CallExpression	"av_image_check_size ( w , h , 0 , avctx )"		8033671	0					
ANR	8033926	Callee	av_image_check_size		8033671	0					
ANR	8033927	Identifier	av_image_check_size		8033671	0					
ANR	8033928	ArgumentList	w		8033671	1					
ANR	8033929	Argument	w		8033671	0					
ANR	8033930	Identifier	w		8033671	0					
ANR	8033931	Argument	h		8033671	1					
ANR	8033932	Identifier	h		8033671	0					
ANR	8033933	Argument	0		8033671	2					
ANR	8033934	PrimaryExpression	0		8033671	0					
ANR	8033935	Argument	avctx		8033671	3					
ANR	8033936	Identifier	avctx		8033671	0					
ANR	8033937	CompoundStatement		69:45:1142:1142	8033671	1					
ANR	8033938	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""invalid image size\\n"" )"	73:8:1287:1338	8033671	0	True				
ANR	8033939	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""invalid image size\\n"" )"		8033671	0					
ANR	8033940	Callee	av_log		8033671	0					
ANR	8033941	Identifier	av_log		8033671	0					
ANR	8033942	ArgumentList	avctx		8033671	1					
ANR	8033943	Argument	avctx		8033671	0					
ANR	8033944	Identifier	avctx		8033671	0					
ANR	8033945	Argument	AV_LOG_ERROR		8033671	1					
ANR	8033946	Identifier	AV_LOG_ERROR		8033671	0					
ANR	8033947	Argument	"""invalid image size\\n"""		8033671	2					
ANR	8033948	PrimaryExpression	"""invalid image size\\n"""		8033671	0					
ANR	8033949	ReturnStatement	return - 1 ;	75:8:1349:1358	8033671	1	True				
ANR	8033950	UnaryOperationExpression	- 1		8033671	0					
ANR	8033951	UnaryOperator	-		8033671	0					
ANR	8033952	PrimaryExpression	1		8033671	1					
ANR	8033953	IfStatement	if ( maptype & ~1 )		8033671	26					
ANR	8033954	Condition	maptype & ~1	79:8:1376:1387	8033671	0	True				
ANR	8033955	BitAndExpression	maptype & ~1		8033671	0		&			
ANR	8033956	Identifier	maptype		8033671	0					
ANR	8033957	Identifier	~1		8033671	1					
ANR	8033958	CompoundStatement		77:22:1256:1256	8033671	1					
ANR	8033959	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""invalid colormap type\\n"" )"	81:8:1401:1455	8033671	0	True				
ANR	8033960	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""invalid colormap type\\n"" )"		8033671	0					
ANR	8033961	Callee	av_log		8033671	0					
ANR	8033962	Identifier	av_log		8033671	0					
ANR	8033963	ArgumentList	avctx		8033671	1					
ANR	8033964	Argument	avctx		8033671	0					
ANR	8033965	Identifier	avctx		8033671	0					
ANR	8033966	Argument	AV_LOG_ERROR		8033671	1					
ANR	8033967	Identifier	AV_LOG_ERROR		8033671	0					
ANR	8033968	Argument	"""invalid colormap type\\n"""		8033671	2					
ANR	8033969	PrimaryExpression	"""invalid colormap type\\n"""		8033671	0					
ANR	8033970	ReturnStatement	return - 1 ;	83:8:1466:1475	8033671	1	True				
ANR	8033971	UnaryOperationExpression	- 1		8033671	0					
ANR	8033972	UnaryOperator	-		8033671	0					
ANR	8033973	PrimaryExpression	1		8033671	1					
ANR	8033974	SwitchStatement	switch ( depth )		8033671	27					
ANR	8033975	Condition	depth	91:12:1501:1505	8033671	0	True				
ANR	8033976	Identifier	depth		8033671	0					
ANR	8033977	CompoundStatement		89:19:1374:1374	8033671	1					
ANR	8033978	Label	case 1 :	93:8:1519:1525	8033671	0	True				
ANR	8033979	ExpressionStatement	avctx -> pix_fmt = PIX_FMT_MONOWHITE	95:12:1540:1574	8033671	1	True				
ANR	8033980	AssignmentExpression	avctx -> pix_fmt = PIX_FMT_MONOWHITE		8033671	0		=			
ANR	8033981	PtrMemberAccess	avctx -> pix_fmt		8033671	0					
ANR	8033982	Identifier	avctx		8033671	0					
ANR	8033983	Identifier	pix_fmt		8033671	1					
ANR	8033984	Identifier	PIX_FMT_MONOWHITE		8033671	1					
ANR	8033985	BreakStatement	break ;	97:12:1589:1594	8033671	2	True				
ANR	8033986	Label	case 8 :	99:8:1605:1611	8033671	3	True				
ANR	8033987	ExpressionStatement	avctx -> pix_fmt = PIX_FMT_PAL8	101:12:1626:1655	8033671	4	True				
ANR	8033988	AssignmentExpression	avctx -> pix_fmt = PIX_FMT_PAL8		8033671	0		=			
ANR	8033989	PtrMemberAccess	avctx -> pix_fmt		8033671	0					
ANR	8033990	Identifier	avctx		8033671	0					
ANR	8033991	Identifier	pix_fmt		8033671	1					
ANR	8033992	Identifier	PIX_FMT_PAL8		8033671	1					
ANR	8033993	BreakStatement	break ;	103:12:1670:1675	8033671	5	True				
ANR	8033994	Label	case 24 :	105:8:1686:1693	8033671	6	True				
ANR	8033995	ExpressionStatement	avctx -> pix_fmt = ( type == RT_FORMAT_RGB ) ? PIX_FMT_RGB24 : PIX_FMT_BGR24	107:12:1708:1780	8033671	7	True				
ANR	8033996	AssignmentExpression	avctx -> pix_fmt = ( type == RT_FORMAT_RGB ) ? PIX_FMT_RGB24 : PIX_FMT_BGR24		8033671	0		=			
ANR	8033997	PtrMemberAccess	avctx -> pix_fmt		8033671	0					
ANR	8033998	Identifier	avctx		8033671	0					
ANR	8033999	Identifier	pix_fmt		8033671	1					
ANR	8034000	ConditionalExpression	( type == RT_FORMAT_RGB ) ? PIX_FMT_RGB24 : PIX_FMT_BGR24		8033671	1					
ANR	8034001	Condition	type == RT_FORMAT_RGB		8033671	0					
ANR	8034002	EqualityExpression	type == RT_FORMAT_RGB		8033671	0		==			
ANR	8034003	Identifier	type		8033671	0					
ANR	8034004	Identifier	RT_FORMAT_RGB		8033671	1					
ANR	8034005	Identifier	PIX_FMT_RGB24		8033671	1					
ANR	8034006	Identifier	PIX_FMT_BGR24		8033671	2					
ANR	8034007	BreakStatement	break ;	109:12:1795:1800	8033671	8	True				
ANR	8034008	Label	default :	111:8:1811:1818	8033671	9	True				
ANR	8034009	Identifier	default		8033671	0					
ANR	8034010	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""invalid depth\\n"" )"	113:12:1833:1879	8033671	10	True				
ANR	8034011	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""invalid depth\\n"" )"		8033671	0					
ANR	8034012	Callee	av_log		8033671	0					
ANR	8034013	Identifier	av_log		8033671	0					
ANR	8034014	ArgumentList	avctx		8033671	1					
ANR	8034015	Argument	avctx		8033671	0					
ANR	8034016	Identifier	avctx		8033671	0					
ANR	8034017	Argument	AV_LOG_ERROR		8033671	1					
ANR	8034018	Identifier	AV_LOG_ERROR		8033671	0					
ANR	8034019	Argument	"""invalid depth\\n"""		8033671	2					
ANR	8034020	PrimaryExpression	"""invalid depth\\n"""		8033671	0					
ANR	8034021	ReturnStatement	return - 1 ;	115:12:1894:1903	8033671	11	True				
ANR	8034022	UnaryOperationExpression	- 1		8033671	0					
ANR	8034023	UnaryOperator	-		8033671	0					
ANR	8034024	PrimaryExpression	1		8033671	1					
ANR	8034025	IfStatement	if ( p -> data [ 0 ] )		8033671	28					
ANR	8034026	Condition	p -> data [ 0 ]	121:8:1923:1932	8033671	0	True				
ANR	8034027	ArrayIndexing	p -> data [ 0 ]		8033671	0					
ANR	8034028	PtrMemberAccess	p -> data		8033671	0					
ANR	8034029	Identifier	p		8033671	0					
ANR	8034030	Identifier	data		8033671	1					
ANR	8034031	PrimaryExpression	0		8033671	1					
ANR	8034032	ExpressionStatement	"avctx -> release_buffer ( avctx , p )"	123:8:1944:1975	8033671	1	True				
ANR	8034033	CallExpression	"avctx -> release_buffer ( avctx , p )"		8033671	0					
ANR	8034034	Callee	avctx -> release_buffer		8033671	0					
ANR	8034035	PtrMemberAccess	avctx -> release_buffer		8033671	0					
ANR	8034036	Identifier	avctx		8033671	0					
ANR	8034037	Identifier	release_buffer		8033671	1					
ANR	8034038	ArgumentList	avctx		8033671	1					
ANR	8034039	Argument	avctx		8033671	0					
ANR	8034040	Identifier	avctx		8033671	0					
ANR	8034041	Argument	p		8033671	1					
ANR	8034042	Identifier	p		8033671	0					
ANR	8034043	IfStatement	if ( w != avctx -> width || h != avctx -> height )		8033671	29					
ANR	8034044	Condition	w != avctx -> width || h != avctx -> height	127:8:1988:2026	8033671	0	True				
ANR	8034045	OrExpression	w != avctx -> width || h != avctx -> height		8033671	0		||			
ANR	8034046	EqualityExpression	w != avctx -> width		8033671	0		!=			
ANR	8034047	Identifier	w		8033671	0					
ANR	8034048	PtrMemberAccess	avctx -> width		8033671	1					
ANR	8034049	Identifier	avctx		8033671	0					
ANR	8034050	Identifier	width		8033671	1					
ANR	8034051	EqualityExpression	h != avctx -> height		8033671	1		!=			
ANR	8034052	Identifier	h		8033671	0					
ANR	8034053	PtrMemberAccess	avctx -> height		8033671	1					
ANR	8034054	Identifier	avctx		8033671	0					
ANR	8034055	Identifier	height		8033671	1					
ANR	8034056	ExpressionStatement	"avcodec_set_dimensions ( avctx , w , h )"	129:8:2038:2073	8033671	1	True				
ANR	8034057	CallExpression	"avcodec_set_dimensions ( avctx , w , h )"		8033671	0					
ANR	8034058	Callee	avcodec_set_dimensions		8033671	0					
ANR	8034059	Identifier	avcodec_set_dimensions		8033671	0					
ANR	8034060	ArgumentList	avctx		8033671	1					
ANR	8034061	Argument	avctx		8033671	0					
ANR	8034062	Identifier	avctx		8033671	0					
ANR	8034063	Argument	w		8033671	1					
ANR	8034064	Identifier	w		8033671	0					
ANR	8034065	Argument	h		8033671	2					
ANR	8034066	Identifier	h		8033671	0					
ANR	8034067	IfStatement	"if ( avctx -> get_buffer ( avctx , p ) < 0 )"		8033671	30					
ANR	8034068	Condition	"avctx -> get_buffer ( avctx , p ) < 0"	131:8:2084:2114	8033671	0	True				
ANR	8034069	RelationalExpression	"avctx -> get_buffer ( avctx , p ) < 0"		8033671	0		<			
ANR	8034070	CallExpression	"avctx -> get_buffer ( avctx , p )"		8033671	0					
ANR	8034071	Callee	avctx -> get_buffer		8033671	0					
ANR	8034072	PtrMemberAccess	avctx -> get_buffer		8033671	0					
ANR	8034073	Identifier	avctx		8033671	0					
ANR	8034074	Identifier	get_buffer		8033671	1					
ANR	8034075	ArgumentList	avctx		8033671	1					
ANR	8034076	Argument	avctx		8033671	0					
ANR	8034077	Identifier	avctx		8033671	0					
ANR	8034078	Argument	p		8033671	1					
ANR	8034079	Identifier	p		8033671	0					
ANR	8034080	PrimaryExpression	0		8033671	1					
ANR	8034081	CompoundStatement		129:41:1983:1983	8033671	1					
ANR	8034082	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""get_buffer() failed\\n"" )"	133:8:2128:2180	8033671	0	True				
ANR	8034083	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""get_buffer() failed\\n"" )"		8033671	0					
ANR	8034084	Callee	av_log		8033671	0					
ANR	8034085	Identifier	av_log		8033671	0					
ANR	8034086	ArgumentList	avctx		8033671	1					
ANR	8034087	Argument	avctx		8033671	0					
ANR	8034088	Identifier	avctx		8033671	0					
ANR	8034089	Argument	AV_LOG_ERROR		8033671	1					
ANR	8034090	Identifier	AV_LOG_ERROR		8033671	0					
ANR	8034091	Argument	"""get_buffer() failed\\n"""		8033671	2					
ANR	8034092	PrimaryExpression	"""get_buffer() failed\\n"""		8033671	0					
ANR	8034093	ReturnStatement	return - 1 ;	135:8:2191:2200	8033671	1	True				
ANR	8034094	UnaryOperationExpression	- 1		8033671	0					
ANR	8034095	UnaryOperator	-		8033671	0					
ANR	8034096	PrimaryExpression	1		8033671	1					
ANR	8034097	ExpressionStatement	p -> pict_type = AV_PICTURE_TYPE_I	141:4:2216:2248	8033671	31	True				
ANR	8034098	AssignmentExpression	p -> pict_type = AV_PICTURE_TYPE_I		8033671	0		=			
ANR	8034099	PtrMemberAccess	p -> pict_type		8033671	0					
ANR	8034100	Identifier	p		8033671	0					
ANR	8034101	Identifier	pict_type		8033671	1					
ANR	8034102	Identifier	AV_PICTURE_TYPE_I		8033671	1					
ANR	8034103	IfStatement	if ( buf_end - buf < maplength )		8033671	32					
ANR	8034104	Condition	buf_end - buf < maplength	145:8:2261:2285	8033671	0	True				
ANR	8034105	RelationalExpression	buf_end - buf < maplength		8033671	0		<			
ANR	8034106	AdditiveExpression	buf_end - buf		8033671	0		-			
ANR	8034107	Identifier	buf_end		8033671	0					
ANR	8034108	Identifier	buf		8033671	1					
ANR	8034109	Identifier	maplength		8033671	1					
ANR	8034110	ReturnStatement	return AVERROR_INVALIDDATA ;	147:8:2297:2323	8033671	1	True				
ANR	8034111	Identifier	AVERROR_INVALIDDATA		8033671	0					
ANR	8034112	IfStatement	if ( depth != 8 && maplength )		8033671	33					
ANR	8034113	Condition	depth != 8 && maplength	151:8:2336:2358	8033671	0	True				
ANR	8034114	AndExpression	depth != 8 && maplength		8033671	0		&&			
ANR	8034115	EqualityExpression	depth != 8		8033671	0		!=			
ANR	8034116	Identifier	depth		8033671	0					
ANR	8034117	PrimaryExpression	8		8033671	1					
ANR	8034118	Identifier	maplength		8033671	1					
ANR	8034119	CompoundStatement		149:33:2227:2227	8033671	1					
ANR	8034120	ExpressionStatement	"av_log ( avctx , AV_LOG_WARNING , ""useless colormap found or file is corrupted, trying to recover\\n"" )"	153:8:2372:2469	8033671	0	True				
ANR	8034121	CallExpression	"av_log ( avctx , AV_LOG_WARNING , ""useless colormap found or file is corrupted, trying to recover\\n"" )"		8033671	0					
ANR	8034122	Callee	av_log		8033671	0					
ANR	8034123	Identifier	av_log		8033671	0					
ANR	8034124	ArgumentList	avctx		8033671	1					
ANR	8034125	Argument	avctx		8033671	0					
ANR	8034126	Identifier	avctx		8033671	0					
ANR	8034127	Argument	AV_LOG_WARNING		8033671	1					
ANR	8034128	Identifier	AV_LOG_WARNING		8033671	0					
ANR	8034129	Argument	"""useless colormap found or file is corrupted, trying to recover\\n"""		8033671	2					
ANR	8034130	PrimaryExpression	"""useless colormap found or file is corrupted, trying to recover\\n"""		8033671	0					
ANR	8034131	ElseStatement	else		8033671	0					
ANR	8034132	IfStatement	if ( depth == 8 )		8033671	0					
ANR	8034133	Condition	depth == 8	157:15:2489:2498	8033671	0	True				
ANR	8034134	EqualityExpression	depth == 8		8033671	0		==			
ANR	8034135	Identifier	depth		8033671	0					
ANR	8034136	PrimaryExpression	8		8033671	1					
ANR	8034137	CompoundStatement		157:8:2378:2410	8033671	1					
ANR	8034138	IdentifierDeclStatement	unsigned int len = maplength / 3 ;	159:8:2512:2544	8033671	0	True				
ANR	8034139	IdentifierDecl	len = maplength / 3		8033671	0					
ANR	8034140	IdentifierDeclType	unsigned int		8033671	0					
ANR	8034141	Identifier	len		8033671	1					
ANR	8034142	AssignmentExpression	len = maplength / 3		8033671	2		=			
ANR	8034143	Identifier	len		8033671	0					
ANR	8034144	MultiplicativeExpression	maplength / 3		8033671	1		/			
ANR	8034145	Identifier	maplength		8033671	0					
ANR	8034146	PrimaryExpression	3		8033671	1					
ANR	8034147	IfStatement	if ( ! maplength )		8033671	1					
ANR	8034148	Condition	! maplength	163:12:2561:2570	8033671	0	True				
ANR	8034149	UnaryOperationExpression	! maplength		8033671	0					
ANR	8034150	UnaryOperator	!		8033671	0					
ANR	8034151	Identifier	maplength		8033671	1					
ANR	8034152	CompoundStatement		161:24:2439:2439	8033671	1					
ANR	8034153	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""colormap expected\\n"" )"	165:12:2588:2638	8033671	0	True				
ANR	8034154	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""colormap expected\\n"" )"		8033671	0					
ANR	8034155	Callee	av_log		8033671	0					
ANR	8034156	Identifier	av_log		8033671	0					
ANR	8034157	ArgumentList	avctx		8033671	1					
ANR	8034158	Argument	avctx		8033671	0					
ANR	8034159	Identifier	avctx		8033671	0					
ANR	8034160	Argument	AV_LOG_ERROR		8033671	1					
ANR	8034161	Identifier	AV_LOG_ERROR		8033671	0					
ANR	8034162	Argument	"""colormap expected\\n"""		8033671	2					
ANR	8034163	PrimaryExpression	"""colormap expected\\n"""		8033671	0					
ANR	8034164	ReturnStatement	return - 1 ;	167:12:2653:2662	8033671	1	True				
ANR	8034165	UnaryOperationExpression	- 1		8033671	0					
ANR	8034166	UnaryOperator	-		8033671	0					
ANR	8034167	PrimaryExpression	1		8033671	1					
ANR	8034168	IfStatement	if ( maplength % 3 || maplength > 768 )		8033671	2					
ANR	8034169	Condition	maplength % 3 || maplength > 768	171:12:2688:2719	8033671	0	True				
ANR	8034170	OrExpression	maplength % 3 || maplength > 768		8033671	0		||			
ANR	8034171	MultiplicativeExpression	maplength % 3		8033671	0		%			
ANR	8034172	Identifier	maplength		8033671	0					
ANR	8034173	PrimaryExpression	3		8033671	1					
ANR	8034174	RelationalExpression	maplength > 768		8033671	1		>			
ANR	8034175	Identifier	maplength		8033671	0					
ANR	8034176	PrimaryExpression	768		8033671	1					
ANR	8034177	CompoundStatement		169:46:2588:2588	8033671	1					
ANR	8034178	ExpressionStatement	"av_log ( avctx , AV_LOG_WARNING , ""invalid colormap length\\n"" )"	173:12:2737:2795	8033671	0	True				
ANR	8034179	CallExpression	"av_log ( avctx , AV_LOG_WARNING , ""invalid colormap length\\n"" )"		8033671	0					
ANR	8034180	Callee	av_log		8033671	0					
ANR	8034181	Identifier	av_log		8033671	0					
ANR	8034182	ArgumentList	avctx		8033671	1					
ANR	8034183	Argument	avctx		8033671	0					
ANR	8034184	Identifier	avctx		8033671	0					
ANR	8034185	Argument	AV_LOG_WARNING		8033671	1					
ANR	8034186	Identifier	AV_LOG_WARNING		8033671	0					
ANR	8034187	Argument	"""invalid colormap length\\n"""		8033671	2					
ANR	8034188	PrimaryExpression	"""invalid colormap length\\n"""		8033671	0					
ANR	8034189	ReturnStatement	return - 1 ;	175:12:2810:2819	8033671	1	True				
ANR	8034190	UnaryOperationExpression	- 1		8033671	0					
ANR	8034191	UnaryOperator	-		8033671	0					
ANR	8034192	PrimaryExpression	1		8033671	1					
ANR	8034193	ExpressionStatement	ptr = p -> data [ 1 ]	181:8:2843:2859	8033671	3	True				
ANR	8034194	AssignmentExpression	ptr = p -> data [ 1 ]		8033671	0		=			
ANR	8034195	Identifier	ptr		8033671	0					
ANR	8034196	ArrayIndexing	p -> data [ 1 ]		8033671	1					
ANR	8034197	PtrMemberAccess	p -> data		8033671	0					
ANR	8034198	Identifier	p		8033671	0					
ANR	8034199	Identifier	data		8033671	1					
ANR	8034200	PrimaryExpression	1		8033671	1					
ANR	8034201	ForStatement	"for ( x = 0 ; x < len ; x ++ , ptr += 4 )"		8033671	4					
ANR	8034202	ForInit	x = 0 ;	183:13:2875:2878	8033671	0	True				
ANR	8034203	AssignmentExpression	x = 0		8033671	0		=			
ANR	8034204	Identifier	x		8033671	0					
ANR	8034205	PrimaryExpression	0		8033671	1					
ANR	8034206	Condition	x < len	183:18:2880:2884	8033671	1	True				
ANR	8034207	RelationalExpression	x < len		8033671	0		<			
ANR	8034208	Identifier	x		8033671	0					
ANR	8034209	Identifier	len		8033671	1					
ANR	8034210	Expression	"x ++ , ptr += 4"	183:25:2887:2897	8033671	2	True				
ANR	8034211	PostIncDecOperationExpression	x ++		8033671	0					
ANR	8034212	Identifier	x		8033671	0					
ANR	8034213	IncDec	++		8033671	1					
ANR	8034214	AssignmentExpression	ptr += 4		8033671	1		+=			
ANR	8034215	Identifier	ptr		8033671	0					
ANR	8034216	PrimaryExpression	4		8033671	1					
ANR	8034217	ExpressionStatement	* ( uint32_t * ) ptr = ( buf [ x ] << 16 ) + ( buf [ len + x ] << 8 ) + buf [ len + len + x ]	185:12:2913:2979	8033671	3	True				
ANR	8034218	AssignmentExpression	* ( uint32_t * ) ptr = ( buf [ x ] << 16 ) + ( buf [ len + x ] << 8 ) + buf [ len + len + x ]		8033671	0		=			
ANR	8034219	UnaryOperationExpression	* ( uint32_t * ) ptr		8033671	0					
ANR	8034220	UnaryOperator	*		8033671	0					
ANR	8034221	CastExpression	( uint32_t * ) ptr		8033671	1					
ANR	8034222	CastTarget	uint32_t *		8033671	0					
ANR	8034223	Identifier	ptr		8033671	1					
ANR	8034224	AdditiveExpression	( buf [ x ] << 16 ) + ( buf [ len + x ] << 8 ) + buf [ len + len + x ]		8033671	1		+			
ANR	8034225	ShiftExpression	buf [ x ] << 16		8033671	0		<<			
ANR	8034226	ArrayIndexing	buf [ x ]		8033671	0					
ANR	8034227	Identifier	buf		8033671	0					
ANR	8034228	Identifier	x		8033671	1					
ANR	8034229	PrimaryExpression	16		8033671	1					
ANR	8034230	AdditiveExpression	( buf [ len + x ] << 8 ) + buf [ len + len + x ]		8033671	1		+			
ANR	8034231	ShiftExpression	buf [ len + x ] << 8		8033671	0		<<			
ANR	8034232	ArrayIndexing	buf [ len + x ]		8033671	0					
ANR	8034233	Identifier	buf		8033671	0					
ANR	8034234	AdditiveExpression	len + x		8033671	1		+			
ANR	8034235	Identifier	len		8033671	0					
ANR	8034236	Identifier	x		8033671	1					
ANR	8034237	PrimaryExpression	8		8033671	1					
ANR	8034238	ArrayIndexing	buf [ len + len + x ]		8033671	1					
ANR	8034239	Identifier	buf		8033671	0					
ANR	8034240	AdditiveExpression	len + len + x		8033671	1		+			
ANR	8034241	Identifier	len		8033671	0					
ANR	8034242	AdditiveExpression	len + x		8033671	1		+			
ANR	8034243	Identifier	len		8033671	0					
ANR	8034244	Identifier	x		8033671	1					
ANR	8034245	ExpressionStatement	buf += maplength	191:4:2995:3011	8033671	34	True				
ANR	8034246	AssignmentExpression	buf += maplength		8033671	0		+=			
ANR	8034247	Identifier	buf		8033671	0					
ANR	8034248	Identifier	maplength		8033671	1					
ANR	8034249	ExpressionStatement	ptr = p -> data [ 0 ]	195:4:3020:3039	8033671	35	True				
ANR	8034250	AssignmentExpression	ptr = p -> data [ 0 ]		8033671	0		=			
ANR	8034251	Identifier	ptr		8033671	0					
ANR	8034252	ArrayIndexing	p -> data [ 0 ]		8033671	1					
ANR	8034253	PtrMemberAccess	p -> data		8033671	0					
ANR	8034254	Identifier	p		8033671	0					
ANR	8034255	Identifier	data		8033671	1					
ANR	8034256	PrimaryExpression	0		8033671	1					
ANR	8034257	ExpressionStatement	stride = p -> linesize [ 0 ]	197:4:3046:3069	8033671	36	True				
ANR	8034258	AssignmentExpression	stride = p -> linesize [ 0 ]		8033671	0		=			
ANR	8034259	Identifier	stride		8033671	0					
ANR	8034260	ArrayIndexing	p -> linesize [ 0 ]		8033671	1					
ANR	8034261	PtrMemberAccess	p -> linesize		8033671	0					
ANR	8034262	Identifier	p		8033671	0					
ANR	8034263	Identifier	linesize		8033671	1					
ANR	8034264	PrimaryExpression	0		8033671	1					
ANR	8034265	ExpressionStatement	len = ( depth * w + 7 ) >> 3	203:4:3132:3159	8033671	37	True				
ANR	8034266	AssignmentExpression	len = ( depth * w + 7 ) >> 3		8033671	0		=			
ANR	8034267	Identifier	len		8033671	0					
ANR	8034268	ShiftExpression	( depth * w + 7 ) >> 3		8033671	1		>>			
ANR	8034269	AdditiveExpression	depth * w + 7		8033671	0		+			
ANR	8034270	MultiplicativeExpression	depth * w		8033671	0		*			
ANR	8034271	Identifier	depth		8033671	0					
ANR	8034272	Identifier	w		8033671	1					
ANR	8034273	PrimaryExpression	7		8033671	1					
ANR	8034274	PrimaryExpression	3		8033671	1					
ANR	8034275	ExpressionStatement	alen = len + ( len & 1 )	205:4:3166:3186	8033671	38	True				
ANR	8034276	AssignmentExpression	alen = len + ( len & 1 )		8033671	0		=			
ANR	8034277	Identifier	alen		8033671	0					
ANR	8034278	AdditiveExpression	len + ( len & 1 )		8033671	1		+			
ANR	8034279	Identifier	len		8033671	0					
ANR	8034280	BitAndExpression	len & 1		8033671	1		&			
ANR	8034281	Identifier	len		8033671	0					
ANR	8034282	PrimaryExpression	1		8033671	1					
ANR	8034283	IfStatement	if ( type == RT_BYTE_ENCODED )		8033671	39					
ANR	8034284	Condition	type == RT_BYTE_ENCODED	209:8:3199:3221	8033671	0	True				
ANR	8034285	EqualityExpression	type == RT_BYTE_ENCODED		8033671	0		==			
ANR	8034286	Identifier	type		8033671	0					
ANR	8034287	Identifier	RT_BYTE_ENCODED		8033671	1					
ANR	8034288	CompoundStatement		211:8:3126:3155	8033671	1					
ANR	8034289	IdentifierDeclStatement	"int value , run ;"	211:8:3235:3249	8033671	0	True				
ANR	8034290	IdentifierDecl	value		8033671	0					
ANR	8034291	IdentifierDeclType	int		8033671	0					
ANR	8034292	Identifier	value		8033671	1					
ANR	8034293	IdentifierDecl	run		8033671	1					
ANR	8034294	IdentifierDeclType	int		8033671	0					
ANR	8034295	Identifier	run		8033671	1					
ANR	8034296	IdentifierDeclStatement	uint8_t * end = ptr + h * stride ;	213:8:3260:3289	8033671	1	True				
ANR	8034297	IdentifierDecl	* end = ptr + h * stride		8033671	0					
ANR	8034298	IdentifierDeclType	uint8_t *		8033671	0					
ANR	8034299	Identifier	end		8033671	1					
ANR	8034300	AssignmentExpression	* end = ptr + h * stride		8033671	2		=			
ANR	8034301	Identifier	end		8033671	0					
ANR	8034302	AdditiveExpression	ptr + h * stride		8033671	1		+			
ANR	8034303	Identifier	ptr		8033671	0					
ANR	8034304	MultiplicativeExpression	h * stride		8033671	1		*			
ANR	8034305	Identifier	h		8033671	0					
ANR	8034306	Identifier	stride		8033671	1					
ANR	8034307	ExpressionStatement	x = 0	217:8:3302:3307	8033671	2	True				
ANR	8034308	AssignmentExpression	x = 0		8033671	0		=			
ANR	8034309	Identifier	x		8033671	0					
ANR	8034310	PrimaryExpression	0		8033671	1					
ANR	8034311	WhileStatement	while ( ptr != end && buf < buf_end )		8033671	3					
ANR	8034312	Condition	ptr != end && buf < buf_end	219:15:3325:3351	8033671	0	True				
ANR	8034313	AndExpression	ptr != end && buf < buf_end		8033671	0		&&			
ANR	8034314	EqualityExpression	ptr != end		8033671	0		!=			
ANR	8034315	Identifier	ptr		8033671	0					
ANR	8034316	Identifier	end		8033671	1					
ANR	8034317	RelationalExpression	buf < buf_end		8033671	1		<			
ANR	8034318	Identifier	buf		8033671	0					
ANR	8034319	Identifier	buf_end		8033671	1					
ANR	8034320	CompoundStatement		217:44:3220:3220	8033671	1					
ANR	8034321	ExpressionStatement	run = 1	221:12:3369:3376	8033671	0	True				
ANR	8034322	AssignmentExpression	run = 1		8033671	0		=			
ANR	8034323	Identifier	run		8033671	0					
ANR	8034324	PrimaryExpression	1		8033671	1					
ANR	8034325	IfStatement	if ( buf_end - buf < 1 )		8033671	1					
ANR	8034326	Condition	buf_end - buf < 1	223:16:3395:3411	8033671	0	True				
ANR	8034327	RelationalExpression	buf_end - buf < 1		8033671	0		<			
ANR	8034328	AdditiveExpression	buf_end - buf		8033671	0		-			
ANR	8034329	Identifier	buf_end		8033671	0					
ANR	8034330	Identifier	buf		8033671	1					
ANR	8034331	PrimaryExpression	1		8033671	1					
ANR	8034332	ReturnStatement	return AVERROR_INVALIDDATA ;	225:16:3431:3457	8033671	1	True				
ANR	8034333	Identifier	AVERROR_INVALIDDATA		8033671	0					
ANR	8034334	IfStatement	if ( ( value = * buf ++ ) == 0x80 )		8033671	2					
ANR	8034335	Condition	( value = * buf ++ ) == 0x80	229:16:3478:3501	8033671	0	True				
ANR	8034336	EqualityExpression	( value = * buf ++ ) == 0x80		8033671	0		==			
ANR	8034337	AssignmentExpression	value = * buf ++		8033671	0		=			
ANR	8034338	Identifier	value		8033671	0					
ANR	8034339	UnaryOperationExpression	* buf ++		8033671	1					
ANR	8034340	UnaryOperator	*		8033671	0					
ANR	8034341	PostIncDecOperationExpression	buf ++		8033671	1					
ANR	8034342	Identifier	buf		8033671	0					
ANR	8034343	IncDec	++		8033671	1					
ANR	8034344	PrimaryExpression	0x80		8033671	1					
ANR	8034345	CompoundStatement		227:42:3370:3370	8033671	1					
ANR	8034346	ExpressionStatement	run = * buf ++ + 1	231:16:3523:3539	8033671	0	True				
ANR	8034347	AssignmentExpression	run = * buf ++ + 1		8033671	0		=			
ANR	8034348	Identifier	run		8033671	0					
ANR	8034349	AdditiveExpression	* buf ++ + 1		8033671	1		+			
ANR	8034350	UnaryOperationExpression	* buf ++		8033671	0					
ANR	8034351	UnaryOperator	*		8033671	0					
ANR	8034352	PostIncDecOperationExpression	buf ++		8033671	1					
ANR	8034353	Identifier	buf		8033671	0					
ANR	8034354	IncDec	++		8033671	1					
ANR	8034355	PrimaryExpression	1		8033671	1					
ANR	8034356	IfStatement	if ( run != 1 )		8033671	1					
ANR	8034357	Condition	run != 1	233:20:3562:3569	8033671	0	True				
ANR	8034358	EqualityExpression	run != 1		8033671	0		!=			
ANR	8034359	Identifier	run		8033671	0					
ANR	8034360	PrimaryExpression	1		8033671	1					
ANR	8034361	ExpressionStatement	value = * buf ++	235:20:3593:3607	8033671	1	True				
ANR	8034362	AssignmentExpression	value = * buf ++		8033671	0		=			
ANR	8034363	Identifier	value		8033671	0					
ANR	8034364	UnaryOperationExpression	* buf ++		8033671	1					
ANR	8034365	UnaryOperator	*		8033671	0					
ANR	8034366	PostIncDecOperationExpression	buf ++		8033671	1					
ANR	8034367	Identifier	buf		8033671	0					
ANR	8034368	IncDec	++		8033671	1					
ANR	8034369	WhileStatement	while ( run -- )		8033671	3					
ANR	8034370	Condition	run --	239:19:3644:3648	8033671	0	True				
ANR	8034371	PostIncDecOperationExpression	run --		8033671	0					
ANR	8034372	Identifier	run		8033671	0					
ANR	8034373	IncDec	--		8033671	1					
ANR	8034374	CompoundStatement		237:26:3517:3517	8033671	1					
ANR	8034375	IfStatement	if ( x < len )		8033671	0					
ANR	8034376	Condition	x < len	241:20:3674:3680	8033671	0	True				
ANR	8034377	RelationalExpression	x < len		8033671	0		<			
ANR	8034378	Identifier	x		8033671	0					
ANR	8034379	Identifier	len		8033671	1					
ANR	8034380	ExpressionStatement	ptr [ x ] = value	243:20:3704:3718	8033671	1	True				
ANR	8034381	AssignmentExpression	ptr [ x ] = value		8033671	0		=			
ANR	8034382	ArrayIndexing	ptr [ x ]		8033671	0					
ANR	8034383	Identifier	ptr		8033671	0					
ANR	8034384	Identifier	x		8033671	1					
ANR	8034385	Identifier	value		8033671	1					
ANR	8034386	IfStatement	if ( ++ x >= alen )		8033671	1					
ANR	8034387	Condition	++ x >= alen	245:20:3741:3751	8033671	0	True				
ANR	8034388	RelationalExpression	++ x >= alen		8033671	0		>=			
ANR	8034389	UnaryExpression	++ x		8033671	0					
ANR	8034390	IncDec	++		8033671	0					
ANR	8034391	Identifier	x		8033671	1					
ANR	8034392	Identifier	alen		8033671	1					
ANR	8034393	CompoundStatement		243:33:3620:3620	8033671	1					
ANR	8034394	ExpressionStatement	x = 0	247:20:3777:3782	8033671	0	True				
ANR	8034395	AssignmentExpression	x = 0		8033671	0		=			
ANR	8034396	Identifier	x		8033671	0					
ANR	8034397	PrimaryExpression	0		8033671	1					
ANR	8034398	ExpressionStatement	ptr += stride	249:20:3805:3818	8033671	1	True				
ANR	8034399	AssignmentExpression	ptr += stride		8033671	0		+=			
ANR	8034400	Identifier	ptr		8033671	0					
ANR	8034401	Identifier	stride		8033671	1					
ANR	8034402	IfStatement	if ( ptr == end )		8033671	2					
ANR	8034403	Condition	ptr == end	251:24:3845:3854	8033671	0	True				
ANR	8034404	EqualityExpression	ptr == end		8033671	0		==			
ANR	8034405	Identifier	ptr		8033671	0					
ANR	8034406	Identifier	end		8033671	1					
ANR	8034407	BreakStatement	break ;	253:24:3882:3887	8033671	1	True				
ANR	8034408	ElseStatement	else		8033671	0					
ANR	8034409	CompoundStatement		259:11:3812:3812	8033671	0					
ANR	8034410	ForStatement	for ( y = 0 ; y < h ; y ++ )		8033671	0					
ANR	8034411	ForInit	y = 0 ;	263:13:3962:3965	8033671	0	True				
ANR	8034412	AssignmentExpression	y = 0		8033671	0		=			
ANR	8034413	Identifier	y		8033671	0					
ANR	8034414	PrimaryExpression	0		8033671	1					
ANR	8034415	Condition	y < h	263:18:3967:3969	8033671	1	True				
ANR	8034416	RelationalExpression	y < h		8033671	0		<			
ANR	8034417	Identifier	y		8033671	0					
ANR	8034418	Identifier	h		8033671	1					
ANR	8034419	PostIncDecOperationExpression	y ++	263:23:3972:3974	8033671	2	True				
ANR	8034420	Identifier	y		8033671	0					
ANR	8034421	IncDec	++		8033671	1					
ANR	8034422	CompoundStatement		261:28:3843:3843	8033671	3					
ANR	8034423	IfStatement	if ( buf_end - buf < len )		8033671	0					
ANR	8034424	Condition	buf_end - buf < len	265:16:3996:4014	8033671	0	True				
ANR	8034425	RelationalExpression	buf_end - buf < len		8033671	0		<			
ANR	8034426	AdditiveExpression	buf_end - buf		8033671	0		-			
ANR	8034427	Identifier	buf_end		8033671	0					
ANR	8034428	Identifier	buf		8033671	1					
ANR	8034429	Identifier	len		8033671	1					
ANR	8034430	BreakStatement	break ;	267:16:4034:4039	8033671	1	True				
ANR	8034431	ExpressionStatement	"memcpy ( ptr , buf , len )"	269:12:4054:4075	8033671	1	True				
ANR	8034432	CallExpression	"memcpy ( ptr , buf , len )"		8033671	0					
ANR	8034433	Callee	memcpy		8033671	0					
ANR	8034434	Identifier	memcpy		8033671	0					
ANR	8034435	ArgumentList	ptr		8033671	1					
ANR	8034436	Argument	ptr		8033671	0					
ANR	8034437	Identifier	ptr		8033671	0					
ANR	8034438	Argument	buf		8033671	1					
ANR	8034439	Identifier	buf		8033671	0					
ANR	8034440	Argument	len		8033671	2					
ANR	8034441	Identifier	len		8033671	0					
ANR	8034442	ExpressionStatement	ptr += stride	271:12:4090:4103	8033671	2	True				
ANR	8034443	AssignmentExpression	ptr += stride		8033671	0		+=			
ANR	8034444	Identifier	ptr		8033671	0					
ANR	8034445	Identifier	stride		8033671	1					
ANR	8034446	ExpressionStatement	buf += alen	273:12:4118:4129	8033671	3	True				
ANR	8034447	AssignmentExpression	buf += alen		8033671	0		+=			
ANR	8034448	Identifier	buf		8033671	0					
ANR	8034449	Identifier	alen		8033671	1					
ANR	8034450	ExpressionStatement	* picture = s -> picture	281:4:4156:4177	8033671	40	True				
ANR	8034451	AssignmentExpression	* picture = s -> picture		8033671	0		=			
ANR	8034452	UnaryOperationExpression	* picture		8033671	0					
ANR	8034453	UnaryOperator	*		8033671	0					
ANR	8034454	Identifier	picture		8033671	1					
ANR	8034455	PtrMemberAccess	s -> picture		8033671	1					
ANR	8034456	Identifier	s		8033671	0					
ANR	8034457	Identifier	picture		8033671	1					
ANR	8034458	ExpressionStatement	* data_size = sizeof ( AVFrame )	283:4:4184:4212	8033671	41	True				
ANR	8034459	AssignmentExpression	* data_size = sizeof ( AVFrame )		8033671	0		=			
ANR	8034460	UnaryOperationExpression	* data_size		8033671	0					
ANR	8034461	UnaryOperator	*		8033671	0					
ANR	8034462	Identifier	data_size		8033671	1					
ANR	8034463	SizeofExpression	sizeof ( AVFrame )		8033671	1					
ANR	8034464	Sizeof	sizeof		8033671	0					
ANR	8034465	SizeofOperand	AVFrame		8033671	1					
ANR	8034466	ReturnStatement	return buf - bufstart ;	287:4:4221:4242	8033671	42	True				
ANR	8034467	AdditiveExpression	buf - bufstart		8033671	0		-			
ANR	8034468	Identifier	buf		8033671	0					
ANR	8034469	Identifier	bufstart		8033671	1					
ANR	8034470	ReturnType	static int		8033671	1					
ANR	8034471	Identifier	sunrast_decode_frame		8033671	2					
ANR	8034472	ParameterList	"AVCodecContext * avctx , void * data , int * data_size , AVPacket * avpkt"		8033671	3					
ANR	8034473	Parameter	AVCodecContext * avctx	1:32:32:52	8033671	0	True				
ANR	8034474	ParameterType	AVCodecContext *		8033671	0					
ANR	8034475	Identifier	avctx		8033671	1					
ANR	8034476	Parameter	void * data	1:55:55:64	8033671	1	True				
ANR	8034477	ParameterType	void *		8033671	0					
ANR	8034478	Identifier	data		8033671	1					
ANR	8034479	Parameter	int * data_size	3:32:100:113	8033671	2	True				
ANR	8034480	ParameterType	int *		8033671	0					
ANR	8034481	Identifier	data_size		8033671	1					
ANR	8034482	Parameter	AVPacket * avpkt	3:48:116:130	8033671	3	True				
ANR	8034483	ParameterType	AVPacket *		8033671	0					
ANR	8034484	Identifier	avpkt		8033671	1					
ANR	8034485	CFGEntryNode	ENTRY		8033671		True				
ANR	8034486	CFGExitNode	EXIT		8033671		True				
ANR	8034487	Symbol	RT_BYTE_ENCODED		8033671						
ANR	8034488	Symbol	* x		8033671						
ANR	8034489	Symbol	data		8033671						
ANR	8034490	Symbol	PIX_FMT_PAL8		8033671						
ANR	8034491	Symbol	avpkt		8033671						
ANR	8034492	Symbol	run		8033671						
ANR	8034493	Symbol	* data_size		8033671						
ANR	8034494	Symbol	type		8033671						
ANR	8034495	Symbol	stride		8033671						
ANR	8034496	Symbol	* p -> data		8033671						
ANR	8034497	Symbol	len		8033671						
ANR	8034498	Symbol	* ptr		8033671						
ANR	8034499	Symbol	buf_end		8033671						
ANR	8034500	Symbol	PIX_FMT_MONOWHITE		8033671						
ANR	8034501	Symbol	data_size		8033671						
ANR	8034502	Symbol	* ( uint32_t * ) ptr		8033671						
ANR	8034503	Symbol	* buf		8033671						
ANR	8034504	Symbol	PIX_FMT_RGB24		8033671						
ANR	8034505	Symbol	p -> linesize		8033671						
ANR	8034506	Symbol	* avctx		8033671						
ANR	8034507	Symbol	RT_OLD		8033671						
ANR	8034508	Symbol	alen		8033671						
ANR	8034509	Symbol	avpkt -> data		8033671						
ANR	8034510	Symbol	avctx -> pix_fmt		8033671						
ANR	8034511	Symbol	RT_FORMAT_TIFF		8033671						
ANR	8034512	Symbol	p -> data		8033671						
ANR	8034513	Symbol	avctx -> width		8033671						
ANR	8034514	Symbol	PIX_FMT_BGR24		8033671						
ANR	8034515	Symbol	s -> picture		8033671						
ANR	8034516	Symbol	bufstart		8033671						
ANR	8034517	Symbol	AV_RB32		8033671						
ANR	8034518	Symbol	avctx -> height		8033671						
ANR	8034519	Symbol	avpkt -> size		8033671						
ANR	8034520	Symbol	AV_PICTURE_TYPE_I		8033671						
ANR	8034521	Symbol	end		8033671						
ANR	8034522	Symbol	* * p		8033671						
ANR	8034523	Symbol	avctx		8033671						
ANR	8034524	Symbol	p -> pict_type		8033671						
ANR	8034525	Symbol	value		8033671						
ANR	8034526	Symbol	* avpkt		8033671						
ANR	8034527	Symbol	av_image_check_size		8033671						
ANR	8034528	Symbol	AV_LOG_ERROR		8033671						
ANR	8034529	Symbol	avctx -> get_buffer		8033671						
ANR	8034530	Symbol	h		8033671						
ANR	8034531	Symbol	RT_FORMAT_RGB		8033671						
ANR	8034532	Symbol	avctx -> priv_data		8033671						
ANR	8034533	Symbol	* p -> linesize		8033671						
ANR	8034534	Symbol	picture		8033671						
ANR	8034535	Symbol	ptr		8033671						
ANR	8034536	Symbol	p		8033671						
ANR	8034537	Symbol	* buf ++		8033671						
ANR	8034538	Symbol	buf		8033671						
ANR	8034539	Symbol	s		8033671						
ANR	8034540	Symbol	depth		8033671						
ANR	8034541	Symbol	~1		8033671						
ANR	8034542	Symbol	& s -> picture		8033671						
ANR	8034543	Symbol	RT_FORMAT_IFF		8033671						
ANR	8034544	Symbol	w		8033671						
ANR	8034545	Symbol	x		8033671						
ANR	8034546	Symbol	maptype		8033671						
ANR	8034547	Symbol	* picture		8033671						
ANR	8034548	Symbol	y		8033671						
ANR	8034549	Symbol	AVERROR_INVALIDDATA		8033671						
ANR	8034550	Symbol	* p		8033671						
ANR	8034551	Symbol	AV_LOG_WARNING		8033671						
ANR	8034552	Symbol	* s		8033671						
ANR	8034553	Symbol	maplength		8033671						
ANR	8034554	Symbol	* len		8033671						
