command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5980736	File	/home/p4ultr4n/workplace/ReVeal/raw_code/net_init_nic_1.c								
ANR	5980737	Function	net_init_nic	1:0:0:1562							
ANR	5980738	FunctionDef	"net_init_nic (QemuOpts * opts , const char * name , VLANState * vlan)"		5980737	0					
ANR	5980739	CompoundStatement		3:0:76:1562	5980737	0					
ANR	5980740	IdentifierDeclStatement	int idx ;	5:4:83:90	5980737	0	True				
ANR	5980741	IdentifierDecl	idx		5980737	0					
ANR	5980742	IdentifierDeclType	int		5980737	0					
ANR	5980743	Identifier	idx		5980737	1					
ANR	5980744	IdentifierDeclStatement	NICInfo * nd ;	7:4:97:108	5980737	1	True				
ANR	5980745	IdentifierDecl	* nd		5980737	0					
ANR	5980746	IdentifierDeclType	NICInfo *		5980737	0					
ANR	5980747	Identifier	nd		5980737	1					
ANR	5980748	IdentifierDeclStatement	const char * netdev ;	9:4:115:133	5980737	2	True				
ANR	5980749	IdentifierDecl	* netdev		5980737	0					
ANR	5980750	IdentifierDeclType	const char *		5980737	0					
ANR	5980751	Identifier	netdev		5980737	1					
ANR	5980752	ExpressionStatement	idx = nic_get_free_idx ( )	13:4:142:166	5980737	3	True				
ANR	5980753	AssignmentExpression	idx = nic_get_free_idx ( )		5980737	0		=			
ANR	5980754	Identifier	idx		5980737	0					
ANR	5980755	CallExpression	nic_get_free_idx ( )		5980737	1					
ANR	5980756	Callee	nic_get_free_idx		5980737	0					
ANR	5980757	Identifier	nic_get_free_idx		5980737	0					
ANR	5980758	ArgumentList			5980737	1					
ANR	5980759	IfStatement	if ( idx == - 1 || nb_nics >= MAX_NICS )		5980737	4					
ANR	5980760	Condition	idx == - 1 || nb_nics >= MAX_NICS	15:8:177:208	5980737	0	True				
ANR	5980761	OrExpression	idx == - 1 || nb_nics >= MAX_NICS		5980737	0		||			
ANR	5980762	EqualityExpression	idx == - 1		5980737	0		==			
ANR	5980763	Identifier	idx		5980737	0					
ANR	5980764	UnaryOperationExpression	- 1		5980737	1					
ANR	5980765	UnaryOperator	-		5980737	0					
ANR	5980766	PrimaryExpression	1		5980737	1					
ANR	5980767	RelationalExpression	nb_nics >= MAX_NICS		5980737	1		>=			
ANR	5980768	Identifier	nb_nics		5980737	0					
ANR	5980769	Identifier	MAX_NICS		5980737	1					
ANR	5980770	CompoundStatement		13:42:134:134	5980737	1					
ANR	5980771	ExpressionStatement	"error_report ( ""Too Many NICs"" )"	17:8:222:251	5980737	0	True				
ANR	5980772	CallExpression	"error_report ( ""Too Many NICs"" )"		5980737	0					
ANR	5980773	Callee	error_report		5980737	0					
ANR	5980774	Identifier	error_report		5980737	0					
ANR	5980775	ArgumentList	"""Too Many NICs"""		5980737	1					
ANR	5980776	Argument	"""Too Many NICs"""		5980737	0					
ANR	5980777	PrimaryExpression	"""Too Many NICs"""		5980737	0					
ANR	5980778	ReturnStatement	return - 1 ;	19:8:262:271	5980737	1	True				
ANR	5980779	UnaryOperationExpression	- 1		5980737	0					
ANR	5980780	UnaryOperator	-		5980737	0					
ANR	5980781	PrimaryExpression	1		5980737	1					
ANR	5980782	ExpressionStatement	nd = & nd_table [ idx ]	25:4:287:306	5980737	5	True				
ANR	5980783	AssignmentExpression	nd = & nd_table [ idx ]		5980737	0		=			
ANR	5980784	Identifier	nd		5980737	0					
ANR	5980785	UnaryOperationExpression	& nd_table [ idx ]		5980737	1					
ANR	5980786	UnaryOperator	&		5980737	0					
ANR	5980787	ArrayIndexing	nd_table [ idx ]		5980737	1					
ANR	5980788	Identifier	nd_table		5980737	0					
ANR	5980789	Identifier	idx		5980737	1					
ANR	5980790	ExpressionStatement	"memset ( nd , 0 , sizeof ( * nd ) )"	29:4:315:341	5980737	6	True				
ANR	5980791	CallExpression	"memset ( nd , 0 , sizeof ( * nd ) )"		5980737	0					
ANR	5980792	Callee	memset		5980737	0					
ANR	5980793	Identifier	memset		5980737	0					
ANR	5980794	ArgumentList	nd		5980737	1					
ANR	5980795	Argument	nd		5980737	0					
ANR	5980796	Identifier	nd		5980737	0					
ANR	5980797	Argument	0		5980737	1					
ANR	5980798	PrimaryExpression	0		5980737	0					
ANR	5980799	Argument	sizeof ( * nd )		5980737	2					
ANR	5980800	SizeofExpression	sizeof ( * nd )		5980737	0					
ANR	5980801	Sizeof	sizeof		5980737	0					
ANR	5980802	UnaryOperationExpression	* nd		5980737	1					
ANR	5980803	UnaryOperator	*		5980737	0					
ANR	5980804	Identifier	nd		5980737	1					
ANR	5980805	IfStatement	"if ( ( netdev = qemu_opt_get ( opts , ""netdev"" ) ) )"		5980737	7					
ANR	5980806	Condition	"netdev = qemu_opt_get ( opts , ""netdev"" )"	33:8:354:392	5980737	0	True				
ANR	5980807	AssignmentExpression	"netdev = qemu_opt_get ( opts , ""netdev"" )"		5980737	0		=			
ANR	5980808	Identifier	netdev		5980737	0					
ANR	5980809	CallExpression	"qemu_opt_get ( opts , ""netdev"" )"		5980737	1					
ANR	5980810	Callee	qemu_opt_get		5980737	0					
ANR	5980811	Identifier	qemu_opt_get		5980737	0					
ANR	5980812	ArgumentList	opts		5980737	1					
ANR	5980813	Argument	opts		5980737	0					
ANR	5980814	Identifier	opts		5980737	0					
ANR	5980815	Argument	"""netdev"""		5980737	1					
ANR	5980816	PrimaryExpression	"""netdev"""		5980737	0					
ANR	5980817	CompoundStatement		31:49:318:318	5980737	1					
ANR	5980818	ExpressionStatement	nd -> netdev = qemu_find_netdev ( netdev )	35:8:406:443	5980737	0	True				
ANR	5980819	AssignmentExpression	nd -> netdev = qemu_find_netdev ( netdev )		5980737	0		=			
ANR	5980820	PtrMemberAccess	nd -> netdev		5980737	0					
ANR	5980821	Identifier	nd		5980737	0					
ANR	5980822	Identifier	netdev		5980737	1					
ANR	5980823	CallExpression	qemu_find_netdev ( netdev )		5980737	1					
ANR	5980824	Callee	qemu_find_netdev		5980737	0					
ANR	5980825	Identifier	qemu_find_netdev		5980737	0					
ANR	5980826	ArgumentList	netdev		5980737	1					
ANR	5980827	Argument	netdev		5980737	0					
ANR	5980828	Identifier	netdev		5980737	0					
ANR	5980829	IfStatement	if ( ! nd -> netdev )		5980737	1					
ANR	5980830	Condition	! nd -> netdev	37:12:458:468	5980737	0	True				
ANR	5980831	UnaryOperationExpression	! nd -> netdev		5980737	0					
ANR	5980832	UnaryOperator	!		5980737	0					
ANR	5980833	PtrMemberAccess	nd -> netdev		5980737	1					
ANR	5980834	Identifier	nd		5980737	0					
ANR	5980835	Identifier	netdev		5980737	1					
ANR	5980836	CompoundStatement		35:25:394:394	5980737	1					
ANR	5980837	ExpressionStatement	"error_report ( ""netdev '%s' not found"" , netdev )"	39:12:486:531	5980737	0	True				
ANR	5980838	CallExpression	"error_report ( ""netdev '%s' not found"" , netdev )"		5980737	0					
ANR	5980839	Callee	error_report		5980737	0					
ANR	5980840	Identifier	error_report		5980737	0					
ANR	5980841	ArgumentList	"""netdev '%s' not found"""		5980737	1					
ANR	5980842	Argument	"""netdev '%s' not found"""		5980737	0					
ANR	5980843	PrimaryExpression	"""netdev '%s' not found"""		5980737	0					
ANR	5980844	Argument	netdev		5980737	1					
ANR	5980845	Identifier	netdev		5980737	0					
ANR	5980846	ReturnStatement	return - 1 ;	41:12:546:555	5980737	1	True				
ANR	5980847	UnaryOperationExpression	- 1		5980737	0					
ANR	5980848	UnaryOperator	-		5980737	0					
ANR	5980849	PrimaryExpression	1		5980737	1					
ANR	5980850	ElseStatement	else		5980737	0					
ANR	5980851	CompoundStatement		43:11:503:503	5980737	0					
ANR	5980852	ExpressionStatement	assert ( vlan )	47:8:591:603	5980737	0	True				
ANR	5980853	CallExpression	assert ( vlan )		5980737	0					
ANR	5980854	Callee	assert		5980737	0					
ANR	5980855	Identifier	assert		5980737	0					
ANR	5980856	ArgumentList	vlan		5980737	1					
ANR	5980857	Argument	vlan		5980737	0					
ANR	5980858	Identifier	vlan		5980737	0					
ANR	5980859	ExpressionStatement	nd -> vlan = vlan	49:8:614:629	5980737	1	True				
ANR	5980860	AssignmentExpression	nd -> vlan = vlan		5980737	0		=			
ANR	5980861	PtrMemberAccess	nd -> vlan		5980737	0					
ANR	5980862	Identifier	nd		5980737	0					
ANR	5980863	Identifier	vlan		5980737	1					
ANR	5980864	Identifier	vlan		5980737	1					
ANR	5980865	IfStatement	if ( name )		5980737	8					
ANR	5980866	Condition	name	53:8:647:650	5980737	0	True				
ANR	5980867	Identifier	name		5980737	0					
ANR	5980868	CompoundStatement		51:14:576:576	5980737	1					
ANR	5980869	ExpressionStatement	nd -> name = g_strdup ( name )	55:8:664:689	5980737	0	True				
ANR	5980870	AssignmentExpression	nd -> name = g_strdup ( name )		5980737	0		=			
ANR	5980871	PtrMemberAccess	nd -> name		5980737	0					
ANR	5980872	Identifier	nd		5980737	0					
ANR	5980873	Identifier	name		5980737	1					
ANR	5980874	CallExpression	g_strdup ( name )		5980737	1					
ANR	5980875	Callee	g_strdup		5980737	0					
ANR	5980876	Identifier	g_strdup		5980737	0					
ANR	5980877	ArgumentList	name		5980737	1					
ANR	5980878	Argument	name		5980737	0					
ANR	5980879	Identifier	name		5980737	0					
ANR	5980880	IfStatement	"if ( qemu_opt_get ( opts , ""model"" ) )"		5980737	9					
ANR	5980881	Condition	"qemu_opt_get ( opts , ""model"" )"	59:8:707:733	5980737	0	True				
ANR	5980882	CallExpression	"qemu_opt_get ( opts , ""model"" )"		5980737	0					
ANR	5980883	Callee	qemu_opt_get		5980737	0					
ANR	5980884	Identifier	qemu_opt_get		5980737	0					
ANR	5980885	ArgumentList	opts		5980737	1					
ANR	5980886	Argument	opts		5980737	0					
ANR	5980887	Identifier	opts		5980737	0					
ANR	5980888	Argument	"""model"""		5980737	1					
ANR	5980889	PrimaryExpression	"""model"""		5980737	0					
ANR	5980890	CompoundStatement		57:37:659:659	5980737	1					
ANR	5980891	ExpressionStatement	"nd -> model = g_strdup ( qemu_opt_get ( opts , ""model"" ) )"	61:8:747:796	5980737	0	True				
ANR	5980892	AssignmentExpression	"nd -> model = g_strdup ( qemu_opt_get ( opts , ""model"" ) )"		5980737	0		=			
ANR	5980893	PtrMemberAccess	nd -> model		5980737	0					
ANR	5980894	Identifier	nd		5980737	0					
ANR	5980895	Identifier	model		5980737	1					
ANR	5980896	CallExpression	"g_strdup ( qemu_opt_get ( opts , ""model"" ) )"		5980737	1					
ANR	5980897	Callee	g_strdup		5980737	0					
ANR	5980898	Identifier	g_strdup		5980737	0					
ANR	5980899	ArgumentList	"qemu_opt_get ( opts , ""model"" )"		5980737	1					
ANR	5980900	Argument	"qemu_opt_get ( opts , ""model"" )"		5980737	0					
ANR	5980901	CallExpression	"qemu_opt_get ( opts , ""model"" )"		5980737	0					
ANR	5980902	Callee	qemu_opt_get		5980737	0					
ANR	5980903	Identifier	qemu_opt_get		5980737	0					
ANR	5980904	ArgumentList	opts		5980737	1					
ANR	5980905	Argument	opts		5980737	0					
ANR	5980906	Identifier	opts		5980737	0					
ANR	5980907	Argument	"""model"""		5980737	1					
ANR	5980908	PrimaryExpression	"""model"""		5980737	0					
ANR	5980909	IfStatement	"if ( qemu_opt_get ( opts , ""addr"" ) )"		5980737	10					
ANR	5980910	Condition	"qemu_opt_get ( opts , ""addr"" )"	65:8:814:839	5980737	0	True				
ANR	5980911	CallExpression	"qemu_opt_get ( opts , ""addr"" )"		5980737	0					
ANR	5980912	Callee	qemu_opt_get		5980737	0					
ANR	5980913	Identifier	qemu_opt_get		5980737	0					
ANR	5980914	ArgumentList	opts		5980737	1					
ANR	5980915	Argument	opts		5980737	0					
ANR	5980916	Identifier	opts		5980737	0					
ANR	5980917	Argument	"""addr"""		5980737	1					
ANR	5980918	PrimaryExpression	"""addr"""		5980737	0					
ANR	5980919	CompoundStatement		63:36:765:765	5980737	1					
ANR	5980920	ExpressionStatement	"nd -> devaddr = g_strdup ( qemu_opt_get ( opts , ""addr"" ) )"	67:8:853:903	5980737	0	True				
ANR	5980921	AssignmentExpression	"nd -> devaddr = g_strdup ( qemu_opt_get ( opts , ""addr"" ) )"		5980737	0		=			
ANR	5980922	PtrMemberAccess	nd -> devaddr		5980737	0					
ANR	5980923	Identifier	nd		5980737	0					
ANR	5980924	Identifier	devaddr		5980737	1					
ANR	5980925	CallExpression	"g_strdup ( qemu_opt_get ( opts , ""addr"" ) )"		5980737	1					
ANR	5980926	Callee	g_strdup		5980737	0					
ANR	5980927	Identifier	g_strdup		5980737	0					
ANR	5980928	ArgumentList	"qemu_opt_get ( opts , ""addr"" )"		5980737	1					
ANR	5980929	Argument	"qemu_opt_get ( opts , ""addr"" )"		5980737	0					
ANR	5980930	CallExpression	"qemu_opt_get ( opts , ""addr"" )"		5980737	0					
ANR	5980931	Callee	qemu_opt_get		5980737	0					
ANR	5980932	Identifier	qemu_opt_get		5980737	0					
ANR	5980933	ArgumentList	opts		5980737	1					
ANR	5980934	Argument	opts		5980737	0					
ANR	5980935	Identifier	opts		5980737	0					
ANR	5980936	Argument	"""addr"""		5980737	1					
ANR	5980937	PrimaryExpression	"""addr"""		5980737	0					
ANR	5980938	IfStatement	"if ( qemu_opt_get ( opts , ""macaddr"" ) && net_parse_macaddr ( nd -> macaddr . a , qemu_opt_get ( opts , ""macaddr"" ) ) < 0 )"		5980737	11					
ANR	5980939	Condition	"qemu_opt_get ( opts , ""macaddr"" ) && net_parse_macaddr ( nd -> macaddr . a , qemu_opt_get ( opts , ""macaddr"" ) ) < 0"	73:8:923:1031	5980737	0	True				
ANR	5980940	AndExpression	"qemu_opt_get ( opts , ""macaddr"" ) && net_parse_macaddr ( nd -> macaddr . a , qemu_opt_get ( opts , ""macaddr"" ) ) < 0"		5980737	0		&&			
ANR	5980941	CallExpression	"qemu_opt_get ( opts , ""macaddr"" )"		5980737	0					
ANR	5980942	Callee	qemu_opt_get		5980737	0					
ANR	5980943	Identifier	qemu_opt_get		5980737	0					
ANR	5980944	ArgumentList	opts		5980737	1					
ANR	5980945	Argument	opts		5980737	0					
ANR	5980946	Identifier	opts		5980737	0					
ANR	5980947	Argument	"""macaddr"""		5980737	1					
ANR	5980948	PrimaryExpression	"""macaddr"""		5980737	0					
ANR	5980949	RelationalExpression	"net_parse_macaddr ( nd -> macaddr . a , qemu_opt_get ( opts , ""macaddr"" ) ) < 0"		5980737	1		<			
ANR	5980950	CallExpression	"net_parse_macaddr ( nd -> macaddr . a , qemu_opt_get ( opts , ""macaddr"" ) )"		5980737	0					
ANR	5980951	Callee	net_parse_macaddr		5980737	0					
ANR	5980952	Identifier	net_parse_macaddr		5980737	0					
ANR	5980953	ArgumentList	nd -> macaddr . a		5980737	1					
ANR	5980954	Argument	nd -> macaddr . a		5980737	0					
ANR	5980955	MemberAccess	nd -> macaddr . a		5980737	0					
ANR	5980956	PtrMemberAccess	nd -> macaddr		5980737	0					
ANR	5980957	Identifier	nd		5980737	0					
ANR	5980958	Identifier	macaddr		5980737	1					
ANR	5980959	Identifier	a		5980737	1					
ANR	5980960	Argument	"qemu_opt_get ( opts , ""macaddr"" )"		5980737	1					
ANR	5980961	CallExpression	"qemu_opt_get ( opts , ""macaddr"" )"		5980737	0					
ANR	5980962	Callee	qemu_opt_get		5980737	0					
ANR	5980963	Identifier	qemu_opt_get		5980737	0					
ANR	5980964	ArgumentList	opts		5980737	1					
ANR	5980965	Argument	opts		5980737	0					
ANR	5980966	Identifier	opts		5980737	0					
ANR	5980967	Argument	"""macaddr"""		5980737	1					
ANR	5980968	PrimaryExpression	"""macaddr"""		5980737	0					
ANR	5980969	PrimaryExpression	0		5980737	1					
ANR	5980970	CompoundStatement		73:77:957:957	5980737	1					
ANR	5980971	ExpressionStatement	"error_report ( ""invalid syntax for ethernet address"" )"	77:8:1045:1096	5980737	0	True				
ANR	5980972	CallExpression	"error_report ( ""invalid syntax for ethernet address"" )"		5980737	0					
ANR	5980973	Callee	error_report		5980737	0					
ANR	5980974	Identifier	error_report		5980737	0					
ANR	5980975	ArgumentList	"""invalid syntax for ethernet address"""		5980737	1					
ANR	5980976	Argument	"""invalid syntax for ethernet address"""		5980737	0					
ANR	5980977	PrimaryExpression	"""invalid syntax for ethernet address"""		5980737	0					
ANR	5980978	ReturnStatement	return - 1 ;	79:8:1107:1116	5980737	1	True				
ANR	5980979	UnaryOperationExpression	- 1		5980737	0					
ANR	5980980	UnaryOperator	-		5980737	0					
ANR	5980981	PrimaryExpression	1		5980737	1					
ANR	5980982	ExpressionStatement	qemu_macaddr_default_if_unset ( & nd -> macaddr )	83:4:1130:1173	5980737	12	True				
ANR	5980983	CallExpression	qemu_macaddr_default_if_unset ( & nd -> macaddr )		5980737	0					
ANR	5980984	Callee	qemu_macaddr_default_if_unset		5980737	0					
ANR	5980985	Identifier	qemu_macaddr_default_if_unset		5980737	0					
ANR	5980986	ArgumentList	& nd -> macaddr		5980737	1					
ANR	5980987	Argument	& nd -> macaddr		5980737	0					
ANR	5980988	UnaryOperationExpression	& nd -> macaddr		5980737	0					
ANR	5980989	UnaryOperator	&		5980737	0					
ANR	5980990	PtrMemberAccess	nd -> macaddr		5980737	1					
ANR	5980991	Identifier	nd		5980737	0					
ANR	5980992	Identifier	macaddr		5980737	1					
ANR	5980993	ExpressionStatement	"nd -> nvectors = qemu_opt_get_number ( opts , ""vectors"" , DEV_NVECTORS_UNSPECIFIED )"	87:4:1182:1299	5980737	13	True				
ANR	5980994	AssignmentExpression	"nd -> nvectors = qemu_opt_get_number ( opts , ""vectors"" , DEV_NVECTORS_UNSPECIFIED )"		5980737	0		=			
ANR	5980995	PtrMemberAccess	nd -> nvectors		5980737	0					
ANR	5980996	Identifier	nd		5980737	0					
ANR	5980997	Identifier	nvectors		5980737	1					
ANR	5980998	CallExpression	"qemu_opt_get_number ( opts , ""vectors"" , DEV_NVECTORS_UNSPECIFIED )"		5980737	1					
ANR	5980999	Callee	qemu_opt_get_number		5980737	0					
ANR	5981000	Identifier	qemu_opt_get_number		5980737	0					
ANR	5981001	ArgumentList	opts		5980737	1					
ANR	5981002	Argument	opts		5980737	0					
ANR	5981003	Identifier	opts		5980737	0					
ANR	5981004	Argument	"""vectors"""		5980737	1					
ANR	5981005	PrimaryExpression	"""vectors"""		5980737	0					
ANR	5981006	Argument	DEV_NVECTORS_UNSPECIFIED		5980737	2					
ANR	5981007	Identifier	DEV_NVECTORS_UNSPECIFIED		5980737	0					
ANR	5981008	IfStatement	if ( nd -> nvectors != DEV_NVECTORS_UNSPECIFIED && ( nd -> nvectors < 0 || nd -> nvectors > 0x7ffffff ) )		5980737	14					
ANR	5981009	Condition	nd -> nvectors != DEV_NVECTORS_UNSPECIFIED && ( nd -> nvectors < 0 || nd -> nvectors > 0x7ffffff )	91:8:1310:1408	5980737	0	True				
ANR	5981010	AndExpression	nd -> nvectors != DEV_NVECTORS_UNSPECIFIED && ( nd -> nvectors < 0 || nd -> nvectors > 0x7ffffff )		5980737	0		&&			
ANR	5981011	EqualityExpression	nd -> nvectors != DEV_NVECTORS_UNSPECIFIED		5980737	0		!=			
ANR	5981012	PtrMemberAccess	nd -> nvectors		5980737	0					
ANR	5981013	Identifier	nd		5980737	0					
ANR	5981014	Identifier	nvectors		5980737	1					
ANR	5981015	Identifier	DEV_NVECTORS_UNSPECIFIED		5980737	1					
ANR	5981016	OrExpression	nd -> nvectors < 0 || nd -> nvectors > 0x7ffffff		5980737	1		||			
ANR	5981017	RelationalExpression	nd -> nvectors < 0		5980737	0		<			
ANR	5981018	PtrMemberAccess	nd -> nvectors		5980737	0					
ANR	5981019	Identifier	nd		5980737	0					
ANR	5981020	Identifier	nvectors		5980737	1					
ANR	5981021	PrimaryExpression	0		5980737	1					
ANR	5981022	RelationalExpression	nd -> nvectors > 0x7ffffff		5980737	1		>			
ANR	5981023	PtrMemberAccess	nd -> nvectors		5980737	0					
ANR	5981024	Identifier	nd		5980737	0					
ANR	5981025	Identifier	nvectors		5980737	1					
ANR	5981026	PrimaryExpression	0x7ffffff		5980737	1					
ANR	5981027	CompoundStatement		91:56:1334:1334	5980737	1					
ANR	5981028	ExpressionStatement	"error_report ( ""invalid # of vectors: %d"" , nd -> nvectors )"	95:8:1422:1476	5980737	0	True				
ANR	5981029	CallExpression	"error_report ( ""invalid # of vectors: %d"" , nd -> nvectors )"		5980737	0					
ANR	5981030	Callee	error_report		5980737	0					
ANR	5981031	Identifier	error_report		5980737	0					
ANR	5981032	ArgumentList	"""invalid # of vectors: %d"""		5980737	1					
ANR	5981033	Argument	"""invalid # of vectors: %d"""		5980737	0					
ANR	5981034	PrimaryExpression	"""invalid # of vectors: %d"""		5980737	0					
ANR	5981035	Argument	nd -> nvectors		5980737	1					
ANR	5981036	PtrMemberAccess	nd -> nvectors		5980737	0					
ANR	5981037	Identifier	nd		5980737	0					
ANR	5981038	Identifier	nvectors		5980737	1					
ANR	5981039	ReturnStatement	return - 1 ;	97:8:1487:1496	5980737	1	True				
ANR	5981040	UnaryOperationExpression	- 1		5980737	0					
ANR	5981041	UnaryOperator	-		5980737	0					
ANR	5981042	PrimaryExpression	1		5980737	1					
ANR	5981043	ExpressionStatement	nd -> used = 1	103:4:1512:1524	5980737	15	True				
ANR	5981044	AssignmentExpression	nd -> used = 1		5980737	0		=			
ANR	5981045	PtrMemberAccess	nd -> used		5980737	0					
ANR	5981046	Identifier	nd		5980737	0					
ANR	5981047	Identifier	used		5980737	1					
ANR	5981048	PrimaryExpression	1		5980737	1					
ANR	5981049	ExpressionStatement	nb_nics ++	105:4:1531:1540	5980737	16	True				
ANR	5981050	PostIncDecOperationExpression	nb_nics ++		5980737	0					
ANR	5981051	Identifier	nb_nics		5980737	0					
ANR	5981052	IncDec	++		5980737	1					
ANR	5981053	ReturnStatement	return idx ;	109:4:1549:1559	5980737	17	True				
ANR	5981054	Identifier	idx		5980737	0					
ANR	5981055	ReturnType	static int		5980737	1					
ANR	5981056	Identifier	net_init_nic		5980737	2					
ANR	5981057	ParameterList	"QemuOpts * opts , const char * name , VLANState * vlan"		5980737	3					
ANR	5981058	Parameter	QemuOpts * opts	1:24:24:37	5980737	0	True				
ANR	5981059	ParameterType	QemuOpts *		5980737	0					
ANR	5981060	Identifier	opts		5980737	1					
ANR	5981061	Parameter	const char * name	1:40:40:55	5980737	1	True				
ANR	5981062	ParameterType	const char *		5980737	0					
ANR	5981063	Identifier	name		5980737	1					
ANR	5981064	Parameter	VLANState * vlan	1:58:58:72	5980737	2	True				
ANR	5981065	ParameterType	VLANState *		5980737	0					
ANR	5981066	Identifier	vlan		5980737	1					
ANR	5981067	CFGEntryNode	ENTRY		5980737		True				
ANR	5981068	CFGExitNode	EXIT		5980737		True				
ANR	5981069	Symbol	nb_nics		5980737						
ANR	5981070	Symbol	qemu_opt_get		5980737						
ANR	5981071	Symbol	nd -> used		5980737						
ANR	5981072	Symbol	nd -> model		5980737						
ANR	5981073	Symbol	nic_get_free_idx		5980737						
ANR	5981074	Symbol	opts		5980737						
ANR	5981075	Symbol	vlan		5980737						
ANR	5981076	Symbol	nd -> netdev		5980737						
ANR	5981077	Symbol	nd_table		5980737						
ANR	5981078	Symbol	g_strdup		5980737						
ANR	5981079	Symbol	nd -> nvectors		5980737						
ANR	5981080	Symbol	nd -> name		5980737						
ANR	5981081	Symbol	nd -> devaddr		5980737						
ANR	5981082	Symbol	netdev		5980737						
ANR	5981083	Symbol	& nd -> macaddr		5980737						
ANR	5981084	Symbol	qemu_opt_get_number		5980737						
ANR	5981085	Symbol	nd -> vlan		5980737						
ANR	5981086	Symbol	net_parse_macaddr		5980737						
ANR	5981087	Symbol	qemu_find_netdev		5980737						
ANR	5981088	Symbol	nd -> macaddr		5980737						
ANR	5981089	Symbol	nd -> macaddr . a		5980737						
ANR	5981090	Symbol	DEV_NVECTORS_UNSPECIFIED		5980737						
ANR	5981091	Symbol	nd		5980737						
ANR	5981092	Symbol	name		5980737						
ANR	5981093	Symbol	idx		5980737						
ANR	5981094	Symbol	MAX_NICS		5980737						
ANR	5981095	Symbol	* nd		5980737						
