command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5099982	File	/home/p4ultr4n/workplace/ReVeal/raw_code/kvm_arch_pre_run_01_1.c								
ANR	5099983	Function	kvm_arch_pre_run	1:0:0:1687							
ANR	5099984	FunctionDef	"kvm_arch_pre_run (CPUState * env , struct kvm_run * run)"		5099983	0					
ANR	5099985	CompoundStatement		3:0:59:1687	5099983	0					
ANR	5099986	IfStatement	if ( env -> interrupt_request & CPU_INTERRUPT_NMI )		5099983	0					
ANR	5099987	Condition	env -> interrupt_request & CPU_INTERRUPT_NMI	7:8:92:133	5099983	0	True				
ANR	5099988	BitAndExpression	env -> interrupt_request & CPU_INTERRUPT_NMI		5099983	0		&			
ANR	5099989	PtrMemberAccess	env -> interrupt_request		5099983	0					
ANR	5099990	Identifier	env		5099983	0					
ANR	5099991	Identifier	interrupt_request		5099983	1					
ANR	5099992	Identifier	CPU_INTERRUPT_NMI		5099983	1					
ANR	5099993	CompoundStatement		5:52:76:76	5099983	1					
ANR	5099994	ExpressionStatement	env -> interrupt_request &= ~CPU_INTERRUPT_NMI	9:8:147:191	5099983	0	True				
ANR	5099995	AssignmentExpression	env -> interrupt_request &= ~CPU_INTERRUPT_NMI		5099983	0		&=			
ANR	5099996	PtrMemberAccess	env -> interrupt_request		5099983	0					
ANR	5099997	Identifier	env		5099983	0					
ANR	5099998	Identifier	interrupt_request		5099983	1					
ANR	5099999	Identifier	~CPU_INTERRUPT_NMI		5099983	1					
ANR	5100000	ExpressionStatement	"DPRINTF ( ""injected NMI\\n"" )"	11:8:202:227	5099983	1	True				
ANR	5100001	CallExpression	"DPRINTF ( ""injected NMI\\n"" )"		5099983	0					
ANR	5100002	Callee	DPRINTF		5099983	0					
ANR	5100003	Identifier	DPRINTF		5099983	0					
ANR	5100004	ArgumentList	"""injected NMI\\n"""		5099983	1					
ANR	5100005	Argument	"""injected NMI\\n"""		5099983	0					
ANR	5100006	PrimaryExpression	"""injected NMI\\n"""		5099983	0					
ANR	5100007	ExpressionStatement	"kvm_vcpu_ioctl ( env , KVM_NMI )"	13:8:238:266	5099983	2	True				
ANR	5100008	CallExpression	"kvm_vcpu_ioctl ( env , KVM_NMI )"		5099983	0					
ANR	5100009	Callee	kvm_vcpu_ioctl		5099983	0					
ANR	5100010	Identifier	kvm_vcpu_ioctl		5099983	0					
ANR	5100011	ArgumentList	env		5099983	1					
ANR	5100012	Argument	env		5099983	0					
ANR	5100013	Identifier	env		5099983	0					
ANR	5100014	Argument	KVM_NMI		5099983	1					
ANR	5100015	Identifier	KVM_NMI		5099983	0					
ANR	5100016	IfStatement	if ( ! kvm_irqchip_in_kernel ( ) )		5099983	1					
ANR	5100017	Condition	! kvm_irqchip_in_kernel ( )	19:8:286:309	5099983	0	True				
ANR	5100018	UnaryOperationExpression	! kvm_irqchip_in_kernel ( )		5099983	0					
ANR	5100019	UnaryOperator	!		5099983	0					
ANR	5100020	CallExpression	kvm_irqchip_in_kernel ( )		5099983	1					
ANR	5100021	Callee	kvm_irqchip_in_kernel		5099983	0					
ANR	5100022	Identifier	kvm_irqchip_in_kernel		5099983	0					
ANR	5100023	ArgumentList			5099983	1					
ANR	5100024	CompoundStatement		17:34:252:252	5099983	1					
ANR	5100025	IfStatement	if ( env -> interrupt_request & CPU_INTERRUPT_INIT )		5099983	0					
ANR	5100026	Condition	env -> interrupt_request & CPU_INTERRUPT_INIT	23:12:407:449	5099983	0	True				
ANR	5100027	BitAndExpression	env -> interrupt_request & CPU_INTERRUPT_INIT		5099983	0		&			
ANR	5100028	PtrMemberAccess	env -> interrupt_request		5099983	0					
ANR	5100029	Identifier	env		5099983	0					
ANR	5100030	Identifier	interrupt_request		5099983	1					
ANR	5100031	Identifier	CPU_INTERRUPT_INIT		5099983	1					
ANR	5100032	CompoundStatement		21:57:392:392	5099983	1					
ANR	5100033	ExpressionStatement	env -> exit_request = 1	25:12:467:488	5099983	0	True				
ANR	5100034	AssignmentExpression	env -> exit_request = 1		5099983	0		=			
ANR	5100035	PtrMemberAccess	env -> exit_request		5099983	0					
ANR	5100036	Identifier	env		5099983	0					
ANR	5100037	Identifier	exit_request		5099983	1					
ANR	5100038	PrimaryExpression	1		5099983	1					
ANR	5100039	IfStatement	if ( run -> ready_for_interrupt_injection && ( env -> interrupt_request & CPU_INTERRUPT_HARD ) && ( env -> eflags & IF_MASK ) )		5099983	1					
ANR	5100040	Condition	run -> ready_for_interrupt_injection && ( env -> interrupt_request & CPU_INTERRUPT_HARD ) && ( env -> eflags & IF_MASK )	33:12:585:720	5099983	0	True				
ANR	5100041	AndExpression	run -> ready_for_interrupt_injection && ( env -> interrupt_request & CPU_INTERRUPT_HARD ) && ( env -> eflags & IF_MASK )		5099983	0		&&			
ANR	5100042	PtrMemberAccess	run -> ready_for_interrupt_injection		5099983	0					
ANR	5100043	Identifier	run		5099983	0					
ANR	5100044	Identifier	ready_for_interrupt_injection		5099983	1					
ANR	5100045	AndExpression	( env -> interrupt_request & CPU_INTERRUPT_HARD ) && ( env -> eflags & IF_MASK )		5099983	1		&&			
ANR	5100046	BitAndExpression	env -> interrupt_request & CPU_INTERRUPT_HARD		5099983	0		&			
ANR	5100047	PtrMemberAccess	env -> interrupt_request		5099983	0					
ANR	5100048	Identifier	env		5099983	0					
ANR	5100049	Identifier	interrupt_request		5099983	1					
ANR	5100050	Identifier	CPU_INTERRUPT_HARD		5099983	1					
ANR	5100051	BitAndExpression	env -> eflags & IF_MASK		5099983	1		&			
ANR	5100052	PtrMemberAccess	env -> eflags		5099983	0					
ANR	5100053	Identifier	env		5099983	0					
ANR	5100054	Identifier	eflags		5099983	1					
ANR	5100055	Identifier	IF_MASK		5099983	1					
ANR	5100056	CompoundStatement		37:12:678:685	5099983	1					
ANR	5100057	IdentifierDeclStatement	int irq ;	39:12:738:745	5099983	0	True				
ANR	5100058	IdentifierDecl	irq		5099983	0					
ANR	5100059	IdentifierDeclType	int		5099983	0					
ANR	5100060	Identifier	irq		5099983	1					
ANR	5100061	ExpressionStatement	env -> interrupt_request &= ~CPU_INTERRUPT_HARD	43:12:762:807	5099983	1	True				
ANR	5100062	AssignmentExpression	env -> interrupt_request &= ~CPU_INTERRUPT_HARD		5099983	0		&=			
ANR	5100063	PtrMemberAccess	env -> interrupt_request		5099983	0					
ANR	5100064	Identifier	env		5099983	0					
ANR	5100065	Identifier	interrupt_request		5099983	1					
ANR	5100066	Identifier	~CPU_INTERRUPT_HARD		5099983	1					
ANR	5100067	ExpressionStatement	irq = cpu_get_pic_interrupt ( env )	45:12:822:854	5099983	2	True				
ANR	5100068	AssignmentExpression	irq = cpu_get_pic_interrupt ( env )		5099983	0		=			
ANR	5100069	Identifier	irq		5099983	0					
ANR	5100070	CallExpression	cpu_get_pic_interrupt ( env )		5099983	1					
ANR	5100071	Callee	cpu_get_pic_interrupt		5099983	0					
ANR	5100072	Identifier	cpu_get_pic_interrupt		5099983	0					
ANR	5100073	ArgumentList	env		5099983	1					
ANR	5100074	Argument	env		5099983	0					
ANR	5100075	Identifier	env		5099983	0					
ANR	5100076	IfStatement	if ( irq >= 0 )		5099983	3					
ANR	5100077	Condition	irq >= 0	47:16:873:880	5099983	0	True				
ANR	5100078	RelationalExpression	irq >= 0		5099983	0		>=			
ANR	5100079	Identifier	irq		5099983	0					
ANR	5100080	PrimaryExpression	0		5099983	1					
ANR	5100081	CompoundStatement		47:16:842:867	5099983	1					
ANR	5100082	IdentifierDeclStatement	struct kvm_interrupt intr ;	49:16:902:927	5099983	0	True				
ANR	5100083	IdentifierDecl	intr		5099983	0					
ANR	5100084	IdentifierDeclType	struct kvm_interrupt		5099983	0					
ANR	5100085	Identifier	intr		5099983	1					
ANR	5100086	ExpressionStatement	intr . irq = irq	53:16:948:962	5099983	1	True				
ANR	5100087	AssignmentExpression	intr . irq = irq		5099983	0		=			
ANR	5100088	MemberAccess	intr . irq		5099983	0					
ANR	5100089	Identifier	intr		5099983	0					
ANR	5100090	Identifier	irq		5099983	1					
ANR	5100091	Identifier	irq		5099983	1					
ANR	5100092	ExpressionStatement	"DPRINTF ( ""injected interrupt %d\\n"" , irq )"	57:16:1018:1057	5099983	2	True				
ANR	5100093	CallExpression	"DPRINTF ( ""injected interrupt %d\\n"" , irq )"		5099983	0					
ANR	5100094	Callee	DPRINTF		5099983	0					
ANR	5100095	Identifier	DPRINTF		5099983	0					
ANR	5100096	ArgumentList	"""injected interrupt %d\\n"""		5099983	1					
ANR	5100097	Argument	"""injected interrupt %d\\n"""		5099983	0					
ANR	5100098	PrimaryExpression	"""injected interrupt %d\\n"""		5099983	0					
ANR	5100099	Argument	irq		5099983	1					
ANR	5100100	Identifier	irq		5099983	0					
ANR	5100101	ExpressionStatement	"kvm_vcpu_ioctl ( env , KVM_INTERRUPT , & intr )"	59:16:1076:1117	5099983	3	True				
ANR	5100102	CallExpression	"kvm_vcpu_ioctl ( env , KVM_INTERRUPT , & intr )"		5099983	0					
ANR	5100103	Callee	kvm_vcpu_ioctl		5099983	0					
ANR	5100104	Identifier	kvm_vcpu_ioctl		5099983	0					
ANR	5100105	ArgumentList	env		5099983	1					
ANR	5100106	Argument	env		5099983	0					
ANR	5100107	Identifier	env		5099983	0					
ANR	5100108	Argument	KVM_INTERRUPT		5099983	1					
ANR	5100109	Identifier	KVM_INTERRUPT		5099983	0					
ANR	5100110	Argument	& intr		5099983	2					
ANR	5100111	UnaryOperationExpression	& intr		5099983	0					
ANR	5100112	UnaryOperator	&		5099983	0					
ANR	5100113	Identifier	intr		5099983	1					
ANR	5100114	IfStatement	if ( ( env -> interrupt_request & CPU_INTERRUPT_HARD ) )		5099983	2					
ANR	5100115	Condition	env -> interrupt_request & CPU_INTERRUPT_HARD	75:12:1413:1457	5099983	0	True				
ANR	5100116	BitAndExpression	env -> interrupt_request & CPU_INTERRUPT_HARD		5099983	0		&			
ANR	5100117	PtrMemberAccess	env -> interrupt_request		5099983	0					
ANR	5100118	Identifier	env		5099983	0					
ANR	5100119	Identifier	interrupt_request		5099983	1					
ANR	5100120	Identifier	CPU_INTERRUPT_HARD		5099983	1					
ANR	5100121	CompoundStatement		73:59:1400:1400	5099983	1					
ANR	5100122	ExpressionStatement	run -> request_interrupt_window = 1	77:12:1475:1508	5099983	0	True				
ANR	5100123	AssignmentExpression	run -> request_interrupt_window = 1		5099983	0		=			
ANR	5100124	PtrMemberAccess	run -> request_interrupt_window		5099983	0					
ANR	5100125	Identifier	run		5099983	0					
ANR	5100126	Identifier	request_interrupt_window		5099983	1					
ANR	5100127	PrimaryExpression	1		5099983	1					
ANR	5100128	ElseStatement	else		5099983	0					
ANR	5100129	CompoundStatement		77:15:1466:1466	5099983	0					
ANR	5100130	ExpressionStatement	run -> request_interrupt_window = 0	81:12:1541:1574	5099983	0	True				
ANR	5100131	AssignmentExpression	run -> request_interrupt_window = 0		5099983	0		=			
ANR	5100132	PtrMemberAccess	run -> request_interrupt_window		5099983	0					
ANR	5100133	Identifier	run		5099983	0					
ANR	5100134	Identifier	request_interrupt_window		5099983	1					
ANR	5100135	PrimaryExpression	0		5099983	1					
ANR	5100136	ExpressionStatement	"DPRINTF ( ""setting tpr\\n"" )"	87:8:1598:1622	5099983	3	True				
ANR	5100137	CallExpression	"DPRINTF ( ""setting tpr\\n"" )"		5099983	0					
ANR	5100138	Callee	DPRINTF		5099983	0					
ANR	5100139	Identifier	DPRINTF		5099983	0					
ANR	5100140	ArgumentList	"""setting tpr\\n"""		5099983	1					
ANR	5100141	Argument	"""setting tpr\\n"""		5099983	0					
ANR	5100142	PrimaryExpression	"""setting tpr\\n"""		5099983	0					
ANR	5100143	ExpressionStatement	run -> cr8 = cpu_get_apic_tpr ( env -> apic_state )	89:8:1633:1677	5099983	4	True				
ANR	5100144	AssignmentExpression	run -> cr8 = cpu_get_apic_tpr ( env -> apic_state )		5099983	0		=			
ANR	5100145	PtrMemberAccess	run -> cr8		5099983	0					
ANR	5100146	Identifier	run		5099983	0					
ANR	5100147	Identifier	cr8		5099983	1					
ANR	5100148	CallExpression	cpu_get_apic_tpr ( env -> apic_state )		5099983	1					
ANR	5100149	Callee	cpu_get_apic_tpr		5099983	0					
ANR	5100150	Identifier	cpu_get_apic_tpr		5099983	0					
ANR	5100151	ArgumentList	env -> apic_state		5099983	1					
ANR	5100152	Argument	env -> apic_state		5099983	0					
ANR	5100153	PtrMemberAccess	env -> apic_state		5099983	0					
ANR	5100154	Identifier	env		5099983	0					
ANR	5100155	Identifier	apic_state		5099983	1					
ANR	5100156	ReturnType	void		5099983	1					
ANR	5100157	Identifier	kvm_arch_pre_run		5099983	2					
ANR	5100158	ParameterList	"CPUState * env , struct kvm_run * run"		5099983	3					
ANR	5100159	Parameter	CPUState * env	1:22:22:34	5099983	0	True				
ANR	5100160	ParameterType	CPUState *		5099983	0					
ANR	5100161	Identifier	env		5099983	1					
ANR	5100162	Parameter	struct kvm_run * run	1:37:37:55	5099983	1	True				
ANR	5100163	ParameterType	struct kvm_run *		5099983	0					
ANR	5100164	Identifier	run		5099983	1					
ANR	5100165	CFGEntryNode	ENTRY		5099983		True				
ANR	5100166	CFGExitNode	EXIT		5099983		True				
ANR	5100167	Symbol	run -> request_interrupt_window		5099983						
ANR	5100168	Symbol	run		5099983						
ANR	5100169	Symbol	& intr		5099983						
ANR	5100170	Symbol	intr		5099983						
ANR	5100171	Symbol	~CPU_INTERRUPT_HARD		5099983						
ANR	5100172	Symbol	kvm_irqchip_in_kernel		5099983						
ANR	5100173	Symbol	~CPU_INTERRUPT_NMI		5099983						
ANR	5100174	Symbol	run -> ready_for_interrupt_injection		5099983						
ANR	5100175	Symbol	cpu_get_pic_interrupt		5099983						
ANR	5100176	Symbol	cpu_get_apic_tpr		5099983						
ANR	5100177	Symbol	CPU_INTERRUPT_NMI		5099983						
ANR	5100178	Symbol	* env		5099983						
ANR	5100179	Symbol	KVM_INTERRUPT		5099983						
ANR	5100180	Symbol	run -> cr8		5099983						
ANR	5100181	Symbol	env -> exit_request		5099983						
ANR	5100182	Symbol	irq		5099983						
ANR	5100183	Symbol	env		5099983						
ANR	5100184	Symbol	CPU_INTERRUPT_HARD		5099983						
ANR	5100185	Symbol	KVM_NMI		5099983						
ANR	5100186	Symbol	CPU_INTERRUPT_INIT		5099983						
ANR	5100187	Symbol	intr . irq		5099983						
ANR	5100188	Symbol	env -> interrupt_request		5099983						
ANR	5100189	Symbol	* run		5099983						
ANR	5100190	Symbol	env -> apic_state		5099983						
ANR	5100191	Symbol	IF_MASK		5099983						
ANR	5100192	Symbol	env -> eflags		5099983						
