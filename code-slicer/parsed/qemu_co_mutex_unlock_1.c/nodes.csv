command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6970512	File	/home/p4ultr4n/workplace/ReVeal/raw_code/qemu_co_mutex_unlock_1.c								
ANR	6970513	Function	qemu_co_mutex_unlock	1:0:0:1646							
ANR	6970514	FunctionDef	qemu_co_mutex_unlock (CoMutex * mutex)		6970513	0					
ANR	6970515	CompoundStatement		3:0:56:1646	6970513	0					
ANR	6970516	IdentifierDeclStatement	Coroutine * self = qemu_coroutine_self ( ) ;	5:4:63:102	6970513	0	True				
ANR	6970517	IdentifierDecl	* self = qemu_coroutine_self ( )		6970513	0					
ANR	6970518	IdentifierDeclType	Coroutine *		6970513	0					
ANR	6970519	Identifier	self		6970513	1					
ANR	6970520	AssignmentExpression	* self = qemu_coroutine_self ( )		6970513	2		=			
ANR	6970521	Identifier	self		6970513	0					
ANR	6970522	CallExpression	qemu_coroutine_self ( )		6970513	1					
ANR	6970523	Callee	qemu_coroutine_self		6970513	0					
ANR	6970524	Identifier	qemu_coroutine_self		6970513	0					
ANR	6970525	ArgumentList			6970513	1					
ANR	6970526	ExpressionStatement	"trace_qemu_co_mutex_unlock_entry ( mutex , self )"	9:4:111:156	6970513	1	True				
ANR	6970527	CallExpression	"trace_qemu_co_mutex_unlock_entry ( mutex , self )"		6970513	0					
ANR	6970528	Callee	trace_qemu_co_mutex_unlock_entry		6970513	0					
ANR	6970529	Identifier	trace_qemu_co_mutex_unlock_entry		6970513	0					
ANR	6970530	ArgumentList	mutex		6970513	1					
ANR	6970531	Argument	mutex		6970513	0					
ANR	6970532	Identifier	mutex		6970513	0					
ANR	6970533	Argument	self		6970513	1					
ANR	6970534	Identifier	self		6970513	0					
ANR	6970535	ExpressionStatement	assert ( mutex -> locked )	13:4:165:186	6970513	2	True				
ANR	6970536	CallExpression	assert ( mutex -> locked )		6970513	0					
ANR	6970537	Callee	assert		6970513	0					
ANR	6970538	Identifier	assert		6970513	0					
ANR	6970539	ArgumentList	mutex -> locked		6970513	1					
ANR	6970540	Argument	mutex -> locked		6970513	0					
ANR	6970541	PtrMemberAccess	mutex -> locked		6970513	0					
ANR	6970542	Identifier	mutex		6970513	0					
ANR	6970543	Identifier	locked		6970513	1					
ANR	6970544	ExpressionStatement	assert ( mutex -> holder == self )	15:4:193:222	6970513	3	True				
ANR	6970545	CallExpression	assert ( mutex -> holder == self )		6970513	0					
ANR	6970546	Callee	assert		6970513	0					
ANR	6970547	Identifier	assert		6970513	0					
ANR	6970548	ArgumentList	mutex -> holder == self		6970513	1					
ANR	6970549	Argument	mutex -> holder == self		6970513	0					
ANR	6970550	EqualityExpression	mutex -> holder == self		6970513	0		==			
ANR	6970551	PtrMemberAccess	mutex -> holder		6970513	0					
ANR	6970552	Identifier	mutex		6970513	0					
ANR	6970553	Identifier	holder		6970513	1					
ANR	6970554	Identifier	self		6970513	1					
ANR	6970555	ExpressionStatement	assert ( qemu_in_coroutine ( ) )	17:4:229:256	6970513	4	True				
ANR	6970556	CallExpression	assert ( qemu_in_coroutine ( ) )		6970513	0					
ANR	6970557	Callee	assert		6970513	0					
ANR	6970558	Identifier	assert		6970513	0					
ANR	6970559	ArgumentList	qemu_in_coroutine ( )		6970513	1					
ANR	6970560	Argument	qemu_in_coroutine ( )		6970513	0					
ANR	6970561	CallExpression	qemu_in_coroutine ( )		6970513	0					
ANR	6970562	Callee	qemu_in_coroutine		6970513	0					
ANR	6970563	Identifier	qemu_in_coroutine		6970513	0					
ANR	6970564	ArgumentList			6970513	1					
ANR	6970565	ExpressionStatement	mutex -> holder = NULL	21:4:265:285	6970513	5	True				
ANR	6970566	AssignmentExpression	mutex -> holder = NULL		6970513	0		=			
ANR	6970567	PtrMemberAccess	mutex -> holder		6970513	0					
ANR	6970568	Identifier	mutex		6970513	0					
ANR	6970569	Identifier	holder		6970513	1					
ANR	6970570	Identifier	NULL		6970513	1					
ANR	6970571	ExpressionStatement	self -> locks_held --	23:4:292:310	6970513	6	True				
ANR	6970572	PostIncDecOperationExpression	self -> locks_held --		6970513	0					
ANR	6970573	PtrMemberAccess	self -> locks_held		6970513	0					
ANR	6970574	Identifier	self		6970513	0					
ANR	6970575	Identifier	locks_held		6970513	1					
ANR	6970576	IncDec	--		6970513	1					
ANR	6970577	IfStatement	if ( atomic_fetch_dec ( & mutex -> locked ) == 1 )		6970513	7					
ANR	6970578	Condition	atomic_fetch_dec ( & mutex -> locked ) == 1	25:8:321:357	6970513	0	True				
ANR	6970579	EqualityExpression	atomic_fetch_dec ( & mutex -> locked ) == 1		6970513	0		==			
ANR	6970580	CallExpression	atomic_fetch_dec ( & mutex -> locked )		6970513	0					
ANR	6970581	Callee	atomic_fetch_dec		6970513	0					
ANR	6970582	Identifier	atomic_fetch_dec		6970513	0					
ANR	6970583	ArgumentList	& mutex -> locked		6970513	1					
ANR	6970584	Argument	& mutex -> locked		6970513	0					
ANR	6970585	UnaryOperationExpression	& mutex -> locked		6970513	0					
ANR	6970586	UnaryOperator	&		6970513	0					
ANR	6970587	PtrMemberAccess	mutex -> locked		6970513	1					
ANR	6970588	Identifier	mutex		6970513	0					
ANR	6970589	Identifier	locked		6970513	1					
ANR	6970590	PrimaryExpression	1		6970513	1					
ANR	6970591	CompoundStatement		23:47:303:303	6970513	1					
ANR	6970592	ReturnStatement	return ;	29:8:442:448	6970513	0	True				
ANR	6970593	ForStatement	for ( ; ; )		6970513	8					
ANR	6970594	CompoundStatement		37:8:479:499	6970513	0					
ANR	6970595	IdentifierDeclStatement	CoWaitRecord * to_wake = pop_waiter ( mutex ) ;	37:8:484:525	6970513	0	True				
ANR	6970596	IdentifierDecl	* to_wake = pop_waiter ( mutex )		6970513	0					
ANR	6970597	IdentifierDeclType	CoWaitRecord *		6970513	0					
ANR	6970598	Identifier	to_wake		6970513	1					
ANR	6970599	AssignmentExpression	* to_wake = pop_waiter ( mutex )		6970513	2		=			
ANR	6970600	Identifier	to_wake		6970513	0					
ANR	6970601	CallExpression	pop_waiter ( mutex )		6970513	1					
ANR	6970602	Callee	pop_waiter		6970513	0					
ANR	6970603	Identifier	pop_waiter		6970513	0					
ANR	6970604	ArgumentList	mutex		6970513	1					
ANR	6970605	Argument	mutex		6970513	0					
ANR	6970606	Identifier	mutex		6970513	0					
ANR	6970607	IdentifierDeclStatement	unsigned our_handoff ;	39:8:536:556	6970513	1	True				
ANR	6970608	IdentifierDecl	our_handoff		6970513	0					
ANR	6970609	IdentifierDeclType	unsigned		6970513	0					
ANR	6970610	Identifier	our_handoff		6970513	1					
ANR	6970611	IfStatement	if ( to_wake )		6970513	2					
ANR	6970612	Condition	to_wake	43:12:573:579	6970513	0	True				
ANR	6970613	Identifier	to_wake		6970513	0					
ANR	6970614	CompoundStatement		43:12:540:567	6970513	1					
ANR	6970615	IdentifierDeclStatement	Coroutine * co = to_wake -> co ;	45:12:597:624	6970513	0	True				
ANR	6970616	IdentifierDecl	* co = to_wake -> co		6970513	0					
ANR	6970617	IdentifierDeclType	Coroutine *		6970513	0					
ANR	6970618	Identifier	co		6970513	1					
ANR	6970619	AssignmentExpression	* co = to_wake -> co		6970513	2		=			
ANR	6970620	Identifier	co		6970513	0					
ANR	6970621	PtrMemberAccess	to_wake -> co		6970513	1					
ANR	6970622	Identifier	to_wake		6970513	0					
ANR	6970623	Identifier	co		6970513	1					
ANR	6970624	ExpressionStatement	aio_co_wake ( co )	47:12:639:654	6970513	1	True				
ANR	6970625	CallExpression	aio_co_wake ( co )		6970513	0					
ANR	6970626	Callee	aio_co_wake		6970513	0					
ANR	6970627	Identifier	aio_co_wake		6970513	0					
ANR	6970628	ArgumentList	co		6970513	1					
ANR	6970629	Argument	co		6970513	0					
ANR	6970630	Identifier	co		6970513	0					
ANR	6970631	BreakStatement	break ;	49:12:669:674	6970513	2	True				
ANR	6970632	IfStatement	if ( ++ mutex -> sequence == 0 )		6970513	3					
ANR	6970633	Condition	++ mutex -> sequence == 0	63:12:939:960	6970513	0	True				
ANR	6970634	EqualityExpression	++ mutex -> sequence == 0		6970513	0		==			
ANR	6970635	UnaryExpression	++ mutex -> sequence		6970513	0					
ANR	6970636	IncDec	++		6970513	0					
ANR	6970637	PtrMemberAccess	mutex -> sequence		6970513	1					
ANR	6970638	Identifier	mutex		6970513	0					
ANR	6970639	Identifier	sequence		6970513	1					
ANR	6970640	PrimaryExpression	0		6970513	1					
ANR	6970641	CompoundStatement		61:36:906:906	6970513	1					
ANR	6970642	ExpressionStatement	mutex -> sequence = 1	65:12:978:997	6970513	0	True				
ANR	6970643	AssignmentExpression	mutex -> sequence = 1		6970513	0		=			
ANR	6970644	PtrMemberAccess	mutex -> sequence		6970513	0					
ANR	6970645	Identifier	mutex		6970513	0					
ANR	6970646	Identifier	sequence		6970513	1					
ANR	6970647	PrimaryExpression	1		6970513	1					
ANR	6970648	ExpressionStatement	our_handoff = mutex -> sequence	71:8:1021:1050	6970513	4	True				
ANR	6970649	AssignmentExpression	our_handoff = mutex -> sequence		6970513	0		=			
ANR	6970650	Identifier	our_handoff		6970513	0					
ANR	6970651	PtrMemberAccess	mutex -> sequence		6970513	1					
ANR	6970652	Identifier	mutex		6970513	0					
ANR	6970653	Identifier	sequence		6970513	1					
ANR	6970654	ExpressionStatement	"atomic_mb_set ( & mutex -> handoff , our_handoff )"	73:8:1061:1104	6970513	5	True				
ANR	6970655	CallExpression	"atomic_mb_set ( & mutex -> handoff , our_handoff )"		6970513	0					
ANR	6970656	Callee	atomic_mb_set		6970513	0					
ANR	6970657	Identifier	atomic_mb_set		6970513	0					
ANR	6970658	ArgumentList	& mutex -> handoff		6970513	1					
ANR	6970659	Argument	& mutex -> handoff		6970513	0					
ANR	6970660	UnaryOperationExpression	& mutex -> handoff		6970513	0					
ANR	6970661	UnaryOperator	&		6970513	0					
ANR	6970662	PtrMemberAccess	mutex -> handoff		6970513	1					
ANR	6970663	Identifier	mutex		6970513	0					
ANR	6970664	Identifier	handoff		6970513	1					
ANR	6970665	Argument	our_handoff		6970513	1					
ANR	6970666	Identifier	our_handoff		6970513	0					
ANR	6970667	IfStatement	if ( ! has_waiters ( mutex ) )		6970513	6					
ANR	6970668	Condition	! has_waiters ( mutex )	75:12:1119:1137	6970513	0	True				
ANR	6970669	UnaryOperationExpression	! has_waiters ( mutex )		6970513	0					
ANR	6970670	UnaryOperator	!		6970513	0					
ANR	6970671	CallExpression	has_waiters ( mutex )		6970513	1					
ANR	6970672	Callee	has_waiters		6970513	0					
ANR	6970673	Identifier	has_waiters		6970513	0					
ANR	6970674	ArgumentList	mutex		6970513	1					
ANR	6970675	Argument	mutex		6970513	0					
ANR	6970676	Identifier	mutex		6970513	0					
ANR	6970677	CompoundStatement		73:33:1083:1083	6970513	1					
ANR	6970678	BreakStatement	break ;	83:12:1290:1295	6970513	0	True				
ANR	6970679	IfStatement	"if ( atomic_cmpxchg ( & mutex -> handoff , our_handoff , 0 ) != our_handoff )"		6970513	7					
ANR	6970680	Condition	"atomic_cmpxchg ( & mutex -> handoff , our_handoff , 0 ) != our_handoff"	95:12:1486:1547	6970513	0	True				
ANR	6970681	EqualityExpression	"atomic_cmpxchg ( & mutex -> handoff , our_handoff , 0 ) != our_handoff"		6970513	0		!=			
ANR	6970682	CallExpression	"atomic_cmpxchg ( & mutex -> handoff , our_handoff , 0 )"		6970513	0					
ANR	6970683	Callee	atomic_cmpxchg		6970513	0					
ANR	6970684	Identifier	atomic_cmpxchg		6970513	0					
ANR	6970685	ArgumentList	& mutex -> handoff		6970513	1					
ANR	6970686	Argument	& mutex -> handoff		6970513	0					
ANR	6970687	UnaryOperationExpression	& mutex -> handoff		6970513	0					
ANR	6970688	UnaryOperator	&		6970513	0					
ANR	6970689	PtrMemberAccess	mutex -> handoff		6970513	1					
ANR	6970690	Identifier	mutex		6970513	0					
ANR	6970691	Identifier	handoff		6970513	1					
ANR	6970692	Argument	our_handoff		6970513	1					
ANR	6970693	Identifier	our_handoff		6970513	0					
ANR	6970694	Argument	0		6970513	2					
ANR	6970695	PrimaryExpression	0		6970513	0					
ANR	6970696	Identifier	our_handoff		6970513	1					
ANR	6970697	CompoundStatement		93:76:1493:1493	6970513	1					
ANR	6970698	BreakStatement	break ;	97:12:1565:1570	6970513	0	True				
ANR	6970699	ExpressionStatement	"trace_qemu_co_mutex_unlock_return ( mutex , self )"	105:4:1597:1643	6970513	9	True				
ANR	6970700	CallExpression	"trace_qemu_co_mutex_unlock_return ( mutex , self )"		6970513	0					
ANR	6970701	Callee	trace_qemu_co_mutex_unlock_return		6970513	0					
ANR	6970702	Identifier	trace_qemu_co_mutex_unlock_return		6970513	0					
ANR	6970703	ArgumentList	mutex		6970513	1					
ANR	6970704	Argument	mutex		6970513	0					
ANR	6970705	Identifier	mutex		6970513	0					
ANR	6970706	Argument	self		6970513	1					
ANR	6970707	Identifier	self		6970513	0					
ANR	6970708	ReturnType	void coroutine_fn		6970513	1					
ANR	6970709	Identifier	qemu_co_mutex_unlock		6970513	2					
ANR	6970710	ParameterList	CoMutex * mutex		6970513	3					
ANR	6970711	Parameter	CoMutex * mutex	1:39:39:52	6970513	0	True				
ANR	6970712	ParameterType	CoMutex *		6970513	0					
ANR	6970713	Identifier	mutex		6970513	1					
ANR	6970714	CFGEntryNode	ENTRY		6970513		True				
ANR	6970715	CFGExitNode	EXIT		6970513		True				
ANR	6970716	InfiniteForNode	true		6970513		True				
ANR	6970717	Symbol	qemu_in_coroutine		6970513						
ANR	6970718	Symbol	NULL		6970513						
ANR	6970719	Symbol	our_handoff		6970513						
ANR	6970720	Symbol	mutex -> holder		6970513						
ANR	6970721	Symbol	* self		6970513						
ANR	6970722	Symbol	self -> locks_held		6970513						
ANR	6970723	Symbol	to_wake		6970513						
ANR	6970724	Symbol	mutex		6970513						
ANR	6970725	Symbol	pop_waiter		6970513						
ANR	6970726	Symbol	mutex -> sequence		6970513						
ANR	6970727	Symbol	co		6970513						
ANR	6970728	Symbol	atomic_fetch_dec		6970513						
ANR	6970729	Symbol	& mutex -> handoff		6970513						
ANR	6970730	Symbol	mutex -> locked		6970513						
ANR	6970731	Symbol	self		6970513						
ANR	6970732	Symbol	to_wake -> co		6970513						
ANR	6970733	Symbol	qemu_coroutine_self		6970513						
ANR	6970734	Symbol	* to_wake		6970513						
ANR	6970735	Symbol	atomic_cmpxchg		6970513						
ANR	6970736	Symbol	* mutex		6970513						
ANR	6970737	Symbol	& mutex -> locked		6970513						
ANR	6970738	Symbol	has_waiters		6970513						
