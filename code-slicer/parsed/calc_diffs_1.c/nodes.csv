command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1201310	File	/home/p4ultr4n/workplace/ReVeal/raw_code/calc_diffs_1.c								
ANR	1201311	Function	calc_diffs	1:0:0:2412							
ANR	1201312	FunctionDef	"calc_diffs (const DecimateContext * dm , struct qitem * q , const AVFrame * f1 , const AVFrame * f2)"		1201311	0					
ANR	1201313	CompoundStatement		5:0:130:2412	1201311	0					
ANR	1201314	IdentifierDeclStatement	int64_t maxdiff = - 1 ;	7:4:137:157	1201311	0	True				
ANR	1201315	IdentifierDecl	maxdiff = - 1		1201311	0					
ANR	1201316	IdentifierDeclType	int64_t		1201311	0					
ANR	1201317	Identifier	maxdiff		1201311	1					
ANR	1201318	AssignmentExpression	maxdiff = - 1		1201311	2		=			
ANR	1201319	Identifier	maxdiff		1201311	0					
ANR	1201320	UnaryOperationExpression	- 1		1201311	1					
ANR	1201321	UnaryOperator	-		1201311	0					
ANR	1201322	PrimaryExpression	1		1201311	1					
ANR	1201323	IdentifierDeclStatement	int64_t * bdiffs = dm -> bdiffs ;	9:4:164:192	1201311	1	True				
ANR	1201324	IdentifierDecl	* bdiffs = dm -> bdiffs		1201311	0					
ANR	1201325	IdentifierDeclType	int64_t *		1201311	0					
ANR	1201326	Identifier	bdiffs		1201311	1					
ANR	1201327	AssignmentExpression	* bdiffs = dm -> bdiffs		1201311	2		=			
ANR	1201328	Identifier	bdiffs		1201311	0					
ANR	1201329	PtrMemberAccess	dm -> bdiffs		1201311	1					
ANR	1201330	Identifier	dm		1201311	0					
ANR	1201331	Identifier	bdiffs		1201311	1					
ANR	1201332	IdentifierDeclStatement	"int plane , i , j ;"	11:4:199:214	1201311	2	True				
ANR	1201333	IdentifierDecl	plane		1201311	0					
ANR	1201334	IdentifierDeclType	int		1201311	0					
ANR	1201335	Identifier	plane		1201311	1					
ANR	1201336	IdentifierDecl	i		1201311	1					
ANR	1201337	IdentifierDeclType	int		1201311	0					
ANR	1201338	Identifier	i		1201311	1					
ANR	1201339	IdentifierDecl	j		1201311	2					
ANR	1201340	IdentifierDeclType	int		1201311	0					
ANR	1201341	Identifier	j		1201311	1					
ANR	1201342	ExpressionStatement	"memset ( bdiffs , 0 , dm -> bdiffsize * sizeof ( * bdiffs ) )"	15:4:223:273	1201311	3	True				
ANR	1201343	CallExpression	"memset ( bdiffs , 0 , dm -> bdiffsize * sizeof ( * bdiffs ) )"		1201311	0					
ANR	1201344	Callee	memset		1201311	0					
ANR	1201345	Identifier	memset		1201311	0					
ANR	1201346	ArgumentList	bdiffs		1201311	1					
ANR	1201347	Argument	bdiffs		1201311	0					
ANR	1201348	Identifier	bdiffs		1201311	0					
ANR	1201349	Argument	0		1201311	1					
ANR	1201350	PrimaryExpression	0		1201311	0					
ANR	1201351	Argument	dm -> bdiffsize * sizeof ( * bdiffs )		1201311	2					
ANR	1201352	MultiplicativeExpression	dm -> bdiffsize * sizeof ( * bdiffs )		1201311	0		*			
ANR	1201353	PtrMemberAccess	dm -> bdiffsize		1201311	0					
ANR	1201354	Identifier	dm		1201311	0					
ANR	1201355	Identifier	bdiffsize		1201311	1					
ANR	1201356	SizeofExpression	sizeof ( * bdiffs )		1201311	1					
ANR	1201357	Sizeof	sizeof		1201311	0					
ANR	1201358	UnaryOperationExpression	* bdiffs		1201311	1					
ANR	1201359	UnaryOperator	*		1201311	0					
ANR	1201360	Identifier	bdiffs		1201311	1					
ANR	1201361	ForStatement	for ( plane = 0 ; plane < ( dm -> chroma ? 3 : 1 ) ; plane ++ )		1201311	4					
ANR	1201362	ForInit	plane = 0 ;	19:9:287:296	1201311	0	True				
ANR	1201363	AssignmentExpression	plane = 0		1201311	0		=			
ANR	1201364	Identifier	plane		1201311	0					
ANR	1201365	PrimaryExpression	0		1201311	1					
ANR	1201366	Condition	plane < ( dm -> chroma ? 3 : 1 )	19:20:298:325	1201311	1	True				
ANR	1201367	RelationalExpression	plane < ( dm -> chroma ? 3 : 1 )		1201311	0		<			
ANR	1201368	Identifier	plane		1201311	0					
ANR	1201369	ConditionalExpression	dm -> chroma ? 3 : 1		1201311	1					
ANR	1201370	Condition	dm -> chroma		1201311	0					
ANR	1201371	PtrMemberAccess	dm -> chroma		1201311	0					
ANR	1201372	Identifier	dm		1201311	0					
ANR	1201373	Identifier	chroma		1201311	1					
ANR	1201374	PrimaryExpression	3		1201311	1					
ANR	1201375	PrimaryExpression	1		1201311	2					
ANR	1201376	PostIncDecOperationExpression	plane ++	19:50:328:334	1201311	2	True				
ANR	1201377	Identifier	plane		1201311	0					
ANR	1201378	IncDec	++		1201311	1					
ANR	1201379	CompoundStatement		33:8:643:672	1201311	3					
ANR	1201380	IdentifierDeclStatement	"int x , y , xl ;"	21:8:348:360	1201311	0	True				
ANR	1201381	IdentifierDecl	x		1201311	0					
ANR	1201382	IdentifierDeclType	int		1201311	0					
ANR	1201383	Identifier	x		1201311	1					
ANR	1201384	IdentifierDecl	y		1201311	1					
ANR	1201385	IdentifierDeclType	int		1201311	0					
ANR	1201386	Identifier	y		1201311	1					
ANR	1201387	IdentifierDecl	xl		1201311	2					
ANR	1201388	IdentifierDeclType	int		1201311	0					
ANR	1201389	Identifier	xl		1201311	1					
ANR	1201390	IdentifierDeclStatement	const int linesize1 = f1 -> linesize [ plane ] ;	23:8:371:412	1201311	1	True				
ANR	1201391	IdentifierDecl	linesize1 = f1 -> linesize [ plane ]		1201311	0					
ANR	1201392	IdentifierDeclType	const int		1201311	0					
ANR	1201393	Identifier	linesize1		1201311	1					
ANR	1201394	AssignmentExpression	linesize1 = f1 -> linesize [ plane ]		1201311	2		=			
ANR	1201395	Identifier	linesize1		1201311	0					
ANR	1201396	ArrayIndexing	f1 -> linesize [ plane ]		1201311	1					
ANR	1201397	PtrMemberAccess	f1 -> linesize		1201311	0					
ANR	1201398	Identifier	f1		1201311	0					
ANR	1201399	Identifier	linesize		1201311	1					
ANR	1201400	Identifier	plane		1201311	1					
ANR	1201401	IdentifierDeclStatement	const int linesize2 = f2 -> linesize [ plane ] ;	25:8:423:464	1201311	2	True				
ANR	1201402	IdentifierDecl	linesize2 = f2 -> linesize [ plane ]		1201311	0					
ANR	1201403	IdentifierDeclType	const int		1201311	0					
ANR	1201404	Identifier	linesize2		1201311	1					
ANR	1201405	AssignmentExpression	linesize2 = f2 -> linesize [ plane ]		1201311	2		=			
ANR	1201406	Identifier	linesize2		1201311	0					
ANR	1201407	ArrayIndexing	f2 -> linesize [ plane ]		1201311	1					
ANR	1201408	PtrMemberAccess	f2 -> linesize		1201311	0					
ANR	1201409	Identifier	f2		1201311	0					
ANR	1201410	Identifier	linesize		1201311	1					
ANR	1201411	Identifier	plane		1201311	1					
ANR	1201412	IdentifierDeclStatement	const uint8_t * f1p = f1 -> data [ plane ] ;	27:8:475:511	1201311	3	True				
ANR	1201413	IdentifierDecl	* f1p = f1 -> data [ plane ]		1201311	0					
ANR	1201414	IdentifierDeclType	const uint8_t *		1201311	0					
ANR	1201415	Identifier	f1p		1201311	1					
ANR	1201416	AssignmentExpression	* f1p = f1 -> data [ plane ]		1201311	2		=			
ANR	1201417	Identifier	f1p		1201311	0					
ANR	1201418	ArrayIndexing	f1 -> data [ plane ]		1201311	1					
ANR	1201419	PtrMemberAccess	f1 -> data		1201311	0					
ANR	1201420	Identifier	f1		1201311	0					
ANR	1201421	Identifier	data		1201311	1					
ANR	1201422	Identifier	plane		1201311	1					
ANR	1201423	IdentifierDeclStatement	const uint8_t * f2p = f2 -> data [ plane ] ;	29:8:522:558	1201311	4	True				
ANR	1201424	IdentifierDecl	* f2p = f2 -> data [ plane ]		1201311	0					
ANR	1201425	IdentifierDeclType	const uint8_t *		1201311	0					
ANR	1201426	Identifier	f2p		1201311	1					
ANR	1201427	AssignmentExpression	* f2p = f2 -> data [ plane ]		1201311	2		=			
ANR	1201428	Identifier	f2p		1201311	0					
ANR	1201429	ArrayIndexing	f2 -> data [ plane ]		1201311	1					
ANR	1201430	PtrMemberAccess	f2 -> data		1201311	0					
ANR	1201431	Identifier	f2		1201311	0					
ANR	1201432	Identifier	data		1201311	1					
ANR	1201433	Identifier	plane		1201311	1					
ANR	1201434	IdentifierDeclStatement	"int width = plane ? FF_CEIL_RSHIFT ( f1 -> width , dm -> hsub ) : f1 -> width ;"	31:8:569:640	1201311	5	True				
ANR	1201435	IdentifierDecl	"width = plane ? FF_CEIL_RSHIFT ( f1 -> width , dm -> hsub ) : f1 -> width"		1201311	0					
ANR	1201436	IdentifierDeclType	int		1201311	0					
ANR	1201437	Identifier	width		1201311	1					
ANR	1201438	AssignmentExpression	"width = plane ? FF_CEIL_RSHIFT ( f1 -> width , dm -> hsub ) : f1 -> width"		1201311	2		=			
ANR	1201439	Identifier	width		1201311	0					
ANR	1201440	ConditionalExpression	"plane ? FF_CEIL_RSHIFT ( f1 -> width , dm -> hsub ) : f1 -> width"		1201311	1					
ANR	1201441	Condition	plane		1201311	0					
ANR	1201442	Identifier	plane		1201311	0					
ANR	1201443	CallExpression	"FF_CEIL_RSHIFT ( f1 -> width , dm -> hsub )"		1201311	1					
ANR	1201444	Callee	FF_CEIL_RSHIFT		1201311	0					
ANR	1201445	Identifier	FF_CEIL_RSHIFT		1201311	0					
ANR	1201446	ArgumentList	f1 -> width		1201311	1					
ANR	1201447	Argument	f1 -> width		1201311	0					
ANR	1201448	PtrMemberAccess	f1 -> width		1201311	0					
ANR	1201449	Identifier	f1		1201311	0					
ANR	1201450	Identifier	width		1201311	1					
ANR	1201451	Argument	dm -> hsub		1201311	1					
ANR	1201452	PtrMemberAccess	dm -> hsub		1201311	0					
ANR	1201453	Identifier	dm		1201311	0					
ANR	1201454	Identifier	hsub		1201311	1					
ANR	1201455	PtrMemberAccess	f1 -> width		1201311	2					
ANR	1201456	Identifier	f1		1201311	0					
ANR	1201457	Identifier	width		1201311	1					
ANR	1201458	IdentifierDeclStatement	"int height = plane ? FF_CEIL_RSHIFT ( f1 -> height , dm -> vsub ) : f1 -> height ;"	33:8:651:723	1201311	6	True				
ANR	1201459	IdentifierDecl	"height = plane ? FF_CEIL_RSHIFT ( f1 -> height , dm -> vsub ) : f1 -> height"		1201311	0					
ANR	1201460	IdentifierDeclType	int		1201311	0					
ANR	1201461	Identifier	height		1201311	1					
ANR	1201462	AssignmentExpression	"height = plane ? FF_CEIL_RSHIFT ( f1 -> height , dm -> vsub ) : f1 -> height"		1201311	2		=			
ANR	1201463	Identifier	height		1201311	0					
ANR	1201464	ConditionalExpression	"plane ? FF_CEIL_RSHIFT ( f1 -> height , dm -> vsub ) : f1 -> height"		1201311	1					
ANR	1201465	Condition	plane		1201311	0					
ANR	1201466	Identifier	plane		1201311	0					
ANR	1201467	CallExpression	"FF_CEIL_RSHIFT ( f1 -> height , dm -> vsub )"		1201311	1					
ANR	1201468	Callee	FF_CEIL_RSHIFT		1201311	0					
ANR	1201469	Identifier	FF_CEIL_RSHIFT		1201311	0					
ANR	1201470	ArgumentList	f1 -> height		1201311	1					
ANR	1201471	Argument	f1 -> height		1201311	0					
ANR	1201472	PtrMemberAccess	f1 -> height		1201311	0					
ANR	1201473	Identifier	f1		1201311	0					
ANR	1201474	Identifier	height		1201311	1					
ANR	1201475	Argument	dm -> vsub		1201311	1					
ANR	1201476	PtrMemberAccess	dm -> vsub		1201311	0					
ANR	1201477	Identifier	dm		1201311	0					
ANR	1201478	Identifier	vsub		1201311	1					
ANR	1201479	PtrMemberAccess	f1 -> height		1201311	2					
ANR	1201480	Identifier	f1		1201311	0					
ANR	1201481	Identifier	height		1201311	1					
ANR	1201482	IdentifierDeclStatement	int hblockx = dm -> blockx / 2 ;	35:8:734:763	1201311	7	True				
ANR	1201483	IdentifierDecl	hblockx = dm -> blockx / 2		1201311	0					
ANR	1201484	IdentifierDeclType	int		1201311	0					
ANR	1201485	Identifier	hblockx		1201311	1					
ANR	1201486	AssignmentExpression	hblockx = dm -> blockx / 2		1201311	2		=			
ANR	1201487	Identifier	hblockx		1201311	0					
ANR	1201488	MultiplicativeExpression	dm -> blockx / 2		1201311	1		/			
ANR	1201489	PtrMemberAccess	dm -> blockx		1201311	0					
ANR	1201490	Identifier	dm		1201311	0					
ANR	1201491	Identifier	blockx		1201311	1					
ANR	1201492	PrimaryExpression	2		1201311	1					
ANR	1201493	IdentifierDeclStatement	int hblocky = dm -> blocky / 2 ;	37:8:774:803	1201311	8	True				
ANR	1201494	IdentifierDecl	hblocky = dm -> blocky / 2		1201311	0					
ANR	1201495	IdentifierDeclType	int		1201311	0					
ANR	1201496	Identifier	hblocky		1201311	1					
ANR	1201497	AssignmentExpression	hblocky = dm -> blocky / 2		1201311	2		=			
ANR	1201498	Identifier	hblocky		1201311	0					
ANR	1201499	MultiplicativeExpression	dm -> blocky / 2		1201311	1		/			
ANR	1201500	PtrMemberAccess	dm -> blocky		1201311	0					
ANR	1201501	Identifier	dm		1201311	0					
ANR	1201502	Identifier	blocky		1201311	1					
ANR	1201503	PrimaryExpression	2		1201311	1					
ANR	1201504	IfStatement	if ( plane )		1201311	9					
ANR	1201505	Condition	plane	41:12:820:824	1201311	0	True				
ANR	1201506	Identifier	plane		1201311	0					
ANR	1201507	CompoundStatement		37:19:696:696	1201311	1					
ANR	1201508	ExpressionStatement	hblockx >>= dm -> hsub	43:12:842:862	1201311	0	True				
ANR	1201509	AssignmentExpression	hblockx >>= dm -> hsub		1201311	0		>>=			
ANR	1201510	Identifier	hblockx		1201311	0					
ANR	1201511	PtrMemberAccess	dm -> hsub		1201311	1					
ANR	1201512	Identifier	dm		1201311	0					
ANR	1201513	Identifier	hsub		1201311	1					
ANR	1201514	ExpressionStatement	hblocky >>= dm -> vsub	45:12:877:897	1201311	1	True				
ANR	1201515	AssignmentExpression	hblocky >>= dm -> vsub		1201311	0		>>=			
ANR	1201516	Identifier	hblocky		1201311	0					
ANR	1201517	PtrMemberAccess	dm -> vsub		1201311	1					
ANR	1201518	Identifier	dm		1201311	0					
ANR	1201519	Identifier	vsub		1201311	1					
ANR	1201520	ForStatement	for ( y = 0 ; y < height ; y ++ )		1201311	10					
ANR	1201521	ForInit	y = 0 ;	51:13:926:931	1201311	0	True				
ANR	1201522	AssignmentExpression	y = 0		1201311	0		=			
ANR	1201523	Identifier	y		1201311	0					
ANR	1201524	PrimaryExpression	0		1201311	1					
ANR	1201525	Condition	y < height	51:20:933:942	1201311	1	True				
ANR	1201526	RelationalExpression	y < height		1201311	0		<			
ANR	1201527	Identifier	y		1201311	0					
ANR	1201528	Identifier	height		1201311	1					
ANR	1201529	PostIncDecOperationExpression	y ++	51:32:945:947	1201311	2	True				
ANR	1201530	Identifier	y		1201311	0					
ANR	1201531	IncDec	++		1201311	1					
ANR	1201532	CompoundStatement		51:12:872:885	1201311	3					
ANR	1201533	IdentifierDeclStatement	int ydest = y / hblocky ;	53:12:965:988	1201311	0	True				
ANR	1201534	IdentifierDecl	ydest = y / hblocky		1201311	0					
ANR	1201535	IdentifierDeclType	int		1201311	0					
ANR	1201536	Identifier	ydest		1201311	1					
ANR	1201537	AssignmentExpression	ydest = y / hblocky		1201311	2		=			
ANR	1201538	Identifier	ydest		1201311	0					
ANR	1201539	MultiplicativeExpression	y / hblocky		1201311	1		/			
ANR	1201540	Identifier	y		1201311	0					
ANR	1201541	Identifier	hblocky		1201311	1					
ANR	1201542	IdentifierDeclStatement	int xdest = 0 ;	55:12:1003:1016	1201311	1	True				
ANR	1201543	IdentifierDecl	xdest = 0		1201311	0					
ANR	1201544	IdentifierDeclType	int		1201311	0					
ANR	1201545	Identifier	xdest		1201311	1					
ANR	1201546	AssignmentExpression	xdest = 0		1201311	2		=			
ANR	1201547	Identifier	xdest		1201311	0					
ANR	1201548	PrimaryExpression	0		1201311	1					
ANR	1201549	Statement	define	59:1:1022:1027	1201311	2	True				
ANR	1201550	Statement	CALC_DIFF	59:8:1029:1037	1201311	3	True				
ANR	1201551	Statement	(	59:17:1038:1038	1201311	4	True				
ANR	1201552	Statement	nbits	59:18:1039:1043	1201311	5	True				
ANR	1201553	Statement	)	59:23:1044:1044	1201311	6	True				
ANR	1201554	DoStatement	do		1201311	7					
ANR	1201555	CompoundStatement		55:28:918:918	1201311	0					
ANR	1201556	ForStatement	for ( x = 0 ; x < width ; x += hblockx )		1201311	0					
ANR	1201557	ForInit	x = 0 ;		1201311	0					
ANR	1201558	AssignmentExpression	x = 0		1201311	0		=			
ANR	1201559	Identifier	x		1201311	0					
ANR	1201560	PrimaryExpression	0		1201311	1					
ANR	1201561	Condition	x < width		1201311	1					
ANR	1201562	RelationalExpression	x < width		1201311	0		<			
ANR	1201563	Identifier	x		1201311	0					
ANR	1201564	Identifier	width		1201311	1					
ANR	1201565	AssignmentExpression	x += hblockx		1201311	2		+=			
ANR	1201566	Identifier	x		1201311	0					
ANR	1201567	Identifier	hblockx		1201311	1					
ANR	1201568	CompoundStatement		61:8:1087:1120	1201311	3					
ANR	1201569	IdentifierDeclStatement	int64_t acc = 0 ;		1201311	0					
ANR	1201570	IdentifierDecl	acc = 0		1201311	0					
ANR	1201571	IdentifierDeclType	int64_t		1201311	0					
ANR	1201572	Identifier	acc		1201311	1					
ANR	1201573	AssignmentExpression	acc = 0		1201311	2		=			
ANR	1201574	Identifier	acc		1201311	0					
ANR	1201575	PrimaryExpression	0		1201311	1					
ANR	1201576	IdentifierDeclStatement	"int m = FFMIN ( width , x + hblockx ) ;"		1201311	1					
ANR	1201577	IdentifierDecl	"m = FFMIN ( width , x + hblockx )"		1201311	0					
ANR	1201578	IdentifierDeclType	int		1201311	0					
ANR	1201579	Identifier	m		1201311	1					
ANR	1201580	AssignmentExpression	"m = FFMIN ( width , x + hblockx )"		1201311	2		=			
ANR	1201581	Identifier	m		1201311	0					
ANR	1201582	CallExpression	"FFMIN ( width , x + hblockx )"		1201311	1					
ANR	1201583	Callee	FFMIN		1201311	0					
ANR	1201584	Identifier	FFMIN		1201311	0					
ANR	1201585	ArgumentList	width		1201311	1					
ANR	1201586	Argument	width		1201311	0					
ANR	1201587	Identifier	width		1201311	0					
ANR	1201588	Argument	x + hblockx		1201311	1					
ANR	1201589	AdditiveExpression	x + hblockx		1201311	0		+			
ANR	1201590	Identifier	x		1201311	0					
ANR	1201591	Identifier	hblockx		1201311	1					
ANR	1201592	ForStatement	for ( xl = x ; xl < m ; xl ++ )		1201311	2					
ANR	1201593	ForInit	xl = x ;		1201311	0					
ANR	1201594	AssignmentExpression	xl = x		1201311	0		=			
ANR	1201595	Identifier	xl		1201311	0					
ANR	1201596	Identifier	x		1201311	1					
ANR	1201597	Condition	xl < m		1201311	1					
ANR	1201598	RelationalExpression	xl < m		1201311	0		<			
ANR	1201599	Identifier	xl		1201311	0					
ANR	1201600	Identifier	m		1201311	1					
ANR	1201601	PostIncDecOperationExpression	xl ++		1201311	2					
ANR	1201602	Identifier	xl		1201311	0					
ANR	1201603	IncDec	++		1201311	1					
ANR	1201604	ExpressionStatement	acc += abs ( ( ( const uint nbits _t * ) f1p ) [ xl ] - ( ( const uint nbits _t * ) f2p ) [ xl ] )		1201311	3					
ANR	1201605	AssignmentExpression	acc += abs ( ( ( const uint nbits _t * ) f1p ) [ xl ] - ( ( const uint nbits _t * ) f2p ) [ xl ] )		1201311	0		+=			
ANR	1201606	Identifier	acc		1201311	0					
ANR	1201607	CallExpression	abs ( ( ( const uint nbits _t * ) f1p ) [ xl ] - ( ( const uint nbits _t * ) f2p ) [ xl ] )		1201311	1					
ANR	1201608	Callee	abs		1201311	0					
ANR	1201609	Identifier	abs		1201311	0					
ANR	1201610	ArgumentList	( ( const uint nbits _t * ) f1p ) [ xl ] - ( ( const uint nbits _t * ) f2p ) [ xl ]		1201311	1					
ANR	1201611	Argument	( ( const uint nbits _t * ) f1p ) [ xl ] - ( ( const uint nbits _t * ) f2p ) [ xl ]		1201311	0					
ANR	1201612	AdditiveExpression	( ( const uint nbits _t * ) f1p ) [ xl ] - ( ( const uint nbits _t * ) f2p ) [ xl ]		1201311	0		-			
ANR	1201613	ArrayIndexing	( ( const uint nbits _t * ) f1p ) [ xl ]		1201311	0					
ANR	1201614	CastExpression	( const uint nbits _t * ) f1p		1201311	0					
ANR	1201615	CastTarget	const uint nbits _t *		1201311	0					
ANR	1201616	Identifier	f1p		1201311	1					
ANR	1201617	Identifier	xl		1201311	1					
ANR	1201618	ArrayIndexing	( ( const uint nbits _t * ) f2p ) [ xl ]		1201311	1					
ANR	1201619	CastExpression	( const uint nbits _t * ) f2p		1201311	0					
ANR	1201620	CastTarget	const uint nbits _t *		1201311	0					
ANR	1201621	Identifier	f2p		1201311	1					
ANR	1201622	Identifier	xl		1201311	1					
ANR	1201623	ExpressionStatement	bdiffs [ ydest * dm -> nxblocks + xdest ] += acc		1201311	3					
ANR	1201624	AssignmentExpression	bdiffs [ ydest * dm -> nxblocks + xdest ] += acc		1201311	0		+=			
ANR	1201625	ArrayIndexing	bdiffs [ ydest * dm -> nxblocks + xdest ]		1201311	0					
ANR	1201626	Identifier	bdiffs		1201311	0					
ANR	1201627	AdditiveExpression	ydest * dm -> nxblocks + xdest		1201311	1		+			
ANR	1201628	MultiplicativeExpression	ydest * dm -> nxblocks		1201311	0		*			
ANR	1201629	Identifier	ydest		1201311	0					
ANR	1201630	PtrMemberAccess	dm -> nxblocks		1201311	1					
ANR	1201631	Identifier	dm		1201311	0					
ANR	1201632	Identifier	nxblocks		1201311	1					
ANR	1201633	Identifier	xdest		1201311	1					
ANR	1201634	Identifier	acc		1201311	1					
ANR	1201635	ExpressionStatement	xdest ++		1201311	4					
ANR	1201636	PostIncDecOperationExpression	xdest ++		1201311	0					
ANR	1201637	Identifier	xdest		1201311	0					
ANR	1201638	IncDec	++		1201311	1					
ANR	1201639	WhileStatement	while ( 0 )		1201311	8					
ANR	1201640	Condition	0	79:9:1660:1660	1201311	0	True				
ANR	1201641	PrimaryExpression	0		1201311	0					
ANR	1201642	IfStatement	if ( dm -> depth == 8 )		1201311	1					
ANR	1201643	Condition	dm -> depth == 8	81:16:1680:1693	1201311	0	True				
ANR	1201644	EqualityExpression	dm -> depth == 8		1201311	0		==			
ANR	1201645	PtrMemberAccess	dm -> depth		1201311	0					
ANR	1201646	Identifier	dm		1201311	0					
ANR	1201647	Identifier	depth		1201311	1					
ANR	1201648	PrimaryExpression	8		1201311	1					
ANR	1201649	ExpressionStatement	CALC_DIFF ( 8 )	81:32:1696:1708	1201311	1	True				
ANR	1201650	CallExpression	CALC_DIFF ( 8 )		1201311	0					
ANR	1201651	Callee	CALC_DIFF		1201311	0					
ANR	1201652	Identifier	CALC_DIFF		1201311	0					
ANR	1201653	ArgumentList	8		1201311	1					
ANR	1201654	Argument	8		1201311	0					
ANR	1201655	PrimaryExpression	8		1201311	0					
ANR	1201656	ElseStatement	else		1201311	0					
ANR	1201657	ExpressionStatement	CALC_DIFF ( 16 )	83:32:1743:1756	1201311	0	True				
ANR	1201658	CallExpression	CALC_DIFF ( 16 )		1201311	0					
ANR	1201659	Callee	CALC_DIFF		1201311	0					
ANR	1201660	Identifier	CALC_DIFF		1201311	0					
ANR	1201661	ArgumentList	16		1201311	1					
ANR	1201662	Argument	16		1201311	0					
ANR	1201663	PrimaryExpression	16		1201311	0					
ANR	1201664	ExpressionStatement	f1p += linesize1	87:12:1773:1789	1201311	9	True				
ANR	1201665	AssignmentExpression	f1p += linesize1		1201311	0		+=			
ANR	1201666	Identifier	f1p		1201311	0					
ANR	1201667	Identifier	linesize1		1201311	1					
ANR	1201668	ExpressionStatement	f2p += linesize2	89:12:1804:1820	1201311	10	True				
ANR	1201669	AssignmentExpression	f2p += linesize2		1201311	0		+=			
ANR	1201670	Identifier	f2p		1201311	0					
ANR	1201671	Identifier	linesize2		1201311	1					
ANR	1201672	ForStatement	for ( i = 0 ; i < dm -> nyblocks - 1 ; i ++ )		1201311	5					
ANR	1201673	ForInit	i = 0 ;	97:9:1852:1857	1201311	0	True				
ANR	1201674	AssignmentExpression	i = 0		1201311	0		=			
ANR	1201675	Identifier	i		1201311	0					
ANR	1201676	PrimaryExpression	0		1201311	1					
ANR	1201677	Condition	i < dm -> nyblocks - 1	97:16:1859:1878	1201311	1	True				
ANR	1201678	RelationalExpression	i < dm -> nyblocks - 1		1201311	0		<			
ANR	1201679	Identifier	i		1201311	0					
ANR	1201680	AdditiveExpression	dm -> nyblocks - 1		1201311	1		-			
ANR	1201681	PtrMemberAccess	dm -> nyblocks		1201311	0					
ANR	1201682	Identifier	dm		1201311	0					
ANR	1201683	Identifier	nyblocks		1201311	1					
ANR	1201684	PrimaryExpression	1		1201311	1					
ANR	1201685	PostIncDecOperationExpression	i ++	97:38:1881:1883	1201311	2	True				
ANR	1201686	Identifier	i		1201311	0					
ANR	1201687	IncDec	++		1201311	1					
ANR	1201688	CompoundStatement		93:43:1755:1755	1201311	3					
ANR	1201689	ForStatement	for ( j = 0 ; j < dm -> nxblocks - 1 ; j ++ )		1201311	0					
ANR	1201690	ForInit	j = 0 ;	99:13:1902:1907	1201311	0	True				
ANR	1201691	AssignmentExpression	j = 0		1201311	0		=			
ANR	1201692	Identifier	j		1201311	0					
ANR	1201693	PrimaryExpression	0		1201311	1					
ANR	1201694	Condition	j < dm -> nxblocks - 1	99:20:1909:1928	1201311	1	True				
ANR	1201695	RelationalExpression	j < dm -> nxblocks - 1		1201311	0		<			
ANR	1201696	Identifier	j		1201311	0					
ANR	1201697	AdditiveExpression	dm -> nxblocks - 1		1201311	1		-			
ANR	1201698	PtrMemberAccess	dm -> nxblocks		1201311	0					
ANR	1201699	Identifier	dm		1201311	0					
ANR	1201700	Identifier	nxblocks		1201311	1					
ANR	1201701	PrimaryExpression	1		1201311	1					
ANR	1201702	PostIncDecOperationExpression	j ++	99:42:1931:1933	1201311	2	True				
ANR	1201703	Identifier	j		1201311	0					
ANR	1201704	IncDec	++		1201311	1					
ANR	1201705	CompoundStatement		97:12:1820:2070	1201311	3					
ANR	1201706	IdentifierDeclStatement	int64_t tmp = bdiffs [ i * dm -> nxblocks + j ] + bdiffs [ i * dm -> nxblocks + j + 1 ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j + 1 ] ;	101:12:1951:2201	1201311	0	True				
ANR	1201707	IdentifierDecl	tmp = bdiffs [ i * dm -> nxblocks + j ] + bdiffs [ i * dm -> nxblocks + j + 1 ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j + 1 ]		1201311	0					
ANR	1201708	IdentifierDeclType	int64_t		1201311	0					
ANR	1201709	Identifier	tmp		1201311	1					
ANR	1201710	AssignmentExpression	tmp = bdiffs [ i * dm -> nxblocks + j ] + bdiffs [ i * dm -> nxblocks + j + 1 ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j + 1 ]		1201311	2		=			
ANR	1201711	Identifier	tmp		1201311	0					
ANR	1201712	AdditiveExpression	bdiffs [ i * dm -> nxblocks + j ] + bdiffs [ i * dm -> nxblocks + j + 1 ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j + 1 ]		1201311	1		+			
ANR	1201713	ArrayIndexing	bdiffs [ i * dm -> nxblocks + j ]		1201311	0					
ANR	1201714	Identifier	bdiffs		1201311	0					
ANR	1201715	AdditiveExpression	i * dm -> nxblocks + j		1201311	1		+			
ANR	1201716	MultiplicativeExpression	i * dm -> nxblocks		1201311	0		*			
ANR	1201717	Identifier	i		1201311	0					
ANR	1201718	PtrMemberAccess	dm -> nxblocks		1201311	1					
ANR	1201719	Identifier	dm		1201311	0					
ANR	1201720	Identifier	nxblocks		1201311	1					
ANR	1201721	Identifier	j		1201311	1					
ANR	1201722	AdditiveExpression	bdiffs [ i * dm -> nxblocks + j + 1 ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j + 1 ]		1201311	1		+			
ANR	1201723	ArrayIndexing	bdiffs [ i * dm -> nxblocks + j + 1 ]		1201311	0					
ANR	1201724	Identifier	bdiffs		1201311	0					
ANR	1201725	AdditiveExpression	i * dm -> nxblocks + j + 1		1201311	1		+			
ANR	1201726	MultiplicativeExpression	i * dm -> nxblocks		1201311	0		*			
ANR	1201727	Identifier	i		1201311	0					
ANR	1201728	PtrMemberAccess	dm -> nxblocks		1201311	1					
ANR	1201729	Identifier	dm		1201311	0					
ANR	1201730	Identifier	nxblocks		1201311	1					
ANR	1201731	AdditiveExpression	j + 1		1201311	1		+			
ANR	1201732	Identifier	j		1201311	0					
ANR	1201733	PrimaryExpression	1		1201311	1					
ANR	1201734	AdditiveExpression	bdiffs [ ( i + 1 ) * dm -> nxblocks + j ] + bdiffs [ ( i + 1 ) * dm -> nxblocks + j + 1 ]		1201311	1		+			
ANR	1201735	ArrayIndexing	bdiffs [ ( i + 1 ) * dm -> nxblocks + j ]		1201311	0					
ANR	1201736	Identifier	bdiffs		1201311	0					
ANR	1201737	AdditiveExpression	( i + 1 ) * dm -> nxblocks + j		1201311	1		+			
ANR	1201738	MultiplicativeExpression	( i + 1 ) * dm -> nxblocks		1201311	0		*			
ANR	1201739	AdditiveExpression	i + 1		1201311	0		+			
ANR	1201740	Identifier	i		1201311	0					
ANR	1201741	PrimaryExpression	1		1201311	1					
ANR	1201742	PtrMemberAccess	dm -> nxblocks		1201311	1					
ANR	1201743	Identifier	dm		1201311	0					
ANR	1201744	Identifier	nxblocks		1201311	1					
ANR	1201745	Identifier	j		1201311	1					
ANR	1201746	ArrayIndexing	bdiffs [ ( i + 1 ) * dm -> nxblocks + j + 1 ]		1201311	1					
ANR	1201747	Identifier	bdiffs		1201311	0					
ANR	1201748	AdditiveExpression	( i + 1 ) * dm -> nxblocks + j + 1		1201311	1		+			
ANR	1201749	MultiplicativeExpression	( i + 1 ) * dm -> nxblocks		1201311	0		*			
ANR	1201750	AdditiveExpression	i + 1		1201311	0		+			
ANR	1201751	Identifier	i		1201311	0					
ANR	1201752	PrimaryExpression	1		1201311	1					
ANR	1201753	PtrMemberAccess	dm -> nxblocks		1201311	1					
ANR	1201754	Identifier	dm		1201311	0					
ANR	1201755	Identifier	nxblocks		1201311	1					
ANR	1201756	AdditiveExpression	j + 1		1201311	1		+			
ANR	1201757	Identifier	j		1201311	0					
ANR	1201758	PrimaryExpression	1		1201311	1					
ANR	1201759	IfStatement	if ( tmp > maxdiff )		1201311	1					
ANR	1201760	Condition	tmp > maxdiff	109:16:2220:2232	1201311	0	True				
ANR	1201761	RelationalExpression	tmp > maxdiff		1201311	0		>			
ANR	1201762	Identifier	tmp		1201311	0					
ANR	1201763	Identifier	maxdiff		1201311	1					
ANR	1201764	ExpressionStatement	maxdiff = tmp	111:16:2252:2265	1201311	1	True				
ANR	1201765	AssignmentExpression	maxdiff = tmp		1201311	0		=			
ANR	1201766	Identifier	maxdiff		1201311	0					
ANR	1201767	Identifier	tmp		1201311	1					
ANR	1201768	ExpressionStatement	q -> totdiff = 0	119:4:2292:2306	1201311	6	True				
ANR	1201769	AssignmentExpression	q -> totdiff = 0		1201311	0		=			
ANR	1201770	PtrMemberAccess	q -> totdiff		1201311	0					
ANR	1201771	Identifier	q		1201311	0					
ANR	1201772	Identifier	totdiff		1201311	1					
ANR	1201773	PrimaryExpression	0		1201311	1					
ANR	1201774	ForStatement	for ( i = 0 ; i < dm -> bdiffsize ; i ++ )		1201311	7					
ANR	1201775	ForInit	i = 0 ;	121:9:2318:2323	1201311	0	True				
ANR	1201776	AssignmentExpression	i = 0		1201311	0		=			
ANR	1201777	Identifier	i		1201311	0					
ANR	1201778	PrimaryExpression	0		1201311	1					
ANR	1201779	Condition	i < dm -> bdiffsize	121:16:2325:2341	1201311	1	True				
ANR	1201780	RelationalExpression	i < dm -> bdiffsize		1201311	0		<			
ANR	1201781	Identifier	i		1201311	0					
ANR	1201782	PtrMemberAccess	dm -> bdiffsize		1201311	1					
ANR	1201783	Identifier	dm		1201311	0					
ANR	1201784	Identifier	bdiffsize		1201311	1					
ANR	1201785	PostIncDecOperationExpression	i ++	121:35:2344:2346	1201311	2	True				
ANR	1201786	Identifier	i		1201311	0					
ANR	1201787	IncDec	++		1201311	1					
ANR	1201788	ExpressionStatement	q -> totdiff += bdiffs [ i ]	123:8:2358:2381	1201311	3	True				
ANR	1201789	AssignmentExpression	q -> totdiff += bdiffs [ i ]		1201311	0		+=			
ANR	1201790	PtrMemberAccess	q -> totdiff		1201311	0					
ANR	1201791	Identifier	q		1201311	0					
ANR	1201792	Identifier	totdiff		1201311	1					
ANR	1201793	ArrayIndexing	bdiffs [ i ]		1201311	1					
ANR	1201794	Identifier	bdiffs		1201311	0					
ANR	1201795	Identifier	i		1201311	1					
ANR	1201796	ExpressionStatement	q -> maxbdiff = maxdiff	125:4:2388:2409	1201311	8	True				
ANR	1201797	AssignmentExpression	q -> maxbdiff = maxdiff		1201311	0		=			
ANR	1201798	PtrMemberAccess	q -> maxbdiff		1201311	0					
ANR	1201799	Identifier	q		1201311	0					
ANR	1201800	Identifier	maxbdiff		1201311	1					
ANR	1201801	Identifier	maxdiff		1201311	1					
ANR	1201802	ReturnType	static void		1201311	1					
ANR	1201803	Identifier	calc_diffs		1201311	2					
ANR	1201804	ParameterList	"const DecimateContext * dm , struct qitem * q , const AVFrame * f1 , const AVFrame * f2"		1201311	3					
ANR	1201805	Parameter	const DecimateContext * dm	1:23:23:47	1201311	0	True				
ANR	1201806	ParameterType	const DecimateContext *		1201311	0					
ANR	1201807	Identifier	dm		1201311	1					
ANR	1201808	Parameter	struct qitem * q	1:50:50:64	1201311	1	True				
ANR	1201809	ParameterType	struct qitem *		1201311	0					
ANR	1201810	Identifier	q		1201311	1					
ANR	1201811	Parameter	const AVFrame * f1	3:23:91:107	1201311	2	True				
ANR	1201812	ParameterType	const AVFrame *		1201311	0					
ANR	1201813	Identifier	f1		1201311	1					
ANR	1201814	Parameter	const AVFrame * f2	3:42:110:126	1201311	3	True				
ANR	1201815	ParameterType	const AVFrame *		1201311	0					
ANR	1201816	Identifier	f2		1201311	1					
ANR	1201817	CFGEntryNode	ENTRY		1201311		True				
ANR	1201818	CFGExitNode	EXIT		1201311		True				
ANR	1201819	CFGErrorNode	ERROR		1201311		True				
ANR	1201820	Symbol	plane		1201311						
ANR	1201821	Symbol	dm -> depth		1201311						
ANR	1201822	Symbol	bdiffs		1201311						
ANR	1201823	Symbol	* bdiffs		1201311						
ANR	1201824	Symbol	dm		1201311						
ANR	1201825	Symbol	f1		1201311						
ANR	1201826	Symbol	f2		1201311						
ANR	1201827	Symbol	q -> totdiff		1201311						
ANR	1201828	Symbol	dm -> nyblocks		1201311						
ANR	1201829	Symbol	tmp		1201311						
ANR	1201830	Symbol	hblockx		1201311						
ANR	1201831	Symbol	f1 -> data		1201311						
ANR	1201832	Symbol	hblocky		1201311						
ANR	1201833	Symbol	height		1201311						
ANR	1201834	Symbol	dm -> blockx		1201311						
ANR	1201835	Symbol	* dm		1201311						
ANR	1201836	Symbol	* f1 -> data		1201311						
ANR	1201837	Symbol	dm -> blocky		1201311						
ANR	1201838	Symbol	FF_CEIL_RSHIFT		1201311						
ANR	1201839	Symbol	dm -> bdiffsize		1201311						
ANR	1201840	Symbol	dm -> vsub		1201311						
ANR	1201841	Symbol	maxdiff		1201311						
ANR	1201842	Symbol	ydest		1201311						
ANR	1201843	Symbol	f1p		1201311						
ANR	1201844	Symbol	dm -> chroma		1201311						
ANR	1201845	Symbol	* f1 -> linesize		1201311						
ANR	1201846	Symbol	xdest		1201311						
ANR	1201847	Symbol	* f2		1201311						
ANR	1201848	Symbol	* f1		1201311						
ANR	1201849	Symbol	f2 -> data		1201311						
ANR	1201850	Symbol	linesize2		1201311						
ANR	1201851	Symbol	* plane		1201311						
ANR	1201852	Symbol	linesize1		1201311						
ANR	1201853	Symbol	dm -> bdiffs		1201311						
ANR	1201854	Symbol	* f2 -> linesize		1201311						
ANR	1201855	Symbol	f1 -> width		1201311						
ANR	1201856	Symbol	dm -> hsub		1201311						
ANR	1201857	Symbol	* f2 -> data		1201311						
ANR	1201858	Symbol	f2p		1201311						
ANR	1201859	Symbol	q -> maxbdiff		1201311						
ANR	1201860	Symbol	i		1201311						
ANR	1201861	Symbol	j		1201311						
ANR	1201862	Symbol	* dm -> nxblocks		1201311						
ANR	1201863	Symbol	f2 -> linesize		1201311						
ANR	1201864	Symbol	f1 -> height		1201311						
ANR	1201865	Symbol	q		1201311						
ANR	1201866	Symbol	dm -> nxblocks		1201311						
ANR	1201867	Symbol	* i		1201311						
ANR	1201868	Symbol	xl		1201311						
ANR	1201869	Symbol	* j		1201311						
ANR	1201870	Symbol	* * f1		1201311						
ANR	1201871	Symbol	f1 -> linesize		1201311						
ANR	1201872	Symbol	* * dm		1201311						
ANR	1201873	Symbol	x		1201311						
ANR	1201874	Symbol	width		1201311						
ANR	1201875	Symbol	y		1201311						
ANR	1201876	Symbol	* * f2		1201311						
ANR	1201877	Symbol	* q		1201311						
