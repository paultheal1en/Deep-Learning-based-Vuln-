command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5565959	File	/home/p4ultr4n/workplace/ReVeal/raw_code/monitor_init_1.c								
ANR	5565960	Function	monitor_init	1:0:0:1273							
ANR	5565961	FunctionDef	"monitor_init (CharDriverState * chr , int flags)"		5565960	0					
ANR	5565962	CompoundStatement		3:0:52:1273	5565960	0					
ANR	5565963	Statement	static	5:4:59:64	5565960	0	True				
ANR	5565964	IdentifierDeclStatement	int is_first_init = 1 ;	5:11:66:87	5565960	1	True				
ANR	5565965	IdentifierDecl	is_first_init = 1		5565960	0					
ANR	5565966	IdentifierDeclType	int		5565960	0					
ANR	5565967	Identifier	is_first_init		5565960	1					
ANR	5565968	AssignmentExpression	is_first_init = 1		5565960	2		=			
ANR	5565969	Identifier	is_first_init		5565960	0					
ANR	5565970	PrimaryExpression	1		5565960	1					
ANR	5565971	IdentifierDeclStatement	Monitor * mon ;	7:4:94:106	5565960	2	True				
ANR	5565972	IdentifierDecl	* mon		5565960	0					
ANR	5565973	IdentifierDeclType	Monitor *		5565960	0					
ANR	5565974	Identifier	mon		5565960	1					
ANR	5565975	IfStatement	if ( is_first_init )		5565960	3					
ANR	5565976	Condition	is_first_init	11:8:119:131	5565960	0	True				
ANR	5565977	Identifier	is_first_init		5565960	0					
ANR	5565978	CompoundStatement		9:23:81:81	5565960	1					
ANR	5565979	ExpressionStatement	monitor_qapi_event_init ( )	13:8:145:170	5565960	0	True				
ANR	5565980	CallExpression	monitor_qapi_event_init ( )		5565960	0					
ANR	5565981	Callee	monitor_qapi_event_init		5565960	0					
ANR	5565982	Identifier	monitor_qapi_event_init		5565960	0					
ANR	5565983	ArgumentList			5565960	1					
ANR	5565984	ExpressionStatement	sortcmdlist ( )	15:8:181:194	5565960	1	True				
ANR	5565985	CallExpression	sortcmdlist ( )		5565960	0					
ANR	5565986	Callee	sortcmdlist		5565960	0					
ANR	5565987	Identifier	sortcmdlist		5565960	0					
ANR	5565988	ArgumentList			5565960	1					
ANR	5565989	ExpressionStatement	is_first_init = 0	17:8:205:222	5565960	2	True				
ANR	5565990	AssignmentExpression	is_first_init = 0		5565960	0		=			
ANR	5565991	Identifier	is_first_init		5565960	0					
ANR	5565992	PrimaryExpression	0		5565960	1					
ANR	5565993	ExpressionStatement	mon = g_malloc ( sizeof ( * mon ) )	23:4:238:266	5565960	4	True				
ANR	5565994	AssignmentExpression	mon = g_malloc ( sizeof ( * mon ) )		5565960	0		=			
ANR	5565995	Identifier	mon		5565960	0					
ANR	5565996	CallExpression	g_malloc ( sizeof ( * mon ) )		5565960	1					
ANR	5565997	Callee	g_malloc		5565960	0					
ANR	5565998	Identifier	g_malloc		5565960	0					
ANR	5565999	ArgumentList	sizeof ( * mon )		5565960	1					
ANR	5566000	Argument	sizeof ( * mon )		5565960	0					
ANR	5566001	SizeofExpression	sizeof ( * mon )		5565960	0					
ANR	5566002	Sizeof	sizeof		5565960	0					
ANR	5566003	UnaryOperationExpression	* mon		5565960	1					
ANR	5566004	UnaryOperator	*		5565960	0					
ANR	5566005	Identifier	mon		5565960	1					
ANR	5566006	ExpressionStatement	monitor_data_init ( mon )	25:4:273:295	5565960	5	True				
ANR	5566007	CallExpression	monitor_data_init ( mon )		5565960	0					
ANR	5566008	Callee	monitor_data_init		5565960	0					
ANR	5566009	Identifier	monitor_data_init		5565960	0					
ANR	5566010	ArgumentList	mon		5565960	1					
ANR	5566011	Argument	mon		5565960	0					
ANR	5566012	Identifier	mon		5565960	0					
ANR	5566013	ExpressionStatement	mon -> chr = chr	29:4:304:318	5565960	6	True				
ANR	5566014	AssignmentExpression	mon -> chr = chr		5565960	0		=			
ANR	5566015	PtrMemberAccess	mon -> chr		5565960	0					
ANR	5566016	Identifier	mon		5565960	0					
ANR	5566017	Identifier	chr		5565960	1					
ANR	5566018	Identifier	chr		5565960	1					
ANR	5566019	ExpressionStatement	mon -> flags = flags	31:4:325:343	5565960	7	True				
ANR	5566020	AssignmentExpression	mon -> flags = flags		5565960	0		=			
ANR	5566021	PtrMemberAccess	mon -> flags		5565960	0					
ANR	5566022	Identifier	mon		5565960	0					
ANR	5566023	Identifier	flags		5565960	1					
ANR	5566024	Identifier	flags		5565960	1					
ANR	5566025	IfStatement	if ( flags & MONITOR_USE_READLINE )		5565960	8					
ANR	5566026	Condition	flags & MONITOR_USE_READLINE	33:8:354:381	5565960	0	True				
ANR	5566027	BitAndExpression	flags & MONITOR_USE_READLINE		5565960	0		&			
ANR	5566028	Identifier	flags		5565960	0					
ANR	5566029	Identifier	MONITOR_USE_READLINE		5565960	1					
ANR	5566030	CompoundStatement		31:38:331:331	5565960	1					
ANR	5566031	ExpressionStatement	"mon -> rs = readline_init ( monitor_readline_printf , monitor_readline_flush , mon , monitor_find_completion )"	35:8:395:596	5565960	0	True				
ANR	5566032	AssignmentExpression	"mon -> rs = readline_init ( monitor_readline_printf , monitor_readline_flush , mon , monitor_find_completion )"		5565960	0		=			
ANR	5566033	PtrMemberAccess	mon -> rs		5565960	0					
ANR	5566034	Identifier	mon		5565960	0					
ANR	5566035	Identifier	rs		5565960	1					
ANR	5566036	CallExpression	"readline_init ( monitor_readline_printf , monitor_readline_flush , mon , monitor_find_completion )"		5565960	1					
ANR	5566037	Callee	readline_init		5565960	0					
ANR	5566038	Identifier	readline_init		5565960	0					
ANR	5566039	ArgumentList	monitor_readline_printf		5565960	1					
ANR	5566040	Argument	monitor_readline_printf		5565960	0					
ANR	5566041	Identifier	monitor_readline_printf		5565960	0					
ANR	5566042	Argument	monitor_readline_flush		5565960	1					
ANR	5566043	Identifier	monitor_readline_flush		5565960	0					
ANR	5566044	Argument	mon		5565960	2					
ANR	5566045	Identifier	mon		5565960	0					
ANR	5566046	Argument	monitor_find_completion		5565960	3					
ANR	5566047	Identifier	monitor_find_completion		5565960	0					
ANR	5566048	ExpressionStatement	"monitor_read_command ( mon , 0 )"	43:8:607:635	5565960	1	True				
ANR	5566049	CallExpression	"monitor_read_command ( mon , 0 )"		5565960	0					
ANR	5566050	Callee	monitor_read_command		5565960	0					
ANR	5566051	Identifier	monitor_read_command		5565960	0					
ANR	5566052	ArgumentList	mon		5565960	1					
ANR	5566053	Argument	mon		5565960	0					
ANR	5566054	Identifier	mon		5565960	0					
ANR	5566055	Argument	0		5565960	1					
ANR	5566056	PrimaryExpression	0		5565960	0					
ANR	5566057	IfStatement	if ( monitor_is_qmp ( mon ) )		5565960	9					
ANR	5566058	Condition	monitor_is_qmp ( mon )	49:8:655:673	5565960	0	True				
ANR	5566059	CallExpression	monitor_is_qmp ( mon )		5565960	0					
ANR	5566060	Callee	monitor_is_qmp		5565960	0					
ANR	5566061	Identifier	monitor_is_qmp		5565960	0					
ANR	5566062	ArgumentList	mon		5565960	1					
ANR	5566063	Argument	mon		5565960	0					
ANR	5566064	Identifier	mon		5565960	0					
ANR	5566065	CompoundStatement		47:29:623:623	5565960	1					
ANR	5566066	ExpressionStatement	"qemu_chr_add_handlers ( chr , monitor_can_read , monitor_qmp_read , monitor_qmp_event , mon )"	51:8:687:804	5565960	0	True				
ANR	5566067	CallExpression	"qemu_chr_add_handlers ( chr , monitor_can_read , monitor_qmp_read , monitor_qmp_event , mon )"		5565960	0					
ANR	5566068	Callee	qemu_chr_add_handlers		5565960	0					
ANR	5566069	Identifier	qemu_chr_add_handlers		5565960	0					
ANR	5566070	ArgumentList	chr		5565960	1					
ANR	5566071	Argument	chr		5565960	0					
ANR	5566072	Identifier	chr		5565960	0					
ANR	5566073	Argument	monitor_can_read		5565960	1					
ANR	5566074	Identifier	monitor_can_read		5565960	0					
ANR	5566075	Argument	monitor_qmp_read		5565960	2					
ANR	5566076	Identifier	monitor_qmp_read		5565960	0					
ANR	5566077	Argument	monitor_qmp_event		5565960	3					
ANR	5566078	Identifier	monitor_qmp_event		5565960	0					
ANR	5566079	Argument	mon		5565960	4					
ANR	5566080	Identifier	mon		5565960	0					
ANR	5566081	ExpressionStatement	"qemu_chr_fe_set_echo ( chr , true )"	55:8:815:846	5565960	1	True				
ANR	5566082	CallExpression	"qemu_chr_fe_set_echo ( chr , true )"		5565960	0					
ANR	5566083	Callee	qemu_chr_fe_set_echo		5565960	0					
ANR	5566084	Identifier	qemu_chr_fe_set_echo		5565960	0					
ANR	5566085	ArgumentList	chr		5565960	1					
ANR	5566086	Argument	chr		5565960	0					
ANR	5566087	Identifier	chr		5565960	0					
ANR	5566088	Argument	true		5565960	1					
ANR	5566089	Identifier	true		5565960	0					
ANR	5566090	ExpressionStatement	"json_message_parser_init ( & mon -> qmp . parser , handle_qmp_command )"	57:8:857:919	5565960	2	True				
ANR	5566091	CallExpression	"json_message_parser_init ( & mon -> qmp . parser , handle_qmp_command )"		5565960	0					
ANR	5566092	Callee	json_message_parser_init		5565960	0					
ANR	5566093	Identifier	json_message_parser_init		5565960	0					
ANR	5566094	ArgumentList	& mon -> qmp . parser		5565960	1					
ANR	5566095	Argument	& mon -> qmp . parser		5565960	0					
ANR	5566096	UnaryOperationExpression	& mon -> qmp . parser		5565960	0					
ANR	5566097	UnaryOperator	&		5565960	0					
ANR	5566098	MemberAccess	mon -> qmp . parser		5565960	1					
ANR	5566099	PtrMemberAccess	mon -> qmp		5565960	0					
ANR	5566100	Identifier	mon		5565960	0					
ANR	5566101	Identifier	qmp		5565960	1					
ANR	5566102	Identifier	parser		5565960	1					
ANR	5566103	Argument	handle_qmp_command		5565960	1					
ANR	5566104	Identifier	handle_qmp_command		5565960	0					
ANR	5566105	ElseStatement	else		5565960	0					
ANR	5566106	CompoundStatement		57:11:880:880	5565960	0					
ANR	5566107	ExpressionStatement	"qemu_chr_add_handlers ( chr , monitor_can_read , monitor_read , monitor_event , mon )"	61:8:944:1053	5565960	0	True				
ANR	5566108	CallExpression	"qemu_chr_add_handlers ( chr , monitor_can_read , monitor_read , monitor_event , mon )"		5565960	0					
ANR	5566109	Callee	qemu_chr_add_handlers		5565960	0					
ANR	5566110	Identifier	qemu_chr_add_handlers		5565960	0					
ANR	5566111	ArgumentList	chr		5565960	1					
ANR	5566112	Argument	chr		5565960	0					
ANR	5566113	Identifier	chr		5565960	0					
ANR	5566114	Argument	monitor_can_read		5565960	1					
ANR	5566115	Identifier	monitor_can_read		5565960	0					
ANR	5566116	Argument	monitor_read		5565960	2					
ANR	5566117	Identifier	monitor_read		5565960	0					
ANR	5566118	Argument	monitor_event		5565960	3					
ANR	5566119	Identifier	monitor_event		5565960	0					
ANR	5566120	Argument	mon		5565960	4					
ANR	5566121	Identifier	mon		5565960	0					
ANR	5566122	ExpressionStatement	qemu_mutex_lock ( & monitor_lock )	69:4:1069:1099	5565960	10	True				
ANR	5566123	CallExpression	qemu_mutex_lock ( & monitor_lock )		5565960	0					
ANR	5566124	Callee	qemu_mutex_lock		5565960	0					
ANR	5566125	Identifier	qemu_mutex_lock		5565960	0					
ANR	5566126	ArgumentList	& monitor_lock		5565960	1					
ANR	5566127	Argument	& monitor_lock		5565960	0					
ANR	5566128	UnaryOperationExpression	& monitor_lock		5565960	0					
ANR	5566129	UnaryOperator	&		5565960	0					
ANR	5566130	Identifier	monitor_lock		5565960	1					
ANR	5566131	ExpressionStatement	"QLIST_INSERT_HEAD ( & mon_list , mon , entry )"	71:4:1106:1146	5565960	11	True				
ANR	5566132	CallExpression	"QLIST_INSERT_HEAD ( & mon_list , mon , entry )"		5565960	0					
ANR	5566133	Callee	QLIST_INSERT_HEAD		5565960	0					
ANR	5566134	Identifier	QLIST_INSERT_HEAD		5565960	0					
ANR	5566135	ArgumentList	& mon_list		5565960	1					
ANR	5566136	Argument	& mon_list		5565960	0					
ANR	5566137	UnaryOperationExpression	& mon_list		5565960	0					
ANR	5566138	UnaryOperator	&		5565960	0					
ANR	5566139	Identifier	mon_list		5565960	1					
ANR	5566140	Argument	mon		5565960	1					
ANR	5566141	Identifier	mon		5565960	0					
ANR	5566142	Argument	entry		5565960	2					
ANR	5566143	Identifier	entry		5565960	0					
ANR	5566144	ExpressionStatement	qemu_mutex_unlock ( & monitor_lock )	73:4:1153:1185	5565960	12	True				
ANR	5566145	CallExpression	qemu_mutex_unlock ( & monitor_lock )		5565960	0					
ANR	5566146	Callee	qemu_mutex_unlock		5565960	0					
ANR	5566147	Identifier	qemu_mutex_unlock		5565960	0					
ANR	5566148	ArgumentList	& monitor_lock		5565960	1					
ANR	5566149	Argument	& monitor_lock		5565960	0					
ANR	5566150	UnaryOperationExpression	& monitor_lock		5565960	0					
ANR	5566151	UnaryOperator	&		5565960	0					
ANR	5566152	Identifier	monitor_lock		5565960	1					
ANR	5566153	IfStatement	if ( ! default_mon || ( flags & MONITOR_IS_DEFAULT ) )		5565960	13					
ANR	5566154	Condition	! default_mon || ( flags & MONITOR_IS_DEFAULT )	77:8:1198:1241	5565960	0	True				
ANR	5566155	OrExpression	! default_mon || ( flags & MONITOR_IS_DEFAULT )		5565960	0		||			
ANR	5566156	UnaryOperationExpression	! default_mon		5565960	0					
ANR	5566157	UnaryOperator	!		5565960	0					
ANR	5566158	Identifier	default_mon		5565960	1					
ANR	5566159	BitAndExpression	flags & MONITOR_IS_DEFAULT		5565960	1		&			
ANR	5566160	Identifier	flags		5565960	0					
ANR	5566161	Identifier	MONITOR_IS_DEFAULT		5565960	1					
ANR	5566162	ExpressionStatement	default_mon = mon	79:8:1253:1270	5565960	1	True				
ANR	5566163	AssignmentExpression	default_mon = mon		5565960	0		=			
ANR	5566164	Identifier	default_mon		5565960	0					
ANR	5566165	Identifier	mon		5565960	1					
ANR	5566166	ReturnType	void		5565960	1					
ANR	5566167	Identifier	monitor_init		5565960	2					
ANR	5566168	ParameterList	"CharDriverState * chr , int flags"		5565960	3					
ANR	5566169	Parameter	CharDriverState * chr	1:18:18:37	5565960	0	True				
ANR	5566170	ParameterType	CharDriverState *		5565960	0					
ANR	5566171	Identifier	chr		5565960	1					
ANR	5566172	Parameter	int flags	1:40:40:48	5565960	1	True				
ANR	5566173	ParameterType	int		5565960	0					
ANR	5566174	Identifier	flags		5565960	1					
ANR	5566175	CFGEntryNode	ENTRY		5565960		True				
ANR	5566176	CFGExitNode	EXIT		5565960		True				
ANR	5566177	Symbol	& mon -> qmp		5565960						
ANR	5566178	Symbol	monitor_readline_printf		5565960						
ANR	5566179	Symbol	mon -> flags		5565960						
ANR	5566180	Symbol	mon -> qmp		5565960						
ANR	5566181	Symbol	flags		5565960						
ANR	5566182	Symbol	monitor_qmp_event		5565960						
ANR	5566183	Symbol	mon		5565960						
ANR	5566184	Symbol	readline_init		5565960						
ANR	5566185	Symbol	g_malloc		5565960						
ANR	5566186	Symbol	mon -> rs		5565960						
ANR	5566187	Symbol	handle_qmp_command		5565960						
ANR	5566188	Symbol	monitor_read		5565960						
ANR	5566189	Symbol	monitor_find_completion		5565960						
ANR	5566190	Symbol	& mon -> qmp . parser		5565960						
ANR	5566191	Symbol	& monitor_lock		5565960						
ANR	5566192	Symbol	& mon_list		5565960						
ANR	5566193	Symbol	monitor_qmp_read		5565960						
ANR	5566194	Symbol	MONITOR_USE_READLINE		5565960						
ANR	5566195	Symbol	monitor_readline_flush		5565960						
ANR	5566196	Symbol	monitor_can_read		5565960						
ANR	5566197	Symbol	MONITOR_IS_DEFAULT		5565960						
ANR	5566198	Symbol	chr		5565960						
ANR	5566199	Symbol	mon -> chr		5565960						
ANR	5566200	Symbol	entry		5565960						
ANR	5566201	Symbol	* mon		5565960						
ANR	5566202	Symbol	monitor_event		5565960						
ANR	5566203	Symbol	default_mon		5565960						
ANR	5566204	Symbol	true		5565960						
ANR	5566205	Symbol	is_first_init		5565960						
ANR	5566206	Symbol	monitor_is_qmp		5565960						
