command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1250254	File	/home/p4ultr4n/workplace/ReVeal/raw_code/check_block_1.c								
ANR	1250255	Function	check_block	1:0:0:1083							
ANR	1250256	FunctionDef	"check_block (SnowContext * s , int mb_x , int mb_y , int p [ 3 ] , int intra , const uint8_t * obmc_edged , int * best_rd)"		1250255	0					
ANR	1250257	CompoundStatement		1:137:137:1083	1250255	0					
ANR	1250258	IdentifierDeclStatement	const int b_stride = s -> b_width << s -> block_max_depth ;	3:4:144:196	1250255	0	True				
ANR	1250259	IdentifierDecl	b_stride = s -> b_width << s -> block_max_depth		1250255	0					
ANR	1250260	IdentifierDeclType	const int		1250255	0					
ANR	1250261	Identifier	b_stride		1250255	1					
ANR	1250262	AssignmentExpression	b_stride = s -> b_width << s -> block_max_depth		1250255	2		=			
ANR	1250263	Identifier	b_stride		1250255	0					
ANR	1250264	ShiftExpression	s -> b_width << s -> block_max_depth		1250255	1		<<			
ANR	1250265	PtrMemberAccess	s -> b_width		1250255	0					
ANR	1250266	Identifier	s		1250255	0					
ANR	1250267	Identifier	b_width		1250255	1					
ANR	1250268	PtrMemberAccess	s -> block_max_depth		1250255	1					
ANR	1250269	Identifier	s		1250255	0					
ANR	1250270	Identifier	block_max_depth		1250255	1					
ANR	1250271	IdentifierDeclStatement	BlockNode * block = & s -> block [ mb_x + mb_y * b_stride ] ;	5:4:203:254	1250255	1	True				
ANR	1250272	IdentifierDecl	* block = & s -> block [ mb_x + mb_y * b_stride ]		1250255	0					
ANR	1250273	IdentifierDeclType	BlockNode *		1250255	0					
ANR	1250274	Identifier	block		1250255	1					
ANR	1250275	AssignmentExpression	* block = & s -> block [ mb_x + mb_y * b_stride ]		1250255	2		=			
ANR	1250276	Identifier	block		1250255	0					
ANR	1250277	UnaryOperationExpression	& s -> block [ mb_x + mb_y * b_stride ]		1250255	1					
ANR	1250278	UnaryOperator	&		1250255	0					
ANR	1250279	ArrayIndexing	s -> block [ mb_x + mb_y * b_stride ]		1250255	1					
ANR	1250280	PtrMemberAccess	s -> block		1250255	0					
ANR	1250281	Identifier	s		1250255	0					
ANR	1250282	Identifier	block		1250255	1					
ANR	1250283	AdditiveExpression	mb_x + mb_y * b_stride		1250255	1		+			
ANR	1250284	Identifier	mb_x		1250255	0					
ANR	1250285	MultiplicativeExpression	mb_y * b_stride		1250255	1		*			
ANR	1250286	Identifier	mb_y		1250255	0					
ANR	1250287	Identifier	b_stride		1250255	1					
ANR	1250288	IdentifierDeclStatement	BlockNode backup = * block ;	7:4:261:285	1250255	2	True				
ANR	1250289	IdentifierDecl	backup = * block		1250255	0					
ANR	1250290	IdentifierDeclType	BlockNode		1250255	0					
ANR	1250291	Identifier	backup		1250255	1					
ANR	1250292	AssignmentExpression	backup = * block		1250255	2		=			
ANR	1250293	Identifier	backup		1250255	0					
ANR	1250294	UnaryOperationExpression	* block		1250255	1					
ANR	1250295	UnaryOperator	*		1250255	0					
ANR	1250296	Identifier	block		1250255	1					
ANR	1250297	IdentifierDeclStatement	"int rd , index , value ;"	9:4:292:312	1250255	3	True				
ANR	1250298	IdentifierDecl	rd		1250255	0					
ANR	1250299	IdentifierDeclType	int		1250255	0					
ANR	1250300	Identifier	rd		1250255	1					
ANR	1250301	IdentifierDecl	index		1250255	1					
ANR	1250302	IdentifierDeclType	int		1250255	0					
ANR	1250303	Identifier	index		1250255	1					
ANR	1250304	IdentifierDecl	value		1250255	2					
ANR	1250305	IdentifierDeclType	int		1250255	0					
ANR	1250306	Identifier	value		1250255	1					
ANR	1250307	ExpressionStatement	assert ( mb_x >= 0 && mb_y >= 0 )	13:4:321:347	1250255	4	True				
ANR	1250308	CallExpression	assert ( mb_x >= 0 && mb_y >= 0 )		1250255	0					
ANR	1250309	Callee	assert		1250255	0					
ANR	1250310	Identifier	assert		1250255	0					
ANR	1250311	ArgumentList	mb_x >= 0 && mb_y >= 0		1250255	1					
ANR	1250312	Argument	mb_x >= 0 && mb_y >= 0		1250255	0					
ANR	1250313	AndExpression	mb_x >= 0 && mb_y >= 0		1250255	0		&&			
ANR	1250314	RelationalExpression	mb_x >= 0		1250255	0		>=			
ANR	1250315	Identifier	mb_x		1250255	0					
ANR	1250316	PrimaryExpression	0		1250255	1					
ANR	1250317	RelationalExpression	mb_y >= 0		1250255	1		>=			
ANR	1250318	Identifier	mb_y		1250255	0					
ANR	1250319	PrimaryExpression	0		1250255	1					
ANR	1250320	ExpressionStatement	assert ( mb_x < b_stride )	15:4:354:375	1250255	5	True				
ANR	1250321	CallExpression	assert ( mb_x < b_stride )		1250255	0					
ANR	1250322	Callee	assert		1250255	0					
ANR	1250323	Identifier	assert		1250255	0					
ANR	1250324	ArgumentList	mb_x < b_stride		1250255	1					
ANR	1250325	Argument	mb_x < b_stride		1250255	0					
ANR	1250326	RelationalExpression	mb_x < b_stride		1250255	0		<			
ANR	1250327	Identifier	mb_x		1250255	0					
ANR	1250328	Identifier	b_stride		1250255	1					
ANR	1250329	IfStatement	if ( intra )		1250255	6					
ANR	1250330	Condition	intra	19:7:387:391	1250255	0	True				
ANR	1250331	Identifier	intra		1250255	0					
ANR	1250332	CompoundStatement		19:13:255:255	1250255	1					
ANR	1250333	ExpressionStatement	block -> color [ 0 ] = p [ 0 ]	21:8:404:426	1250255	0	True				
ANR	1250334	AssignmentExpression	block -> color [ 0 ] = p [ 0 ]		1250255	0		=			
ANR	1250335	ArrayIndexing	block -> color [ 0 ]		1250255	0					
ANR	1250336	PtrMemberAccess	block -> color		1250255	0					
ANR	1250337	Identifier	block		1250255	0					
ANR	1250338	Identifier	color		1250255	1					
ANR	1250339	PrimaryExpression	0		1250255	1					
ANR	1250340	ArrayIndexing	p [ 0 ]		1250255	1					
ANR	1250341	Identifier	p		1250255	0					
ANR	1250342	PrimaryExpression	0		1250255	1					
ANR	1250343	ExpressionStatement	block -> color [ 1 ] = p [ 1 ]	23:8:437:459	1250255	1	True				
ANR	1250344	AssignmentExpression	block -> color [ 1 ] = p [ 1 ]		1250255	0		=			
ANR	1250345	ArrayIndexing	block -> color [ 1 ]		1250255	0					
ANR	1250346	PtrMemberAccess	block -> color		1250255	0					
ANR	1250347	Identifier	block		1250255	0					
ANR	1250348	Identifier	color		1250255	1					
ANR	1250349	PrimaryExpression	1		1250255	1					
ANR	1250350	ArrayIndexing	p [ 1 ]		1250255	1					
ANR	1250351	Identifier	p		1250255	0					
ANR	1250352	PrimaryExpression	1		1250255	1					
ANR	1250353	ExpressionStatement	block -> color [ 2 ] = p [ 2 ]	25:8:470:492	1250255	2	True				
ANR	1250354	AssignmentExpression	block -> color [ 2 ] = p [ 2 ]		1250255	0		=			
ANR	1250355	ArrayIndexing	block -> color [ 2 ]		1250255	0					
ANR	1250356	PtrMemberAccess	block -> color		1250255	0					
ANR	1250357	Identifier	block		1250255	0					
ANR	1250358	Identifier	color		1250255	1					
ANR	1250359	PrimaryExpression	2		1250255	1					
ANR	1250360	ArrayIndexing	p [ 2 ]		1250255	1					
ANR	1250361	Identifier	p		1250255	0					
ANR	1250362	PrimaryExpression	2		1250255	1					
ANR	1250363	ExpressionStatement	block -> type |= BLOCK_INTRA	27:8:503:529	1250255	3	True				
ANR	1250364	AssignmentExpression	block -> type |= BLOCK_INTRA		1250255	0		|=			
ANR	1250365	PtrMemberAccess	block -> type		1250255	0					
ANR	1250366	Identifier	block		1250255	0					
ANR	1250367	Identifier	type		1250255	1					
ANR	1250368	Identifier	BLOCK_INTRA		1250255	1					
ANR	1250369	ElseStatement	else		1250255	0					
ANR	1250370	CompoundStatement		29:9:403:403	1250255	0					
ANR	1250371	ExpressionStatement	index = ( p [ 0 ] + 31 * p [ 1 ] ) & ( ME_CACHE_SIZE - 1 )	31:8:552:595	1250255	0	True				
ANR	1250372	AssignmentExpression	index = ( p [ 0 ] + 31 * p [ 1 ] ) & ( ME_CACHE_SIZE - 1 )		1250255	0		=			
ANR	1250373	Identifier	index		1250255	0					
ANR	1250374	BitAndExpression	( p [ 0 ] + 31 * p [ 1 ] ) & ( ME_CACHE_SIZE - 1 )		1250255	1		&			
ANR	1250375	AdditiveExpression	p [ 0 ] + 31 * p [ 1 ]		1250255	0		+			
ANR	1250376	ArrayIndexing	p [ 0 ]		1250255	0					
ANR	1250377	Identifier	p		1250255	0					
ANR	1250378	PrimaryExpression	0		1250255	1					
ANR	1250379	MultiplicativeExpression	31 * p [ 1 ]		1250255	1		*			
ANR	1250380	PrimaryExpression	31		1250255	0					
ANR	1250381	ArrayIndexing	p [ 1 ]		1250255	1					
ANR	1250382	Identifier	p		1250255	0					
ANR	1250383	PrimaryExpression	1		1250255	1					
ANR	1250384	AdditiveExpression	ME_CACHE_SIZE - 1		1250255	1		-			
ANR	1250385	Identifier	ME_CACHE_SIZE		1250255	0					
ANR	1250386	PrimaryExpression	1		1250255	1					
ANR	1250387	ExpressionStatement	value = s -> me_cache_generation + ( p [ 0 ] >> 10 ) + ( p [ 1 ] << 6 ) + ( block -> ref << 12 )	33:8:606:679	1250255	1	True				
ANR	1250388	AssignmentExpression	value = s -> me_cache_generation + ( p [ 0 ] >> 10 ) + ( p [ 1 ] << 6 ) + ( block -> ref << 12 )		1250255	0		=			
ANR	1250389	Identifier	value		1250255	0					
ANR	1250390	AdditiveExpression	s -> me_cache_generation + ( p [ 0 ] >> 10 ) + ( p [ 1 ] << 6 ) + ( block -> ref << 12 )		1250255	1		+			
ANR	1250391	PtrMemberAccess	s -> me_cache_generation		1250255	0					
ANR	1250392	Identifier	s		1250255	0					
ANR	1250393	Identifier	me_cache_generation		1250255	1					
ANR	1250394	AdditiveExpression	( p [ 0 ] >> 10 ) + ( p [ 1 ] << 6 ) + ( block -> ref << 12 )		1250255	1		+			
ANR	1250395	ShiftExpression	p [ 0 ] >> 10		1250255	0		>>			
ANR	1250396	ArrayIndexing	p [ 0 ]		1250255	0					
ANR	1250397	Identifier	p		1250255	0					
ANR	1250398	PrimaryExpression	0		1250255	1					
ANR	1250399	PrimaryExpression	10		1250255	1					
ANR	1250400	AdditiveExpression	( p [ 1 ] << 6 ) + ( block -> ref << 12 )		1250255	1		+			
ANR	1250401	ShiftExpression	p [ 1 ] << 6		1250255	0		<<			
ANR	1250402	ArrayIndexing	p [ 1 ]		1250255	0					
ANR	1250403	Identifier	p		1250255	0					
ANR	1250404	PrimaryExpression	1		1250255	1					
ANR	1250405	PrimaryExpression	6		1250255	1					
ANR	1250406	ShiftExpression	block -> ref << 12		1250255	1		<<			
ANR	1250407	PtrMemberAccess	block -> ref		1250255	0					
ANR	1250408	Identifier	block		1250255	0					
ANR	1250409	Identifier	ref		1250255	1					
ANR	1250410	PrimaryExpression	12		1250255	1					
ANR	1250411	IfStatement	if ( s -> me_cache [ index ] == value )		1250255	2					
ANR	1250412	Condition	s -> me_cache [ index ] == value	35:11:693:719	1250255	0	True				
ANR	1250413	EqualityExpression	s -> me_cache [ index ] == value		1250255	0		==			
ANR	1250414	ArrayIndexing	s -> me_cache [ index ]		1250255	0					
ANR	1250415	PtrMemberAccess	s -> me_cache		1250255	0					
ANR	1250416	Identifier	s		1250255	0					
ANR	1250417	Identifier	me_cache		1250255	1					
ANR	1250418	Identifier	index		1250255	1					
ANR	1250419	Identifier	value		1250255	1					
ANR	1250420	ReturnStatement	return 0 ;	37:12:735:743	1250255	1	True				
ANR	1250421	PrimaryExpression	0		1250255	0					
ANR	1250422	ExpressionStatement	s -> me_cache [ index ] = value	39:8:754:779	1250255	3	True				
ANR	1250423	AssignmentExpression	s -> me_cache [ index ] = value		1250255	0		=			
ANR	1250424	ArrayIndexing	s -> me_cache [ index ]		1250255	0					
ANR	1250425	PtrMemberAccess	s -> me_cache		1250255	0					
ANR	1250426	Identifier	s		1250255	0					
ANR	1250427	Identifier	me_cache		1250255	1					
ANR	1250428	Identifier	index		1250255	1					
ANR	1250429	Identifier	value		1250255	1					
ANR	1250430	ExpressionStatement	block -> mx = p [ 0 ]	43:8:792:807	1250255	4	True				
ANR	1250431	AssignmentExpression	block -> mx = p [ 0 ]		1250255	0		=			
ANR	1250432	PtrMemberAccess	block -> mx		1250255	0					
ANR	1250433	Identifier	block		1250255	0					
ANR	1250434	Identifier	mx		1250255	1					
ANR	1250435	ArrayIndexing	p [ 0 ]		1250255	1					
ANR	1250436	Identifier	p		1250255	0					
ANR	1250437	PrimaryExpression	0		1250255	1					
ANR	1250438	ExpressionStatement	block -> my = p [ 1 ]	45:8:818:833	1250255	5	True				
ANR	1250439	AssignmentExpression	block -> my = p [ 1 ]		1250255	0		=			
ANR	1250440	PtrMemberAccess	block -> my		1250255	0					
ANR	1250441	Identifier	block		1250255	0					
ANR	1250442	Identifier	my		1250255	1					
ANR	1250443	ArrayIndexing	p [ 1 ]		1250255	1					
ANR	1250444	Identifier	p		1250255	0					
ANR	1250445	PrimaryExpression	1		1250255	1					
ANR	1250446	ExpressionStatement	block -> type &= ~BLOCK_INTRA	47:8:844:871	1250255	6	True				
ANR	1250447	AssignmentExpression	block -> type &= ~BLOCK_INTRA		1250255	0		&=			
ANR	1250448	PtrMemberAccess	block -> type		1250255	0					
ANR	1250449	Identifier	block		1250255	0					
ANR	1250450	Identifier	type		1250255	1					
ANR	1250451	Identifier	~BLOCK_INTRA		1250255	1					
ANR	1250452	ExpressionStatement	"rd = get_block_rd ( s , mb_x , mb_y , 0 , obmc_edged )"	53:4:887:933	1250255	7	True				
ANR	1250453	AssignmentExpression	"rd = get_block_rd ( s , mb_x , mb_y , 0 , obmc_edged )"		1250255	0		=			
ANR	1250454	Identifier	rd		1250255	0					
ANR	1250455	CallExpression	"get_block_rd ( s , mb_x , mb_y , 0 , obmc_edged )"		1250255	1					
ANR	1250456	Callee	get_block_rd		1250255	0					
ANR	1250457	Identifier	get_block_rd		1250255	0					
ANR	1250458	ArgumentList	s		1250255	1					
ANR	1250459	Argument	s		1250255	0					
ANR	1250460	Identifier	s		1250255	0					
ANR	1250461	Argument	mb_x		1250255	1					
ANR	1250462	Identifier	mb_x		1250255	0					
ANR	1250463	Argument	mb_y		1250255	2					
ANR	1250464	Identifier	mb_y		1250255	0					
ANR	1250465	Argument	0		1250255	3					
ANR	1250466	PrimaryExpression	0		1250255	0					
ANR	1250467	Argument	obmc_edged		1250255	4					
ANR	1250468	Identifier	obmc_edged		1250255	0					
ANR	1250469	IfStatement	if ( rd < * best_rd )		1250255	8					
ANR	1250470	Condition	rd < * best_rd	59:7:961:973	1250255	0	True				
ANR	1250471	RelationalExpression	rd < * best_rd		1250255	0		<			
ANR	1250472	Identifier	rd		1250255	0					
ANR	1250473	UnaryOperationExpression	* best_rd		1250255	1					
ANR	1250474	UnaryOperator	*		1250255	0					
ANR	1250475	Identifier	best_rd		1250255	1					
ANR	1250476	CompoundStatement		59:21:837:837	1250255	1					
ANR	1250477	ExpressionStatement	* best_rd = rd	61:8:986:998	1250255	0	True				
ANR	1250478	AssignmentExpression	* best_rd = rd		1250255	0		=			
ANR	1250479	UnaryOperationExpression	* best_rd		1250255	0					
ANR	1250480	UnaryOperator	*		1250255	0					
ANR	1250481	Identifier	best_rd		1250255	1					
ANR	1250482	Identifier	rd		1250255	1					
ANR	1250483	ReturnStatement	return 1 ;	63:8:1009:1017	1250255	1	True				
ANR	1250484	PrimaryExpression	1		1250255	0					
ANR	1250485	ElseStatement	else		1250255	0					
ANR	1250486	CompoundStatement		65:9:891:891	1250255	0					
ANR	1250487	ExpressionStatement	* block = backup	67:8:1040:1054	1250255	0	True				
ANR	1250488	AssignmentExpression	* block = backup		1250255	0		=			
ANR	1250489	UnaryOperationExpression	* block		1250255	0					
ANR	1250490	UnaryOperator	*		1250255	0					
ANR	1250491	Identifier	block		1250255	1					
ANR	1250492	Identifier	backup		1250255	1					
ANR	1250493	ReturnStatement	return 0 ;	69:8:1065:1073	1250255	1	True				
ANR	1250494	PrimaryExpression	0		1250255	0					
ANR	1250495	ReturnType	static av_always_inline int		1250255	1					
ANR	1250496	Identifier	check_block		1250255	2					
ANR	1250497	ParameterList	"SnowContext * s , int mb_x , int mb_y , int p [ 3 ] , int intra , const uint8_t * obmc_edged , int * best_rd"		1250255	3					
ANR	1250498	Parameter	SnowContext * s	1:40:40:53	1250255	0	True				
ANR	1250499	ParameterType	SnowContext *		1250255	0					
ANR	1250500	Identifier	s		1250255	1					
ANR	1250501	Parameter	int mb_x	1:56:56:63	1250255	1	True				
ANR	1250502	ParameterType	int		1250255	0					
ANR	1250503	Identifier	mb_x		1250255	1					
ANR	1250504	Parameter	int mb_y	1:66:66:73	1250255	2	True				
ANR	1250505	ParameterType	int		1250255	0					
ANR	1250506	Identifier	mb_y		1250255	1					
ANR	1250507	Parameter	int p [ 3 ]	1:76:76:83	1250255	3	True				
ANR	1250508	ParameterType	int [ 3 ]		1250255	0					
ANR	1250509	Identifier	p		1250255	1					
ANR	1250510	Parameter	int intra	1:86:86:94	1250255	4	True				
ANR	1250511	ParameterType	int		1250255	0					
ANR	1250512	Identifier	intra		1250255	1					
ANR	1250513	Parameter	const uint8_t * obmc_edged	1:97:97:121	1250255	5	True				
ANR	1250514	ParameterType	const uint8_t *		1250255	0					
ANR	1250515	Identifier	obmc_edged		1250255	1					
ANR	1250516	Parameter	int * best_rd	1:124:124:135	1250255	6	True				
ANR	1250517	ParameterType	int *		1250255	0					
ANR	1250518	Identifier	best_rd		1250255	1					
ANR	1250519	CFGEntryNode	ENTRY		1250255		True				
ANR	1250520	CFGExitNode	EXIT		1250255		True				
ANR	1250521	Symbol	* s -> me_cache		1250255						
ANR	1250522	Symbol	backup		1250255						
ANR	1250523	Symbol	s -> b_width		1250255						
ANR	1250524	Symbol	* block -> color		1250255						
ANR	1250525	Symbol	* index		1250255						
ANR	1250526	Symbol	s -> block_max_depth		1250255						
ANR	1250527	Symbol	s -> me_cache_generation		1250255						
ANR	1250528	Symbol	* best_rd		1250255						
ANR	1250529	Symbol	block -> mx		1250255						
ANR	1250530	Symbol	ME_CACHE_SIZE		1250255						
ANR	1250531	Symbol	~BLOCK_INTRA		1250255						
ANR	1250532	Symbol	block -> color		1250255						
ANR	1250533	Symbol	* * s		1250255						
ANR	1250534	Symbol	block		1250255						
ANR	1250535	Symbol	value		1250255						
ANR	1250536	Symbol	block -> my		1250255						
ANR	1250537	Symbol	block -> type		1250255						
ANR	1250538	Symbol	block -> ref		1250255						
ANR	1250539	Symbol	intra		1250255						
ANR	1250540	Symbol	BLOCK_INTRA		1250255						
ANR	1250541	Symbol	index		1250255						
ANR	1250542	Symbol	best_rd		1250255						
ANR	1250543	Symbol	b_stride		1250255						
ANR	1250544	Symbol	get_block_rd		1250255						
ANR	1250545	Symbol	* block		1250255						
ANR	1250546	Symbol	p		1250255						
ANR	1250547	Symbol	s -> me_cache		1250255						
ANR	1250548	Symbol	rd		1250255						
ANR	1250549	Symbol	s		1250255						
ANR	1250550	Symbol	* * block		1250255						
ANR	1250551	Symbol	* p		1250255						
ANR	1250552	Symbol	mb_y		1250255						
ANR	1250553	Symbol	mb_x		1250255						
ANR	1250554	Symbol	* s		1250255						
ANR	1250555	Symbol	s -> block		1250255						
ANR	1250556	Symbol	obmc_edged		1250255						
