command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8456144	File	/home/p4ultr4n/workplace/ReVeal/raw_code/tlb_info_1.c								
ANR	8456145	Function	tlb_info	1:0:0:1135							
ANR	8456146	FunctionDef	tlb_info (Monitor * mon)		8456145	0					
ANR	8456147	CompoundStatement		3:0:36:1135	8456145	0					
ANR	8456148	IdentifierDeclStatement	CPUState * env ;	5:4:43:56	8456145	0	True				
ANR	8456149	IdentifierDecl	* env		8456145	0					
ANR	8456150	IdentifierDeclType	CPUState *		8456145	0					
ANR	8456151	Identifier	env		8456145	1					
ANR	8456152	IdentifierDeclStatement	"int l1 , l2 ;"	7:4:63:73	8456145	1	True				
ANR	8456153	IdentifierDecl	l1		8456145	0					
ANR	8456154	IdentifierDeclType	int		8456145	0					
ANR	8456155	Identifier	l1		8456145	1					
ANR	8456156	IdentifierDecl	l2		8456145	1					
ANR	8456157	IdentifierDeclType	int		8456145	0					
ANR	8456158	Identifier	l2		8456145	1					
ANR	8456159	IdentifierDeclStatement	"uint32_t pgd , pde , pte ;"	9:4:80:102	8456145	2	True				
ANR	8456160	IdentifierDecl	pgd		8456145	0					
ANR	8456161	IdentifierDeclType	uint32_t		8456145	0					
ANR	8456162	Identifier	pgd		8456145	1					
ANR	8456163	IdentifierDecl	pde		8456145	1					
ANR	8456164	IdentifierDeclType	uint32_t		8456145	0					
ANR	8456165	Identifier	pde		8456145	1					
ANR	8456166	IdentifierDecl	pte		8456145	2					
ANR	8456167	IdentifierDeclType	uint32_t		8456145	0					
ANR	8456168	Identifier	pte		8456145	1					
ANR	8456169	ExpressionStatement	env = mon_get_cpu ( )	13:4:111:130	8456145	3	True				
ANR	8456170	AssignmentExpression	env = mon_get_cpu ( )		8456145	0		=			
ANR	8456171	Identifier	env		8456145	0					
ANR	8456172	CallExpression	mon_get_cpu ( )		8456145	1					
ANR	8456173	Callee	mon_get_cpu		8456145	0					
ANR	8456174	Identifier	mon_get_cpu		8456145	0					
ANR	8456175	ArgumentList			8456145	1					
ANR	8456176	IfStatement	if ( ! ( env -> cr [ 0 ] & CR0_PG_MASK ) )		8456145	4					
ANR	8456177	Condition	! ( env -> cr [ 0 ] & CR0_PG_MASK )	17:8:143:169	8456145	0	True				
ANR	8456178	UnaryOperationExpression	! ( env -> cr [ 0 ] & CR0_PG_MASK )		8456145	0					
ANR	8456179	UnaryOperator	!		8456145	0					
ANR	8456180	BitAndExpression	env -> cr [ 0 ] & CR0_PG_MASK		8456145	1		&			
ANR	8456181	ArrayIndexing	env -> cr [ 0 ]		8456145	0					
ANR	8456182	PtrMemberAccess	env -> cr		8456145	0					
ANR	8456183	Identifier	env		8456145	0					
ANR	8456184	Identifier	cr		8456145	1					
ANR	8456185	PrimaryExpression	0		8456145	1					
ANR	8456186	Identifier	CR0_PG_MASK		8456145	1					
ANR	8456187	CompoundStatement		15:37:135:135	8456145	1					
ANR	8456188	ExpressionStatement	"monitor_printf ( mon , ""PG disabled\\n"" )"	19:8:183:219	8456145	0	True				
ANR	8456189	CallExpression	"monitor_printf ( mon , ""PG disabled\\n"" )"		8456145	0					
ANR	8456190	Callee	monitor_printf		8456145	0					
ANR	8456191	Identifier	monitor_printf		8456145	0					
ANR	8456192	ArgumentList	mon		8456145	1					
ANR	8456193	Argument	mon		8456145	0					
ANR	8456194	Identifier	mon		8456145	0					
ANR	8456195	Argument	"""PG disabled\\n"""		8456145	1					
ANR	8456196	PrimaryExpression	"""PG disabled\\n"""		8456145	0					
ANR	8456197	ReturnStatement	return ;	21:8:230:236	8456145	1	True				
ANR	8456198	ExpressionStatement	pgd = env -> cr [ 3 ] & ~0xfff	25:4:250:275	8456145	5	True				
ANR	8456199	AssignmentExpression	pgd = env -> cr [ 3 ] & ~0xfff		8456145	0		=			
ANR	8456200	Identifier	pgd		8456145	0					
ANR	8456201	BitAndExpression	env -> cr [ 3 ] & ~0xfff		8456145	1		&			
ANR	8456202	ArrayIndexing	env -> cr [ 3 ]		8456145	0					
ANR	8456203	PtrMemberAccess	env -> cr		8456145	0					
ANR	8456204	Identifier	env		8456145	0					
ANR	8456205	Identifier	cr		8456145	1					
ANR	8456206	PrimaryExpression	3		8456145	1					
ANR	8456207	Identifier	~0xfff		8456145	1					
ANR	8456208	ForStatement	for ( l1 = 0 ; l1 < 1024 ; l1 ++ )		8456145	6					
ANR	8456209	ForInit	l1 = 0 ;	27:8:286:292	8456145	0	True				
ANR	8456210	AssignmentExpression	l1 = 0		8456145	0		=			
ANR	8456211	Identifier	l1		8456145	0					
ANR	8456212	PrimaryExpression	0		8456145	1					
ANR	8456213	Condition	l1 < 1024	27:16:294:302	8456145	1	True				
ANR	8456214	RelationalExpression	l1 < 1024		8456145	0		<			
ANR	8456215	Identifier	l1		8456145	0					
ANR	8456216	PrimaryExpression	1024		8456145	1					
ANR	8456217	PostIncDecOperationExpression	l1 ++	27:27:305:308	8456145	2	True				
ANR	8456218	Identifier	l1		8456145	0					
ANR	8456219	IncDec	++		8456145	1					
ANR	8456220	CompoundStatement		25:33:274:274	8456145	3					
ANR	8456221	ExpressionStatement	"cpu_physical_memory_read ( pgd + l1 * 4 , ( uint8_t * ) & pde , 4 )"	29:8:322:380	8456145	0	True				
ANR	8456222	CallExpression	"cpu_physical_memory_read ( pgd + l1 * 4 , ( uint8_t * ) & pde , 4 )"		8456145	0					
ANR	8456223	Callee	cpu_physical_memory_read		8456145	0					
ANR	8456224	Identifier	cpu_physical_memory_read		8456145	0					
ANR	8456225	ArgumentList	pgd + l1 * 4		8456145	1					
ANR	8456226	Argument	pgd + l1 * 4		8456145	0					
ANR	8456227	AdditiveExpression	pgd + l1 * 4		8456145	0		+			
ANR	8456228	Identifier	pgd		8456145	0					
ANR	8456229	MultiplicativeExpression	l1 * 4		8456145	1		*			
ANR	8456230	Identifier	l1		8456145	0					
ANR	8456231	PrimaryExpression	4		8456145	1					
ANR	8456232	Argument	( uint8_t * ) & pde		8456145	1					
ANR	8456233	CastExpression	( uint8_t * ) & pde		8456145	0					
ANR	8456234	CastTarget	uint8_t *		8456145	0					
ANR	8456235	UnaryOperationExpression	& pde		8456145	1					
ANR	8456236	UnaryOperator	&		8456145	0					
ANR	8456237	Identifier	pde		8456145	1					
ANR	8456238	Argument	4		8456145	2					
ANR	8456239	PrimaryExpression	4		8456145	0					
ANR	8456240	ExpressionStatement	pde = le32_to_cpu ( pde )	31:8:391:413	8456145	1	True				
ANR	8456241	AssignmentExpression	pde = le32_to_cpu ( pde )		8456145	0		=			
ANR	8456242	Identifier	pde		8456145	0					
ANR	8456243	CallExpression	le32_to_cpu ( pde )		8456145	1					
ANR	8456244	Callee	le32_to_cpu		8456145	0					
ANR	8456245	Identifier	le32_to_cpu		8456145	0					
ANR	8456246	ArgumentList	pde		8456145	1					
ANR	8456247	Argument	pde		8456145	0					
ANR	8456248	Identifier	pde		8456145	0					
ANR	8456249	IfStatement	if ( pde & PG_PRESENT_MASK )		8456145	2					
ANR	8456250	Condition	pde & PG_PRESENT_MASK	33:12:428:448	8456145	0	True				
ANR	8456251	BitAndExpression	pde & PG_PRESENT_MASK		8456145	0		&			
ANR	8456252	Identifier	pde		8456145	0					
ANR	8456253	Identifier	PG_PRESENT_MASK		8456145	1					
ANR	8456254	CompoundStatement		31:35:414:414	8456145	1					
ANR	8456255	IfStatement	if ( ( pde & PG_PSE_MASK ) && ( env -> cr [ 4 ] & CR4_PSE_MASK ) )		8456145	0					
ANR	8456256	Condition	( pde & PG_PSE_MASK ) && ( env -> cr [ 4 ] & CR4_PSE_MASK )	35:16:470:519	8456145	0	True				
ANR	8456257	AndExpression	( pde & PG_PSE_MASK ) && ( env -> cr [ 4 ] & CR4_PSE_MASK )		8456145	0		&&			
ANR	8456258	BitAndExpression	pde & PG_PSE_MASK		8456145	0		&			
ANR	8456259	Identifier	pde		8456145	0					
ANR	8456260	Identifier	PG_PSE_MASK		8456145	1					
ANR	8456261	BitAndExpression	env -> cr [ 4 ] & CR4_PSE_MASK		8456145	1		&			
ANR	8456262	ArrayIndexing	env -> cr [ 4 ]		8456145	0					
ANR	8456263	PtrMemberAccess	env -> cr		8456145	0					
ANR	8456264	Identifier	env		8456145	0					
ANR	8456265	Identifier	cr		8456145	1					
ANR	8456266	PrimaryExpression	4		8456145	1					
ANR	8456267	Identifier	CR4_PSE_MASK		8456145	1					
ANR	8456268	CompoundStatement		33:68:485:485	8456145	1					
ANR	8456269	ExpressionStatement	"print_pte ( mon , ( l1 << 22 ) , pde , ~ ( ( 1 << 20 ) - 1 ) )"	37:16:541:590	8456145	0	True				
ANR	8456270	CallExpression	"print_pte ( mon , ( l1 << 22 ) , pde , ~ ( ( 1 << 20 ) - 1 ) )"		8456145	0					
ANR	8456271	Callee	print_pte		8456145	0					
ANR	8456272	Identifier	print_pte		8456145	0					
ANR	8456273	ArgumentList	mon		8456145	1					
ANR	8456274	Argument	mon		8456145	0					
ANR	8456275	Identifier	mon		8456145	0					
ANR	8456276	Argument	l1 << 22		8456145	1					
ANR	8456277	ShiftExpression	l1 << 22		8456145	0		<<			
ANR	8456278	Identifier	l1		8456145	0					
ANR	8456279	PrimaryExpression	22		8456145	1					
ANR	8456280	Argument	pde		8456145	2					
ANR	8456281	Identifier	pde		8456145	0					
ANR	8456282	Argument	~ ( ( 1 << 20 ) - 1 )		8456145	3					
ANR	8456283	UnaryOperationExpression	~ ( ( 1 << 20 ) - 1 )		8456145	0					
ANR	8456284	UnaryOperator	~		8456145	0					
ANR	8456285	AdditiveExpression	( 1 << 20 ) - 1		8456145	1		-			
ANR	8456286	ShiftExpression	1 << 20		8456145	0		<<			
ANR	8456287	PrimaryExpression	1		8456145	0					
ANR	8456288	PrimaryExpression	20		8456145	1					
ANR	8456289	PrimaryExpression	1		8456145	1					
ANR	8456290	ElseStatement	else		8456145	0					
ANR	8456291	CompoundStatement		37:19:575:575	8456145	0					
ANR	8456292	ForStatement	for ( l2 = 0 ; l2 < 1024 ; l2 ++ )		8456145	0					
ANR	8456293	ForInit	l2 = 0 ;	41:20:635:641	8456145	0	True				
ANR	8456294	AssignmentExpression	l2 = 0		8456145	0		=			
ANR	8456295	Identifier	l2		8456145	0					
ANR	8456296	PrimaryExpression	0		8456145	1					
ANR	8456297	Condition	l2 < 1024	41:28:643:651	8456145	1	True				
ANR	8456298	RelationalExpression	l2 < 1024		8456145	0		<			
ANR	8456299	Identifier	l2		8456145	0					
ANR	8456300	PrimaryExpression	1024		8456145	1					
ANR	8456301	PostIncDecOperationExpression	l2 ++	41:39:654:657	8456145	2	True				
ANR	8456302	Identifier	l2		8456145	0					
ANR	8456303	IncDec	++		8456145	1					
ANR	8456304	CompoundStatement		39:45:623:623	8456145	3					
ANR	8456305	ExpressionStatement	"cpu_physical_memory_read ( ( pde & ~0xfff ) + l2 * 4 , ( uint8_t * ) & pte , 4 )"	43:20:683:798	8456145	0	True				
ANR	8456306	CallExpression	"cpu_physical_memory_read ( ( pde & ~0xfff ) + l2 * 4 , ( uint8_t * ) & pte , 4 )"		8456145	0					
ANR	8456307	Callee	cpu_physical_memory_read		8456145	0					
ANR	8456308	Identifier	cpu_physical_memory_read		8456145	0					
ANR	8456309	ArgumentList	( pde & ~0xfff ) + l2 * 4		8456145	1					
ANR	8456310	Argument	( pde & ~0xfff ) + l2 * 4		8456145	0					
ANR	8456311	AdditiveExpression	( pde & ~0xfff ) + l2 * 4		8456145	0		+			
ANR	8456312	BitAndExpression	pde & ~0xfff		8456145	0		&			
ANR	8456313	Identifier	pde		8456145	0					
ANR	8456314	Identifier	~0xfff		8456145	1					
ANR	8456315	MultiplicativeExpression	l2 * 4		8456145	1		*			
ANR	8456316	Identifier	l2		8456145	0					
ANR	8456317	PrimaryExpression	4		8456145	1					
ANR	8456318	Argument	( uint8_t * ) & pte		8456145	1					
ANR	8456319	CastExpression	( uint8_t * ) & pte		8456145	0					
ANR	8456320	CastTarget	uint8_t *		8456145	0					
ANR	8456321	UnaryOperationExpression	& pte		8456145	1					
ANR	8456322	UnaryOperator	&		8456145	0					
ANR	8456323	Identifier	pte		8456145	1					
ANR	8456324	Argument	4		8456145	2					
ANR	8456325	PrimaryExpression	4		8456145	0					
ANR	8456326	ExpressionStatement	pte = le32_to_cpu ( pte )	47:20:821:843	8456145	1	True				
ANR	8456327	AssignmentExpression	pte = le32_to_cpu ( pte )		8456145	0		=			
ANR	8456328	Identifier	pte		8456145	0					
ANR	8456329	CallExpression	le32_to_cpu ( pte )		8456145	1					
ANR	8456330	Callee	le32_to_cpu		8456145	0					
ANR	8456331	Identifier	le32_to_cpu		8456145	0					
ANR	8456332	ArgumentList	pte		8456145	1					
ANR	8456333	Argument	pte		8456145	0					
ANR	8456334	Identifier	pte		8456145	0					
ANR	8456335	IfStatement	if ( pte & PG_PRESENT_MASK )		8456145	2					
ANR	8456336	Condition	pte & PG_PRESENT_MASK	49:24:870:890	8456145	0	True				
ANR	8456337	BitAndExpression	pte & PG_PRESENT_MASK		8456145	0		&			
ANR	8456338	Identifier	pte		8456145	0					
ANR	8456339	Identifier	PG_PRESENT_MASK		8456145	1					
ANR	8456340	CompoundStatement		47:47:856:856	8456145	1					
ANR	8456341	ExpressionStatement	"print_pte ( mon , ( l1 << 22 ) + ( l2 << 12 ) , pte & ~PG_PSE_MASK , ~0xfff )"	51:24:920:1057	8456145	0	True				
ANR	8456342	CallExpression	"print_pte ( mon , ( l1 << 22 ) + ( l2 << 12 ) , pte & ~PG_PSE_MASK , ~0xfff )"		8456145	0					
ANR	8456343	Callee	print_pte		8456145	0					
ANR	8456344	Identifier	print_pte		8456145	0					
ANR	8456345	ArgumentList	mon		8456145	1					
ANR	8456346	Argument	mon		8456145	0					
ANR	8456347	Identifier	mon		8456145	0					
ANR	8456348	Argument	( l1 << 22 ) + ( l2 << 12 )		8456145	1					
ANR	8456349	AdditiveExpression	( l1 << 22 ) + ( l2 << 12 )		8456145	0		+			
ANR	8456350	ShiftExpression	l1 << 22		8456145	0		<<			
ANR	8456351	Identifier	l1		8456145	0					
ANR	8456352	PrimaryExpression	22		8456145	1					
ANR	8456353	ShiftExpression	l2 << 12		8456145	1		<<			
ANR	8456354	Identifier	l2		8456145	0					
ANR	8456355	PrimaryExpression	12		8456145	1					
ANR	8456356	Argument	pte & ~PG_PSE_MASK		8456145	2					
ANR	8456357	BitAndExpression	pte & ~PG_PSE_MASK		8456145	0		&			
ANR	8456358	Identifier	pte		8456145	0					
ANR	8456359	Identifier	~PG_PSE_MASK		8456145	1					
ANR	8456360	Argument	~0xfff		8456145	3					
ANR	8456361	Identifier	~0xfff		8456145	0					
ANR	8456362	ReturnType	static void		8456145	1					
ANR	8456363	Identifier	tlb_info		8456145	2					
ANR	8456364	ParameterList	Monitor * mon		8456145	3					
ANR	8456365	Parameter	Monitor * mon	1:21:21:32	8456145	0	True				
ANR	8456366	ParameterType	Monitor *		8456145	0					
ANR	8456367	Identifier	mon		8456145	1					
ANR	8456368	CFGEntryNode	ENTRY		8456145		True				
ANR	8456369	CFGExitNode	EXIT		8456145		True				
ANR	8456370	Symbol	pte		8456145						
ANR	8456371	Symbol	& pte		8456145						
ANR	8456372	Symbol	* * env		8456145						
ANR	8456373	Symbol	l1		8456145						
ANR	8456374	Symbol	l2		8456145						
ANR	8456375	Symbol	CR0_PG_MASK		8456145						
ANR	8456376	Symbol	* env		8456145						
ANR	8456377	Symbol	PG_PSE_MASK		8456145						
ANR	8456378	Symbol	env		8456145						
ANR	8456379	Symbol	pgd		8456145						
ANR	8456380	Symbol	mon		8456145						
ANR	8456381	Symbol	pde		8456145						
ANR	8456382	Symbol	* env -> cr		8456145						
ANR	8456383	Symbol	& pde		8456145						
ANR	8456384	Symbol	CR4_PSE_MASK		8456145						
ANR	8456385	Symbol	mon_get_cpu		8456145						
ANR	8456386	Symbol	le32_to_cpu		8456145						
ANR	8456387	Symbol	PG_PRESENT_MASK		8456145						
ANR	8456388	Symbol	~PG_PSE_MASK		8456145						
ANR	8456389	Symbol	env -> cr		8456145						
ANR	8456390	Symbol	~0xfff		8456145						
