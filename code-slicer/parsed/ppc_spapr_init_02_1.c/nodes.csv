command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6646879	File	/home/p4ultr4n/workplace/ReVeal/raw_code/ppc_spapr_init_02_1.c								
ANR	6646880	Function	ppc_spapr_init	1:0:0:8486							
ANR	6646881	FunctionDef	ppc_spapr_init (QEMUMachineInitArgs * args)		6646880	0					
ANR	6646882	CompoundStatement		3:0:55:8486	6646880	0					
ANR	6646883	IdentifierDeclStatement	ram_addr_t ram_size = args -> ram_size ;	5:4:62:98	6646880	0	True				
ANR	6646884	IdentifierDecl	ram_size = args -> ram_size		6646880	0					
ANR	6646885	IdentifierDeclType	ram_addr_t		6646880	0					
ANR	6646886	Identifier	ram_size		6646880	1					
ANR	6646887	AssignmentExpression	ram_size = args -> ram_size		6646880	2		=			
ANR	6646888	Identifier	ram_size		6646880	0					
ANR	6646889	PtrMemberAccess	args -> ram_size		6646880	1					
ANR	6646890	Identifier	args		6646880	0					
ANR	6646891	Identifier	ram_size		6646880	1					
ANR	6646892	IdentifierDeclStatement	const char * cpu_model = args -> cpu_model ;	7:4:105:144	6646880	1	True				
ANR	6646893	IdentifierDecl	* cpu_model = args -> cpu_model		6646880	0					
ANR	6646894	IdentifierDeclType	const char *		6646880	0					
ANR	6646895	Identifier	cpu_model		6646880	1					
ANR	6646896	AssignmentExpression	* cpu_model = args -> cpu_model		6646880	2		=			
ANR	6646897	Identifier	cpu_model		6646880	0					
ANR	6646898	PtrMemberAccess	args -> cpu_model		6646880	1					
ANR	6646899	Identifier	args		6646880	0					
ANR	6646900	Identifier	cpu_model		6646880	1					
ANR	6646901	IdentifierDeclStatement	const char * kernel_filename = args -> kernel_filename ;	9:4:151:202	6646880	2	True				
ANR	6646902	IdentifierDecl	* kernel_filename = args -> kernel_filename		6646880	0					
ANR	6646903	IdentifierDeclType	const char *		6646880	0					
ANR	6646904	Identifier	kernel_filename		6646880	1					
ANR	6646905	AssignmentExpression	* kernel_filename = args -> kernel_filename		6646880	2		=			
ANR	6646906	Identifier	kernel_filename		6646880	0					
ANR	6646907	PtrMemberAccess	args -> kernel_filename		6646880	1					
ANR	6646908	Identifier	args		6646880	0					
ANR	6646909	Identifier	kernel_filename		6646880	1					
ANR	6646910	IdentifierDeclStatement	const char * kernel_cmdline = args -> kernel_cmdline ;	11:4:209:258	6646880	3	True				
ANR	6646911	IdentifierDecl	* kernel_cmdline = args -> kernel_cmdline		6646880	0					
ANR	6646912	IdentifierDeclType	const char *		6646880	0					
ANR	6646913	Identifier	kernel_cmdline		6646880	1					
ANR	6646914	AssignmentExpression	* kernel_cmdline = args -> kernel_cmdline		6646880	2		=			
ANR	6646915	Identifier	kernel_cmdline		6646880	0					
ANR	6646916	PtrMemberAccess	args -> kernel_cmdline		6646880	1					
ANR	6646917	Identifier	args		6646880	0					
ANR	6646918	Identifier	kernel_cmdline		6646880	1					
ANR	6646919	IdentifierDeclStatement	const char * initrd_filename = args -> initrd_filename ;	13:4:265:316	6646880	4	True				
ANR	6646920	IdentifierDecl	* initrd_filename = args -> initrd_filename		6646880	0					
ANR	6646921	IdentifierDeclType	const char *		6646880	0					
ANR	6646922	Identifier	initrd_filename		6646880	1					
ANR	6646923	AssignmentExpression	* initrd_filename = args -> initrd_filename		6646880	2		=			
ANR	6646924	Identifier	initrd_filename		6646880	0					
ANR	6646925	PtrMemberAccess	args -> initrd_filename		6646880	1					
ANR	6646926	Identifier	args		6646880	0					
ANR	6646927	Identifier	initrd_filename		6646880	1					
ANR	6646928	IdentifierDeclStatement	const char * boot_device = args -> boot_device ;	15:4:323:366	6646880	5	True				
ANR	6646929	IdentifierDecl	* boot_device = args -> boot_device		6646880	0					
ANR	6646930	IdentifierDeclType	const char *		6646880	0					
ANR	6646931	Identifier	boot_device		6646880	1					
ANR	6646932	AssignmentExpression	* boot_device = args -> boot_device		6646880	2		=			
ANR	6646933	Identifier	boot_device		6646880	0					
ANR	6646934	PtrMemberAccess	args -> boot_device		6646880	1					
ANR	6646935	Identifier	args		6646880	0					
ANR	6646936	Identifier	boot_device		6646880	1					
ANR	6646937	IdentifierDeclStatement	PowerPCCPU * cpu ;	17:4:373:388	6646880	6	True				
ANR	6646938	IdentifierDecl	* cpu		6646880	0					
ANR	6646939	IdentifierDeclType	PowerPCCPU *		6646880	0					
ANR	6646940	Identifier	cpu		6646880	1					
ANR	6646941	IdentifierDeclStatement	CPUPPCState * env ;	19:4:395:411	6646880	7	True				
ANR	6646942	IdentifierDecl	* env		6646880	0					
ANR	6646943	IdentifierDeclType	CPUPPCState *		6646880	0					
ANR	6646944	Identifier	env		6646880	1					
ANR	6646945	IdentifierDeclStatement	PCIHostState * phb ;	21:4:418:435	6646880	8	True				
ANR	6646946	IdentifierDecl	* phb		6646880	0					
ANR	6646947	IdentifierDeclType	PCIHostState *		6646880	0					
ANR	6646948	Identifier	phb		6646880	1					
ANR	6646949	IdentifierDeclStatement	int i ;	23:4:442:447	6646880	9	True				
ANR	6646950	IdentifierDecl	i		6646880	0					
ANR	6646951	IdentifierDeclType	int		6646880	0					
ANR	6646952	Identifier	i		6646880	1					
ANR	6646953	IdentifierDeclStatement	MemoryRegion * sysmem = get_system_memory ( ) ;	25:4:454:496	6646880	10	True				
ANR	6646954	IdentifierDecl	* sysmem = get_system_memory ( )		6646880	0					
ANR	6646955	IdentifierDeclType	MemoryRegion *		6646880	0					
ANR	6646956	Identifier	sysmem		6646880	1					
ANR	6646957	AssignmentExpression	* sysmem = get_system_memory ( )		6646880	2		=			
ANR	6646958	Identifier	sysmem		6646880	0					
ANR	6646959	CallExpression	get_system_memory ( )		6646880	1					
ANR	6646960	Callee	get_system_memory		6646880	0					
ANR	6646961	Identifier	get_system_memory		6646880	0					
ANR	6646962	ArgumentList			6646880	1					
ANR	6646963	IdentifierDeclStatement	"MemoryRegion * ram = g_new ( MemoryRegion , 1 ) ;"	27:4:503:545	6646880	11	True				
ANR	6646964	IdentifierDecl	"* ram = g_new ( MemoryRegion , 1 )"		6646880	0					
ANR	6646965	IdentifierDeclType	MemoryRegion *		6646880	0					
ANR	6646966	Identifier	ram		6646880	1					
ANR	6646967	AssignmentExpression	"* ram = g_new ( MemoryRegion , 1 )"		6646880	2		=			
ANR	6646968	Identifier	ram		6646880	0					
ANR	6646969	CallExpression	"g_new ( MemoryRegion , 1 )"		6646880	1					
ANR	6646970	Callee	g_new		6646880	0					
ANR	6646971	Identifier	g_new		6646880	0					
ANR	6646972	ArgumentList	MemoryRegion		6646880	1					
ANR	6646973	Argument	MemoryRegion		6646880	0					
ANR	6646974	Identifier	MemoryRegion		6646880	0					
ANR	6646975	Argument	1		6646880	1					
ANR	6646976	PrimaryExpression	1		6646880	0					
ANR	6646977	IdentifierDeclStatement	hwaddr rma_alloc_size ;	29:4:552:573	6646880	12	True				
ANR	6646978	IdentifierDecl	rma_alloc_size		6646880	0					
ANR	6646979	IdentifierDeclType	hwaddr		6646880	0					
ANR	6646980	Identifier	rma_alloc_size		6646880	1					
ANR	6646981	IdentifierDeclStatement	uint32_t initrd_base = 0 ;	31:4:580:604	6646880	13	True				
ANR	6646982	IdentifierDecl	initrd_base = 0		6646880	0					
ANR	6646983	IdentifierDeclType	uint32_t		6646880	0					
ANR	6646984	Identifier	initrd_base		6646880	1					
ANR	6646985	AssignmentExpression	initrd_base = 0		6646880	2		=			
ANR	6646986	Identifier	initrd_base		6646880	0					
ANR	6646987	PrimaryExpression	0		6646880	1					
ANR	6646988	IdentifierDeclStatement	"long kernel_size = 0 , initrd_size = 0 ;"	33:4:611:648	6646880	14	True				
ANR	6646989	IdentifierDecl	kernel_size = 0		6646880	0					
ANR	6646990	IdentifierDeclType	long		6646880	0					
ANR	6646991	Identifier	kernel_size		6646880	1					
ANR	6646992	AssignmentExpression	kernel_size = 0		6646880	2		=			
ANR	6646993	Identifier	kernel_size		6646880	0					
ANR	6646994	PrimaryExpression	0		6646880	1					
ANR	6646995	IdentifierDecl	initrd_size = 0		6646880	1					
ANR	6646996	IdentifierDeclType	long		6646880	0					
ANR	6646997	Identifier	initrd_size		6646880	1					
ANR	6646998	AssignmentExpression	initrd_size = 0		6646880	2		=			
ANR	6646999	Identifier	initrd_size		6646880	0					
ANR	6647000	PrimaryExpression	0		6646880	1					
ANR	6647001	IdentifierDeclStatement	"long load_limit , rtas_limit , fw_size ;"	35:4:655:691	6646880	15	True				
ANR	6647002	IdentifierDecl	load_limit		6646880	0					
ANR	6647003	IdentifierDeclType	long		6646880	0					
ANR	6647004	Identifier	load_limit		6646880	1					
ANR	6647005	IdentifierDecl	rtas_limit		6646880	1					
ANR	6647006	IdentifierDeclType	long		6646880	0					
ANR	6647007	Identifier	rtas_limit		6646880	1					
ANR	6647008	IdentifierDecl	fw_size		6646880	2					
ANR	6647009	IdentifierDeclType	long		6646880	0					
ANR	6647010	Identifier	fw_size		6646880	1					
ANR	6647011	IdentifierDeclStatement	char * filename ;	37:4:698:712	6646880	16	True				
ANR	6647012	IdentifierDecl	* filename		6646880	0					
ANR	6647013	IdentifierDeclType	char *		6646880	0					
ANR	6647014	Identifier	filename		6646880	1					
ANR	6647015	ExpressionStatement	msi_supported = true	41:4:721:741	6646880	17	True				
ANR	6647016	AssignmentExpression	msi_supported = true		6646880	0		=			
ANR	6647017	Identifier	msi_supported		6646880	0					
ANR	6647018	Identifier	true		6646880	1					
ANR	6647019	ExpressionStatement	spapr = g_malloc0 ( sizeof ( * spapr ) )	45:4:750:783	6646880	18	True				
ANR	6647020	AssignmentExpression	spapr = g_malloc0 ( sizeof ( * spapr ) )		6646880	0		=			
ANR	6647021	Identifier	spapr		6646880	0					
ANR	6647022	CallExpression	g_malloc0 ( sizeof ( * spapr ) )		6646880	1					
ANR	6647023	Callee	g_malloc0		6646880	0					
ANR	6647024	Identifier	g_malloc0		6646880	0					
ANR	6647025	ArgumentList	sizeof ( * spapr )		6646880	1					
ANR	6647026	Argument	sizeof ( * spapr )		6646880	0					
ANR	6647027	SizeofExpression	sizeof ( * spapr )		6646880	0					
ANR	6647028	Sizeof	sizeof		6646880	0					
ANR	6647029	UnaryOperationExpression	* spapr		6646880	1					
ANR	6647030	UnaryOperator	*		6646880	0					
ANR	6647031	Identifier	spapr		6646880	1					
ANR	6647032	ExpressionStatement	QLIST_INIT ( & spapr -> phbs )	47:4:790:814	6646880	19	True				
ANR	6647033	CallExpression	QLIST_INIT ( & spapr -> phbs )		6646880	0					
ANR	6647034	Callee	QLIST_INIT		6646880	0					
ANR	6647035	Identifier	QLIST_INIT		6646880	0					
ANR	6647036	ArgumentList	& spapr -> phbs		6646880	1					
ANR	6647037	Argument	& spapr -> phbs		6646880	0					
ANR	6647038	UnaryOperationExpression	& spapr -> phbs		6646880	0					
ANR	6647039	UnaryOperator	&		6646880	0					
ANR	6647040	PtrMemberAccess	spapr -> phbs		6646880	1					
ANR	6647041	Identifier	spapr		6646880	0					
ANR	6647042	Identifier	phbs		6646880	1					
ANR	6647043	ExpressionStatement	cpu_ppc_hypercall = emulate_spapr_hypercall	51:4:823:866	6646880	20	True				
ANR	6647044	AssignmentExpression	cpu_ppc_hypercall = emulate_spapr_hypercall		6646880	0		=			
ANR	6647045	Identifier	cpu_ppc_hypercall		6646880	0					
ANR	6647046	Identifier	emulate_spapr_hypercall		6646880	1					
ANR	6647047	ExpressionStatement	"rma_alloc_size = kvmppc_alloc_rma ( ""ppc_spapr.rma"" , sysmem )"	57:4:912:970	6646880	21	True				
ANR	6647048	AssignmentExpression	"rma_alloc_size = kvmppc_alloc_rma ( ""ppc_spapr.rma"" , sysmem )"		6646880	0		=			
ANR	6647049	Identifier	rma_alloc_size		6646880	0					
ANR	6647050	CallExpression	"kvmppc_alloc_rma ( ""ppc_spapr.rma"" , sysmem )"		6646880	1					
ANR	6647051	Callee	kvmppc_alloc_rma		6646880	0					
ANR	6647052	Identifier	kvmppc_alloc_rma		6646880	0					
ANR	6647053	ArgumentList	"""ppc_spapr.rma"""		6646880	1					
ANR	6647054	Argument	"""ppc_spapr.rma"""		6646880	0					
ANR	6647055	PrimaryExpression	"""ppc_spapr.rma"""		6646880	0					
ANR	6647056	Argument	sysmem		6646880	1					
ANR	6647057	Identifier	sysmem		6646880	0					
ANR	6647058	IfStatement	if ( rma_alloc_size == - 1 )		6646880	22					
ANR	6647059	Condition	rma_alloc_size == - 1	61:8:983:1002	6646880	0	True				
ANR	6647060	EqualityExpression	rma_alloc_size == - 1		6646880	0		==			
ANR	6647061	Identifier	rma_alloc_size		6646880	0					
ANR	6647062	UnaryOperationExpression	- 1		6646880	1					
ANR	6647063	UnaryOperator	-		6646880	0					
ANR	6647064	PrimaryExpression	1		6646880	1					
ANR	6647065	CompoundStatement		59:30:949:949	6646880	1					
ANR	6647066	ExpressionStatement	"hw_error ( ""qemu: Unable to create RMA\\n"" )"	63:8:1016:1056	6646880	0	True				
ANR	6647067	CallExpression	"hw_error ( ""qemu: Unable to create RMA\\n"" )"		6646880	0					
ANR	6647068	Callee	hw_error		6646880	0					
ANR	6647069	Identifier	hw_error		6646880	0					
ANR	6647070	ArgumentList	"""qemu: Unable to create RMA\\n"""		6646880	1					
ANR	6647071	Argument	"""qemu: Unable to create RMA\\n"""		6646880	0					
ANR	6647072	PrimaryExpression	"""qemu: Unable to create RMA\\n"""		6646880	0					
ANR	6647073	ExpressionStatement	exit ( 1 )	65:8:1067:1074	6646880	1	True				
ANR	6647074	CallExpression	exit ( 1 )		6646880	0					
ANR	6647075	Callee	exit		6646880	0					
ANR	6647076	Identifier	exit		6646880	0					
ANR	6647077	ArgumentList	1		6646880	1					
ANR	6647078	Argument	1		6646880	0					
ANR	6647079	PrimaryExpression	1		6646880	0					
ANR	6647080	IfStatement	if ( rma_alloc_size && ( rma_alloc_size < ram_size ) )		6646880	23					
ANR	6647081	Condition	rma_alloc_size && ( rma_alloc_size < ram_size )	71:8:1094:1138	6646880	0	True				
ANR	6647082	AndExpression	rma_alloc_size && ( rma_alloc_size < ram_size )		6646880	0		&&			
ANR	6647083	Identifier	rma_alloc_size		6646880	0					
ANR	6647084	RelationalExpression	rma_alloc_size < ram_size		6646880	1		<			
ANR	6647085	Identifier	rma_alloc_size		6646880	0					
ANR	6647086	Identifier	ram_size		6646880	1					
ANR	6647087	CompoundStatement		69:55:1085:1085	6646880	1					
ANR	6647088	ExpressionStatement	spapr -> rma_size = rma_alloc_size	73:8:1152:1184	6646880	0	True				
ANR	6647089	AssignmentExpression	spapr -> rma_size = rma_alloc_size		6646880	0		=			
ANR	6647090	PtrMemberAccess	spapr -> rma_size		6646880	0					
ANR	6647091	Identifier	spapr		6646880	0					
ANR	6647092	Identifier	rma_size		6646880	1					
ANR	6647093	Identifier	rma_alloc_size		6646880	1					
ANR	6647094	ElseStatement	else		6646880	0					
ANR	6647095	CompoundStatement		73:11:1142:1142	6646880	0					
ANR	6647096	ExpressionStatement	spapr -> rma_size = ram_size	77:8:1209:1235	6646880	0	True				
ANR	6647097	AssignmentExpression	spapr -> rma_size = ram_size		6646880	0		=			
ANR	6647098	PtrMemberAccess	spapr -> rma_size		6646880	0					
ANR	6647099	Identifier	spapr		6646880	0					
ANR	6647100	Identifier	rma_size		6646880	1					
ANR	6647101	Identifier	ram_size		6646880	1					
ANR	6647102	IfStatement	if ( kvm_enabled ( ) )		6646880	1					
ANR	6647103	Condition	kvm_enabled ( )	99:12:1735:1747	6646880	0	True				
ANR	6647104	CallExpression	kvm_enabled ( )		6646880	0					
ANR	6647105	Callee	kvm_enabled		6646880	0					
ANR	6647106	Identifier	kvm_enabled		6646880	0					
ANR	6647107	ArgumentList			6646880	1					
ANR	6647108	CompoundStatement		97:27:1694:1694	6646880	1					
ANR	6647109	ExpressionStatement	spapr -> vrma_adjust = 1	101:12:1765:1787	6646880	0	True				
ANR	6647110	AssignmentExpression	spapr -> vrma_adjust = 1		6646880	0		=			
ANR	6647111	PtrMemberAccess	spapr -> vrma_adjust		6646880	0					
ANR	6647112	Identifier	spapr		6646880	0					
ANR	6647113	Identifier	vrma_adjust		6646880	1					
ANR	6647114	PrimaryExpression	1		6646880	1					
ANR	6647115	ExpressionStatement	"spapr -> rma_size = MIN ( spapr -> rma_size , 0x10000000 )"	103:12:1802:1852	6646880	1	True				
ANR	6647116	AssignmentExpression	"spapr -> rma_size = MIN ( spapr -> rma_size , 0x10000000 )"		6646880	0		=			
ANR	6647117	PtrMemberAccess	spapr -> rma_size		6646880	0					
ANR	6647118	Identifier	spapr		6646880	0					
ANR	6647119	Identifier	rma_size		6646880	1					
ANR	6647120	CallExpression	"MIN ( spapr -> rma_size , 0x10000000 )"		6646880	1					
ANR	6647121	Callee	MIN		6646880	0					
ANR	6647122	Identifier	MIN		6646880	0					
ANR	6647123	ArgumentList	spapr -> rma_size		6646880	1					
ANR	6647124	Argument	spapr -> rma_size		6646880	0					
ANR	6647125	PtrMemberAccess	spapr -> rma_size		6646880	0					
ANR	6647126	Identifier	spapr		6646880	0					
ANR	6647127	Identifier	rma_size		6646880	1					
ANR	6647128	Argument	0x10000000		6646880	1					
ANR	6647129	PrimaryExpression	0x10000000		6646880	0					
ANR	6647130	ExpressionStatement	"rtas_limit = MIN ( spapr -> rma_size , 0x80000000 )"	117:4:2086:2131	6646880	24	True				
ANR	6647131	AssignmentExpression	"rtas_limit = MIN ( spapr -> rma_size , 0x80000000 )"		6646880	0		=			
ANR	6647132	Identifier	rtas_limit		6646880	0					
ANR	6647133	CallExpression	"MIN ( spapr -> rma_size , 0x80000000 )"		6646880	1					
ANR	6647134	Callee	MIN		6646880	0					
ANR	6647135	Identifier	MIN		6646880	0					
ANR	6647136	ArgumentList	spapr -> rma_size		6646880	1					
ANR	6647137	Argument	spapr -> rma_size		6646880	0					
ANR	6647138	PtrMemberAccess	spapr -> rma_size		6646880	0					
ANR	6647139	Identifier	spapr		6646880	0					
ANR	6647140	Identifier	rma_size		6646880	1					
ANR	6647141	Argument	0x80000000		6646880	1					
ANR	6647142	PrimaryExpression	0x80000000		6646880	0					
ANR	6647143	ExpressionStatement	spapr -> rtas_addr = rtas_limit - RTAS_MAX_SIZE	119:4:2138:2183	6646880	25	True				
ANR	6647144	AssignmentExpression	spapr -> rtas_addr = rtas_limit - RTAS_MAX_SIZE		6646880	0		=			
ANR	6647145	PtrMemberAccess	spapr -> rtas_addr		6646880	0					
ANR	6647146	Identifier	spapr		6646880	0					
ANR	6647147	Identifier	rtas_addr		6646880	1					
ANR	6647148	AdditiveExpression	rtas_limit - RTAS_MAX_SIZE		6646880	1		-			
ANR	6647149	Identifier	rtas_limit		6646880	0					
ANR	6647150	Identifier	RTAS_MAX_SIZE		6646880	1					
ANR	6647151	ExpressionStatement	spapr -> fdt_addr = spapr -> rtas_addr - FDT_MAX_SIZE	121:4:2190:2239	6646880	26	True				
ANR	6647152	AssignmentExpression	spapr -> fdt_addr = spapr -> rtas_addr - FDT_MAX_SIZE		6646880	0		=			
ANR	6647153	PtrMemberAccess	spapr -> fdt_addr		6646880	0					
ANR	6647154	Identifier	spapr		6646880	0					
ANR	6647155	Identifier	fdt_addr		6646880	1					
ANR	6647156	AdditiveExpression	spapr -> rtas_addr - FDT_MAX_SIZE		6646880	1		-			
ANR	6647157	PtrMemberAccess	spapr -> rtas_addr		6646880	0					
ANR	6647158	Identifier	spapr		6646880	0					
ANR	6647159	Identifier	rtas_addr		6646880	1					
ANR	6647160	Identifier	FDT_MAX_SIZE		6646880	1					
ANR	6647161	ExpressionStatement	load_limit = spapr -> fdt_addr - FW_OVERHEAD	123:4:2246:2288	6646880	27	True				
ANR	6647162	AssignmentExpression	load_limit = spapr -> fdt_addr - FW_OVERHEAD		6646880	0		=			
ANR	6647163	Identifier	load_limit		6646880	0					
ANR	6647164	AdditiveExpression	spapr -> fdt_addr - FW_OVERHEAD		6646880	1		-			
ANR	6647165	PtrMemberAccess	spapr -> fdt_addr		6646880	0					
ANR	6647166	Identifier	spapr		6646880	0					
ANR	6647167	Identifier	fdt_addr		6646880	1					
ANR	6647168	Identifier	FW_OVERHEAD		6646880	1					
ANR	6647169	ExpressionStatement	spapr -> htab_shift = 18	133:4:2496:2518	6646880	28	True				
ANR	6647170	AssignmentExpression	spapr -> htab_shift = 18		6646880	0		=			
ANR	6647171	PtrMemberAccess	spapr -> htab_shift		6646880	0					
ANR	6647172	Identifier	spapr		6646880	0					
ANR	6647173	Identifier	htab_shift		6646880	1					
ANR	6647174	PrimaryExpression	18		6646880	1					
ANR	6647175	WhileStatement	while ( spapr -> htab_shift <= 46 )		6646880	29					
ANR	6647176	Condition	spapr -> htab_shift <= 46	135:11:2563:2585	6646880	0	True				
ANR	6647177	RelationalExpression	spapr -> htab_shift <= 46		6646880	0		<=			
ANR	6647178	PtrMemberAccess	spapr -> htab_shift		6646880	0					
ANR	6647179	Identifier	spapr		6646880	0					
ANR	6647180	Identifier	htab_shift		6646880	1					
ANR	6647181	PrimaryExpression	46		6646880	1					
ANR	6647182	CompoundStatement		133:36:2532:2532	6646880	1					
ANR	6647183	Statement	if	137:8:2599:2600	6646880	0	True				
ANR	6647184	Statement	(	137:11:2602:2602	6646880	1	True				
ANR	6647185	Statement	(	137:12:2603:2603	6646880	2	True				
ANR	6647186	Statement	1UL	137:13:2604:2606	6646880	3	True				
ANR	6647187	Statement	L	137:16:2607:2607	6646880	4	True				
ANR	6647188	Statement	<<	137:18:2609:2610	6646880	5	True				
ANR	6647189	Statement	(	137:21:2612:2612	6646880	6	True				
ANR	6647190	Statement	spapr	137:22:2613:2617	6646880	7	True				
ANR	6647191	Statement	->	137:27:2618:2619	6646880	8	True				
ANR	6647192	Statement	htab_shift	137:29:2620:2629	6646880	9	True				
ANR	6647193	Statement	+	137:40:2631:2631	6646880	10	True				
ANR	6647194	Statement	7	137:42:2633:2633	6646880	11	True				
ANR	6647195	Statement	)	137:43:2634:2634	6646880	12	True				
ANR	6647196	Statement	)	137:44:2635:2635	6646880	13	True				
ANR	6647197	Statement	>=	137:46:2637:2638	6646880	14	True				
ANR	6647198	Statement	ram_size	137:49:2640:2647	6646880	15	True				
ANR	6647199	Statement	)	137:57:2648:2648	6646880	16	True				
ANR	6647200	CompoundStatement		135:59:2594:2594	6646880	17					
ANR	6647201	BreakStatement	break ;	139:12:2665:2670	6646880	0	True				
ANR	6647202	ExpressionStatement	spapr -> htab_shift ++	143:8:2692:2711	6646880	18	True				
ANR	6647203	PostIncDecOperationExpression	spapr -> htab_shift ++		6646880	0					
ANR	6647204	PtrMemberAccess	spapr -> htab_shift		6646880	0					
ANR	6647205	Identifier	spapr		6646880	0					
ANR	6647206	Identifier	htab_shift		6646880	1					
ANR	6647207	IncDec	++		6646880	1					
ANR	6647208	IfStatement	if ( cpu_model == NULL )		6646880	30					
ANR	6647209	Condition	cpu_model == NULL	151:8:2752:2768	6646880	0	True				
ANR	6647210	EqualityExpression	cpu_model == NULL		6646880	0		==			
ANR	6647211	Identifier	cpu_model		6646880	0					
ANR	6647212	Identifier	NULL		6646880	1					
ANR	6647213	CompoundStatement		149:27:2715:2715	6646880	1					
ANR	6647214	ExpressionStatement	"cpu_model = kvm_enabled ( ) ? ""host"" : ""POWER7"""	153:8:2782:2827	6646880	0	True				
ANR	6647215	AssignmentExpression	"cpu_model = kvm_enabled ( ) ? ""host"" : ""POWER7"""		6646880	0		=			
ANR	6647216	Identifier	cpu_model		6646880	0					
ANR	6647217	ConditionalExpression	"kvm_enabled ( ) ? ""host"" : ""POWER7"""		6646880	1					
ANR	6647218	Condition	kvm_enabled ( )		6646880	0					
ANR	6647219	CallExpression	kvm_enabled ( )		6646880	0					
ANR	6647220	Callee	kvm_enabled		6646880	0					
ANR	6647221	Identifier	kvm_enabled		6646880	0					
ANR	6647222	ArgumentList			6646880	1					
ANR	6647223	PrimaryExpression	"""host"""		6646880	1					
ANR	6647224	PrimaryExpression	"""POWER7"""		6646880	2					
ANR	6647225	ForStatement	for ( i = 0 ; i < smp_cpus ; i ++ )		6646880	31					
ANR	6647226	ForInit	i = 0 ;	157:9:2846:2851	6646880	0	True				
ANR	6647227	AssignmentExpression	i = 0		6646880	0		=			
ANR	6647228	Identifier	i		6646880	0					
ANR	6647229	PrimaryExpression	0		6646880	1					
ANR	6647230	Condition	i < smp_cpus	157:16:2853:2864	6646880	1	True				
ANR	6647231	RelationalExpression	i < smp_cpus		6646880	0		<			
ANR	6647232	Identifier	i		6646880	0					
ANR	6647233	Identifier	smp_cpus		6646880	1					
ANR	6647234	PostIncDecOperationExpression	i ++	157:30:2867:2869	6646880	2	True				
ANR	6647235	Identifier	i		6646880	0					
ANR	6647236	IncDec	++		6646880	1					
ANR	6647237	CompoundStatement		155:35:2816:2816	6646880	3					
ANR	6647238	ExpressionStatement	cpu = cpu_ppc_init ( cpu_model )	159:8:2883:2912	6646880	0	True				
ANR	6647239	AssignmentExpression	cpu = cpu_ppc_init ( cpu_model )		6646880	0		=			
ANR	6647240	Identifier	cpu		6646880	0					
ANR	6647241	CallExpression	cpu_ppc_init ( cpu_model )		6646880	1					
ANR	6647242	Callee	cpu_ppc_init		6646880	0					
ANR	6647243	Identifier	cpu_ppc_init		6646880	0					
ANR	6647244	ArgumentList	cpu_model		6646880	1					
ANR	6647245	Argument	cpu_model		6646880	0					
ANR	6647246	Identifier	cpu_model		6646880	0					
ANR	6647247	IfStatement	if ( cpu == NULL )		6646880	1					
ANR	6647248	Condition	cpu == NULL	161:12:2927:2937	6646880	0	True				
ANR	6647249	EqualityExpression	cpu == NULL		6646880	0		==			
ANR	6647250	Identifier	cpu		6646880	0					
ANR	6647251	Identifier	NULL		6646880	1					
ANR	6647252	CompoundStatement		159:25:2884:2884	6646880	1					
ANR	6647253	ExpressionStatement	"fprintf ( stderr , ""Unable to find PowerPC CPU definition\\n"" )"	163:12:2955:3013	6646880	0	True				
ANR	6647254	CallExpression	"fprintf ( stderr , ""Unable to find PowerPC CPU definition\\n"" )"		6646880	0					
ANR	6647255	Callee	fprintf		6646880	0					
ANR	6647256	Identifier	fprintf		6646880	0					
ANR	6647257	ArgumentList	stderr		6646880	1					
ANR	6647258	Argument	stderr		6646880	0					
ANR	6647259	Identifier	stderr		6646880	0					
ANR	6647260	Argument	"""Unable to find PowerPC CPU definition\\n"""		6646880	1					
ANR	6647261	PrimaryExpression	"""Unable to find PowerPC CPU definition\\n"""		6646880	0					
ANR	6647262	ExpressionStatement	exit ( 1 )	165:12:3028:3035	6646880	1	True				
ANR	6647263	CallExpression	exit ( 1 )		6646880	0					
ANR	6647264	Callee	exit		6646880	0					
ANR	6647265	Identifier	exit		6646880	0					
ANR	6647266	ArgumentList	1		6646880	1					
ANR	6647267	Argument	1		6646880	0					
ANR	6647268	PrimaryExpression	1		6646880	0					
ANR	6647269	ExpressionStatement	env = & cpu -> env	169:8:3057:3072	6646880	2	True				
ANR	6647270	AssignmentExpression	env = & cpu -> env		6646880	0		=			
ANR	6647271	Identifier	env		6646880	0					
ANR	6647272	UnaryOperationExpression	& cpu -> env		6646880	1					
ANR	6647273	UnaryOperator	&		6646880	0					
ANR	6647274	PtrMemberAccess	cpu -> env		6646880	1					
ANR	6647275	Identifier	cpu		6646880	0					
ANR	6647276	Identifier	env		6646880	1					
ANR	6647277	ExpressionStatement	"cpu_ppc_tb_init ( env , TIMEBASE_FREQ )"	175:8:3135:3170	6646880	3	True				
ANR	6647278	CallExpression	"cpu_ppc_tb_init ( env , TIMEBASE_FREQ )"		6646880	0					
ANR	6647279	Callee	cpu_ppc_tb_init		6646880	0					
ANR	6647280	Identifier	cpu_ppc_tb_init		6646880	0					
ANR	6647281	ArgumentList	env		6646880	1					
ANR	6647282	Argument	env		6646880	0					
ANR	6647283	Identifier	env		6646880	0					
ANR	6647284	Argument	TIMEBASE_FREQ		6646880	1					
ANR	6647285	Identifier	TIMEBASE_FREQ		6646880	0					
ANR	6647286	ExpressionStatement	env -> hreset_excp_prefix = 0	181:8:3247:3274	6646880	4	True				
ANR	6647287	AssignmentExpression	env -> hreset_excp_prefix = 0		6646880	0		=			
ANR	6647288	PtrMemberAccess	env -> hreset_excp_prefix		6646880	0					
ANR	6647289	Identifier	env		6646880	0					
ANR	6647290	Identifier	hreset_excp_prefix		6646880	1					
ANR	6647291	PrimaryExpression	0		6646880	1					
ANR	6647292	IfStatement	if ( kvm_enabled ( ) )		6646880	5					
ANR	6647293	Condition	kvm_enabled ( )	187:12:3339:3351	6646880	0	True				
ANR	6647294	CallExpression	kvm_enabled ( )		6646880	0					
ANR	6647295	Callee	kvm_enabled		6646880	0					
ANR	6647296	Identifier	kvm_enabled		6646880	0					
ANR	6647297	ArgumentList			6646880	1					
ANR	6647298	CompoundStatement		185:27:3298:3298	6646880	1					
ANR	6647299	ExpressionStatement	kvmppc_set_papr ( cpu )	189:12:3369:3389	6646880	0	True				
ANR	6647300	CallExpression	kvmppc_set_papr ( cpu )		6646880	0					
ANR	6647301	Callee	kvmppc_set_papr		6646880	0					
ANR	6647302	Identifier	kvmppc_set_papr		6646880	0					
ANR	6647303	ArgumentList	cpu		6646880	1					
ANR	6647304	Argument	cpu		6646880	0					
ANR	6647305	Identifier	cpu		6646880	0					
ANR	6647306	ExpressionStatement	"qemu_register_reset ( spapr_cpu_reset , cpu )"	195:8:3413:3454	6646880	6	True				
ANR	6647307	CallExpression	"qemu_register_reset ( spapr_cpu_reset , cpu )"		6646880	0					
ANR	6647308	Callee	qemu_register_reset		6646880	0					
ANR	6647309	Identifier	qemu_register_reset		6646880	0					
ANR	6647310	ArgumentList	spapr_cpu_reset		6646880	1					
ANR	6647311	Argument	spapr_cpu_reset		6646880	0					
ANR	6647312	Identifier	spapr_cpu_reset		6646880	0					
ANR	6647313	Argument	cpu		6646880	1					
ANR	6647314	Identifier	cpu		6646880	0					
ANR	6647315	ExpressionStatement	spapr -> ram_limit = ram_size	203:4:3494:3521	6646880	32	True				
ANR	6647316	AssignmentExpression	spapr -> ram_limit = ram_size		6646880	0		=			
ANR	6647317	PtrMemberAccess	spapr -> ram_limit		6646880	0					
ANR	6647318	Identifier	spapr		6646880	0					
ANR	6647319	Identifier	ram_limit		6646880	1					
ANR	6647320	Identifier	ram_size		6646880	1					
ANR	6647321	IfStatement	if ( spapr -> ram_limit > rma_alloc_size )		6646880	33					
ANR	6647322	Condition	spapr -> ram_limit > rma_alloc_size	205:8:3532:3564	6646880	0	True				
ANR	6647323	RelationalExpression	spapr -> ram_limit > rma_alloc_size		6646880	0		>			
ANR	6647324	PtrMemberAccess	spapr -> ram_limit		6646880	0					
ANR	6647325	Identifier	spapr		6646880	0					
ANR	6647326	Identifier	ram_limit		6646880	1					
ANR	6647327	Identifier	rma_alloc_size		6646880	1					
ANR	6647328	CompoundStatement		207:8:3572:3630	6646880	1					
ANR	6647329	IdentifierDeclStatement	ram_addr_t nonrma_base = rma_alloc_size ;	207:8:3578:3617	6646880	0	True				
ANR	6647330	IdentifierDecl	nonrma_base = rma_alloc_size		6646880	0					
ANR	6647331	IdentifierDeclType	ram_addr_t		6646880	0					
ANR	6647332	Identifier	nonrma_base		6646880	1					
ANR	6647333	AssignmentExpression	nonrma_base = rma_alloc_size		6646880	2		=			
ANR	6647334	Identifier	rma_alloc_size		6646880	0					
ANR	6647335	Identifier	rma_alloc_size		6646880	1					
ANR	6647336	IdentifierDeclStatement	ram_addr_t nonrma_size = spapr -> ram_limit - rma_alloc_size ;	209:8:3628:3686	6646880	1	True				
ANR	6647337	IdentifierDecl	nonrma_size = spapr -> ram_limit - rma_alloc_size		6646880	0					
ANR	6647338	IdentifierDeclType	ram_addr_t		6646880	0					
ANR	6647339	Identifier	nonrma_size		6646880	1					
ANR	6647340	AssignmentExpression	nonrma_size = spapr -> ram_limit - rma_alloc_size		6646880	2		=			
ANR	6647341	Identifier	nonrma_size		6646880	0					
ANR	6647342	AdditiveExpression	spapr -> ram_limit - rma_alloc_size		6646880	1		-			
ANR	6647343	PtrMemberAccess	spapr -> ram_limit		6646880	0					
ANR	6647344	Identifier	spapr		6646880	0					
ANR	6647345	Identifier	ram_limit		6646880	1					
ANR	6647346	Identifier	rma_alloc_size		6646880	1					
ANR	6647347	ExpressionStatement	"memory_region_init_ram ( ram , ""ppc_spapr.ram"" , nonrma_size )"	213:8:3699:3756	6646880	2	True				
ANR	6647348	CallExpression	"memory_region_init_ram ( ram , ""ppc_spapr.ram"" , nonrma_size )"		6646880	0					
ANR	6647349	Callee	memory_region_init_ram		6646880	0					
ANR	6647350	Identifier	memory_region_init_ram		6646880	0					
ANR	6647351	ArgumentList	ram		6646880	1					
ANR	6647352	Argument	ram		6646880	0					
ANR	6647353	Identifier	ram		6646880	0					
ANR	6647354	Argument	"""ppc_spapr.ram"""		6646880	1					
ANR	6647355	PrimaryExpression	"""ppc_spapr.ram"""		6646880	0					
ANR	6647356	Argument	nonrma_size		6646880	2					
ANR	6647357	Identifier	nonrma_size		6646880	0					
ANR	6647358	ExpressionStatement	vmstate_register_ram_global ( ram )	215:8:3767:3799	6646880	3	True				
ANR	6647359	CallExpression	vmstate_register_ram_global ( ram )		6646880	0					
ANR	6647360	Callee	vmstate_register_ram_global		6646880	0					
ANR	6647361	Identifier	vmstate_register_ram_global		6646880	0					
ANR	6647362	ArgumentList	ram		6646880	1					
ANR	6647363	Argument	ram		6646880	0					
ANR	6647364	Identifier	ram		6646880	0					
ANR	6647365	ExpressionStatement	"memory_region_add_subregion ( sysmem , nonrma_base , ram )"	217:8:3810:3863	6646880	4	True				
ANR	6647366	CallExpression	"memory_region_add_subregion ( sysmem , nonrma_base , ram )"		6646880	0					
ANR	6647367	Callee	memory_region_add_subregion		6646880	0					
ANR	6647368	Identifier	memory_region_add_subregion		6646880	0					
ANR	6647369	ArgumentList	sysmem		6646880	1					
ANR	6647370	Argument	sysmem		6646880	0					
ANR	6647371	Identifier	sysmem		6646880	0					
ANR	6647372	Argument	nonrma_base		6646880	1					
ANR	6647373	Identifier	nonrma_base		6646880	0					
ANR	6647374	Argument	ram		6646880	2					
ANR	6647375	Identifier	ram		6646880	0					
ANR	6647376	ExpressionStatement	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , ""spapr-rtas.bin"" )"	223:4:3879:3943	6646880	34	True				
ANR	6647377	AssignmentExpression	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , ""spapr-rtas.bin"" )"		6646880	0		=			
ANR	6647378	Identifier	filename		6646880	0					
ANR	6647379	CallExpression	"qemu_find_file ( QEMU_FILE_TYPE_BIOS , ""spapr-rtas.bin"" )"		6646880	1					
ANR	6647380	Callee	qemu_find_file		6646880	0					
ANR	6647381	Identifier	qemu_find_file		6646880	0					
ANR	6647382	ArgumentList	QEMU_FILE_TYPE_BIOS		6646880	1					
ANR	6647383	Argument	QEMU_FILE_TYPE_BIOS		6646880	0					
ANR	6647384	Identifier	QEMU_FILE_TYPE_BIOS		6646880	0					
ANR	6647385	Argument	"""spapr-rtas.bin"""		6646880	1					
ANR	6647386	PrimaryExpression	"""spapr-rtas.bin"""		6646880	0					
ANR	6647387	ExpressionStatement	"spapr -> rtas_size = load_image_targphys ( filename , spapr -> rtas_addr , rtas_limit - spapr -> rtas_addr )"	225:4:3950:4091	6646880	35	True				
ANR	6647388	AssignmentExpression	"spapr -> rtas_size = load_image_targphys ( filename , spapr -> rtas_addr , rtas_limit - spapr -> rtas_addr )"		6646880	0		=			
ANR	6647389	PtrMemberAccess	spapr -> rtas_size		6646880	0					
ANR	6647390	Identifier	spapr		6646880	0					
ANR	6647391	Identifier	rtas_size		6646880	1					
ANR	6647392	CallExpression	"load_image_targphys ( filename , spapr -> rtas_addr , rtas_limit - spapr -> rtas_addr )"		6646880	1					
ANR	6647393	Callee	load_image_targphys		6646880	0					
ANR	6647394	Identifier	load_image_targphys		6646880	0					
ANR	6647395	ArgumentList	filename		6646880	1					
ANR	6647396	Argument	filename		6646880	0					
ANR	6647397	Identifier	filename		6646880	0					
ANR	6647398	Argument	spapr -> rtas_addr		6646880	1					
ANR	6647399	PtrMemberAccess	spapr -> rtas_addr		6646880	0					
ANR	6647400	Identifier	spapr		6646880	0					
ANR	6647401	Identifier	rtas_addr		6646880	1					
ANR	6647402	Argument	rtas_limit - spapr -> rtas_addr		6646880	2					
ANR	6647403	AdditiveExpression	rtas_limit - spapr -> rtas_addr		6646880	0		-			
ANR	6647404	Identifier	rtas_limit		6646880	0					
ANR	6647405	PtrMemberAccess	spapr -> rtas_addr		6646880	1					
ANR	6647406	Identifier	spapr		6646880	0					
ANR	6647407	Identifier	rtas_addr		6646880	1					
ANR	6647408	IfStatement	if ( spapr -> rtas_size < 0 )		6646880	36					
ANR	6647409	Condition	spapr -> rtas_size < 0	229:8:4102:4121	6646880	0	True				
ANR	6647410	RelationalExpression	spapr -> rtas_size < 0		6646880	0		<			
ANR	6647411	PtrMemberAccess	spapr -> rtas_size		6646880	0					
ANR	6647412	Identifier	spapr		6646880	0					
ANR	6647413	Identifier	rtas_size		6646880	1					
ANR	6647414	PrimaryExpression	0		6646880	1					
ANR	6647415	CompoundStatement		227:30:4068:4068	6646880	1					
ANR	6647416	ExpressionStatement	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"	231:8:4135:4194	6646880	0	True				
ANR	6647417	CallExpression	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"		6646880	0					
ANR	6647418	Callee	hw_error		6646880	0					
ANR	6647419	Identifier	hw_error		6646880	0					
ANR	6647420	ArgumentList	"""qemu: could not load LPAR rtas '%s'\\n"""		6646880	1					
ANR	6647421	Argument	"""qemu: could not load LPAR rtas '%s'\\n"""		6646880	0					
ANR	6647422	PrimaryExpression	"""qemu: could not load LPAR rtas '%s'\\n"""		6646880	0					
ANR	6647423	Argument	filename		6646880	1					
ANR	6647424	Identifier	filename		6646880	0					
ANR	6647425	ExpressionStatement	exit ( 1 )	233:8:4205:4212	6646880	1	True				
ANR	6647426	CallExpression	exit ( 1 )		6646880	0					
ANR	6647427	Callee	exit		6646880	0					
ANR	6647428	Identifier	exit		6646880	0					
ANR	6647429	ArgumentList	1		6646880	1					
ANR	6647430	Argument	1		6646880	0					
ANR	6647431	PrimaryExpression	1		6646880	0					
ANR	6647432	IfStatement	if ( spapr -> rtas_size > RTAS_MAX_SIZE )		6646880	37					
ANR	6647433	Condition	spapr -> rtas_size > RTAS_MAX_SIZE	237:8:4230:4261	6646880	0	True				
ANR	6647434	RelationalExpression	spapr -> rtas_size > RTAS_MAX_SIZE		6646880	0		>			
ANR	6647435	PtrMemberAccess	spapr -> rtas_size		6646880	0					
ANR	6647436	Identifier	spapr		6646880	0					
ANR	6647437	Identifier	rtas_size		6646880	1					
ANR	6647438	Identifier	RTAS_MAX_SIZE		6646880	1					
ANR	6647439	CompoundStatement		235:42:4208:4208	6646880	1					
ANR	6647440	ExpressionStatement	"hw_error ( ""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"" , spapr -> rtas_size , RTAS_MAX_SIZE )"	239:8:4275:4380	6646880	0	True				
ANR	6647441	CallExpression	"hw_error ( ""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"" , spapr -> rtas_size , RTAS_MAX_SIZE )"		6646880	0					
ANR	6647442	Callee	hw_error		6646880	0					
ANR	6647443	Identifier	hw_error		6646880	0					
ANR	6647444	ArgumentList	"""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"""		6646880	1					
ANR	6647445	Argument	"""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"""		6646880	0					
ANR	6647446	PrimaryExpression	"""RTAS too big ! 0x%lx bytes (max is 0x%x)\\n"""		6646880	0					
ANR	6647447	Argument	spapr -> rtas_size		6646880	1					
ANR	6647448	PtrMemberAccess	spapr -> rtas_size		6646880	0					
ANR	6647449	Identifier	spapr		6646880	0					
ANR	6647450	Identifier	rtas_size		6646880	1					
ANR	6647451	Argument	RTAS_MAX_SIZE		6646880	2					
ANR	6647452	Identifier	RTAS_MAX_SIZE		6646880	0					
ANR	6647453	ExpressionStatement	exit ( 1 )	243:8:4391:4398	6646880	1	True				
ANR	6647454	CallExpression	exit ( 1 )		6646880	0					
ANR	6647455	Callee	exit		6646880	0					
ANR	6647456	Identifier	exit		6646880	0					
ANR	6647457	ArgumentList	1		6646880	1					
ANR	6647458	Argument	1		6646880	0					
ANR	6647459	PrimaryExpression	1		6646880	0					
ANR	6647460	ExpressionStatement	g_free ( filename )	247:4:4412:4428	6646880	38	True				
ANR	6647461	CallExpression	g_free ( filename )		6646880	0					
ANR	6647462	Callee	g_free		6646880	0					
ANR	6647463	Identifier	g_free		6646880	0					
ANR	6647464	ArgumentList	filename		6646880	1					
ANR	6647465	Argument	filename		6646880	0					
ANR	6647466	Identifier	filename		6646880	0					
ANR	6647467	ExpressionStatement	spapr -> icp = xics_system_init ( XICS_IRQS )	255:4:4478:4518	6646880	39	True				
ANR	6647468	AssignmentExpression	spapr -> icp = xics_system_init ( XICS_IRQS )		6646880	0		=			
ANR	6647469	PtrMemberAccess	spapr -> icp		6646880	0					
ANR	6647470	Identifier	spapr		6646880	0					
ANR	6647471	Identifier	icp		6646880	1					
ANR	6647472	CallExpression	xics_system_init ( XICS_IRQS )		6646880	1					
ANR	6647473	Callee	xics_system_init		6646880	0					
ANR	6647474	Identifier	xics_system_init		6646880	0					
ANR	6647475	ArgumentList	XICS_IRQS		6646880	1					
ANR	6647476	Argument	XICS_IRQS		6646880	0					
ANR	6647477	Identifier	XICS_IRQS		6646880	0					
ANR	6647478	ExpressionStatement	spapr -> next_irq = XICS_IRQ_BASE	257:4:4525:4556	6646880	40	True				
ANR	6647479	AssignmentExpression	spapr -> next_irq = XICS_IRQ_BASE		6646880	0		=			
ANR	6647480	PtrMemberAccess	spapr -> next_irq		6646880	0					
ANR	6647481	Identifier	spapr		6646880	0					
ANR	6647482	Identifier	next_irq		6646880	1					
ANR	6647483	Identifier	XICS_IRQ_BASE		6646880	1					
ANR	6647484	ExpressionStatement	spapr_events_init ( spapr )	263:4:4610:4634	6646880	41	True				
ANR	6647485	CallExpression	spapr_events_init ( spapr )		6646880	0					
ANR	6647486	Callee	spapr_events_init		6646880	0					
ANR	6647487	Identifier	spapr_events_init		6646880	0					
ANR	6647488	ArgumentList	spapr		6646880	1					
ANR	6647489	Argument	spapr		6646880	0					
ANR	6647490	Identifier	spapr		6646880	0					
ANR	6647491	ExpressionStatement	spapr_iommu_init ( )	269:4:4667:4685	6646880	42	True				
ANR	6647492	CallExpression	spapr_iommu_init ( )		6646880	0					
ANR	6647493	Callee	spapr_iommu_init		6646880	0					
ANR	6647494	Identifier	spapr_iommu_init		6646880	0					
ANR	6647495	ArgumentList			6646880	1					
ANR	6647496	ExpressionStatement	spapr -> vio_bus = spapr_vio_bus_init ( )	275:4:4720:4757	6646880	43	True				
ANR	6647497	AssignmentExpression	spapr -> vio_bus = spapr_vio_bus_init ( )		6646880	0		=			
ANR	6647498	PtrMemberAccess	spapr -> vio_bus		6646880	0					
ANR	6647499	Identifier	spapr		6646880	0					
ANR	6647500	Identifier	vio_bus		6646880	1					
ANR	6647501	CallExpression	spapr_vio_bus_init ( )		6646880	1					
ANR	6647502	Callee	spapr_vio_bus_init		6646880	0					
ANR	6647503	Identifier	spapr_vio_bus_init		6646880	0					
ANR	6647504	ArgumentList			6646880	1					
ANR	6647505	ForStatement	for ( i = 0 ; i < MAX_SERIAL_PORTS ; i ++ )		6646880	44					
ANR	6647506	ForInit	i = 0 ;	279:9:4771:4776	6646880	0	True				
ANR	6647507	AssignmentExpression	i = 0		6646880	0		=			
ANR	6647508	Identifier	i		6646880	0					
ANR	6647509	PrimaryExpression	0		6646880	1					
ANR	6647510	Condition	i < MAX_SERIAL_PORTS	279:16:4778:4797	6646880	1	True				
ANR	6647511	RelationalExpression	i < MAX_SERIAL_PORTS		6646880	0		<			
ANR	6647512	Identifier	i		6646880	0					
ANR	6647513	Identifier	MAX_SERIAL_PORTS		6646880	1					
ANR	6647514	PostIncDecOperationExpression	i ++	279:38:4800:4802	6646880	2	True				
ANR	6647515	Identifier	i		6646880	0					
ANR	6647516	IncDec	++		6646880	1					
ANR	6647517	CompoundStatement		277:43:4749:4749	6646880	3					
ANR	6647518	IfStatement	if ( serial_hds [ i ] )		6646880	0					
ANR	6647519	Condition	serial_hds [ i ]	281:12:4820:4832	6646880	0	True				
ANR	6647520	ArrayIndexing	serial_hds [ i ]		6646880	0					
ANR	6647521	Identifier	serial_hds		6646880	0					
ANR	6647522	Identifier	i		6646880	1					
ANR	6647523	CompoundStatement		279:27:4779:4779	6646880	1					
ANR	6647524	ExpressionStatement	"spapr_vty_create ( spapr -> vio_bus , serial_hds [ i ] )"	283:12:4850:4897	6646880	0	True				
ANR	6647525	CallExpression	"spapr_vty_create ( spapr -> vio_bus , serial_hds [ i ] )"		6646880	0					
ANR	6647526	Callee	spapr_vty_create		6646880	0					
ANR	6647527	Identifier	spapr_vty_create		6646880	0					
ANR	6647528	ArgumentList	spapr -> vio_bus		6646880	1					
ANR	6647529	Argument	spapr -> vio_bus		6646880	0					
ANR	6647530	PtrMemberAccess	spapr -> vio_bus		6646880	0					
ANR	6647531	Identifier	spapr		6646880	0					
ANR	6647532	Identifier	vio_bus		6646880	1					
ANR	6647533	Argument	serial_hds [ i ]		6646880	1					
ANR	6647534	ArrayIndexing	serial_hds [ i ]		6646880	0					
ANR	6647535	Identifier	serial_hds		6646880	0					
ANR	6647536	Identifier	i		6646880	1					
ANR	6647537	ExpressionStatement	spapr_create_nvram ( spapr )	293:4:4983:5008	6646880	45	True				
ANR	6647538	CallExpression	spapr_create_nvram ( spapr )		6646880	0					
ANR	6647539	Callee	spapr_create_nvram		6646880	0					
ANR	6647540	Identifier	spapr_create_nvram		6646880	0					
ANR	6647541	ArgumentList	spapr		6646880	1					
ANR	6647542	Argument	spapr		6646880	0					
ANR	6647543	Identifier	spapr		6646880	0					
ANR	6647544	ExpressionStatement	spapr_pci_rtas_init ( )	299:4:5039:5060	6646880	46	True				
ANR	6647545	CallExpression	spapr_pci_rtas_init ( )		6646880	0					
ANR	6647546	Callee	spapr_pci_rtas_init		6646880	0					
ANR	6647547	Identifier	spapr_pci_rtas_init		6646880	0					
ANR	6647548	ArgumentList			6646880	1					
ANR	6647549	ExpressionStatement	"spapr_create_phb ( spapr , ""pci"" , SPAPR_PCI_BUID , SPAPR_PCI_MEM_WIN_ADDR , SPAPR_PCI_MEM_WIN_SIZE , SPAPR_PCI_IO_WIN_ADDR , SPAPR_PCI_MSI_WIN_ADDR )"	303:4:5069:5298	6646880	47	True				
ANR	6647550	CallExpression	"spapr_create_phb ( spapr , ""pci"" , SPAPR_PCI_BUID , SPAPR_PCI_MEM_WIN_ADDR , SPAPR_PCI_MEM_WIN_SIZE , SPAPR_PCI_IO_WIN_ADDR , SPAPR_PCI_MSI_WIN_ADDR )"		6646880	0					
ANR	6647551	Callee	spapr_create_phb		6646880	0					
ANR	6647552	Identifier	spapr_create_phb		6646880	0					
ANR	6647553	ArgumentList	spapr		6646880	1					
ANR	6647554	Argument	spapr		6646880	0					
ANR	6647555	Identifier	spapr		6646880	0					
ANR	6647556	Argument	"""pci"""		6646880	1					
ANR	6647557	PrimaryExpression	"""pci"""		6646880	0					
ANR	6647558	Argument	SPAPR_PCI_BUID		6646880	2					
ANR	6647559	Identifier	SPAPR_PCI_BUID		6646880	0					
ANR	6647560	Argument	SPAPR_PCI_MEM_WIN_ADDR		6646880	3					
ANR	6647561	Identifier	SPAPR_PCI_MEM_WIN_ADDR		6646880	0					
ANR	6647562	Argument	SPAPR_PCI_MEM_WIN_SIZE		6646880	4					
ANR	6647563	Identifier	SPAPR_PCI_MEM_WIN_SIZE		6646880	0					
ANR	6647564	Argument	SPAPR_PCI_IO_WIN_ADDR		6646880	5					
ANR	6647565	Identifier	SPAPR_PCI_IO_WIN_ADDR		6646880	0					
ANR	6647566	Argument	SPAPR_PCI_MSI_WIN_ADDR		6646880	6					
ANR	6647567	Identifier	SPAPR_PCI_MSI_WIN_ADDR		6646880	0					
ANR	6647568	ExpressionStatement	phb = PCI_HOST_BRIDGE ( QLIST_FIRST ( & spapr -> phbs ) )	313:4:5305:5353	6646880	48	True				
ANR	6647569	AssignmentExpression	phb = PCI_HOST_BRIDGE ( QLIST_FIRST ( & spapr -> phbs ) )		6646880	0		=			
ANR	6647570	Identifier	phb		6646880	0					
ANR	6647571	CallExpression	PCI_HOST_BRIDGE ( QLIST_FIRST ( & spapr -> phbs ) )		6646880	1					
ANR	6647572	Callee	PCI_HOST_BRIDGE		6646880	0					
ANR	6647573	Identifier	PCI_HOST_BRIDGE		6646880	0					
ANR	6647574	ArgumentList	QLIST_FIRST ( & spapr -> phbs )		6646880	1					
ANR	6647575	Argument	QLIST_FIRST ( & spapr -> phbs )		6646880	0					
ANR	6647576	CallExpression	QLIST_FIRST ( & spapr -> phbs )		6646880	0					
ANR	6647577	Callee	QLIST_FIRST		6646880	0					
ANR	6647578	Identifier	QLIST_FIRST		6646880	0					
ANR	6647579	ArgumentList	& spapr -> phbs		6646880	1					
ANR	6647580	Argument	& spapr -> phbs		6646880	0					
ANR	6647581	UnaryOperationExpression	& spapr -> phbs		6646880	0					
ANR	6647582	UnaryOperator	&		6646880	0					
ANR	6647583	PtrMemberAccess	spapr -> phbs		6646880	1					
ANR	6647584	Identifier	spapr		6646880	0					
ANR	6647585	Identifier	phbs		6646880	1					
ANR	6647586	ForStatement	for ( i = 0 ; i < nb_nics ; i ++ )		6646880	49					
ANR	6647587	ForInit	i = 0 ;	317:9:5367:5372	6646880	0	True				
ANR	6647588	AssignmentExpression	i = 0		6646880	0		=			
ANR	6647589	Identifier	i		6646880	0					
ANR	6647590	PrimaryExpression	0		6646880	1					
ANR	6647591	Condition	i < nb_nics	317:16:5374:5384	6646880	1	True				
ANR	6647592	RelationalExpression	i < nb_nics		6646880	0		<			
ANR	6647593	Identifier	i		6646880	0					
ANR	6647594	Identifier	nb_nics		6646880	1					
ANR	6647595	PostIncDecOperationExpression	i ++	317:29:5387:5389	6646880	2	True				
ANR	6647596	Identifier	i		6646880	0					
ANR	6647597	IncDec	++		6646880	1					
ANR	6647598	CompoundStatement		317:8:5347:5373	6646880	3					
ANR	6647599	IdentifierDeclStatement	NICInfo * nd = & nd_table [ i ] ;	319:8:5403:5429	6646880	0	True				
ANR	6647600	IdentifierDecl	* nd = & nd_table [ i ]		6646880	0					
ANR	6647601	IdentifierDeclType	NICInfo *		6646880	0					
ANR	6647602	Identifier	nd		6646880	1					
ANR	6647603	AssignmentExpression	* nd = & nd_table [ i ]		6646880	2		=			
ANR	6647604	Identifier	nd		6646880	0					
ANR	6647605	UnaryOperationExpression	& nd_table [ i ]		6646880	1					
ANR	6647606	UnaryOperator	&		6646880	0					
ANR	6647607	ArrayIndexing	nd_table [ i ]		6646880	1					
ANR	6647608	Identifier	nd_table		6646880	0					
ANR	6647609	Identifier	i		6646880	1					
ANR	6647610	IfStatement	if ( ! nd -> model )		6646880	1					
ANR	6647611	Condition	! nd -> model	323:12:5446:5455	6646880	0	True				
ANR	6647612	UnaryOperationExpression	! nd -> model		6646880	0					
ANR	6647613	UnaryOperator	!		6646880	0					
ANR	6647614	PtrMemberAccess	nd -> model		6646880	1					
ANR	6647615	Identifier	nd		6646880	0					
ANR	6647616	Identifier	model		6646880	1					
ANR	6647617	CompoundStatement		321:24:5402:5402	6646880	1					
ANR	6647618	ExpressionStatement	"nd -> model = g_strdup ( ""ibmveth"" )"	325:12:5473:5504	6646880	0	True				
ANR	6647619	AssignmentExpression	"nd -> model = g_strdup ( ""ibmveth"" )"		6646880	0		=			
ANR	6647620	PtrMemberAccess	nd -> model		6646880	0					
ANR	6647621	Identifier	nd		6646880	0					
ANR	6647622	Identifier	model		6646880	1					
ANR	6647623	CallExpression	"g_strdup ( ""ibmveth"" )"		6646880	1					
ANR	6647624	Callee	g_strdup		6646880	0					
ANR	6647625	Identifier	g_strdup		6646880	0					
ANR	6647626	ArgumentList	"""ibmveth"""		6646880	1					
ANR	6647627	Argument	"""ibmveth"""		6646880	0					
ANR	6647628	PrimaryExpression	"""ibmveth"""		6646880	0					
ANR	6647629	IfStatement	"if ( strcmp ( nd -> model , ""ibmveth"" ) == 0 )"		6646880	2					
ANR	6647630	Condition	"strcmp ( nd -> model , ""ibmveth"" ) == 0"	331:12:5532:5564	6646880	0	True				
ANR	6647631	EqualityExpression	"strcmp ( nd -> model , ""ibmveth"" ) == 0"		6646880	0		==			
ANR	6647632	CallExpression	"strcmp ( nd -> model , ""ibmveth"" )"		6646880	0					
ANR	6647633	Callee	strcmp		6646880	0					
ANR	6647634	Identifier	strcmp		6646880	0					
ANR	6647635	ArgumentList	nd -> model		6646880	1					
ANR	6647636	Argument	nd -> model		6646880	0					
ANR	6647637	PtrMemberAccess	nd -> model		6646880	0					
ANR	6647638	Identifier	nd		6646880	0					
ANR	6647639	Identifier	model		6646880	1					
ANR	6647640	Argument	"""ibmveth"""		6646880	1					
ANR	6647641	PrimaryExpression	"""ibmveth"""		6646880	0					
ANR	6647642	PrimaryExpression	0		6646880	1					
ANR	6647643	CompoundStatement		329:47:5511:5511	6646880	1					
ANR	6647644	ExpressionStatement	"spapr_vlan_create ( spapr -> vio_bus , nd )"	333:12:5582:5619	6646880	0	True				
ANR	6647645	CallExpression	"spapr_vlan_create ( spapr -> vio_bus , nd )"		6646880	0					
ANR	6647646	Callee	spapr_vlan_create		6646880	0					
ANR	6647647	Identifier	spapr_vlan_create		6646880	0					
ANR	6647648	ArgumentList	spapr -> vio_bus		6646880	1					
ANR	6647649	Argument	spapr -> vio_bus		6646880	0					
ANR	6647650	PtrMemberAccess	spapr -> vio_bus		6646880	0					
ANR	6647651	Identifier	spapr		6646880	0					
ANR	6647652	Identifier	vio_bus		6646880	1					
ANR	6647653	Argument	nd		6646880	1					
ANR	6647654	Identifier	nd		6646880	0					
ANR	6647655	ElseStatement	else		6646880	0					
ANR	6647656	CompoundStatement		333:15:5581:5581	6646880	0					
ANR	6647657	ExpressionStatement	"pci_nic_init_nofail ( & nd_table [ i ] , nd -> model , NULL )"	337:12:5652:5702	6646880	0	True				
ANR	6647658	CallExpression	"pci_nic_init_nofail ( & nd_table [ i ] , nd -> model , NULL )"		6646880	0					
ANR	6647659	Callee	pci_nic_init_nofail		6646880	0					
ANR	6647660	Identifier	pci_nic_init_nofail		6646880	0					
ANR	6647661	ArgumentList	& nd_table [ i ]		6646880	1					
ANR	6647662	Argument	& nd_table [ i ]		6646880	0					
ANR	6647663	UnaryOperationExpression	& nd_table [ i ]		6646880	0					
ANR	6647664	UnaryOperator	&		6646880	0					
ANR	6647665	ArrayIndexing	nd_table [ i ]		6646880	1					
ANR	6647666	Identifier	nd_table		6646880	0					
ANR	6647667	Identifier	i		6646880	1					
ANR	6647668	Argument	nd -> model		6646880	1					
ANR	6647669	PtrMemberAccess	nd -> model		6646880	0					
ANR	6647670	Identifier	nd		6646880	0					
ANR	6647671	Identifier	model		6646880	1					
ANR	6647672	Argument	NULL		6646880	2					
ANR	6647673	Identifier	NULL		6646880	0					
ANR	6647674	ForStatement	for ( i = 0 ; i <= drive_get_max_bus ( IF_SCSI ) ; i ++ )		6646880	50					
ANR	6647675	ForInit	i = 0 ;	345:9:5734:5739	6646880	0	True				
ANR	6647676	AssignmentExpression	i = 0		6646880	0		=			
ANR	6647677	Identifier	i		6646880	0					
ANR	6647678	PrimaryExpression	0		6646880	1					
ANR	6647679	Condition	i <= drive_get_max_bus ( IF_SCSI )	345:16:5741:5771	6646880	1	True				
ANR	6647680	RelationalExpression	i <= drive_get_max_bus ( IF_SCSI )		6646880	0		<=			
ANR	6647681	Identifier	i		6646880	0					
ANR	6647682	CallExpression	drive_get_max_bus ( IF_SCSI )		6646880	1					
ANR	6647683	Callee	drive_get_max_bus		6646880	0					
ANR	6647684	Identifier	drive_get_max_bus		6646880	0					
ANR	6647685	ArgumentList	IF_SCSI		6646880	1					
ANR	6647686	Argument	IF_SCSI		6646880	0					
ANR	6647687	Identifier	IF_SCSI		6646880	0					
ANR	6647688	PostIncDecOperationExpression	i ++	345:49:5774:5776	6646880	2	True				
ANR	6647689	Identifier	i		6646880	0					
ANR	6647690	IncDec	++		6646880	1					
ANR	6647691	CompoundStatement		343:54:5723:5723	6646880	3					
ANR	6647692	ExpressionStatement	spapr_vscsi_create ( spapr -> vio_bus )	347:8:5790:5824	6646880	0	True				
ANR	6647693	CallExpression	spapr_vscsi_create ( spapr -> vio_bus )		6646880	0					
ANR	6647694	Callee	spapr_vscsi_create		6646880	0					
ANR	6647695	Identifier	spapr_vscsi_create		6646880	0					
ANR	6647696	ArgumentList	spapr -> vio_bus		6646880	1					
ANR	6647697	Argument	spapr -> vio_bus		6646880	0					
ANR	6647698	PtrMemberAccess	spapr -> vio_bus		6646880	0					
ANR	6647699	Identifier	spapr		6646880	0					
ANR	6647700	Identifier	vio_bus		6646880	1					
ANR	6647701	IfStatement	if ( spapr_vga_init ( phb -> bus ) )		6646880	51					
ANR	6647702	Condition	spapr_vga_init ( phb -> bus )	355:8:5864:5887	6646880	0	True				
ANR	6647703	CallExpression	spapr_vga_init ( phb -> bus )		6646880	0					
ANR	6647704	Callee	spapr_vga_init		6646880	0					
ANR	6647705	Identifier	spapr_vga_init		6646880	0					
ANR	6647706	ArgumentList	phb -> bus		6646880	1					
ANR	6647707	Argument	phb -> bus		6646880	0					
ANR	6647708	PtrMemberAccess	phb -> bus		6646880	0					
ANR	6647709	Identifier	phb		6646880	0					
ANR	6647710	Identifier	bus		6646880	1					
ANR	6647711	CompoundStatement		353:34:5834:5834	6646880	1					
ANR	6647712	ExpressionStatement	spapr -> has_graphics = true	357:8:5901:5927	6646880	0	True				
ANR	6647713	AssignmentExpression	spapr -> has_graphics = true		6646880	0		=			
ANR	6647714	PtrMemberAccess	spapr -> has_graphics		6646880	0					
ANR	6647715	Identifier	spapr		6646880	0					
ANR	6647716	Identifier	has_graphics		6646880	1					
ANR	6647717	Identifier	true		6646880	1					
ANR	6647718	IfStatement	if ( usb_enabled ( spapr -> has_graphics ) )		6646880	52					
ANR	6647719	Condition	usb_enabled ( spapr -> has_graphics )	363:8:5947:5978	6646880	0	True				
ANR	6647720	CallExpression	usb_enabled ( spapr -> has_graphics )		6646880	0					
ANR	6647721	Callee	usb_enabled		6646880	0					
ANR	6647722	Identifier	usb_enabled		6646880	0					
ANR	6647723	ArgumentList	spapr -> has_graphics		6646880	1					
ANR	6647724	Argument	spapr -> has_graphics		6646880	0					
ANR	6647725	PtrMemberAccess	spapr -> has_graphics		6646880	0					
ANR	6647726	Identifier	spapr		6646880	0					
ANR	6647727	Identifier	has_graphics		6646880	1					
ANR	6647728	CompoundStatement		361:42:5925:5925	6646880	1					
ANR	6647729	ExpressionStatement	"pci_create_simple ( phb -> bus , - 1 , ""pci-ohci"" )"	365:8:5992:6035	6646880	0	True				
ANR	6647730	CallExpression	"pci_create_simple ( phb -> bus , - 1 , ""pci-ohci"" )"		6646880	0					
ANR	6647731	Callee	pci_create_simple		6646880	0					
ANR	6647732	Identifier	pci_create_simple		6646880	0					
ANR	6647733	ArgumentList	phb -> bus		6646880	1					
ANR	6647734	Argument	phb -> bus		6646880	0					
ANR	6647735	PtrMemberAccess	phb -> bus		6646880	0					
ANR	6647736	Identifier	phb		6646880	0					
ANR	6647737	Identifier	bus		6646880	1					
ANR	6647738	Argument	- 1		6646880	1					
ANR	6647739	UnaryOperationExpression	- 1		6646880	0					
ANR	6647740	UnaryOperator	-		6646880	0					
ANR	6647741	PrimaryExpression	1		6646880	1					
ANR	6647742	Argument	"""pci-ohci"""		6646880	2					
ANR	6647743	PrimaryExpression	"""pci-ohci"""		6646880	0					
ANR	6647744	IfStatement	if ( spapr -> has_graphics )		6646880	1					
ANR	6647745	Condition	spapr -> has_graphics	367:12:6050:6068	6646880	0	True				
ANR	6647746	PtrMemberAccess	spapr -> has_graphics		6646880	0					
ANR	6647747	Identifier	spapr		6646880	0					
ANR	6647748	Identifier	has_graphics		6646880	1					
ANR	6647749	CompoundStatement		365:33:6015:6015	6646880	1					
ANR	6647750	ExpressionStatement	"usbdevice_create ( ""keyboard"" )"	369:12:6086:6114	6646880	0	True				
ANR	6647751	CallExpression	"usbdevice_create ( ""keyboard"" )"		6646880	0					
ANR	6647752	Callee	usbdevice_create		6646880	0					
ANR	6647753	Identifier	usbdevice_create		6646880	0					
ANR	6647754	ArgumentList	"""keyboard"""		6646880	1					
ANR	6647755	Argument	"""keyboard"""		6646880	0					
ANR	6647756	PrimaryExpression	"""keyboard"""		6646880	0					
ANR	6647757	ExpressionStatement	"usbdevice_create ( ""mouse"" )"	371:12:6129:6154	6646880	1	True				
ANR	6647758	CallExpression	"usbdevice_create ( ""mouse"" )"		6646880	0					
ANR	6647759	Callee	usbdevice_create		6646880	0					
ANR	6647760	Identifier	usbdevice_create		6646880	0					
ANR	6647761	ArgumentList	"""mouse"""		6646880	1					
ANR	6647762	Argument	"""mouse"""		6646880	0					
ANR	6647763	PrimaryExpression	"""mouse"""		6646880	0					
ANR	6647764	IfStatement	if ( spapr -> rma_size < ( MIN_RMA_SLOF << 20 ) )		6646880	53					
ANR	6647765	Condition	spapr -> rma_size < ( MIN_RMA_SLOF << 20 )	379:8:6185:6222	6646880	0	True				
ANR	6647766	RelationalExpression	spapr -> rma_size < ( MIN_RMA_SLOF << 20 )		6646880	0		<			
ANR	6647767	PtrMemberAccess	spapr -> rma_size		6646880	0					
ANR	6647768	Identifier	spapr		6646880	0					
ANR	6647769	Identifier	rma_size		6646880	1					
ANR	6647770	ShiftExpression	MIN_RMA_SLOF << 20		6646880	1		<<			
ANR	6647771	Identifier	MIN_RMA_SLOF		6646880	0					
ANR	6647772	PrimaryExpression	20		6646880	1					
ANR	6647773	CompoundStatement		377:48:6169:6169	6646880	1					
ANR	6647774	Statement	fprintf	381:8:6236:6242	6646880	0	True				
ANR	6647775	Statement	(	381:15:6243:6243	6646880	1	True				
ANR	6647776	Statement	stderr	381:16:6244:6249	6646880	2	True				
ANR	6647777	Statement	","	381:22:6250:6250	6646880	3	True				
ANR	6647778	Statement	"""qemu: pSeries SLOF firmware requires >= """	381:24:6252:6293	6646880	4	True				
ANR	6647779	Statement	"""%ldM guest RMA (Real Mode Area memory)\\n"""	383:16:6312:6353	6646880	5	True				
ANR	6647780	Statement	","	383:58:6354:6354	6646880	6	True				
ANR	6647781	Statement	MIN_RMA_SLOF	383:60:6356:6367	6646880	7	True				
ANR	6647782	Statement	)	383:72:6368:6368	6646880	8	True				
ANR	6647783	ExpressionStatement		383:73:6369:6369	6646880	9	True				
ANR	6647784	ExpressionStatement	exit ( 1 )	385:8:6380:6387	6646880	10	True				
ANR	6647785	CallExpression	exit ( 1 )		6646880	0					
ANR	6647786	Callee	exit		6646880	0					
ANR	6647787	Identifier	exit		6646880	0					
ANR	6647788	ArgumentList	1		6646880	1					
ANR	6647789	Argument	1		6646880	0					
ANR	6647790	PrimaryExpression	1		6646880	0					
ANR	6647791	IfStatement	if ( kernel_filename )		6646880	54					
ANR	6647792	Condition	kernel_filename	391:8:6407:6421	6646880	0	True				
ANR	6647793	Identifier	kernel_filename		6646880	0					
ANR	6647794	CompoundStatement		391:8:6379:6399	6646880	1					
ANR	6647795	IdentifierDeclStatement	uint64_t lowaddr = 0 ;	393:8:6435:6455	6646880	0	True				
ANR	6647796	IdentifierDecl	lowaddr = 0		6646880	0					
ANR	6647797	IdentifierDeclType	uint64_t		6646880	0					
ANR	6647798	Identifier	lowaddr		6646880	1					
ANR	6647799	AssignmentExpression	lowaddr = 0		6646880	2		=			
ANR	6647800	Identifier	lowaddr		6646880	0					
ANR	6647801	PrimaryExpression	0		6646880	1					
ANR	6647802	ExpressionStatement	"kernel_size = load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 1 , ELF_MACHINE , 0 )"	397:8:6468:6612	6646880	1	True				
ANR	6647803	AssignmentExpression	"kernel_size = load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 1 , ELF_MACHINE , 0 )"		6646880	0		=			
ANR	6647804	Identifier	kernel_size		6646880	0					
ANR	6647805	CallExpression	"load_elf ( kernel_filename , translate_kernel_address , NULL , NULL , & lowaddr , NULL , 1 , ELF_MACHINE , 0 )"		6646880	1					
ANR	6647806	Callee	load_elf		6646880	0					
ANR	6647807	Identifier	load_elf		6646880	0					
ANR	6647808	ArgumentList	kernel_filename		6646880	1					
ANR	6647809	Argument	kernel_filename		6646880	0					
ANR	6647810	Identifier	kernel_filename		6646880	0					
ANR	6647811	Argument	translate_kernel_address		6646880	1					
ANR	6647812	Identifier	translate_kernel_address		6646880	0					
ANR	6647813	Argument	NULL		6646880	2					
ANR	6647814	Identifier	NULL		6646880	0					
ANR	6647815	Argument	NULL		6646880	3					
ANR	6647816	Identifier	NULL		6646880	0					
ANR	6647817	Argument	& lowaddr		6646880	4					
ANR	6647818	UnaryOperationExpression	& lowaddr		6646880	0					
ANR	6647819	UnaryOperator	&		6646880	0					
ANR	6647820	Identifier	lowaddr		6646880	1					
ANR	6647821	Argument	NULL		6646880	5					
ANR	6647822	Identifier	NULL		6646880	0					
ANR	6647823	Argument	1		6646880	6					
ANR	6647824	PrimaryExpression	1		6646880	0					
ANR	6647825	Argument	ELF_MACHINE		6646880	7					
ANR	6647826	Identifier	ELF_MACHINE		6646880	0					
ANR	6647827	Argument	0		6646880	8					
ANR	6647828	PrimaryExpression	0		6646880	0					
ANR	6647829	IfStatement	if ( kernel_size < 0 )		6646880	2					
ANR	6647830	Condition	kernel_size < 0	401:12:6627:6641	6646880	0	True				
ANR	6647831	RelationalExpression	kernel_size < 0		6646880	0		<			
ANR	6647832	Identifier	kernel_size		6646880	0					
ANR	6647833	PrimaryExpression	0		6646880	1					
ANR	6647834	CompoundStatement		399:29:6588:6588	6646880	1					
ANR	6647835	ExpressionStatement	"kernel_size = load_image_targphys ( kernel_filename , KERNEL_LOAD_ADDR , load_limit - KERNEL_LOAD_ADDR )"	403:12:6659:6852	6646880	0	True				
ANR	6647836	AssignmentExpression	"kernel_size = load_image_targphys ( kernel_filename , KERNEL_LOAD_ADDR , load_limit - KERNEL_LOAD_ADDR )"		6646880	0		=			
ANR	6647837	Identifier	kernel_size		6646880	0					
ANR	6647838	CallExpression	"load_image_targphys ( kernel_filename , KERNEL_LOAD_ADDR , load_limit - KERNEL_LOAD_ADDR )"		6646880	1					
ANR	6647839	Callee	load_image_targphys		6646880	0					
ANR	6647840	Identifier	load_image_targphys		6646880	0					
ANR	6647841	ArgumentList	kernel_filename		6646880	1					
ANR	6647842	Argument	kernel_filename		6646880	0					
ANR	6647843	Identifier	kernel_filename		6646880	0					
ANR	6647844	Argument	KERNEL_LOAD_ADDR		6646880	1					
ANR	6647845	Identifier	KERNEL_LOAD_ADDR		6646880	0					
ANR	6647846	Argument	load_limit - KERNEL_LOAD_ADDR		6646880	2					
ANR	6647847	AdditiveExpression	load_limit - KERNEL_LOAD_ADDR		6646880	0		-			
ANR	6647848	Identifier	load_limit		6646880	0					
ANR	6647849	Identifier	KERNEL_LOAD_ADDR		6646880	1					
ANR	6647850	IfStatement	if ( kernel_size < 0 )		6646880	3					
ANR	6647851	Condition	kernel_size < 0	411:12:6878:6892	6646880	0	True				
ANR	6647852	RelationalExpression	kernel_size < 0		6646880	0		<			
ANR	6647853	Identifier	kernel_size		6646880	0					
ANR	6647854	PrimaryExpression	0		6646880	1					
ANR	6647855	CompoundStatement		409:29:6839:6839	6646880	1					
ANR	6647856	ExpressionStatement	"fprintf ( stderr , ""qemu: could not load kernel '%s'\\n"" , kernel_filename )"	413:12:6910:7001	6646880	0	True				
ANR	6647857	CallExpression	"fprintf ( stderr , ""qemu: could not load kernel '%s'\\n"" , kernel_filename )"		6646880	0					
ANR	6647858	Callee	fprintf		6646880	0					
ANR	6647859	Identifier	fprintf		6646880	0					
ANR	6647860	ArgumentList	stderr		6646880	1					
ANR	6647861	Argument	stderr		6646880	0					
ANR	6647862	Identifier	stderr		6646880	0					
ANR	6647863	Argument	"""qemu: could not load kernel '%s'\\n"""		6646880	1					
ANR	6647864	PrimaryExpression	"""qemu: could not load kernel '%s'\\n"""		6646880	0					
ANR	6647865	Argument	kernel_filename		6646880	2					
ANR	6647866	Identifier	kernel_filename		6646880	0					
ANR	6647867	ExpressionStatement	exit ( 1 )	417:12:7016:7023	6646880	1	True				
ANR	6647868	CallExpression	exit ( 1 )		6646880	0					
ANR	6647869	Callee	exit		6646880	0					
ANR	6647870	Identifier	exit		6646880	0					
ANR	6647871	ArgumentList	1		6646880	1					
ANR	6647872	Argument	1		6646880	0					
ANR	6647873	PrimaryExpression	1		6646880	0					
ANR	6647874	IfStatement	if ( initrd_filename )		6646880	4					
ANR	6647875	Condition	initrd_filename	425:12:7078:7092	6646880	0	True				
ANR	6647876	Identifier	initrd_filename		6646880	0					
ANR	6647877	CompoundStatement		423:29:7039:7039	6646880	1					
ANR	6647878	ExpressionStatement	initrd_base = ( KERNEL_LOAD_ADDR + kernel_size + 0x1ffff ) & ~0xffff	433:12:7264:7330	6646880	0	True				
ANR	6647879	AssignmentExpression	initrd_base = ( KERNEL_LOAD_ADDR + kernel_size + 0x1ffff ) & ~0xffff		6646880	0		=			
ANR	6647880	Identifier	initrd_base		6646880	0					
ANR	6647881	BitAndExpression	( KERNEL_LOAD_ADDR + kernel_size + 0x1ffff ) & ~0xffff		6646880	1		&			
ANR	6647882	AdditiveExpression	KERNEL_LOAD_ADDR + kernel_size + 0x1ffff		6646880	0		+			
ANR	6647883	Identifier	KERNEL_LOAD_ADDR		6646880	0					
ANR	6647884	AdditiveExpression	kernel_size + 0x1ffff		6646880	1		+			
ANR	6647885	Identifier	kernel_size		6646880	0					
ANR	6647886	PrimaryExpression	0x1ffff		6646880	1					
ANR	6647887	Identifier	~0xffff		6646880	1					
ANR	6647888	ExpressionStatement	"initrd_size = load_image_targphys ( initrd_filename , initrd_base , load_limit - initrd_base )"	435:12:7345:7481	6646880	1	True				
ANR	6647889	AssignmentExpression	"initrd_size = load_image_targphys ( initrd_filename , initrd_base , load_limit - initrd_base )"		6646880	0		=			
ANR	6647890	Identifier	initrd_size		6646880	0					
ANR	6647891	CallExpression	"load_image_targphys ( initrd_filename , initrd_base , load_limit - initrd_base )"		6646880	1					
ANR	6647892	Callee	load_image_targphys		6646880	0					
ANR	6647893	Identifier	load_image_targphys		6646880	0					
ANR	6647894	ArgumentList	initrd_filename		6646880	1					
ANR	6647895	Argument	initrd_filename		6646880	0					
ANR	6647896	Identifier	initrd_filename		6646880	0					
ANR	6647897	Argument	initrd_base		6646880	1					
ANR	6647898	Identifier	initrd_base		6646880	0					
ANR	6647899	Argument	load_limit - initrd_base		6646880	2					
ANR	6647900	AdditiveExpression	load_limit - initrd_base		6646880	0		-			
ANR	6647901	Identifier	load_limit		6646880	0					
ANR	6647902	Identifier	initrd_base		6646880	1					
ANR	6647903	IfStatement	if ( initrd_size < 0 )		6646880	2					
ANR	6647904	Condition	initrd_size < 0	439:16:7500:7514	6646880	0	True				
ANR	6647905	RelationalExpression	initrd_size < 0		6646880	0		<			
ANR	6647906	Identifier	initrd_size		6646880	0					
ANR	6647907	PrimaryExpression	0		6646880	1					
ANR	6647908	CompoundStatement		437:33:7461:7461	6646880	1					
ANR	6647909	ExpressionStatement	"fprintf ( stderr , ""qemu: could not load initial ram disk '%s'\\n"" , initrd_filename )"	441:16:7536:7641	6646880	0	True				
ANR	6647910	CallExpression	"fprintf ( stderr , ""qemu: could not load initial ram disk '%s'\\n"" , initrd_filename )"		6646880	0					
ANR	6647911	Callee	fprintf		6646880	0					
ANR	6647912	Identifier	fprintf		6646880	0					
ANR	6647913	ArgumentList	stderr		6646880	1					
ANR	6647914	Argument	stderr		6646880	0					
ANR	6647915	Identifier	stderr		6646880	0					
ANR	6647916	Argument	"""qemu: could not load initial ram disk '%s'\\n"""		6646880	1					
ANR	6647917	PrimaryExpression	"""qemu: could not load initial ram disk '%s'\\n"""		6646880	0					
ANR	6647918	Argument	initrd_filename		6646880	2					
ANR	6647919	Identifier	initrd_filename		6646880	0					
ANR	6647920	ExpressionStatement	exit ( 1 )	445:16:7660:7667	6646880	1	True				
ANR	6647921	CallExpression	exit ( 1 )		6646880	0					
ANR	6647922	Callee	exit		6646880	0					
ANR	6647923	Identifier	exit		6646880	0					
ANR	6647924	ArgumentList	1		6646880	1					
ANR	6647925	Argument	1		6646880	0					
ANR	6647926	PrimaryExpression	1		6646880	0					
ANR	6647927	ElseStatement	else		6646880	0					
ANR	6647928	CompoundStatement		447:15:7644:7644	6646880	0					
ANR	6647929	ExpressionStatement	initrd_base = 0	451:12:7715:7730	6646880	0	True				
ANR	6647930	AssignmentExpression	initrd_base = 0		6646880	0		=			
ANR	6647931	Identifier	initrd_base		6646880	0					
ANR	6647932	PrimaryExpression	0		6646880	1					
ANR	6647933	ExpressionStatement	initrd_size = 0	453:12:7745:7760	6646880	1	True				
ANR	6647934	AssignmentExpression	initrd_size = 0		6646880	0		=			
ANR	6647935	Identifier	initrd_size		6646880	0					
ANR	6647936	PrimaryExpression	0		6646880	1					
ANR	6647937	ExpressionStatement	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , FW_FILE_NAME )"	461:4:7787:7847	6646880	55	True				
ANR	6647938	AssignmentExpression	"filename = qemu_find_file ( QEMU_FILE_TYPE_BIOS , FW_FILE_NAME )"		6646880	0		=			
ANR	6647939	Identifier	filename		6646880	0					
ANR	6647940	CallExpression	"qemu_find_file ( QEMU_FILE_TYPE_BIOS , FW_FILE_NAME )"		6646880	1					
ANR	6647941	Callee	qemu_find_file		6646880	0					
ANR	6647942	Identifier	qemu_find_file		6646880	0					
ANR	6647943	ArgumentList	QEMU_FILE_TYPE_BIOS		6646880	1					
ANR	6647944	Argument	QEMU_FILE_TYPE_BIOS		6646880	0					
ANR	6647945	Identifier	QEMU_FILE_TYPE_BIOS		6646880	0					
ANR	6647946	Argument	FW_FILE_NAME		6646880	1					
ANR	6647947	Identifier	FW_FILE_NAME		6646880	0					
ANR	6647948	ExpressionStatement	"fw_size = load_image_targphys ( filename , 0 , FW_MAX_SIZE )"	463:4:7854:7909	6646880	56	True				
ANR	6647949	AssignmentExpression	"fw_size = load_image_targphys ( filename , 0 , FW_MAX_SIZE )"		6646880	0		=			
ANR	6647950	Identifier	fw_size		6646880	0					
ANR	6647951	CallExpression	"load_image_targphys ( filename , 0 , FW_MAX_SIZE )"		6646880	1					
ANR	6647952	Callee	load_image_targphys		6646880	0					
ANR	6647953	Identifier	load_image_targphys		6646880	0					
ANR	6647954	ArgumentList	filename		6646880	1					
ANR	6647955	Argument	filename		6646880	0					
ANR	6647956	Identifier	filename		6646880	0					
ANR	6647957	Argument	0		6646880	1					
ANR	6647958	PrimaryExpression	0		6646880	0					
ANR	6647959	Argument	FW_MAX_SIZE		6646880	2					
ANR	6647960	Identifier	FW_MAX_SIZE		6646880	0					
ANR	6647961	IfStatement	if ( fw_size < 0 )		6646880	57					
ANR	6647962	Condition	fw_size < 0	465:8:7920:7930	6646880	0	True				
ANR	6647963	RelationalExpression	fw_size < 0		6646880	0		<			
ANR	6647964	Identifier	fw_size		6646880	0					
ANR	6647965	PrimaryExpression	0		6646880	1					
ANR	6647966	CompoundStatement		463:21:7877:7877	6646880	1					
ANR	6647967	ExpressionStatement	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"	467:8:7944:8003	6646880	0	True				
ANR	6647968	CallExpression	"hw_error ( ""qemu: could not load LPAR rtas '%s'\\n"" , filename )"		6646880	0					
ANR	6647969	Callee	hw_error		6646880	0					
ANR	6647970	Identifier	hw_error		6646880	0					
ANR	6647971	ArgumentList	"""qemu: could not load LPAR rtas '%s'\\n"""		6646880	1					
ANR	6647972	Argument	"""qemu: could not load LPAR rtas '%s'\\n"""		6646880	0					
ANR	6647973	PrimaryExpression	"""qemu: could not load LPAR rtas '%s'\\n"""		6646880	0					
ANR	6647974	Argument	filename		6646880	1					
ANR	6647975	Identifier	filename		6646880	0					
ANR	6647976	ExpressionStatement	exit ( 1 )	469:8:8014:8021	6646880	1	True				
ANR	6647977	CallExpression	exit ( 1 )		6646880	0					
ANR	6647978	Callee	exit		6646880	0					
ANR	6647979	Identifier	exit		6646880	0					
ANR	6647980	ArgumentList	1		6646880	1					
ANR	6647981	Argument	1		6646880	0					
ANR	6647982	PrimaryExpression	1		6646880	0					
ANR	6647983	ExpressionStatement	g_free ( filename )	473:4:8035:8051	6646880	58	True				
ANR	6647984	CallExpression	g_free ( filename )		6646880	0					
ANR	6647985	Callee	g_free		6646880	0					
ANR	6647986	Identifier	g_free		6646880	0					
ANR	6647987	ArgumentList	filename		6646880	1					
ANR	6647988	Argument	filename		6646880	0					
ANR	6647989	Identifier	filename		6646880	0					
ANR	6647990	ExpressionStatement	spapr -> entry_point = 0x100	477:4:8060:8086	6646880	59	True				
ANR	6647991	AssignmentExpression	spapr -> entry_point = 0x100		6646880	0		=			
ANR	6647992	PtrMemberAccess	spapr -> entry_point		6646880	0					
ANR	6647993	Identifier	spapr		6646880	0					
ANR	6647994	Identifier	entry_point		6646880	1					
ANR	6647995	PrimaryExpression	0x100		6646880	1					
ANR	6647996	ExpressionStatement	"spapr -> fdt_skel = spapr_create_fdt_skel ( cpu_model , initrd_base , initrd_size , kernel_size , boot_device , kernel_cmdline , spapr -> epow_irq )"	483:4:8130:8445	6646880	60	True				
ANR	6647997	AssignmentExpression	"spapr -> fdt_skel = spapr_create_fdt_skel ( cpu_model , initrd_base , initrd_size , kernel_size , boot_device , kernel_cmdline , spapr -> epow_irq )"		6646880	0		=			
ANR	6647998	PtrMemberAccess	spapr -> fdt_skel		6646880	0					
ANR	6647999	Identifier	spapr		6646880	0					
ANR	6648000	Identifier	fdt_skel		6646880	1					
ANR	6648001	CallExpression	"spapr_create_fdt_skel ( cpu_model , initrd_base , initrd_size , kernel_size , boot_device , kernel_cmdline , spapr -> epow_irq )"		6646880	1					
ANR	6648002	Callee	spapr_create_fdt_skel		6646880	0					
ANR	6648003	Identifier	spapr_create_fdt_skel		6646880	0					
ANR	6648004	ArgumentList	cpu_model		6646880	1					
ANR	6648005	Argument	cpu_model		6646880	0					
ANR	6648006	Identifier	cpu_model		6646880	0					
ANR	6648007	Argument	initrd_base		6646880	1					
ANR	6648008	Identifier	initrd_base		6646880	0					
ANR	6648009	Argument	initrd_size		6646880	2					
ANR	6648010	Identifier	initrd_size		6646880	0					
ANR	6648011	Argument	kernel_size		6646880	3					
ANR	6648012	Identifier	kernel_size		6646880	0					
ANR	6648013	Argument	boot_device		6646880	4					
ANR	6648014	Identifier	boot_device		6646880	0					
ANR	6648015	Argument	kernel_cmdline		6646880	5					
ANR	6648016	Identifier	kernel_cmdline		6646880	0					
ANR	6648017	Argument	spapr -> epow_irq		6646880	6					
ANR	6648018	PtrMemberAccess	spapr -> epow_irq		6646880	0					
ANR	6648019	Identifier	spapr		6646880	0					
ANR	6648020	Identifier	epow_irq		6646880	1					
ANR	6648021	ExpressionStatement	assert ( spapr -> fdt_skel != NULL )	493:4:8452:8483	6646880	61	True				
ANR	6648022	CallExpression	assert ( spapr -> fdt_skel != NULL )		6646880	0					
ANR	6648023	Callee	assert		6646880	0					
ANR	6648024	Identifier	assert		6646880	0					
ANR	6648025	ArgumentList	spapr -> fdt_skel != NULL		6646880	1					
ANR	6648026	Argument	spapr -> fdt_skel != NULL		6646880	0					
ANR	6648027	EqualityExpression	spapr -> fdt_skel != NULL		6646880	0		!=			
ANR	6648028	PtrMemberAccess	spapr -> fdt_skel		6646880	0					
ANR	6648029	Identifier	spapr		6646880	0					
ANR	6648030	Identifier	fdt_skel		6646880	1					
ANR	6648031	Identifier	NULL		6646880	1					
ANR	6648032	ReturnType	static void		6646880	1					
ANR	6648033	Identifier	ppc_spapr_init		6646880	2					
ANR	6648034	ParameterList	QEMUMachineInitArgs * args		6646880	3					
ANR	6648035	Parameter	QEMUMachineInitArgs * args	1:27:27:51	6646880	0	True				
ANR	6648036	ParameterType	QEMUMachineInitArgs *		6646880	0					
ANR	6648037	Identifier	args		6646880	1					
ANR	6648038	CFGEntryNode	ENTRY		6646880		True				
ANR	6648039	CFGExitNode	EXIT		6646880		True				
ANR	6648040	Symbol	lowaddr		6646880						
ANR	6648041	Symbol	rtas_limit		6646880						
ANR	6648042	Symbol	spapr -> epow_irq		6646880						
ANR	6648043	Symbol	load_limit		6646880						
ANR	6648044	Symbol	drive_get_max_bus		6646880						
ANR	6648045	Symbol	cpu_ppc_hypercall		6646880						
ANR	6648046	Symbol	g_new		6646880						
ANR	6648047	Symbol	* phb		6646880						
ANR	6648048	Symbol	ram		6646880						
ANR	6648049	Symbol	kvmppc_alloc_rma		6646880						
ANR	6648050	Symbol	spapr_create_fdt_skel		6646880						
ANR	6648051	Symbol	SPAPR_PCI_MEM_WIN_SIZE		6646880						
ANR	6648052	Symbol	MemoryRegion		6646880						
ANR	6648053	Symbol	phb -> bus		6646880						
ANR	6648054	Symbol	spapr		6646880						
ANR	6648055	Symbol	nonrma_size		6646880						
ANR	6648056	Symbol	SPAPR_PCI_MEM_WIN_ADDR		6646880						
ANR	6648057	Symbol	TIMEBASE_FREQ		6646880						
ANR	6648058	Symbol	filename		6646880						
ANR	6648059	Symbol	MIN		6646880						
ANR	6648060	Symbol	RTAS_MAX_SIZE		6646880						
ANR	6648061	Symbol	args -> boot_device		6646880						
ANR	6648062	Symbol	spapr -> vrma_adjust		6646880						
ANR	6648063	Symbol	spapr -> htab_shift		6646880						
ANR	6648064	Symbol	spapr -> fdt_addr		6646880						
ANR	6648065	Symbol	spapr_cpu_reset		6646880						
ANR	6648066	Symbol	spapr -> fdt_skel		6646880						
ANR	6648067	Symbol	spapr_vga_init		6646880						
ANR	6648068	Symbol	FW_MAX_SIZE		6646880						
ANR	6648069	Symbol	cpu_model		6646880						
ANR	6648070	Symbol	load_image_targphys		6646880						
ANR	6648071	Symbol	kvm_enabled		6646880						
ANR	6648072	Symbol	nd_table		6646880						
ANR	6648073	Symbol	PCI_HOST_BRIDGE		6646880						
ANR	6648074	Symbol	get_system_memory		6646880						
ANR	6648075	Symbol	xics_system_init		6646880						
ANR	6648076	Symbol	i		6646880						
ANR	6648077	Symbol	FDT_MAX_SIZE		6646880						
ANR	6648078	Symbol	phb		6646880						
ANR	6648079	Symbol	args -> cpu_model		6646880						
ANR	6648080	Symbol	FW_FILE_NAME		6646880						
ANR	6648081	Symbol	ram_size		6646880						
ANR	6648082	Symbol	cpu_ppc_init		6646880						
ANR	6648083	Symbol	emulate_spapr_hypercall		6646880						
ANR	6648084	Symbol	nonrma_base		6646880						
ANR	6648085	Symbol	FW_OVERHEAD		6646880						
ANR	6648086	Symbol	kernel_filename		6646880						
ANR	6648087	Symbol	serial_hds		6646880						
ANR	6648088	Symbol	spapr -> next_irq		6646880						
ANR	6648089	Symbol	* nd		6646880						
ANR	6648090	Symbol	nb_nics		6646880						
ANR	6648091	Symbol	spapr -> has_graphics		6646880						
ANR	6648092	Symbol	rma_alloc_size		6646880						
ANR	6648093	Symbol	msi_supported		6646880						
ANR	6648094	Symbol	spapr -> rma_size		6646880						
ANR	6648095	Symbol	args -> ram_size		6646880						
ANR	6648096	Symbol	nd -> model		6646880						
ANR	6648097	Symbol	spapr -> rtas_size		6646880						
ANR	6648098	Symbol	MIN_RMA_SLOF		6646880						
ANR	6648099	Symbol	* args		6646880						
ANR	6648100	Symbol	XICS_IRQ_BASE		6646880						
ANR	6648101	Symbol	spapr -> icp		6646880						
ANR	6648102	Symbol	SPAPR_PCI_IO_WIN_ADDR		6646880						
ANR	6648103	Symbol	fw_size		6646880						
ANR	6648104	Symbol	QLIST_FIRST		6646880						
ANR	6648105	Symbol	XICS_IRQS		6646880						
ANR	6648106	Symbol	spapr -> rtas_addr		6646880						
ANR	6648107	Symbol	args -> initrd_filename		6646880						
ANR	6648108	Symbol	kernel_size		6646880						
ANR	6648109	Symbol	strcmp		6646880						
ANR	6648110	Symbol	smp_cpus		6646880						
ANR	6648111	Symbol	NULL		6646880						
ANR	6648112	Symbol	initrd_base		6646880						
ANR	6648113	Symbol	* env		6646880						
ANR	6648114	Symbol	cpu		6646880						
ANR	6648115	Symbol	QEMU_FILE_TYPE_BIOS		6646880						
ANR	6648116	Symbol	spapr_vio_bus_init		6646880						
ANR	6648117	Symbol	KERNEL_LOAD_ADDR		6646880						
ANR	6648118	Symbol	stderr		6646880						
ANR	6648119	Symbol	nd		6646880						
ANR	6648120	Symbol	boot_device		6646880						
ANR	6648121	Symbol	true		6646880						
ANR	6648122	Symbol	g_malloc0		6646880						
ANR	6648123	Symbol	load_elf		6646880						
ANR	6648124	Symbol	translate_kernel_address		6646880						
ANR	6648125	Symbol	~0xffff		6646880						
ANR	6648126	Symbol	kernel_cmdline		6646880						
ANR	6648127	Symbol	args -> kernel_cmdline		6646880						
ANR	6648128	Symbol	spapr -> entry_point		6646880						
ANR	6648129	Symbol	initrd_filename		6646880						
ANR	6648130	Symbol	initrd_size		6646880						
ANR	6648131	Symbol	SPAPR_PCI_BUID		6646880						
ANR	6648132	Symbol	usb_enabled		6646880						
ANR	6648133	Symbol	ELF_MACHINE		6646880						
ANR	6648134	Symbol	g_strdup		6646880						
ANR	6648135	Symbol	& lowaddr		6646880						
ANR	6648136	Symbol	* spapr		6646880						
ANR	6648137	Symbol	SPAPR_PCI_MSI_WIN_ADDR		6646880						
ANR	6648138	Symbol	qemu_find_file		6646880						
ANR	6648139	Symbol	spapr -> vio_bus		6646880						
ANR	6648140	Symbol	MAX_SERIAL_PORTS		6646880						
ANR	6648141	Symbol	args -> kernel_filename		6646880						
ANR	6648142	Symbol	& spapr -> phbs		6646880						
ANR	6648143	Symbol	env		6646880						
ANR	6648144	Symbol	args		6646880						
ANR	6648145	Symbol	& cpu -> env		6646880						
ANR	6648146	Symbol	* serial_hds		6646880						
ANR	6648147	Symbol	env -> hreset_excp_prefix		6646880						
ANR	6648148	Symbol	* i		6646880						
ANR	6648149	Symbol	IF_SCSI		6646880						
ANR	6648150	Symbol	sysmem		6646880						
ANR	6648151	Symbol	spapr -> ram_limit		6646880						
