command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8166577	File	/home/p4ultr4n/workplace/ReVeal/raw_code/tag_tree_decode_1.c								
ANR	8166578	Function	tag_tree_decode	1:0:0:830							
ANR	8166579	FunctionDef	"tag_tree_decode (Jpeg2000DecoderContext * s , Jpeg2000TgtNode * node , int threshold)"		8166578	0					
ANR	8166580	CompoundStatement		3:0:119:830	8166578	0					
ANR	8166581	IdentifierDeclStatement	Jpeg2000TgtNode * stack [ 30 ] ;	4:4:125:151	8166578	0	True				
ANR	8166582	IdentifierDecl	* stack [ 30 ]		8166578	0					
ANR	8166583	IdentifierDeclType	Jpeg2000TgtNode * [ 30 ]		8166578	0					
ANR	8166584	Identifier	stack		8166578	1					
ANR	8166585	PrimaryExpression	30		8166578	2					
ANR	8166586	IdentifierDeclStatement	"int sp = - 1 , curval = 0 ;"	5:4:157:180	8166578	1	True				
ANR	8166587	IdentifierDecl	sp = - 1		8166578	0					
ANR	8166588	IdentifierDeclType	int		8166578	0					
ANR	8166589	Identifier	sp		8166578	1					
ANR	8166590	AssignmentExpression	sp = - 1		8166578	2		=			
ANR	8166591	Identifier	sp		8166578	0					
ANR	8166592	UnaryOperationExpression	- 1		8166578	1					
ANR	8166593	UnaryOperator	-		8166578	0					
ANR	8166594	PrimaryExpression	1		8166578	1					
ANR	8166595	IdentifierDecl	curval = 0		8166578	1					
ANR	8166596	IdentifierDeclType	int		8166578	0					
ANR	8166597	Identifier	curval		8166578	1					
ANR	8166598	AssignmentExpression	curval = 0		8166578	2		=			
ANR	8166599	Identifier	curval		8166578	0					
ANR	8166600	PrimaryExpression	0		8166578	1					
ANR	8166601	WhileStatement	while ( node && ! node -> vis )		8166578	2					
ANR	8166602	Condition	node && ! node -> vis	6:11:193:210	8166578	0	True				
ANR	8166603	AndExpression	node && ! node -> vis		8166578	0		&&			
ANR	8166604	Identifier	node		8166578	0					
ANR	8166605	UnaryOperationExpression	! node -> vis		8166578	1					
ANR	8166606	UnaryOperator	!		8166578	0					
ANR	8166607	PtrMemberAccess	node -> vis		8166578	1					
ANR	8166608	Identifier	node		8166578	0					
ANR	8166609	Identifier	vis		8166578	1					
ANR	8166610	CompoundStatement		4:31:93:93	8166578	1					
ANR	8166611	ExpressionStatement	stack [ ++ sp ] = node	7:8:223:241	8166578	0	True				
ANR	8166612	AssignmentExpression	stack [ ++ sp ] = node		8166578	0		=			
ANR	8166613	ArrayIndexing	stack [ ++ sp ]		8166578	0					
ANR	8166614	Identifier	stack		8166578	0					
ANR	8166615	UnaryExpression	++ sp		8166578	1					
ANR	8166616	IncDec	++		8166578	0					
ANR	8166617	Identifier	sp		8166578	1					
ANR	8166618	Identifier	node		8166578	1					
ANR	8166619	ExpressionStatement	node = node -> parent	8:8:251:277	8166578	1	True				
ANR	8166620	AssignmentExpression	node = node -> parent		8166578	0		=			
ANR	8166621	Identifier	node		8166578	0					
ANR	8166622	PtrMemberAccess	node -> parent		8166578	1					
ANR	8166623	Identifier	node		8166578	0					
ANR	8166624	Identifier	parent		8166578	1					
ANR	8166625	IfStatement	if ( node )		8166578	3					
ANR	8166626	Condition	node	10:8:293:296	8166578	0	True				
ANR	8166627	Identifier	node		8166578	0					
ANR	8166628	ExpressionStatement	curval = node -> val	11:8:307:325	8166578	1	True				
ANR	8166629	AssignmentExpression	curval = node -> val		8166578	0		=			
ANR	8166630	Identifier	curval		8166578	0					
ANR	8166631	PtrMemberAccess	node -> val		8166578	1					
ANR	8166632	Identifier	node		8166578	0					
ANR	8166633	Identifier	val		8166578	1					
ANR	8166634	ElseStatement	else		8166578	0					
ANR	8166635	ExpressionStatement	curval = stack [ sp ] -> val	13:8:344:367	8166578	0	True				
ANR	8166636	AssignmentExpression	curval = stack [ sp ] -> val		8166578	0		=			
ANR	8166637	Identifier	curval		8166578	0					
ANR	8166638	PtrMemberAccess	stack [ sp ] -> val		8166578	1					
ANR	8166639	ArrayIndexing	stack [ sp ]		8166578	0					
ANR	8166640	Identifier	stack		8166578	0					
ANR	8166641	Identifier	sp		8166578	1					
ANR	8166642	Identifier	val		8166578	1					
ANR	8166643	WhileStatement	while ( curval < threshold && sp >= 0 )		8166578	4					
ANR	8166644	Condition	curval < threshold && sp >= 0	14:11:380:408	8166578	0	True				
ANR	8166645	AndExpression	curval < threshold && sp >= 0		8166578	0		&&			
ANR	8166646	RelationalExpression	curval < threshold		8166578	0		<			
ANR	8166647	Identifier	curval		8166578	0					
ANR	8166648	Identifier	threshold		8166578	1					
ANR	8166649	RelationalExpression	sp >= 0		8166578	1		>=			
ANR	8166650	Identifier	sp		8166578	0					
ANR	8166651	PrimaryExpression	0		8166578	1					
ANR	8166652	CompoundStatement		12:42:291:291	8166578	1					
ANR	8166653	IfStatement	if ( curval < stack [ sp ] -> val )		8166578	0					
ANR	8166654	Condition	curval < stack [ sp ] -> val	15:12:425:447	8166578	0	True				
ANR	8166655	RelationalExpression	curval < stack [ sp ] -> val		8166578	0		<			
ANR	8166656	Identifier	curval		8166578	0					
ANR	8166657	PtrMemberAccess	stack [ sp ] -> val		8166578	1					
ANR	8166658	ArrayIndexing	stack [ sp ]		8166578	0					
ANR	8166659	Identifier	stack		8166578	0					
ANR	8166660	Identifier	sp		8166578	1					
ANR	8166661	Identifier	val		8166578	1					
ANR	8166662	ExpressionStatement	curval = stack [ sp ] -> val	16:12:462:485	8166578	1	True				
ANR	8166663	AssignmentExpression	curval = stack [ sp ] -> val		8166578	0		=			
ANR	8166664	Identifier	curval		8166578	0					
ANR	8166665	PtrMemberAccess	stack [ sp ] -> val		8166578	1					
ANR	8166666	ArrayIndexing	stack [ sp ]		8166578	0					
ANR	8166667	Identifier	stack		8166578	0					
ANR	8166668	Identifier	sp		8166578	1					
ANR	8166669	Identifier	val		8166578	1					
ANR	8166670	WhileStatement	while ( curval < threshold )		8166578	1					
ANR	8166671	Condition	curval < threshold	17:15:502:519	8166578	0	True				
ANR	8166672	RelationalExpression	curval < threshold		8166578	0		<			
ANR	8166673	Identifier	curval		8166578	0					
ANR	8166674	Identifier	threshold		8166578	1					
ANR	8166675	CompoundStatement		16:12:416:423	8166578	1					
ANR	8166676	IdentifierDeclStatement	int ret ;	18:12:536:543	8166578	0	True				
ANR	8166677	IdentifierDecl	ret		8166578	0					
ANR	8166678	IdentifierDeclType	int		8166578	0					
ANR	8166679	Identifier	ret		8166578	1					
ANR	8166680	IfStatement	"if ( ( ret = get_bits ( s , 1 ) ) > 0 )"		8166578	1					
ANR	8166681	Condition	"( ret = get_bits ( s , 1 ) ) > 0"	19:16:561:586	8166578	0	True				
ANR	8166682	RelationalExpression	"( ret = get_bits ( s , 1 ) ) > 0"		8166578	0		>			
ANR	8166683	AssignmentExpression	"ret = get_bits ( s , 1 )"		8166578	0		=			
ANR	8166684	Identifier	ret		8166578	0					
ANR	8166685	CallExpression	"get_bits ( s , 1 )"		8166578	1					
ANR	8166686	Callee	get_bits		8166578	0					
ANR	8166687	Identifier	get_bits		8166578	0					
ANR	8166688	ArgumentList	s		8166578	1					
ANR	8166689	Argument	s		8166578	0					
ANR	8166690	Identifier	s		8166578	0					
ANR	8166691	Argument	1		8166578	1					
ANR	8166692	PrimaryExpression	1		8166578	0					
ANR	8166693	PrimaryExpression	0		8166578	1					
ANR	8166694	CompoundStatement		17:44:469:469	8166578	1					
ANR	8166695	ExpressionStatement	stack [ sp ] -> vis ++	20:16:607:623	8166578	0	True				
ANR	8166696	PostIncDecOperationExpression	stack [ sp ] -> vis ++		8166578	0					
ANR	8166697	PtrMemberAccess	stack [ sp ] -> vis		8166578	0					
ANR	8166698	ArrayIndexing	stack [ sp ]		8166578	0					
ANR	8166699	Identifier	stack		8166578	0					
ANR	8166700	Identifier	sp		8166578	1					
ANR	8166701	Identifier	vis		8166578	1					
ANR	8166702	IncDec	++		8166578	1					
ANR	8166703	BreakStatement	break ;	21:16:641:646	8166578	1	True				
ANR	8166704	ElseStatement	else		8166578	0					
ANR	8166705	IfStatement	if ( ! ret )		8166578	0					
ANR	8166706	Condition	! ret	22:23:671:674	8166578	0	True				
ANR	8166707	UnaryOperationExpression	! ret		8166578	0					
ANR	8166708	UnaryOperator	!		8166578	0					
ANR	8166709	Identifier	ret		8166578	1					
ANR	8166710	ExpressionStatement	curval ++	23:16:693:701	8166578	1	True				
ANR	8166711	PostIncDecOperationExpression	curval ++		8166578	0					
ANR	8166712	Identifier	curval		8166578	0					
ANR	8166713	IncDec	++		8166578	1					
ANR	8166714	ElseStatement	else		8166578	0					
ANR	8166715	ReturnStatement	return ret ;	25:16:736:746	8166578	0	True				
ANR	8166716	Identifier	ret		8166578	0					
ANR	8166717	ExpressionStatement	stack [ sp ] -> val = curval	27:8:766:789	8166578	2	True				
ANR	8166718	AssignmentExpression	stack [ sp ] -> val = curval		8166578	0		=			
ANR	8166719	PtrMemberAccess	stack [ sp ] -> val		8166578	0					
ANR	8166720	ArrayIndexing	stack [ sp ]		8166578	0					
ANR	8166721	Identifier	stack		8166578	0					
ANR	8166722	Identifier	sp		8166578	1					
ANR	8166723	Identifier	val		8166578	1					
ANR	8166724	Identifier	curval		8166578	1					
ANR	8166725	ExpressionStatement	sp --	28:8:799:803	8166578	3	True				
ANR	8166726	PostIncDecOperationExpression	sp --		8166578	0					
ANR	8166727	Identifier	sp		8166578	0					
ANR	8166728	IncDec	--		8166578	1					
ANR	8166729	ReturnStatement	return curval ;	30:4:815:828	8166578	5	True				
ANR	8166730	Identifier	curval		8166578	0					
ANR	8166731	ReturnType	static int		8166578	1					
ANR	8166732	Identifier	tag_tree_decode		8166578	2					
ANR	8166733	ParameterList	"Jpeg2000DecoderContext * s , Jpeg2000TgtNode * node , int threshold"		8166578	3					
ANR	8166734	Parameter	Jpeg2000DecoderContext * s	1:27:27:51	8166578	0	True				
ANR	8166735	ParameterType	Jpeg2000DecoderContext *		8166578	0					
ANR	8166736	Identifier	s		8166578	1					
ANR	8166737	Parameter	Jpeg2000TgtNode * node	1:54:54:74	8166578	1	True				
ANR	8166738	ParameterType	Jpeg2000TgtNode *		8166578	0					
ANR	8166739	Identifier	node		8166578	1					
ANR	8166740	Parameter	int threshold	2:27:104:116	8166578	2	True				
ANR	8166741	ParameterType	int		8166578	0					
ANR	8166742	Identifier	threshold		8166578	1					
ANR	8166743	CFGEntryNode	ENTRY		8166578		True				
ANR	8166744	CFGExitNode	EXIT		8166578		True				
ANR	8166745	Symbol	* sp		8166578						
ANR	8166746	Symbol	ret		8166578						
ANR	8166747	Symbol	stack		8166578						
ANR	8166748	Symbol	get_bits		8166578						
ANR	8166749	Symbol	threshold		8166578						
ANR	8166750	Symbol	node -> val		8166578						
ANR	8166751	Symbol	* * sp		8166578						
ANR	8166752	Symbol	node		8166578						
ANR	8166753	Symbol	s		8166578						
ANR	8166754	Symbol	node -> vis		8166578						
ANR	8166755	Symbol	curval		8166578						
ANR	8166756	Symbol	node -> parent		8166578						
ANR	8166757	Symbol	* * stack		8166578						
ANR	8166758	Symbol	* stack		8166578						
ANR	8166759	Symbol	* node		8166578						
ANR	8166760	Symbol	sp		8166578						
ANR	8166761	Symbol	stack [ sp ] -> val		8166578						
ANR	8166762	Symbol	stack [ sp ] -> vis		8166578						
