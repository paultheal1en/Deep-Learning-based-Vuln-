command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	556715	File	/home/p4ultr4n/workplace/ReVeal/raw_code/ape_decode_frame_0.c								
ANR	556716	Function	ape_decode_frame	1:0:0:3223							
ANR	556717	FunctionDef	"ape_decode_frame (AVCodecContext * avctx , void * data , int * data_size , AVPacket * avpkt)"		556716	0					
ANR	556718	CompoundStatement		7:0:155:3223	556716	0					
ANR	556719	IdentifierDeclStatement	const uint8_t * buf = avpkt -> data ;	9:4:162:194	556716	0	True				
ANR	556720	IdentifierDecl	* buf = avpkt -> data		556716	0					
ANR	556721	IdentifierDeclType	const uint8_t *		556716	0					
ANR	556722	Identifier	buf		556716	1					
ANR	556723	AssignmentExpression	* buf = avpkt -> data		556716	2		=			
ANR	556724	Identifier	buf		556716	0					
ANR	556725	PtrMemberAccess	avpkt -> data		556716	1					
ANR	556726	Identifier	avpkt		556716	0					
ANR	556727	Identifier	data		556716	1					
ANR	556728	IdentifierDeclStatement	int buf_size = avpkt -> size ;	11:4:201:227	556716	1	True				
ANR	556729	IdentifierDecl	buf_size = avpkt -> size		556716	0					
ANR	556730	IdentifierDeclType	int		556716	0					
ANR	556731	Identifier	buf_size		556716	1					
ANR	556732	AssignmentExpression	buf_size = avpkt -> size		556716	2		=			
ANR	556733	Identifier	buf_size		556716	0					
ANR	556734	PtrMemberAccess	avpkt -> size		556716	1					
ANR	556735	Identifier	avpkt		556716	0					
ANR	556736	Identifier	size		556716	1					
ANR	556737	IdentifierDeclStatement	APEContext * s = avctx -> priv_data ;	13:4:234:266	556716	2	True				
ANR	556738	IdentifierDecl	* s = avctx -> priv_data		556716	0					
ANR	556739	IdentifierDeclType	APEContext *		556716	0					
ANR	556740	Identifier	s		556716	1					
ANR	556741	AssignmentExpression	* s = avctx -> priv_data		556716	2		=			
ANR	556742	Identifier	s		556716	0					
ANR	556743	PtrMemberAccess	avctx -> priv_data		556716	1					
ANR	556744	Identifier	avctx		556716	0					
ANR	556745	Identifier	priv_data		556716	1					
ANR	556746	IdentifierDeclStatement	int16_t * samples = data ;	15:4:273:296	556716	3	True				
ANR	556747	IdentifierDecl	* samples = data		556716	0					
ANR	556748	IdentifierDeclType	int16_t *		556716	0					
ANR	556749	Identifier	samples		556716	1					
ANR	556750	AssignmentExpression	* samples = data		556716	2		=			
ANR	556751	Identifier	data		556716	0					
ANR	556752	Identifier	data		556716	1					
ANR	556753	IdentifierDeclStatement	uint32_t nblocks ;	17:4:303:319	556716	4	True				
ANR	556754	IdentifierDecl	nblocks		556716	0					
ANR	556755	IdentifierDeclType	uint32_t		556716	0					
ANR	556756	Identifier	nblocks		556716	1					
ANR	556757	IdentifierDeclStatement	int i ;	19:4:326:331	556716	5	True				
ANR	556758	IdentifierDecl	i		556716	0					
ANR	556759	IdentifierDeclType	int		556716	0					
ANR	556760	Identifier	i		556716	1					
ANR	556761	IdentifierDeclStatement	int blockstodecode ;	21:4:338:356	556716	6	True				
ANR	556762	IdentifierDecl	blockstodecode		556716	0					
ANR	556763	IdentifierDeclType	int		556716	0					
ANR	556764	Identifier	blockstodecode		556716	1					
ANR	556765	IdentifierDeclStatement	int bytes_used ;	23:4:363:377	556716	7	True				
ANR	556766	IdentifierDecl	bytes_used		556716	0					
ANR	556767	IdentifierDeclType	int		556716	0					
ANR	556768	Identifier	bytes_used		556716	1					
ANR	556769	IfStatement	if ( BLOCKS_PER_LOOP * 2 * avctx -> channels > * data_size )		556716	8					
ANR	556770	Condition	BLOCKS_PER_LOOP * 2 * avctx -> channels > * data_size	29:8:433:482	556716	0	True				
ANR	556771	RelationalExpression	BLOCKS_PER_LOOP * 2 * avctx -> channels > * data_size		556716	0		>			
ANR	556772	MultiplicativeExpression	BLOCKS_PER_LOOP * 2 * avctx -> channels		556716	0		*			
ANR	556773	Identifier	BLOCKS_PER_LOOP		556716	0					
ANR	556774	MultiplicativeExpression	2 * avctx -> channels		556716	1		*			
ANR	556775	PrimaryExpression	2		556716	0					
ANR	556776	PtrMemberAccess	avctx -> channels		556716	1					
ANR	556777	Identifier	avctx		556716	0					
ANR	556778	Identifier	channels		556716	1					
ANR	556779	UnaryOperationExpression	* data_size		556716	1					
ANR	556780	UnaryOperator	*		556716	0					
ANR	556781	Identifier	data_size		556716	1					
ANR	556782	CompoundStatement		23:60:329:329	556716	1					
ANR	556783	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Output buffer is too small.\\n"" )"	31:8:496:557	556716	0	True				
ANR	556784	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Output buffer is too small.\\n"" )"		556716	0					
ANR	556785	Callee	av_log		556716	0					
ANR	556786	Identifier	av_log		556716	0					
ANR	556787	ArgumentList	avctx		556716	1					
ANR	556788	Argument	avctx		556716	0					
ANR	556789	Identifier	avctx		556716	0					
ANR	556790	Argument	AV_LOG_ERROR		556716	1					
ANR	556791	Identifier	AV_LOG_ERROR		556716	0					
ANR	556792	Argument	"""Output buffer is too small.\\n"""		556716	2					
ANR	556793	PrimaryExpression	"""Output buffer is too small.\\n"""		556716	0					
ANR	556794	ReturnStatement	return AVERROR ( EINVAL ) ;	33:8:568:590	556716	1	True				
ANR	556795	CallExpression	AVERROR ( EINVAL )		556716	0					
ANR	556796	Callee	AVERROR		556716	0					
ANR	556797	Identifier	AVERROR		556716	0					
ANR	556798	ArgumentList	EINVAL		556716	1					
ANR	556799	Argument	EINVAL		556716	0					
ANR	556800	Identifier	EINVAL		556716	0					
ANR	556801	ExpressionStatement	av_assert0 ( s -> samples >= 0 )	43:4:724:751	556716	9	True				
ANR	556802	CallExpression	av_assert0 ( s -> samples >= 0 )		556716	0					
ANR	556803	Callee	av_assert0		556716	0					
ANR	556804	Identifier	av_assert0		556716	0					
ANR	556805	ArgumentList	s -> samples >= 0		556716	1					
ANR	556806	Argument	s -> samples >= 0		556716	0					
ANR	556807	RelationalExpression	s -> samples >= 0		556716	0		>=			
ANR	556808	PtrMemberAccess	s -> samples		556716	0					
ANR	556809	Identifier	s		556716	0					
ANR	556810	Identifier	samples		556716	1					
ANR	556811	PrimaryExpression	0		556716	1					
ANR	556812	IfStatement	if ( ! s -> samples )		556716	10					
ANR	556813	Condition	! s -> samples	47:7:763:773	556716	0	True				
ANR	556814	UnaryOperationExpression	! s -> samples		556716	0					
ANR	556815	UnaryOperator	!		556716	0					
ANR	556816	PtrMemberAccess	s -> samples		556716	1					
ANR	556817	Identifier	s		556716	0					
ANR	556818	Identifier	samples		556716	1					
ANR	556819	CompoundStatement		45:8:656:670	556716	1					
ANR	556820	IdentifierDeclStatement	uint32_t offset ;	49:8:786:801	556716	0	True				
ANR	556821	IdentifierDecl	offset		556716	0					
ANR	556822	IdentifierDeclType	uint32_t		556716	0					
ANR	556823	Identifier	offset		556716	1					
ANR	556824	IdentifierDeclStatement	void * tmp_data ;	51:8:812:826	556716	1	True				
ANR	556825	IdentifierDecl	* tmp_data		556716	0					
ANR	556826	IdentifierDeclType	void *		556716	0					
ANR	556827	Identifier	tmp_data		556716	1					
ANR	556828	IfStatement	if ( buf_size < 8 )		556716	2					
ANR	556829	Condition	buf_size < 8	55:12:843:854	556716	0	True				
ANR	556830	RelationalExpression	buf_size < 8		556716	0		<			
ANR	556831	Identifier	buf_size		556716	0					
ANR	556832	PrimaryExpression	8		556716	1					
ANR	556833	CompoundStatement		49:26:701:701	556716	1					
ANR	556834	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Packet is too small\\n"" )"	57:12:872:924	556716	0	True				
ANR	556835	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Packet is too small\\n"" )"		556716	0					
ANR	556836	Callee	av_log		556716	0					
ANR	556837	Identifier	av_log		556716	0					
ANR	556838	ArgumentList	avctx		556716	1					
ANR	556839	Argument	avctx		556716	0					
ANR	556840	Identifier	avctx		556716	0					
ANR	556841	Argument	AV_LOG_ERROR		556716	1					
ANR	556842	Identifier	AV_LOG_ERROR		556716	0					
ANR	556843	Argument	"""Packet is too small\\n"""		556716	2					
ANR	556844	PrimaryExpression	"""Packet is too small\\n"""		556716	0					
ANR	556845	ReturnStatement	return AVERROR_INVALIDDATA ;	59:12:939:965	556716	1	True				
ANR	556846	Identifier	AVERROR_INVALIDDATA		556716	0					
ANR	556847	ExpressionStatement	"tmp_data = av_realloc ( s -> data , FFALIGN ( buf_size , 4 ) )"	65:8:989:1041	556716	3	True				
ANR	556848	AssignmentExpression	"tmp_data = av_realloc ( s -> data , FFALIGN ( buf_size , 4 ) )"		556716	0		=			
ANR	556849	Identifier	tmp_data		556716	0					
ANR	556850	CallExpression	"av_realloc ( s -> data , FFALIGN ( buf_size , 4 ) )"		556716	1					
ANR	556851	Callee	av_realloc		556716	0					
ANR	556852	Identifier	av_realloc		556716	0					
ANR	556853	ArgumentList	s -> data		556716	1					
ANR	556854	Argument	s -> data		556716	0					
ANR	556855	PtrMemberAccess	s -> data		556716	0					
ANR	556856	Identifier	s		556716	0					
ANR	556857	Identifier	data		556716	1					
ANR	556858	Argument	"FFALIGN ( buf_size , 4 )"		556716	1					
ANR	556859	CallExpression	"FFALIGN ( buf_size , 4 )"		556716	0					
ANR	556860	Callee	FFALIGN		556716	0					
ANR	556861	Identifier	FFALIGN		556716	0					
ANR	556862	ArgumentList	buf_size		556716	1					
ANR	556863	Argument	buf_size		556716	0					
ANR	556864	Identifier	buf_size		556716	0					
ANR	556865	Argument	4		556716	1					
ANR	556866	PrimaryExpression	4		556716	0					
ANR	556867	IfStatement	if ( ! tmp_data )		556716	4					
ANR	556868	Condition	! tmp_data	67:12:1056:1064	556716	0	True				
ANR	556869	UnaryOperationExpression	! tmp_data		556716	0					
ANR	556870	UnaryOperator	!		556716	0					
ANR	556871	Identifier	tmp_data		556716	1					
ANR	556872	ReturnStatement	return AVERROR ( ENOMEM ) ;	69:12:1080:1102	556716	1	True				
ANR	556873	CallExpression	AVERROR ( ENOMEM )		556716	0					
ANR	556874	Callee	AVERROR		556716	0					
ANR	556875	Identifier	AVERROR		556716	0					
ANR	556876	ArgumentList	ENOMEM		556716	1					
ANR	556877	Argument	ENOMEM		556716	0					
ANR	556878	Identifier	ENOMEM		556716	0					
ANR	556879	ExpressionStatement	s -> data = tmp_data	71:8:1113:1131	556716	5	True				
ANR	556880	AssignmentExpression	s -> data = tmp_data		556716	0		=			
ANR	556881	PtrMemberAccess	s -> data		556716	0					
ANR	556882	Identifier	s		556716	0					
ANR	556883	Identifier	data		556716	1					
ANR	556884	Identifier	tmp_data		556716	1					
ANR	556885	ExpressionStatement	"s -> dsp . bswap_buf ( ( uint32_t * ) s -> data , ( const uint32_t * ) buf , buf_size >> 2 )"	73:8:1142:1215	556716	6	True				
ANR	556886	CallExpression	"s -> dsp . bswap_buf ( ( uint32_t * ) s -> data , ( const uint32_t * ) buf , buf_size >> 2 )"		556716	0					
ANR	556887	Callee	s -> dsp . bswap_buf		556716	0					
ANR	556888	MemberAccess	s -> dsp . bswap_buf		556716	0					
ANR	556889	PtrMemberAccess	s -> dsp		556716	0					
ANR	556890	Identifier	s		556716	0					
ANR	556891	Identifier	dsp		556716	1					
ANR	556892	Identifier	bswap_buf		556716	1					
ANR	556893	ArgumentList	( uint32_t * ) s -> data		556716	1					
ANR	556894	Argument	( uint32_t * ) s -> data		556716	0					
ANR	556895	CastExpression	( uint32_t * ) s -> data		556716	0					
ANR	556896	CastTarget	uint32_t *		556716	0					
ANR	556897	PtrMemberAccess	s -> data		556716	1					
ANR	556898	Identifier	s		556716	0					
ANR	556899	Identifier	data		556716	1					
ANR	556900	Argument	( const uint32_t * ) buf		556716	1					
ANR	556901	CastExpression	( const uint32_t * ) buf		556716	0					
ANR	556902	CastTarget	const uint32_t *		556716	0					
ANR	556903	Identifier	buf		556716	1					
ANR	556904	Argument	buf_size >> 2		556716	2					
ANR	556905	ShiftExpression	buf_size >> 2		556716	0		>>			
ANR	556906	Identifier	buf_size		556716	0					
ANR	556907	PrimaryExpression	2		556716	1					
ANR	556908	ExpressionStatement	s -> ptr = s -> last_ptr = s -> data	75:8:1226:1256	556716	7	True				
ANR	556909	AssignmentExpression	s -> ptr = s -> last_ptr = s -> data		556716	0		=			
ANR	556910	PtrMemberAccess	s -> ptr		556716	0					
ANR	556911	Identifier	s		556716	0					
ANR	556912	Identifier	ptr		556716	1					
ANR	556913	AssignmentExpression	s -> last_ptr = s -> data		556716	1		=			
ANR	556914	PtrMemberAccess	s -> last_ptr		556716	0					
ANR	556915	Identifier	s		556716	0					
ANR	556916	Identifier	last_ptr		556716	1					
ANR	556917	PtrMemberAccess	s -> data		556716	1					
ANR	556918	Identifier	s		556716	0					
ANR	556919	Identifier	data		556716	1					
ANR	556920	ExpressionStatement	s -> data_end = s -> data + buf_size	77:8:1267:1299	556716	8	True				
ANR	556921	AssignmentExpression	s -> data_end = s -> data + buf_size		556716	0		=			
ANR	556922	PtrMemberAccess	s -> data_end		556716	0					
ANR	556923	Identifier	s		556716	0					
ANR	556924	Identifier	data_end		556716	1					
ANR	556925	AdditiveExpression	s -> data + buf_size		556716	1		+			
ANR	556926	PtrMemberAccess	s -> data		556716	0					
ANR	556927	Identifier	s		556716	0					
ANR	556928	Identifier	data		556716	1					
ANR	556929	Identifier	buf_size		556716	1					
ANR	556930	ExpressionStatement	nblocks = bytestream_get_be32 ( & s -> ptr )	81:8:1312:1350	556716	9	True				
ANR	556931	AssignmentExpression	nblocks = bytestream_get_be32 ( & s -> ptr )		556716	0		=			
ANR	556932	Identifier	nblocks		556716	0					
ANR	556933	CallExpression	bytestream_get_be32 ( & s -> ptr )		556716	1					
ANR	556934	Callee	bytestream_get_be32		556716	0					
ANR	556935	Identifier	bytestream_get_be32		556716	0					
ANR	556936	ArgumentList	& s -> ptr		556716	1					
ANR	556937	Argument	& s -> ptr		556716	0					
ANR	556938	UnaryOperationExpression	& s -> ptr		556716	0					
ANR	556939	UnaryOperator	&		556716	0					
ANR	556940	PtrMemberAccess	s -> ptr		556716	1					
ANR	556941	Identifier	s		556716	0					
ANR	556942	Identifier	ptr		556716	1					
ANR	556943	ExpressionStatement	offset = bytestream_get_be32 ( & s -> ptr )	83:8:1361:1399	556716	10	True				
ANR	556944	AssignmentExpression	offset = bytestream_get_be32 ( & s -> ptr )		556716	0		=			
ANR	556945	Identifier	offset		556716	0					
ANR	556946	CallExpression	bytestream_get_be32 ( & s -> ptr )		556716	1					
ANR	556947	Callee	bytestream_get_be32		556716	0					
ANR	556948	Identifier	bytestream_get_be32		556716	0					
ANR	556949	ArgumentList	& s -> ptr		556716	1					
ANR	556950	Argument	& s -> ptr		556716	0					
ANR	556951	UnaryOperationExpression	& s -> ptr		556716	0					
ANR	556952	UnaryOperator	&		556716	0					
ANR	556953	PtrMemberAccess	s -> ptr		556716	1					
ANR	556954	Identifier	s		556716	0					
ANR	556955	Identifier	ptr		556716	1					
ANR	556956	IfStatement	if ( offset > 3 )		556716	11					
ANR	556957	Condition	offset > 3	85:12:1414:1423	556716	0	True				
ANR	556958	RelationalExpression	offset > 3		556716	0		>			
ANR	556959	Identifier	offset		556716	0					
ANR	556960	PrimaryExpression	3		556716	1					
ANR	556961	CompoundStatement		79:24:1270:1270	556716	1					
ANR	556962	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Incorrect offset passed\\n"" )"	87:12:1441:1497	556716	0	True				
ANR	556963	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Incorrect offset passed\\n"" )"		556716	0					
ANR	556964	Callee	av_log		556716	0					
ANR	556965	Identifier	av_log		556716	0					
ANR	556966	ArgumentList	avctx		556716	1					
ANR	556967	Argument	avctx		556716	0					
ANR	556968	Identifier	avctx		556716	0					
ANR	556969	Argument	AV_LOG_ERROR		556716	1					
ANR	556970	Identifier	AV_LOG_ERROR		556716	0					
ANR	556971	Argument	"""Incorrect offset passed\\n"""		556716	2					
ANR	556972	PrimaryExpression	"""Incorrect offset passed\\n"""		556716	0					
ANR	556973	ExpressionStatement	s -> data = NULL	89:12:1512:1526	556716	1	True				
ANR	556974	AssignmentExpression	s -> data = NULL		556716	0		=			
ANR	556975	PtrMemberAccess	s -> data		556716	0					
ANR	556976	Identifier	s		556716	0					
ANR	556977	Identifier	data		556716	1					
ANR	556978	Identifier	NULL		556716	1					
ANR	556979	ReturnStatement	return AVERROR_INVALIDDATA ;	91:12:1541:1567	556716	2	True				
ANR	556980	Identifier	AVERROR_INVALIDDATA		556716	0					
ANR	556981	IfStatement	if ( s -> data_end - s -> ptr < offset )		556716	12					
ANR	556982	Condition	s -> data_end - s -> ptr < offset	95:12:1593:1621	556716	0	True				
ANR	556983	RelationalExpression	s -> data_end - s -> ptr < offset		556716	0		<			
ANR	556984	AdditiveExpression	s -> data_end - s -> ptr		556716	0		-			
ANR	556985	PtrMemberAccess	s -> data_end		556716	0					
ANR	556986	Identifier	s		556716	0					
ANR	556987	Identifier	data_end		556716	1					
ANR	556988	PtrMemberAccess	s -> ptr		556716	1					
ANR	556989	Identifier	s		556716	0					
ANR	556990	Identifier	ptr		556716	1					
ANR	556991	Identifier	offset		556716	1					
ANR	556992	CompoundStatement		89:43:1468:1468	556716	1					
ANR	556993	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Packet is too small\\n"" )"	97:12:1639:1691	556716	0	True				
ANR	556994	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Packet is too small\\n"" )"		556716	0					
ANR	556995	Callee	av_log		556716	0					
ANR	556996	Identifier	av_log		556716	0					
ANR	556997	ArgumentList	avctx		556716	1					
ANR	556998	Argument	avctx		556716	0					
ANR	556999	Identifier	avctx		556716	0					
ANR	557000	Argument	AV_LOG_ERROR		556716	1					
ANR	557001	Identifier	AV_LOG_ERROR		556716	0					
ANR	557002	Argument	"""Packet is too small\\n"""		556716	2					
ANR	557003	PrimaryExpression	"""Packet is too small\\n"""		556716	0					
ANR	557004	ReturnStatement	return AVERROR_INVALIDDATA ;	99:12:1706:1732	556716	1	True				
ANR	557005	Identifier	AVERROR_INVALIDDATA		556716	0					
ANR	557006	ExpressionStatement	s -> ptr += offset	103:8:1754:1770	556716	13	True				
ANR	557007	AssignmentExpression	s -> ptr += offset		556716	0		+=			
ANR	557008	PtrMemberAccess	s -> ptr		556716	0					
ANR	557009	Identifier	s		556716	0					
ANR	557010	Identifier	ptr		556716	1					
ANR	557011	Identifier	offset		556716	1					
ANR	557012	IfStatement	if ( ! nblocks || nblocks > INT_MAX )		556716	14					
ANR	557013	Condition	! nblocks || nblocks > INT_MAX	107:12:1787:1815	556716	0	True				
ANR	557014	OrExpression	! nblocks || nblocks > INT_MAX		556716	0		||			
ANR	557015	UnaryOperationExpression	! nblocks		556716	0					
ANR	557016	UnaryOperator	!		556716	0					
ANR	557017	Identifier	nblocks		556716	1					
ANR	557018	RelationalExpression	nblocks > INT_MAX		556716	1		>			
ANR	557019	Identifier	nblocks		556716	0					
ANR	557020	Identifier	INT_MAX		556716	1					
ANR	557021	CompoundStatement		101:43:1662:1662	556716	1					
ANR	557022	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Invalid sample count: %u.\\n"" , nblocks )"	109:12:1833:1900	556716	0	True				
ANR	557023	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Invalid sample count: %u.\\n"" , nblocks )"		556716	0					
ANR	557024	Callee	av_log		556716	0					
ANR	557025	Identifier	av_log		556716	0					
ANR	557026	ArgumentList	avctx		556716	1					
ANR	557027	Argument	avctx		556716	0					
ANR	557028	Identifier	avctx		556716	0					
ANR	557029	Argument	AV_LOG_ERROR		556716	1					
ANR	557030	Identifier	AV_LOG_ERROR		556716	0					
ANR	557031	Argument	"""Invalid sample count: %u.\\n"""		556716	2					
ANR	557032	PrimaryExpression	"""Invalid sample count: %u.\\n"""		556716	0					
ANR	557033	Argument	nblocks		556716	3					
ANR	557034	Identifier	nblocks		556716	0					
ANR	557035	ReturnStatement	return AVERROR_INVALIDDATA ;	111:12:1915:1941	556716	1	True				
ANR	557036	Identifier	AVERROR_INVALIDDATA		556716	0					
ANR	557037	ExpressionStatement	s -> samples = nblocks	115:8:1963:1983	556716	15	True				
ANR	557038	AssignmentExpression	s -> samples = nblocks		556716	0		=			
ANR	557039	PtrMemberAccess	s -> samples		556716	0					
ANR	557040	Identifier	s		556716	0					
ANR	557041	Identifier	samples		556716	1					
ANR	557042	Identifier	nblocks		556716	1					
ANR	557043	ExpressionStatement	"memset ( s -> decoded0 , 0 , sizeof ( s -> decoded0 ) )"	119:8:1996:2040	556716	16	True				
ANR	557044	CallExpression	"memset ( s -> decoded0 , 0 , sizeof ( s -> decoded0 ) )"		556716	0					
ANR	557045	Callee	memset		556716	0					
ANR	557046	Identifier	memset		556716	0					
ANR	557047	ArgumentList	s -> decoded0		556716	1					
ANR	557048	Argument	s -> decoded0		556716	0					
ANR	557049	PtrMemberAccess	s -> decoded0		556716	0					
ANR	557050	Identifier	s		556716	0					
ANR	557051	Identifier	decoded0		556716	1					
ANR	557052	Argument	0		556716	1					
ANR	557053	PrimaryExpression	0		556716	0					
ANR	557054	Argument	sizeof ( s -> decoded0 )		556716	2					
ANR	557055	SizeofExpression	sizeof ( s -> decoded0 )		556716	0					
ANR	557056	Sizeof	sizeof		556716	0					
ANR	557057	PtrMemberAccess	s -> decoded0		556716	1					
ANR	557058	Identifier	s		556716	0					
ANR	557059	Identifier	decoded0		556716	1					
ANR	557060	ExpressionStatement	"memset ( s -> decoded1 , 0 , sizeof ( s -> decoded1 ) )"	121:8:2051:2095	556716	17	True				
ANR	557061	CallExpression	"memset ( s -> decoded1 , 0 , sizeof ( s -> decoded1 ) )"		556716	0					
ANR	557062	Callee	memset		556716	0					
ANR	557063	Identifier	memset		556716	0					
ANR	557064	ArgumentList	s -> decoded1		556716	1					
ANR	557065	Argument	s -> decoded1		556716	0					
ANR	557066	PtrMemberAccess	s -> decoded1		556716	0					
ANR	557067	Identifier	s		556716	0					
ANR	557068	Identifier	decoded1		556716	1					
ANR	557069	Argument	0		556716	1					
ANR	557070	PrimaryExpression	0		556716	0					
ANR	557071	Argument	sizeof ( s -> decoded1 )		556716	2					
ANR	557072	SizeofExpression	sizeof ( s -> decoded1 )		556716	0					
ANR	557073	Sizeof	sizeof		556716	0					
ANR	557074	PtrMemberAccess	s -> decoded1		556716	1					
ANR	557075	Identifier	s		556716	0					
ANR	557076	Identifier	decoded1		556716	1					
ANR	557077	IfStatement	if ( init_frame_decoder ( s ) < 0 )		556716	18					
ANR	557078	Condition	init_frame_decoder ( s ) < 0	127:12:2156:2180	556716	0	True				
ANR	557079	RelationalExpression	init_frame_decoder ( s ) < 0		556716	0		<			
ANR	557080	CallExpression	init_frame_decoder ( s )		556716	0					
ANR	557081	Callee	init_frame_decoder		556716	0					
ANR	557082	Identifier	init_frame_decoder		556716	0					
ANR	557083	ArgumentList	s		556716	1					
ANR	557084	Argument	s		556716	0					
ANR	557085	Identifier	s		556716	0					
ANR	557086	PrimaryExpression	0		556716	1					
ANR	557087	CompoundStatement		121:39:2027:2027	556716	1					
ANR	557088	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Error reading frame header\\n"" )"	129:12:2198:2257	556716	0	True				
ANR	557089	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Error reading frame header\\n"" )"		556716	0					
ANR	557090	Callee	av_log		556716	0					
ANR	557091	Identifier	av_log		556716	0					
ANR	557092	ArgumentList	avctx		556716	1					
ANR	557093	Argument	avctx		556716	0					
ANR	557094	Identifier	avctx		556716	0					
ANR	557095	Argument	AV_LOG_ERROR		556716	1					
ANR	557096	Identifier	AV_LOG_ERROR		556716	0					
ANR	557097	Argument	"""Error reading frame header\\n"""		556716	2					
ANR	557098	PrimaryExpression	"""Error reading frame header\\n"""		556716	0					
ANR	557099	ReturnStatement	return AVERROR_INVALIDDATA ;	131:12:2272:2298	556716	1	True				
ANR	557100	Identifier	AVERROR_INVALIDDATA		556716	0					
ANR	557101	IfStatement	if ( ! s -> data )		556716	11					
ANR	557102	Condition	! s -> data	139:8:2329:2336	556716	0	True				
ANR	557103	UnaryOperationExpression	! s -> data		556716	0					
ANR	557104	UnaryOperator	!		556716	0					
ANR	557105	PtrMemberAccess	s -> data		556716	1					
ANR	557106	Identifier	s		556716	0					
ANR	557107	Identifier	data		556716	1					
ANR	557108	CompoundStatement		133:18:2183:2183	556716	1					
ANR	557109	ExpressionStatement	* data_size = 0	141:8:2350:2364	556716	0	True				
ANR	557110	AssignmentExpression	* data_size = 0		556716	0		=			
ANR	557111	UnaryOperationExpression	* data_size		556716	0					
ANR	557112	UnaryOperator	*		556716	0					
ANR	557113	Identifier	data_size		556716	1					
ANR	557114	PrimaryExpression	0		556716	1					
ANR	557115	ReturnStatement	return buf_size ;	143:8:2375:2390	556716	1	True				
ANR	557116	Identifier	buf_size		556716	0					
ANR	557117	ExpressionStatement	nblocks = s -> samples	149:4:2406:2426	556716	12	True				
ANR	557118	AssignmentExpression	nblocks = s -> samples		556716	0		=			
ANR	557119	Identifier	nblocks		556716	0					
ANR	557120	PtrMemberAccess	s -> samples		556716	1					
ANR	557121	Identifier	s		556716	0					
ANR	557122	Identifier	samples		556716	1					
ANR	557123	ExpressionStatement	"blockstodecode = FFMIN ( BLOCKS_PER_LOOP , nblocks )"	151:4:2433:2481	556716	13	True				
ANR	557124	AssignmentExpression	"blockstodecode = FFMIN ( BLOCKS_PER_LOOP , nblocks )"		556716	0		=			
ANR	557125	Identifier	blockstodecode		556716	0					
ANR	557126	CallExpression	"FFMIN ( BLOCKS_PER_LOOP , nblocks )"		556716	1					
ANR	557127	Callee	FFMIN		556716	0					
ANR	557128	Identifier	FFMIN		556716	0					
ANR	557129	ArgumentList	BLOCKS_PER_LOOP		556716	1					
ANR	557130	Argument	BLOCKS_PER_LOOP		556716	0					
ANR	557131	Identifier	BLOCKS_PER_LOOP		556716	0					
ANR	557132	Argument	nblocks		556716	1					
ANR	557133	Identifier	nblocks		556716	0					
ANR	557134	ExpressionStatement	s -> error = 0	155:4:2490:2500	556716	14	True				
ANR	557135	AssignmentExpression	s -> error = 0		556716	0		=			
ANR	557136	PtrMemberAccess	s -> error		556716	0					
ANR	557137	Identifier	s		556716	0					
ANR	557138	Identifier	error		556716	1					
ANR	557139	PrimaryExpression	0		556716	1					
ANR	557140	IfStatement	if ( ( s -> channels == 1 ) || ( s -> frameflags & APE_FRAMECODE_PSEUDO_STEREO ) )		556716	15					
ANR	557141	Condition	( s -> channels == 1 ) || ( s -> frameflags & APE_FRAMECODE_PSEUDO_STEREO )	159:8:2513:2579	556716	0	True				
ANR	557142	OrExpression	( s -> channels == 1 ) || ( s -> frameflags & APE_FRAMECODE_PSEUDO_STEREO )		556716	0		||			
ANR	557143	EqualityExpression	s -> channels == 1		556716	0		==			
ANR	557144	PtrMemberAccess	s -> channels		556716	0					
ANR	557145	Identifier	s		556716	0					
ANR	557146	Identifier	channels		556716	1					
ANR	557147	PrimaryExpression	1		556716	1					
ANR	557148	BitAndExpression	s -> frameflags & APE_FRAMECODE_PSEUDO_STEREO		556716	1		&			
ANR	557149	PtrMemberAccess	s -> frameflags		556716	0					
ANR	557150	Identifier	s		556716	0					
ANR	557151	Identifier	frameflags		556716	1					
ANR	557152	Identifier	APE_FRAMECODE_PSEUDO_STEREO		556716	1					
ANR	557153	ExpressionStatement	"ape_unpack_mono ( s , blockstodecode )"	161:8:2591:2625	556716	1	True				
ANR	557154	CallExpression	"ape_unpack_mono ( s , blockstodecode )"		556716	0					
ANR	557155	Callee	ape_unpack_mono		556716	0					
ANR	557156	Identifier	ape_unpack_mono		556716	0					
ANR	557157	ArgumentList	s		556716	1					
ANR	557158	Argument	s		556716	0					
ANR	557159	Identifier	s		556716	0					
ANR	557160	Argument	blockstodecode		556716	1					
ANR	557161	Identifier	blockstodecode		556716	0					
ANR	557162	ElseStatement	else		556716	0					
ANR	557163	ExpressionStatement	"ape_unpack_stereo ( s , blockstodecode )"	165:8:2646:2682	556716	0	True				
ANR	557164	CallExpression	"ape_unpack_stereo ( s , blockstodecode )"		556716	0					
ANR	557165	Callee	ape_unpack_stereo		556716	0					
ANR	557166	Identifier	ape_unpack_stereo		556716	0					
ANR	557167	ArgumentList	s		556716	1					
ANR	557168	Argument	s		556716	0					
ANR	557169	Identifier	s		556716	0					
ANR	557170	Argument	blockstodecode		556716	1					
ANR	557171	Identifier	blockstodecode		556716	0					
ANR	557172	ExpressionStatement	emms_c ( )	167:4:2689:2697	556716	16	True				
ANR	557173	CallExpression	emms_c ( )		556716	0					
ANR	557174	Callee	emms_c		556716	0					
ANR	557175	Identifier	emms_c		556716	0					
ANR	557176	ArgumentList			556716	1					
ANR	557177	IfStatement	if ( s -> error )		556716	17					
ANR	557178	Condition	s -> error	171:8:2710:2717	556716	0	True				
ANR	557179	PtrMemberAccess	s -> error		556716	0					
ANR	557180	Identifier	s		556716	0					
ANR	557181	Identifier	error		556716	1					
ANR	557182	CompoundStatement		165:18:2564:2564	556716	1					
ANR	557183	ExpressionStatement	s -> samples = 0	173:8:2731:2743	556716	0	True				
ANR	557184	AssignmentExpression	s -> samples = 0		556716	0		=			
ANR	557185	PtrMemberAccess	s -> samples		556716	0					
ANR	557186	Identifier	s		556716	0					
ANR	557187	Identifier	samples		556716	1					
ANR	557188	PrimaryExpression	0		556716	1					
ANR	557189	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Error decoding frame\\n"" )"	175:8:2754:2807	556716	1	True				
ANR	557190	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Error decoding frame\\n"" )"		556716	0					
ANR	557191	Callee	av_log		556716	0					
ANR	557192	Identifier	av_log		556716	0					
ANR	557193	ArgumentList	avctx		556716	1					
ANR	557194	Argument	avctx		556716	0					
ANR	557195	Identifier	avctx		556716	0					
ANR	557196	Argument	AV_LOG_ERROR		556716	1					
ANR	557197	Identifier	AV_LOG_ERROR		556716	0					
ANR	557198	Argument	"""Error decoding frame\\n"""		556716	2					
ANR	557199	PrimaryExpression	"""Error decoding frame\\n"""		556716	0					
ANR	557200	ReturnStatement	return AVERROR_INVALIDDATA ;	177:8:2818:2844	556716	2	True				
ANR	557201	Identifier	AVERROR_INVALIDDATA		556716	0					
ANR	557202	ForStatement	for ( i = 0 ; i < blockstodecode ; i ++ )		556716	18					
ANR	557203	ForInit	i = 0 ;	183:9:2865:2870	556716	0	True				
ANR	557204	AssignmentExpression	i = 0		556716	0		=			
ANR	557205	Identifier	i		556716	0					
ANR	557206	PrimaryExpression	0		556716	1					
ANR	557207	Condition	i < blockstodecode	183:16:2872:2889	556716	1	True				
ANR	557208	RelationalExpression	i < blockstodecode		556716	0		<			
ANR	557209	Identifier	i		556716	0					
ANR	557210	Identifier	blockstodecode		556716	1					
ANR	557211	PostIncDecOperationExpression	i ++	183:36:2892:2894	556716	2	True				
ANR	557212	Identifier	i		556716	0					
ANR	557213	IncDec	++		556716	1					
ANR	557214	CompoundStatement		177:41:2741:2741	556716	3					
ANR	557215	ExpressionStatement	* samples ++ = s -> decoded0 [ i ]	185:8:2908:2935	556716	0	True				
ANR	557216	AssignmentExpression	* samples ++ = s -> decoded0 [ i ]		556716	0		=			
ANR	557217	UnaryOperationExpression	* samples ++		556716	0					
ANR	557218	UnaryOperator	*		556716	0					
ANR	557219	PostIncDecOperationExpression	samples ++		556716	1					
ANR	557220	Identifier	samples		556716	0					
ANR	557221	IncDec	++		556716	1					
ANR	557222	ArrayIndexing	s -> decoded0 [ i ]		556716	1					
ANR	557223	PtrMemberAccess	s -> decoded0		556716	0					
ANR	557224	Identifier	s		556716	0					
ANR	557225	Identifier	decoded0		556716	1					
ANR	557226	Identifier	i		556716	1					
ANR	557227	IfStatement	if ( s -> channels == 2 )		556716	1					
ANR	557228	Condition	s -> channels == 2	187:11:2949:2964	556716	0	True				
ANR	557229	EqualityExpression	s -> channels == 2		556716	0		==			
ANR	557230	PtrMemberAccess	s -> channels		556716	0					
ANR	557231	Identifier	s		556716	0					
ANR	557232	Identifier	channels		556716	1					
ANR	557233	PrimaryExpression	2		556716	1					
ANR	557234	ExpressionStatement	* samples ++ = s -> decoded1 [ i ]	189:12:2980:3007	556716	1	True				
ANR	557235	AssignmentExpression	* samples ++ = s -> decoded1 [ i ]		556716	0		=			
ANR	557236	UnaryOperationExpression	* samples ++		556716	0					
ANR	557237	UnaryOperator	*		556716	0					
ANR	557238	PostIncDecOperationExpression	samples ++		556716	1					
ANR	557239	Identifier	samples		556716	0					
ANR	557240	IncDec	++		556716	1					
ANR	557241	ArrayIndexing	s -> decoded1 [ i ]		556716	1					
ANR	557242	PtrMemberAccess	s -> decoded1		556716	0					
ANR	557243	Identifier	s		556716	0					
ANR	557244	Identifier	decoded1		556716	1					
ANR	557245	Identifier	i		556716	1					
ANR	557246	ExpressionStatement	s -> samples -= blockstodecode	195:4:3023:3051	556716	19	True				
ANR	557247	AssignmentExpression	s -> samples -= blockstodecode		556716	0		-=			
ANR	557248	PtrMemberAccess	s -> samples		556716	0					
ANR	557249	Identifier	s		556716	0					
ANR	557250	Identifier	samples		556716	1					
ANR	557251	Identifier	blockstodecode		556716	1					
ANR	557252	ExpressionStatement	* data_size = blockstodecode * 2 * s -> channels	199:4:3060:3105	556716	20	True				
ANR	557253	AssignmentExpression	* data_size = blockstodecode * 2 * s -> channels		556716	0		=			
ANR	557254	UnaryOperationExpression	* data_size		556716	0					
ANR	557255	UnaryOperator	*		556716	0					
ANR	557256	Identifier	data_size		556716	1					
ANR	557257	MultiplicativeExpression	blockstodecode * 2 * s -> channels		556716	1		*			
ANR	557258	Identifier	blockstodecode		556716	0					
ANR	557259	MultiplicativeExpression	2 * s -> channels		556716	1		*			
ANR	557260	PrimaryExpression	2		556716	0					
ANR	557261	PtrMemberAccess	s -> channels		556716	1					
ANR	557262	Identifier	s		556716	0					
ANR	557263	Identifier	channels		556716	1					
ANR	557264	ExpressionStatement	bytes_used = s -> samples ? s -> ptr - s -> last_ptr : buf_size	201:4:3112:3169	556716	21	True				
ANR	557265	AssignmentExpression	bytes_used = s -> samples ? s -> ptr - s -> last_ptr : buf_size		556716	0		=			
ANR	557266	Identifier	bytes_used		556716	0					
ANR	557267	ConditionalExpression	s -> samples ? s -> ptr - s -> last_ptr : buf_size		556716	1					
ANR	557268	Condition	s -> samples		556716	0					
ANR	557269	PtrMemberAccess	s -> samples		556716	0					
ANR	557270	Identifier	s		556716	0					
ANR	557271	Identifier	samples		556716	1					
ANR	557272	AdditiveExpression	s -> ptr - s -> last_ptr		556716	1		-			
ANR	557273	PtrMemberAccess	s -> ptr		556716	0					
ANR	557274	Identifier	s		556716	0					
ANR	557275	Identifier	ptr		556716	1					
ANR	557276	PtrMemberAccess	s -> last_ptr		556716	1					
ANR	557277	Identifier	s		556716	0					
ANR	557278	Identifier	last_ptr		556716	1					
ANR	557279	Identifier	buf_size		556716	2					
ANR	557280	ExpressionStatement	s -> last_ptr = s -> ptr	203:4:3176:3196	556716	22	True				
ANR	557281	AssignmentExpression	s -> last_ptr = s -> ptr		556716	0		=			
ANR	557282	PtrMemberAccess	s -> last_ptr		556716	0					
ANR	557283	Identifier	s		556716	0					
ANR	557284	Identifier	last_ptr		556716	1					
ANR	557285	PtrMemberAccess	s -> ptr		556716	1					
ANR	557286	Identifier	s		556716	0					
ANR	557287	Identifier	ptr		556716	1					
ANR	557288	ReturnStatement	return bytes_used ;	205:4:3203:3220	556716	23	True				
ANR	557289	Identifier	bytes_used		556716	0					
ANR	557290	ReturnType	static int		556716	1					
ANR	557291	Identifier	ape_decode_frame		556716	2					
ANR	557292	ParameterList	"AVCodecContext * avctx , void * data , int * data_size , AVPacket * avpkt"		556716	3					
ANR	557293	Parameter	AVCodecContext * avctx	1:28:28:48	556716	0	True				
ANR	557294	ParameterType	AVCodecContext *		556716	0					
ANR	557295	Identifier	avctx		556716	1					
ANR	557296	Parameter	void * data	3:28:80:89	556716	1	True				
ANR	557297	ParameterType	void *		556716	0					
ANR	557298	Identifier	data		556716	1					
ANR	557299	Parameter	int * data_size	3:40:92:105	556716	2	True				
ANR	557300	ParameterType	int *		556716	0					
ANR	557301	Identifier	data_size		556716	1					
ANR	557302	Parameter	AVPacket * avpkt	5:28:137:151	556716	3	True				
ANR	557303	ParameterType	AVPacket *		556716	0					
ANR	557304	Identifier	avpkt		556716	1					
ANR	557305	CFGEntryNode	ENTRY		556716		True				
ANR	557306	CFGExitNode	EXIT		556716		True				
ANR	557307	Symbol	av_realloc		556716						
ANR	557308	Symbol	ENOMEM		556716						
ANR	557309	Symbol	data		556716						
ANR	557310	Symbol	s -> last_ptr		556716						
ANR	557311	Symbol	FFMIN		556716						
ANR	557312	Symbol	avpkt		556716						
ANR	557313	Symbol	* data_size		556716						
ANR	557314	Symbol	avctx -> channels		556716						
ANR	557315	Symbol	bytes_used		556716						
ANR	557316	Symbol	s -> data		556716						
ANR	557317	Symbol	init_frame_decoder		556716						
ANR	557318	Symbol	data_size		556716						
ANR	557319	Symbol	& s -> ptr		556716						
ANR	557320	Symbol	NULL		556716						
ANR	557321	Symbol	offset		556716						
ANR	557322	Symbol	s -> error		556716						
ANR	557323	Symbol	buf_size		556716						
ANR	557324	Symbol	s -> dsp		556716						
ANR	557325	Symbol	samples		556716						
ANR	557326	Symbol	s -> frameflags		556716						
ANR	557327	Symbol	* avctx		556716						
ANR	557328	Symbol	nblocks		556716						
ANR	557329	Symbol	FFALIGN		556716						
ANR	557330	Symbol	avpkt -> data		556716						
ANR	557331	Symbol	s -> decoded1		556716						
ANR	557332	Symbol	s -> decoded0		556716						
ANR	557333	Symbol	tmp_data		556716						
ANR	557334	Symbol	s -> samples		556716						
ANR	557335	Symbol	s -> channels		556716						
ANR	557336	Symbol	APE_FRAMECODE_PSEUDO_STEREO		556716						
ANR	557337	Symbol	bytestream_get_be32		556716						
ANR	557338	Symbol	INT_MAX		556716						
ANR	557339	Symbol	* * s		556716						
ANR	557340	Symbol	avpkt -> size		556716						
ANR	557341	Symbol	avctx		556716						
ANR	557342	Symbol	* samples ++		556716						
ANR	557343	Symbol	* avpkt		556716						
ANR	557344	Symbol	AV_LOG_ERROR		556716						
ANR	557345	Symbol	i		556716						
ANR	557346	Symbol	s -> data_end		556716						
ANR	557347	Symbol	avctx -> priv_data		556716						
ANR	557348	Symbol	EINVAL		556716						
ANR	557349	Symbol	buf		556716						
ANR	557350	Symbol	s		556716						
ANR	557351	Symbol	* i		556716						
ANR	557352	Symbol	AVERROR_INVALIDDATA		556716						
ANR	557353	Symbol	blockstodecode		556716						
ANR	557354	Symbol	AVERROR		556716						
ANR	557355	Symbol	BLOCKS_PER_LOOP		556716						
ANR	557356	Symbol	* s		556716						
ANR	557357	Symbol	s -> ptr		556716						
ANR	557358	Symbol	* s -> decoded1		556716						
ANR	557359	Symbol	* s -> decoded0		556716						
