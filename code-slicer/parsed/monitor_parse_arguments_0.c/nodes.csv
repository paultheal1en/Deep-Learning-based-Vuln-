command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5566948	File	/home/p4ultr4n/workplace/ReVeal/raw_code/monitor_parse_arguments_0.c								
ANR	5566949	Function	monitor_parse_arguments	1:0:0:12067							
ANR	5566950	FunctionDef	"monitor_parse_arguments (Monitor * mon , const char * * endp , const mon_cmd_t * cmd)"		5566949	0					
ANR	5566951	CompoundStatement		7:0:172:12067	5566949	0					
ANR	5566952	IdentifierDeclStatement	const char * typestr ;	9:4:179:198	5566949	0	True				
ANR	5566953	IdentifierDecl	* typestr		5566949	0					
ANR	5566954	IdentifierDeclType	const char *		5566949	0					
ANR	5566955	Identifier	typestr		5566949	1					
ANR	5566956	IdentifierDeclStatement	char * key ;	11:4:205:214	5566949	1	True				
ANR	5566957	IdentifierDecl	* key		5566949	0					
ANR	5566958	IdentifierDeclType	char *		5566949	0					
ANR	5566959	Identifier	key		5566949	1					
ANR	5566960	IdentifierDeclStatement	int c ;	13:4:221:226	5566949	2	True				
ANR	5566961	IdentifierDecl	c		5566949	0					
ANR	5566962	IdentifierDeclType	int		5566949	0					
ANR	5566963	Identifier	c		5566949	1					
ANR	5566964	IdentifierDeclStatement	const char * p = * endp ;	15:4:233:254	5566949	3	True				
ANR	5566965	IdentifierDecl	* p = * endp		5566949	0					
ANR	5566966	IdentifierDeclType	const char *		5566949	0					
ANR	5566967	Identifier	p		5566949	1					
ANR	5566968	AssignmentExpression	* p = * endp		5566949	2		=			
ANR	5566969	Identifier	p		5566949	0					
ANR	5566970	UnaryOperationExpression	* endp		5566949	1					
ANR	5566971	UnaryOperator	*		5566949	0					
ANR	5566972	Identifier	endp		5566949	1					
ANR	5566973	IdentifierDeclStatement	char buf [ 1024 ] ;	17:4:261:275	5566949	4	True				
ANR	5566974	IdentifierDecl	buf [ 1024 ]		5566949	0					
ANR	5566975	IdentifierDeclType	char [ 1024 ]		5566949	0					
ANR	5566976	Identifier	buf		5566949	1					
ANR	5566977	PrimaryExpression	1024		5566949	2					
ANR	5566978	IdentifierDeclStatement	QDict * qdict = qdict_new ( ) ;	19:4:282:308	5566949	5	True				
ANR	5566979	IdentifierDecl	* qdict = qdict_new ( )		5566949	0					
ANR	5566980	IdentifierDeclType	QDict *		5566949	0					
ANR	5566981	Identifier	qdict		5566949	1					
ANR	5566982	AssignmentExpression	* qdict = qdict_new ( )		5566949	2		=			
ANR	5566983	Identifier	qdict		5566949	0					
ANR	5566984	CallExpression	qdict_new ( )		5566949	1					
ANR	5566985	Callee	qdict_new		5566949	0					
ANR	5566986	Identifier	qdict_new		5566949	0					
ANR	5566987	ArgumentList			5566949	1					
ANR	5566988	ExpressionStatement	typestr = cmd -> args_type	25:4:349:373	5566949	6	True				
ANR	5566989	AssignmentExpression	typestr = cmd -> args_type		5566949	0		=			
ANR	5566990	Identifier	typestr		5566949	0					
ANR	5566991	PtrMemberAccess	cmd -> args_type		5566949	1					
ANR	5566992	Identifier	cmd		5566949	0					
ANR	5566993	Identifier	args_type		5566949	1					
ANR	5566994	ForStatement	for ( ; ; )		5566949	7					
ANR	5566995	CompoundStatement		21:12:215:215	5566949	0					
ANR	5566996	ExpressionStatement	"typestr = key_get_info ( typestr , & key )"	29:8:399:436	5566949	0	True				
ANR	5566997	AssignmentExpression	"typestr = key_get_info ( typestr , & key )"		5566949	0		=			
ANR	5566998	Identifier	typestr		5566949	0					
ANR	5566999	CallExpression	"key_get_info ( typestr , & key )"		5566949	1					
ANR	5567000	Callee	key_get_info		5566949	0					
ANR	5567001	Identifier	key_get_info		5566949	0					
ANR	5567002	ArgumentList	typestr		5566949	1					
ANR	5567003	Argument	typestr		5566949	0					
ANR	5567004	Identifier	typestr		5566949	0					
ANR	5567005	Argument	& key		5566949	1					
ANR	5567006	UnaryOperationExpression	& key		5566949	0					
ANR	5567007	UnaryOperator	&		5566949	0					
ANR	5567008	Identifier	key		5566949	1					
ANR	5567009	IfStatement	if ( ! typestr )		5566949	1					
ANR	5567010	Condition	! typestr	31:12:451:458	5566949	0	True				
ANR	5567011	UnaryOperationExpression	! typestr		5566949	0					
ANR	5567012	UnaryOperator	!		5566949	0					
ANR	5567013	Identifier	typestr		5566949	1					
ANR	5567014	BreakStatement	break ;	33:12:474:479	5566949	1	True				
ANR	5567015	ExpressionStatement	c = * typestr	35:8:490:502	5566949	2	True				
ANR	5567016	AssignmentExpression	c = * typestr		5566949	0		=			
ANR	5567017	Identifier	c		5566949	0					
ANR	5567018	UnaryOperationExpression	* typestr		5566949	1					
ANR	5567019	UnaryOperator	*		5566949	0					
ANR	5567020	Identifier	typestr		5566949	1					
ANR	5567021	ExpressionStatement	typestr ++	37:8:513:522	5566949	3	True				
ANR	5567022	PostIncDecOperationExpression	typestr ++		5566949	0					
ANR	5567023	Identifier	typestr		5566949	0					
ANR	5567024	IncDec	++		5566949	1					
ANR	5567025	SwitchStatement	switch ( c )		5566949	4					
ANR	5567026	Condition	c	39:15:540:540	5566949	0	True				
ANR	5567027	Identifier	c		5566949	0					
ANR	5567028	CompoundStatement		33:18:370:370	5566949	1					
ANR	5567029	Label	case 'F' :	41:8:554:562	5566949	0	True				
ANR	5567030	Label	case 'B' :	43:8:573:581	5566949	1	True				
ANR	5567031	Label	case 's' :	45:8:592:600	5566949	2	True				
ANR	5567032	CompoundStatement		43:16:461:468	5566949	3					
ANR	5567033	IdentifierDeclStatement	int ret ;	49:16:634:641	5566949	0	True				
ANR	5567034	IdentifierDecl	ret		5566949	0					
ANR	5567035	IdentifierDeclType	int		5566949	0					
ANR	5567036	Identifier	ret		5566949	1					
ANR	5567037	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	1					
ANR	5567038	Condition	qemu_isspace ( * p )	53:23:669:684	5566949	0	True				
ANR	5567039	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5567040	Callee	qemu_isspace		5566949	0					
ANR	5567041	Identifier	qemu_isspace		5566949	0					
ANR	5567042	ArgumentList	* p		5566949	1					
ANR	5567043	Argument	* p		5566949	0					
ANR	5567044	UnaryOperationExpression	* p		5566949	0					
ANR	5567045	UnaryOperator	*		5566949	0					
ANR	5567046	Identifier	p		5566949	1					
ANR	5567047	ExpressionStatement	p ++	55:20:708:711	5566949	1	True				
ANR	5567048	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567049	Identifier	p		5566949	0					
ANR	5567050	IncDec	++		5566949	1					
ANR	5567051	IfStatement	if ( * typestr == '?' )		5566949	2					
ANR	5567052	Condition	* typestr == '?'	57:20:734:748	5566949	0	True				
ANR	5567053	EqualityExpression	* typestr == '?'		5566949	0		==			
ANR	5567054	UnaryOperationExpression	* typestr		5566949	0					
ANR	5567055	UnaryOperator	*		5566949	0					
ANR	5567056	Identifier	typestr		5566949	1					
ANR	5567057	PrimaryExpression	'?'		5566949	1					
ANR	5567058	CompoundStatement		51:37:578:578	5566949	1					
ANR	5567059	ExpressionStatement	typestr ++	59:20:774:783	5566949	0	True				
ANR	5567060	PostIncDecOperationExpression	typestr ++		5566949	0					
ANR	5567061	Identifier	typestr		5566949	0					
ANR	5567062	IncDec	++		5566949	1					
ANR	5567063	IfStatement	if ( * p == '\\0' )		5566949	1					
ANR	5567064	Condition	* p == '\\0'	61:24:810:819	5566949	0	True				
ANR	5567065	EqualityExpression	* p == '\\0'		5566949	0		==			
ANR	5567066	UnaryOperationExpression	* p		5566949	0					
ANR	5567067	UnaryOperator	*		5566949	0					
ANR	5567068	Identifier	p		5566949	1					
ANR	5567069	PrimaryExpression	'\\0'		5566949	1					
ANR	5567070	CompoundStatement		55:36:649:649	5566949	1					
ANR	5567071	BreakStatement	break ;	65:24:914:919	5566949	0	True				
ANR	5567072	ExpressionStatement	"ret = get_str ( buf , sizeof ( buf ) , & p )"	71:16:980:1015	5566949	3	True				
ANR	5567073	AssignmentExpression	"ret = get_str ( buf , sizeof ( buf ) , & p )"		5566949	0		=			
ANR	5567074	Identifier	ret		5566949	0					
ANR	5567075	CallExpression	"get_str ( buf , sizeof ( buf ) , & p )"		5566949	1					
ANR	5567076	Callee	get_str		5566949	0					
ANR	5567077	Identifier	get_str		5566949	0					
ANR	5567078	ArgumentList	buf		5566949	1					
ANR	5567079	Argument	buf		5566949	0					
ANR	5567080	Identifier	buf		5566949	0					
ANR	5567081	Argument	sizeof ( buf )		5566949	1					
ANR	5567082	SizeofExpression	sizeof ( buf )		5566949	0					
ANR	5567083	Sizeof	sizeof		5566949	0					
ANR	5567084	SizeofOperand	buf		5566949	1					
ANR	5567085	Argument	& p		5566949	2					
ANR	5567086	UnaryOperationExpression	& p		5566949	0					
ANR	5567087	UnaryOperator	&		5566949	0					
ANR	5567088	Identifier	p		5566949	1					
ANR	5567089	IfStatement	if ( ret < 0 )		5566949	4					
ANR	5567090	Condition	ret < 0	73:20:1038:1044	5566949	0	True				
ANR	5567091	RelationalExpression	ret < 0		5566949	0		<			
ANR	5567092	Identifier	ret		5566949	0					
ANR	5567093	PrimaryExpression	0		5566949	1					
ANR	5567094	CompoundStatement		67:29:874:874	5566949	1					
ANR	5567095	SwitchStatement	switch ( c )		5566949	0					
ANR	5567096	Condition	c	75:27:1077:1077	5566949	0	True				
ANR	5567097	Identifier	c		5566949	0					
ANR	5567098	CompoundStatement		69:30:907:907	5566949	1					
ANR	5567099	Label	case 'F' :	77:20:1103:1111	5566949	0	True				
ANR	5567100	ExpressionStatement	"monitor_printf ( mon , ""%s: filename expected\\n"" , cmd -> name )"	79:24:1138:1235	5566949	1	True				
ANR	5567101	CallExpression	"monitor_printf ( mon , ""%s: filename expected\\n"" , cmd -> name )"		5566949	0					
ANR	5567102	Callee	monitor_printf		5566949	0					
ANR	5567103	Identifier	monitor_printf		5566949	0					
ANR	5567104	ArgumentList	mon		5566949	1					
ANR	5567105	Argument	mon		5566949	0					
ANR	5567106	Identifier	mon		5566949	0					
ANR	5567107	Argument	"""%s: filename expected\\n"""		5566949	1					
ANR	5567108	PrimaryExpression	"""%s: filename expected\\n"""		5566949	0					
ANR	5567109	Argument	cmd -> name		5566949	2					
ANR	5567110	PtrMemberAccess	cmd -> name		5566949	0					
ANR	5567111	Identifier	cmd		5566949	0					
ANR	5567112	Identifier	name		5566949	1					
ANR	5567113	BreakStatement	break ;	83:24:1262:1267	5566949	2	True				
ANR	5567114	Label	case 'B' :	85:20:1290:1298	5566949	3	True				
ANR	5567115	ExpressionStatement	"monitor_printf ( mon , ""%s: block device name expected\\n"" , cmd -> name )"	87:24:1325:1431	5566949	4	True				
ANR	5567116	CallExpression	"monitor_printf ( mon , ""%s: block device name expected\\n"" , cmd -> name )"		5566949	0					
ANR	5567117	Callee	monitor_printf		5566949	0					
ANR	5567118	Identifier	monitor_printf		5566949	0					
ANR	5567119	ArgumentList	mon		5566949	1					
ANR	5567120	Argument	mon		5566949	0					
ANR	5567121	Identifier	mon		5566949	0					
ANR	5567122	Argument	"""%s: block device name expected\\n"""		5566949	1					
ANR	5567123	PrimaryExpression	"""%s: block device name expected\\n"""		5566949	0					
ANR	5567124	Argument	cmd -> name		5566949	2					
ANR	5567125	PtrMemberAccess	cmd -> name		5566949	0					
ANR	5567126	Identifier	cmd		5566949	0					
ANR	5567127	Identifier	name		5566949	1					
ANR	5567128	BreakStatement	break ;	91:24:1458:1463	5566949	5	True				
ANR	5567129	Label	default :	93:20:1486:1493	5566949	6	True				
ANR	5567130	Identifier	default		5566949	0					
ANR	5567131	ExpressionStatement	"monitor_printf ( mon , ""%s: string expected\\n"" , cmd -> name )"	95:24:1520:1575	5566949	7	True				
ANR	5567132	CallExpression	"monitor_printf ( mon , ""%s: string expected\\n"" , cmd -> name )"		5566949	0					
ANR	5567133	Callee	monitor_printf		5566949	0					
ANR	5567134	Identifier	monitor_printf		5566949	0					
ANR	5567135	ArgumentList	mon		5566949	1					
ANR	5567136	Argument	mon		5566949	0					
ANR	5567137	Identifier	mon		5566949	0					
ANR	5567138	Argument	"""%s: string expected\\n"""		5566949	1					
ANR	5567139	PrimaryExpression	"""%s: string expected\\n"""		5566949	0					
ANR	5567140	Argument	cmd -> name		5566949	2					
ANR	5567141	PtrMemberAccess	cmd -> name		5566949	0					
ANR	5567142	Identifier	cmd		5566949	0					
ANR	5567143	Identifier	name		5566949	1					
ANR	5567144	BreakStatement	break ;	97:24:1602:1607	5566949	8	True				
ANR	5567145	GotoStatement	goto fail ;	101:20:1653:1662	5566949	1	True				
ANR	5567146	Identifier	fail		5566949	0					
ANR	5567147	ExpressionStatement	"qdict_put ( qdict , key , qstring_from_str ( buf ) )"	105:16:1700:1744	5566949	5	True				
ANR	5567148	CallExpression	"qdict_put ( qdict , key , qstring_from_str ( buf ) )"		5566949	0					
ANR	5567149	Callee	qdict_put		5566949	0					
ANR	5567150	Identifier	qdict_put		5566949	0					
ANR	5567151	ArgumentList	qdict		5566949	1					
ANR	5567152	Argument	qdict		5566949	0					
ANR	5567153	Identifier	qdict		5566949	0					
ANR	5567154	Argument	key		5566949	1					
ANR	5567155	Identifier	key		5566949	0					
ANR	5567156	Argument	qstring_from_str ( buf )		5566949	2					
ANR	5567157	CallExpression	qstring_from_str ( buf )		5566949	0					
ANR	5567158	Callee	qstring_from_str		5566949	0					
ANR	5567159	Identifier	qstring_from_str		5566949	0					
ANR	5567160	ArgumentList	buf		5566949	1					
ANR	5567161	Argument	buf		5566949	0					
ANR	5567162	Identifier	buf		5566949	0					
ANR	5567163	BreakStatement	break ;	109:12:1774:1779	5566949	4	True				
ANR	5567164	Label	case 'O' :	111:8:1790:1798	5566949	5	True				
ANR	5567165	CompoundStatement		111:16:1701:1715	5566949	6					
ANR	5567166	IdentifierDeclStatement	QemuOptsList * opts_list ;	115:16:1832:1855	5566949	0	True				
ANR	5567167	IdentifierDecl	* opts_list		5566949	0					
ANR	5567168	IdentifierDeclType	QemuOptsList *		5566949	0					
ANR	5567169	Identifier	opts_list		5566949	1					
ANR	5567170	IdentifierDeclStatement	QemuOpts * opts ;	117:16:1874:1888	5566949	1	True				
ANR	5567171	IdentifierDecl	* opts		5566949	0					
ANR	5567172	IdentifierDeclType	QemuOpts *		5566949	0					
ANR	5567173	Identifier	opts		5566949	1					
ANR	5567174	ExpressionStatement	opts_list = qemu_find_opts ( key )	121:16:1909:1940	5566949	2	True				
ANR	5567175	AssignmentExpression	opts_list = qemu_find_opts ( key )		5566949	0		=			
ANR	5567176	Identifier	opts_list		5566949	0					
ANR	5567177	CallExpression	qemu_find_opts ( key )		5566949	1					
ANR	5567178	Callee	qemu_find_opts		5566949	0					
ANR	5567179	Identifier	qemu_find_opts		5566949	0					
ANR	5567180	ArgumentList	key		5566949	1					
ANR	5567181	Argument	key		5566949	0					
ANR	5567182	Identifier	key		5566949	0					
ANR	5567183	IfStatement	if ( ! opts_list || opts_list -> desc -> name )		5566949	3					
ANR	5567184	Condition	! opts_list || opts_list -> desc -> name	123:20:1963:1997	5566949	0	True				
ANR	5567185	OrExpression	! opts_list || opts_list -> desc -> name		5566949	0		||			
ANR	5567186	UnaryOperationExpression	! opts_list		5566949	0					
ANR	5567187	UnaryOperator	!		5566949	0					
ANR	5567188	Identifier	opts_list		5566949	1					
ANR	5567189	PtrMemberAccess	opts_list -> desc -> name		5566949	1					
ANR	5567190	PtrMemberAccess	opts_list -> desc		5566949	0					
ANR	5567191	Identifier	opts_list		5566949	0					
ANR	5567192	Identifier	desc		5566949	1					
ANR	5567193	Identifier	name		5566949	1					
ANR	5567194	CompoundStatement		117:57:1827:1827	5566949	1					
ANR	5567195	GotoStatement	goto bad_type ;	125:20:2023:2036	5566949	0	True				
ANR	5567196	Identifier	bad_type		5566949	0					
ANR	5567197	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	4					
ANR	5567198	Condition	qemu_isspace ( * p )	129:23:2081:2096	5566949	0	True				
ANR	5567199	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5567200	Callee	qemu_isspace		5566949	0					
ANR	5567201	Identifier	qemu_isspace		5566949	0					
ANR	5567202	ArgumentList	* p		5566949	1					
ANR	5567203	Argument	* p		5566949	0					
ANR	5567204	UnaryOperationExpression	* p		5566949	0					
ANR	5567205	UnaryOperator	*		5566949	0					
ANR	5567206	Identifier	p		5566949	1					
ANR	5567207	CompoundStatement		123:41:1926:1926	5566949	1					
ANR	5567208	ExpressionStatement	p ++	131:20:2122:2125	5566949	0	True				
ANR	5567209	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567210	Identifier	p		5566949	0					
ANR	5567211	IncDec	++		5566949	1					
ANR	5567212	IfStatement	if ( ! * p )		5566949	5					
ANR	5567213	Condition	! * p	135:20:2167:2169	5566949	0	True				
ANR	5567214	UnaryOperationExpression	! * p		5566949	0					
ANR	5567215	UnaryOperator	!		5566949	0					
ANR	5567216	UnaryOperationExpression	* p		5566949	1					
ANR	5567217	UnaryOperator	*		5566949	0					
ANR	5567218	Identifier	p		5566949	1					
ANR	5567219	BreakStatement	break ;	137:20:2193:2198	5566949	1	True				
ANR	5567220	IfStatement	"if ( get_str ( buf , sizeof ( buf ) , & p ) < 0 )"		5566949	6					
ANR	5567221	Condition	"get_str ( buf , sizeof ( buf ) , & p ) < 0"	139:20:2221:2253	5566949	0	True				
ANR	5567222	RelationalExpression	"get_str ( buf , sizeof ( buf ) , & p ) < 0"		5566949	0		<			
ANR	5567223	CallExpression	"get_str ( buf , sizeof ( buf ) , & p )"		5566949	0					
ANR	5567224	Callee	get_str		5566949	0					
ANR	5567225	Identifier	get_str		5566949	0					
ANR	5567226	ArgumentList	buf		5566949	1					
ANR	5567227	Argument	buf		5566949	0					
ANR	5567228	Identifier	buf		5566949	0					
ANR	5567229	Argument	sizeof ( buf )		5566949	1					
ANR	5567230	SizeofExpression	sizeof ( buf )		5566949	0					
ANR	5567231	Sizeof	sizeof		5566949	0					
ANR	5567232	SizeofOperand	buf		5566949	1					
ANR	5567233	Argument	& p		5566949	2					
ANR	5567234	UnaryOperationExpression	& p		5566949	0					
ANR	5567235	UnaryOperator	&		5566949	0					
ANR	5567236	Identifier	p		5566949	1					
ANR	5567237	PrimaryExpression	0		5566949	1					
ANR	5567238	CompoundStatement		133:55:2083:2083	5566949	1					
ANR	5567239	GotoStatement	goto fail ;	141:20:2279:2288	5566949	0	True				
ANR	5567240	Identifier	fail		5566949	0					
ANR	5567241	ExpressionStatement	"opts = qemu_opts_parse_noisily ( opts_list , buf , true )"	145:16:2326:2378	5566949	7	True				
ANR	5567242	AssignmentExpression	"opts = qemu_opts_parse_noisily ( opts_list , buf , true )"		5566949	0		=			
ANR	5567243	Identifier	opts		5566949	0					
ANR	5567244	CallExpression	"qemu_opts_parse_noisily ( opts_list , buf , true )"		5566949	1					
ANR	5567245	Callee	qemu_opts_parse_noisily		5566949	0					
ANR	5567246	Identifier	qemu_opts_parse_noisily		5566949	0					
ANR	5567247	ArgumentList	opts_list		5566949	1					
ANR	5567248	Argument	opts_list		5566949	0					
ANR	5567249	Identifier	opts_list		5566949	0					
ANR	5567250	Argument	buf		5566949	1					
ANR	5567251	Identifier	buf		5566949	0					
ANR	5567252	Argument	true		5566949	2					
ANR	5567253	Identifier	true		5566949	0					
ANR	5567254	IfStatement	if ( ! opts )		5566949	8					
ANR	5567255	Condition	! opts	147:20:2401:2405	5566949	0	True				
ANR	5567256	UnaryOperationExpression	! opts		5566949	0					
ANR	5567257	UnaryOperator	!		5566949	0					
ANR	5567258	Identifier	opts		5566949	1					
ANR	5567259	CompoundStatement		141:27:2235:2235	5566949	1					
ANR	5567260	GotoStatement	goto fail ;	149:20:2431:2440	5566949	0	True				
ANR	5567261	Identifier	fail		5566949	0					
ANR	5567262	ExpressionStatement	"qemu_opts_to_qdict ( opts , qdict )"	153:16:2478:2509	5566949	9	True				
ANR	5567263	CallExpression	"qemu_opts_to_qdict ( opts , qdict )"		5566949	0					
ANR	5567264	Callee	qemu_opts_to_qdict		5566949	0					
ANR	5567265	Identifier	qemu_opts_to_qdict		5566949	0					
ANR	5567266	ArgumentList	opts		5566949	1					
ANR	5567267	Argument	opts		5566949	0					
ANR	5567268	Identifier	opts		5566949	0					
ANR	5567269	Argument	qdict		5566949	1					
ANR	5567270	Identifier	qdict		5566949	0					
ANR	5567271	ExpressionStatement	qemu_opts_del ( opts )	155:16:2528:2547	5566949	10	True				
ANR	5567272	CallExpression	qemu_opts_del ( opts )		5566949	0					
ANR	5567273	Callee	qemu_opts_del		5566949	0					
ANR	5567274	Identifier	qemu_opts_del		5566949	0					
ANR	5567275	ArgumentList	opts		5566949	1					
ANR	5567276	Argument	opts		5566949	0					
ANR	5567277	Identifier	opts		5566949	0					
ANR	5567278	BreakStatement	break ;	159:12:2577:2582	5566949	7	True				
ANR	5567279	Label	case '/' :	161:8:2593:2601	5566949	8	True				
ANR	5567280	CompoundStatement		159:16:2462:2485	5566949	9					
ANR	5567281	IdentifierDeclStatement	"int count , format , size ;"	165:16:2635:2658	5566949	0	True				
ANR	5567282	IdentifierDecl	count		5566949	0					
ANR	5567283	IdentifierDeclType	int		5566949	0					
ANR	5567284	Identifier	count		5566949	1					
ANR	5567285	IdentifierDecl	format		5566949	1					
ANR	5567286	IdentifierDeclType	int		5566949	0					
ANR	5567287	Identifier	format		5566949	1					
ANR	5567288	IdentifierDecl	size		5566949	2					
ANR	5567289	IdentifierDeclType	int		5566949	0					
ANR	5567290	Identifier	size		5566949	1					
ANR	5567291	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	1					
ANR	5567292	Condition	qemu_isspace ( * p )	169:23:2686:2701	5566949	0	True				
ANR	5567293	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5567294	Callee	qemu_isspace		5566949	0					
ANR	5567295	Identifier	qemu_isspace		5566949	0					
ANR	5567296	ArgumentList	* p		5566949	1					
ANR	5567297	Argument	* p		5566949	0					
ANR	5567298	UnaryOperationExpression	* p		5566949	0					
ANR	5567299	UnaryOperator	*		5566949	0					
ANR	5567300	Identifier	p		5566949	1					
ANR	5567301	ExpressionStatement	p ++	171:20:2725:2728	5566949	1	True				
ANR	5567302	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567303	Identifier	p		5566949	0					
ANR	5567304	IncDec	++		5566949	1					
ANR	5567305	IfStatement	if ( * p == '/' )		5566949	2					
ANR	5567306	Condition	* p == '/'	173:20:2751:2759	5566949	0	True				
ANR	5567307	EqualityExpression	* p == '/'		5566949	0		==			
ANR	5567308	UnaryOperationExpression	* p		5566949	0					
ANR	5567309	UnaryOperator	*		5566949	0					
ANR	5567310	Identifier	p		5566949	1					
ANR	5567311	PrimaryExpression	'/'		5566949	1					
ANR	5567312	CompoundStatement		167:31:2589:2589	5566949	1					
ANR	5567313	ExpressionStatement	p ++	177:20:2825:2828	5566949	0	True				
ANR	5567314	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567315	Identifier	p		5566949	0					
ANR	5567316	IncDec	++		5566949	1					
ANR	5567317	ExpressionStatement	count = 1	179:20:2851:2860	5566949	1	True				
ANR	5567318	AssignmentExpression	count = 1		5566949	0		=			
ANR	5567319	Identifier	count		5566949	0					
ANR	5567320	PrimaryExpression	1		5566949	1					
ANR	5567321	IfStatement	if ( qemu_isdigit ( * p ) )		5566949	2					
ANR	5567322	Condition	qemu_isdigit ( * p )	181:24:2887:2902	5566949	0	True				
ANR	5567323	CallExpression	qemu_isdigit ( * p )		5566949	0					
ANR	5567324	Callee	qemu_isdigit		5566949	0					
ANR	5567325	Identifier	qemu_isdigit		5566949	0					
ANR	5567326	ArgumentList	* p		5566949	1					
ANR	5567327	Argument	* p		5566949	0					
ANR	5567328	UnaryOperationExpression	* p		5566949	0					
ANR	5567329	UnaryOperator	*		5566949	0					
ANR	5567330	Identifier	p		5566949	1					
ANR	5567331	CompoundStatement		175:42:2732:2732	5566949	1					
ANR	5567332	ExpressionStatement	count = 0	183:24:2932:2941	5566949	0	True				
ANR	5567333	AssignmentExpression	count = 0		5566949	0		=			
ANR	5567334	Identifier	count		5566949	0					
ANR	5567335	PrimaryExpression	0		5566949	1					
ANR	5567336	WhileStatement	while ( qemu_isdigit ( * p ) )		5566949	1					
ANR	5567337	Condition	qemu_isdigit ( * p )	185:31:2975:2990	5566949	0	True				
ANR	5567338	CallExpression	qemu_isdigit ( * p )		5566949	0					
ANR	5567339	Callee	qemu_isdigit		5566949	0					
ANR	5567340	Identifier	qemu_isdigit		5566949	0					
ANR	5567341	ArgumentList	* p		5566949	1					
ANR	5567342	Argument	* p		5566949	0					
ANR	5567343	UnaryOperationExpression	* p		5566949	0					
ANR	5567344	UnaryOperator	*		5566949	0					
ANR	5567345	Identifier	p		5566949	1					
ANR	5567346	CompoundStatement		179:49:2820:2820	5566949	1					
ANR	5567347	ExpressionStatement	count = count * 10 + ( * p - '0' )	187:28:3024:3055	5566949	0	True				
ANR	5567348	AssignmentExpression	count = count * 10 + ( * p - '0' )		5566949	0		=			
ANR	5567349	Identifier	count		5566949	0					
ANR	5567350	AdditiveExpression	count * 10 + ( * p - '0' )		5566949	1		+			
ANR	5567351	MultiplicativeExpression	count * 10		5566949	0		*			
ANR	5567352	Identifier	count		5566949	0					
ANR	5567353	PrimaryExpression	10		5566949	1					
ANR	5567354	AdditiveExpression	* p - '0'		5566949	1		-			
ANR	5567355	UnaryOperationExpression	* p		5566949	0					
ANR	5567356	UnaryOperator	*		5566949	0					
ANR	5567357	Identifier	p		5566949	1					
ANR	5567358	PrimaryExpression	'0'		5566949	1					
ANR	5567359	ExpressionStatement	p ++	189:28:3086:3089	5566949	1	True				
ANR	5567360	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567361	Identifier	p		5566949	0					
ANR	5567362	IncDec	++		5566949	1					
ANR	5567363	ExpressionStatement	size = - 1	195:20:3162:3171	5566949	3	True				
ANR	5567364	AssignmentExpression	size = - 1		5566949	0		=			
ANR	5567365	Identifier	size		5566949	0					
ANR	5567366	UnaryOperationExpression	- 1		5566949	1					
ANR	5567367	UnaryOperator	-		5566949	0					
ANR	5567368	PrimaryExpression	1		5566949	1					
ANR	5567369	ExpressionStatement	format = - 1	197:20:3194:3205	5566949	4	True				
ANR	5567370	AssignmentExpression	format = - 1		5566949	0		=			
ANR	5567371	Identifier	format		5566949	0					
ANR	5567372	UnaryOperationExpression	- 1		5566949	1					
ANR	5567373	UnaryOperator	-		5566949	0					
ANR	5567374	PrimaryExpression	1		5566949	1					
ANR	5567375	ForStatement	for ( ; ; )		5566949	5					
ANR	5567376	CompoundStatement		193:28:3063:3063	5566949	0					
ANR	5567377	SwitchStatement	switch ( * p )		5566949	0					
ANR	5567378	Condition	* p	201:31:3270:3271	5566949	0	True				
ANR	5567379	UnaryOperationExpression	* p		5566949	0					
ANR	5567380	UnaryOperator	*		5566949	0					
ANR	5567381	Identifier	p		5566949	1					
ANR	5567382	CompoundStatement		195:35:3101:3101	5566949	1					
ANR	5567383	Label	case 'o' :	203:24:3301:3309	5566949	0	True				
ANR	5567384	Label	case 'd' :	205:24:3336:3344	5566949	1	True				
ANR	5567385	Label	case 'u' :	207:24:3371:3379	5566949	2	True				
ANR	5567386	Label	case 'x' :	209:24:3406:3414	5566949	3	True				
ANR	5567387	Label	case 'i' :	211:24:3441:3449	5566949	4	True				
ANR	5567388	Label	case 'c' :	213:24:3476:3484	5566949	5	True				
ANR	5567389	ExpressionStatement	format = * p ++	215:28:3515:3528	5566949	6	True				
ANR	5567390	AssignmentExpression	format = * p ++		5566949	0		=			
ANR	5567391	Identifier	format		5566949	0					
ANR	5567392	UnaryOperationExpression	* p ++		5566949	1					
ANR	5567393	UnaryOperator	*		5566949	0					
ANR	5567394	PostIncDecOperationExpression	p ++		5566949	1					
ANR	5567395	Identifier	p		5566949	0					
ANR	5567396	IncDec	++		5566949	1					
ANR	5567397	BreakStatement	break ;	217:28:3559:3564	5566949	7	True				
ANR	5567398	Label	case 'b' :	219:24:3591:3599	5566949	8	True				
ANR	5567399	ExpressionStatement	size = 1	221:28:3630:3638	5566949	9	True				
ANR	5567400	AssignmentExpression	size = 1		5566949	0		=			
ANR	5567401	Identifier	size		5566949	0					
ANR	5567402	PrimaryExpression	1		5566949	1					
ANR	5567403	ExpressionStatement	p ++	223:28:3669:3672	5566949	10	True				
ANR	5567404	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567405	Identifier	p		5566949	0					
ANR	5567406	IncDec	++		5566949	1					
ANR	5567407	BreakStatement	break ;	225:28:3703:3708	5566949	11	True				
ANR	5567408	Label	case 'h' :	227:24:3735:3743	5566949	12	True				
ANR	5567409	ExpressionStatement	size = 2	229:28:3774:3782	5566949	13	True				
ANR	5567410	AssignmentExpression	size = 2		5566949	0		=			
ANR	5567411	Identifier	size		5566949	0					
ANR	5567412	PrimaryExpression	2		5566949	1					
ANR	5567413	ExpressionStatement	p ++	231:28:3813:3816	5566949	14	True				
ANR	5567414	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567415	Identifier	p		5566949	0					
ANR	5567416	IncDec	++		5566949	1					
ANR	5567417	BreakStatement	break ;	233:28:3847:3852	5566949	15	True				
ANR	5567418	Label	case 'w' :	235:24:3879:3887	5566949	16	True				
ANR	5567419	ExpressionStatement	size = 4	237:28:3918:3926	5566949	17	True				
ANR	5567420	AssignmentExpression	size = 4		5566949	0		=			
ANR	5567421	Identifier	size		5566949	0					
ANR	5567422	PrimaryExpression	4		5566949	1					
ANR	5567423	ExpressionStatement	p ++	239:28:3957:3960	5566949	18	True				
ANR	5567424	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567425	Identifier	p		5566949	0					
ANR	5567426	IncDec	++		5566949	1					
ANR	5567427	BreakStatement	break ;	241:28:3991:3996	5566949	19	True				
ANR	5567428	Label	case 'g' :	243:24:4023:4031	5566949	20	True				
ANR	5567429	Label	case 'L' :	245:24:4058:4066	5566949	21	True				
ANR	5567430	ExpressionStatement	size = 8	247:28:4097:4105	5566949	22	True				
ANR	5567431	AssignmentExpression	size = 8		5566949	0		=			
ANR	5567432	Identifier	size		5566949	0					
ANR	5567433	PrimaryExpression	8		5566949	1					
ANR	5567434	ExpressionStatement	p ++	249:28:4136:4139	5566949	23	True				
ANR	5567435	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567436	Identifier	p		5566949	0					
ANR	5567437	IncDec	++		5566949	1					
ANR	5567438	BreakStatement	break ;	251:28:4170:4175	5566949	24	True				
ANR	5567439	Label	default :	253:24:4202:4209	5566949	25	True				
ANR	5567440	Identifier	default		5566949	0					
ANR	5567441	GotoStatement	goto next ;	255:28:4240:4249	5566949	26	True				
ANR	5567442	Identifier	next		5566949	0					
ANR	5567443	Label	next :	261:16:4318:4322	5566949	6	True				
ANR	5567444	Identifier	next		5566949	0					
ANR	5567445	IfStatement	if ( * p != '\\0' && ! qemu_isspace ( * p ) )		5566949	7					
ANR	5567446	Condition	* p != '\\0' && ! qemu_isspace ( * p )	263:24:4349:4379	5566949	0	True				
ANR	5567447	AndExpression	* p != '\\0' && ! qemu_isspace ( * p )		5566949	0		&&			
ANR	5567448	EqualityExpression	* p != '\\0'		5566949	0		!=			
ANR	5567449	UnaryOperationExpression	* p		5566949	0					
ANR	5567450	UnaryOperator	*		5566949	0					
ANR	5567451	Identifier	p		5566949	1					
ANR	5567452	PrimaryExpression	'\\0'		5566949	1					
ANR	5567453	UnaryOperationExpression	! qemu_isspace ( * p )		5566949	1					
ANR	5567454	UnaryOperator	!		5566949	0					
ANR	5567455	CallExpression	qemu_isspace ( * p )		5566949	1					
ANR	5567456	Callee	qemu_isspace		5566949	0					
ANR	5567457	Identifier	qemu_isspace		5566949	0					
ANR	5567458	ArgumentList	* p		5566949	1					
ANR	5567459	Argument	* p		5566949	0					
ANR	5567460	UnaryOperationExpression	* p		5566949	0					
ANR	5567461	UnaryOperator	*		5566949	0					
ANR	5567462	Identifier	p		5566949	1					
ANR	5567463	CompoundStatement		257:57:4209:4209	5566949	1					
ANR	5567464	ExpressionStatement	"monitor_printf ( mon , ""invalid char in format: '%c'\\n"" , * p )"	265:24:4409:4506	5566949	0	True				
ANR	5567465	CallExpression	"monitor_printf ( mon , ""invalid char in format: '%c'\\n"" , * p )"		5566949	0					
ANR	5567466	Callee	monitor_printf		5566949	0					
ANR	5567467	Identifier	monitor_printf		5566949	0					
ANR	5567468	ArgumentList	mon		5566949	1					
ANR	5567469	Argument	mon		5566949	0					
ANR	5567470	Identifier	mon		5566949	0					
ANR	5567471	Argument	"""invalid char in format: '%c'\\n"""		5566949	1					
ANR	5567472	PrimaryExpression	"""invalid char in format: '%c'\\n"""		5566949	0					
ANR	5567473	Argument	* p		5566949	2					
ANR	5567474	UnaryOperationExpression	* p		5566949	0					
ANR	5567475	UnaryOperator	*		5566949	0					
ANR	5567476	Identifier	p		5566949	1					
ANR	5567477	GotoStatement	goto fail ;	269:24:4533:4542	5566949	1	True				
ANR	5567478	Identifier	fail		5566949	0					
ANR	5567479	IfStatement	if ( format < 0 )		5566949	8					
ANR	5567480	Condition	format < 0	273:24:4592:4601	5566949	0	True				
ANR	5567481	RelationalExpression	format < 0		5566949	0		<			
ANR	5567482	Identifier	format		5566949	0					
ANR	5567483	PrimaryExpression	0		5566949	1					
ANR	5567484	ExpressionStatement	format = default_fmt_format	275:24:4629:4656	5566949	1	True				
ANR	5567485	AssignmentExpression	format = default_fmt_format		5566949	0		=			
ANR	5567486	Identifier	format		5566949	0					
ANR	5567487	Identifier	default_fmt_format		5566949	1					
ANR	5567488	IfStatement	if ( format != 'i' )		5566949	9					
ANR	5567489	Condition	format != 'i'	277:24:4683:4695	5566949	0	True				
ANR	5567490	EqualityExpression	format != 'i'		5566949	0		!=			
ANR	5567491	Identifier	format		5566949	0					
ANR	5567492	PrimaryExpression	'i'		5566949	1					
ANR	5567493	CompoundStatement		271:39:4525:4525	5566949	1					
ANR	5567494	IfStatement	if ( size < 0 )		5566949	0					
ANR	5567495	Condition	size < 0	281:28:4808:4815	5566949	0	True				
ANR	5567496	RelationalExpression	size < 0		5566949	0		<			
ANR	5567497	Identifier	size		5566949	0					
ANR	5567498	PrimaryExpression	0		5566949	1					
ANR	5567499	ExpressionStatement	size = default_fmt_size	283:28:4847:4870	5566949	1	True				
ANR	5567500	AssignmentExpression	size = default_fmt_size		5566949	0		=			
ANR	5567501	Identifier	size		5566949	0					
ANR	5567502	Identifier	default_fmt_size		5566949	1					
ANR	5567503	ExpressionStatement	default_fmt_size = size	285:24:4897:4920	5566949	1	True				
ANR	5567504	AssignmentExpression	default_fmt_size = size		5566949	0		=			
ANR	5567505	Identifier	default_fmt_size		5566949	0					
ANR	5567506	Identifier	size		5566949	1					
ANR	5567507	ExpressionStatement	default_fmt_format = format	289:20:4966:4993	5566949	10	True				
ANR	5567508	AssignmentExpression	default_fmt_format = format		5566949	0		=			
ANR	5567509	Identifier	default_fmt_format		5566949	0					
ANR	5567510	Identifier	format		5566949	1					
ANR	5567511	ElseStatement	else		5566949	0					
ANR	5567512	CompoundStatement		285:23:4846:4846	5566949	0					
ANR	5567513	ExpressionStatement	count = 1	293:20:5042:5051	5566949	0	True				
ANR	5567514	AssignmentExpression	count = 1		5566949	0		=			
ANR	5567515	Identifier	count		5566949	0					
ANR	5567516	PrimaryExpression	1		5566949	1					
ANR	5567517	ExpressionStatement	format = default_fmt_format	295:20:5074:5101	5566949	1	True				
ANR	5567518	AssignmentExpression	format = default_fmt_format		5566949	0		=			
ANR	5567519	Identifier	format		5566949	0					
ANR	5567520	Identifier	default_fmt_format		5566949	1					
ANR	5567521	IfStatement	if ( format != 'i' )		5566949	2					
ANR	5567522	Condition	format != 'i'	297:24:5128:5140	5566949	0	True				
ANR	5567523	EqualityExpression	format != 'i'		5566949	0		!=			
ANR	5567524	Identifier	format		5566949	0					
ANR	5567525	PrimaryExpression	'i'		5566949	1					
ANR	5567526	CompoundStatement		291:39:4970:4970	5566949	1					
ANR	5567527	ExpressionStatement	size = default_fmt_size	299:24:5170:5193	5566949	0	True				
ANR	5567528	AssignmentExpression	size = default_fmt_size		5566949	0		=			
ANR	5567529	Identifier	size		5566949	0					
ANR	5567530	Identifier	default_fmt_size		5566949	1					
ANR	5567531	ElseStatement	else		5566949	0					
ANR	5567532	CompoundStatement		295:27:5050:5050	5566949	0					
ANR	5567533	ExpressionStatement	size = - 1	303:24:5250:5259	5566949	0	True				
ANR	5567534	AssignmentExpression	size = - 1		5566949	0		=			
ANR	5567535	Identifier	size		5566949	0					
ANR	5567536	UnaryOperationExpression	- 1		5566949	1					
ANR	5567537	UnaryOperator	-		5566949	0					
ANR	5567538	PrimaryExpression	1		5566949	1					
ANR	5567539	ExpressionStatement	"qdict_put ( qdict , ""count"" , qint_from_int ( count ) )"	309:16:5320:5367	5566949	3	True				
ANR	5567540	CallExpression	"qdict_put ( qdict , ""count"" , qint_from_int ( count ) )"		5566949	0					
ANR	5567541	Callee	qdict_put		5566949	0					
ANR	5567542	Identifier	qdict_put		5566949	0					
ANR	5567543	ArgumentList	qdict		5566949	1					
ANR	5567544	Argument	qdict		5566949	0					
ANR	5567545	Identifier	qdict		5566949	0					
ANR	5567546	Argument	"""count"""		5566949	1					
ANR	5567547	PrimaryExpression	"""count"""		5566949	0					
ANR	5567548	Argument	qint_from_int ( count )		5566949	2					
ANR	5567549	CallExpression	qint_from_int ( count )		5566949	0					
ANR	5567550	Callee	qint_from_int		5566949	0					
ANR	5567551	Identifier	qint_from_int		5566949	0					
ANR	5567552	ArgumentList	count		5566949	1					
ANR	5567553	Argument	count		5566949	0					
ANR	5567554	Identifier	count		5566949	0					
ANR	5567555	ExpressionStatement	"qdict_put ( qdict , ""format"" , qint_from_int ( format ) )"	311:16:5386:5435	5566949	4	True				
ANR	5567556	CallExpression	"qdict_put ( qdict , ""format"" , qint_from_int ( format ) )"		5566949	0					
ANR	5567557	Callee	qdict_put		5566949	0					
ANR	5567558	Identifier	qdict_put		5566949	0					
ANR	5567559	ArgumentList	qdict		5566949	1					
ANR	5567560	Argument	qdict		5566949	0					
ANR	5567561	Identifier	qdict		5566949	0					
ANR	5567562	Argument	"""format"""		5566949	1					
ANR	5567563	PrimaryExpression	"""format"""		5566949	0					
ANR	5567564	Argument	qint_from_int ( format )		5566949	2					
ANR	5567565	CallExpression	qint_from_int ( format )		5566949	0					
ANR	5567566	Callee	qint_from_int		5566949	0					
ANR	5567567	Identifier	qint_from_int		5566949	0					
ANR	5567568	ArgumentList	format		5566949	1					
ANR	5567569	Argument	format		5566949	0					
ANR	5567570	Identifier	format		5566949	0					
ANR	5567571	ExpressionStatement	"qdict_put ( qdict , ""size"" , qint_from_int ( size ) )"	313:16:5454:5499	5566949	5	True				
ANR	5567572	CallExpression	"qdict_put ( qdict , ""size"" , qint_from_int ( size ) )"		5566949	0					
ANR	5567573	Callee	qdict_put		5566949	0					
ANR	5567574	Identifier	qdict_put		5566949	0					
ANR	5567575	ArgumentList	qdict		5566949	1					
ANR	5567576	Argument	qdict		5566949	0					
ANR	5567577	Identifier	qdict		5566949	0					
ANR	5567578	Argument	"""size"""		5566949	1					
ANR	5567579	PrimaryExpression	"""size"""		5566949	0					
ANR	5567580	Argument	qint_from_int ( size )		5566949	2					
ANR	5567581	CallExpression	qint_from_int ( size )		5566949	0					
ANR	5567582	Callee	qint_from_int		5566949	0					
ANR	5567583	Identifier	qint_from_int		5566949	0					
ANR	5567584	ArgumentList	size		5566949	1					
ANR	5567585	Argument	size		5566949	0					
ANR	5567586	Identifier	size		5566949	0					
ANR	5567587	BreakStatement	break ;	317:12:5529:5534	5566949	10	True				
ANR	5567588	Label	case 'i' :	319:8:5545:5553	5566949	11	True				
ANR	5567589	Label	case 'l' :	321:8:5564:5572	5566949	12	True				
ANR	5567590	Label	case 'M' :	323:8:5583:5591	5566949	13	True				
ANR	5567591	CompoundStatement		321:16:5452:5463	5566949	14					
ANR	5567592	IdentifierDeclStatement	int64_t val ;	327:16:5625:5636	5566949	0	True				
ANR	5567593	IdentifierDecl	val		5566949	0					
ANR	5567594	IdentifierDeclType	int64_t		5566949	0					
ANR	5567595	Identifier	val		5566949	1					
ANR	5567596	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	1					
ANR	5567597	Condition	qemu_isspace ( * p )	331:23:5664:5679	5566949	0	True				
ANR	5567598	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5567599	Callee	qemu_isspace		5566949	0					
ANR	5567600	Identifier	qemu_isspace		5566949	0					
ANR	5567601	ArgumentList	* p		5566949	1					
ANR	5567602	Argument	* p		5566949	0					
ANR	5567603	UnaryOperationExpression	* p		5566949	0					
ANR	5567604	UnaryOperator	*		5566949	0					
ANR	5567605	Identifier	p		5566949	1					
ANR	5567606	ExpressionStatement	p ++	333:20:5703:5706	5566949	1	True				
ANR	5567607	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567608	Identifier	p		5566949	0					
ANR	5567609	IncDec	++		5566949	1					
ANR	5567610	IfStatement	if ( * typestr == '?' || * typestr == '.' )		5566949	2					
ANR	5567611	Condition	* typestr == '?' || * typestr == '.'	335:20:5729:5762	5566949	0	True				
ANR	5567612	OrExpression	* typestr == '?' || * typestr == '.'		5566949	0		||			
ANR	5567613	EqualityExpression	* typestr == '?'		5566949	0		==			
ANR	5567614	UnaryOperationExpression	* typestr		5566949	0					
ANR	5567615	UnaryOperator	*		5566949	0					
ANR	5567616	Identifier	typestr		5566949	1					
ANR	5567617	PrimaryExpression	'?'		5566949	1					
ANR	5567618	EqualityExpression	* typestr == '.'		5566949	1		==			
ANR	5567619	UnaryOperationExpression	* typestr		5566949	0					
ANR	5567620	UnaryOperator	*		5566949	0					
ANR	5567621	Identifier	typestr		5566949	1					
ANR	5567622	PrimaryExpression	'.'		5566949	1					
ANR	5567623	CompoundStatement		329:56:5592:5592	5566949	1					
ANR	5567624	IfStatement	if ( * typestr == '?' )		5566949	0					
ANR	5567625	Condition	* typestr == '?'	337:24:5792:5806	5566949	0	True				
ANR	5567626	EqualityExpression	* typestr == '?'		5566949	0		==			
ANR	5567627	UnaryOperationExpression	* typestr		5566949	0					
ANR	5567628	UnaryOperator	*		5566949	0					
ANR	5567629	Identifier	typestr		5566949	1					
ANR	5567630	PrimaryExpression	'?'		5566949	1					
ANR	5567631	CompoundStatement		331:41:5636:5636	5566949	1					
ANR	5567632	IfStatement	if ( * p == '\\0' )		5566949	0					
ANR	5567633	Condition	* p == '\\0'	339:28:5840:5849	5566949	0	True				
ANR	5567634	EqualityExpression	* p == '\\0'		5566949	0		==			
ANR	5567635	UnaryOperationExpression	* p		5566949	0					
ANR	5567636	UnaryOperator	*		5566949	0					
ANR	5567637	Identifier	p		5566949	1					
ANR	5567638	PrimaryExpression	'\\0'		5566949	1					
ANR	5567639	CompoundStatement		333:40:5679:5679	5566949	1					
ANR	5567640	ExpressionStatement	typestr ++	341:28:5883:5892	5566949	0	True				
ANR	5567641	PostIncDecOperationExpression	typestr ++		5566949	0					
ANR	5567642	Identifier	typestr		5566949	0					
ANR	5567643	IncDec	++		5566949	1					
ANR	5567644	BreakStatement	break ;	343:28:5923:5928	5566949	1	True				
ANR	5567645	ElseStatement	else		5566949	0					
ANR	5567646	CompoundStatement		341:27:5812:5812	5566949	0					
ANR	5567647	IfStatement	if ( * p == '.' )		5566949	0					
ANR	5567648	Condition	* p == '.'	349:28:6016:6024	5566949	0	True				
ANR	5567649	EqualityExpression	* p == '.'		5566949	0		==			
ANR	5567650	UnaryOperationExpression	* p		5566949	0					
ANR	5567651	UnaryOperator	*		5566949	0					
ANR	5567652	Identifier	p		5566949	1					
ANR	5567653	PrimaryExpression	'.'		5566949	1					
ANR	5567654	CompoundStatement		343:39:5854:5854	5566949	1					
ANR	5567655	ExpressionStatement	p ++	351:28:6058:6061	5566949	0	True				
ANR	5567656	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567657	Identifier	p		5566949	0					
ANR	5567658	IncDec	++		5566949	1					
ANR	5567659	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	1					
ANR	5567660	Condition	qemu_isspace ( * p )	353:35:6099:6114	5566949	0	True				
ANR	5567661	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5567662	Callee	qemu_isspace		5566949	0					
ANR	5567663	Identifier	qemu_isspace		5566949	0					
ANR	5567664	ArgumentList	* p		5566949	1					
ANR	5567665	Argument	* p		5566949	0					
ANR	5567666	UnaryOperationExpression	* p		5566949	0					
ANR	5567667	UnaryOperator	*		5566949	0					
ANR	5567668	Identifier	p		5566949	1					
ANR	5567669	ExpressionStatement	p ++	355:32:6150:6153	5566949	1	True				
ANR	5567670	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567671	Identifier	p		5566949	0					
ANR	5567672	IncDec	++		5566949	1					
ANR	5567673	ElseStatement	else		5566949	0					
ANR	5567674	CompoundStatement		351:31:6014:6014	5566949	0					
ANR	5567675	ExpressionStatement	typestr ++	359:28:6218:6227	5566949	0	True				
ANR	5567676	PostIncDecOperationExpression	typestr ++		5566949	0					
ANR	5567677	Identifier	typestr		5566949	0					
ANR	5567678	IncDec	++		5566949	1					
ANR	5567679	BreakStatement	break ;	361:28:6258:6263	5566949	1	True				
ANR	5567680	ExpressionStatement	typestr ++	367:20:6336:6345	5566949	1	True				
ANR	5567681	PostIncDecOperationExpression	typestr ++		5566949	0					
ANR	5567682	Identifier	typestr		5566949	0					
ANR	5567683	IncDec	++		5566949	1					
ANR	5567684	IfStatement	"if ( get_expr ( mon , & val , & p ) )"		5566949	3					
ANR	5567685	Condition	"get_expr ( mon , & val , & p )"	371:20:6387:6409	5566949	0	True				
ANR	5567686	CallExpression	"get_expr ( mon , & val , & p )"		5566949	0					
ANR	5567687	Callee	get_expr		5566949	0					
ANR	5567688	Identifier	get_expr		5566949	0					
ANR	5567689	ArgumentList	mon		5566949	1					
ANR	5567690	Argument	mon		5566949	0					
ANR	5567691	Identifier	mon		5566949	0					
ANR	5567692	Argument	& val		5566949	1					
ANR	5567693	UnaryOperationExpression	& val		5566949	0					
ANR	5567694	UnaryOperator	&		5566949	0					
ANR	5567695	Identifier	val		5566949	1					
ANR	5567696	Argument	& p		5566949	2					
ANR	5567697	UnaryOperationExpression	& p		5566949	0					
ANR	5567698	UnaryOperator	&		5566949	0					
ANR	5567699	Identifier	p		5566949	1					
ANR	5567700	GotoStatement	goto fail ;	373:20:6433:6442	5566949	1	True				
ANR	5567701	Identifier	fail		5566949	0					
ANR	5567702	IfStatement	if ( ( c == 'i' ) && ( ( val >> 32 ) & 0xffffffff ) )		5566949	4					
ANR	5567703	Condition	( c == 'i' ) && ( ( val >> 32 ) & 0xffffffff )	377:20:6524:6563	5566949	0	True				
ANR	5567704	AndExpression	( c == 'i' ) && ( ( val >> 32 ) & 0xffffffff )		5566949	0		&&			
ANR	5567705	EqualityExpression	c == 'i'		5566949	0		==			
ANR	5567706	Identifier	c		5566949	0					
ANR	5567707	PrimaryExpression	'i'		5566949	1					
ANR	5567708	BitAndExpression	( val >> 32 ) & 0xffffffff		5566949	1		&			
ANR	5567709	ShiftExpression	val >> 32		5566949	0		>>			
ANR	5567710	Identifier	val		5566949	0					
ANR	5567711	PrimaryExpression	32		5566949	1					
ANR	5567712	PrimaryExpression	0xffffffff		5566949	1					
ANR	5567713	CompoundStatement		371:62:6393:6393	5566949	1					
ANR	5567714	ExpressionStatement	"monitor_printf ( mon , ""\\'%s\\' has failed: "" , cmd -> name )"	379:20:6589:6642	5566949	0	True				
ANR	5567715	CallExpression	"monitor_printf ( mon , ""\\'%s\\' has failed: "" , cmd -> name )"		5566949	0					
ANR	5567716	Callee	monitor_printf		5566949	0					
ANR	5567717	Identifier	monitor_printf		5566949	0					
ANR	5567718	ArgumentList	mon		5566949	1					
ANR	5567719	Argument	mon		5566949	0					
ANR	5567720	Identifier	mon		5566949	0					
ANR	5567721	Argument	"""\\'%s\\' has failed: """		5566949	1					
ANR	5567722	PrimaryExpression	"""\\'%s\\' has failed: """		5566949	0					
ANR	5567723	Argument	cmd -> name		5566949	2					
ANR	5567724	PtrMemberAccess	cmd -> name		5566949	0					
ANR	5567725	Identifier	cmd		5566949	0					
ANR	5567726	Identifier	name		5566949	1					
ANR	5567727	ExpressionStatement	"monitor_printf ( mon , ""integer is for 32-bit values\\n"" )"	381:20:6665:6718	5566949	1	True				
ANR	5567728	CallExpression	"monitor_printf ( mon , ""integer is for 32-bit values\\n"" )"		5566949	0					
ANR	5567729	Callee	monitor_printf		5566949	0					
ANR	5567730	Identifier	monitor_printf		5566949	0					
ANR	5567731	ArgumentList	mon		5566949	1					
ANR	5567732	Argument	mon		5566949	0					
ANR	5567733	Identifier	mon		5566949	0					
ANR	5567734	Argument	"""integer is for 32-bit values\\n"""		5566949	1					
ANR	5567735	PrimaryExpression	"""integer is for 32-bit values\\n"""		5566949	0					
ANR	5567736	GotoStatement	goto fail ;	383:20:6741:6750	5566949	2	True				
ANR	5567737	Identifier	fail		5566949	0					
ANR	5567738	ElseStatement	else		5566949	0					
ANR	5567739	IfStatement	if ( c == 'M' )		5566949	0					
ANR	5567740	Condition	c == 'M'	385:27:6780:6787	5566949	0	True				
ANR	5567741	EqualityExpression	c == 'M'		5566949	0		==			
ANR	5567742	Identifier	c		5566949	0					
ANR	5567743	PrimaryExpression	'M'		5566949	1					
ANR	5567744	CompoundStatement		379:37:6617:6617	5566949	1					
ANR	5567745	IfStatement	if ( val < 0 )		5566949	0					
ANR	5567746	Condition	val < 0	387:24:6817:6823	5566949	0	True				
ANR	5567747	RelationalExpression	val < 0		5566949	0		<			
ANR	5567748	Identifier	val		5566949	0					
ANR	5567749	PrimaryExpression	0		5566949	1					
ANR	5567750	CompoundStatement		381:33:6653:6653	5566949	1					
ANR	5567751	ExpressionStatement	"monitor_printf ( mon , ""enter a positive value\\n"" )"	389:24:6853:6900	5566949	0	True				
ANR	5567752	CallExpression	"monitor_printf ( mon , ""enter a positive value\\n"" )"		5566949	0					
ANR	5567753	Callee	monitor_printf		5566949	0					
ANR	5567754	Identifier	monitor_printf		5566949	0					
ANR	5567755	ArgumentList	mon		5566949	1					
ANR	5567756	Argument	mon		5566949	0					
ANR	5567757	Identifier	mon		5566949	0					
ANR	5567758	Argument	"""enter a positive value\\n"""		5566949	1					
ANR	5567759	PrimaryExpression	"""enter a positive value\\n"""		5566949	0					
ANR	5567760	GotoStatement	goto fail ;	391:24:6927:6936	5566949	1	True				
ANR	5567761	Identifier	fail		5566949	0					
ANR	5567762	ExpressionStatement	val <<= 20	395:20:6982:6992	5566949	1	True				
ANR	5567763	AssignmentExpression	val <<= 20		5566949	0		<<=			
ANR	5567764	Identifier	val		5566949	0					
ANR	5567765	PrimaryExpression	20		5566949	1					
ANR	5567766	ExpressionStatement	"qdict_put ( qdict , key , qint_from_int ( val ) )"	399:16:7030:7071	5566949	5	True				
ANR	5567767	CallExpression	"qdict_put ( qdict , key , qint_from_int ( val ) )"		5566949	0					
ANR	5567768	Callee	qdict_put		5566949	0					
ANR	5567769	Identifier	qdict_put		5566949	0					
ANR	5567770	ArgumentList	qdict		5566949	1					
ANR	5567771	Argument	qdict		5566949	0					
ANR	5567772	Identifier	qdict		5566949	0					
ANR	5567773	Argument	key		5566949	1					
ANR	5567774	Identifier	key		5566949	0					
ANR	5567775	Argument	qint_from_int ( val )		5566949	2					
ANR	5567776	CallExpression	qint_from_int ( val )		5566949	0					
ANR	5567777	Callee	qint_from_int		5566949	0					
ANR	5567778	Identifier	qint_from_int		5566949	0					
ANR	5567779	ArgumentList	val		5566949	1					
ANR	5567780	Argument	val		5566949	0					
ANR	5567781	Identifier	val		5566949	0					
ANR	5567782	BreakStatement	break ;	403:12:7101:7106	5566949	15	True				
ANR	5567783	Label	case 'o' :	405:8:7117:7125	5566949	16	True				
ANR	5567784	CompoundStatement		405:16:7016:7025	5566949	17					
ANR	5567785	IdentifierDeclStatement	int64_t val ;	409:16:7159:7170	5566949	0	True				
ANR	5567786	IdentifierDecl	val		5566949	0					
ANR	5567787	IdentifierDeclType	int64_t		5566949	0					
ANR	5567788	Identifier	val		5566949	1					
ANR	5567789	IdentifierDeclStatement	char * end ;	411:16:7189:7198	5566949	1	True				
ANR	5567790	IdentifierDecl	* end		5566949	0					
ANR	5567791	IdentifierDeclType	char *		5566949	0					
ANR	5567792	Identifier	end		5566949	1					
ANR	5567793	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	2					
ANR	5567794	Condition	qemu_isspace ( * p )	415:23:7226:7241	5566949	0	True				
ANR	5567795	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5567796	Callee	qemu_isspace		5566949	0					
ANR	5567797	Identifier	qemu_isspace		5566949	0					
ANR	5567798	ArgumentList	* p		5566949	1					
ANR	5567799	Argument	* p		5566949	0					
ANR	5567800	UnaryOperationExpression	* p		5566949	0					
ANR	5567801	UnaryOperator	*		5566949	0					
ANR	5567802	Identifier	p		5566949	1					
ANR	5567803	CompoundStatement		409:41:7071:7071	5566949	1					
ANR	5567804	ExpressionStatement	p ++	417:20:7267:7270	5566949	0	True				
ANR	5567805	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567806	Identifier	p		5566949	0					
ANR	5567807	IncDec	++		5566949	1					
ANR	5567808	IfStatement	if ( * typestr == '?' )		5566949	3					
ANR	5567809	Condition	* typestr == '?'	421:20:7312:7326	5566949	0	True				
ANR	5567810	EqualityExpression	* typestr == '?'		5566949	0		==			
ANR	5567811	UnaryOperationExpression	* typestr		5566949	0					
ANR	5567812	UnaryOperator	*		5566949	0					
ANR	5567813	Identifier	typestr		5566949	1					
ANR	5567814	PrimaryExpression	'?'		5566949	1					
ANR	5567815	CompoundStatement		415:37:7156:7156	5566949	1					
ANR	5567816	ExpressionStatement	typestr ++	423:20:7352:7361	5566949	0	True				
ANR	5567817	PostIncDecOperationExpression	typestr ++		5566949	0					
ANR	5567818	Identifier	typestr		5566949	0					
ANR	5567819	IncDec	++		5566949	1					
ANR	5567820	IfStatement	if ( * p == '\\0' )		5566949	1					
ANR	5567821	Condition	* p == '\\0'	425:24:7388:7397	5566949	0	True				
ANR	5567822	EqualityExpression	* p == '\\0'		5566949	0		==			
ANR	5567823	UnaryOperationExpression	* p		5566949	0					
ANR	5567824	UnaryOperator	*		5566949	0					
ANR	5567825	Identifier	p		5566949	1					
ANR	5567826	PrimaryExpression	'\\0'		5566949	1					
ANR	5567827	CompoundStatement		419:36:7227:7227	5566949	1					
ANR	5567828	BreakStatement	break ;	427:24:7427:7432	5566949	0	True				
ANR	5567829	ExpressionStatement	"val = qemu_strtosz_MiB ( p , & end )"	433:16:7493:7524	5566949	4	True				
ANR	5567830	AssignmentExpression	"val = qemu_strtosz_MiB ( p , & end )"		5566949	0		=			
ANR	5567831	Identifier	val		5566949	0					
ANR	5567832	CallExpression	"qemu_strtosz_MiB ( p , & end )"		5566949	1					
ANR	5567833	Callee	qemu_strtosz_MiB		5566949	0					
ANR	5567834	Identifier	qemu_strtosz_MiB		5566949	0					
ANR	5567835	ArgumentList	p		5566949	1					
ANR	5567836	Argument	p		5566949	0					
ANR	5567837	Identifier	p		5566949	0					
ANR	5567838	Argument	& end		5566949	1					
ANR	5567839	UnaryOperationExpression	& end		5566949	0					
ANR	5567840	UnaryOperator	&		5566949	0					
ANR	5567841	Identifier	end		5566949	1					
ANR	5567842	IfStatement	if ( val < 0 )		5566949	5					
ANR	5567843	Condition	val < 0	435:20:7547:7553	5566949	0	True				
ANR	5567844	RelationalExpression	val < 0		5566949	0		<			
ANR	5567845	Identifier	val		5566949	0					
ANR	5567846	PrimaryExpression	0		5566949	1					
ANR	5567847	CompoundStatement		429:29:7383:7383	5566949	1					
ANR	5567848	ExpressionStatement	"monitor_printf ( mon , ""invalid size\\n"" )"	437:20:7579:7616	5566949	0	True				
ANR	5567849	CallExpression	"monitor_printf ( mon , ""invalid size\\n"" )"		5566949	0					
ANR	5567850	Callee	monitor_printf		5566949	0					
ANR	5567851	Identifier	monitor_printf		5566949	0					
ANR	5567852	ArgumentList	mon		5566949	1					
ANR	5567853	Argument	mon		5566949	0					
ANR	5567854	Identifier	mon		5566949	0					
ANR	5567855	Argument	"""invalid size\\n"""		5566949	1					
ANR	5567856	PrimaryExpression	"""invalid size\\n"""		5566949	0					
ANR	5567857	GotoStatement	goto fail ;	439:20:7639:7648	5566949	1	True				
ANR	5567858	Identifier	fail		5566949	0					
ANR	5567859	ExpressionStatement	"qdict_put ( qdict , key , qint_from_int ( val ) )"	443:16:7686:7727	5566949	6	True				
ANR	5567860	CallExpression	"qdict_put ( qdict , key , qint_from_int ( val ) )"		5566949	0					
ANR	5567861	Callee	qdict_put		5566949	0					
ANR	5567862	Identifier	qdict_put		5566949	0					
ANR	5567863	ArgumentList	qdict		5566949	1					
ANR	5567864	Argument	qdict		5566949	0					
ANR	5567865	Identifier	qdict		5566949	0					
ANR	5567866	Argument	key		5566949	1					
ANR	5567867	Identifier	key		5566949	0					
ANR	5567868	Argument	qint_from_int ( val )		5566949	2					
ANR	5567869	CallExpression	qint_from_int ( val )		5566949	0					
ANR	5567870	Callee	qint_from_int		5566949	0					
ANR	5567871	Identifier	qint_from_int		5566949	0					
ANR	5567872	ArgumentList	val		5566949	1					
ANR	5567873	Argument	val		5566949	0					
ANR	5567874	Identifier	val		5566949	0					
ANR	5567875	ExpressionStatement	p = end	445:16:7746:7753	5566949	7	True				
ANR	5567876	AssignmentExpression	p = end		5566949	0		=			
ANR	5567877	Identifier	p		5566949	0					
ANR	5567878	Identifier	end		5566949	1					
ANR	5567879	BreakStatement	break ;	449:12:7783:7788	5566949	18	True				
ANR	5567880	Label	case 'T' :	451:8:7799:7807	5566949	19	True				
ANR	5567881	CompoundStatement		449:16:7668:7678	5566949	20					
ANR	5567882	IdentifierDeclStatement	double val ;	455:16:7841:7851	5566949	0	True				
ANR	5567883	IdentifierDecl	val		5566949	0					
ANR	5567884	IdentifierDeclType	double		5566949	0					
ANR	5567885	Identifier	val		5566949	1					
ANR	5567886	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	1					
ANR	5567887	Condition	qemu_isspace ( * p )	459:23:7879:7894	5566949	0	True				
ANR	5567888	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5567889	Callee	qemu_isspace		5566949	0					
ANR	5567890	Identifier	qemu_isspace		5566949	0					
ANR	5567891	ArgumentList	* p		5566949	1					
ANR	5567892	Argument	* p		5566949	0					
ANR	5567893	UnaryOperationExpression	* p		5566949	0					
ANR	5567894	UnaryOperator	*		5566949	0					
ANR	5567895	Identifier	p		5566949	1					
ANR	5567896	ExpressionStatement	p ++	461:20:7918:7921	5566949	1	True				
ANR	5567897	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5567898	Identifier	p		5566949	0					
ANR	5567899	IncDec	++		5566949	1					
ANR	5567900	IfStatement	if ( * typestr == '?' )		5566949	2					
ANR	5567901	Condition	* typestr == '?'	463:20:7944:7958	5566949	0	True				
ANR	5567902	EqualityExpression	* typestr == '?'		5566949	0		==			
ANR	5567903	UnaryOperationExpression	* typestr		5566949	0					
ANR	5567904	UnaryOperator	*		5566949	0					
ANR	5567905	Identifier	typestr		5566949	1					
ANR	5567906	PrimaryExpression	'?'		5566949	1					
ANR	5567907	CompoundStatement		457:37:7788:7788	5566949	1					
ANR	5567908	ExpressionStatement	typestr ++	465:20:7984:7993	5566949	0	True				
ANR	5567909	PostIncDecOperationExpression	typestr ++		5566949	0					
ANR	5567910	Identifier	typestr		5566949	0					
ANR	5567911	IncDec	++		5566949	1					
ANR	5567912	IfStatement	if ( * p == '\\0' )		5566949	1					
ANR	5567913	Condition	* p == '\\0'	467:24:8020:8029	5566949	0	True				
ANR	5567914	EqualityExpression	* p == '\\0'		5566949	0		==			
ANR	5567915	UnaryOperationExpression	* p		5566949	0					
ANR	5567916	UnaryOperator	*		5566949	0					
ANR	5567917	Identifier	p		5566949	1					
ANR	5567918	PrimaryExpression	'\\0'		5566949	1					
ANR	5567919	CompoundStatement		461:36:7859:7859	5566949	1					
ANR	5567920	BreakStatement	break ;	469:24:8059:8064	5566949	0	True				
ANR	5567921	IfStatement	"if ( get_double ( mon , & val , & p ) < 0 )"		5566949	3					
ANR	5567922	Condition	"get_double ( mon , & val , & p ) < 0"	475:20:8129:8157	5566949	0	True				
ANR	5567923	RelationalExpression	"get_double ( mon , & val , & p ) < 0"		5566949	0		<			
ANR	5567924	CallExpression	"get_double ( mon , & val , & p )"		5566949	0					
ANR	5567925	Callee	get_double		5566949	0					
ANR	5567926	Identifier	get_double		5566949	0					
ANR	5567927	ArgumentList	mon		5566949	1					
ANR	5567928	Argument	mon		5566949	0					
ANR	5567929	Identifier	mon		5566949	0					
ANR	5567930	Argument	& val		5566949	1					
ANR	5567931	UnaryOperationExpression	& val		5566949	0					
ANR	5567932	UnaryOperator	&		5566949	0					
ANR	5567933	Identifier	val		5566949	1					
ANR	5567934	Argument	& p		5566949	2					
ANR	5567935	UnaryOperationExpression	& p		5566949	0					
ANR	5567936	UnaryOperator	&		5566949	0					
ANR	5567937	Identifier	p		5566949	1					
ANR	5567938	PrimaryExpression	0		5566949	1					
ANR	5567939	CompoundStatement		469:51:7987:7987	5566949	1					
ANR	5567940	GotoStatement	goto fail ;	477:20:8183:8192	5566949	0	True				
ANR	5567941	Identifier	fail		5566949	0					
ANR	5567942	IfStatement	if ( p [ 0 ] && p [ 1 ] == 's' )		5566949	4					
ANR	5567943	Condition	p [ 0 ] && p [ 1 ] == 's'	481:20:8234:8252	5566949	0	True				
ANR	5567944	AndExpression	p [ 0 ] && p [ 1 ] == 's'		5566949	0		&&			
ANR	5567945	ArrayIndexing	p [ 0 ]		5566949	0					
ANR	5567946	Identifier	p		5566949	0					
ANR	5567947	PrimaryExpression	0		5566949	1					
ANR	5567948	EqualityExpression	p [ 1 ] == 's'		5566949	1		==			
ANR	5567949	ArrayIndexing	p [ 1 ]		5566949	0					
ANR	5567950	Identifier	p		5566949	0					
ANR	5567951	PrimaryExpression	1		5566949	1					
ANR	5567952	PrimaryExpression	's'		5566949	1					
ANR	5567953	CompoundStatement		475:41:8082:8082	5566949	1					
ANR	5567954	SwitchStatement	switch ( * p )		5566949	0					
ANR	5567955	Condition	* p	483:28:8286:8287	5566949	0	True				
ANR	5567956	UnaryOperationExpression	* p		5566949	0					
ANR	5567957	UnaryOperator	*		5566949	0					
ANR	5567958	Identifier	p		5566949	1					
ANR	5567959	CompoundStatement		477:32:8117:8117	5566949	1					
ANR	5567960	Label	case 'm' :	485:20:8313:8321	5566949	0	True				
ANR	5567961	ExpressionStatement	val /= 1e3	487:24:8348:8358	5566949	1	True				
ANR	5567962	AssignmentExpression	val /= 1e3		5566949	0		/=			
ANR	5567963	Identifier	val		5566949	0					
ANR	5567964	PrimaryExpression	1e3		5566949	1					
ANR	5567965	ExpressionStatement	p += 2	487:36:8360:8366	5566949	2	True				
ANR	5567966	AssignmentExpression	p += 2		5566949	0		+=			
ANR	5567967	Identifier	p		5566949	0					
ANR	5567968	PrimaryExpression	2		5566949	1					
ANR	5567969	BreakStatement	break ;	487:44:8368:8373	5566949	3	True				
ANR	5567970	Label	case 'u' :	489:20:8396:8404	5566949	4	True				
ANR	5567971	ExpressionStatement	val /= 1e6	491:24:8431:8441	5566949	5	True				
ANR	5567972	AssignmentExpression	val /= 1e6		5566949	0		/=			
ANR	5567973	Identifier	val		5566949	0					
ANR	5567974	PrimaryExpression	1e6		5566949	1					
ANR	5567975	ExpressionStatement	p += 2	491:36:8443:8449	5566949	6	True				
ANR	5567976	AssignmentExpression	p += 2		5566949	0		+=			
ANR	5567977	Identifier	p		5566949	0					
ANR	5567978	PrimaryExpression	2		5566949	1					
ANR	5567979	BreakStatement	break ;	491:44:8451:8456	5566949	7	True				
ANR	5567980	Label	case 'n' :	493:20:8479:8487	5566949	8	True				
ANR	5567981	ExpressionStatement	val /= 1e9	495:24:8514:8524	5566949	9	True				
ANR	5567982	AssignmentExpression	val /= 1e9		5566949	0		/=			
ANR	5567983	Identifier	val		5566949	0					
ANR	5567984	PrimaryExpression	1e9		5566949	1					
ANR	5567985	ExpressionStatement	p += 2	495:36:8526:8532	5566949	10	True				
ANR	5567986	AssignmentExpression	p += 2		5566949	0		+=			
ANR	5567987	Identifier	p		5566949	0					
ANR	5567988	PrimaryExpression	2		5566949	1					
ANR	5567989	BreakStatement	break ;	495:44:8534:8539	5566949	11	True				
ANR	5567990	IfStatement	if ( * p && ! qemu_isspace ( * p ) )		5566949	5					
ANR	5567991	Condition	* p && ! qemu_isspace ( * p )	501:20:8604:8626	5566949	0	True				
ANR	5567992	AndExpression	* p && ! qemu_isspace ( * p )		5566949	0		&&			
ANR	5567993	UnaryOperationExpression	* p		5566949	0					
ANR	5567994	UnaryOperator	*		5566949	0					
ANR	5567995	Identifier	p		5566949	1					
ANR	5567996	UnaryOperationExpression	! qemu_isspace ( * p )		5566949	1					
ANR	5567997	UnaryOperator	!		5566949	0					
ANR	5567998	CallExpression	qemu_isspace ( * p )		5566949	1					
ANR	5567999	Callee	qemu_isspace		5566949	0					
ANR	5568000	Identifier	qemu_isspace		5566949	0					
ANR	5568001	ArgumentList	* p		5566949	1					
ANR	5568002	Argument	* p		5566949	0					
ANR	5568003	UnaryOperationExpression	* p		5566949	0					
ANR	5568004	UnaryOperator	*		5566949	0					
ANR	5568005	Identifier	p		5566949	1					
ANR	5568006	CompoundStatement		495:45:8456:8456	5566949	1					
ANR	5568007	ExpressionStatement	"monitor_printf ( mon , ""Unknown unit suffix\\n"" )"	503:20:8652:8696	5566949	0	True				
ANR	5568008	CallExpression	"monitor_printf ( mon , ""Unknown unit suffix\\n"" )"		5566949	0					
ANR	5568009	Callee	monitor_printf		5566949	0					
ANR	5568010	Identifier	monitor_printf		5566949	0					
ANR	5568011	ArgumentList	mon		5566949	1					
ANR	5568012	Argument	mon		5566949	0					
ANR	5568013	Identifier	mon		5566949	0					
ANR	5568014	Argument	"""Unknown unit suffix\\n"""		5566949	1					
ANR	5568015	PrimaryExpression	"""Unknown unit suffix\\n"""		5566949	0					
ANR	5568016	GotoStatement	goto fail ;	505:20:8719:8728	5566949	1	True				
ANR	5568017	Identifier	fail		5566949	0					
ANR	5568018	ExpressionStatement	"qdict_put ( qdict , key , qfloat_from_double ( val ) )"	509:16:8766:8812	5566949	6	True				
ANR	5568019	CallExpression	"qdict_put ( qdict , key , qfloat_from_double ( val ) )"		5566949	0					
ANR	5568020	Callee	qdict_put		5566949	0					
ANR	5568021	Identifier	qdict_put		5566949	0					
ANR	5568022	ArgumentList	qdict		5566949	1					
ANR	5568023	Argument	qdict		5566949	0					
ANR	5568024	Identifier	qdict		5566949	0					
ANR	5568025	Argument	key		5566949	1					
ANR	5568026	Identifier	key		5566949	0					
ANR	5568027	Argument	qfloat_from_double ( val )		5566949	2					
ANR	5568028	CallExpression	qfloat_from_double ( val )		5566949	0					
ANR	5568029	Callee	qfloat_from_double		5566949	0					
ANR	5568030	Identifier	qfloat_from_double		5566949	0					
ANR	5568031	ArgumentList	val		5566949	1					
ANR	5568032	Argument	val		5566949	0					
ANR	5568033	Identifier	val		5566949	0					
ANR	5568034	BreakStatement	break ;	513:12:8842:8847	5566949	21	True				
ANR	5568035	Label	case 'b' :	515:8:8858:8866	5566949	22	True				
ANR	5568036	CompoundStatement		515:16:8761:8769	5566949	23					
ANR	5568037	IdentifierDeclStatement	const char * beg ;	519:16:8900:8915	5566949	0	True				
ANR	5568038	IdentifierDecl	* beg		5566949	0					
ANR	5568039	IdentifierDeclType	const char *		5566949	0					
ANR	5568040	Identifier	beg		5566949	1					
ANR	5568041	IdentifierDeclStatement	bool val ;	521:16:8934:8942	5566949	1	True				
ANR	5568042	IdentifierDecl	val		5566949	0					
ANR	5568043	IdentifierDeclType	bool		5566949	0					
ANR	5568044	Identifier	val		5566949	1					
ANR	5568045	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	2					
ANR	5568046	Condition	qemu_isspace ( * p )	525:23:8970:8985	5566949	0	True				
ANR	5568047	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5568048	Callee	qemu_isspace		5566949	0					
ANR	5568049	Identifier	qemu_isspace		5566949	0					
ANR	5568050	ArgumentList	* p		5566949	1					
ANR	5568051	Argument	* p		5566949	0					
ANR	5568052	UnaryOperationExpression	* p		5566949	0					
ANR	5568053	UnaryOperator	*		5566949	0					
ANR	5568054	Identifier	p		5566949	1					
ANR	5568055	CompoundStatement		519:41:8815:8815	5566949	1					
ANR	5568056	ExpressionStatement	p ++	527:20:9011:9014	5566949	0	True				
ANR	5568057	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5568058	Identifier	p		5566949	0					
ANR	5568059	IncDec	++		5566949	1					
ANR	5568060	ExpressionStatement	beg = p	531:16:9052:9059	5566949	3	True				
ANR	5568061	AssignmentExpression	beg = p		5566949	0		=			
ANR	5568062	Identifier	beg		5566949	0					
ANR	5568063	Identifier	p		5566949	1					
ANR	5568064	WhileStatement	while ( qemu_isgraph ( * p ) )		5566949	4					
ANR	5568065	Condition	qemu_isgraph ( * p )	533:23:9085:9100	5566949	0	True				
ANR	5568066	CallExpression	qemu_isgraph ( * p )		5566949	0					
ANR	5568067	Callee	qemu_isgraph		5566949	0					
ANR	5568068	Identifier	qemu_isgraph		5566949	0					
ANR	5568069	ArgumentList	* p		5566949	1					
ANR	5568070	Argument	* p		5566949	0					
ANR	5568071	UnaryOperationExpression	* p		5566949	0					
ANR	5568072	UnaryOperator	*		5566949	0					
ANR	5568073	Identifier	p		5566949	1					
ANR	5568074	CompoundStatement		527:41:8930:8930	5566949	1					
ANR	5568075	ExpressionStatement	p ++	535:20:9126:9129	5566949	0	True				
ANR	5568076	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5568077	Identifier	p		5566949	0					
ANR	5568078	IncDec	++		5566949	1					
ANR	5568079	IfStatement	"if ( p - beg == 2 && ! memcmp ( beg , ""on"" , p - beg ) )"		5566949	5					
ANR	5568080	Condition	"p - beg == 2 && ! memcmp ( beg , ""on"" , p - beg )"	539:20:9171:9213	5566949	0	True				
ANR	5568081	AndExpression	"p - beg == 2 && ! memcmp ( beg , ""on"" , p - beg )"		5566949	0		&&			
ANR	5568082	EqualityExpression	p - beg == 2		5566949	0		==			
ANR	5568083	AdditiveExpression	p - beg		5566949	0		-			
ANR	5568084	Identifier	p		5566949	0					
ANR	5568085	Identifier	beg		5566949	1					
ANR	5568086	PrimaryExpression	2		5566949	1					
ANR	5568087	UnaryOperationExpression	"! memcmp ( beg , ""on"" , p - beg )"		5566949	1					
ANR	5568088	UnaryOperator	!		5566949	0					
ANR	5568089	CallExpression	"memcmp ( beg , ""on"" , p - beg )"		5566949	1					
ANR	5568090	Callee	memcmp		5566949	0					
ANR	5568091	Identifier	memcmp		5566949	0					
ANR	5568092	ArgumentList	beg		5566949	1					
ANR	5568093	Argument	beg		5566949	0					
ANR	5568094	Identifier	beg		5566949	0					
ANR	5568095	Argument	"""on"""		5566949	1					
ANR	5568096	PrimaryExpression	"""on"""		5566949	0					
ANR	5568097	Argument	p - beg		5566949	2					
ANR	5568098	AdditiveExpression	p - beg		5566949	0		-			
ANR	5568099	Identifier	p		5566949	0					
ANR	5568100	Identifier	beg		5566949	1					
ANR	5568101	CompoundStatement		533:65:9043:9043	5566949	1					
ANR	5568102	ExpressionStatement	val = true	541:20:9239:9249	5566949	0	True				
ANR	5568103	AssignmentExpression	val = true		5566949	0		=			
ANR	5568104	Identifier	val		5566949	0					
ANR	5568105	Identifier	true		5566949	1					
ANR	5568106	ElseStatement	else		5566949	0					
ANR	5568107	IfStatement	"if ( p - beg == 3 && ! memcmp ( beg , ""off"" , p - beg ) )"		5566949	0					
ANR	5568108	Condition	"p - beg == 3 && ! memcmp ( beg , ""off"" , p - beg )"	543:27:9279:9322	5566949	0	True				
ANR	5568109	AndExpression	"p - beg == 3 && ! memcmp ( beg , ""off"" , p - beg )"		5566949	0		&&			
ANR	5568110	EqualityExpression	p - beg == 3		5566949	0		==			
ANR	5568111	AdditiveExpression	p - beg		5566949	0		-			
ANR	5568112	Identifier	p		5566949	0					
ANR	5568113	Identifier	beg		5566949	1					
ANR	5568114	PrimaryExpression	3		5566949	1					
ANR	5568115	UnaryOperationExpression	"! memcmp ( beg , ""off"" , p - beg )"		5566949	1					
ANR	5568116	UnaryOperator	!		5566949	0					
ANR	5568117	CallExpression	"memcmp ( beg , ""off"" , p - beg )"		5566949	1					
ANR	5568118	Callee	memcmp		5566949	0					
ANR	5568119	Identifier	memcmp		5566949	0					
ANR	5568120	ArgumentList	beg		5566949	1					
ANR	5568121	Argument	beg		5566949	0					
ANR	5568122	Identifier	beg		5566949	0					
ANR	5568123	Argument	"""off"""		5566949	1					
ANR	5568124	PrimaryExpression	"""off"""		5566949	0					
ANR	5568125	Argument	p - beg		5566949	2					
ANR	5568126	AdditiveExpression	p - beg		5566949	0		-			
ANR	5568127	Identifier	p		5566949	0					
ANR	5568128	Identifier	beg		5566949	1					
ANR	5568129	CompoundStatement		537:73:9152:9152	5566949	1					
ANR	5568130	ExpressionStatement	val = false	545:20:9348:9359	5566949	0	True				
ANR	5568131	AssignmentExpression	val = false		5566949	0		=			
ANR	5568132	Identifier	val		5566949	0					
ANR	5568133	Identifier	false		5566949	1					
ANR	5568134	ElseStatement	else		5566949	0					
ANR	5568135	CompoundStatement		541:23:9212:9212	5566949	0					
ANR	5568136	ExpressionStatement	"monitor_printf ( mon , ""Expected 'on' or 'off'\\n"" )"	549:20:9408:9455	5566949	0	True				
ANR	5568137	CallExpression	"monitor_printf ( mon , ""Expected 'on' or 'off'\\n"" )"		5566949	0					
ANR	5568138	Callee	monitor_printf		5566949	0					
ANR	5568139	Identifier	monitor_printf		5566949	0					
ANR	5568140	ArgumentList	mon		5566949	1					
ANR	5568141	Argument	mon		5566949	0					
ANR	5568142	Identifier	mon		5566949	0					
ANR	5568143	Argument	"""Expected 'on' or 'off'\\n"""		5566949	1					
ANR	5568144	PrimaryExpression	"""Expected 'on' or 'off'\\n"""		5566949	0					
ANR	5568145	GotoStatement	goto fail ;	551:20:9478:9487	5566949	1	True				
ANR	5568146	Identifier	fail		5566949	0					
ANR	5568147	ExpressionStatement	"qdict_put ( qdict , key , qbool_from_bool ( val ) )"	555:16:9525:9568	5566949	6	True				
ANR	5568148	CallExpression	"qdict_put ( qdict , key , qbool_from_bool ( val ) )"		5566949	0					
ANR	5568149	Callee	qdict_put		5566949	0					
ANR	5568150	Identifier	qdict_put		5566949	0					
ANR	5568151	ArgumentList	qdict		5566949	1					
ANR	5568152	Argument	qdict		5566949	0					
ANR	5568153	Identifier	qdict		5566949	0					
ANR	5568154	Argument	key		5566949	1					
ANR	5568155	Identifier	key		5566949	0					
ANR	5568156	Argument	qbool_from_bool ( val )		5566949	2					
ANR	5568157	CallExpression	qbool_from_bool ( val )		5566949	0					
ANR	5568158	Callee	qbool_from_bool		5566949	0					
ANR	5568159	Identifier	qbool_from_bool		5566949	0					
ANR	5568160	ArgumentList	val		5566949	1					
ANR	5568161	Argument	val		5566949	0					
ANR	5568162	Identifier	val		5566949	0					
ANR	5568163	BreakStatement	break ;	559:12:9598:9603	5566949	24	True				
ANR	5568164	Label	case '-' :	561:8:9614:9622	5566949	25	True				
ANR	5568165	CompoundStatement		561:16:9521:9537	5566949	26					
ANR	5568166	IdentifierDeclStatement	const char * tmp = p ;	565:16:9656:9675	5566949	0	True				
ANR	5568167	IdentifierDecl	* tmp = p		5566949	0					
ANR	5568168	IdentifierDeclType	const char *		5566949	0					
ANR	5568169	Identifier	tmp		5566949	1					
ANR	5568170	AssignmentExpression	* tmp = p		5566949	2		=			
ANR	5568171	Identifier	p		5566949	0					
ANR	5568172	Identifier	p		5566949	1					
ANR	5568173	IdentifierDeclStatement	int skip_key = 0 ;	567:16:9694:9710	5566949	1	True				
ANR	5568174	IdentifierDecl	skip_key = 0		5566949	0					
ANR	5568175	IdentifierDeclType	int		5566949	0					
ANR	5568176	Identifier	skip_key		5566949	1					
ANR	5568177	AssignmentExpression	skip_key = 0		5566949	2		=			
ANR	5568178	Identifier	skip_key		5566949	0					
ANR	5568179	PrimaryExpression	0		5566949	1					
ANR	5568180	ExpressionStatement	c = * typestr ++	573:16:9761:9775	5566949	2	True				
ANR	5568181	AssignmentExpression	c = * typestr ++		5566949	0		=			
ANR	5568182	Identifier	c		5566949	0					
ANR	5568183	UnaryOperationExpression	* typestr ++		5566949	1					
ANR	5568184	UnaryOperator	*		5566949	0					
ANR	5568185	PostIncDecOperationExpression	typestr ++		5566949	1					
ANR	5568186	Identifier	typestr		5566949	0					
ANR	5568187	IncDec	++		5566949	1					
ANR	5568188	IfStatement	if ( c == '\\0' )		5566949	3					
ANR	5568189	Condition	c == '\\0'	575:20:9798:9806	5566949	0	True				
ANR	5568190	EqualityExpression	c == '\\0'		5566949	0		==			
ANR	5568191	Identifier	c		5566949	0					
ANR	5568192	PrimaryExpression	'\\0'		5566949	1					
ANR	5568193	GotoStatement	goto bad_type ;	577:20:9830:9843	5566949	1	True				
ANR	5568194	Identifier	bad_type		5566949	0					
ANR	5568195	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	4					
ANR	5568196	Condition	qemu_isspace ( * p )	579:23:9869:9884	5566949	0	True				
ANR	5568197	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5568198	Callee	qemu_isspace		5566949	0					
ANR	5568199	Identifier	qemu_isspace		5566949	0					
ANR	5568200	ArgumentList	* p		5566949	1					
ANR	5568201	Argument	* p		5566949	0					
ANR	5568202	UnaryOperationExpression	* p		5566949	0					
ANR	5568203	UnaryOperator	*		5566949	0					
ANR	5568204	Identifier	p		5566949	1					
ANR	5568205	ExpressionStatement	p ++	581:20:9908:9911	5566949	1	True				
ANR	5568206	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5568207	Identifier	p		5566949	0					
ANR	5568208	IncDec	++		5566949	1					
ANR	5568209	IfStatement	if ( * p == '-' )		5566949	5					
ANR	5568210	Condition	* p == '-'	583:20:9934:9942	5566949	0	True				
ANR	5568211	EqualityExpression	* p == '-'		5566949	0		==			
ANR	5568212	UnaryOperationExpression	* p		5566949	0					
ANR	5568213	UnaryOperator	*		5566949	0					
ANR	5568214	Identifier	p		5566949	1					
ANR	5568215	PrimaryExpression	'-'		5566949	1					
ANR	5568216	CompoundStatement		577:31:9772:9772	5566949	1					
ANR	5568217	ExpressionStatement	p ++	585:20:9968:9971	5566949	0	True				
ANR	5568218	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5568219	Identifier	p		5566949	0					
ANR	5568220	IncDec	++		5566949	1					
ANR	5568221	IfStatement	if ( c != * p )		5566949	1					
ANR	5568222	Condition	c != * p	587:23:9997:10003	5566949	0	True				
ANR	5568223	EqualityExpression	c != * p		5566949	0		!=			
ANR	5568224	Identifier	c		5566949	0					
ANR	5568225	UnaryOperationExpression	* p		5566949	1					
ANR	5568226	UnaryOperator	*		5566949	0					
ANR	5568227	Identifier	p		5566949	1					
ANR	5568228	CompoundStatement		581:32:9833:9833	5566949	1					
ANR	5568229	IfStatement	"if ( ! is_valid_option ( p , typestr ) )"		5566949	0					
ANR	5568230	Condition	"! is_valid_option ( p , typestr )"	589:27:10036:10063	5566949	0	True				
ANR	5568231	UnaryOperationExpression	"! is_valid_option ( p , typestr )"		5566949	0					
ANR	5568232	UnaryOperator	!		5566949	0					
ANR	5568233	CallExpression	"is_valid_option ( p , typestr )"		5566949	1					
ANR	5568234	Callee	is_valid_option		5566949	0					
ANR	5568235	Identifier	is_valid_option		5566949	0					
ANR	5568236	ArgumentList	p		5566949	1					
ANR	5568237	Argument	p		5566949	0					
ANR	5568238	Identifier	p		5566949	0					
ANR	5568239	Argument	typestr		5566949	1					
ANR	5568240	Identifier	typestr		5566949	0					
ANR	5568241	CompoundStatement		583:57:9893:9893	5566949	1					
ANR	5568242	ExpressionStatement	"monitor_printf ( mon , ""%s: unsupported option -%c\\n"" , cmd -> name , * p )"	593:28:10117:10227	5566949	0	True				
ANR	5568243	CallExpression	"monitor_printf ( mon , ""%s: unsupported option -%c\\n"" , cmd -> name , * p )"		5566949	0					
ANR	5568244	Callee	monitor_printf		5566949	0					
ANR	5568245	Identifier	monitor_printf		5566949	0					
ANR	5568246	ArgumentList	mon		5566949	1					
ANR	5568247	Argument	mon		5566949	0					
ANR	5568248	Identifier	mon		5566949	0					
ANR	5568249	Argument	"""%s: unsupported option -%c\\n"""		5566949	1					
ANR	5568250	PrimaryExpression	"""%s: unsupported option -%c\\n"""		5566949	0					
ANR	5568251	Argument	cmd -> name		5566949	2					
ANR	5568252	PtrMemberAccess	cmd -> name		5566949	0					
ANR	5568253	Identifier	cmd		5566949	0					
ANR	5568254	Identifier	name		5566949	1					
ANR	5568255	Argument	* p		5566949	3					
ANR	5568256	UnaryOperationExpression	* p		5566949	0					
ANR	5568257	UnaryOperator	*		5566949	0					
ANR	5568258	Identifier	p		5566949	1					
ANR	5568259	GotoStatement	goto fail ;	597:28:10258:10267	5566949	1	True				
ANR	5568260	Identifier	fail		5566949	0					
ANR	5568261	ElseStatement	else		5566949	0					
ANR	5568262	CompoundStatement		593:31:10128:10128	5566949	0					
ANR	5568263	ExpressionStatement	skip_key = 1	601:28:10332:10344	5566949	0	True				
ANR	5568264	AssignmentExpression	skip_key = 1		5566949	0		=			
ANR	5568265	Identifier	skip_key		5566949	0					
ANR	5568266	PrimaryExpression	1		5566949	1					
ANR	5568267	IfStatement	if ( skip_key )		5566949	2					
ANR	5568268	Condition	skip_key	607:23:10420:10427	5566949	0	True				
ANR	5568269	Identifier	skip_key		5566949	0					
ANR	5568270	CompoundStatement		601:33:10257:10257	5566949	1					
ANR	5568271	ExpressionStatement	p = tmp	609:24:10457:10464	5566949	0	True				
ANR	5568272	AssignmentExpression	p = tmp		5566949	0		=			
ANR	5568273	Identifier	p		5566949	0					
ANR	5568274	Identifier	tmp		5566949	1					
ANR	5568275	ElseStatement	else		5566949	0					
ANR	5568276	CompoundStatement		605:27:10321:10321	5566949	0					
ANR	5568277	ExpressionStatement	p ++	615:24:10563:10566	5566949	0	True				
ANR	5568278	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5568279	Identifier	p		5566949	0					
ANR	5568280	IncDec	++		5566949	1					
ANR	5568281	ExpressionStatement	"qdict_put ( qdict , key , qbool_from_bool ( true ) )"	617:24:10593:10637	5566949	1	True				
ANR	5568282	CallExpression	"qdict_put ( qdict , key , qbool_from_bool ( true ) )"		5566949	0					
ANR	5568283	Callee	qdict_put		5566949	0					
ANR	5568284	Identifier	qdict_put		5566949	0					
ANR	5568285	ArgumentList	qdict		5566949	1					
ANR	5568286	Argument	qdict		5566949	0					
ANR	5568287	Identifier	qdict		5566949	0					
ANR	5568288	Argument	key		5566949	1					
ANR	5568289	Identifier	key		5566949	0					
ANR	5568290	Argument	qbool_from_bool ( true )		5566949	2					
ANR	5568291	CallExpression	qbool_from_bool ( true )		5566949	0					
ANR	5568292	Callee	qbool_from_bool		5566949	0					
ANR	5568293	Identifier	qbool_from_bool		5566949	0					
ANR	5568294	ArgumentList	true		5566949	1					
ANR	5568295	Argument	true		5566949	0					
ANR	5568296	Identifier	true		5566949	0					
ANR	5568297	BreakStatement	break ;	625:12:10709:10714	5566949	27	True				
ANR	5568298	Label	case 'S' :	627:8:10725:10733	5566949	28	True				
ANR	5568299	CompoundStatement		627:16:10646:10653	5566949	29					
ANR	5568300	IdentifierDeclStatement	int len ;	633:16:10819:10826	5566949	0	True				
ANR	5568301	IdentifierDecl	len		5566949	0					
ANR	5568302	IdentifierDeclType	int		5566949	0					
ANR	5568303	Identifier	len		5566949	1					
ANR	5568304	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	1					
ANR	5568305	Condition	qemu_isspace ( * p )	637:23:10854:10869	5566949	0	True				
ANR	5568306	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5568307	Callee	qemu_isspace		5566949	0					
ANR	5568308	Identifier	qemu_isspace		5566949	0					
ANR	5568309	ArgumentList	* p		5566949	1					
ANR	5568310	Argument	* p		5566949	0					
ANR	5568311	UnaryOperationExpression	* p		5566949	0					
ANR	5568312	UnaryOperator	*		5566949	0					
ANR	5568313	Identifier	p		5566949	1					
ANR	5568314	CompoundStatement		631:41:10699:10699	5566949	1					
ANR	5568315	ExpressionStatement	p ++	639:20:10895:10898	5566949	0	True				
ANR	5568316	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5568317	Identifier	p		5566949	0					
ANR	5568318	IncDec	++		5566949	1					
ANR	5568319	IfStatement	if ( * typestr == '?' )		5566949	2					
ANR	5568320	Condition	* typestr == '?'	643:20:10940:10954	5566949	0	True				
ANR	5568321	EqualityExpression	* typestr == '?'		5566949	0		==			
ANR	5568322	UnaryOperationExpression	* typestr		5566949	0					
ANR	5568323	UnaryOperator	*		5566949	0					
ANR	5568324	Identifier	typestr		5566949	1					
ANR	5568325	PrimaryExpression	'?'		5566949	1					
ANR	5568326	CompoundStatement		637:37:10784:10784	5566949	1					
ANR	5568327	ExpressionStatement	typestr ++	645:20:10980:10989	5566949	0	True				
ANR	5568328	PostIncDecOperationExpression	typestr ++		5566949	0					
ANR	5568329	Identifier	typestr		5566949	0					
ANR	5568330	IncDec	++		5566949	1					
ANR	5568331	IfStatement	if ( * p == '\\0' )		5566949	1					
ANR	5568332	Condition	* p == '\\0'	647:24:11016:11025	5566949	0	True				
ANR	5568333	EqualityExpression	* p == '\\0'		5566949	0		==			
ANR	5568334	UnaryOperationExpression	* p		5566949	0					
ANR	5568335	UnaryOperator	*		5566949	0					
ANR	5568336	Identifier	p		5566949	1					
ANR	5568337	PrimaryExpression	'\\0'		5566949	1					
ANR	5568338	CompoundStatement		641:36:10855:10855	5566949	1					
ANR	5568339	BreakStatement	break ;	651:24:11121:11126	5566949	0	True				
ANR	5568340	ExpressionStatement	len = strlen ( p )	657:16:11187:11202	5566949	3	True				
ANR	5568341	AssignmentExpression	len = strlen ( p )		5566949	0		=			
ANR	5568342	Identifier	len		5566949	0					
ANR	5568343	CallExpression	strlen ( p )		5566949	1					
ANR	5568344	Callee	strlen		5566949	0					
ANR	5568345	Identifier	strlen		5566949	0					
ANR	5568346	ArgumentList	p		5566949	1					
ANR	5568347	Argument	p		5566949	0					
ANR	5568348	Identifier	p		5566949	0					
ANR	5568349	IfStatement	if ( len <= 0 )		5566949	4					
ANR	5568350	Condition	len <= 0	659:20:11225:11232	5566949	0	True				
ANR	5568351	RelationalExpression	len <= 0		5566949	0		<=			
ANR	5568352	Identifier	len		5566949	0					
ANR	5568353	PrimaryExpression	0		5566949	1					
ANR	5568354	CompoundStatement		653:30:11062:11062	5566949	1					
ANR	5568355	ExpressionStatement	"monitor_printf ( mon , ""%s: string expected\\n"" , cmd -> name )"	661:20:11258:11349	5566949	0	True				
ANR	5568356	CallExpression	"monitor_printf ( mon , ""%s: string expected\\n"" , cmd -> name )"		5566949	0					
ANR	5568357	Callee	monitor_printf		5566949	0					
ANR	5568358	Identifier	monitor_printf		5566949	0					
ANR	5568359	ArgumentList	mon		5566949	1					
ANR	5568360	Argument	mon		5566949	0					
ANR	5568361	Identifier	mon		5566949	0					
ANR	5568362	Argument	"""%s: string expected\\n"""		5566949	1					
ANR	5568363	PrimaryExpression	"""%s: string expected\\n"""		5566949	0					
ANR	5568364	Argument	cmd -> name		5566949	2					
ANR	5568365	PtrMemberAccess	cmd -> name		5566949	0					
ANR	5568366	Identifier	cmd		5566949	0					
ANR	5568367	Identifier	name		5566949	1					
ANR	5568368	GotoStatement	goto fail ;	665:20:11372:11381	5566949	1	True				
ANR	5568369	Identifier	fail		5566949	0					
ANR	5568370	ExpressionStatement	"qdict_put ( qdict , key , qstring_from_str ( p ) )"	669:16:11419:11461	5566949	5	True				
ANR	5568371	CallExpression	"qdict_put ( qdict , key , qstring_from_str ( p ) )"		5566949	0					
ANR	5568372	Callee	qdict_put		5566949	0					
ANR	5568373	Identifier	qdict_put		5566949	0					
ANR	5568374	ArgumentList	qdict		5566949	1					
ANR	5568375	Argument	qdict		5566949	0					
ANR	5568376	Identifier	qdict		5566949	0					
ANR	5568377	Argument	key		5566949	1					
ANR	5568378	Identifier	key		5566949	0					
ANR	5568379	Argument	qstring_from_str ( p )		5566949	2					
ANR	5568380	CallExpression	qstring_from_str ( p )		5566949	0					
ANR	5568381	Callee	qstring_from_str		5566949	0					
ANR	5568382	Identifier	qstring_from_str		5566949	0					
ANR	5568383	ArgumentList	p		5566949	1					
ANR	5568384	Argument	p		5566949	0					
ANR	5568385	Identifier	p		5566949	0					
ANR	5568386	ExpressionStatement	p += len	671:16:11480:11488	5566949	6	True				
ANR	5568387	AssignmentExpression	p += len		5566949	0		+=			
ANR	5568388	Identifier	p		5566949	0					
ANR	5568389	Identifier	len		5566949	1					
ANR	5568390	BreakStatement	break ;	675:12:11518:11523	5566949	30	True				
ANR	5568391	Label	default :	677:8:11534:11541	5566949	31	True				
ANR	5568392	Identifier	default		5566949	0					
ANR	5568393	Label	bad_type :	679:8:11552:11560	5566949	32	True				
ANR	5568394	Identifier	bad_type		5566949	0					
ANR	5568395	ExpressionStatement	"monitor_printf ( mon , ""%s: unknown type '%c'\\n"" , cmd -> name , c )"	681:12:11575:11635	5566949	33	True				
ANR	5568396	CallExpression	"monitor_printf ( mon , ""%s: unknown type '%c'\\n"" , cmd -> name , c )"		5566949	0					
ANR	5568397	Callee	monitor_printf		5566949	0					
ANR	5568398	Identifier	monitor_printf		5566949	0					
ANR	5568399	ArgumentList	mon		5566949	1					
ANR	5568400	Argument	mon		5566949	0					
ANR	5568401	Identifier	mon		5566949	0					
ANR	5568402	Argument	"""%s: unknown type '%c'\\n"""		5566949	1					
ANR	5568403	PrimaryExpression	"""%s: unknown type '%c'\\n"""		5566949	0					
ANR	5568404	Argument	cmd -> name		5566949	2					
ANR	5568405	PtrMemberAccess	cmd -> name		5566949	0					
ANR	5568406	Identifier	cmd		5566949	0					
ANR	5568407	Identifier	name		5566949	1					
ANR	5568408	Argument	c		5566949	3					
ANR	5568409	Identifier	c		5566949	0					
ANR	5568410	GotoStatement	goto fail ;	683:12:11650:11659	5566949	34	True				
ANR	5568411	Identifier	fail		5566949	0					
ANR	5568412	ExpressionStatement	g_free ( key )	687:8:11681:11692	5566949	5	True				
ANR	5568413	CallExpression	g_free ( key )		5566949	0					
ANR	5568414	Callee	g_free		5566949	0					
ANR	5568415	Identifier	g_free		5566949	0					
ANR	5568416	ArgumentList	key		5566949	1					
ANR	5568417	Argument	key		5566949	0					
ANR	5568418	Identifier	key		5566949	0					
ANR	5568419	ExpressionStatement	key = NULL	689:8:11703:11713	5566949	6	True				
ANR	5568420	AssignmentExpression	key = NULL		5566949	0		=			
ANR	5568421	Identifier	key		5566949	0					
ANR	5568422	Identifier	NULL		5566949	1					
ANR	5568423	WhileStatement	while ( qemu_isspace ( * p ) )		5566949	8					
ANR	5568424	Condition	qemu_isspace ( * p )	695:11:11782:11797	5566949	0	True				
ANR	5568425	CallExpression	qemu_isspace ( * p )		5566949	0					
ANR	5568426	Callee	qemu_isspace		5566949	0					
ANR	5568427	Identifier	qemu_isspace		5566949	0					
ANR	5568428	ArgumentList	* p		5566949	1					
ANR	5568429	Argument	* p		5566949	0					
ANR	5568430	UnaryOperationExpression	* p		5566949	0					
ANR	5568431	UnaryOperator	*		5566949	0					
ANR	5568432	Identifier	p		5566949	1					
ANR	5568433	ExpressionStatement	p ++	697:8:11809:11812	5566949	1	True				
ANR	5568434	PostIncDecOperationExpression	p ++		5566949	0					
ANR	5568435	Identifier	p		5566949	0					
ANR	5568436	IncDec	++		5566949	1					
ANR	5568437	IfStatement	if ( * p != '\\0' )		5566949	9					
ANR	5568438	Condition	* p != '\\0'	699:8:11823:11832	5566949	0	True				
ANR	5568439	EqualityExpression	* p != '\\0'		5566949	0		!=			
ANR	5568440	UnaryOperationExpression	* p		5566949	0					
ANR	5568441	UnaryOperator	*		5566949	0					
ANR	5568442	Identifier	p		5566949	1					
ANR	5568443	PrimaryExpression	'\\0'		5566949	1					
ANR	5568444	CompoundStatement		693:20:11662:11662	5566949	1					
ANR	5568445	ExpressionStatement	"monitor_printf ( mon , ""%s: extraneous characters at the end of line\\n"" , cmd -> name )"	701:8:11846:11950	5566949	0	True				
ANR	5568446	CallExpression	"monitor_printf ( mon , ""%s: extraneous characters at the end of line\\n"" , cmd -> name )"		5566949	0					
ANR	5568447	Callee	monitor_printf		5566949	0					
ANR	5568448	Identifier	monitor_printf		5566949	0					
ANR	5568449	ArgumentList	mon		5566949	1					
ANR	5568450	Argument	mon		5566949	0					
ANR	5568451	Identifier	mon		5566949	0					
ANR	5568452	Argument	"""%s: extraneous characters at the end of line\\n"""		5566949	1					
ANR	5568453	PrimaryExpression	"""%s: extraneous characters at the end of line\\n"""		5566949	0					
ANR	5568454	Argument	cmd -> name		5566949	2					
ANR	5568455	PtrMemberAccess	cmd -> name		5566949	0					
ANR	5568456	Identifier	cmd		5566949	0					
ANR	5568457	Identifier	name		5566949	1					
ANR	5568458	GotoStatement	goto fail ;	705:8:11961:11970	5566949	1	True				
ANR	5568459	Identifier	fail		5566949	0					
ANR	5568460	ReturnStatement	return qdict ;	711:4:11986:11998	5566949	10	True				
ANR	5568461	Identifier	qdict		5566949	0					
ANR	5568462	Label	fail :	715:0:12003:12007	5566949	11	True				
ANR	5568463	Identifier	fail		5566949	0					
ANR	5568464	ExpressionStatement	QDECREF ( qdict )	717:4:12014:12028	5566949	12	True				
ANR	5568465	CallExpression	QDECREF ( qdict )		5566949	0					
ANR	5568466	Callee	QDECREF		5566949	0					
ANR	5568467	Identifier	QDECREF		5566949	0					
ANR	5568468	ArgumentList	qdict		5566949	1					
ANR	5568469	Argument	qdict		5566949	0					
ANR	5568470	Identifier	qdict		5566949	0					
ANR	5568471	ExpressionStatement	g_free ( key )	719:4:12035:12046	5566949	13	True				
ANR	5568472	CallExpression	g_free ( key )		5566949	0					
ANR	5568473	Callee	g_free		5566949	0					
ANR	5568474	Identifier	g_free		5566949	0					
ANR	5568475	ArgumentList	key		5566949	1					
ANR	5568476	Argument	key		5566949	0					
ANR	5568477	Identifier	key		5566949	0					
ANR	5568478	ReturnStatement	return NULL ;	721:4:12053:12064	5566949	14	True				
ANR	5568479	Identifier	NULL		5566949	0					
ANR	5568480	ReturnType	static QDict *		5566949	1					
ANR	5568481	Identifier	monitor_parse_arguments		5566949	2					
ANR	5568482	ParameterList	"Monitor * mon , const char * * endp , const mon_cmd_t * cmd"		5566949	3					
ANR	5568483	Parameter	Monitor * mon	1:38:38:49	5566949	0	True				
ANR	5568484	ParameterType	Monitor *		5566949	0					
ANR	5568485	Identifier	mon		5566949	1					
ANR	5568486	Parameter	const char * * endp	3:38:91:107	5566949	1	True				
ANR	5568487	ParameterType	const char * *		5566949	0					
ANR	5568488	Identifier	endp		5566949	1					
ANR	5568489	Parameter	const mon_cmd_t * cmd	5:38:149:168	5566949	2	True				
ANR	5568490	ParameterType	const mon_cmd_t *		5566949	0					
ANR	5568491	Identifier	cmd		5566949	1					
ANR	5568492	CFGEntryNode	ENTRY		5566949		True				
ANR	5568493	CFGExitNode	EXIT		5566949		True				
ANR	5568494	InfiniteForNode	true		5566949		True				
ANR	5568495	InfiniteForNode	true		5566949		True				
ANR	5568496	Symbol	& val		5566949						
ANR	5568497	Symbol	qemu_find_opts		5566949						
ANR	5568498	Symbol	beg		5566949						
ANR	5568499	Symbol	* opts_list		5566949						
ANR	5568500	Symbol	qfloat_from_double		5566949						
ANR	5568501	Symbol	is_valid_option		5566949						
ANR	5568502	Symbol	mon		5566949						
ANR	5568503	Symbol	typestr		5566949						
ANR	5568504	Symbol	qdict_new		5566949						
ANR	5568505	Symbol	strlen		5566949						
ANR	5568506	Symbol	memcmp		5566949						
ANR	5568507	Symbol	opts		5566949						
ANR	5568508	Symbol	len		5566949						
ANR	5568509	Symbol	* opts_list -> desc		5566949						
ANR	5568510	Symbol	tmp		5566949						
ANR	5568511	Symbol	* typestr ++		5566949						
ANR	5568512	Symbol	* cmd		5566949						
ANR	5568513	Symbol	opts_list -> desc		5566949						
ANR	5568514	Symbol	ret		5566949						
ANR	5568515	Symbol	val		5566949						
ANR	5568516	Symbol	NULL		5566949						
ANR	5568517	Symbol	opts_list -> desc -> name		5566949						
ANR	5568518	Symbol	default_fmt_format		5566949						
ANR	5568519	Symbol	get_double		5566949						
ANR	5568520	Symbol	format		5566949						
ANR	5568521	Symbol	count		5566949						
ANR	5568522	Symbol	qemu_isgraph		5566949						
ANR	5568523	Symbol	key_get_info		5566949						
ANR	5568524	Symbol	size		5566949						
ANR	5568525	Symbol	* endp		5566949						
ANR	5568526	Symbol	true		5566949						
ANR	5568527	Symbol	default_fmt_size		5566949						
ANR	5568528	Symbol	cmd		5566949						
ANR	5568529	Symbol	qemu_strtosz_MiB		5566949						
ANR	5568530	Symbol	qdict		5566949						
ANR	5568531	Symbol	& key		5566949						
ANR	5568532	Symbol	get_str		5566949						
ANR	5568533	Symbol	& end		5566949						
ANR	5568534	Symbol	* typestr		5566949						
ANR	5568535	Symbol	qstring_from_str		5566949						
ANR	5568536	Symbol	endp		5566949						
ANR	5568537	Symbol	end		5566949						
ANR	5568538	Symbol	key		5566949						
ANR	5568539	Symbol	qemu_isdigit		5566949						
ANR	5568540	Symbol	qbool_from_bool		5566949						
ANR	5568541	Symbol	c		5566949						
ANR	5568542	Symbol	qint_from_int		5566949						
ANR	5568543	Symbol	* * opts_list		5566949						
ANR	5568544	Symbol	cmd -> name		5566949						
ANR	5568545	Symbol	* p ++		5566949						
ANR	5568546	Symbol	false		5566949						
ANR	5568547	Symbol	qemu_isspace		5566949						
ANR	5568548	Symbol	p		5566949						
ANR	5568549	Symbol	opts_list		5566949						
ANR	5568550	Symbol	buf		5566949						
ANR	5568551	Symbol	get_expr		5566949						
ANR	5568552	Symbol	& p		5566949						
ANR	5568553	Symbol	* p		5566949						
ANR	5568554	Symbol	skip_key		5566949						
ANR	5568555	Symbol	cmd -> args_type		5566949						
ANR	5568556	Symbol	qemu_opts_parse_noisily		5566949						
