command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6227187	File	/home/p4ultr4n/workplace/ReVeal/raw_code/openpic_update_irq_1.c								
ANR	6227188	Function	openpic_update_irq	1:0:0:1690							
ANR	6227189	FunctionDef	"openpic_update_irq (OpenPICState * opp , int n_IRQ)"		6227188	0					
ANR	6227190	CompoundStatement		3:0:62:1690	6227188	0					
ANR	6227191	IdentifierDeclStatement	IRQ_src_t * src ;	5:4:69:83	6227188	0	True				
ANR	6227192	IdentifierDecl	* src		6227188	0					
ANR	6227193	IdentifierDeclType	IRQ_src_t *		6227188	0					
ANR	6227194	Identifier	src		6227188	1					
ANR	6227195	IdentifierDeclStatement	int i ;	7:4:90:95	6227188	1	True				
ANR	6227196	IdentifierDecl	i		6227188	0					
ANR	6227197	IdentifierDeclType	int		6227188	0					
ANR	6227198	Identifier	i		6227188	1					
ANR	6227199	ExpressionStatement	src = & opp -> src [ n_IRQ ]	11:4:104:126	6227188	2	True				
ANR	6227200	AssignmentExpression	src = & opp -> src [ n_IRQ ]		6227188	0		=			
ANR	6227201	Identifier	src		6227188	0					
ANR	6227202	UnaryOperationExpression	& opp -> src [ n_IRQ ]		6227188	1					
ANR	6227203	UnaryOperator	&		6227188	0					
ANR	6227204	ArrayIndexing	opp -> src [ n_IRQ ]		6227188	1					
ANR	6227205	PtrMemberAccess	opp -> src		6227188	0					
ANR	6227206	Identifier	opp		6227188	0					
ANR	6227207	Identifier	src		6227188	1					
ANR	6227208	Identifier	n_IRQ		6227188	1					
ANR	6227209	IfStatement	if ( ! src -> pending )		6227188	3					
ANR	6227210	Condition	! src -> pending	15:8:139:151	6227188	0	True				
ANR	6227211	UnaryOperationExpression	! src -> pending		6227188	0					
ANR	6227212	UnaryOperator	!		6227188	0					
ANR	6227213	PtrMemberAccess	src -> pending		6227188	1					
ANR	6227214	Identifier	src		6227188	0					
ANR	6227215	Identifier	pending		6227188	1					
ANR	6227216	CompoundStatement		13:23:91:91	6227188	1					
ANR	6227217	ExpressionStatement	"DPRINTF ( ""%s: IRQ %d is not pending\\n"" , __func__ , n_IRQ )"	19:8:195:250	6227188	0	True				
ANR	6227218	CallExpression	"DPRINTF ( ""%s: IRQ %d is not pending\\n"" , __func__ , n_IRQ )"		6227188	0					
ANR	6227219	Callee	DPRINTF		6227188	0					
ANR	6227220	Identifier	DPRINTF		6227188	0					
ANR	6227221	ArgumentList	"""%s: IRQ %d is not pending\\n"""		6227188	1					
ANR	6227222	Argument	"""%s: IRQ %d is not pending\\n"""		6227188	0					
ANR	6227223	PrimaryExpression	"""%s: IRQ %d is not pending\\n"""		6227188	0					
ANR	6227224	Argument	__func__		6227188	1					
ANR	6227225	Identifier	__func__		6227188	0					
ANR	6227226	Argument	n_IRQ		6227188	2					
ANR	6227227	Identifier	n_IRQ		6227188	0					
ANR	6227228	ReturnStatement	return ;	21:8:261:267	6227188	1	True				
ANR	6227229	IfStatement	if ( src -> ipvp & IPVP_MASK_MASK )		6227188	4					
ANR	6227230	Condition	src -> ipvp & IPVP_MASK_MASK	25:8:285:310	6227188	0	True				
ANR	6227231	BitAndExpression	src -> ipvp & IPVP_MASK_MASK		6227188	0		&			
ANR	6227232	PtrMemberAccess	src -> ipvp		6227188	0					
ANR	6227233	Identifier	src		6227188	0					
ANR	6227234	Identifier	ipvp		6227188	1					
ANR	6227235	Identifier	IPVP_MASK_MASK		6227188	1					
ANR	6227236	CompoundStatement		23:36:250:250	6227188	1					
ANR	6227237	ExpressionStatement	"DPRINTF ( ""%s: IRQ %d is disabled\\n"" , __func__ , n_IRQ )"	29:8:368:420	6227188	0	True				
ANR	6227238	CallExpression	"DPRINTF ( ""%s: IRQ %d is disabled\\n"" , __func__ , n_IRQ )"		6227188	0					
ANR	6227239	Callee	DPRINTF		6227188	0					
ANR	6227240	Identifier	DPRINTF		6227188	0					
ANR	6227241	ArgumentList	"""%s: IRQ %d is disabled\\n"""		6227188	1					
ANR	6227242	Argument	"""%s: IRQ %d is disabled\\n"""		6227188	0					
ANR	6227243	PrimaryExpression	"""%s: IRQ %d is disabled\\n"""		6227188	0					
ANR	6227244	Argument	__func__		6227188	1					
ANR	6227245	Identifier	__func__		6227188	0					
ANR	6227246	Argument	n_IRQ		6227188	2					
ANR	6227247	Identifier	n_IRQ		6227188	0					
ANR	6227248	ReturnStatement	return ;	31:8:431:437	6227188	1	True				
ANR	6227249	IfStatement	if ( IPVP_PRIORITY ( src -> ipvp ) == 0 )		6227188	5					
ANR	6227250	Condition	IPVP_PRIORITY ( src -> ipvp ) == 0	35:8:455:483	6227188	0	True				
ANR	6227251	EqualityExpression	IPVP_PRIORITY ( src -> ipvp ) == 0		6227188	0		==			
ANR	6227252	CallExpression	IPVP_PRIORITY ( src -> ipvp )		6227188	0					
ANR	6227253	Callee	IPVP_PRIORITY		6227188	0					
ANR	6227254	Identifier	IPVP_PRIORITY		6227188	0					
ANR	6227255	ArgumentList	src -> ipvp		6227188	1					
ANR	6227256	Argument	src -> ipvp		6227188	0					
ANR	6227257	PtrMemberAccess	src -> ipvp		6227188	0					
ANR	6227258	Identifier	src		6227188	0					
ANR	6227259	Identifier	ipvp		6227188	1					
ANR	6227260	PrimaryExpression	0		6227188	1					
ANR	6227261	CompoundStatement		33:39:423:423	6227188	1					
ANR	6227262	ExpressionStatement	"DPRINTF ( ""%s: IRQ %d has 0 priority\\n"" , __func__ , n_IRQ )"	39:8:533:588	6227188	0	True				
ANR	6227263	CallExpression	"DPRINTF ( ""%s: IRQ %d has 0 priority\\n"" , __func__ , n_IRQ )"		6227188	0					
ANR	6227264	Callee	DPRINTF		6227188	0					
ANR	6227265	Identifier	DPRINTF		6227188	0					
ANR	6227266	ArgumentList	"""%s: IRQ %d has 0 priority\\n"""		6227188	1					
ANR	6227267	Argument	"""%s: IRQ %d has 0 priority\\n"""		6227188	0					
ANR	6227268	PrimaryExpression	"""%s: IRQ %d has 0 priority\\n"""		6227188	0					
ANR	6227269	Argument	__func__		6227188	1					
ANR	6227270	Identifier	__func__		6227188	0					
ANR	6227271	Argument	n_IRQ		6227188	2					
ANR	6227272	Identifier	n_IRQ		6227188	0					
ANR	6227273	ReturnStatement	return ;	41:8:599:605	6227188	1	True				
ANR	6227274	IfStatement	if ( src -> ipvp & IPVP_ACTIVITY_MASK )		6227188	6					
ANR	6227275	Condition	src -> ipvp & IPVP_ACTIVITY_MASK	45:8:623:652	6227188	0	True				
ANR	6227276	BitAndExpression	src -> ipvp & IPVP_ACTIVITY_MASK		6227188	0		&			
ANR	6227277	PtrMemberAccess	src -> ipvp		6227188	0					
ANR	6227278	Identifier	src		6227188	0					
ANR	6227279	Identifier	ipvp		6227188	1					
ANR	6227280	Identifier	IPVP_ACTIVITY_MASK		6227188	1					
ANR	6227281	CompoundStatement		43:40:592:592	6227188	1					
ANR	6227282	ExpressionStatement	"DPRINTF ( ""%s: IRQ %d is already active\\n"" , __func__ , n_IRQ )"	49:8:700:758	6227188	0	True				
ANR	6227283	CallExpression	"DPRINTF ( ""%s: IRQ %d is already active\\n"" , __func__ , n_IRQ )"		6227188	0					
ANR	6227284	Callee	DPRINTF		6227188	0					
ANR	6227285	Identifier	DPRINTF		6227188	0					
ANR	6227286	ArgumentList	"""%s: IRQ %d is already active\\n"""		6227188	1					
ANR	6227287	Argument	"""%s: IRQ %d is already active\\n"""		6227188	0					
ANR	6227288	PrimaryExpression	"""%s: IRQ %d is already active\\n"""		6227188	0					
ANR	6227289	Argument	__func__		6227188	1					
ANR	6227290	Identifier	__func__		6227188	0					
ANR	6227291	Argument	n_IRQ		6227188	2					
ANR	6227292	Identifier	n_IRQ		6227188	0					
ANR	6227293	ReturnStatement	return ;	51:8:769:775	6227188	1	True				
ANR	6227294	IfStatement	if ( src -> ide == 0 )		6227188	7					
ANR	6227295	Condition	src -> ide == 0	55:8:793:805	6227188	0	True				
ANR	6227296	EqualityExpression	src -> ide == 0		6227188	0		==			
ANR	6227297	PtrMemberAccess	src -> ide		6227188	0					
ANR	6227298	Identifier	src		6227188	0					
ANR	6227299	Identifier	ide		6227188	1					
ANR	6227300	PrimaryExpression	0		6227188	1					
ANR	6227301	CompoundStatement		53:23:745:745	6227188	1					
ANR	6227302	ExpressionStatement	"DPRINTF ( ""%s: IRQ %d has no target\\n"" , __func__ , n_IRQ )"	59:8:844:898	6227188	0	True				
ANR	6227303	CallExpression	"DPRINTF ( ""%s: IRQ %d has no target\\n"" , __func__ , n_IRQ )"		6227188	0					
ANR	6227304	Callee	DPRINTF		6227188	0					
ANR	6227305	Identifier	DPRINTF		6227188	0					
ANR	6227306	ArgumentList	"""%s: IRQ %d has no target\\n"""		6227188	1					
ANR	6227307	Argument	"""%s: IRQ %d has no target\\n"""		6227188	0					
ANR	6227308	PrimaryExpression	"""%s: IRQ %d has no target\\n"""		6227188	0					
ANR	6227309	Argument	__func__		6227188	1					
ANR	6227310	Identifier	__func__		6227188	0					
ANR	6227311	Argument	n_IRQ		6227188	2					
ANR	6227312	Identifier	n_IRQ		6227188	0					
ANR	6227313	ReturnStatement	return ;	61:8:909:915	6227188	1	True				
ANR	6227314	IfStatement	if ( src -> ide == ( 1 << src -> last_cpu ) )		6227188	8					
ANR	6227315	Condition	src -> ide == ( 1 << src -> last_cpu )	67:8:935:966	6227188	0	True				
ANR	6227316	EqualityExpression	src -> ide == ( 1 << src -> last_cpu )		6227188	0		==			
ANR	6227317	PtrMemberAccess	src -> ide		6227188	0					
ANR	6227318	Identifier	src		6227188	0					
ANR	6227319	Identifier	ide		6227188	1					
ANR	6227320	ShiftExpression	1 << src -> last_cpu		6227188	1		<<			
ANR	6227321	PrimaryExpression	1		6227188	0					
ANR	6227322	PtrMemberAccess	src -> last_cpu		6227188	1					
ANR	6227323	Identifier	src		6227188	0					
ANR	6227324	Identifier	last_cpu		6227188	1					
ANR	6227325	CompoundStatement		65:42:906:906	6227188	1					
ANR	6227326	ExpressionStatement	"IRQ_local_pipe ( opp , src -> last_cpu , n_IRQ )"	71:8:1039:1080	6227188	0	True				
ANR	6227327	CallExpression	"IRQ_local_pipe ( opp , src -> last_cpu , n_IRQ )"		6227188	0					
ANR	6227328	Callee	IRQ_local_pipe		6227188	0					
ANR	6227329	Identifier	IRQ_local_pipe		6227188	0					
ANR	6227330	ArgumentList	opp		6227188	1					
ANR	6227331	Argument	opp		6227188	0					
ANR	6227332	Identifier	opp		6227188	0					
ANR	6227333	Argument	src -> last_cpu		6227188	1					
ANR	6227334	PtrMemberAccess	src -> last_cpu		6227188	0					
ANR	6227335	Identifier	src		6227188	0					
ANR	6227336	Identifier	last_cpu		6227188	1					
ANR	6227337	Argument	n_IRQ		6227188	2					
ANR	6227338	Identifier	n_IRQ		6227188	0					
ANR	6227339	ElseStatement	else		6227188	0					
ANR	6227340	IfStatement	if ( ! ( src -> ipvp & IPVP_MODE_MASK ) )		6227188	0					
ANR	6227341	Condition	! ( src -> ipvp & IPVP_MODE_MASK )	73:15:1098:1126	6227188	0	True				
ANR	6227342	UnaryOperationExpression	! ( src -> ipvp & IPVP_MODE_MASK )		6227188	0					
ANR	6227343	UnaryOperator	!		6227188	0					
ANR	6227344	BitAndExpression	src -> ipvp & IPVP_MODE_MASK		6227188	1		&			
ANR	6227345	PtrMemberAccess	src -> ipvp		6227188	0					
ANR	6227346	Identifier	src		6227188	0					
ANR	6227347	Identifier	ipvp		6227188	1					
ANR	6227348	Identifier	IPVP_MODE_MASK		6227188	1					
ANR	6227349	CompoundStatement		71:46:1066:1066	6227188	1					
ANR	6227350	ForStatement	for ( i = 0 ; i < opp -> nb_cpus ; i ++ )		6227188	0					
ANR	6227351	ForInit	i = 0 ;	77:13:1183:1188	6227188	0	True				
ANR	6227352	AssignmentExpression	i = 0		6227188	0		=			
ANR	6227353	Identifier	i		6227188	0					
ANR	6227354	PrimaryExpression	0		6227188	1					
ANR	6227355	Condition	i < opp -> nb_cpus	77:20:1190:1205	6227188	1	True				
ANR	6227356	RelationalExpression	i < opp -> nb_cpus		6227188	0		<			
ANR	6227357	Identifier	i		6227188	0					
ANR	6227358	PtrMemberAccess	opp -> nb_cpus		6227188	1					
ANR	6227359	Identifier	opp		6227188	0					
ANR	6227360	Identifier	nb_cpus		6227188	1					
ANR	6227361	PostIncDecOperationExpression	i ++	77:38:1208:1210	6227188	2	True				
ANR	6227362	Identifier	i		6227188	0					
ANR	6227363	IncDec	++		6227188	1					
ANR	6227364	CompoundStatement		75:43:1150:1150	6227188	3					
ANR	6227365	IfStatement	if ( src -> ide & ( 1 << i ) )		6227188	0					
ANR	6227366	Condition	src -> ide & ( 1 << i )	79:16:1232:1250	6227188	0	True				
ANR	6227367	BitAndExpression	src -> ide & ( 1 << i )		6227188	0		&			
ANR	6227368	PtrMemberAccess	src -> ide		6227188	0					
ANR	6227369	Identifier	src		6227188	0					
ANR	6227370	Identifier	ide		6227188	1					
ANR	6227371	ShiftExpression	1 << i		6227188	1		<<			
ANR	6227372	PrimaryExpression	1		6227188	0					
ANR	6227373	Identifier	i		6227188	1					
ANR	6227374	CompoundStatement		77:37:1190:1190	6227188	1					
ANR	6227375	ExpressionStatement	"IRQ_local_pipe ( opp , i , n_IRQ )"	81:16:1272:1301	6227188	0	True				
ANR	6227376	CallExpression	"IRQ_local_pipe ( opp , i , n_IRQ )"		6227188	0					
ANR	6227377	Callee	IRQ_local_pipe		6227188	0					
ANR	6227378	Identifier	IRQ_local_pipe		6227188	0					
ANR	6227379	ArgumentList	opp		6227188	1					
ANR	6227380	Argument	opp		6227188	0					
ANR	6227381	Identifier	opp		6227188	0					
ANR	6227382	Argument	i		6227188	1					
ANR	6227383	Identifier	i		6227188	0					
ANR	6227384	Argument	n_IRQ		6227188	2					
ANR	6227385	Identifier	n_IRQ		6227188	0					
ANR	6227386	ElseStatement	else		6227188	0					
ANR	6227387	CompoundStatement		85:11:1278:1278	6227188	0					
ANR	6227388	ForStatement	for ( i = src -> last_cpu + 1 ; i != src -> last_cpu ; i ++ )		6227188	0					
ANR	6227389	ForInit	i = src -> last_cpu + 1 ;	91:13:1398:1419	6227188	0	True				
ANR	6227390	AssignmentExpression	i = src -> last_cpu + 1		6227188	0		=			
ANR	6227391	Identifier	i		6227188	0					
ANR	6227392	AdditiveExpression	src -> last_cpu + 1		6227188	1		+			
ANR	6227393	PtrMemberAccess	src -> last_cpu		6227188	0					
ANR	6227394	Identifier	src		6227188	0					
ANR	6227395	Identifier	last_cpu		6227188	1					
ANR	6227396	PrimaryExpression	1		6227188	1					
ANR	6227397	Condition	i != src -> last_cpu	91:36:1421:1438	6227188	1	True				
ANR	6227398	EqualityExpression	i != src -> last_cpu		6227188	0		!=			
ANR	6227399	Identifier	i		6227188	0					
ANR	6227400	PtrMemberAccess	src -> last_cpu		6227188	1					
ANR	6227401	Identifier	src		6227188	0					
ANR	6227402	Identifier	last_cpu		6227188	1					
ANR	6227403	PostIncDecOperationExpression	i ++	91:56:1441:1443	6227188	2	True				
ANR	6227404	Identifier	i		6227188	0					
ANR	6227405	IncDec	++		6227188	1					
ANR	6227406	CompoundStatement		89:61:1383:1383	6227188	3					
ANR	6227407	IfStatement	if ( i == opp -> nb_cpus )		6227188	0					
ANR	6227408	Condition	i == opp -> nb_cpus	93:16:1465:1481	6227188	0	True				
ANR	6227409	EqualityExpression	i == opp -> nb_cpus		6227188	0		==			
ANR	6227410	Identifier	i		6227188	0					
ANR	6227411	PtrMemberAccess	opp -> nb_cpus		6227188	1					
ANR	6227412	Identifier	opp		6227188	0					
ANR	6227413	Identifier	nb_cpus		6227188	1					
ANR	6227414	ExpressionStatement	i = 0	95:16:1501:1506	6227188	1	True				
ANR	6227415	AssignmentExpression	i = 0		6227188	0		=			
ANR	6227416	Identifier	i		6227188	0					
ANR	6227417	PrimaryExpression	0		6227188	1					
ANR	6227418	IfStatement	if ( src -> ide & ( 1 << i ) )		6227188	1					
ANR	6227419	Condition	src -> ide & ( 1 << i )	97:16:1525:1543	6227188	0	True				
ANR	6227420	BitAndExpression	src -> ide & ( 1 << i )		6227188	0		&			
ANR	6227421	PtrMemberAccess	src -> ide		6227188	0					
ANR	6227422	Identifier	src		6227188	0					
ANR	6227423	Identifier	ide		6227188	1					
ANR	6227424	ShiftExpression	1 << i		6227188	1		<<			
ANR	6227425	PrimaryExpression	1		6227188	0					
ANR	6227426	Identifier	i		6227188	1					
ANR	6227427	CompoundStatement		95:37:1483:1483	6227188	1					
ANR	6227428	ExpressionStatement	"IRQ_local_pipe ( opp , i , n_IRQ )"	99:16:1565:1594	6227188	0	True				
ANR	6227429	CallExpression	"IRQ_local_pipe ( opp , i , n_IRQ )"		6227188	0					
ANR	6227430	Callee	IRQ_local_pipe		6227188	0					
ANR	6227431	Identifier	IRQ_local_pipe		6227188	0					
ANR	6227432	ArgumentList	opp		6227188	1					
ANR	6227433	Argument	opp		6227188	0					
ANR	6227434	Identifier	opp		6227188	0					
ANR	6227435	Argument	i		6227188	1					
ANR	6227436	Identifier	i		6227188	0					
ANR	6227437	Argument	n_IRQ		6227188	2					
ANR	6227438	Identifier	n_IRQ		6227188	0					
ANR	6227439	ExpressionStatement	src -> last_cpu = i	101:16:1613:1630	6227188	1	True				
ANR	6227440	AssignmentExpression	src -> last_cpu = i		6227188	0		=			
ANR	6227441	PtrMemberAccess	src -> last_cpu		6227188	0					
ANR	6227442	Identifier	src		6227188	0					
ANR	6227443	Identifier	last_cpu		6227188	1					
ANR	6227444	Identifier	i		6227188	1					
ANR	6227445	BreakStatement	break ;	103:16:1649:1654	6227188	2	True				
ANR	6227446	ReturnType	static void		6227188	1					
ANR	6227447	Identifier	openpic_update_irq		6227188	2					
ANR	6227448	ParameterList	"OpenPICState * opp , int n_IRQ"		6227188	3					
ANR	6227449	Parameter	OpenPICState * opp	1:31:31:47	6227188	0	True				
ANR	6227450	ParameterType	OpenPICState *		6227188	0					
ANR	6227451	Identifier	opp		6227188	1					
ANR	6227452	Parameter	int n_IRQ	1:50:50:58	6227188	1	True				
ANR	6227453	ParameterType	int		6227188	0					
ANR	6227454	Identifier	n_IRQ		6227188	1					
ANR	6227455	CFGEntryNode	ENTRY		6227188		True				
ANR	6227456	CFGExitNode	EXIT		6227188		True				
ANR	6227457	Symbol	src -> ide		6227188						
ANR	6227458	Symbol	src		6227188						
ANR	6227459	Symbol	IPVP_MODE_MASK		6227188						
ANR	6227460	Symbol	opp -> nb_cpus		6227188						
ANR	6227461	Symbol	i		6227188						
ANR	6227462	Symbol	n_IRQ		6227188						
ANR	6227463	Symbol	opp		6227188						
ANR	6227464	Symbol	* src		6227188						
ANR	6227465	Symbol	opp -> src		6227188						
ANR	6227466	Symbol	src -> pending		6227188						
ANR	6227467	Symbol	src -> ipvp		6227188						
ANR	6227468	Symbol	src -> last_cpu		6227188						
ANR	6227469	Symbol	__func__		6227188						
ANR	6227470	Symbol	IPVP_ACTIVITY_MASK		6227188						
ANR	6227471	Symbol	* opp		6227188						
ANR	6227472	Symbol	IPVP_MASK_MASK		6227188						
ANR	6227473	Symbol	IPVP_PRIORITY		6227188						
