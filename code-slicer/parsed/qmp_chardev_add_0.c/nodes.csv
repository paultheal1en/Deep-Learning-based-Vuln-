command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	7088344	File	/home/p4ultr4n/workplace/ReVeal/raw_code/qmp_chardev_add_0.c								
ANR	7088345	Function	qmp_chardev_add	1:0:0:2528							
ANR	7088346	FunctionDef	"qmp_chardev_add (const char * id , ChardevBackend * backend , Error * * errp)"		7088345	0					
ANR	7088347	CompoundStatement		5:0:119:2528	7088345	0					
ANR	7088348	IdentifierDeclStatement	"ChardevReturn * ret = g_new0 ( ChardevReturn , 1 ) ;"	7:4:126:171	7088345	0	True				
ANR	7088349	IdentifierDecl	"* ret = g_new0 ( ChardevReturn , 1 )"		7088345	0					
ANR	7088350	IdentifierDeclType	ChardevReturn *		7088345	0					
ANR	7088351	Identifier	ret		7088345	1					
ANR	7088352	AssignmentExpression	"* ret = g_new0 ( ChardevReturn , 1 )"		7088345	2		=			
ANR	7088353	Identifier	ret		7088345	0					
ANR	7088354	CallExpression	"g_new0 ( ChardevReturn , 1 )"		7088345	1					
ANR	7088355	Callee	g_new0		7088345	0					
ANR	7088356	Identifier	g_new0		7088345	0					
ANR	7088357	ArgumentList	ChardevReturn		7088345	1					
ANR	7088358	Argument	ChardevReturn		7088345	0					
ANR	7088359	Identifier	ChardevReturn		7088345	0					
ANR	7088360	Argument	1		7088345	1					
ANR	7088361	PrimaryExpression	1		7088345	0					
ANR	7088362	IdentifierDeclStatement	"CharDriverState * base , * chr = NULL ;"	9:4:178:212	7088345	1	True				
ANR	7088363	IdentifierDecl	* base		7088345	0					
ANR	7088364	IdentifierDeclType	CharDriverState *		7088345	0					
ANR	7088365	Identifier	base		7088345	1					
ANR	7088366	IdentifierDecl	* chr = NULL		7088345	1					
ANR	7088367	IdentifierDeclType	CharDriverState *		7088345	0					
ANR	7088368	Identifier	chr		7088345	1					
ANR	7088369	AssignmentExpression	* chr = NULL		7088345	2		=			
ANR	7088370	Identifier	NULL		7088345	0					
ANR	7088371	Identifier	NULL		7088345	1					
ANR	7088372	ExpressionStatement	chr = qemu_chr_find ( id )	13:4:221:244	7088345	2	True				
ANR	7088373	AssignmentExpression	chr = qemu_chr_find ( id )		7088345	0		=			
ANR	7088374	Identifier	chr		7088345	0					
ANR	7088375	CallExpression	qemu_chr_find ( id )		7088345	1					
ANR	7088376	Callee	qemu_chr_find		7088345	0					
ANR	7088377	Identifier	qemu_chr_find		7088345	0					
ANR	7088378	ArgumentList	id		7088345	1					
ANR	7088379	Argument	id		7088345	0					
ANR	7088380	Identifier	id		7088345	0					
ANR	7088381	IfStatement	if ( chr )		7088345	3					
ANR	7088382	Condition	chr	15:8:255:257	7088345	0	True				
ANR	7088383	Identifier	chr		7088345	0					
ANR	7088384	CompoundStatement		11:13:140:140	7088345	1					
ANR	7088385	ExpressionStatement	"error_setg ( errp , ""Chardev '%s' already exists"" , id )"	17:8:271:322	7088345	0	True				
ANR	7088386	CallExpression	"error_setg ( errp , ""Chardev '%s' already exists"" , id )"		7088345	0					
ANR	7088387	Callee	error_setg		7088345	0					
ANR	7088388	Identifier	error_setg		7088345	0					
ANR	7088389	ArgumentList	errp		7088345	1					
ANR	7088390	Argument	errp		7088345	0					
ANR	7088391	Identifier	errp		7088345	0					
ANR	7088392	Argument	"""Chardev '%s' already exists"""		7088345	1					
ANR	7088393	PrimaryExpression	"""Chardev '%s' already exists"""		7088345	0					
ANR	7088394	Argument	id		7088345	2					
ANR	7088395	Identifier	id		7088345	0					
ANR	7088396	ExpressionStatement	g_free ( ret )	19:8:333:344	7088345	1	True				
ANR	7088397	CallExpression	g_free ( ret )		7088345	0					
ANR	7088398	Callee	g_free		7088345	0					
ANR	7088399	Identifier	g_free		7088345	0					
ANR	7088400	ArgumentList	ret		7088345	1					
ANR	7088401	Argument	ret		7088345	0					
ANR	7088402	Identifier	ret		7088345	0					
ANR	7088403	ReturnStatement	return NULL ;	21:8:355:366	7088345	2	True				
ANR	7088404	Identifier	NULL		7088345	0					
ANR	7088405	SwitchStatement	switch ( backend -> kind )		7088345	4					
ANR	7088406	Condition	backend -> kind	27:12:390:402	7088345	0	True				
ANR	7088407	PtrMemberAccess	backend -> kind		7088345	0					
ANR	7088408	Identifier	backend		7088345	0					
ANR	7088409	Identifier	kind		7088345	1					
ANR	7088410	CompoundStatement		23:27:285:285	7088345	1					
ANR	7088411	Label	case CHARDEV_BACKEND_KIND_FILE :	29:4:412:442	7088345	0	True				
ANR	7088412	Identifier	CHARDEV_BACKEND_KIND_FILE		7088345	0					
ANR	7088413	ExpressionStatement	"chr = qmp_chardev_open_file ( backend -> file , errp )"	31:8:453:501	7088345	1	True				
ANR	7088414	AssignmentExpression	"chr = qmp_chardev_open_file ( backend -> file , errp )"		7088345	0		=			
ANR	7088415	Identifier	chr		7088345	0					
ANR	7088416	CallExpression	"qmp_chardev_open_file ( backend -> file , errp )"		7088345	1					
ANR	7088417	Callee	qmp_chardev_open_file		7088345	0					
ANR	7088418	Identifier	qmp_chardev_open_file		7088345	0					
ANR	7088419	ArgumentList	backend -> file		7088345	1					
ANR	7088420	Argument	backend -> file		7088345	0					
ANR	7088421	PtrMemberAccess	backend -> file		7088345	0					
ANR	7088422	Identifier	backend		7088345	0					
ANR	7088423	Identifier	file		7088345	1					
ANR	7088424	Argument	errp		7088345	1					
ANR	7088425	Identifier	errp		7088345	0					
ANR	7088426	BreakStatement	break ;	33:8:512:517	7088345	2	True				
ANR	7088427	Label	case CHARDEV_BACKEND_KIND_SERIAL :	35:4:524:556	7088345	3	True				
ANR	7088428	Identifier	CHARDEV_BACKEND_KIND_SERIAL		7088345	0					
ANR	7088429	ExpressionStatement	"chr = qmp_chardev_open_serial ( backend -> serial , errp )"	37:8:567:619	7088345	4	True				
ANR	7088430	AssignmentExpression	"chr = qmp_chardev_open_serial ( backend -> serial , errp )"		7088345	0		=			
ANR	7088431	Identifier	chr		7088345	0					
ANR	7088432	CallExpression	"qmp_chardev_open_serial ( backend -> serial , errp )"		7088345	1					
ANR	7088433	Callee	qmp_chardev_open_serial		7088345	0					
ANR	7088434	Identifier	qmp_chardev_open_serial		7088345	0					
ANR	7088435	ArgumentList	backend -> serial		7088345	1					
ANR	7088436	Argument	backend -> serial		7088345	0					
ANR	7088437	PtrMemberAccess	backend -> serial		7088345	0					
ANR	7088438	Identifier	backend		7088345	0					
ANR	7088439	Identifier	serial		7088345	1					
ANR	7088440	Argument	errp		7088345	1					
ANR	7088441	Identifier	errp		7088345	0					
ANR	7088442	BreakStatement	break ;	39:8:630:635	7088345	5	True				
ANR	7088443	Label	case CHARDEV_BACKEND_KIND_PARALLEL :	41:4:642:676	7088345	6	True				
ANR	7088444	Identifier	CHARDEV_BACKEND_KIND_PARALLEL		7088345	0					
ANR	7088445	ExpressionStatement	"chr = qmp_chardev_open_parallel ( backend -> parallel , errp )"	43:8:687:743	7088345	7	True				
ANR	7088446	AssignmentExpression	"chr = qmp_chardev_open_parallel ( backend -> parallel , errp )"		7088345	0		=			
ANR	7088447	Identifier	chr		7088345	0					
ANR	7088448	CallExpression	"qmp_chardev_open_parallel ( backend -> parallel , errp )"		7088345	1					
ANR	7088449	Callee	qmp_chardev_open_parallel		7088345	0					
ANR	7088450	Identifier	qmp_chardev_open_parallel		7088345	0					
ANR	7088451	ArgumentList	backend -> parallel		7088345	1					
ANR	7088452	Argument	backend -> parallel		7088345	0					
ANR	7088453	PtrMemberAccess	backend -> parallel		7088345	0					
ANR	7088454	Identifier	backend		7088345	0					
ANR	7088455	Identifier	parallel		7088345	1					
ANR	7088456	Argument	errp		7088345	1					
ANR	7088457	Identifier	errp		7088345	0					
ANR	7088458	BreakStatement	break ;	45:8:754:759	7088345	8	True				
ANR	7088459	Label	case CHARDEV_BACKEND_KIND_SOCKET :	47:4:766:798	7088345	9	True				
ANR	7088460	Identifier	CHARDEV_BACKEND_KIND_SOCKET		7088345	0					
ANR	7088461	ExpressionStatement	"chr = qmp_chardev_open_socket ( backend -> socket , errp )"	49:8:809:861	7088345	10	True				
ANR	7088462	AssignmentExpression	"chr = qmp_chardev_open_socket ( backend -> socket , errp )"		7088345	0		=			
ANR	7088463	Identifier	chr		7088345	0					
ANR	7088464	CallExpression	"qmp_chardev_open_socket ( backend -> socket , errp )"		7088345	1					
ANR	7088465	Callee	qmp_chardev_open_socket		7088345	0					
ANR	7088466	Identifier	qmp_chardev_open_socket		7088345	0					
ANR	7088467	ArgumentList	backend -> socket		7088345	1					
ANR	7088468	Argument	backend -> socket		7088345	0					
ANR	7088469	PtrMemberAccess	backend -> socket		7088345	0					
ANR	7088470	Identifier	backend		7088345	0					
ANR	7088471	Identifier	socket		7088345	1					
ANR	7088472	Argument	errp		7088345	1					
ANR	7088473	Identifier	errp		7088345	0					
ANR	7088474	BreakStatement	break ;	51:8:872:877	7088345	11	True				
ANR	7088475	Label	case CHARDEV_BACKEND_KIND_PTY :	55:4:909:938	7088345	12	True				
ANR	7088476	Identifier	CHARDEV_BACKEND_KIND_PTY		7088345	0					
ANR	7088477	CompoundStatement		57:8:889:903	7088345	13					
ANR	7088478	IdentifierDeclStatement	QemuOpts * opts ;	61:8:1009:1023	7088345	0	True				
ANR	7088479	IdentifierDecl	* opts		7088345	0					
ANR	7088480	IdentifierDeclType	QemuOpts *		7088345	0					
ANR	7088481	Identifier	opts		7088345	1					
ANR	7088482	ExpressionStatement	"opts = qemu_opts_create_nofail ( qemu_find_opts ( ""chardev"" ) )"	63:8:1034:1091	7088345	1	True				
ANR	7088483	AssignmentExpression	"opts = qemu_opts_create_nofail ( qemu_find_opts ( ""chardev"" ) )"		7088345	0		=			
ANR	7088484	Identifier	opts		7088345	0					
ANR	7088485	CallExpression	"qemu_opts_create_nofail ( qemu_find_opts ( ""chardev"" ) )"		7088345	1					
ANR	7088486	Callee	qemu_opts_create_nofail		7088345	0					
ANR	7088487	Identifier	qemu_opts_create_nofail		7088345	0					
ANR	7088488	ArgumentList	"qemu_find_opts ( ""chardev"" )"		7088345	1					
ANR	7088489	Argument	"qemu_find_opts ( ""chardev"" )"		7088345	0					
ANR	7088490	CallExpression	"qemu_find_opts ( ""chardev"" )"		7088345	0					
ANR	7088491	Callee	qemu_find_opts		7088345	0					
ANR	7088492	Identifier	qemu_find_opts		7088345	0					
ANR	7088493	ArgumentList	"""chardev"""		7088345	1					
ANR	7088494	Argument	"""chardev"""		7088345	0					
ANR	7088495	PrimaryExpression	"""chardev"""		7088345	0					
ANR	7088496	ExpressionStatement	chr = qemu_chr_open_pty ( opts )	65:8:1102:1131	7088345	2	True				
ANR	7088497	AssignmentExpression	chr = qemu_chr_open_pty ( opts )		7088345	0		=			
ANR	7088498	Identifier	chr		7088345	0					
ANR	7088499	CallExpression	qemu_chr_open_pty ( opts )		7088345	1					
ANR	7088500	Callee	qemu_chr_open_pty		7088345	0					
ANR	7088501	Identifier	qemu_chr_open_pty		7088345	0					
ANR	7088502	ArgumentList	opts		7088345	1					
ANR	7088503	Argument	opts		7088345	0					
ANR	7088504	Identifier	opts		7088345	0					
ANR	7088505	ExpressionStatement	"ret -> pty = g_strdup ( qemu_opt_get ( opts , ""path"" ) )"	67:8:1142:1189	7088345	3	True				
ANR	7088506	AssignmentExpression	"ret -> pty = g_strdup ( qemu_opt_get ( opts , ""path"" ) )"		7088345	0		=			
ANR	7088507	PtrMemberAccess	ret -> pty		7088345	0					
ANR	7088508	Identifier	ret		7088345	0					
ANR	7088509	Identifier	pty		7088345	1					
ANR	7088510	CallExpression	"g_strdup ( qemu_opt_get ( opts , ""path"" ) )"		7088345	1					
ANR	7088511	Callee	g_strdup		7088345	0					
ANR	7088512	Identifier	g_strdup		7088345	0					
ANR	7088513	ArgumentList	"qemu_opt_get ( opts , ""path"" )"		7088345	1					
ANR	7088514	Argument	"qemu_opt_get ( opts , ""path"" )"		7088345	0					
ANR	7088515	CallExpression	"qemu_opt_get ( opts , ""path"" )"		7088345	0					
ANR	7088516	Callee	qemu_opt_get		7088345	0					
ANR	7088517	Identifier	qemu_opt_get		7088345	0					
ANR	7088518	ArgumentList	opts		7088345	1					
ANR	7088519	Argument	opts		7088345	0					
ANR	7088520	Identifier	opts		7088345	0					
ANR	7088521	Argument	"""path"""		7088345	1					
ANR	7088522	PrimaryExpression	"""path"""		7088345	0					
ANR	7088523	ExpressionStatement	ret -> has_pty = true	69:8:1200:1219	7088345	4	True				
ANR	7088524	AssignmentExpression	ret -> has_pty = true		7088345	0		=			
ANR	7088525	PtrMemberAccess	ret -> has_pty		7088345	0					
ANR	7088526	Identifier	ret		7088345	0					
ANR	7088527	Identifier	has_pty		7088345	1					
ANR	7088528	Identifier	true		7088345	1					
ANR	7088529	ExpressionStatement	qemu_opts_del ( opts )	71:8:1230:1249	7088345	5	True				
ANR	7088530	CallExpression	qemu_opts_del ( opts )		7088345	0					
ANR	7088531	Callee	qemu_opts_del		7088345	0					
ANR	7088532	Identifier	qemu_opts_del		7088345	0					
ANR	7088533	ArgumentList	opts		7088345	1					
ANR	7088534	Argument	opts		7088345	0					
ANR	7088535	Identifier	opts		7088345	0					
ANR	7088536	BreakStatement	break ;	73:8:1260:1265	7088345	6	True				
ANR	7088537	Label	case CHARDEV_BACKEND_KIND_NULL :	79:4:1287:1317	7088345	14	True				
ANR	7088538	Identifier	CHARDEV_BACKEND_KIND_NULL		7088345	0					
ANR	7088539	ExpressionStatement	chr = qemu_chr_open_null ( )	81:8:1328:1354	7088345	15	True				
ANR	7088540	AssignmentExpression	chr = qemu_chr_open_null ( )		7088345	0		=			
ANR	7088541	Identifier	chr		7088345	0					
ANR	7088542	CallExpression	qemu_chr_open_null ( )		7088345	1					
ANR	7088543	Callee	qemu_chr_open_null		7088345	0					
ANR	7088544	Identifier	qemu_chr_open_null		7088345	0					
ANR	7088545	ArgumentList			7088345	1					
ANR	7088546	BreakStatement	break ;	83:8:1365:1370	7088345	16	True				
ANR	7088547	Label	case CHARDEV_BACKEND_KIND_MUX :	85:4:1377:1406	7088345	17	True				
ANR	7088548	Identifier	CHARDEV_BACKEND_KIND_MUX		7088345	0					
ANR	7088549	ExpressionStatement	base = qemu_chr_find ( backend -> mux -> chardev )	87:8:1417:1460	7088345	18	True				
ANR	7088550	AssignmentExpression	base = qemu_chr_find ( backend -> mux -> chardev )		7088345	0		=			
ANR	7088551	Identifier	base		7088345	0					
ANR	7088552	CallExpression	qemu_chr_find ( backend -> mux -> chardev )		7088345	1					
ANR	7088553	Callee	qemu_chr_find		7088345	0					
ANR	7088554	Identifier	qemu_chr_find		7088345	0					
ANR	7088555	ArgumentList	backend -> mux -> chardev		7088345	1					
ANR	7088556	Argument	backend -> mux -> chardev		7088345	0					
ANR	7088557	PtrMemberAccess	backend -> mux -> chardev		7088345	0					
ANR	7088558	PtrMemberAccess	backend -> mux		7088345	0					
ANR	7088559	Identifier	backend		7088345	0					
ANR	7088560	Identifier	mux		7088345	1					
ANR	7088561	Identifier	chardev		7088345	1					
ANR	7088562	IfStatement	if ( base == NULL )		7088345	19					
ANR	7088563	Condition	base == NULL	89:12:1475:1486	7088345	0	True				
ANR	7088564	EqualityExpression	base == NULL		7088345	0		==			
ANR	7088565	Identifier	base		7088345	0					
ANR	7088566	Identifier	NULL		7088345	1					
ANR	7088567	CompoundStatement		85:26:1369:1369	7088345	1					
ANR	7088568	ExpressionStatement	"error_setg ( errp , ""mux: base chardev %s not found"" , backend -> mux -> chardev )"	91:12:1504:1601	7088345	0	True				
ANR	7088569	CallExpression	"error_setg ( errp , ""mux: base chardev %s not found"" , backend -> mux -> chardev )"		7088345	0					
ANR	7088570	Callee	error_setg		7088345	0					
ANR	7088571	Identifier	error_setg		7088345	0					
ANR	7088572	ArgumentList	errp		7088345	1					
ANR	7088573	Argument	errp		7088345	0					
ANR	7088574	Identifier	errp		7088345	0					
ANR	7088575	Argument	"""mux: base chardev %s not found"""		7088345	1					
ANR	7088576	PrimaryExpression	"""mux: base chardev %s not found"""		7088345	0					
ANR	7088577	Argument	backend -> mux -> chardev		7088345	2					
ANR	7088578	PtrMemberAccess	backend -> mux -> chardev		7088345	0					
ANR	7088579	PtrMemberAccess	backend -> mux		7088345	0					
ANR	7088580	Identifier	backend		7088345	0					
ANR	7088581	Identifier	mux		7088345	1					
ANR	7088582	Identifier	chardev		7088345	1					
ANR	7088583	BreakStatement	break ;	95:12:1616:1621	7088345	1	True				
ANR	7088584	ExpressionStatement	chr = qemu_chr_open_mux ( base )	99:8:1643:1672	7088345	20	True				
ANR	7088585	AssignmentExpression	chr = qemu_chr_open_mux ( base )		7088345	0		=			
ANR	7088586	Identifier	chr		7088345	0					
ANR	7088587	CallExpression	qemu_chr_open_mux ( base )		7088345	1					
ANR	7088588	Callee	qemu_chr_open_mux		7088345	0					
ANR	7088589	Identifier	qemu_chr_open_mux		7088345	0					
ANR	7088590	ArgumentList	base		7088345	1					
ANR	7088591	Argument	base		7088345	0					
ANR	7088592	Identifier	base		7088345	0					
ANR	7088593	BreakStatement	break ;	101:8:1683:1688	7088345	21	True				
ANR	7088594	Label	case CHARDEV_BACKEND_KIND_MSMOUSE :	103:4:1695:1728	7088345	22	True				
ANR	7088595	Identifier	CHARDEV_BACKEND_KIND_MSMOUSE		7088345	0					
ANR	7088596	ExpressionStatement	chr = qemu_chr_open_msmouse ( )	105:8:1739:1768	7088345	23	True				
ANR	7088597	AssignmentExpression	chr = qemu_chr_open_msmouse ( )		7088345	0		=			
ANR	7088598	Identifier	chr		7088345	0					
ANR	7088599	CallExpression	qemu_chr_open_msmouse ( )		7088345	1					
ANR	7088600	Callee	qemu_chr_open_msmouse		7088345	0					
ANR	7088601	Identifier	qemu_chr_open_msmouse		7088345	0					
ANR	7088602	ArgumentList			7088345	1					
ANR	7088603	BreakStatement	break ;	107:8:1779:1784	7088345	24	True				
ANR	7088604	Label	case CHARDEV_BACKEND_KIND_BRAILLE :	111:4:1813:1846	7088345	25	True				
ANR	7088605	Identifier	CHARDEV_BACKEND_KIND_BRAILLE		7088345	0					
ANR	7088606	ExpressionStatement	chr = chr_baum_init ( )	113:8:1857:1878	7088345	26	True				
ANR	7088607	AssignmentExpression	chr = chr_baum_init ( )		7088345	0		=			
ANR	7088608	Identifier	chr		7088345	0					
ANR	7088609	CallExpression	chr_baum_init ( )		7088345	1					
ANR	7088610	Callee	chr_baum_init		7088345	0					
ANR	7088611	Identifier	chr_baum_init		7088345	0					
ANR	7088612	ArgumentList			7088345	1					
ANR	7088613	BreakStatement	break ;	115:8:1889:1894	7088345	27	True				
ANR	7088614	Label	case CHARDEV_BACKEND_KIND_STDIO :	119:4:1909:1940	7088345	28	True				
ANR	7088615	Identifier	CHARDEV_BACKEND_KIND_STDIO		7088345	0					
ANR	7088616	ExpressionStatement	chr = qemu_chr_open_stdio ( backend -> stdio )	121:8:1951:1992	7088345	29	True				
ANR	7088617	AssignmentExpression	chr = qemu_chr_open_stdio ( backend -> stdio )		7088345	0		=			
ANR	7088618	Identifier	chr		7088345	0					
ANR	7088619	CallExpression	qemu_chr_open_stdio ( backend -> stdio )		7088345	1					
ANR	7088620	Callee	qemu_chr_open_stdio		7088345	0					
ANR	7088621	Identifier	qemu_chr_open_stdio		7088345	0					
ANR	7088622	ArgumentList	backend -> stdio		7088345	1					
ANR	7088623	Argument	backend -> stdio		7088345	0					
ANR	7088624	PtrMemberAccess	backend -> stdio		7088345	0					
ANR	7088625	Identifier	backend		7088345	0					
ANR	7088626	Identifier	stdio		7088345	1					
ANR	7088627	BreakStatement	break ;	123:8:2003:2008	7088345	30	True				
ANR	7088628	Label	default :	125:4:2015:2022	7088345	31	True				
ANR	7088629	Identifier	default		7088345	0					
ANR	7088630	ExpressionStatement	"error_setg ( errp , ""unknown chardev backend (%d)"" , backend -> kind )"	127:8:2033:2096	7088345	32	True				
ANR	7088631	CallExpression	"error_setg ( errp , ""unknown chardev backend (%d)"" , backend -> kind )"		7088345	0					
ANR	7088632	Callee	error_setg		7088345	0					
ANR	7088633	Identifier	error_setg		7088345	0					
ANR	7088634	ArgumentList	errp		7088345	1					
ANR	7088635	Argument	errp		7088345	0					
ANR	7088636	Identifier	errp		7088345	0					
ANR	7088637	Argument	"""unknown chardev backend (%d)"""		7088345	1					
ANR	7088638	PrimaryExpression	"""unknown chardev backend (%d)"""		7088345	0					
ANR	7088639	Argument	backend -> kind		7088345	2					
ANR	7088640	PtrMemberAccess	backend -> kind		7088345	0					
ANR	7088641	Identifier	backend		7088345	0					
ANR	7088642	Identifier	kind		7088345	1					
ANR	7088643	BreakStatement	break ;	129:8:2107:2112	7088345	33	True				
ANR	7088644	IfStatement	if ( chr == NULL && ! error_is_set ( errp ) )		7088345	5					
ANR	7088645	Condition	chr == NULL && ! error_is_set ( errp )	135:8:2132:2165	7088345	0	True				
ANR	7088646	AndExpression	chr == NULL && ! error_is_set ( errp )		7088345	0		&&			
ANR	7088647	EqualityExpression	chr == NULL		7088345	0		==			
ANR	7088648	Identifier	chr		7088345	0					
ANR	7088649	Identifier	NULL		7088345	1					
ANR	7088650	UnaryOperationExpression	! error_is_set ( errp )		7088345	1					
ANR	7088651	UnaryOperator	!		7088345	0					
ANR	7088652	CallExpression	error_is_set ( errp )		7088345	1					
ANR	7088653	Callee	error_is_set		7088345	0					
ANR	7088654	Identifier	error_is_set		7088345	0					
ANR	7088655	ArgumentList	errp		7088345	1					
ANR	7088656	Argument	errp		7088345	0					
ANR	7088657	Identifier	errp		7088345	0					
ANR	7088658	CompoundStatement		131:44:2048:2048	7088345	1					
ANR	7088659	ExpressionStatement	"error_setg ( errp , ""Failed to create chardev"" )"	137:8:2179:2223	7088345	0	True				
ANR	7088660	CallExpression	"error_setg ( errp , ""Failed to create chardev"" )"		7088345	0					
ANR	7088661	Callee	error_setg		7088345	0					
ANR	7088662	Identifier	error_setg		7088345	0					
ANR	7088663	ArgumentList	errp		7088345	1					
ANR	7088664	Argument	errp		7088345	0					
ANR	7088665	Identifier	errp		7088345	0					
ANR	7088666	Argument	"""Failed to create chardev"""		7088345	1					
ANR	7088667	PrimaryExpression	"""Failed to create chardev"""		7088345	0					
ANR	7088668	IfStatement	if ( chr )		7088345	6					
ANR	7088669	Condition	chr	141:8:2241:2243	7088345	0	True				
ANR	7088670	Identifier	chr		7088345	0					
ANR	7088671	CompoundStatement		137:13:2126:2126	7088345	1					
ANR	7088672	ExpressionStatement	chr -> label = g_strdup ( id )	143:8:2257:2282	7088345	0	True				
ANR	7088673	AssignmentExpression	chr -> label = g_strdup ( id )		7088345	0		=			
ANR	7088674	PtrMemberAccess	chr -> label		7088345	0					
ANR	7088675	Identifier	chr		7088345	0					
ANR	7088676	Identifier	label		7088345	1					
ANR	7088677	CallExpression	g_strdup ( id )		7088345	1					
ANR	7088678	Callee	g_strdup		7088345	0					
ANR	7088679	Identifier	g_strdup		7088345	0					
ANR	7088680	ArgumentList	id		7088345	1					
ANR	7088681	Argument	id		7088345	0					
ANR	7088682	Identifier	id		7088345	0					
ANR	7088683	ExpressionStatement	chr -> avail_connections = ( backend -> kind == CHARDEV_BACKEND_KIND_MUX ) ? MAX_MUX : 1	145:8:2293:2388	7088345	1	True				
ANR	7088684	AssignmentExpression	chr -> avail_connections = ( backend -> kind == CHARDEV_BACKEND_KIND_MUX ) ? MAX_MUX : 1		7088345	0		=			
ANR	7088685	PtrMemberAccess	chr -> avail_connections		7088345	0					
ANR	7088686	Identifier	chr		7088345	0					
ANR	7088687	Identifier	avail_connections		7088345	1					
ANR	7088688	ConditionalExpression	( backend -> kind == CHARDEV_BACKEND_KIND_MUX ) ? MAX_MUX : 1		7088345	1					
ANR	7088689	Condition	backend -> kind == CHARDEV_BACKEND_KIND_MUX		7088345	0					
ANR	7088690	EqualityExpression	backend -> kind == CHARDEV_BACKEND_KIND_MUX		7088345	0		==			
ANR	7088691	PtrMemberAccess	backend -> kind		7088345	0					
ANR	7088692	Identifier	backend		7088345	0					
ANR	7088693	Identifier	kind		7088345	1					
ANR	7088694	Identifier	CHARDEV_BACKEND_KIND_MUX		7088345	1					
ANR	7088695	Identifier	MAX_MUX		7088345	1					
ANR	7088696	PrimaryExpression	1		7088345	2					
ANR	7088697	ExpressionStatement	"QTAILQ_INSERT_TAIL ( & chardevs , chr , next )"	149:8:2399:2439	7088345	2	True				
ANR	7088698	CallExpression	"QTAILQ_INSERT_TAIL ( & chardevs , chr , next )"		7088345	0					
ANR	7088699	Callee	QTAILQ_INSERT_TAIL		7088345	0					
ANR	7088700	Identifier	QTAILQ_INSERT_TAIL		7088345	0					
ANR	7088701	ArgumentList	& chardevs		7088345	1					
ANR	7088702	Argument	& chardevs		7088345	0					
ANR	7088703	UnaryOperationExpression	& chardevs		7088345	0					
ANR	7088704	UnaryOperator	&		7088345	0					
ANR	7088705	Identifier	chardevs		7088345	1					
ANR	7088706	Argument	chr		7088345	1					
ANR	7088707	Identifier	chr		7088345	0					
ANR	7088708	Argument	next		7088345	2					
ANR	7088709	Identifier	next		7088345	0					
ANR	7088710	ReturnStatement	return ret ;	151:8:2450:2460	7088345	3	True				
ANR	7088711	Identifier	ret		7088345	0					
ANR	7088712	ElseStatement	else		7088345	0					
ANR	7088713	CompoundStatement		149:11:2354:2354	7088345	0					
ANR	7088714	ExpressionStatement	g_free ( ret )	155:8:2485:2496	7088345	0	True				
ANR	7088715	CallExpression	g_free ( ret )		7088345	0					
ANR	7088716	Callee	g_free		7088345	0					
ANR	7088717	Identifier	g_free		7088345	0					
ANR	7088718	ArgumentList	ret		7088345	1					
ANR	7088719	Argument	ret		7088345	0					
ANR	7088720	Identifier	ret		7088345	0					
ANR	7088721	ReturnStatement	return NULL ;	157:8:2507:2518	7088345	1	True				
ANR	7088722	Identifier	NULL		7088345	0					
ANR	7088723	ReturnType	ChardevReturn *		7088345	1					
ANR	7088724	Identifier	qmp_chardev_add		7088345	2					
ANR	7088725	ParameterList	"const char * id , ChardevBackend * backend , Error * * errp"		7088345	3					
ANR	7088726	Parameter	const char * id	1:31:31:44	7088345	0	True				
ANR	7088727	ParameterType	const char *		7088345	0					
ANR	7088728	Identifier	id		7088345	1					
ANR	7088729	Parameter	ChardevBackend * backend	1:47:47:69	7088345	1	True				
ANR	7088730	ParameterType	ChardevBackend *		7088345	0					
ANR	7088731	Identifier	backend		7088345	1					
ANR	7088732	Parameter	Error * * errp	3:31:104:115	7088345	2	True				
ANR	7088733	ParameterType	Error * *		7088345	0					
ANR	7088734	Identifier	errp		7088345	1					
ANR	7088735	CFGEntryNode	ENTRY		7088345		True				
ANR	7088736	CFGExitNode	EXIT		7088345		True				
ANR	7088737	Symbol	backend -> kind		7088345						
ANR	7088738	Symbol	next		7088345						
ANR	7088739	Symbol	qemu_find_opts		7088345						
ANR	7088740	Symbol	& chardevs		7088345						
ANR	7088741	Symbol	errp		7088345						
ANR	7088742	Symbol	qemu_opt_get		7088345						
ANR	7088743	Symbol	qemu_chr_open_mux		7088345						
ANR	7088744	Symbol	qmp_chardev_open_socket		7088345						
ANR	7088745	Symbol	* * backend		7088345						
ANR	7088746	Symbol	backend -> serial		7088345						
ANR	7088747	Symbol	* ret		7088345						
ANR	7088748	Symbol	backend -> parallel		7088345						
ANR	7088749	Symbol	CHARDEV_BACKEND_KIND_MUX		7088345						
ANR	7088750	Symbol	qmp_chardev_open_serial		7088345						
ANR	7088751	Symbol	qemu_chr_open_stdio		7088345						
ANR	7088752	Symbol	opts		7088345						
ANR	7088753	Symbol	backend -> mux		7088345						
ANR	7088754	Symbol	error_is_set		7088345						
ANR	7088755	Symbol	g_strdup		7088345						
ANR	7088756	Symbol	g_new0		7088345						
ANR	7088757	Symbol	ChardevReturn		7088345						
ANR	7088758	Symbol	backend		7088345						
ANR	7088759	Symbol	MAX_MUX		7088345						
ANR	7088760	Symbol	id		7088345						
ANR	7088761	Symbol	ret		7088345						
ANR	7088762	Symbol	ret -> pty		7088345						
ANR	7088763	Symbol	NULL		7088345						
ANR	7088764	Symbol	qemu_chr_open_pty		7088345						
ANR	7088765	Symbol	qemu_opts_create_nofail		7088345						
ANR	7088766	Symbol	* chr		7088345						
ANR	7088767	Symbol	backend -> file		7088345						
ANR	7088768	Symbol	qmp_chardev_open_parallel		7088345						
ANR	7088769	Symbol	chr		7088345						
ANR	7088770	Symbol	backend -> mux -> chardev		7088345						
ANR	7088771	Symbol	qmp_chardev_open_file		7088345						
ANR	7088772	Symbol	qemu_chr_open_msmouse		7088345						
ANR	7088773	Symbol	* backend		7088345						
ANR	7088774	Symbol	backend -> socket		7088345						
ANR	7088775	Symbol	qemu_chr_open_null		7088345						
ANR	7088776	Symbol	* backend -> mux		7088345						
ANR	7088777	Symbol	chr -> label		7088345						
ANR	7088778	Symbol	true		7088345						
ANR	7088779	Symbol	chr -> avail_connections		7088345						
ANR	7088780	Symbol	ret -> has_pty		7088345						
ANR	7088781	Symbol	base		7088345						
ANR	7088782	Symbol	qemu_chr_find		7088345						
ANR	7088783	Symbol	chr_baum_init		7088345						
ANR	7088784	Symbol	backend -> stdio		7088345						
