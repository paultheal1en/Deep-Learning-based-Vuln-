command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4948002	File	/home/p4ultr4n/workplace/ReVeal/raw_code/integrate_0.c								
ANR	4948003	Function	integrate	1:0:0:1367							
ANR	4948004	FunctionDef	"integrate (hdcd_state_t * state , int * flag , const int32_t * samples , int count , int stride)"		4948003	0					
ANR	4948005	CompoundStatement		3:0:101:1367	4948003	0					
ANR	4948006	IdentifierDeclStatement	uint32_t bits = 0 ;	5:4:108:125	4948003	0	True				
ANR	4948007	IdentifierDecl	bits = 0		4948003	0					
ANR	4948008	IdentifierDeclType	uint32_t		4948003	0					
ANR	4948009	Identifier	bits		4948003	1					
ANR	4948010	AssignmentExpression	bits = 0		4948003	2		=			
ANR	4948011	Identifier	bits		4948003	0					
ANR	4948012	PrimaryExpression	0		4948003	1					
ANR	4948013	IdentifierDeclStatement	"int result = FFMIN ( state -> readahead , count ) ;"	7:4:132:175	4948003	1	True				
ANR	4948014	IdentifierDecl	"result = FFMIN ( state -> readahead , count )"		4948003	0					
ANR	4948015	IdentifierDeclType	int		4948003	0					
ANR	4948016	Identifier	result		4948003	1					
ANR	4948017	AssignmentExpression	"result = FFMIN ( state -> readahead , count )"		4948003	2		=			
ANR	4948018	Identifier	result		4948003	0					
ANR	4948019	CallExpression	"FFMIN ( state -> readahead , count )"		4948003	1					
ANR	4948020	Callee	FFMIN		4948003	0					
ANR	4948021	Identifier	FFMIN		4948003	0					
ANR	4948022	ArgumentList	state -> readahead		4948003	1					
ANR	4948023	Argument	state -> readahead		4948003	0					
ANR	4948024	PtrMemberAccess	state -> readahead		4948003	0					
ANR	4948025	Identifier	state		4948003	0					
ANR	4948026	Identifier	readahead		4948003	1					
ANR	4948027	Argument	count		4948003	1					
ANR	4948028	Identifier	count		4948003	0					
ANR	4948029	IdentifierDeclStatement	int i ;	9:4:182:187	4948003	2	True				
ANR	4948030	IdentifierDecl	i		4948003	0					
ANR	4948031	IdentifierDeclType	int		4948003	0					
ANR	4948032	Identifier	i		4948003	1					
ANR	4948033	ExpressionStatement	* flag = 0	11:4:194:203	4948003	3	True				
ANR	4948034	AssignmentExpression	* flag = 0		4948003	0		=			
ANR	4948035	UnaryOperationExpression	* flag		4948003	0					
ANR	4948036	UnaryOperator	*		4948003	0					
ANR	4948037	Identifier	flag		4948003	1					
ANR	4948038	PrimaryExpression	0		4948003	1					
ANR	4948039	ForStatement	for ( i = result - 1 ; i >= 0 ; i -- )		4948003	4					
ANR	4948040	ForInit	i = result - 1 ;	15:9:217:231	4948003	0	True				
ANR	4948041	AssignmentExpression	i = result - 1		4948003	0		=			
ANR	4948042	Identifier	i		4948003	0					
ANR	4948043	AdditiveExpression	result - 1		4948003	1		-			
ANR	4948044	Identifier	result		4948003	0					
ANR	4948045	PrimaryExpression	1		4948003	1					
ANR	4948046	Condition	i >= 0	15:25:233:238	4948003	1	True				
ANR	4948047	RelationalExpression	i >= 0		4948003	0		>=			
ANR	4948048	Identifier	i		4948003	0					
ANR	4948049	PrimaryExpression	0		4948003	1					
ANR	4948050	PostIncDecOperationExpression	i --	15:33:241:243	4948003	2	True				
ANR	4948051	Identifier	i		4948003	0					
ANR	4948052	IncDec	--		4948003	1					
ANR	4948053	CompoundStatement		13:38:144:144	4948003	3					
ANR	4948054	ExpressionStatement	bits |= ( * samples & 1 ) << i	17:8:257:284	4948003	0	True				
ANR	4948055	AssignmentExpression	bits |= ( * samples & 1 ) << i		4948003	0		|=			
ANR	4948056	Identifier	bits		4948003	0					
ANR	4948057	ShiftExpression	( * samples & 1 ) << i		4948003	1		<<			
ANR	4948058	BitAndExpression	* samples & 1		4948003	0		&			
ANR	4948059	UnaryOperationExpression	* samples		4948003	0					
ANR	4948060	UnaryOperator	*		4948003	0					
ANR	4948061	Identifier	samples		4948003	1					
ANR	4948062	PrimaryExpression	1		4948003	1					
ANR	4948063	Identifier	i		4948003	1					
ANR	4948064	ExpressionStatement	samples += stride	19:8:335:352	4948003	1	True				
ANR	4948065	AssignmentExpression	samples += stride		4948003	0		+=			
ANR	4948066	Identifier	samples		4948003	0					
ANR	4948067	Identifier	stride		4948003	1					
ANR	4948068	ExpressionStatement	state -> window = ( state -> window << result ) | bits	25:4:368:416	4948003	5	True				
ANR	4948069	AssignmentExpression	state -> window = ( state -> window << result ) | bits		4948003	0		=			
ANR	4948070	PtrMemberAccess	state -> window		4948003	0					
ANR	4948071	Identifier	state		4948003	0					
ANR	4948072	Identifier	window		4948003	1					
ANR	4948073	InclusiveOrExpression	( state -> window << result ) | bits		4948003	1		|			
ANR	4948074	ShiftExpression	state -> window << result		4948003	0		<<			
ANR	4948075	PtrMemberAccess	state -> window		4948003	0					
ANR	4948076	Identifier	state		4948003	0					
ANR	4948077	Identifier	window		4948003	1					
ANR	4948078	Identifier	result		4948003	1					
ANR	4948079	Identifier	bits		4948003	1					
ANR	4948080	ExpressionStatement	state -> readahead -= result	27:4:423:449	4948003	6	True				
ANR	4948081	AssignmentExpression	state -> readahead -= result		4948003	0		-=			
ANR	4948082	PtrMemberAccess	state -> readahead		4948003	0					
ANR	4948083	Identifier	state		4948003	0					
ANR	4948084	Identifier	readahead		4948003	1					
ANR	4948085	Identifier	result		4948003	1					
ANR	4948086	IfStatement	if ( state -> readahead > 0 )		4948003	7					
ANR	4948087	Condition	state -> readahead > 0	29:8:460:479	4948003	0	True				
ANR	4948088	RelationalExpression	state -> readahead > 0		4948003	0		>			
ANR	4948089	PtrMemberAccess	state -> readahead		4948003	0					
ANR	4948090	Identifier	state		4948003	0					
ANR	4948091	Identifier	readahead		4948003	1					
ANR	4948092	PrimaryExpression	0		4948003	1					
ANR	4948093	ReturnStatement	return result ;	31:8:491:504	4948003	1	True				
ANR	4948094	Identifier	result		4948003	0					
ANR	4948095	ExpressionStatement	bits = ( state -> window ^ state -> window >> 5 ^ state -> window >> 23 )	35:4:513:578	4948003	8	True				
ANR	4948096	AssignmentExpression	bits = ( state -> window ^ state -> window >> 5 ^ state -> window >> 23 )		4948003	0		=			
ANR	4948097	Identifier	bits		4948003	0					
ANR	4948098	ExclusiveOrExpression	state -> window ^ state -> window >> 5 ^ state -> window >> 23		4948003	1		^			
ANR	4948099	PtrMemberAccess	state -> window		4948003	0					
ANR	4948100	Identifier	state		4948003	0					
ANR	4948101	Identifier	window		4948003	1					
ANR	4948102	ExclusiveOrExpression	state -> window >> 5 ^ state -> window >> 23		4948003	1		^			
ANR	4948103	ShiftExpression	state -> window >> 5		4948003	0		>>			
ANR	4948104	PtrMemberAccess	state -> window		4948003	0					
ANR	4948105	Identifier	state		4948003	0					
ANR	4948106	Identifier	window		4948003	1					
ANR	4948107	PrimaryExpression	5		4948003	1					
ANR	4948108	ShiftExpression	state -> window >> 23		4948003	1		>>			
ANR	4948109	PtrMemberAccess	state -> window		4948003	0					
ANR	4948110	Identifier	state		4948003	0					
ANR	4948111	Identifier	window		4948003	1					
ANR	4948112	PrimaryExpression	23		4948003	1					
ANR	4948113	IfStatement	if ( state -> arg )		4948003	9					
ANR	4948114	Condition	state -> arg	39:8:591:600	4948003	0	True				
ANR	4948115	PtrMemberAccess	state -> arg		4948003	0					
ANR	4948116	Identifier	state		4948003	0					
ANR	4948117	Identifier	arg		4948003	1					
ANR	4948118	CompoundStatement		37:20:501:501	4948003	1					
ANR	4948119	IfStatement	if ( ( bits & 0xffffffc8 ) == 0x0fa00500 )		4948003	0					
ANR	4948120	Condition	( bits & 0xffffffc8 ) == 0x0fa00500	41:12:618:650	4948003	0	True				
ANR	4948121	EqualityExpression	( bits & 0xffffffc8 ) == 0x0fa00500		4948003	0		==			
ANR	4948122	BitAndExpression	bits & 0xffffffc8		4948003	0		&			
ANR	4948123	Identifier	bits		4948003	0					
ANR	4948124	PrimaryExpression	0xffffffc8		4948003	1					
ANR	4948125	PrimaryExpression	0x0fa00500		4948003	1					
ANR	4948126	CompoundStatement		39:47:551:551	4948003	1					
ANR	4948127	ExpressionStatement	state -> control = ( bits & 255 ) + ( bits & 7 )	43:12:668:710	4948003	0	True				
ANR	4948128	AssignmentExpression	state -> control = ( bits & 255 ) + ( bits & 7 )		4948003	0		=			
ANR	4948129	PtrMemberAccess	state -> control		4948003	0					
ANR	4948130	Identifier	state		4948003	0					
ANR	4948131	Identifier	control		4948003	1					
ANR	4948132	AdditiveExpression	( bits & 255 ) + ( bits & 7 )		4948003	1		+			
ANR	4948133	BitAndExpression	bits & 255		4948003	0		&			
ANR	4948134	Identifier	bits		4948003	0					
ANR	4948135	PrimaryExpression	255		4948003	1					
ANR	4948136	BitAndExpression	bits & 7		4948003	1		&			
ANR	4948137	Identifier	bits		4948003	0					
ANR	4948138	PrimaryExpression	7		4948003	1					
ANR	4948139	ExpressionStatement	* flag = 1	45:12:725:734	4948003	1	True				
ANR	4948140	AssignmentExpression	* flag = 1		4948003	0		=			
ANR	4948141	UnaryOperationExpression	* flag		4948003	0					
ANR	4948142	UnaryOperator	*		4948003	0					
ANR	4948143	Identifier	flag		4948003	1					
ANR	4948144	PrimaryExpression	1		4948003	1					
ANR	4948145	ExpressionStatement	state -> code_counterA ++	47:12:749:771	4948003	2	True				
ANR	4948146	PostIncDecOperationExpression	state -> code_counterA ++		4948003	0					
ANR	4948147	PtrMemberAccess	state -> code_counterA		4948003	0					
ANR	4948148	Identifier	state		4948003	0					
ANR	4948149	Identifier	code_counterA		4948003	1					
ANR	4948150	IncDec	++		4948003	1					
ANR	4948151	IfStatement	if ( ( ( bits ^ ( ~bits >> 8 & 255 ) ) & 0xffff00ff ) == 0xa0060000 )		4948003	1					
ANR	4948152	Condition	( ( bits ^ ( ~bits >> 8 & 255 ) ) & 0xffff00ff ) == 0xa0060000	51:12:797:852	4948003	0	True				
ANR	4948153	EqualityExpression	( ( bits ^ ( ~bits >> 8 & 255 ) ) & 0xffff00ff ) == 0xa0060000		4948003	0		==			
ANR	4948154	BitAndExpression	( bits ^ ( ~bits >> 8 & 255 ) ) & 0xffff00ff		4948003	0		&			
ANR	4948155	ExclusiveOrExpression	bits ^ ( ~bits >> 8 & 255 )		4948003	0		^			
ANR	4948156	Identifier	bits		4948003	0					
ANR	4948157	BitAndExpression	~bits >> 8 & 255		4948003	1		&			
ANR	4948158	ShiftExpression	~bits >> 8		4948003	0		>>			
ANR	4948159	Identifier	~bits		4948003	0					
ANR	4948160	PrimaryExpression	8		4948003	1					
ANR	4948161	PrimaryExpression	255		4948003	1					
ANR	4948162	PrimaryExpression	0xffff00ff		4948003	1					
ANR	4948163	PrimaryExpression	0xa0060000		4948003	1					
ANR	4948164	CompoundStatement		49:70:753:753	4948003	1					
ANR	4948165	ExpressionStatement	state -> control = bits >> 8 & 255	53:12:870:902	4948003	0	True				
ANR	4948166	AssignmentExpression	state -> control = bits >> 8 & 255		4948003	0		=			
ANR	4948167	PtrMemberAccess	state -> control		4948003	0					
ANR	4948168	Identifier	state		4948003	0					
ANR	4948169	Identifier	control		4948003	1					
ANR	4948170	BitAndExpression	bits >> 8 & 255		4948003	1		&			
ANR	4948171	ShiftExpression	bits >> 8		4948003	0		>>			
ANR	4948172	Identifier	bits		4948003	0					
ANR	4948173	PrimaryExpression	8		4948003	1					
ANR	4948174	PrimaryExpression	255		4948003	1					
ANR	4948175	ExpressionStatement	* flag = 1	55:12:917:926	4948003	1	True				
ANR	4948176	AssignmentExpression	* flag = 1		4948003	0		=			
ANR	4948177	UnaryOperationExpression	* flag		4948003	0					
ANR	4948178	UnaryOperator	*		4948003	0					
ANR	4948179	Identifier	flag		4948003	1					
ANR	4948180	PrimaryExpression	1		4948003	1					
ANR	4948181	ExpressionStatement	state -> code_counterB ++	57:12:941:963	4948003	2	True				
ANR	4948182	PostIncDecOperationExpression	state -> code_counterB ++		4948003	0					
ANR	4948183	PtrMemberAccess	state -> code_counterB		4948003	0					
ANR	4948184	Identifier	state		4948003	0					
ANR	4948185	Identifier	code_counterB		4948003	1					
ANR	4948186	IncDec	++		4948003	1					
ANR	4948187	ExpressionStatement	state -> arg = 0	61:8:985:999	4948003	2	True				
ANR	4948188	AssignmentExpression	state -> arg = 0		4948003	0		=			
ANR	4948189	PtrMemberAccess	state -> arg		4948003	0					
ANR	4948190	Identifier	state		4948003	0					
ANR	4948191	Identifier	arg		4948003	1					
ANR	4948192	PrimaryExpression	0		4948003	1					
ANR	4948193	IfStatement	if ( bits == 0x7e0fa005 || bits == 0x7e0fa006 )		4948003	10					
ANR	4948194	Condition	bits == 0x7e0fa005 || bits == 0x7e0fa006	65:8:1017:1056	4948003	0	True				
ANR	4948195	OrExpression	bits == 0x7e0fa005 || bits == 0x7e0fa006		4948003	0		||			
ANR	4948196	EqualityExpression	bits == 0x7e0fa005		4948003	0		==			
ANR	4948197	Identifier	bits		4948003	0					
ANR	4948198	PrimaryExpression	0x7e0fa005		4948003	1					
ANR	4948199	EqualityExpression	bits == 0x7e0fa006		4948003	1		==			
ANR	4948200	Identifier	bits		4948003	0					
ANR	4948201	PrimaryExpression	0x7e0fa006		4948003	1					
ANR	4948202	CompoundStatement		63:50:957:957	4948003	1					
ANR	4948203	ExpressionStatement	state -> readahead = ( bits & 3 ) * 8	67:8:1070:1103	4948003	0	True				
ANR	4948204	AssignmentExpression	state -> readahead = ( bits & 3 ) * 8		4948003	0		=			
ANR	4948205	PtrMemberAccess	state -> readahead		4948003	0					
ANR	4948206	Identifier	state		4948003	0					
ANR	4948207	Identifier	readahead		4948003	1					
ANR	4948208	MultiplicativeExpression	( bits & 3 ) * 8		4948003	1		*			
ANR	4948209	BitAndExpression	bits & 3		4948003	0		&			
ANR	4948210	Identifier	bits		4948003	0					
ANR	4948211	PrimaryExpression	3		4948003	1					
ANR	4948212	PrimaryExpression	8		4948003	1					
ANR	4948213	ExpressionStatement	state -> arg = 1	69:8:1114:1128	4948003	1	True				
ANR	4948214	AssignmentExpression	state -> arg = 1		4948003	0		=			
ANR	4948215	PtrMemberAccess	state -> arg		4948003	0					
ANR	4948216	Identifier	state		4948003	0					
ANR	4948217	Identifier	arg		4948003	1					
ANR	4948218	PrimaryExpression	1		4948003	1					
ANR	4948219	ExpressionStatement	state -> code_counterC ++	71:8:1139:1161	4948003	2	True				
ANR	4948220	PostIncDecOperationExpression	state -> code_counterC ++		4948003	0					
ANR	4948221	PtrMemberAccess	state -> code_counterC		4948003	0					
ANR	4948222	Identifier	state		4948003	0					
ANR	4948223	Identifier	code_counterC		4948003	1					
ANR	4948224	IncDec	++		4948003	1					
ANR	4948225	ElseStatement	else		4948003	0					
ANR	4948226	CompoundStatement		71:11:1073:1073	4948003	0					
ANR	4948227	IfStatement	if ( bits )		4948003	0					
ANR	4948228	Condition	bits	75:12:1190:1193	4948003	0	True				
ANR	4948229	Identifier	bits		4948003	0					
ANR	4948230	ExpressionStatement	state -> readahead = readaheadtab [ bits & ~ ( - 1 << 8 ) ]	77:12:1209:1259	4948003	1	True				
ANR	4948231	AssignmentExpression	state -> readahead = readaheadtab [ bits & ~ ( - 1 << 8 ) ]		4948003	0		=			
ANR	4948232	PtrMemberAccess	state -> readahead		4948003	0					
ANR	4948233	Identifier	state		4948003	0					
ANR	4948234	Identifier	readahead		4948003	1					
ANR	4948235	ArrayIndexing	readaheadtab [ bits & ~ ( - 1 << 8 ) ]		4948003	1					
ANR	4948236	Identifier	readaheadtab		4948003	0					
ANR	4948237	BitAndExpression	bits & ~ ( - 1 << 8 )		4948003	1		&			
ANR	4948238	Identifier	bits		4948003	0					
ANR	4948239	UnaryOperationExpression	~ ( - 1 << 8 )		4948003	1					
ANR	4948240	UnaryOperator	~		4948003	0					
ANR	4948241	ShiftExpression	- 1 << 8		4948003	1		<<			
ANR	4948242	UnaryOperationExpression	- 1		4948003	0					
ANR	4948243	UnaryOperator	-		4948003	0					
ANR	4948244	PrimaryExpression	1		4948003	1					
ANR	4948245	PrimaryExpression	8		4948003	1					
ANR	4948246	ElseStatement	else		4948003	0					
ANR	4948247	ExpressionStatement	state -> readahead = 31	81:12:1288:1309	4948003	0	True				
ANR	4948248	AssignmentExpression	state -> readahead = 31		4948003	0		=			
ANR	4948249	PtrMemberAccess	state -> readahead		4948003	0					
ANR	4948250	Identifier	state		4948003	0					
ANR	4948251	Identifier	readahead		4948003	1					
ANR	4948252	PrimaryExpression	31		4948003	1					
ANR	4948253	ReturnStatement	return result ;	85:4:1351:1364	4948003	11	True				
ANR	4948254	Identifier	result		4948003	0					
ANR	4948255	ReturnType	static int		4948003	1					
ANR	4948256	Identifier	integrate		4948003	2					
ANR	4948257	ParameterList	"hdcd_state_t * state , int * flag , const int32_t * samples , int count , int stride"		4948003	3					
ANR	4948258	Parameter	hdcd_state_t * state	1:21:21:39	4948003	0	True				
ANR	4948259	ParameterType	hdcd_state_t *		4948003	0					
ANR	4948260	Identifier	state		4948003	1					
ANR	4948261	Parameter	int * flag	1:42:42:50	4948003	1	True				
ANR	4948262	ParameterType	int *		4948003	0					
ANR	4948263	Identifier	flag		4948003	1					
ANR	4948264	Parameter	const int32_t * samples	1:53:53:74	4948003	2	True				
ANR	4948265	ParameterType	const int32_t *		4948003	0					
ANR	4948266	Identifier	samples		4948003	1					
ANR	4948267	Parameter	int count	1:77:77:85	4948003	3	True				
ANR	4948268	ParameterType	int		4948003	0					
ANR	4948269	Identifier	count		4948003	1					
ANR	4948270	Parameter	int stride	1:88:88:97	4948003	4	True				
ANR	4948271	ParameterType	int		4948003	0					
ANR	4948272	Identifier	stride		4948003	1					
ANR	4948273	CFGEntryNode	ENTRY		4948003		True				
ANR	4948274	CFGExitNode	EXIT		4948003		True				
ANR	4948275	Symbol	* bits		4948003						
ANR	4948276	Symbol	* readaheadtab		4948003						
ANR	4948277	Symbol	flag		4948003						
ANR	4948278	Symbol	count		4948003						
ANR	4948279	Symbol	bits		4948003						
ANR	4948280	Symbol	FFMIN		4948003						
ANR	4948281	Symbol	i		4948003						
ANR	4948282	Symbol	stride		4948003						
ANR	4948283	Symbol	samples		4948003						
ANR	4948284	Symbol	result		4948003						
ANR	4948285	Symbol	* state		4948003						
ANR	4948286	Symbol	state -> window		4948003						
ANR	4948287	Symbol	state -> arg		4948003						
ANR	4948288	Symbol	state -> readahead		4948003						
ANR	4948289	Symbol	* samples		4948003						
ANR	4948290	Symbol	state -> code_counterC		4948003						
ANR	4948291	Symbol	state -> code_counterB		4948003						
ANR	4948292	Symbol	readaheadtab		4948003						
ANR	4948293	Symbol	~bits		4948003						
ANR	4948294	Symbol	state -> code_counterA		4948003						
ANR	4948295	Symbol	state		4948003						
ANR	4948296	Symbol	* flag		4948003						
ANR	4948297	Symbol	state -> control		4948003						
