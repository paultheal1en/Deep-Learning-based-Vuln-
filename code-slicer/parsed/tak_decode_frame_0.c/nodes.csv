command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8170448	File	/home/p4ultr4n/workplace/ReVeal/raw_code/tak_decode_frame_0.c								
ANR	8170449	Function	tak_decode_frame	1:0:0:8845							
ANR	8170450	FunctionDef	"tak_decode_frame (AVCodecContext * avctx , void * data , int * got_frame_ptr , AVPacket * pkt)"		8170449	0					
ANR	8170451	CompoundStatement		5:0:128:8845	8170449	0					
ANR	8170452	IdentifierDeclStatement	TAKDecContext * s = avctx -> priv_data ;	7:4:135:171	8170449	0	True				
ANR	8170453	IdentifierDecl	* s = avctx -> priv_data		8170449	0					
ANR	8170454	IdentifierDeclType	TAKDecContext *		8170449	0					
ANR	8170455	Identifier	s		8170449	1					
ANR	8170456	AssignmentExpression	* s = avctx -> priv_data		8170449	2		=			
ANR	8170457	Identifier	s		8170449	0					
ANR	8170458	PtrMemberAccess	avctx -> priv_data		8170449	1					
ANR	8170459	Identifier	avctx		8170449	0					
ANR	8170460	Identifier	priv_data		8170449	1					
ANR	8170461	IdentifierDeclStatement	AVFrame * frame = data ;	9:4:178:202	8170449	1	True				
ANR	8170462	IdentifierDecl	* frame = data		8170449	0					
ANR	8170463	IdentifierDeclType	AVFrame *		8170449	0					
ANR	8170464	Identifier	frame		8170449	1					
ANR	8170465	AssignmentExpression	* frame = data		8170449	2		=			
ANR	8170466	Identifier	data		8170449	0					
ANR	8170467	Identifier	data		8170449	1					
ANR	8170468	Statement	ThreadFrame	11:4:209:219	8170449	2	True				
ANR	8170469	Statement	tframe	11:16:221:226	8170449	3	True				
ANR	8170470	Statement	=	11:23:228:228	8170449	4	True				
ANR	8170471	CompoundStatement		7:25:101:101	8170449	5					
ANR	8170472	Statement	.	11:27:232:232	8170449	0	True				
ANR	8170473	Statement	f	11:28:233:233	8170449	1	True				
ANR	8170474	Statement	=	11:30:235:235	8170449	2	True				
ANR	8170475	Statement	data	11:32:237:240	8170449	3	True				
ANR	8170476	ExpressionStatement		11:38:243:243	8170449	6	True				
ANR	8170477	IdentifierDeclStatement	GetBitContext * gb = & s -> gb ;	13:4:250:276	8170449	7	True				
ANR	8170478	IdentifierDecl	* gb = & s -> gb		8170449	0					
ANR	8170479	IdentifierDeclType	GetBitContext *		8170449	0					
ANR	8170480	Identifier	gb		8170449	1					
ANR	8170481	AssignmentExpression	* gb = & s -> gb		8170449	2		=			
ANR	8170482	Identifier	gb		8170449	0					
ANR	8170483	UnaryOperationExpression	& s -> gb		8170449	1					
ANR	8170484	UnaryOperator	&		8170449	0					
ANR	8170485	PtrMemberAccess	s -> gb		8170449	1					
ANR	8170486	Identifier	s		8170449	0					
ANR	8170487	Identifier	gb		8170449	1					
ANR	8170488	IdentifierDeclStatement	"int chan , i , ret , hsize ;"	15:4:283:306	8170449	8	True				
ANR	8170489	IdentifierDecl	chan		8170449	0					
ANR	8170490	IdentifierDeclType	int		8170449	0					
ANR	8170491	Identifier	chan		8170449	1					
ANR	8170492	IdentifierDecl	i		8170449	1					
ANR	8170493	IdentifierDeclType	int		8170449	0					
ANR	8170494	Identifier	i		8170449	1					
ANR	8170495	IdentifierDecl	ret		8170449	2					
ANR	8170496	IdentifierDeclType	int		8170449	0					
ANR	8170497	Identifier	ret		8170449	1					
ANR	8170498	IdentifierDecl	hsize		8170449	3					
ANR	8170499	IdentifierDeclType	int		8170449	0					
ANR	8170500	Identifier	hsize		8170449	1					
ANR	8170501	IfStatement	if ( pkt -> size < TAK_MIN_FRAME_HEADER_BYTES )		8170449	9					
ANR	8170502	Condition	pkt -> size < TAK_MIN_FRAME_HEADER_BYTES	19:8:319:356	8170449	0	True				
ANR	8170503	RelationalExpression	pkt -> size < TAK_MIN_FRAME_HEADER_BYTES		8170449	0		<			
ANR	8170504	PtrMemberAccess	pkt -> size		8170449	0					
ANR	8170505	Identifier	pkt		8170449	0					
ANR	8170506	Identifier	size		8170449	1					
ANR	8170507	Identifier	TAK_MIN_FRAME_HEADER_BYTES		8170449	1					
ANR	8170508	ReturnStatement	return AVERROR_INVALIDDATA ;	21:8:368:394	8170449	1	True				
ANR	8170509	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8170510	IfStatement	"if ( ( ret = init_get_bits8 ( gb , pkt -> data , pkt -> size ) ) < 0 )"		8170449	10					
ANR	8170511	Condition	"( ret = init_get_bits8 ( gb , pkt -> data , pkt -> size ) ) < 0"	25:8:407:458	8170449	0	True				
ANR	8170512	RelationalExpression	"( ret = init_get_bits8 ( gb , pkt -> data , pkt -> size ) ) < 0"		8170449	0		<			
ANR	8170513	AssignmentExpression	"ret = init_get_bits8 ( gb , pkt -> data , pkt -> size )"		8170449	0		=			
ANR	8170514	Identifier	ret		8170449	0					
ANR	8170515	CallExpression	"init_get_bits8 ( gb , pkt -> data , pkt -> size )"		8170449	1					
ANR	8170516	Callee	init_get_bits8		8170449	0					
ANR	8170517	Identifier	init_get_bits8		8170449	0					
ANR	8170518	ArgumentList	gb		8170449	1					
ANR	8170519	Argument	gb		8170449	0					
ANR	8170520	Identifier	gb		8170449	0					
ANR	8170521	Argument	pkt -> data		8170449	1					
ANR	8170522	PtrMemberAccess	pkt -> data		8170449	0					
ANR	8170523	Identifier	pkt		8170449	0					
ANR	8170524	Identifier	data		8170449	1					
ANR	8170525	Argument	pkt -> size		8170449	2					
ANR	8170526	PtrMemberAccess	pkt -> size		8170449	0					
ANR	8170527	Identifier	pkt		8170449	0					
ANR	8170528	Identifier	size		8170449	1					
ANR	8170529	PrimaryExpression	0		8170449	1					
ANR	8170530	ReturnStatement	return ret ;	27:8:470:480	8170449	1	True				
ANR	8170531	Identifier	ret		8170449	0					
ANR	8170532	IfStatement	"if ( ( ret = ff_tak_decode_frame_header ( avctx , gb , & s -> ti , 0 ) ) < 0 )"		8170449	11					
ANR	8170533	Condition	"( ret = ff_tak_decode_frame_header ( avctx , gb , & s -> ti , 0 ) ) < 0"	31:8:493:552	8170449	0	True				
ANR	8170534	RelationalExpression	"( ret = ff_tak_decode_frame_header ( avctx , gb , & s -> ti , 0 ) ) < 0"		8170449	0		<			
ANR	8170535	AssignmentExpression	"ret = ff_tak_decode_frame_header ( avctx , gb , & s -> ti , 0 )"		8170449	0		=			
ANR	8170536	Identifier	ret		8170449	0					
ANR	8170537	CallExpression	"ff_tak_decode_frame_header ( avctx , gb , & s -> ti , 0 )"		8170449	1					
ANR	8170538	Callee	ff_tak_decode_frame_header		8170449	0					
ANR	8170539	Identifier	ff_tak_decode_frame_header		8170449	0					
ANR	8170540	ArgumentList	avctx		8170449	1					
ANR	8170541	Argument	avctx		8170449	0					
ANR	8170542	Identifier	avctx		8170449	0					
ANR	8170543	Argument	gb		8170449	1					
ANR	8170544	Identifier	gb		8170449	0					
ANR	8170545	Argument	& s -> ti		8170449	2					
ANR	8170546	UnaryOperationExpression	& s -> ti		8170449	0					
ANR	8170547	UnaryOperator	&		8170449	0					
ANR	8170548	PtrMemberAccess	s -> ti		8170449	1					
ANR	8170549	Identifier	s		8170449	0					
ANR	8170550	Identifier	ti		8170449	1					
ANR	8170551	Argument	0		8170449	3					
ANR	8170552	PrimaryExpression	0		8170449	0					
ANR	8170553	PrimaryExpression	0		8170449	1					
ANR	8170554	ReturnStatement	return ret ;	33:8:564:574	8170449	1	True				
ANR	8170555	Identifier	ret		8170449	0					
ANR	8170556	IfStatement	if ( avctx -> err_recognition & ( AV_EF_CRCCHECK | AV_EF_COMPLIANT ) )		8170449	12					
ANR	8170557	Condition	avctx -> err_recognition & ( AV_EF_CRCCHECK | AV_EF_COMPLIANT )	37:8:587:643	8170449	0	True				
ANR	8170558	BitAndExpression	avctx -> err_recognition & ( AV_EF_CRCCHECK | AV_EF_COMPLIANT )		8170449	0		&			
ANR	8170559	PtrMemberAccess	avctx -> err_recognition		8170449	0					
ANR	8170560	Identifier	avctx		8170449	0					
ANR	8170561	Identifier	err_recognition		8170449	1					
ANR	8170562	InclusiveOrExpression	AV_EF_CRCCHECK | AV_EF_COMPLIANT		8170449	1		|			
ANR	8170563	Identifier	AV_EF_CRCCHECK		8170449	0					
ANR	8170564	Identifier	AV_EF_COMPLIANT		8170449	1					
ANR	8170565	CompoundStatement		33:67:517:517	8170449	1					
ANR	8170566	ExpressionStatement	hsize = get_bits_count ( gb ) / 8	39:8:657:687	8170449	0	True				
ANR	8170567	AssignmentExpression	hsize = get_bits_count ( gb ) / 8		8170449	0		=			
ANR	8170568	Identifier	hsize		8170449	0					
ANR	8170569	MultiplicativeExpression	get_bits_count ( gb ) / 8		8170449	1		/			
ANR	8170570	CallExpression	get_bits_count ( gb )		8170449	0					
ANR	8170571	Callee	get_bits_count		8170449	0					
ANR	8170572	Identifier	get_bits_count		8170449	0					
ANR	8170573	ArgumentList	gb		8170449	1					
ANR	8170574	Argument	gb		8170449	0					
ANR	8170575	Identifier	gb		8170449	0					
ANR	8170576	PrimaryExpression	8		8170449	1					
ANR	8170577	IfStatement	"if ( ff_tak_check_crc ( pkt -> data , hsize ) )"		8170449	1					
ANR	8170578	Condition	"ff_tak_check_crc ( pkt -> data , hsize )"	41:12:702:735	8170449	0	True				
ANR	8170579	CallExpression	"ff_tak_check_crc ( pkt -> data , hsize )"		8170449	0					
ANR	8170580	Callee	ff_tak_check_crc		8170449	0					
ANR	8170581	Identifier	ff_tak_check_crc		8170449	0					
ANR	8170582	ArgumentList	pkt -> data		8170449	1					
ANR	8170583	Argument	pkt -> data		8170449	0					
ANR	8170584	PtrMemberAccess	pkt -> data		8170449	0					
ANR	8170585	Identifier	pkt		8170449	0					
ANR	8170586	Identifier	data		8170449	1					
ANR	8170587	Argument	hsize		8170449	1					
ANR	8170588	Identifier	hsize		8170449	0					
ANR	8170589	CompoundStatement		37:48:609:609	8170449	1					
ANR	8170590	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""CRC error\\n"" )"	43:12:753:795	8170449	0	True				
ANR	8170591	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""CRC error\\n"" )"		8170449	0					
ANR	8170592	Callee	av_log		8170449	0					
ANR	8170593	Identifier	av_log		8170449	0					
ANR	8170594	ArgumentList	avctx		8170449	1					
ANR	8170595	Argument	avctx		8170449	0					
ANR	8170596	Identifier	avctx		8170449	0					
ANR	8170597	Argument	AV_LOG_ERROR		8170449	1					
ANR	8170598	Identifier	AV_LOG_ERROR		8170449	0					
ANR	8170599	Argument	"""CRC error\\n"""		8170449	2					
ANR	8170600	PrimaryExpression	"""CRC error\\n"""		8170449	0					
ANR	8170601	IfStatement	if ( avctx -> err_recognition & AV_EF_EXPLODE )		8170449	1					
ANR	8170602	Condition	avctx -> err_recognition & AV_EF_EXPLODE	45:16:814:851	8170449	0	True				
ANR	8170603	BitAndExpression	avctx -> err_recognition & AV_EF_EXPLODE		8170449	0		&			
ANR	8170604	PtrMemberAccess	avctx -> err_recognition		8170449	0					
ANR	8170605	Identifier	avctx		8170449	0					
ANR	8170606	Identifier	err_recognition		8170449	1					
ANR	8170607	Identifier	AV_EF_EXPLODE		8170449	1					
ANR	8170608	ReturnStatement	return AVERROR_INVALIDDATA ;	47:16:871:897	8170449	1	True				
ANR	8170609	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8170610	IfStatement	if ( s -> ti . codec != TAK_CODEC_MONO_STEREO && s -> ti . codec != TAK_CODEC_MULTICHANNEL )		8170449	13					
ANR	8170611	Condition	s -> ti . codec != TAK_CODEC_MONO_STEREO && s -> ti . codec != TAK_CODEC_MULTICHANNEL	55:8:928:1013	8170449	0	True				
ANR	8170612	AndExpression	s -> ti . codec != TAK_CODEC_MONO_STEREO && s -> ti . codec != TAK_CODEC_MULTICHANNEL		8170449	0		&&			
ANR	8170613	EqualityExpression	s -> ti . codec != TAK_CODEC_MONO_STEREO		8170449	0		!=			
ANR	8170614	MemberAccess	s -> ti . codec		8170449	0					
ANR	8170615	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170616	Identifier	s		8170449	0					
ANR	8170617	Identifier	ti		8170449	1					
ANR	8170618	Identifier	codec		8170449	1					
ANR	8170619	Identifier	TAK_CODEC_MONO_STEREO		8170449	1					
ANR	8170620	EqualityExpression	s -> ti . codec != TAK_CODEC_MULTICHANNEL		8170449	1		!=			
ANR	8170621	MemberAccess	s -> ti . codec		8170449	0					
ANR	8170622	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170623	Identifier	s		8170449	0					
ANR	8170624	Identifier	ti		8170449	1					
ANR	8170625	Identifier	codec		8170449	1					
ANR	8170626	Identifier	TAK_CODEC_MULTICHANNEL		8170449	1					
ANR	8170627	CompoundStatement		53:47:887:887	8170449	1					
ANR	8170628	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""unsupported codec: %d\\n"" , s -> ti . codec )"	59:8:1027:1094	8170449	0	True				
ANR	8170629	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""unsupported codec: %d\\n"" , s -> ti . codec )"		8170449	0					
ANR	8170630	Callee	av_log		8170449	0					
ANR	8170631	Identifier	av_log		8170449	0					
ANR	8170632	ArgumentList	avctx		8170449	1					
ANR	8170633	Argument	avctx		8170449	0					
ANR	8170634	Identifier	avctx		8170449	0					
ANR	8170635	Argument	AV_LOG_ERROR		8170449	1					
ANR	8170636	Identifier	AV_LOG_ERROR		8170449	0					
ANR	8170637	Argument	"""unsupported codec: %d\\n"""		8170449	2					
ANR	8170638	PrimaryExpression	"""unsupported codec: %d\\n"""		8170449	0					
ANR	8170639	Argument	s -> ti . codec		8170449	3					
ANR	8170640	MemberAccess	s -> ti . codec		8170449	0					
ANR	8170641	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170642	Identifier	s		8170449	0					
ANR	8170643	Identifier	ti		8170449	1					
ANR	8170644	Identifier	codec		8170449	1					
ANR	8170645	ReturnStatement	return AVERROR_PATCHWELCOME ;	61:8:1105:1132	8170449	1	True				
ANR	8170646	Identifier	AVERROR_PATCHWELCOME		8170449	0					
ANR	8170647	IfStatement	if ( s -> ti . data_type )		8170449	14					
ANR	8170648	Condition	s -> ti . data_type	65:8:1150:1164	8170449	0	True				
ANR	8170649	MemberAccess	s -> ti . data_type		8170449	0					
ANR	8170650	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170651	Identifier	s		8170449	0					
ANR	8170652	Identifier	ti		8170449	1					
ANR	8170653	Identifier	data_type		8170449	1					
ANR	8170654	CompoundStatement		61:25:1038:1038	8170449	1					
ANR	8170655	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""unsupported data type: %d\\n"" , s -> ti . data_type )"	67:8:1178:1269	8170449	0	True				
ANR	8170656	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""unsupported data type: %d\\n"" , s -> ti . data_type )"		8170449	0					
ANR	8170657	Callee	av_log		8170449	0					
ANR	8170658	Identifier	av_log		8170449	0					
ANR	8170659	ArgumentList	avctx		8170449	1					
ANR	8170660	Argument	avctx		8170449	0					
ANR	8170661	Identifier	avctx		8170449	0					
ANR	8170662	Argument	AV_LOG_ERROR		8170449	1					
ANR	8170663	Identifier	AV_LOG_ERROR		8170449	0					
ANR	8170664	Argument	"""unsupported data type: %d\\n"""		8170449	2					
ANR	8170665	PrimaryExpression	"""unsupported data type: %d\\n"""		8170449	0					
ANR	8170666	Argument	s -> ti . data_type		8170449	3					
ANR	8170667	MemberAccess	s -> ti . data_type		8170449	0					
ANR	8170668	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170669	Identifier	s		8170449	0					
ANR	8170670	Identifier	ti		8170449	1					
ANR	8170671	Identifier	data_type		8170449	1					
ANR	8170672	ReturnStatement	return AVERROR_INVALIDDATA ;	71:8:1280:1306	8170449	1	True				
ANR	8170673	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8170674	IfStatement	if ( s -> ti . codec == TAK_CODEC_MONO_STEREO && s -> ti . channels > 2 )		8170449	15					
ANR	8170675	Condition	s -> ti . codec == TAK_CODEC_MONO_STEREO && s -> ti . channels > 2	75:8:1324:1381	8170449	0	True				
ANR	8170676	AndExpression	s -> ti . codec == TAK_CODEC_MONO_STEREO && s -> ti . channels > 2		8170449	0		&&			
ANR	8170677	EqualityExpression	s -> ti . codec == TAK_CODEC_MONO_STEREO		8170449	0		==			
ANR	8170678	MemberAccess	s -> ti . codec		8170449	0					
ANR	8170679	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170680	Identifier	s		8170449	0					
ANR	8170681	Identifier	ti		8170449	1					
ANR	8170682	Identifier	codec		8170449	1					
ANR	8170683	Identifier	TAK_CODEC_MONO_STEREO		8170449	1					
ANR	8170684	RelationalExpression	s -> ti . channels > 2		8170449	1		>			
ANR	8170685	MemberAccess	s -> ti . channels		8170449	0					
ANR	8170686	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170687	Identifier	s		8170449	0					
ANR	8170688	Identifier	ti		8170449	1					
ANR	8170689	Identifier	channels		8170449	1					
ANR	8170690	PrimaryExpression	2		8170449	1					
ANR	8170691	CompoundStatement		71:68:1255:1255	8170449	1					
ANR	8170692	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""invalid number of channels: %d\\n"" , s -> ti . channels )"	77:8:1395:1490	8170449	0	True				
ANR	8170693	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""invalid number of channels: %d\\n"" , s -> ti . channels )"		8170449	0					
ANR	8170694	Callee	av_log		8170449	0					
ANR	8170695	Identifier	av_log		8170449	0					
ANR	8170696	ArgumentList	avctx		8170449	1					
ANR	8170697	Argument	avctx		8170449	0					
ANR	8170698	Identifier	avctx		8170449	0					
ANR	8170699	Argument	AV_LOG_ERROR		8170449	1					
ANR	8170700	Identifier	AV_LOG_ERROR		8170449	0					
ANR	8170701	Argument	"""invalid number of channels: %d\\n"""		8170449	2					
ANR	8170702	PrimaryExpression	"""invalid number of channels: %d\\n"""		8170449	0					
ANR	8170703	Argument	s -> ti . channels		8170449	3					
ANR	8170704	MemberAccess	s -> ti . channels		8170449	0					
ANR	8170705	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170706	Identifier	s		8170449	0					
ANR	8170707	Identifier	ti		8170449	1					
ANR	8170708	Identifier	channels		8170449	1					
ANR	8170709	ReturnStatement	return AVERROR_INVALIDDATA ;	81:8:1501:1527	8170449	1	True				
ANR	8170710	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8170711	IfStatement	if ( s -> ti . channels > 6 )		8170449	16					
ANR	8170712	Condition	s -> ti . channels > 6	85:8:1545:1562	8170449	0	True				
ANR	8170713	RelationalExpression	s -> ti . channels > 6		8170449	0		>			
ANR	8170714	MemberAccess	s -> ti . channels		8170449	0					
ANR	8170715	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170716	Identifier	s		8170449	0					
ANR	8170717	Identifier	ti		8170449	1					
ANR	8170718	Identifier	channels		8170449	1					
ANR	8170719	PrimaryExpression	6		8170449	1					
ANR	8170720	CompoundStatement		81:28:1436:1436	8170449	1					
ANR	8170721	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""unsupported number of channels: %d\\n"" , s -> ti . channels )"	87:8:1576:1675	8170449	0	True				
ANR	8170722	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""unsupported number of channels: %d\\n"" , s -> ti . channels )"		8170449	0					
ANR	8170723	Callee	av_log		8170449	0					
ANR	8170724	Identifier	av_log		8170449	0					
ANR	8170725	ArgumentList	avctx		8170449	1					
ANR	8170726	Argument	avctx		8170449	0					
ANR	8170727	Identifier	avctx		8170449	0					
ANR	8170728	Argument	AV_LOG_ERROR		8170449	1					
ANR	8170729	Identifier	AV_LOG_ERROR		8170449	0					
ANR	8170730	Argument	"""unsupported number of channels: %d\\n"""		8170449	2					
ANR	8170731	PrimaryExpression	"""unsupported number of channels: %d\\n"""		8170449	0					
ANR	8170732	Argument	s -> ti . channels		8170449	3					
ANR	8170733	MemberAccess	s -> ti . channels		8170449	0					
ANR	8170734	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170735	Identifier	s		8170449	0					
ANR	8170736	Identifier	ti		8170449	1					
ANR	8170737	Identifier	channels		8170449	1					
ANR	8170738	ReturnStatement	return AVERROR_INVALIDDATA ;	91:8:1686:1712	8170449	1	True				
ANR	8170739	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8170740	IfStatement	if ( s -> ti . frame_samples <= 0 )		8170449	17					
ANR	8170741	Condition	s -> ti . frame_samples <= 0	97:8:1732:1755	8170449	0	True				
ANR	8170742	RelationalExpression	s -> ti . frame_samples <= 0		8170449	0		<=			
ANR	8170743	MemberAccess	s -> ti . frame_samples		8170449	0					
ANR	8170744	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170745	Identifier	s		8170449	0					
ANR	8170746	Identifier	ti		8170449	1					
ANR	8170747	Identifier	frame_samples		8170449	1					
ANR	8170748	PrimaryExpression	0		8170449	1					
ANR	8170749	CompoundStatement		93:34:1629:1629	8170449	1					
ANR	8170750	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""unsupported/invalid number of samples\\n"" )"	99:8:1769:1839	8170449	0	True				
ANR	8170751	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""unsupported/invalid number of samples\\n"" )"		8170449	0					
ANR	8170752	Callee	av_log		8170449	0					
ANR	8170753	Identifier	av_log		8170449	0					
ANR	8170754	ArgumentList	avctx		8170449	1					
ANR	8170755	Argument	avctx		8170449	0					
ANR	8170756	Identifier	avctx		8170449	0					
ANR	8170757	Argument	AV_LOG_ERROR		8170449	1					
ANR	8170758	Identifier	AV_LOG_ERROR		8170449	0					
ANR	8170759	Argument	"""unsupported/invalid number of samples\\n"""		8170449	2					
ANR	8170760	PrimaryExpression	"""unsupported/invalid number of samples\\n"""		8170449	0					
ANR	8170761	ReturnStatement	return AVERROR_INVALIDDATA ;	101:8:1850:1876	8170449	1	True				
ANR	8170762	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8170763	IfStatement	if ( s -> ti . bps != avctx -> bits_per_raw_sample )		8170449	18					
ANR	8170764	Condition	s -> ti . bps != avctx -> bits_per_raw_sample	107:8:1896:1934	8170449	0	True				
ANR	8170765	EqualityExpression	s -> ti . bps != avctx -> bits_per_raw_sample		8170449	0		!=			
ANR	8170766	MemberAccess	s -> ti . bps		8170449	0					
ANR	8170767	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170768	Identifier	s		8170449	0					
ANR	8170769	Identifier	ti		8170449	1					
ANR	8170770	Identifier	bps		8170449	1					
ANR	8170771	PtrMemberAccess	avctx -> bits_per_raw_sample		8170449	1					
ANR	8170772	Identifier	avctx		8170449	0					
ANR	8170773	Identifier	bits_per_raw_sample		8170449	1					
ANR	8170774	CompoundStatement		103:49:1808:1808	8170449	1					
ANR	8170775	ExpressionStatement	avctx -> bits_per_raw_sample = s -> ti . bps	109:8:1948:1986	8170449	0	True				
ANR	8170776	AssignmentExpression	avctx -> bits_per_raw_sample = s -> ti . bps		8170449	0		=			
ANR	8170777	PtrMemberAccess	avctx -> bits_per_raw_sample		8170449	0					
ANR	8170778	Identifier	avctx		8170449	0					
ANR	8170779	Identifier	bits_per_raw_sample		8170449	1					
ANR	8170780	MemberAccess	s -> ti . bps		8170449	1					
ANR	8170781	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170782	Identifier	s		8170449	0					
ANR	8170783	Identifier	ti		8170449	1					
ANR	8170784	Identifier	bps		8170449	1					
ANR	8170785	IfStatement	if ( ( ret = set_bps_params ( avctx ) ) < 0 )		8170449	1					
ANR	8170786	Condition	( ret = set_bps_params ( avctx ) ) < 0	111:12:2001:2033	8170449	0	True				
ANR	8170787	RelationalExpression	( ret = set_bps_params ( avctx ) ) < 0		8170449	0		<			
ANR	8170788	AssignmentExpression	ret = set_bps_params ( avctx )		8170449	0		=			
ANR	8170789	Identifier	ret		8170449	0					
ANR	8170790	CallExpression	set_bps_params ( avctx )		8170449	1					
ANR	8170791	Callee	set_bps_params		8170449	0					
ANR	8170792	Identifier	set_bps_params		8170449	0					
ANR	8170793	ArgumentList	avctx		8170449	1					
ANR	8170794	Argument	avctx		8170449	0					
ANR	8170795	Identifier	avctx		8170449	0					
ANR	8170796	PrimaryExpression	0		8170449	1					
ANR	8170797	ReturnStatement	return ret ;	113:12:2049:2059	8170449	1	True				
ANR	8170798	Identifier	ret		8170449	0					
ANR	8170799	IfStatement	if ( s -> ti . sample_rate != avctx -> sample_rate )		8170449	19					
ANR	8170800	Condition	s -> ti . sample_rate != avctx -> sample_rate	117:8:2077:2115	8170449	0	True				
ANR	8170801	EqualityExpression	s -> ti . sample_rate != avctx -> sample_rate		8170449	0		!=			
ANR	8170802	MemberAccess	s -> ti . sample_rate		8170449	0					
ANR	8170803	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170804	Identifier	s		8170449	0					
ANR	8170805	Identifier	ti		8170449	1					
ANR	8170806	Identifier	sample_rate		8170449	1					
ANR	8170807	PtrMemberAccess	avctx -> sample_rate		8170449	1					
ANR	8170808	Identifier	avctx		8170449	0					
ANR	8170809	Identifier	sample_rate		8170449	1					
ANR	8170810	CompoundStatement		113:49:1989:1989	8170449	1					
ANR	8170811	ExpressionStatement	avctx -> sample_rate = s -> ti . sample_rate	119:8:2129:2167	8170449	0	True				
ANR	8170812	AssignmentExpression	avctx -> sample_rate = s -> ti . sample_rate		8170449	0		=			
ANR	8170813	PtrMemberAccess	avctx -> sample_rate		8170449	0					
ANR	8170814	Identifier	avctx		8170449	0					
ANR	8170815	Identifier	sample_rate		8170449	1					
ANR	8170816	MemberAccess	s -> ti . sample_rate		8170449	1					
ANR	8170817	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170818	Identifier	s		8170449	0					
ANR	8170819	Identifier	ti		8170449	1					
ANR	8170820	Identifier	sample_rate		8170449	1					
ANR	8170821	ExpressionStatement	set_sample_rate_params ( avctx )	121:8:2178:2207	8170449	1	True				
ANR	8170822	CallExpression	set_sample_rate_params ( avctx )		8170449	0					
ANR	8170823	Callee	set_sample_rate_params		8170449	0					
ANR	8170824	Identifier	set_sample_rate_params		8170449	0					
ANR	8170825	ArgumentList	avctx		8170449	1					
ANR	8170826	Argument	avctx		8170449	0					
ANR	8170827	Identifier	avctx		8170449	0					
ANR	8170828	IfStatement	if ( s -> ti . ch_layout )		8170449	20					
ANR	8170829	Condition	s -> ti . ch_layout	125:8:2225:2239	8170449	0	True				
ANR	8170830	MemberAccess	s -> ti . ch_layout		8170449	0					
ANR	8170831	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170832	Identifier	s		8170449	0					
ANR	8170833	Identifier	ti		8170449	1					
ANR	8170834	Identifier	ch_layout		8170449	1					
ANR	8170835	ExpressionStatement	avctx -> channel_layout = s -> ti . ch_layout	127:8:2251:2290	8170449	1	True				
ANR	8170836	AssignmentExpression	avctx -> channel_layout = s -> ti . ch_layout		8170449	0		=			
ANR	8170837	PtrMemberAccess	avctx -> channel_layout		8170449	0					
ANR	8170838	Identifier	avctx		8170449	0					
ANR	8170839	Identifier	channel_layout		8170449	1					
ANR	8170840	MemberAccess	s -> ti . ch_layout		8170449	1					
ANR	8170841	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170842	Identifier	s		8170449	0					
ANR	8170843	Identifier	ti		8170449	1					
ANR	8170844	Identifier	ch_layout		8170449	1					
ANR	8170845	ExpressionStatement	avctx -> channels = s -> ti . channels	129:4:2297:2329	8170449	21	True				
ANR	8170846	AssignmentExpression	avctx -> channels = s -> ti . channels		8170449	0		=			
ANR	8170847	PtrMemberAccess	avctx -> channels		8170449	0					
ANR	8170848	Identifier	avctx		8170449	0					
ANR	8170849	Identifier	channels		8170449	1					
ANR	8170850	MemberAccess	s -> ti . channels		8170449	1					
ANR	8170851	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170852	Identifier	s		8170449	0					
ANR	8170853	Identifier	ti		8170449	1					
ANR	8170854	Identifier	channels		8170449	1					
ANR	8170855	ExpressionStatement	s -> nb_samples = s -> ti . last_frame_samples ? s -> ti . last_frame_samples : s -> ti . frame_samples	133:4:2338:2473	8170449	22	True				
ANR	8170856	AssignmentExpression	s -> nb_samples = s -> ti . last_frame_samples ? s -> ti . last_frame_samples : s -> ti . frame_samples		8170449	0		=			
ANR	8170857	PtrMemberAccess	s -> nb_samples		8170449	0					
ANR	8170858	Identifier	s		8170449	0					
ANR	8170859	Identifier	nb_samples		8170449	1					
ANR	8170860	ConditionalExpression	s -> ti . last_frame_samples ? s -> ti . last_frame_samples : s -> ti . frame_samples		8170449	1					
ANR	8170861	Condition	s -> ti . last_frame_samples		8170449	0					
ANR	8170862	MemberAccess	s -> ti . last_frame_samples		8170449	0					
ANR	8170863	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170864	Identifier	s		8170449	0					
ANR	8170865	Identifier	ti		8170449	1					
ANR	8170866	Identifier	last_frame_samples		8170449	1					
ANR	8170867	MemberAccess	s -> ti . last_frame_samples		8170449	1					
ANR	8170868	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170869	Identifier	s		8170449	0					
ANR	8170870	Identifier	ti		8170449	1					
ANR	8170871	Identifier	last_frame_samples		8170449	1					
ANR	8170872	MemberAccess	s -> ti . frame_samples		8170449	2					
ANR	8170873	PtrMemberAccess	s -> ti		8170449	0					
ANR	8170874	Identifier	s		8170449	0					
ANR	8170875	Identifier	ti		8170449	1					
ANR	8170876	Identifier	frame_samples		8170449	1					
ANR	8170877	ExpressionStatement	frame -> nb_samples = s -> nb_samples	139:4:2482:2515	8170449	23	True				
ANR	8170878	AssignmentExpression	frame -> nb_samples = s -> nb_samples		8170449	0		=			
ANR	8170879	PtrMemberAccess	frame -> nb_samples		8170449	0					
ANR	8170880	Identifier	frame		8170449	0					
ANR	8170881	Identifier	nb_samples		8170449	1					
ANR	8170882	PtrMemberAccess	s -> nb_samples		8170449	1					
ANR	8170883	Identifier	s		8170449	0					
ANR	8170884	Identifier	nb_samples		8170449	1					
ANR	8170885	IfStatement	"if ( ( ret = ff_thread_get_buffer ( avctx , & tframe , 0 ) ) < 0 )"		8170449	24					
ANR	8170886	Condition	"( ret = ff_thread_get_buffer ( avctx , & tframe , 0 ) ) < 0"	141:8:2526:2576	8170449	0	True				
ANR	8170887	RelationalExpression	"( ret = ff_thread_get_buffer ( avctx , & tframe , 0 ) ) < 0"		8170449	0		<			
ANR	8170888	AssignmentExpression	"ret = ff_thread_get_buffer ( avctx , & tframe , 0 )"		8170449	0		=			
ANR	8170889	Identifier	ret		8170449	0					
ANR	8170890	CallExpression	"ff_thread_get_buffer ( avctx , & tframe , 0 )"		8170449	1					
ANR	8170891	Callee	ff_thread_get_buffer		8170449	0					
ANR	8170892	Identifier	ff_thread_get_buffer		8170449	0					
ANR	8170893	ArgumentList	avctx		8170449	1					
ANR	8170894	Argument	avctx		8170449	0					
ANR	8170895	Identifier	avctx		8170449	0					
ANR	8170896	Argument	& tframe		8170449	1					
ANR	8170897	UnaryOperationExpression	& tframe		8170449	0					
ANR	8170898	UnaryOperator	&		8170449	0					
ANR	8170899	Identifier	tframe		8170449	1					
ANR	8170900	Argument	0		8170449	2					
ANR	8170901	PrimaryExpression	0		8170449	0					
ANR	8170902	PrimaryExpression	0		8170449	1					
ANR	8170903	ReturnStatement	return ret ;	143:8:2588:2598	8170449	1	True				
ANR	8170904	Identifier	ret		8170449	0					
ANR	8170905	ExpressionStatement	ff_thread_finish_setup ( avctx )	145:4:2605:2634	8170449	25	True				
ANR	8170906	CallExpression	ff_thread_finish_setup ( avctx )		8170449	0					
ANR	8170907	Callee	ff_thread_finish_setup		8170449	0					
ANR	8170908	Identifier	ff_thread_finish_setup		8170449	0					
ANR	8170909	ArgumentList	avctx		8170449	1					
ANR	8170910	Argument	avctx		8170449	0					
ANR	8170911	Identifier	avctx		8170449	0					
ANR	8170912	IfStatement	if ( avctx -> bits_per_raw_sample <= 16 )		8170449	26					
ANR	8170913	Condition	avctx -> bits_per_raw_sample <= 16	149:8:2647:2678	8170449	0	True				
ANR	8170914	RelationalExpression	avctx -> bits_per_raw_sample <= 16		8170449	0		<=			
ANR	8170915	PtrMemberAccess	avctx -> bits_per_raw_sample		8170449	0					
ANR	8170916	Identifier	avctx		8170449	0					
ANR	8170917	Identifier	bits_per_raw_sample		8170449	1					
ANR	8170918	PrimaryExpression	16		8170449	1					
ANR	8170919	CompoundStatement		147:8:2563:2767	8170449	1					
ANR	8170920	IdentifierDeclStatement	"int buf_size = av_samples_get_buffer_size ( NULL , avctx -> channels , s -> nb_samples , AV_SAMPLE_FMT_S32P , 0 ) ;"	151:8:2692:2896	8170449	0	True				
ANR	8170921	IdentifierDecl	"buf_size = av_samples_get_buffer_size ( NULL , avctx -> channels , s -> nb_samples , AV_SAMPLE_FMT_S32P , 0 )"		8170449	0					
ANR	8170922	IdentifierDeclType	int		8170449	0					
ANR	8170923	Identifier	buf_size		8170449	1					
ANR	8170924	AssignmentExpression	"buf_size = av_samples_get_buffer_size ( NULL , avctx -> channels , s -> nb_samples , AV_SAMPLE_FMT_S32P , 0 )"		8170449	2		=			
ANR	8170925	Identifier	buf_size		8170449	0					
ANR	8170926	CallExpression	"av_samples_get_buffer_size ( NULL , avctx -> channels , s -> nb_samples , AV_SAMPLE_FMT_S32P , 0 )"		8170449	1					
ANR	8170927	Callee	av_samples_get_buffer_size		8170449	0					
ANR	8170928	Identifier	av_samples_get_buffer_size		8170449	0					
ANR	8170929	ArgumentList	NULL		8170449	1					
ANR	8170930	Argument	NULL		8170449	0					
ANR	8170931	Identifier	NULL		8170449	0					
ANR	8170932	Argument	avctx -> channels		8170449	1					
ANR	8170933	PtrMemberAccess	avctx -> channels		8170449	0					
ANR	8170934	Identifier	avctx		8170449	0					
ANR	8170935	Identifier	channels		8170449	1					
ANR	8170936	Argument	s -> nb_samples		8170449	2					
ANR	8170937	PtrMemberAccess	s -> nb_samples		8170449	0					
ANR	8170938	Identifier	s		8170449	0					
ANR	8170939	Identifier	nb_samples		8170449	1					
ANR	8170940	Argument	AV_SAMPLE_FMT_S32P		8170449	3					
ANR	8170941	Identifier	AV_SAMPLE_FMT_S32P		8170449	0					
ANR	8170942	Argument	0		8170449	4					
ANR	8170943	PrimaryExpression	0		8170449	0					
ANR	8170944	ExpressionStatement	"av_fast_malloc ( & s -> decode_buffer , & s -> decode_buffer_size , buf_size )"	157:8:2907:2974	8170449	1	True				
ANR	8170945	CallExpression	"av_fast_malloc ( & s -> decode_buffer , & s -> decode_buffer_size , buf_size )"		8170449	0					
ANR	8170946	Callee	av_fast_malloc		8170449	0					
ANR	8170947	Identifier	av_fast_malloc		8170449	0					
ANR	8170948	ArgumentList	& s -> decode_buffer		8170449	1					
ANR	8170949	Argument	& s -> decode_buffer		8170449	0					
ANR	8170950	UnaryOperationExpression	& s -> decode_buffer		8170449	0					
ANR	8170951	UnaryOperator	&		8170449	0					
ANR	8170952	PtrMemberAccess	s -> decode_buffer		8170449	1					
ANR	8170953	Identifier	s		8170449	0					
ANR	8170954	Identifier	decode_buffer		8170449	1					
ANR	8170955	Argument	& s -> decode_buffer_size		8170449	1					
ANR	8170956	UnaryOperationExpression	& s -> decode_buffer_size		8170449	0					
ANR	8170957	UnaryOperator	&		8170449	0					
ANR	8170958	PtrMemberAccess	s -> decode_buffer_size		8170449	1					
ANR	8170959	Identifier	s		8170449	0					
ANR	8170960	Identifier	decode_buffer_size		8170449	1					
ANR	8170961	Argument	buf_size		8170449	2					
ANR	8170962	Identifier	buf_size		8170449	0					
ANR	8170963	IfStatement	if ( ! s -> decode_buffer )		8170449	2					
ANR	8170964	Condition	! s -> decode_buffer	159:12:2989:3005	8170449	0	True				
ANR	8170965	UnaryOperationExpression	! s -> decode_buffer		8170449	0					
ANR	8170966	UnaryOperator	!		8170449	0					
ANR	8170967	PtrMemberAccess	s -> decode_buffer		8170449	1					
ANR	8170968	Identifier	s		8170449	0					
ANR	8170969	Identifier	decode_buffer		8170449	1					
ANR	8170970	ReturnStatement	return AVERROR ( ENOMEM ) ;	161:12:3021:3043	8170449	1	True				
ANR	8170971	CallExpression	AVERROR ( ENOMEM )		8170449	0					
ANR	8170972	Callee	AVERROR		8170449	0					
ANR	8170973	Identifier	AVERROR		8170449	0					
ANR	8170974	ArgumentList	ENOMEM		8170449	1					
ANR	8170975	Argument	ENOMEM		8170449	0					
ANR	8170976	Identifier	ENOMEM		8170449	0					
ANR	8170977	ExpressionStatement	"ret = av_samples_fill_arrays ( ( uint8_t * * ) s -> decoded , NULL , s -> decode_buffer , avctx -> channels , s -> nb_samples , AV_SAMPLE_FMT_S32P , 0 )"	163:8:3054:3261	8170449	3	True				
ANR	8170978	AssignmentExpression	"ret = av_samples_fill_arrays ( ( uint8_t * * ) s -> decoded , NULL , s -> decode_buffer , avctx -> channels , s -> nb_samples , AV_SAMPLE_FMT_S32P , 0 )"		8170449	0		=			
ANR	8170979	Identifier	ret		8170449	0					
ANR	8170980	CallExpression	"av_samples_fill_arrays ( ( uint8_t * * ) s -> decoded , NULL , s -> decode_buffer , avctx -> channels , s -> nb_samples , AV_SAMPLE_FMT_S32P , 0 )"		8170449	1					
ANR	8170981	Callee	av_samples_fill_arrays		8170449	0					
ANR	8170982	Identifier	av_samples_fill_arrays		8170449	0					
ANR	8170983	ArgumentList	( uint8_t * * ) s -> decoded		8170449	1					
ANR	8170984	Argument	( uint8_t * * ) s -> decoded		8170449	0					
ANR	8170985	CastExpression	( uint8_t * * ) s -> decoded		8170449	0					
ANR	8170986	CastTarget	uint8_t * *		8170449	0					
ANR	8170987	PtrMemberAccess	s -> decoded		8170449	1					
ANR	8170988	Identifier	s		8170449	0					
ANR	8170989	Identifier	decoded		8170449	1					
ANR	8170990	Argument	NULL		8170449	1					
ANR	8170991	Identifier	NULL		8170449	0					
ANR	8170992	Argument	s -> decode_buffer		8170449	2					
ANR	8170993	PtrMemberAccess	s -> decode_buffer		8170449	0					
ANR	8170994	Identifier	s		8170449	0					
ANR	8170995	Identifier	decode_buffer		8170449	1					
ANR	8170996	Argument	avctx -> channels		8170449	3					
ANR	8170997	PtrMemberAccess	avctx -> channels		8170449	0					
ANR	8170998	Identifier	avctx		8170449	0					
ANR	8170999	Identifier	channels		8170449	1					
ANR	8171000	Argument	s -> nb_samples		8170449	4					
ANR	8171001	PtrMemberAccess	s -> nb_samples		8170449	0					
ANR	8171002	Identifier	s		8170449	0					
ANR	8171003	Identifier	nb_samples		8170449	1					
ANR	8171004	Argument	AV_SAMPLE_FMT_S32P		8170449	5					
ANR	8171005	Identifier	AV_SAMPLE_FMT_S32P		8170449	0					
ANR	8171006	Argument	0		8170449	6					
ANR	8171007	PrimaryExpression	0		8170449	0					
ANR	8171008	IfStatement	if ( ret < 0 )		8170449	4					
ANR	8171009	Condition	ret < 0	169:12:3276:3282	8170449	0	True				
ANR	8171010	RelationalExpression	ret < 0		8170449	0		<			
ANR	8171011	Identifier	ret		8170449	0					
ANR	8171012	PrimaryExpression	0		8170449	1					
ANR	8171013	ReturnStatement	return ret ;	171:12:3298:3308	8170449	1	True				
ANR	8171014	Identifier	ret		8170449	0					
ANR	8171015	ElseStatement	else		8170449	0					
ANR	8171016	CompoundStatement		169:11:3193:3193	8170449	0					
ANR	8171017	ForStatement	for ( chan = 0 ; chan < avctx -> channels ; chan ++ )		8170449	0					
ANR	8171018	ForInit	chan = 0 ;	175:13:3338:3346	8170449	0	True				
ANR	8171019	AssignmentExpression	chan = 0		8170449	0		=			
ANR	8171020	Identifier	chan		8170449	0					
ANR	8171021	PrimaryExpression	0		8170449	1					
ANR	8171022	Condition	chan < avctx -> channels	175:23:3348:3369	8170449	1	True				
ANR	8171023	RelationalExpression	chan < avctx -> channels		8170449	0		<			
ANR	8171024	Identifier	chan		8170449	0					
ANR	8171025	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171026	Identifier	avctx		8170449	0					
ANR	8171027	Identifier	channels		8170449	1					
ANR	8171028	PostIncDecOperationExpression	chan ++	175:47:3372:3377	8170449	2	True				
ANR	8171029	Identifier	chan		8170449	0					
ANR	8171030	IncDec	++		8170449	1					
ANR	8171031	ExpressionStatement	s -> decoded [ chan ] = ( int32_t * ) frame -> extended_data [ chan ]	177:12:3393:3449	8170449	3	True				
ANR	8171032	AssignmentExpression	s -> decoded [ chan ] = ( int32_t * ) frame -> extended_data [ chan ]		8170449	0		=			
ANR	8171033	ArrayIndexing	s -> decoded [ chan ]		8170449	0					
ANR	8171034	PtrMemberAccess	s -> decoded		8170449	0					
ANR	8171035	Identifier	s		8170449	0					
ANR	8171036	Identifier	decoded		8170449	1					
ANR	8171037	Identifier	chan		8170449	1					
ANR	8171038	CastExpression	( int32_t * ) frame -> extended_data [ chan ]		8170449	1					
ANR	8171039	CastTarget	int32_t *		8170449	0					
ANR	8171040	ArrayIndexing	frame -> extended_data [ chan ]		8170449	1					
ANR	8171041	PtrMemberAccess	frame -> extended_data		8170449	0					
ANR	8171042	Identifier	frame		8170449	0					
ANR	8171043	Identifier	extended_data		8170449	1					
ANR	8171044	Identifier	chan		8170449	1					
ANR	8171045	IfStatement	if ( s -> nb_samples < 16 )		8170449	27					
ANR	8171046	Condition	s -> nb_samples < 16	183:8:3469:3486	8170449	0	True				
ANR	8171047	RelationalExpression	s -> nb_samples < 16		8170449	0		<			
ANR	8171048	PtrMemberAccess	s -> nb_samples		8170449	0					
ANR	8171049	Identifier	s		8170449	0					
ANR	8171050	Identifier	nb_samples		8170449	1					
ANR	8171051	PrimaryExpression	16		8170449	1					
ANR	8171052	CompoundStatement		179:28:3360:3360	8170449	1					
ANR	8171053	ForStatement	for ( chan = 0 ; chan < avctx -> channels ; chan ++ )		8170449	0					
ANR	8171054	ForInit	chan = 0 ;	185:13:3505:3513	8170449	0	True				
ANR	8171055	AssignmentExpression	chan = 0		8170449	0		=			
ANR	8171056	Identifier	chan		8170449	0					
ANR	8171057	PrimaryExpression	0		8170449	1					
ANR	8171058	Condition	chan < avctx -> channels	185:23:3515:3536	8170449	1	True				
ANR	8171059	RelationalExpression	chan < avctx -> channels		8170449	0		<			
ANR	8171060	Identifier	chan		8170449	0					
ANR	8171061	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171062	Identifier	avctx		8170449	0					
ANR	8171063	Identifier	channels		8170449	1					
ANR	8171064	PostIncDecOperationExpression	chan ++	185:47:3539:3544	8170449	2	True				
ANR	8171065	Identifier	chan		8170449	0					
ANR	8171066	IncDec	++		8170449	1					
ANR	8171067	CompoundStatement		183:12:3433:3468	8170449	3					
ANR	8171068	IdentifierDeclStatement	int32_t * decoded = s -> decoded [ chan ] ;	187:12:3562:3597	8170449	0	True				
ANR	8171069	IdentifierDecl	* decoded = s -> decoded [ chan ]		8170449	0					
ANR	8171070	IdentifierDeclType	int32_t *		8170449	0					
ANR	8171071	Identifier	decoded		8170449	1					
ANR	8171072	AssignmentExpression	* decoded = s -> decoded [ chan ]		8170449	2		=			
ANR	8171073	Identifier	decoded		8170449	0					
ANR	8171074	ArrayIndexing	s -> decoded [ chan ]		8170449	1					
ANR	8171075	PtrMemberAccess	s -> decoded		8170449	0					
ANR	8171076	Identifier	s		8170449	0					
ANR	8171077	Identifier	decoded		8170449	1					
ANR	8171078	Identifier	chan		8170449	1					
ANR	8171079	ForStatement	for ( i = 0 ; i < s -> nb_samples ; i ++ )		8170449	1					
ANR	8171080	ForInit	i = 0 ;	189:17:3617:3622	8170449	0	True				
ANR	8171081	AssignmentExpression	i = 0		8170449	0		=			
ANR	8171082	Identifier	i		8170449	0					
ANR	8171083	PrimaryExpression	0		8170449	1					
ANR	8171084	Condition	i < s -> nb_samples	189:24:3624:3640	8170449	1	True				
ANR	8171085	RelationalExpression	i < s -> nb_samples		8170449	0		<			
ANR	8171086	Identifier	i		8170449	0					
ANR	8171087	PtrMemberAccess	s -> nb_samples		8170449	1					
ANR	8171088	Identifier	s		8170449	0					
ANR	8171089	Identifier	nb_samples		8170449	1					
ANR	8171090	PostIncDecOperationExpression	i ++	189:43:3643:3645	8170449	2	True				
ANR	8171091	Identifier	i		8170449	0					
ANR	8171092	IncDec	++		8170449	1					
ANR	8171093	ExpressionStatement	"decoded [ i ] = get_sbits ( gb , avctx -> bits_per_raw_sample )"	191:16:3665:3719	8170449	3	True				
ANR	8171094	AssignmentExpression	"decoded [ i ] = get_sbits ( gb , avctx -> bits_per_raw_sample )"		8170449	0		=			
ANR	8171095	ArrayIndexing	decoded [ i ]		8170449	0					
ANR	8171096	Identifier	decoded		8170449	0					
ANR	8171097	Identifier	i		8170449	1					
ANR	8171098	CallExpression	"get_sbits ( gb , avctx -> bits_per_raw_sample )"		8170449	1					
ANR	8171099	Callee	get_sbits		8170449	0					
ANR	8171100	Identifier	get_sbits		8170449	0					
ANR	8171101	ArgumentList	gb		8170449	1					
ANR	8171102	Argument	gb		8170449	0					
ANR	8171103	Identifier	gb		8170449	0					
ANR	8171104	Argument	avctx -> bits_per_raw_sample		8170449	1					
ANR	8171105	PtrMemberAccess	avctx -> bits_per_raw_sample		8170449	0					
ANR	8171106	Identifier	avctx		8170449	0					
ANR	8171107	Identifier	bits_per_raw_sample		8170449	1					
ANR	8171108	ElseStatement	else		8170449	0					
ANR	8171109	CompoundStatement		191:11:3615:3615	8170449	0					
ANR	8171110	IfStatement	if ( s -> ti . codec == TAK_CODEC_MONO_STEREO )		8170449	0					
ANR	8171111	Condition	s -> ti . codec == TAK_CODEC_MONO_STEREO	197:12:3759:3794	8170449	0	True				
ANR	8171112	EqualityExpression	s -> ti . codec == TAK_CODEC_MONO_STEREO		8170449	0		==			
ANR	8171113	MemberAccess	s -> ti . codec		8170449	0					
ANR	8171114	PtrMemberAccess	s -> ti		8170449	0					
ANR	8171115	Identifier	s		8170449	0					
ANR	8171116	Identifier	ti		8170449	1					
ANR	8171117	Identifier	codec		8170449	1					
ANR	8171118	Identifier	TAK_CODEC_MONO_STEREO		8170449	1					
ANR	8171119	CompoundStatement		193:50:3668:3668	8170449	1					
ANR	8171120	ForStatement	for ( chan = 0 ; chan < avctx -> channels ; chan ++ )		8170449	0					
ANR	8171121	ForInit	chan = 0 ;	199:17:3817:3825	8170449	0	True				
ANR	8171122	AssignmentExpression	chan = 0		8170449	0		=			
ANR	8171123	Identifier	chan		8170449	0					
ANR	8171124	PrimaryExpression	0		8170449	1					
ANR	8171125	Condition	chan < avctx -> channels	199:27:3827:3848	8170449	1	True				
ANR	8171126	RelationalExpression	chan < avctx -> channels		8170449	0		<			
ANR	8171127	Identifier	chan		8170449	0					
ANR	8171128	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171129	Identifier	avctx		8170449	0					
ANR	8171130	Identifier	channels		8170449	1					
ANR	8171131	PostIncDecOperationExpression	chan ++	199:51:3851:3856	8170449	2	True				
ANR	8171132	Identifier	chan		8170449	0					
ANR	8171133	IncDec	++		8170449	1					
ANR	8171134	IfStatement	"if ( ret = decode_channel ( s , chan ) )"		8170449	3					
ANR	8171135	Condition	"ret = decode_channel ( s , chan )"	201:20:3880:3908	8170449	0	True				
ANR	8171136	AssignmentExpression	"ret = decode_channel ( s , chan )"		8170449	0		=			
ANR	8171137	Identifier	ret		8170449	0					
ANR	8171138	CallExpression	"decode_channel ( s , chan )"		8170449	1					
ANR	8171139	Callee	decode_channel		8170449	0					
ANR	8171140	Identifier	decode_channel		8170449	0					
ANR	8171141	ArgumentList	s		8170449	1					
ANR	8171142	Argument	s		8170449	0					
ANR	8171143	Identifier	s		8170449	0					
ANR	8171144	Argument	chan		8170449	1					
ANR	8171145	Identifier	chan		8170449	0					
ANR	8171146	ReturnStatement	return ret ;	203:20:3932:3942	8170449	1	True				
ANR	8171147	Identifier	ret		8170449	0					
ANR	8171148	IfStatement	if ( avctx -> channels == 2 )		8170449	1					
ANR	8171149	Condition	avctx -> channels == 2	207:16:3963:3982	8170449	0	True				
ANR	8171150	EqualityExpression	avctx -> channels == 2		8170449	0		==			
ANR	8171151	PtrMemberAccess	avctx -> channels		8170449	0					
ANR	8171152	Identifier	avctx		8170449	0					
ANR	8171153	Identifier	channels		8170449	1					
ANR	8171154	PrimaryExpression	2		8170449	1					
ANR	8171155	CompoundStatement		203:38:3856:3856	8170449	1					
ANR	8171156	ExpressionStatement	"s -> nb_subframes = get_bits ( gb , 1 ) + 1"	209:16:4004:4041	8170449	0	True				
ANR	8171157	AssignmentExpression	"s -> nb_subframes = get_bits ( gb , 1 ) + 1"		8170449	0		=			
ANR	8171158	PtrMemberAccess	s -> nb_subframes		8170449	0					
ANR	8171159	Identifier	s		8170449	0					
ANR	8171160	Identifier	nb_subframes		8170449	1					
ANR	8171161	AdditiveExpression	"get_bits ( gb , 1 ) + 1"		8170449	1		+			
ANR	8171162	CallExpression	"get_bits ( gb , 1 )"		8170449	0					
ANR	8171163	Callee	get_bits		8170449	0					
ANR	8171164	Identifier	get_bits		8170449	0					
ANR	8171165	ArgumentList	gb		8170449	1					
ANR	8171166	Argument	gb		8170449	0					
ANR	8171167	Identifier	gb		8170449	0					
ANR	8171168	Argument	1		8170449	1					
ANR	8171169	PrimaryExpression	1		8170449	0					
ANR	8171170	PrimaryExpression	1		8170449	1					
ANR	8171171	IfStatement	if ( s -> nb_subframes > 1 )		8170449	1					
ANR	8171172	Condition	s -> nb_subframes > 1	211:20:4064:4082	8170449	0	True				
ANR	8171173	RelationalExpression	s -> nb_subframes > 1		8170449	0		>			
ANR	8171174	PtrMemberAccess	s -> nb_subframes		8170449	0					
ANR	8171175	Identifier	s		8170449	0					
ANR	8171176	Identifier	nb_subframes		8170449	1					
ANR	8171177	PrimaryExpression	1		8170449	1					
ANR	8171178	CompoundStatement		207:41:3956:3956	8170449	1					
ANR	8171179	ExpressionStatement	"s -> subframe_len [ 1 ] = get_bits ( gb , 6 )"	213:20:4108:4144	8170449	0	True				
ANR	8171180	AssignmentExpression	"s -> subframe_len [ 1 ] = get_bits ( gb , 6 )"		8170449	0		=			
ANR	8171181	ArrayIndexing	s -> subframe_len [ 1 ]		8170449	0					
ANR	8171182	PtrMemberAccess	s -> subframe_len		8170449	0					
ANR	8171183	Identifier	s		8170449	0					
ANR	8171184	Identifier	subframe_len		8170449	1					
ANR	8171185	PrimaryExpression	1		8170449	1					
ANR	8171186	CallExpression	"get_bits ( gb , 6 )"		8170449	1					
ANR	8171187	Callee	get_bits		8170449	0					
ANR	8171188	Identifier	get_bits		8170449	0					
ANR	8171189	ArgumentList	gb		8170449	1					
ANR	8171190	Argument	gb		8170449	0					
ANR	8171191	Identifier	gb		8170449	0					
ANR	8171192	Argument	6		8170449	1					
ANR	8171193	PrimaryExpression	6		8170449	0					
ANR	8171194	ExpressionStatement	"s -> dmode = get_bits ( gb , 3 )"	219:16:4184:4210	8170449	2	True				
ANR	8171195	AssignmentExpression	"s -> dmode = get_bits ( gb , 3 )"		8170449	0		=			
ANR	8171196	PtrMemberAccess	s -> dmode		8170449	0					
ANR	8171197	Identifier	s		8170449	0					
ANR	8171198	Identifier	dmode		8170449	1					
ANR	8171199	CallExpression	"get_bits ( gb , 3 )"		8170449	1					
ANR	8171200	Callee	get_bits		8170449	0					
ANR	8171201	Identifier	get_bits		8170449	0					
ANR	8171202	ArgumentList	gb		8170449	1					
ANR	8171203	Argument	gb		8170449	0					
ANR	8171204	Identifier	gb		8170449	0					
ANR	8171205	Argument	3		8170449	1					
ANR	8171206	PrimaryExpression	3		8170449	0					
ANR	8171207	IfStatement	"if ( ret = decorrelate ( s , 0 , 1 , s -> nb_samples - 1 ) )"		8170449	3					
ANR	8171208	Condition	"ret = decorrelate ( s , 0 , 1 , s -> nb_samples - 1 )"	221:20:4233:4277	8170449	0	True				
ANR	8171209	AssignmentExpression	"ret = decorrelate ( s , 0 , 1 , s -> nb_samples - 1 )"		8170449	0		=			
ANR	8171210	Identifier	ret		8170449	0					
ANR	8171211	CallExpression	"decorrelate ( s , 0 , 1 , s -> nb_samples - 1 )"		8170449	1					
ANR	8171212	Callee	decorrelate		8170449	0					
ANR	8171213	Identifier	decorrelate		8170449	0					
ANR	8171214	ArgumentList	s		8170449	1					
ANR	8171215	Argument	s		8170449	0					
ANR	8171216	Identifier	s		8170449	0					
ANR	8171217	Argument	0		8170449	1					
ANR	8171218	PrimaryExpression	0		8170449	0					
ANR	8171219	Argument	1		8170449	2					
ANR	8171220	PrimaryExpression	1		8170449	0					
ANR	8171221	Argument	s -> nb_samples - 1		8170449	3					
ANR	8171222	AdditiveExpression	s -> nb_samples - 1		8170449	0		-			
ANR	8171223	PtrMemberAccess	s -> nb_samples		8170449	0					
ANR	8171224	Identifier	s		8170449	0					
ANR	8171225	Identifier	nb_samples		8170449	1					
ANR	8171226	PrimaryExpression	1		8170449	1					
ANR	8171227	ReturnStatement	return ret ;	223:20:4301:4311	8170449	1	True				
ANR	8171228	Identifier	ret		8170449	0					
ANR	8171229	ElseStatement	else		8170449	0					
ANR	8171230	IfStatement	if ( s -> ti . codec == TAK_CODEC_MULTICHANNEL )		8170449	0					
ANR	8171231	Condition	s -> ti . codec == TAK_CODEC_MULTICHANNEL	227:19:4348:4384	8170449	0	True				
ANR	8171232	EqualityExpression	s -> ti . codec == TAK_CODEC_MULTICHANNEL		8170449	0		==			
ANR	8171233	MemberAccess	s -> ti . codec		8170449	0					
ANR	8171234	PtrMemberAccess	s -> ti		8170449	0					
ANR	8171235	Identifier	s		8170449	0					
ANR	8171236	Identifier	ti		8170449	1					
ANR	8171237	Identifier	codec		8170449	1					
ANR	8171238	Identifier	TAK_CODEC_MULTICHANNEL		8170449	1					
ANR	8171239	CompoundStatement		223:58:4258:4258	8170449	1					
ANR	8171240	IfStatement	if ( get_bits1 ( gb ) )		8170449	0					
ANR	8171241	Condition	get_bits1 ( gb )	229:16:4406:4418	8170449	0	True				
ANR	8171242	CallExpression	get_bits1 ( gb )		8170449	0					
ANR	8171243	Callee	get_bits1		8170449	0					
ANR	8171244	Identifier	get_bits1		8170449	0					
ANR	8171245	ArgumentList	gb		8170449	1					
ANR	8171246	Argument	gb		8170449	0					
ANR	8171247	Identifier	gb		8170449	0					
ANR	8171248	CompoundStatement		227:16:4311:4326	8170449	1					
ANR	8171249	IdentifierDeclStatement	int ch_mask = 0 ;	231:16:4440:4455	8170449	0	True				
ANR	8171250	IdentifierDecl	ch_mask = 0		8170449	0					
ANR	8171251	IdentifierDeclType	int		8170449	0					
ANR	8171252	Identifier	ch_mask		8170449	1					
ANR	8171253	AssignmentExpression	ch_mask = 0		8170449	2		=			
ANR	8171254	Identifier	ch_mask		8170449	0					
ANR	8171255	PrimaryExpression	0		8170449	1					
ANR	8171256	ExpressionStatement	"chan = get_bits ( gb , 4 ) + 1"	235:16:4476:4502	8170449	1	True				
ANR	8171257	AssignmentExpression	"chan = get_bits ( gb , 4 ) + 1"		8170449	0		=			
ANR	8171258	Identifier	chan		8170449	0					
ANR	8171259	AdditiveExpression	"get_bits ( gb , 4 ) + 1"		8170449	1		+			
ANR	8171260	CallExpression	"get_bits ( gb , 4 )"		8170449	0					
ANR	8171261	Callee	get_bits		8170449	0					
ANR	8171262	Identifier	get_bits		8170449	0					
ANR	8171263	ArgumentList	gb		8170449	1					
ANR	8171264	Argument	gb		8170449	0					
ANR	8171265	Identifier	gb		8170449	0					
ANR	8171266	Argument	4		8170449	1					
ANR	8171267	PrimaryExpression	4		8170449	0					
ANR	8171268	PrimaryExpression	1		8170449	1					
ANR	8171269	IfStatement	if ( chan > avctx -> channels )		8170449	2					
ANR	8171270	Condition	chan > avctx -> channels	237:20:4525:4546	8170449	0	True				
ANR	8171271	RelationalExpression	chan > avctx -> channels		8170449	0		>			
ANR	8171272	Identifier	chan		8170449	0					
ANR	8171273	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171274	Identifier	avctx		8170449	0					
ANR	8171275	Identifier	channels		8170449	1					
ANR	8171276	ReturnStatement	return AVERROR_INVALIDDATA ;	239:20:4570:4596	8170449	1	True				
ANR	8171277	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8171278	ForStatement	for ( i = 0 ; i < chan ; i ++ )		8170449	3					
ANR	8171279	ForInit	i = 0 ;	243:21:4622:4627	8170449	0	True				
ANR	8171280	AssignmentExpression	i = 0		8170449	0		=			
ANR	8171281	Identifier	i		8170449	0					
ANR	8171282	PrimaryExpression	0		8170449	1					
ANR	8171283	Condition	i < chan	243:28:4629:4636	8170449	1	True				
ANR	8171284	RelationalExpression	i < chan		8170449	0		<			
ANR	8171285	Identifier	i		8170449	0					
ANR	8171286	Identifier	chan		8170449	1					
ANR	8171287	PostIncDecOperationExpression	i ++	243:38:4639:4641	8170449	2	True				
ANR	8171288	Identifier	i		8170449	0					
ANR	8171289	IncDec	++		8170449	1					
ANR	8171290	CompoundStatement		241:20:4538:4564	8170449	3					
ANR	8171291	IdentifierDeclStatement	"int nbit = get_bits ( gb , 4 ) ;"	245:20:4667:4693	8170449	0	True				
ANR	8171292	IdentifierDecl	"nbit = get_bits ( gb , 4 )"		8170449	0					
ANR	8171293	IdentifierDeclType	int		8170449	0					
ANR	8171294	Identifier	nbit		8170449	1					
ANR	8171295	AssignmentExpression	"nbit = get_bits ( gb , 4 )"		8170449	2		=			
ANR	8171296	Identifier	nbit		8170449	0					
ANR	8171297	CallExpression	"get_bits ( gb , 4 )"		8170449	1					
ANR	8171298	Callee	get_bits		8170449	0					
ANR	8171299	Identifier	get_bits		8170449	0					
ANR	8171300	ArgumentList	gb		8170449	1					
ANR	8171301	Argument	gb		8170449	0					
ANR	8171302	Identifier	gb		8170449	0					
ANR	8171303	Argument	4		8170449	1					
ANR	8171304	PrimaryExpression	4		8170449	0					
ANR	8171305	IfStatement	if ( nbit >= avctx -> channels )		8170449	1					
ANR	8171306	Condition	nbit >= avctx -> channels	249:24:4722:4744	8170449	0	True				
ANR	8171307	RelationalExpression	nbit >= avctx -> channels		8170449	0		>=			
ANR	8171308	Identifier	nbit		8170449	0					
ANR	8171309	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171310	Identifier	avctx		8170449	0					
ANR	8171311	Identifier	channels		8170449	1					
ANR	8171312	ReturnStatement	return AVERROR_INVALIDDATA ;	251:24:4772:4798	8170449	1	True				
ANR	8171313	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8171314	IfStatement	if ( ch_mask & 1 << nbit )		8170449	2					
ANR	8171315	Condition	ch_mask & 1 << nbit	255:24:4827:4845	8170449	0	True				
ANR	8171316	BitAndExpression	ch_mask & 1 << nbit		8170449	0		&			
ANR	8171317	Identifier	ch_mask		8170449	0					
ANR	8171318	ShiftExpression	1 << nbit		8170449	1		<<			
ANR	8171319	PrimaryExpression	1		8170449	0					
ANR	8171320	Identifier	nbit		8170449	1					
ANR	8171321	ReturnStatement	return AVERROR_INVALIDDATA ;	257:24:4873:4899	8170449	1	True				
ANR	8171322	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8171323	ExpressionStatement	s -> mcdparams [ i ] . present = get_bits1 ( gb )	261:20:4924:4963	8170449	3	True				
ANR	8171324	AssignmentExpression	s -> mcdparams [ i ] . present = get_bits1 ( gb )		8170449	0		=			
ANR	8171325	MemberAccess	s -> mcdparams [ i ] . present		8170449	0					
ANR	8171326	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171327	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171328	Identifier	s		8170449	0					
ANR	8171329	Identifier	mcdparams		8170449	1					
ANR	8171330	Identifier	i		8170449	1					
ANR	8171331	Identifier	present		8170449	1					
ANR	8171332	CallExpression	get_bits1 ( gb )		8170449	1					
ANR	8171333	Callee	get_bits1		8170449	0					
ANR	8171334	Identifier	get_bits1		8170449	0					
ANR	8171335	ArgumentList	gb		8170449	1					
ANR	8171336	Argument	gb		8170449	0					
ANR	8171337	Identifier	gb		8170449	0					
ANR	8171338	IfStatement	if ( s -> mcdparams [ i ] . present )		8170449	4					
ANR	8171339	Condition	s -> mcdparams [ i ] . present	263:24:4990:5012	8170449	0	True				
ANR	8171340	MemberAccess	s -> mcdparams [ i ] . present		8170449	0					
ANR	8171341	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171342	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171343	Identifier	s		8170449	0					
ANR	8171344	Identifier	mcdparams		8170449	1					
ANR	8171345	Identifier	i		8170449	1					
ANR	8171346	Identifier	present		8170449	1					
ANR	8171347	CompoundStatement		259:49:4886:4886	8170449	1					
ANR	8171348	ExpressionStatement	"s -> mcdparams [ i ] . index = get_bits ( gb , 2 )"	265:24:5042:5081	8170449	0	True				
ANR	8171349	AssignmentExpression	"s -> mcdparams [ i ] . index = get_bits ( gb , 2 )"		8170449	0		=			
ANR	8171350	MemberAccess	s -> mcdparams [ i ] . index		8170449	0					
ANR	8171351	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171352	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171353	Identifier	s		8170449	0					
ANR	8171354	Identifier	mcdparams		8170449	1					
ANR	8171355	Identifier	i		8170449	1					
ANR	8171356	Identifier	index		8170449	1					
ANR	8171357	CallExpression	"get_bits ( gb , 2 )"		8170449	1					
ANR	8171358	Callee	get_bits		8170449	0					
ANR	8171359	Identifier	get_bits		8170449	0					
ANR	8171360	ArgumentList	gb		8170449	1					
ANR	8171361	Argument	gb		8170449	0					
ANR	8171362	Identifier	gb		8170449	0					
ANR	8171363	Argument	2		8170449	1					
ANR	8171364	PrimaryExpression	2		8170449	0					
ANR	8171365	ExpressionStatement	"s -> mcdparams [ i ] . chan2 = get_bits ( gb , 4 )"	267:24:5108:5147	8170449	1	True				
ANR	8171366	AssignmentExpression	"s -> mcdparams [ i ] . chan2 = get_bits ( gb , 4 )"		8170449	0		=			
ANR	8171367	MemberAccess	s -> mcdparams [ i ] . chan2		8170449	0					
ANR	8171368	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171369	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171370	Identifier	s		8170449	0					
ANR	8171371	Identifier	mcdparams		8170449	1					
ANR	8171372	Identifier	i		8170449	1					
ANR	8171373	Identifier	chan2		8170449	1					
ANR	8171374	CallExpression	"get_bits ( gb , 4 )"		8170449	1					
ANR	8171375	Callee	get_bits		8170449	0					
ANR	8171376	Identifier	get_bits		8170449	0					
ANR	8171377	ArgumentList	gb		8170449	1					
ANR	8171378	Argument	gb		8170449	0					
ANR	8171379	Identifier	gb		8170449	0					
ANR	8171380	Argument	4		8170449	1					
ANR	8171381	PrimaryExpression	4		8170449	0					
ANR	8171382	IfStatement	if ( s -> mcdparams [ i ] . index == 1 )		8170449	2					
ANR	8171383	Condition	s -> mcdparams [ i ] . index == 1	269:28:5178:5203	8170449	0	True				
ANR	8171384	EqualityExpression	s -> mcdparams [ i ] . index == 1		8170449	0		==			
ANR	8171385	MemberAccess	s -> mcdparams [ i ] . index		8170449	0					
ANR	8171386	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171387	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171388	Identifier	s		8170449	0					
ANR	8171389	Identifier	mcdparams		8170449	1					
ANR	8171390	Identifier	i		8170449	1					
ANR	8171391	Identifier	index		8170449	1					
ANR	8171392	PrimaryExpression	1		8170449	1					
ANR	8171393	CompoundStatement		265:56:5077:5077	8170449	1					
ANR	8171394	IfStatement	if ( ( nbit == s -> mcdparams [ i ] . chan2 ) || ( ch_mask & 1 << s -> mcdparams [ i ] . chan2 ) )		8170449	0					
ANR	8171395	Condition	( nbit == s -> mcdparams [ i ] . chan2 ) || ( ch_mask & 1 << s -> mcdparams [ i ] . chan2 )	271:32:5241:5346	8170449	0	True				
ANR	8171396	OrExpression	( nbit == s -> mcdparams [ i ] . chan2 ) || ( ch_mask & 1 << s -> mcdparams [ i ] . chan2 )		8170449	0		||			
ANR	8171397	EqualityExpression	nbit == s -> mcdparams [ i ] . chan2		8170449	0		==			
ANR	8171398	Identifier	nbit		8170449	0					
ANR	8171399	MemberAccess	s -> mcdparams [ i ] . chan2		8170449	1					
ANR	8171400	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171401	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171402	Identifier	s		8170449	0					
ANR	8171403	Identifier	mcdparams		8170449	1					
ANR	8171404	Identifier	i		8170449	1					
ANR	8171405	Identifier	chan2		8170449	1					
ANR	8171406	BitAndExpression	ch_mask & 1 << s -> mcdparams [ i ] . chan2		8170449	1		&			
ANR	8171407	Identifier	ch_mask		8170449	0					
ANR	8171408	ShiftExpression	1 << s -> mcdparams [ i ] . chan2		8170449	1		<<			
ANR	8171409	PrimaryExpression	1		8170449	0					
ANR	8171410	MemberAccess	s -> mcdparams [ i ] . chan2		8170449	1					
ANR	8171411	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171412	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171413	Identifier	s		8170449	0					
ANR	8171414	Identifier	mcdparams		8170449	1					
ANR	8171415	Identifier	i		8170449	1					
ANR	8171416	Identifier	chan2		8170449	1					
ANR	8171417	ReturnStatement	return AVERROR_INVALIDDATA ;	275:32:5382:5408	8170449	1	True				
ANR	8171418	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8171419	ExpressionStatement	ch_mask |= 1 << s -> mcdparams [ i ] . chan2	279:28:5441:5478	8170449	1	True				
ANR	8171420	AssignmentExpression	ch_mask |= 1 << s -> mcdparams [ i ] . chan2		8170449	0		|=			
ANR	8171421	Identifier	ch_mask		8170449	0					
ANR	8171422	ShiftExpression	1 << s -> mcdparams [ i ] . chan2		8170449	1		<<			
ANR	8171423	PrimaryExpression	1		8170449	0					
ANR	8171424	MemberAccess	s -> mcdparams [ i ] . chan2		8170449	1					
ANR	8171425	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171426	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171427	Identifier	s		8170449	0					
ANR	8171428	Identifier	mcdparams		8170449	1					
ANR	8171429	Identifier	i		8170449	1					
ANR	8171430	Identifier	chan2		8170449	1					
ANR	8171431	ElseStatement	else		8170449	0					
ANR	8171432	IfStatement	if ( ! ( ch_mask & 1 << s -> mcdparams [ i ] . chan2 ) )		8170449	0					
ANR	8171433	Condition	! ( ch_mask & 1 << s -> mcdparams [ i ] . chan2 )	281:35:5516:5554	8170449	0	True				
ANR	8171434	UnaryOperationExpression	! ( ch_mask & 1 << s -> mcdparams [ i ] . chan2 )		8170449	0					
ANR	8171435	UnaryOperator	!		8170449	0					
ANR	8171436	BitAndExpression	ch_mask & 1 << s -> mcdparams [ i ] . chan2		8170449	1		&			
ANR	8171437	Identifier	ch_mask		8170449	0					
ANR	8171438	ShiftExpression	1 << s -> mcdparams [ i ] . chan2		8170449	1		<<			
ANR	8171439	PrimaryExpression	1		8170449	0					
ANR	8171440	MemberAccess	s -> mcdparams [ i ] . chan2		8170449	1					
ANR	8171441	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171442	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171443	Identifier	s		8170449	0					
ANR	8171444	Identifier	mcdparams		8170449	1					
ANR	8171445	Identifier	i		8170449	1					
ANR	8171446	Identifier	chan2		8170449	1					
ANR	8171447	CompoundStatement		277:76:5428:5428	8170449	1					
ANR	8171448	ReturnStatement	return AVERROR_INVALIDDATA ;	283:28:5588:5614	8170449	0	True				
ANR	8171449	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8171450	ExpressionStatement	s -> mcdparams [ i ] . chan1 = nbit	289:20:5687:5715	8170449	5	True				
ANR	8171451	AssignmentExpression	s -> mcdparams [ i ] . chan1 = nbit		8170449	0		=			
ANR	8171452	MemberAccess	s -> mcdparams [ i ] . chan1		8170449	0					
ANR	8171453	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171454	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171455	Identifier	s		8170449	0					
ANR	8171456	Identifier	mcdparams		8170449	1					
ANR	8171457	Identifier	i		8170449	1					
ANR	8171458	Identifier	chan1		8170449	1					
ANR	8171459	Identifier	nbit		8170449	1					
ANR	8171460	ExpressionStatement	ch_mask |= 1 << nbit	293:20:5740:5760	8170449	6	True				
ANR	8171461	AssignmentExpression	ch_mask |= 1 << nbit		8170449	0		|=			
ANR	8171462	Identifier	ch_mask		8170449	0					
ANR	8171463	ShiftExpression	1 << nbit		8170449	1		<<			
ANR	8171464	PrimaryExpression	1		8170449	0					
ANR	8171465	Identifier	nbit		8170449	1					
ANR	8171466	ElseStatement	else		8170449	0					
ANR	8171467	CompoundStatement		293:19:5672:5672	8170449	0					
ANR	8171468	ExpressionStatement	chan = avctx -> channels	299:16:5820:5842	8170449	0	True				
ANR	8171469	AssignmentExpression	chan = avctx -> channels		8170449	0		=			
ANR	8171470	Identifier	chan		8170449	0					
ANR	8171471	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171472	Identifier	avctx		8170449	0					
ANR	8171473	Identifier	channels		8170449	1					
ANR	8171474	ForStatement	for ( i = 0 ; i < chan ; i ++ )		8170449	1					
ANR	8171475	ForInit	i = 0 ;	301:21:5866:5871	8170449	0	True				
ANR	8171476	AssignmentExpression	i = 0		8170449	0		=			
ANR	8171477	Identifier	i		8170449	0					
ANR	8171478	PrimaryExpression	0		8170449	1					
ANR	8171479	Condition	i < chan	301:28:5873:5880	8170449	1	True				
ANR	8171480	RelationalExpression	i < chan		8170449	0		<			
ANR	8171481	Identifier	i		8170449	0					
ANR	8171482	Identifier	chan		8170449	1					
ANR	8171483	PostIncDecOperationExpression	i ++	301:38:5883:5885	8170449	2	True				
ANR	8171484	Identifier	i		8170449	0					
ANR	8171485	IncDec	++		8170449	1					
ANR	8171486	CompoundStatement		297:43:5759:5759	8170449	3					
ANR	8171487	ExpressionStatement	s -> mcdparams [ i ] . present = 0	303:20:5911:5938	8170449	0	True				
ANR	8171488	AssignmentExpression	s -> mcdparams [ i ] . present = 0		8170449	0		=			
ANR	8171489	MemberAccess	s -> mcdparams [ i ] . present		8170449	0					
ANR	8171490	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171491	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171492	Identifier	s		8170449	0					
ANR	8171493	Identifier	mcdparams		8170449	1					
ANR	8171494	Identifier	i		8170449	1					
ANR	8171495	Identifier	present		8170449	1					
ANR	8171496	PrimaryExpression	0		8170449	1					
ANR	8171497	ExpressionStatement	s -> mcdparams [ i ] . chan1 = i	305:20:5961:5988	8170449	1	True				
ANR	8171498	AssignmentExpression	s -> mcdparams [ i ] . chan1 = i		8170449	0		=			
ANR	8171499	MemberAccess	s -> mcdparams [ i ] . chan1		8170449	0					
ANR	8171500	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171501	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171502	Identifier	s		8170449	0					
ANR	8171503	Identifier	mcdparams		8170449	1					
ANR	8171504	Identifier	i		8170449	1					
ANR	8171505	Identifier	chan1		8170449	1					
ANR	8171506	Identifier	i		8170449	1					
ANR	8171507	ForStatement	for ( i = 0 ; i < chan ; i ++ )		8170449	1					
ANR	8171508	ForInit	i = 0 ;	313:17:6044:6049	8170449	0	True				
ANR	8171509	AssignmentExpression	i = 0		8170449	0		=			
ANR	8171510	Identifier	i		8170449	0					
ANR	8171511	PrimaryExpression	0		8170449	1					
ANR	8171512	Condition	i < chan	313:24:6051:6058	8170449	1	True				
ANR	8171513	RelationalExpression	i < chan		8170449	0		<			
ANR	8171514	Identifier	i		8170449	0					
ANR	8171515	Identifier	chan		8170449	1					
ANR	8171516	PostIncDecOperationExpression	i ++	313:34:6061:6063	8170449	2	True				
ANR	8171517	Identifier	i		8170449	0					
ANR	8171518	IncDec	++		8170449	1					
ANR	8171519	CompoundStatement		309:39:5937:5937	8170449	3					
ANR	8171520	IfStatement	if ( s -> mcdparams [ i ] . present && s -> mcdparams [ i ] . index == 1 )		8170449	0					
ANR	8171521	Condition	s -> mcdparams [ i ] . present && s -> mcdparams [ i ] . index == 1	315:20:6089:6141	8170449	0	True				
ANR	8171522	AndExpression	s -> mcdparams [ i ] . present && s -> mcdparams [ i ] . index == 1		8170449	0		&&			
ANR	8171523	MemberAccess	s -> mcdparams [ i ] . present		8170449	0					
ANR	8171524	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171525	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171526	Identifier	s		8170449	0					
ANR	8171527	Identifier	mcdparams		8170449	1					
ANR	8171528	Identifier	i		8170449	1					
ANR	8171529	Identifier	present		8170449	1					
ANR	8171530	EqualityExpression	s -> mcdparams [ i ] . index == 1		8170449	1		==			
ANR	8171531	MemberAccess	s -> mcdparams [ i ] . index		8170449	0					
ANR	8171532	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171533	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171534	Identifier	s		8170449	0					
ANR	8171535	Identifier	mcdparams		8170449	1					
ANR	8171536	Identifier	i		8170449	1					
ANR	8171537	Identifier	index		8170449	1					
ANR	8171538	PrimaryExpression	1		8170449	1					
ANR	8171539	IfStatement	"if ( ret = decode_channel ( s , s -> mcdparams [ i ] . chan2 ) )"		8170449	1					
ANR	8171540	Condition	"ret = decode_channel ( s , s -> mcdparams [ i ] . chan2 )"	317:24:6169:6214	8170449	0	True				
ANR	8171541	AssignmentExpression	"ret = decode_channel ( s , s -> mcdparams [ i ] . chan2 )"		8170449	0		=			
ANR	8171542	Identifier	ret		8170449	0					
ANR	8171543	CallExpression	"decode_channel ( s , s -> mcdparams [ i ] . chan2 )"		8170449	1					
ANR	8171544	Callee	decode_channel		8170449	0					
ANR	8171545	Identifier	decode_channel		8170449	0					
ANR	8171546	ArgumentList	s		8170449	1					
ANR	8171547	Argument	s		8170449	0					
ANR	8171548	Identifier	s		8170449	0					
ANR	8171549	Argument	s -> mcdparams [ i ] . chan2		8170449	1					
ANR	8171550	MemberAccess	s -> mcdparams [ i ] . chan2		8170449	0					
ANR	8171551	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171552	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171553	Identifier	s		8170449	0					
ANR	8171554	Identifier	mcdparams		8170449	1					
ANR	8171555	Identifier	i		8170449	1					
ANR	8171556	Identifier	chan2		8170449	1					
ANR	8171557	ReturnStatement	return ret ;	319:24:6242:6252	8170449	1	True				
ANR	8171558	Identifier	ret		8170449	0					
ANR	8171559	IfStatement	"if ( ret = decode_channel ( s , s -> mcdparams [ i ] . chan1 ) )"		8170449	1					
ANR	8171560	Condition	"ret = decode_channel ( s , s -> mcdparams [ i ] . chan1 )"	323:20:6277:6322	8170449	0	True				
ANR	8171561	AssignmentExpression	"ret = decode_channel ( s , s -> mcdparams [ i ] . chan1 )"		8170449	0		=			
ANR	8171562	Identifier	ret		8170449	0					
ANR	8171563	CallExpression	"decode_channel ( s , s -> mcdparams [ i ] . chan1 )"		8170449	1					
ANR	8171564	Callee	decode_channel		8170449	0					
ANR	8171565	Identifier	decode_channel		8170449	0					
ANR	8171566	ArgumentList	s		8170449	1					
ANR	8171567	Argument	s		8170449	0					
ANR	8171568	Identifier	s		8170449	0					
ANR	8171569	Argument	s -> mcdparams [ i ] . chan1		8170449	1					
ANR	8171570	MemberAccess	s -> mcdparams [ i ] . chan1		8170449	0					
ANR	8171571	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171572	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171573	Identifier	s		8170449	0					
ANR	8171574	Identifier	mcdparams		8170449	1					
ANR	8171575	Identifier	i		8170449	1					
ANR	8171576	Identifier	chan1		8170449	1					
ANR	8171577	ReturnStatement	return ret ;	325:20:6346:6356	8170449	1	True				
ANR	8171578	Identifier	ret		8170449	0					
ANR	8171579	IfStatement	if ( s -> mcdparams [ i ] . present )		8170449	2					
ANR	8171580	Condition	s -> mcdparams [ i ] . present	329:20:6381:6403	8170449	0	True				
ANR	8171581	MemberAccess	s -> mcdparams [ i ] . present		8170449	0					
ANR	8171582	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171583	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171584	Identifier	s		8170449	0					
ANR	8171585	Identifier	mcdparams		8170449	1					
ANR	8171586	Identifier	i		8170449	1					
ANR	8171587	Identifier	present		8170449	1					
ANR	8171588	CompoundStatement		325:45:6277:6277	8170449	1					
ANR	8171589	ExpressionStatement	s -> dmode = mc_dmodes [ s -> mcdparams [ i ] . index ]	331:20:6429:6472	8170449	0	True				
ANR	8171590	AssignmentExpression	s -> dmode = mc_dmodes [ s -> mcdparams [ i ] . index ]		8170449	0		=			
ANR	8171591	PtrMemberAccess	s -> dmode		8170449	0					
ANR	8171592	Identifier	s		8170449	0					
ANR	8171593	Identifier	dmode		8170449	1					
ANR	8171594	ArrayIndexing	mc_dmodes [ s -> mcdparams [ i ] . index ]		8170449	1					
ANR	8171595	Identifier	mc_dmodes		8170449	0					
ANR	8171596	MemberAccess	s -> mcdparams [ i ] . index		8170449	1					
ANR	8171597	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171598	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171599	Identifier	s		8170449	0					
ANR	8171600	Identifier	mcdparams		8170449	1					
ANR	8171601	Identifier	i		8170449	1					
ANR	8171602	Identifier	index		8170449	1					
ANR	8171603	IfStatement	"if ( ret = decorrelate ( s , s -> mcdparams [ i ] . chan2 , s -> mcdparams [ i ] . chan1 , s -> nb_samples - 1 ) )"		8170449	1					
ANR	8171604	Condition	"ret = decorrelate ( s , s -> mcdparams [ i ] . chan2 , s -> mcdparams [ i ] . chan1 , s -> nb_samples - 1 )"	333:24:6499:6712	8170449	0	True				
ANR	8171605	AssignmentExpression	"ret = decorrelate ( s , s -> mcdparams [ i ] . chan2 , s -> mcdparams [ i ] . chan1 , s -> nb_samples - 1 )"		8170449	0		=			
ANR	8171606	Identifier	ret		8170449	0					
ANR	8171607	CallExpression	"decorrelate ( s , s -> mcdparams [ i ] . chan2 , s -> mcdparams [ i ] . chan1 , s -> nb_samples - 1 )"		8170449	1					
ANR	8171608	Callee	decorrelate		8170449	0					
ANR	8171609	Identifier	decorrelate		8170449	0					
ANR	8171610	ArgumentList	s		8170449	1					
ANR	8171611	Argument	s		8170449	0					
ANR	8171612	Identifier	s		8170449	0					
ANR	8171613	Argument	s -> mcdparams [ i ] . chan2		8170449	1					
ANR	8171614	MemberAccess	s -> mcdparams [ i ] . chan2		8170449	0					
ANR	8171615	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171616	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171617	Identifier	s		8170449	0					
ANR	8171618	Identifier	mcdparams		8170449	1					
ANR	8171619	Identifier	i		8170449	1					
ANR	8171620	Identifier	chan2		8170449	1					
ANR	8171621	Argument	s -> mcdparams [ i ] . chan1		8170449	2					
ANR	8171622	MemberAccess	s -> mcdparams [ i ] . chan1		8170449	0					
ANR	8171623	ArrayIndexing	s -> mcdparams [ i ]		8170449	0					
ANR	8171624	PtrMemberAccess	s -> mcdparams		8170449	0					
ANR	8171625	Identifier	s		8170449	0					
ANR	8171626	Identifier	mcdparams		8170449	1					
ANR	8171627	Identifier	i		8170449	1					
ANR	8171628	Identifier	chan1		8170449	1					
ANR	8171629	Argument	s -> nb_samples - 1		8170449	3					
ANR	8171630	AdditiveExpression	s -> nb_samples - 1		8170449	0		-			
ANR	8171631	PtrMemberAccess	s -> nb_samples		8170449	0					
ANR	8171632	Identifier	s		8170449	0					
ANR	8171633	Identifier	nb_samples		8170449	1					
ANR	8171634	PrimaryExpression	1		8170449	1					
ANR	8171635	ReturnStatement	return ret ;	341:24:6740:6750	8170449	1	True				
ANR	8171636	Identifier	ret		8170449	0					
ANR	8171637	ForStatement	for ( chan = 0 ; chan < avctx -> channels ; chan ++ )		8170449	1					
ANR	8171638	ForInit	chan = 0 ;	351:13:6813:6821	8170449	0	True				
ANR	8171639	AssignmentExpression	chan = 0		8170449	0		=			
ANR	8171640	Identifier	chan		8170449	0					
ANR	8171641	PrimaryExpression	0		8170449	1					
ANR	8171642	Condition	chan < avctx -> channels	351:23:6823:6844	8170449	1	True				
ANR	8171643	RelationalExpression	chan < avctx -> channels		8170449	0		<			
ANR	8171644	Identifier	chan		8170449	0					
ANR	8171645	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171646	Identifier	avctx		8170449	0					
ANR	8171647	Identifier	channels		8170449	1					
ANR	8171648	PostIncDecOperationExpression	chan ++	351:47:6847:6852	8170449	2	True				
ANR	8171649	Identifier	chan		8170449	0					
ANR	8171650	IncDec	++		8170449	1					
ANR	8171651	CompoundStatement		349:12:6741:6776	8170449	3					
ANR	8171652	IdentifierDeclStatement	int32_t * decoded = s -> decoded [ chan ] ;	353:12:6870:6905	8170449	0	True				
ANR	8171653	IdentifierDecl	* decoded = s -> decoded [ chan ]		8170449	0					
ANR	8171654	IdentifierDeclType	int32_t *		8170449	0					
ANR	8171655	Identifier	decoded		8170449	1					
ANR	8171656	AssignmentExpression	* decoded = s -> decoded [ chan ]		8170449	2		=			
ANR	8171657	Identifier	decoded		8170449	0					
ANR	8171658	ArrayIndexing	s -> decoded [ chan ]		8170449	1					
ANR	8171659	PtrMemberAccess	s -> decoded		8170449	0					
ANR	8171660	Identifier	s		8170449	0					
ANR	8171661	Identifier	decoded		8170449	1					
ANR	8171662	Identifier	chan		8170449	1					
ANR	8171663	IfStatement	if ( s -> lpc_mode [ chan ] )		8170449	1					
ANR	8171664	Condition	s -> lpc_mode [ chan ]	357:16:6926:6942	8170449	0	True				
ANR	8171665	ArrayIndexing	s -> lpc_mode [ chan ]		8170449	0					
ANR	8171666	PtrMemberAccess	s -> lpc_mode		8170449	0					
ANR	8171667	Identifier	s		8170449	0					
ANR	8171668	Identifier	lpc_mode		8170449	1					
ANR	8171669	Identifier	chan		8170449	1					
ANR	8171670	ExpressionStatement	"decode_lpc ( decoded , s -> lpc_mode [ chan ] , s -> nb_samples )"	359:16:6962:7015	8170449	1	True				
ANR	8171671	CallExpression	"decode_lpc ( decoded , s -> lpc_mode [ chan ] , s -> nb_samples )"		8170449	0					
ANR	8171672	Callee	decode_lpc		8170449	0					
ANR	8171673	Identifier	decode_lpc		8170449	0					
ANR	8171674	ArgumentList	decoded		8170449	1					
ANR	8171675	Argument	decoded		8170449	0					
ANR	8171676	Identifier	decoded		8170449	0					
ANR	8171677	Argument	s -> lpc_mode [ chan ]		8170449	1					
ANR	8171678	ArrayIndexing	s -> lpc_mode [ chan ]		8170449	0					
ANR	8171679	PtrMemberAccess	s -> lpc_mode		8170449	0					
ANR	8171680	Identifier	s		8170449	0					
ANR	8171681	Identifier	lpc_mode		8170449	1					
ANR	8171682	Identifier	chan		8170449	1					
ANR	8171683	Argument	s -> nb_samples		8170449	2					
ANR	8171684	PtrMemberAccess	s -> nb_samples		8170449	0					
ANR	8171685	Identifier	s		8170449	0					
ANR	8171686	Identifier	nb_samples		8170449	1					
ANR	8171687	IfStatement	if ( s -> sample_shift [ chan ] > 0 )		8170449	2					
ANR	8171688	Condition	s -> sample_shift [ chan ] > 0	363:16:7036:7060	8170449	0	True				
ANR	8171689	RelationalExpression	s -> sample_shift [ chan ] > 0		8170449	0		>			
ANR	8171690	ArrayIndexing	s -> sample_shift [ chan ]		8170449	0					
ANR	8171691	PtrMemberAccess	s -> sample_shift		8170449	0					
ANR	8171692	Identifier	s		8170449	0					
ANR	8171693	Identifier	sample_shift		8170449	1					
ANR	8171694	Identifier	chan		8170449	1					
ANR	8171695	PrimaryExpression	0		8170449	1					
ANR	8171696	ForStatement	for ( i = 0 ; i < s -> nb_samples ; i ++ )		8170449	1					
ANR	8171697	ForInit	i = 0 ;	365:21:7085:7090	8170449	0	True				
ANR	8171698	AssignmentExpression	i = 0		8170449	0		=			
ANR	8171699	Identifier	i		8170449	0					
ANR	8171700	PrimaryExpression	0		8170449	1					
ANR	8171701	Condition	i < s -> nb_samples	365:28:7092:7108	8170449	1	True				
ANR	8171702	RelationalExpression	i < s -> nb_samples		8170449	0		<			
ANR	8171703	Identifier	i		8170449	0					
ANR	8171704	PtrMemberAccess	s -> nb_samples		8170449	1					
ANR	8171705	Identifier	s		8170449	0					
ANR	8171706	Identifier	nb_samples		8170449	1					
ANR	8171707	PostIncDecOperationExpression	i ++	365:47:7111:7113	8170449	2	True				
ANR	8171708	Identifier	i		8170449	0					
ANR	8171709	IncDec	++		8170449	1					
ANR	8171710	ExpressionStatement	decoded [ i ] <<= s -> sample_shift [ chan ]	367:20:7137:7173	8170449	3	True				
ANR	8171711	AssignmentExpression	decoded [ i ] <<= s -> sample_shift [ chan ]		8170449	0		<<=			
ANR	8171712	ArrayIndexing	decoded [ i ]		8170449	0					
ANR	8171713	Identifier	decoded		8170449	0					
ANR	8171714	Identifier	i		8170449	1					
ANR	8171715	ArrayIndexing	s -> sample_shift [ chan ]		8170449	1					
ANR	8171716	PtrMemberAccess	s -> sample_shift		8170449	0					
ANR	8171717	Identifier	s		8170449	0					
ANR	8171718	Identifier	sample_shift		8170449	1					
ANR	8171719	Identifier	chan		8170449	1					
ANR	8171720	ExpressionStatement	align_get_bits ( gb )	375:4:7200:7218	8170449	28	True				
ANR	8171721	CallExpression	align_get_bits ( gb )		8170449	0					
ANR	8171722	Callee	align_get_bits		8170449	0					
ANR	8171723	Identifier	align_get_bits		8170449	0					
ANR	8171724	ArgumentList	gb		8170449	1					
ANR	8171725	Argument	gb		8170449	0					
ANR	8171726	Identifier	gb		8170449	0					
ANR	8171727	ExpressionStatement	"skip_bits ( gb , 24 )"	377:4:7225:7242	8170449	29	True				
ANR	8171728	CallExpression	"skip_bits ( gb , 24 )"		8170449	0					
ANR	8171729	Callee	skip_bits		8170449	0					
ANR	8171730	Identifier	skip_bits		8170449	0					
ANR	8171731	ArgumentList	gb		8170449	1					
ANR	8171732	Argument	gb		8170449	0					
ANR	8171733	Identifier	gb		8170449	0					
ANR	8171734	Argument	24		8170449	1					
ANR	8171735	PrimaryExpression	24		8170449	0					
ANR	8171736	IfStatement	if ( get_bits_left ( gb ) < 0 )		8170449	30					
ANR	8171737	Condition	get_bits_left ( gb ) < 0	379:8:7253:7273	8170449	0	True				
ANR	8171738	RelationalExpression	get_bits_left ( gb ) < 0		8170449	0		<			
ANR	8171739	CallExpression	get_bits_left ( gb )		8170449	0					
ANR	8171740	Callee	get_bits_left		8170449	0					
ANR	8171741	Identifier	get_bits_left		8170449	0					
ANR	8171742	ArgumentList	gb		8170449	1					
ANR	8171743	Argument	gb		8170449	0					
ANR	8171744	Identifier	gb		8170449	0					
ANR	8171745	PrimaryExpression	0		8170449	1					
ANR	8171746	ExpressionStatement	"av_log ( avctx , AV_LOG_DEBUG , ""overread\\n"" )"	381:8:7285:7326	8170449	1	True				
ANR	8171747	CallExpression	"av_log ( avctx , AV_LOG_DEBUG , ""overread\\n"" )"		8170449	0					
ANR	8171748	Callee	av_log		8170449	0					
ANR	8171749	Identifier	av_log		8170449	0					
ANR	8171750	ArgumentList	avctx		8170449	1					
ANR	8171751	Argument	avctx		8170449	0					
ANR	8171752	Identifier	avctx		8170449	0					
ANR	8171753	Argument	AV_LOG_DEBUG		8170449	1					
ANR	8171754	Identifier	AV_LOG_DEBUG		8170449	0					
ANR	8171755	Argument	"""overread\\n"""		8170449	2					
ANR	8171756	PrimaryExpression	"""overread\\n"""		8170449	0					
ANR	8171757	ElseStatement	else		8170449	0					
ANR	8171758	IfStatement	if ( get_bits_left ( gb ) > 0 )		8170449	0					
ANR	8171759	Condition	get_bits_left ( gb ) > 0	383:13:7342:7362	8170449	0	True				
ANR	8171760	RelationalExpression	get_bits_left ( gb ) > 0		8170449	0		>			
ANR	8171761	CallExpression	get_bits_left ( gb )		8170449	0					
ANR	8171762	Callee	get_bits_left		8170449	0					
ANR	8171763	Identifier	get_bits_left		8170449	0					
ANR	8171764	ArgumentList	gb		8170449	1					
ANR	8171765	Argument	gb		8170449	0					
ANR	8171766	Identifier	gb		8170449	0					
ANR	8171767	PrimaryExpression	0		8170449	1					
ANR	8171768	ExpressionStatement	"av_log ( avctx , AV_LOG_DEBUG , ""underread\\n"" )"	385:8:7374:7416	8170449	1	True				
ANR	8171769	CallExpression	"av_log ( avctx , AV_LOG_DEBUG , ""underread\\n"" )"		8170449	0					
ANR	8171770	Callee	av_log		8170449	0					
ANR	8171771	Identifier	av_log		8170449	0					
ANR	8171772	ArgumentList	avctx		8170449	1					
ANR	8171773	Argument	avctx		8170449	0					
ANR	8171774	Identifier	avctx		8170449	0					
ANR	8171775	Argument	AV_LOG_DEBUG		8170449	1					
ANR	8171776	Identifier	AV_LOG_DEBUG		8170449	0					
ANR	8171777	Argument	"""underread\\n"""		8170449	2					
ANR	8171778	PrimaryExpression	"""underread\\n"""		8170449	0					
ANR	8171779	IfStatement	if ( avctx -> err_recognition & ( AV_EF_CRCCHECK | AV_EF_COMPLIANT ) )		8170449	31					
ANR	8171780	Condition	avctx -> err_recognition & ( AV_EF_CRCCHECK | AV_EF_COMPLIANT )	389:8:7429:7487	8170449	0	True				
ANR	8171781	BitAndExpression	avctx -> err_recognition & ( AV_EF_CRCCHECK | AV_EF_COMPLIANT )		8170449	0		&			
ANR	8171782	PtrMemberAccess	avctx -> err_recognition		8170449	0					
ANR	8171783	Identifier	avctx		8170449	0					
ANR	8171784	Identifier	err_recognition		8170449	1					
ANR	8171785	InclusiveOrExpression	AV_EF_CRCCHECK | AV_EF_COMPLIANT		8170449	1		|			
ANR	8171786	Identifier	AV_EF_CRCCHECK		8170449	0					
ANR	8171787	Identifier	AV_EF_COMPLIANT		8170449	1					
ANR	8171788	CompoundStatement		385:69:7361:7361	8170449	1					
ANR	8171789	IfStatement	"if ( ff_tak_check_crc ( pkt -> data + hsize , get_bits_count ( gb ) / 8 - hsize ) )"		8170449	0					
ANR	8171790	Condition	"ff_tak_check_crc ( pkt -> data + hsize , get_bits_count ( gb ) / 8 - hsize )"	391:12:7505:7601	8170449	0	True				
ANR	8171791	CallExpression	"ff_tak_check_crc ( pkt -> data + hsize , get_bits_count ( gb ) / 8 - hsize )"		8170449	0					
ANR	8171792	Callee	ff_tak_check_crc		8170449	0					
ANR	8171793	Identifier	ff_tak_check_crc		8170449	0					
ANR	8171794	ArgumentList	pkt -> data + hsize		8170449	1					
ANR	8171795	Argument	pkt -> data + hsize		8170449	0					
ANR	8171796	AdditiveExpression	pkt -> data + hsize		8170449	0		+			
ANR	8171797	PtrMemberAccess	pkt -> data		8170449	0					
ANR	8171798	Identifier	pkt		8170449	0					
ANR	8171799	Identifier	data		8170449	1					
ANR	8171800	Identifier	hsize		8170449	1					
ANR	8171801	Argument	get_bits_count ( gb ) / 8 - hsize		8170449	1					
ANR	8171802	AdditiveExpression	get_bits_count ( gb ) / 8 - hsize		8170449	0		-			
ANR	8171803	MultiplicativeExpression	get_bits_count ( gb ) / 8		8170449	0		/			
ANR	8171804	CallExpression	get_bits_count ( gb )		8170449	0					
ANR	8171805	Callee	get_bits_count		8170449	0					
ANR	8171806	Identifier	get_bits_count		8170449	0					
ANR	8171807	ArgumentList	gb		8170449	1					
ANR	8171808	Argument	gb		8170449	0					
ANR	8171809	Identifier	gb		8170449	0					
ANR	8171810	PrimaryExpression	8		8170449	1					
ANR	8171811	Identifier	hsize		8170449	1					
ANR	8171812	CompoundStatement		389:62:7475:7475	8170449	1					
ANR	8171813	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""CRC error\\n"" )"	395:12:7619:7661	8170449	0	True				
ANR	8171814	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""CRC error\\n"" )"		8170449	0					
ANR	8171815	Callee	av_log		8170449	0					
ANR	8171816	Identifier	av_log		8170449	0					
ANR	8171817	ArgumentList	avctx		8170449	1					
ANR	8171818	Argument	avctx		8170449	0					
ANR	8171819	Identifier	avctx		8170449	0					
ANR	8171820	Argument	AV_LOG_ERROR		8170449	1					
ANR	8171821	Identifier	AV_LOG_ERROR		8170449	0					
ANR	8171822	Argument	"""CRC error\\n"""		8170449	2					
ANR	8171823	PrimaryExpression	"""CRC error\\n"""		8170449	0					
ANR	8171824	IfStatement	if ( avctx -> err_recognition & AV_EF_EXPLODE )		8170449	1					
ANR	8171825	Condition	avctx -> err_recognition & AV_EF_EXPLODE	397:16:7680:7717	8170449	0	True				
ANR	8171826	BitAndExpression	avctx -> err_recognition & AV_EF_EXPLODE		8170449	0		&			
ANR	8171827	PtrMemberAccess	avctx -> err_recognition		8170449	0					
ANR	8171828	Identifier	avctx		8170449	0					
ANR	8171829	Identifier	err_recognition		8170449	1					
ANR	8171830	Identifier	AV_EF_EXPLODE		8170449	1					
ANR	8171831	ReturnStatement	return AVERROR_INVALIDDATA ;	399:16:7737:7763	8170449	1	True				
ANR	8171832	Identifier	AVERROR_INVALIDDATA		8170449	0					
ANR	8171833	SwitchStatement	switch ( avctx -> sample_fmt )		8170449	32					
ANR	8171834	Condition	avctx -> sample_fmt	409:12:7834:7850	8170449	0	True				
ANR	8171835	PtrMemberAccess	avctx -> sample_fmt		8170449	0					
ANR	8171836	Identifier	avctx		8170449	0					
ANR	8171837	Identifier	sample_fmt		8170449	1					
ANR	8171838	CompoundStatement		405:31:7724:7724	8170449	1					
ANR	8171839	Label	case AV_SAMPLE_FMT_U8P :	411:4:7860:7882	8170449	0	True				
ANR	8171840	Identifier	AV_SAMPLE_FMT_U8P		8170449	0					
ANR	8171841	ForStatement	for ( chan = 0 ; chan < avctx -> channels ; chan ++ )		8170449	1					
ANR	8171842	ForInit	chan = 0 ;	413:13:7898:7906	8170449	0	True				
ANR	8171843	AssignmentExpression	chan = 0		8170449	0		=			
ANR	8171844	Identifier	chan		8170449	0					
ANR	8171845	PrimaryExpression	0		8170449	1					
ANR	8171846	Condition	chan < avctx -> channels	413:23:7908:7929	8170449	1	True				
ANR	8171847	RelationalExpression	chan < avctx -> channels		8170449	0		<			
ANR	8171848	Identifier	chan		8170449	0					
ANR	8171849	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171850	Identifier	avctx		8170449	0					
ANR	8171851	Identifier	channels		8170449	1					
ANR	8171852	PostIncDecOperationExpression	chan ++	413:47:7932:7937	8170449	2	True				
ANR	8171853	Identifier	chan		8170449	0					
ANR	8171854	IncDec	++		8170449	1					
ANR	8171855	CompoundStatement		413:12:7897:7932	8170449	3					
ANR	8171856	IdentifierDeclStatement	uint8_t * samples = ( uint8_t * ) frame -> extended_data [ chan ] ;	415:12:7955:8011	8170449	0	True				
ANR	8171857	IdentifierDecl	* samples = ( uint8_t * ) frame -> extended_data [ chan ]		8170449	0					
ANR	8171858	IdentifierDeclType	uint8_t *		8170449	0					
ANR	8171859	Identifier	samples		8170449	1					
ANR	8171860	AssignmentExpression	* samples = ( uint8_t * ) frame -> extended_data [ chan ]		8170449	2		=			
ANR	8171861	Identifier	samples		8170449	0					
ANR	8171862	CastExpression	( uint8_t * ) frame -> extended_data [ chan ]		8170449	1					
ANR	8171863	CastTarget	uint8_t *		8170449	0					
ANR	8171864	ArrayIndexing	frame -> extended_data [ chan ]		8170449	1					
ANR	8171865	PtrMemberAccess	frame -> extended_data		8170449	0					
ANR	8171866	Identifier	frame		8170449	0					
ANR	8171867	Identifier	extended_data		8170449	1					
ANR	8171868	Identifier	chan		8170449	1					
ANR	8171869	IdentifierDeclStatement	int32_t * decoded = s -> decoded [ chan ] ;	417:12:8026:8061	8170449	1	True				
ANR	8171870	IdentifierDecl	* decoded = s -> decoded [ chan ]		8170449	0					
ANR	8171871	IdentifierDeclType	int32_t *		8170449	0					
ANR	8171872	Identifier	decoded		8170449	1					
ANR	8171873	AssignmentExpression	* decoded = s -> decoded [ chan ]		8170449	2		=			
ANR	8171874	Identifier	decoded		8170449	0					
ANR	8171875	ArrayIndexing	s -> decoded [ chan ]		8170449	1					
ANR	8171876	PtrMemberAccess	s -> decoded		8170449	0					
ANR	8171877	Identifier	s		8170449	0					
ANR	8171878	Identifier	decoded		8170449	1					
ANR	8171879	Identifier	chan		8170449	1					
ANR	8171880	ForStatement	for ( i = 0 ; i < s -> nb_samples ; i ++ )		8170449	2					
ANR	8171881	ForInit	i = 0 ;	419:17:8081:8086	8170449	0	True				
ANR	8171882	AssignmentExpression	i = 0		8170449	0		=			
ANR	8171883	Identifier	i		8170449	0					
ANR	8171884	PrimaryExpression	0		8170449	1					
ANR	8171885	Condition	i < s -> nb_samples	419:24:8088:8104	8170449	1	True				
ANR	8171886	RelationalExpression	i < s -> nb_samples		8170449	0		<			
ANR	8171887	Identifier	i		8170449	0					
ANR	8171888	PtrMemberAccess	s -> nb_samples		8170449	1					
ANR	8171889	Identifier	s		8170449	0					
ANR	8171890	Identifier	nb_samples		8170449	1					
ANR	8171891	PostIncDecOperationExpression	i ++	419:43:8107:8109	8170449	2	True				
ANR	8171892	Identifier	i		8170449	0					
ANR	8171893	IncDec	++		8170449	1					
ANR	8171894	ExpressionStatement	samples [ i ] = decoded [ i ] + 0x80	421:16:8129:8159	8170449	3	True				
ANR	8171895	AssignmentExpression	samples [ i ] = decoded [ i ] + 0x80		8170449	0		=			
ANR	8171896	ArrayIndexing	samples [ i ]		8170449	0					
ANR	8171897	Identifier	samples		8170449	0					
ANR	8171898	Identifier	i		8170449	1					
ANR	8171899	AdditiveExpression	decoded [ i ] + 0x80		8170449	1		+			
ANR	8171900	ArrayIndexing	decoded [ i ]		8170449	0					
ANR	8171901	Identifier	decoded		8170449	0					
ANR	8171902	Identifier	i		8170449	1					
ANR	8171903	PrimaryExpression	0x80		8170449	1					
ANR	8171904	BreakStatement	break ;	425:8:8181:8186	8170449	2	True				
ANR	8171905	Label	case AV_SAMPLE_FMT_S16P :	427:4:8193:8216	8170449	3	True				
ANR	8171906	Identifier	AV_SAMPLE_FMT_S16P		8170449	0					
ANR	8171907	ForStatement	for ( chan = 0 ; chan < avctx -> channels ; chan ++ )		8170449	4					
ANR	8171908	ForInit	chan = 0 ;	429:13:8232:8240	8170449	0	True				
ANR	8171909	AssignmentExpression	chan = 0		8170449	0		=			
ANR	8171910	Identifier	chan		8170449	0					
ANR	8171911	PrimaryExpression	0		8170449	1					
ANR	8171912	Condition	chan < avctx -> channels	429:23:8242:8263	8170449	1	True				
ANR	8171913	RelationalExpression	chan < avctx -> channels		8170449	0		<			
ANR	8171914	Identifier	chan		8170449	0					
ANR	8171915	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171916	Identifier	avctx		8170449	0					
ANR	8171917	Identifier	channels		8170449	1					
ANR	8171918	PostIncDecOperationExpression	chan ++	429:47:8266:8271	8170449	2	True				
ANR	8171919	Identifier	chan		8170449	0					
ANR	8171920	IncDec	++		8170449	1					
ANR	8171921	CompoundStatement		429:12:8231:8266	8170449	3					
ANR	8171922	IdentifierDeclStatement	int16_t * samples = ( int16_t * ) frame -> extended_data [ chan ] ;	431:12:8289:8345	8170449	0	True				
ANR	8171923	IdentifierDecl	* samples = ( int16_t * ) frame -> extended_data [ chan ]		8170449	0					
ANR	8171924	IdentifierDeclType	int16_t *		8170449	0					
ANR	8171925	Identifier	samples		8170449	1					
ANR	8171926	AssignmentExpression	* samples = ( int16_t * ) frame -> extended_data [ chan ]		8170449	2		=			
ANR	8171927	Identifier	samples		8170449	0					
ANR	8171928	CastExpression	( int16_t * ) frame -> extended_data [ chan ]		8170449	1					
ANR	8171929	CastTarget	int16_t *		8170449	0					
ANR	8171930	ArrayIndexing	frame -> extended_data [ chan ]		8170449	1					
ANR	8171931	PtrMemberAccess	frame -> extended_data		8170449	0					
ANR	8171932	Identifier	frame		8170449	0					
ANR	8171933	Identifier	extended_data		8170449	1					
ANR	8171934	Identifier	chan		8170449	1					
ANR	8171935	IdentifierDeclStatement	int32_t * decoded = s -> decoded [ chan ] ;	433:12:8360:8395	8170449	1	True				
ANR	8171936	IdentifierDecl	* decoded = s -> decoded [ chan ]		8170449	0					
ANR	8171937	IdentifierDeclType	int32_t *		8170449	0					
ANR	8171938	Identifier	decoded		8170449	1					
ANR	8171939	AssignmentExpression	* decoded = s -> decoded [ chan ]		8170449	2		=			
ANR	8171940	Identifier	decoded		8170449	0					
ANR	8171941	ArrayIndexing	s -> decoded [ chan ]		8170449	1					
ANR	8171942	PtrMemberAccess	s -> decoded		8170449	0					
ANR	8171943	Identifier	s		8170449	0					
ANR	8171944	Identifier	decoded		8170449	1					
ANR	8171945	Identifier	chan		8170449	1					
ANR	8171946	ForStatement	for ( i = 0 ; i < s -> nb_samples ; i ++ )		8170449	2					
ANR	8171947	ForInit	i = 0 ;	435:17:8415:8420	8170449	0	True				
ANR	8171948	AssignmentExpression	i = 0		8170449	0		=			
ANR	8171949	Identifier	i		8170449	0					
ANR	8171950	PrimaryExpression	0		8170449	1					
ANR	8171951	Condition	i < s -> nb_samples	435:24:8422:8438	8170449	1	True				
ANR	8171952	RelationalExpression	i < s -> nb_samples		8170449	0		<			
ANR	8171953	Identifier	i		8170449	0					
ANR	8171954	PtrMemberAccess	s -> nb_samples		8170449	1					
ANR	8171955	Identifier	s		8170449	0					
ANR	8171956	Identifier	nb_samples		8170449	1					
ANR	8171957	PostIncDecOperationExpression	i ++	435:43:8441:8443	8170449	2	True				
ANR	8171958	Identifier	i		8170449	0					
ANR	8171959	IncDec	++		8170449	1					
ANR	8171960	ExpressionStatement	samples [ i ] = decoded [ i ]	437:16:8463:8486	8170449	3	True				
ANR	8171961	AssignmentExpression	samples [ i ] = decoded [ i ]		8170449	0		=			
ANR	8171962	ArrayIndexing	samples [ i ]		8170449	0					
ANR	8171963	Identifier	samples		8170449	0					
ANR	8171964	Identifier	i		8170449	1					
ANR	8171965	ArrayIndexing	decoded [ i ]		8170449	1					
ANR	8171966	Identifier	decoded		8170449	0					
ANR	8171967	Identifier	i		8170449	1					
ANR	8171968	BreakStatement	break ;	441:8:8508:8513	8170449	5	True				
ANR	8171969	Label	case AV_SAMPLE_FMT_S32P :	443:4:8520:8543	8170449	6	True				
ANR	8171970	Identifier	AV_SAMPLE_FMT_S32P		8170449	0					
ANR	8171971	ForStatement	for ( chan = 0 ; chan < avctx -> channels ; chan ++ )		8170449	7					
ANR	8171972	ForInit	chan = 0 ;	445:13:8559:8567	8170449	0	True				
ANR	8171973	AssignmentExpression	chan = 0		8170449	0		=			
ANR	8171974	Identifier	chan		8170449	0					
ANR	8171975	PrimaryExpression	0		8170449	1					
ANR	8171976	Condition	chan < avctx -> channels	445:23:8569:8590	8170449	1	True				
ANR	8171977	RelationalExpression	chan < avctx -> channels		8170449	0		<			
ANR	8171978	Identifier	chan		8170449	0					
ANR	8171979	PtrMemberAccess	avctx -> channels		8170449	1					
ANR	8171980	Identifier	avctx		8170449	0					
ANR	8171981	Identifier	channels		8170449	1					
ANR	8171982	PostIncDecOperationExpression	chan ++	445:47:8593:8598	8170449	2	True				
ANR	8171983	Identifier	chan		8170449	0					
ANR	8171984	IncDec	++		8170449	1					
ANR	8171985	CompoundStatement		443:12:8487:8543	8170449	3					
ANR	8171986	IdentifierDeclStatement	int32_t * samples = ( int32_t * ) frame -> extended_data [ chan ] ;	447:12:8616:8672	8170449	0	True				
ANR	8171987	IdentifierDecl	* samples = ( int32_t * ) frame -> extended_data [ chan ]		8170449	0					
ANR	8171988	IdentifierDeclType	int32_t *		8170449	0					
ANR	8171989	Identifier	samples		8170449	1					
ANR	8171990	AssignmentExpression	* samples = ( int32_t * ) frame -> extended_data [ chan ]		8170449	2		=			
ANR	8171991	Identifier	samples		8170449	0					
ANR	8171992	CastExpression	( int32_t * ) frame -> extended_data [ chan ]		8170449	1					
ANR	8171993	CastTarget	int32_t *		8170449	0					
ANR	8171994	ArrayIndexing	frame -> extended_data [ chan ]		8170449	1					
ANR	8171995	PtrMemberAccess	frame -> extended_data		8170449	0					
ANR	8171996	Identifier	frame		8170449	0					
ANR	8171997	Identifier	extended_data		8170449	1					
ANR	8171998	Identifier	chan		8170449	1					
ANR	8171999	ForStatement	for ( i = 0 ; i < s -> nb_samples ; i ++ )		8170449	1					
ANR	8172000	ForInit	i = 0 ;	449:17:8692:8697	8170449	0	True				
ANR	8172001	AssignmentExpression	i = 0		8170449	0		=			
ANR	8172002	Identifier	i		8170449	0					
ANR	8172003	PrimaryExpression	0		8170449	1					
ANR	8172004	Condition	i < s -> nb_samples	449:24:8699:8715	8170449	1	True				
ANR	8172005	RelationalExpression	i < s -> nb_samples		8170449	0		<			
ANR	8172006	Identifier	i		8170449	0					
ANR	8172007	PtrMemberAccess	s -> nb_samples		8170449	1					
ANR	8172008	Identifier	s		8170449	0					
ANR	8172009	Identifier	nb_samples		8170449	1					
ANR	8172010	PostIncDecOperationExpression	i ++	449:43:8718:8720	8170449	2	True				
ANR	8172011	Identifier	i		8170449	0					
ANR	8172012	IncDec	++		8170449	1					
ANR	8172013	ExpressionStatement	samples [ i ] <<= 8	451:16:8740:8756	8170449	3	True				
ANR	8172014	AssignmentExpression	samples [ i ] <<= 8		8170449	0		<<=			
ANR	8172015	ArrayIndexing	samples [ i ]		8170449	0					
ANR	8172016	Identifier	samples		8170449	0					
ANR	8172017	Identifier	i		8170449	1					
ANR	8172018	PrimaryExpression	8		8170449	1					
ANR	8172019	BreakStatement	break ;	455:8:8778:8783	8170449	8	True				
ANR	8172020	ExpressionStatement	* got_frame_ptr = 1	461:4:8799:8817	8170449	33	True				
ANR	8172021	AssignmentExpression	* got_frame_ptr = 1		8170449	0		=			
ANR	8172022	UnaryOperationExpression	* got_frame_ptr		8170449	0					
ANR	8172023	UnaryOperator	*		8170449	0					
ANR	8172024	Identifier	got_frame_ptr		8170449	1					
ANR	8172025	PrimaryExpression	1		8170449	1					
ANR	8172026	ReturnStatement	return pkt -> size ;	465:4:8826:8842	8170449	34	True				
ANR	8172027	PtrMemberAccess	pkt -> size		8170449	0					
ANR	8172028	Identifier	pkt		8170449	0					
ANR	8172029	Identifier	size		8170449	1					
ANR	8172030	ReturnType	static int		8170449	1					
ANR	8172031	Identifier	tak_decode_frame		8170449	2					
ANR	8172032	ParameterList	"AVCodecContext * avctx , void * data , int * got_frame_ptr , AVPacket * pkt"		8170449	3					
ANR	8172033	Parameter	AVCodecContext * avctx	1:28:28:48	8170449	0	True				
ANR	8172034	ParameterType	AVCodecContext *		8170449	0					
ANR	8172035	Identifier	avctx		8170449	1					
ANR	8172036	Parameter	void * data	1:51:51:60	8170449	1	True				
ANR	8172037	ParameterType	void *		8170449	0					
ANR	8172038	Identifier	data		8170449	1					
ANR	8172039	Parameter	int * got_frame_ptr	3:28:92:109	8170449	2	True				
ANR	8172040	ParameterType	int *		8170449	0					
ANR	8172041	Identifier	got_frame_ptr		8170449	1					
ANR	8172042	Parameter	AVPacket * pkt	3:48:112:124	8170449	3	True				
ANR	8172043	ParameterType	AVPacket *		8170449	0					
ANR	8172044	Identifier	pkt		8170449	1					
ANR	8172045	CFGEntryNode	ENTRY		8170449		True				
ANR	8172046	CFGExitNode	EXIT		8170449		True				
ANR	8172047	Symbol	ENOMEM		8170449						
ANR	8172048	Symbol	* s -> lpc_mode		8170449						
ANR	8172049	Symbol	s -> nb_samples		8170449						
ANR	8172050	Symbol	got_frame_ptr		8170449						
ANR	8172051	Symbol	* decoded		8170449						
ANR	8172052	Symbol	avctx -> bits_per_raw_sample		8170449						
ANR	8172053	Symbol	s -> mcdparams [ i ] . present		8170449						
ANR	8172054	Symbol	* chan		8170449						
ANR	8172055	Symbol	av_samples_get_buffer_size		8170449						
ANR	8172056	Symbol	set_bps_params		8170449						
ANR	8172057	Symbol	* s -> sample_shift		8170449						
ANR	8172058	Symbol	AV_LOG_DEBUG		8170449						
ANR	8172059	Symbol	* frame -> extended_data		8170449						
ANR	8172060	Symbol	avctx -> sample_fmt		8170449						
ANR	8172061	Symbol	AV_SAMPLE_FMT_S32P		8170449						
ANR	8172062	Symbol	* * * s		8170449						
ANR	8172063	Symbol	samples		8170449						
ANR	8172064	Symbol	& s -> gb		8170449						
ANR	8172065	Symbol	ff_tak_decode_frame_header		8170449						
ANR	8172066	Symbol	init_get_bits8		8170449						
ANR	8172067	Symbol	TAK_CODEC_MONO_STEREO		8170449						
ANR	8172068	Symbol	s -> decode_buffer		8170449						
ANR	8172069	Symbol	s -> subframe_len		8170449						
ANR	8172070	Symbol	& tframe		8170449						
ANR	8172071	Symbol	s -> lpc_mode		8170449						
ANR	8172072	Symbol	ff_tak_check_crc		8170449						
ANR	8172073	Symbol	* * s		8170449						
ANR	8172074	Symbol	AVERROR_PATCHWELCOME		8170449						
ANR	8172075	Symbol	s -> sample_shift		8170449						
ANR	8172076	Symbol	avctx		8170449						
ANR	8172077	Symbol	s -> decoded		8170449						
ANR	8172078	Symbol	frame -> nb_samples		8170449						
ANR	8172079	Symbol	AV_LOG_ERROR		8170449						
ANR	8172080	Symbol	ff_thread_get_buffer		8170449						
ANR	8172081	Symbol	ch_mask		8170449						
ANR	8172082	Symbol	* got_frame_ptr		8170449						
ANR	8172083	Symbol	i		8170449						
ANR	8172084	Symbol	avctx -> channel_layout		8170449						
ANR	8172085	Symbol	pkt -> data		8170449						
ANR	8172086	Symbol	avctx -> sample_rate		8170449						
ANR	8172087	Symbol	* s -> decoded		8170449						
ANR	8172088	Symbol	s		8170449						
ANR	8172089	Symbol	frame -> extended_data		8170449						
ANR	8172090	Symbol	* * s -> mcdparams		8170449						
ANR	8172091	Symbol	AVERROR_INVALIDDATA		8170449						
ANR	8172092	Symbol	chan		8170449						
ANR	8172093	Symbol	s -> ti . sample_rate		8170449						
ANR	8172094	Symbol	s -> ti . frame_samples		8170449						
ANR	8172095	Symbol	get_sbits		8170449						
ANR	8172096	Symbol	* pkt		8170449						
ANR	8172097	Symbol	data		8170449						
ANR	8172098	Symbol	TAK_CODEC_MULTICHANNEL		8170449						
ANR	8172099	Symbol	hsize		8170449						
ANR	8172100	Symbol	s -> ti . data_type		8170449						
ANR	8172101	Symbol	get_bits		8170449						
ANR	8172102	Symbol	TAK_MIN_FRAME_HEADER_BYTES		8170449						
ANR	8172103	Symbol	avctx -> channels		8170449						
ANR	8172104	Symbol	* * frame		8170449						
ANR	8172105	Symbol	* samples		8170449						
ANR	8172106	Symbol	mc_dmodes		8170449						
ANR	8172107	Symbol	ret		8170449						
ANR	8172108	Symbol	* * i		8170449						
ANR	8172109	Symbol	NULL		8170449						
ANR	8172110	Symbol	s -> ti . last_frame_samples		8170449						
ANR	8172111	Symbol	buf_size		8170449						
ANR	8172112	Symbol	get_bits1		8170449						
ANR	8172113	Symbol	* mc_dmodes		8170449						
ANR	8172114	Symbol	get_bits_count		8170449						
ANR	8172115	Symbol	av_samples_fill_arrays		8170449						
ANR	8172116	Symbol	s -> mcdparams [ i ] . chan1		8170449						
ANR	8172117	Symbol	s -> ti . bps		8170449						
ANR	8172118	Symbol	s -> mcdparams [ i ] . chan2		8170449						
ANR	8172119	Symbol	& s -> ti		8170449						
ANR	8172120	Symbol	* avctx		8170449						
ANR	8172121	Symbol	s -> mcdparams [ i ] . index		8170449						
ANR	8172122	Symbol	* s -> subframe_len		8170449						
ANR	8172123	Symbol	AV_EF_CRCCHECK		8170449						
ANR	8172124	Symbol	frame		8170449						
ANR	8172125	Symbol	* s -> mcdparams [ i ] . index		8170449						
ANR	8172126	Symbol	* frame		8170449						
ANR	8172127	Symbol	& s -> decode_buffer_size		8170449						
ANR	8172128	Symbol	decorrelate		8170449						
ANR	8172129	Symbol	AV_EF_EXPLODE		8170449						
ANR	8172130	Symbol	s -> ti		8170449						
ANR	8172131	Symbol	decode_channel		8170449						
ANR	8172132	Symbol	& s -> decode_buffer		8170449						
ANR	8172133	Symbol	get_bits_left		8170449						
ANR	8172134	Symbol	s -> ti . channels		8170449						
ANR	8172135	Symbol	* s -> mcdparams		8170449						
ANR	8172136	Symbol	s -> ti . codec		8170449						
ANR	8172137	Symbol	s -> dmode		8170449						
ANR	8172138	Symbol	pkt		8170449						
ANR	8172139	Symbol	decoded		8170449						
ANR	8172140	Symbol	AV_EF_COMPLIANT		8170449						
ANR	8172141	Symbol	gb		8170449						
ANR	8172142	Symbol	s -> ti . ch_layout		8170449						
ANR	8172143	Symbol	s -> nb_subframes		8170449						
ANR	8172144	Symbol	avctx -> priv_data		8170449						
ANR	8172145	Symbol	nbit		8170449						
ANR	8172146	Symbol	s -> mcdparams		8170449						
ANR	8172147	Symbol	pkt -> size		8170449						
ANR	8172148	Symbol	* i		8170449						
ANR	8172149	Symbol	AVERROR		8170449						
ANR	8172150	Symbol	avctx -> err_recognition		8170449						
ANR	8172151	Symbol	* s		8170449						
