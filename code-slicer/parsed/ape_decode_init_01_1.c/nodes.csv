command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	560566	File	/home/p4ultr4n/workplace/ReVeal/raw_code/ape_decode_init_01_1.c								
ANR	560567	Function	ape_decode_init	1:0:0:2160							
ANR	560568	FunctionDef	ape_decode_init (AVCodecContext * avctx)		560567	0					
ANR	560569	CompoundStatement		3:0:59:2160	560567	0					
ANR	560570	IdentifierDeclStatement	APEContext * s = avctx -> priv_data ;	5:4:66:98	560567	0	True				
ANR	560571	IdentifierDecl	* s = avctx -> priv_data		560567	0					
ANR	560572	IdentifierDeclType	APEContext *		560567	0					
ANR	560573	Identifier	s		560567	1					
ANR	560574	AssignmentExpression	* s = avctx -> priv_data		560567	2		=			
ANR	560575	Identifier	s		560567	0					
ANR	560576	PtrMemberAccess	avctx -> priv_data		560567	1					
ANR	560577	Identifier	avctx		560567	0					
ANR	560578	Identifier	priv_data		560567	1					
ANR	560579	IdentifierDeclStatement	int i ;	7:4:105:110	560567	1	True				
ANR	560580	IdentifierDecl	i		560567	0					
ANR	560581	IdentifierDeclType	int		560567	0					
ANR	560582	Identifier	i		560567	1					
ANR	560583	IfStatement	if ( avctx -> extradata_size != 6 )		560567	2					
ANR	560584	Condition	avctx -> extradata_size != 6	11:8:123:148	560567	0	True				
ANR	560585	EqualityExpression	avctx -> extradata_size != 6		560567	0		!=			
ANR	560586	PtrMemberAccess	avctx -> extradata_size		560567	0					
ANR	560587	Identifier	avctx		560567	0					
ANR	560588	Identifier	extradata_size		560567	1					
ANR	560589	PrimaryExpression	6		560567	1					
ANR	560590	CompoundStatement		9:36:91:91	560567	1					
ANR	560591	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Incorrect extradata\\n"" )"	13:8:162:214	560567	0	True				
ANR	560592	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Incorrect extradata\\n"" )"		560567	0					
ANR	560593	Callee	av_log		560567	0					
ANR	560594	Identifier	av_log		560567	0					
ANR	560595	ArgumentList	avctx		560567	1					
ANR	560596	Argument	avctx		560567	0					
ANR	560597	Identifier	avctx		560567	0					
ANR	560598	Argument	AV_LOG_ERROR		560567	1					
ANR	560599	Identifier	AV_LOG_ERROR		560567	0					
ANR	560600	Argument	"""Incorrect extradata\\n"""		560567	2					
ANR	560601	PrimaryExpression	"""Incorrect extradata\\n"""		560567	0					
ANR	560602	ReturnStatement	return AVERROR ( EINVAL ) ;	15:8:225:247	560567	1	True				
ANR	560603	CallExpression	AVERROR ( EINVAL )		560567	0					
ANR	560604	Callee	AVERROR		560567	0					
ANR	560605	Identifier	AVERROR		560567	0					
ANR	560606	ArgumentList	EINVAL		560567	1					
ANR	560607	Argument	EINVAL		560567	0					
ANR	560608	Identifier	EINVAL		560567	0					
ANR	560609	IfStatement	if ( avctx -> channels > 2 )		560567	3					
ANR	560610	Condition	avctx -> channels > 2	19:8:265:283	560567	0	True				
ANR	560611	RelationalExpression	avctx -> channels > 2		560567	0		>			
ANR	560612	PtrMemberAccess	avctx -> channels		560567	0					
ANR	560613	Identifier	avctx		560567	0					
ANR	560614	Identifier	channels		560567	1					
ANR	560615	PrimaryExpression	2		560567	1					
ANR	560616	CompoundStatement		17:29:226:226	560567	1					
ANR	560617	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Only mono and stereo is supported\\n"" )"	21:8:297:363	560567	0	True				
ANR	560618	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Only mono and stereo is supported\\n"" )"		560567	0					
ANR	560619	Callee	av_log		560567	0					
ANR	560620	Identifier	av_log		560567	0					
ANR	560621	ArgumentList	avctx		560567	1					
ANR	560622	Argument	avctx		560567	0					
ANR	560623	Identifier	avctx		560567	0					
ANR	560624	Argument	AV_LOG_ERROR		560567	1					
ANR	560625	Identifier	AV_LOG_ERROR		560567	0					
ANR	560626	Argument	"""Only mono and stereo is supported\\n"""		560567	2					
ANR	560627	PrimaryExpression	"""Only mono and stereo is supported\\n"""		560567	0					
ANR	560628	ReturnStatement	return AVERROR ( EINVAL ) ;	23:8:374:396	560567	1	True				
ANR	560629	CallExpression	AVERROR ( EINVAL )		560567	0					
ANR	560630	Callee	AVERROR		560567	0					
ANR	560631	Identifier	AVERROR		560567	0					
ANR	560632	ArgumentList	EINVAL		560567	1					
ANR	560633	Argument	EINVAL		560567	0					
ANR	560634	Identifier	EINVAL		560567	0					
ANR	560635	ExpressionStatement	s -> bps = avctx -> bits_per_coded_sample	27:4:410:447	560567	4	True				
ANR	560636	AssignmentExpression	s -> bps = avctx -> bits_per_coded_sample		560567	0		=			
ANR	560637	PtrMemberAccess	s -> bps		560567	0					
ANR	560638	Identifier	s		560567	0					
ANR	560639	Identifier	bps		560567	1					
ANR	560640	PtrMemberAccess	avctx -> bits_per_coded_sample		560567	1					
ANR	560641	Identifier	avctx		560567	0					
ANR	560642	Identifier	bits_per_coded_sample		560567	1					
ANR	560643	SwitchStatement	switch ( s -> bps )		560567	5					
ANR	560644	Condition	s -> bps	29:12:462:467	560567	0	True				
ANR	560645	PtrMemberAccess	s -> bps		560567	0					
ANR	560646	Identifier	s		560567	0					
ANR	560647	Identifier	bps		560567	1					
ANR	560648	CompoundStatement		27:20:410:410	560567	1					
ANR	560649	Label	case 8 :	31:4:477:483	560567	0	True				
ANR	560650	ExpressionStatement	avctx -> sample_fmt = AV_SAMPLE_FMT_U8	33:8:494:530	560567	1	True				
ANR	560651	AssignmentExpression	avctx -> sample_fmt = AV_SAMPLE_FMT_U8		560567	0		=			
ANR	560652	PtrMemberAccess	avctx -> sample_fmt		560567	0					
ANR	560653	Identifier	avctx		560567	0					
ANR	560654	Identifier	sample_fmt		560567	1					
ANR	560655	Identifier	AV_SAMPLE_FMT_U8		560567	1					
ANR	560656	BreakStatement	break ;	35:8:541:546	560567	2	True				
ANR	560657	Label	case 16 :	37:4:553:560	560567	3	True				
ANR	560658	ExpressionStatement	avctx -> sample_fmt = AV_SAMPLE_FMT_S16	39:8:571:608	560567	4	True				
ANR	560659	AssignmentExpression	avctx -> sample_fmt = AV_SAMPLE_FMT_S16		560567	0		=			
ANR	560660	PtrMemberAccess	avctx -> sample_fmt		560567	0					
ANR	560661	Identifier	avctx		560567	0					
ANR	560662	Identifier	sample_fmt		560567	1					
ANR	560663	Identifier	AV_SAMPLE_FMT_S16		560567	1					
ANR	560664	BreakStatement	break ;	41:8:619:624	560567	5	True				
ANR	560665	Label	case 24 :	43:4:631:638	560567	6	True				
ANR	560666	ExpressionStatement	avctx -> sample_fmt = AV_SAMPLE_FMT_S32	45:8:649:686	560567	7	True				
ANR	560667	AssignmentExpression	avctx -> sample_fmt = AV_SAMPLE_FMT_S32		560567	0		=			
ANR	560668	PtrMemberAccess	avctx -> sample_fmt		560567	0					
ANR	560669	Identifier	avctx		560567	0					
ANR	560670	Identifier	sample_fmt		560567	1					
ANR	560671	Identifier	AV_SAMPLE_FMT_S32		560567	1					
ANR	560672	BreakStatement	break ;	47:8:697:702	560567	8	True				
ANR	560673	Label	default :	49:4:709:716	560567	9	True				
ANR	560674	Identifier	default		560567	0					
ANR	560675	ExpressionStatement	"av_log_ask_for_sample ( avctx , ""Unsupported bits per coded sample %d\\n"" , s -> bps )"	51:8:727:836	560567	10	True				
ANR	560676	CallExpression	"av_log_ask_for_sample ( avctx , ""Unsupported bits per coded sample %d\\n"" , s -> bps )"		560567	0					
ANR	560677	Callee	av_log_ask_for_sample		560567	0					
ANR	560678	Identifier	av_log_ask_for_sample		560567	0					
ANR	560679	ArgumentList	avctx		560567	1					
ANR	560680	Argument	avctx		560567	0					
ANR	560681	Identifier	avctx		560567	0					
ANR	560682	Argument	"""Unsupported bits per coded sample %d\\n"""		560567	1					
ANR	560683	PrimaryExpression	"""Unsupported bits per coded sample %d\\n"""		560567	0					
ANR	560684	Argument	s -> bps		560567	2					
ANR	560685	PtrMemberAccess	s -> bps		560567	0					
ANR	560686	Identifier	s		560567	0					
ANR	560687	Identifier	bps		560567	1					
ANR	560688	ReturnStatement	return AVERROR_PATCHWELCOME ;	55:8:847:874	560567	11	True				
ANR	560689	Identifier	AVERROR_PATCHWELCOME		560567	0					
ANR	560690	ExpressionStatement	s -> avctx = avctx	59:4:888:916	560567	6	True				
ANR	560691	AssignmentExpression	s -> avctx = avctx		560567	0		=			
ANR	560692	PtrMemberAccess	s -> avctx		560567	0					
ANR	560693	Identifier	s		560567	0					
ANR	560694	Identifier	avctx		560567	1					
ANR	560695	Identifier	avctx		560567	1					
ANR	560696	ExpressionStatement	s -> channels = avctx -> channels	61:4:923:961	560567	7	True				
ANR	560697	AssignmentExpression	s -> channels = avctx -> channels		560567	0		=			
ANR	560698	PtrMemberAccess	s -> channels		560567	0					
ANR	560699	Identifier	s		560567	0					
ANR	560700	Identifier	channels		560567	1					
ANR	560701	PtrMemberAccess	avctx -> channels		560567	1					
ANR	560702	Identifier	avctx		560567	0					
ANR	560703	Identifier	channels		560567	1					
ANR	560704	ExpressionStatement	s -> fileversion = AV_RL16 ( avctx -> extradata )	63:4:968:1016	560567	8	True				
ANR	560705	AssignmentExpression	s -> fileversion = AV_RL16 ( avctx -> extradata )		560567	0		=			
ANR	560706	PtrMemberAccess	s -> fileversion		560567	0					
ANR	560707	Identifier	s		560567	0					
ANR	560708	Identifier	fileversion		560567	1					
ANR	560709	CallExpression	AV_RL16 ( avctx -> extradata )		560567	1					
ANR	560710	Callee	AV_RL16		560567	0					
ANR	560711	Identifier	AV_RL16		560567	0					
ANR	560712	ArgumentList	avctx -> extradata		560567	1					
ANR	560713	Argument	avctx -> extradata		560567	0					
ANR	560714	PtrMemberAccess	avctx -> extradata		560567	0					
ANR	560715	Identifier	avctx		560567	0					
ANR	560716	Identifier	extradata		560567	1					
ANR	560717	ExpressionStatement	s -> compression_level = AV_RL16 ( avctx -> extradata + 2 )	65:4:1023:1075	560567	9	True				
ANR	560718	AssignmentExpression	s -> compression_level = AV_RL16 ( avctx -> extradata + 2 )		560567	0		=			
ANR	560719	PtrMemberAccess	s -> compression_level		560567	0					
ANR	560720	Identifier	s		560567	0					
ANR	560721	Identifier	compression_level		560567	1					
ANR	560722	CallExpression	AV_RL16 ( avctx -> extradata + 2 )		560567	1					
ANR	560723	Callee	AV_RL16		560567	0					
ANR	560724	Identifier	AV_RL16		560567	0					
ANR	560725	ArgumentList	avctx -> extradata + 2		560567	1					
ANR	560726	Argument	avctx -> extradata + 2		560567	0					
ANR	560727	AdditiveExpression	avctx -> extradata + 2		560567	0		+			
ANR	560728	PtrMemberAccess	avctx -> extradata		560567	0					
ANR	560729	Identifier	avctx		560567	0					
ANR	560730	Identifier	extradata		560567	1					
ANR	560731	PrimaryExpression	2		560567	1					
ANR	560732	ExpressionStatement	s -> flags = AV_RL16 ( avctx -> extradata + 4 )	67:4:1082:1134	560567	10	True				
ANR	560733	AssignmentExpression	s -> flags = AV_RL16 ( avctx -> extradata + 4 )		560567	0		=			
ANR	560734	PtrMemberAccess	s -> flags		560567	0					
ANR	560735	Identifier	s		560567	0					
ANR	560736	Identifier	flags		560567	1					
ANR	560737	CallExpression	AV_RL16 ( avctx -> extradata + 4 )		560567	1					
ANR	560738	Callee	AV_RL16		560567	0					
ANR	560739	Identifier	AV_RL16		560567	0					
ANR	560740	ArgumentList	avctx -> extradata + 4		560567	1					
ANR	560741	Argument	avctx -> extradata + 4		560567	0					
ANR	560742	AdditiveExpression	avctx -> extradata + 4		560567	0		+			
ANR	560743	PtrMemberAccess	avctx -> extradata		560567	0					
ANR	560744	Identifier	avctx		560567	0					
ANR	560745	Identifier	extradata		560567	1					
ANR	560746	PrimaryExpression	4		560567	1					
ANR	560747	ExpressionStatement	"av_log ( avctx , AV_LOG_DEBUG , ""Compression Level: %d - Flags: %d\\n"" , s -> compression_level , s -> flags )"	71:4:1143:1253	560567	11	True				
ANR	560748	CallExpression	"av_log ( avctx , AV_LOG_DEBUG , ""Compression Level: %d - Flags: %d\\n"" , s -> compression_level , s -> flags )"		560567	0					
ANR	560749	Callee	av_log		560567	0					
ANR	560750	Identifier	av_log		560567	0					
ANR	560751	ArgumentList	avctx		560567	1					
ANR	560752	Argument	avctx		560567	0					
ANR	560753	Identifier	avctx		560567	0					
ANR	560754	Argument	AV_LOG_DEBUG		560567	1					
ANR	560755	Identifier	AV_LOG_DEBUG		560567	0					
ANR	560756	Argument	"""Compression Level: %d - Flags: %d\\n"""		560567	2					
ANR	560757	PrimaryExpression	"""Compression Level: %d - Flags: %d\\n"""		560567	0					
ANR	560758	Argument	s -> compression_level		560567	3					
ANR	560759	PtrMemberAccess	s -> compression_level		560567	0					
ANR	560760	Identifier	s		560567	0					
ANR	560761	Identifier	compression_level		560567	1					
ANR	560762	Argument	s -> flags		560567	4					
ANR	560763	PtrMemberAccess	s -> flags		560567	0					
ANR	560764	Identifier	s		560567	0					
ANR	560765	Identifier	flags		560567	1					
ANR	560766	IfStatement	if ( s -> compression_level % 1000 || s -> compression_level > COMPRESSION_LEVEL_INSANE )		560567	12					
ANR	560767	Condition	s -> compression_level % 1000 || s -> compression_level > COMPRESSION_LEVEL_INSANE	75:8:1264:1341	560567	0	True				
ANR	560768	OrExpression	s -> compression_level % 1000 || s -> compression_level > COMPRESSION_LEVEL_INSANE		560567	0		||			
ANR	560769	MultiplicativeExpression	s -> compression_level % 1000		560567	0		%			
ANR	560770	PtrMemberAccess	s -> compression_level		560567	0					
ANR	560771	Identifier	s		560567	0					
ANR	560772	Identifier	compression_level		560567	1					
ANR	560773	PrimaryExpression	1000		560567	1					
ANR	560774	RelationalExpression	s -> compression_level > COMPRESSION_LEVEL_INSANE		560567	1		>			
ANR	560775	PtrMemberAccess	s -> compression_level		560567	0					
ANR	560776	Identifier	s		560567	0					
ANR	560777	Identifier	compression_level		560567	1					
ANR	560778	Identifier	COMPRESSION_LEVEL_INSANE		560567	1					
ANR	560779	CompoundStatement		73:88:1284:1284	560567	1					
ANR	560780	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Incorrect compression level %d\\n"" , s -> compression_level )"	77:8:1355:1456	560567	0	True				
ANR	560781	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Incorrect compression level %d\\n"" , s -> compression_level )"		560567	0					
ANR	560782	Callee	av_log		560567	0					
ANR	560783	Identifier	av_log		560567	0					
ANR	560784	ArgumentList	avctx		560567	1					
ANR	560785	Argument	avctx		560567	0					
ANR	560786	Identifier	avctx		560567	0					
ANR	560787	Argument	AV_LOG_ERROR		560567	1					
ANR	560788	Identifier	AV_LOG_ERROR		560567	0					
ANR	560789	Argument	"""Incorrect compression level %d\\n"""		560567	2					
ANR	560790	PrimaryExpression	"""Incorrect compression level %d\\n"""		560567	0					
ANR	560791	Argument	s -> compression_level		560567	3					
ANR	560792	PtrMemberAccess	s -> compression_level		560567	0					
ANR	560793	Identifier	s		560567	0					
ANR	560794	Identifier	compression_level		560567	1					
ANR	560795	ReturnStatement	return AVERROR_INVALIDDATA ;	81:8:1467:1493	560567	1	True				
ANR	560796	Identifier	AVERROR_INVALIDDATA		560567	0					
ANR	560797	ExpressionStatement	s -> fset = s -> compression_level / 1000 - 1	85:4:1507:1548	560567	13	True				
ANR	560798	AssignmentExpression	s -> fset = s -> compression_level / 1000 - 1		560567	0		=			
ANR	560799	PtrMemberAccess	s -> fset		560567	0					
ANR	560800	Identifier	s		560567	0					
ANR	560801	Identifier	fset		560567	1					
ANR	560802	AdditiveExpression	s -> compression_level / 1000 - 1		560567	1		-			
ANR	560803	MultiplicativeExpression	s -> compression_level / 1000		560567	0		/			
ANR	560804	PtrMemberAccess	s -> compression_level		560567	0					
ANR	560805	Identifier	s		560567	0					
ANR	560806	Identifier	compression_level		560567	1					
ANR	560807	PrimaryExpression	1000		560567	1					
ANR	560808	PrimaryExpression	1		560567	1					
ANR	560809	ForStatement	for ( i = 0 ; i < APE_FILTER_LEVELS ; i ++ )		560567	14					
ANR	560810	ForInit	i = 0 ;	87:9:1560:1565	560567	0	True				
ANR	560811	AssignmentExpression	i = 0		560567	0		=			
ANR	560812	Identifier	i		560567	0					
ANR	560813	PrimaryExpression	0		560567	1					
ANR	560814	Condition	i < APE_FILTER_LEVELS	87:16:1567:1587	560567	1	True				
ANR	560815	RelationalExpression	i < APE_FILTER_LEVELS		560567	0		<			
ANR	560816	Identifier	i		560567	0					
ANR	560817	Identifier	APE_FILTER_LEVELS		560567	1					
ANR	560818	PostIncDecOperationExpression	i ++	87:39:1590:1592	560567	2	True				
ANR	560819	Identifier	i		560567	0					
ANR	560820	IncDec	++		560567	1					
ANR	560821	CompoundStatement		85:44:1535:1535	560567	3					
ANR	560822	IfStatement	if ( ! ape_filter_orders [ s -> fset ] [ i ] )		560567	0					
ANR	560823	Condition	! ape_filter_orders [ s -> fset ] [ i ]	89:12:1610:1639	560567	0	True				
ANR	560824	UnaryOperationExpression	! ape_filter_orders [ s -> fset ] [ i ]		560567	0					
ANR	560825	UnaryOperator	!		560567	0					
ANR	560826	ArrayIndexing	ape_filter_orders [ s -> fset ] [ i ]		560567	1					
ANR	560827	ArrayIndexing	ape_filter_orders [ s -> fset ]		560567	0					
ANR	560828	Identifier	ape_filter_orders		560567	0					
ANR	560829	PtrMemberAccess	s -> fset		560567	1					
ANR	560830	Identifier	s		560567	0					
ANR	560831	Identifier	fset		560567	1					
ANR	560832	Identifier	i		560567	1					
ANR	560833	BreakStatement	break ;	91:12:1655:1660	560567	1	True				
ANR	560834	ExpressionStatement	"FF_ALLOC_OR_GOTO ( avctx , s -> filterbuf [ i ] , ( ape_filter_orders [ s -> fset ] [ i ] * 3 + HISTORY_SIZE ) * 4 , filter_alloc_fail )"	93:8:1671:1838	560567	1	True				
ANR	560835	CallExpression	"FF_ALLOC_OR_GOTO ( avctx , s -> filterbuf [ i ] , ( ape_filter_orders [ s -> fset ] [ i ] * 3 + HISTORY_SIZE ) * 4 , filter_alloc_fail )"		560567	0					
ANR	560836	Callee	FF_ALLOC_OR_GOTO		560567	0					
ANR	560837	Identifier	FF_ALLOC_OR_GOTO		560567	0					
ANR	560838	ArgumentList	avctx		560567	1					
ANR	560839	Argument	avctx		560567	0					
ANR	560840	Identifier	avctx		560567	0					
ANR	560841	Argument	s -> filterbuf [ i ]		560567	1					
ANR	560842	ArrayIndexing	s -> filterbuf [ i ]		560567	0					
ANR	560843	PtrMemberAccess	s -> filterbuf		560567	0					
ANR	560844	Identifier	s		560567	0					
ANR	560845	Identifier	filterbuf		560567	1					
ANR	560846	Identifier	i		560567	1					
ANR	560847	Argument	( ape_filter_orders [ s -> fset ] [ i ] * 3 + HISTORY_SIZE ) * 4		560567	2					
ANR	560848	MultiplicativeExpression	( ape_filter_orders [ s -> fset ] [ i ] * 3 + HISTORY_SIZE ) * 4		560567	0		*			
ANR	560849	AdditiveExpression	ape_filter_orders [ s -> fset ] [ i ] * 3 + HISTORY_SIZE		560567	0		+			
ANR	560850	MultiplicativeExpression	ape_filter_orders [ s -> fset ] [ i ] * 3		560567	0		*			
ANR	560851	ArrayIndexing	ape_filter_orders [ s -> fset ] [ i ]		560567	0					
ANR	560852	ArrayIndexing	ape_filter_orders [ s -> fset ]		560567	0					
ANR	560853	Identifier	ape_filter_orders		560567	0					
ANR	560854	PtrMemberAccess	s -> fset		560567	1					
ANR	560855	Identifier	s		560567	0					
ANR	560856	Identifier	fset		560567	1					
ANR	560857	Identifier	i		560567	1					
ANR	560858	PrimaryExpression	3		560567	1					
ANR	560859	Identifier	HISTORY_SIZE		560567	1					
ANR	560860	PrimaryExpression	4		560567	1					
ANR	560861	Argument	filter_alloc_fail		560567	3					
ANR	560862	Identifier	filter_alloc_fail		560567	0					
ANR	560863	ExpressionStatement	"ff_dsputil_init ( & s -> dsp , avctx )"	103:4:1854:1885	560567	15	True				
ANR	560864	CallExpression	"ff_dsputil_init ( & s -> dsp , avctx )"		560567	0					
ANR	560865	Callee	ff_dsputil_init		560567	0					
ANR	560866	Identifier	ff_dsputil_init		560567	0					
ANR	560867	ArgumentList	& s -> dsp		560567	1					
ANR	560868	Argument	& s -> dsp		560567	0					
ANR	560869	UnaryOperationExpression	& s -> dsp		560567	0					
ANR	560870	UnaryOperator	&		560567	0					
ANR	560871	PtrMemberAccess	s -> dsp		560567	1					
ANR	560872	Identifier	s		560567	0					
ANR	560873	Identifier	dsp		560567	1					
ANR	560874	Argument	avctx		560567	1					
ANR	560875	Identifier	avctx		560567	0					
ANR	560876	ExpressionStatement	avctx -> channel_layout = ( avctx -> channels == 2 ) ? AV_CH_LAYOUT_STEREO : AV_CH_LAYOUT_MONO	105:4:1892:1978	560567	16	True				
ANR	560877	AssignmentExpression	avctx -> channel_layout = ( avctx -> channels == 2 ) ? AV_CH_LAYOUT_STEREO : AV_CH_LAYOUT_MONO		560567	0		=			
ANR	560878	PtrMemberAccess	avctx -> channel_layout		560567	0					
ANR	560879	Identifier	avctx		560567	0					
ANR	560880	Identifier	channel_layout		560567	1					
ANR	560881	ConditionalExpression	( avctx -> channels == 2 ) ? AV_CH_LAYOUT_STEREO : AV_CH_LAYOUT_MONO		560567	1					
ANR	560882	Condition	avctx -> channels == 2		560567	0					
ANR	560883	EqualityExpression	avctx -> channels == 2		560567	0		==			
ANR	560884	PtrMemberAccess	avctx -> channels		560567	0					
ANR	560885	Identifier	avctx		560567	0					
ANR	560886	Identifier	channels		560567	1					
ANR	560887	PrimaryExpression	2		560567	1					
ANR	560888	Identifier	AV_CH_LAYOUT_STEREO		560567	1					
ANR	560889	Identifier	AV_CH_LAYOUT_MONO		560567	2					
ANR	560890	ExpressionStatement	avcodec_get_frame_defaults ( & s -> frame )	109:4:1987:2024	560567	17	True				
ANR	560891	CallExpression	avcodec_get_frame_defaults ( & s -> frame )		560567	0					
ANR	560892	Callee	avcodec_get_frame_defaults		560567	0					
ANR	560893	Identifier	avcodec_get_frame_defaults		560567	0					
ANR	560894	ArgumentList	& s -> frame		560567	1					
ANR	560895	Argument	& s -> frame		560567	0					
ANR	560896	UnaryOperationExpression	& s -> frame		560567	0					
ANR	560897	UnaryOperator	&		560567	0					
ANR	560898	PtrMemberAccess	s -> frame		560567	1					
ANR	560899	Identifier	s		560567	0					
ANR	560900	Identifier	frame		560567	1					
ANR	560901	ExpressionStatement	avctx -> coded_frame = & s -> frame	111:4:2031:2061	560567	18	True				
ANR	560902	AssignmentExpression	avctx -> coded_frame = & s -> frame		560567	0		=			
ANR	560903	PtrMemberAccess	avctx -> coded_frame		560567	0					
ANR	560904	Identifier	avctx		560567	0					
ANR	560905	Identifier	coded_frame		560567	1					
ANR	560906	UnaryOperationExpression	& s -> frame		560567	1					
ANR	560907	UnaryOperator	&		560567	0					
ANR	560908	PtrMemberAccess	s -> frame		560567	1					
ANR	560909	Identifier	s		560567	0					
ANR	560910	Identifier	frame		560567	1					
ANR	560911	ReturnStatement	return 0 ;	115:4:2070:2078	560567	19	True				
ANR	560912	PrimaryExpression	0		560567	0					
ANR	560913	Label	filter_alloc_fail :	117:0:2081:2098	560567	20	True				
ANR	560914	Identifier	filter_alloc_fail		560567	0					
ANR	560915	ExpressionStatement	ape_decode_close ( avctx )	119:4:2105:2128	560567	21	True				
ANR	560916	CallExpression	ape_decode_close ( avctx )		560567	0					
ANR	560917	Callee	ape_decode_close		560567	0					
ANR	560918	Identifier	ape_decode_close		560567	0					
ANR	560919	ArgumentList	avctx		560567	1					
ANR	560920	Argument	avctx		560567	0					
ANR	560921	Identifier	avctx		560567	0					
ANR	560922	ReturnStatement	return AVERROR ( ENOMEM ) ;	121:4:2135:2157	560567	22	True				
ANR	560923	CallExpression	AVERROR ( ENOMEM )		560567	0					
ANR	560924	Callee	AVERROR		560567	0					
ANR	560925	Identifier	AVERROR		560567	0					
ANR	560926	ArgumentList	ENOMEM		560567	1					
ANR	560927	Argument	ENOMEM		560567	0					
ANR	560928	Identifier	ENOMEM		560567	0					
ANR	560929	ReturnType	static av_cold int		560567	1					
ANR	560930	Identifier	ape_decode_init		560567	2					
ANR	560931	ParameterList	AVCodecContext * avctx		560567	3					
ANR	560932	Parameter	AVCodecContext * avctx	1:35:35:55	560567	0	True				
ANR	560933	ParameterType	AVCodecContext *		560567	0					
ANR	560934	Identifier	avctx		560567	1					
ANR	560935	CFGEntryNode	ENTRY		560567		True				
ANR	560936	CFGExitNode	EXIT		560567		True				
ANR	560937	Symbol	ENOMEM		560567						
ANR	560938	Symbol	HISTORY_SIZE		560567						
ANR	560939	Symbol	s -> fset		560567						
ANR	560940	Symbol	AV_CH_LAYOUT_STEREO		560567						
ANR	560941	Symbol	* ape_filter_orders		560567						
ANR	560942	Symbol	AV_SAMPLE_FMT_S16		560567						
ANR	560943	Symbol	avctx -> channels		560567						
ANR	560944	Symbol	filter_alloc_fail		560567						
ANR	560945	Symbol	AV_CH_LAYOUT_MONO		560567						
ANR	560946	Symbol	COMPRESSION_LEVEL_INSANE		560567						
ANR	560947	Symbol	s -> filterbuf		560567						
ANR	560948	Symbol	AV_LOG_DEBUG		560567						
ANR	560949	Symbol	avctx -> sample_fmt		560567						
ANR	560950	Symbol	s -> flags		560567						
ANR	560951	Symbol	* * * s		560567						
ANR	560952	Symbol	* s -> filterbuf		560567						
ANR	560953	Symbol	* * s -> fset		560567						
ANR	560954	Symbol	* avctx		560567						
ANR	560955	Symbol	s -> avctx		560567						
ANR	560956	Symbol	AV_RL16		560567						
ANR	560957	Symbol	& s -> frame		560567						
ANR	560958	Symbol	avctx -> bits_per_coded_sample		560567						
ANR	560959	Symbol	AV_SAMPLE_FMT_S32		560567						
ANR	560960	Symbol	APE_FILTER_LEVELS		560567						
ANR	560961	Symbol	s -> channels		560567						
ANR	560962	Symbol	* * ape_filter_orders		560567						
ANR	560963	Symbol	ape_filter_orders		560567						
ANR	560964	Symbol	avctx -> coded_frame		560567						
ANR	560965	Symbol	s -> compression_level		560567						
ANR	560966	Symbol	* * s		560567						
ANR	560967	Symbol	AVERROR_PATCHWELCOME		560567						
ANR	560968	Symbol	avctx		560567						
ANR	560969	Symbol	avctx -> extradata		560567						
ANR	560970	Symbol	AV_LOG_ERROR		560567						
ANR	560971	Symbol	* s -> fset		560567						
ANR	560972	Symbol	avctx -> extradata_size		560567						
ANR	560973	Symbol	i		560567						
ANR	560974	Symbol	avctx -> channel_layout		560567						
ANR	560975	Symbol	AV_SAMPLE_FMT_U8		560567						
ANR	560976	Symbol	avctx -> priv_data		560567						
ANR	560977	Symbol	EINVAL		560567						
ANR	560978	Symbol	s -> bps		560567						
ANR	560979	Symbol	s		560567						
ANR	560980	Symbol	s -> fileversion		560567						
ANR	560981	Symbol	* i		560567						
ANR	560982	Symbol	AVERROR_INVALIDDATA		560567						
ANR	560983	Symbol	AVERROR		560567						
ANR	560984	Symbol	* s		560567						
ANR	560985	Symbol	& s -> dsp		560567						
