command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1676539	File	/home/p4ultr4n/workplace/ReVeal/raw_code/decode_01_1.c								
ANR	1676540	Function	decode	1:0:0:2752							
ANR	1676541	FunctionDef	"decode (MimicContext * ctx , int quality , int num_coeffs , int is_iframe)"		1676540	0					
ANR	1676542	CompoundStatement		5:0:101:2752	1676540	0					
ANR	1676543	IdentifierDeclStatement	"int y , x , plane , cur_row = 0 ;"	7:4:108:136	1676540	0	True				
ANR	1676544	IdentifierDecl	y		1676540	0					
ANR	1676545	IdentifierDeclType	int		1676540	0					
ANR	1676546	Identifier	y		1676540	1					
ANR	1676547	IdentifierDecl	x		1676540	1					
ANR	1676548	IdentifierDeclType	int		1676540	0					
ANR	1676549	Identifier	x		1676540	1					
ANR	1676550	IdentifierDecl	plane		1676540	2					
ANR	1676551	IdentifierDeclType	int		1676540	0					
ANR	1676552	Identifier	plane		1676540	1					
ANR	1676553	IdentifierDecl	cur_row = 0		1676540	3					
ANR	1676554	IdentifierDeclType	int		1676540	0					
ANR	1676555	Identifier	cur_row		1676540	1					
ANR	1676556	AssignmentExpression	cur_row = 0		1676540	2		=			
ANR	1676557	Identifier	cur_row		1676540	0					
ANR	1676558	PrimaryExpression	0		1676540	1					
ANR	1676559	ForStatement	for ( plane = 0 ; plane < 3 ; plane ++ )		1676540	1					
ANR	1676560	ForInit	plane = 0 ;	11:8:149:158	1676540	0	True				
ANR	1676561	AssignmentExpression	plane = 0		1676540	0		=			
ANR	1676562	Identifier	plane		1676540	0					
ANR	1676563	PrimaryExpression	0		1676540	1					
ANR	1676564	Condition	plane < 3	11:19:160:168	1676540	1	True				
ANR	1676565	RelationalExpression	plane < 3		1676540	0		<			
ANR	1676566	Identifier	plane		1676540	0					
ANR	1676567	PrimaryExpression	3		1676540	1					
ANR	1676568	PostIncDecOperationExpression	plane ++	11:30:171:177	1676540	2	True				
ANR	1676569	Identifier	plane		1676540	0					
ANR	1676570	IncDec	++		1676540	1					
ANR	1676571	CompoundStatement		17:8:367:434	1676540	3					
ANR	1676572	IdentifierDeclStatement	const int is_chroma = ! ! plane ;	13:8:191:220	1676540	0	True				
ANR	1676573	IdentifierDecl	is_chroma = ! ! plane		1676540	0					
ANR	1676574	IdentifierDeclType	const int		1676540	0					
ANR	1676575	Identifier	is_chroma		1676540	1					
ANR	1676576	AssignmentExpression	is_chroma = ! ! plane		1676540	2		=			
ANR	1676577	Identifier	is_chroma		1676540	0					
ANR	1676578	UnaryOperationExpression	! ! plane		1676540	1					
ANR	1676579	UnaryOperator	!		1676540	0					
ANR	1676580	UnaryOperationExpression	! plane		1676540	1					
ANR	1676581	UnaryOperator	!		1676540	0					
ANR	1676582	Identifier	plane		1676540	1					
ANR	1676583	IdentifierDeclStatement	"const int qscale = av_clip ( 10000 - quality , is_chroma ? 1000 : 2000 , 10000 ) << 2 ;"	15:8:231:301	1676540	1	True				
ANR	1676584	IdentifierDecl	"qscale = av_clip ( 10000 - quality , is_chroma ? 1000 : 2000 , 10000 ) << 2"		1676540	0					
ANR	1676585	IdentifierDeclType	const int		1676540	0					
ANR	1676586	Identifier	qscale		1676540	1					
ANR	1676587	AssignmentExpression	"qscale = av_clip ( 10000 - quality , is_chroma ? 1000 : 2000 , 10000 ) << 2"		1676540	2		=			
ANR	1676588	Identifier	qscale		1676540	0					
ANR	1676589	ShiftExpression	"av_clip ( 10000 - quality , is_chroma ? 1000 : 2000 , 10000 ) << 2"		1676540	1		<<			
ANR	1676590	CallExpression	"av_clip ( 10000 - quality , is_chroma ? 1000 : 2000 , 10000 )"		1676540	0					
ANR	1676591	Callee	av_clip		1676540	0					
ANR	1676592	Identifier	av_clip		1676540	0					
ANR	1676593	ArgumentList	10000 - quality		1676540	1					
ANR	1676594	Argument	10000 - quality		1676540	0					
ANR	1676595	AdditiveExpression	10000 - quality		1676540	0		-			
ANR	1676596	PrimaryExpression	10000		1676540	0					
ANR	1676597	Identifier	quality		1676540	1					
ANR	1676598	Argument	is_chroma ? 1000 : 2000		1676540	1					
ANR	1676599	ConditionalExpression	is_chroma ? 1000 : 2000		1676540	0					
ANR	1676600	Condition	is_chroma		1676540	0					
ANR	1676601	Identifier	is_chroma		1676540	0					
ANR	1676602	PrimaryExpression	1000		1676540	1					
ANR	1676603	PrimaryExpression	2000		1676540	2					
ANR	1676604	Argument	10000		1676540	2					
ANR	1676605	PrimaryExpression	10000		1676540	0					
ANR	1676606	PrimaryExpression	2		1676540	1					
ANR	1676607	IdentifierDeclStatement	const int stride = ctx -> flipped_ptrs [ ctx -> cur_index ] . linesize [ plane ] ;	17:8:312:380	1676540	2	True				
ANR	1676608	IdentifierDecl	stride = ctx -> flipped_ptrs [ ctx -> cur_index ] . linesize [ plane ]		1676540	0					
ANR	1676609	IdentifierDeclType	const int		1676540	0					
ANR	1676610	Identifier	stride		1676540	1					
ANR	1676611	AssignmentExpression	stride = ctx -> flipped_ptrs [ ctx -> cur_index ] . linesize [ plane ]		1676540	2		=			
ANR	1676612	Identifier	stride		1676540	0					
ANR	1676613	ArrayIndexing	ctx -> flipped_ptrs [ ctx -> cur_index ] . linesize [ plane ]		1676540	1					
ANR	1676614	MemberAccess	ctx -> flipped_ptrs [ ctx -> cur_index ] . linesize		1676540	0					
ANR	1676615	ArrayIndexing	ctx -> flipped_ptrs [ ctx -> cur_index ]		1676540	0					
ANR	1676616	PtrMemberAccess	ctx -> flipped_ptrs		1676540	0					
ANR	1676617	Identifier	ctx		1676540	0					
ANR	1676618	Identifier	flipped_ptrs		1676540	1					
ANR	1676619	PtrMemberAccess	ctx -> cur_index		1676540	1					
ANR	1676620	Identifier	ctx		1676540	0					
ANR	1676621	Identifier	cur_index		1676540	1					
ANR	1676622	Identifier	linesize		1676540	1					
ANR	1676623	Identifier	plane		1676540	1					
ANR	1676624	IdentifierDeclStatement	const uint8_t * src = ctx -> flipped_ptrs [ ctx -> prev_index ] . data [ plane ] ;	19:8:391:458	1676540	3	True				
ANR	1676625	IdentifierDecl	* src = ctx -> flipped_ptrs [ ctx -> prev_index ] . data [ plane ]		1676540	0					
ANR	1676626	IdentifierDeclType	const uint8_t *		1676540	0					
ANR	1676627	Identifier	src		1676540	1					
ANR	1676628	AssignmentExpression	* src = ctx -> flipped_ptrs [ ctx -> prev_index ] . data [ plane ]		1676540	2		=			
ANR	1676629	Identifier	src		1676540	0					
ANR	1676630	ArrayIndexing	ctx -> flipped_ptrs [ ctx -> prev_index ] . data [ plane ]		1676540	1					
ANR	1676631	MemberAccess	ctx -> flipped_ptrs [ ctx -> prev_index ] . data		1676540	0					
ANR	1676632	ArrayIndexing	ctx -> flipped_ptrs [ ctx -> prev_index ]		1676540	0					
ANR	1676633	PtrMemberAccess	ctx -> flipped_ptrs		1676540	0					
ANR	1676634	Identifier	ctx		1676540	0					
ANR	1676635	Identifier	flipped_ptrs		1676540	1					
ANR	1676636	PtrMemberAccess	ctx -> prev_index		1676540	1					
ANR	1676637	Identifier	ctx		1676540	0					
ANR	1676638	Identifier	prev_index		1676540	1					
ANR	1676639	Identifier	data		1676540	1					
ANR	1676640	Identifier	plane		1676540	1					
ANR	1676641	IdentifierDeclStatement	uint8_t * dst = ctx -> flipped_ptrs [ ctx -> cur_index ] . data [ plane ] ;	21:8:469:536	1676540	4	True				
ANR	1676642	IdentifierDecl	* dst = ctx -> flipped_ptrs [ ctx -> cur_index ] . data [ plane ]		1676540	0					
ANR	1676643	IdentifierDeclType	uint8_t *		1676540	0					
ANR	1676644	Identifier	dst		1676540	1					
ANR	1676645	AssignmentExpression	* dst = ctx -> flipped_ptrs [ ctx -> cur_index ] . data [ plane ]		1676540	2		=			
ANR	1676646	Identifier	dst		1676540	0					
ANR	1676647	ArrayIndexing	ctx -> flipped_ptrs [ ctx -> cur_index ] . data [ plane ]		1676540	1					
ANR	1676648	MemberAccess	ctx -> flipped_ptrs [ ctx -> cur_index ] . data		1676540	0					
ANR	1676649	ArrayIndexing	ctx -> flipped_ptrs [ ctx -> cur_index ]		1676540	0					
ANR	1676650	PtrMemberAccess	ctx -> flipped_ptrs		1676540	0					
ANR	1676651	Identifier	ctx		1676540	0					
ANR	1676652	Identifier	flipped_ptrs		1676540	1					
ANR	1676653	PtrMemberAccess	ctx -> cur_index		1676540	1					
ANR	1676654	Identifier	ctx		1676540	0					
ANR	1676655	Identifier	cur_index		1676540	1					
ANR	1676656	Identifier	data		1676540	1					
ANR	1676657	Identifier	plane		1676540	1					
ANR	1676658	ForStatement	for ( y = 0 ; y < ctx -> num_vblocks [ plane ] ; y ++ )		1676540	5					
ANR	1676659	ForInit	y = 0 ;	25:12:553:558	1676540	0	True				
ANR	1676660	AssignmentExpression	y = 0		1676540	0		=			
ANR	1676661	Identifier	y		1676540	0					
ANR	1676662	PrimaryExpression	0		1676540	1					
ANR	1676663	Condition	y < ctx -> num_vblocks [ plane ]	25:19:560:586	1676540	1	True				
ANR	1676664	RelationalExpression	y < ctx -> num_vblocks [ plane ]		1676540	0		<			
ANR	1676665	Identifier	y		1676540	0					
ANR	1676666	ArrayIndexing	ctx -> num_vblocks [ plane ]		1676540	1					
ANR	1676667	PtrMemberAccess	ctx -> num_vblocks		1676540	0					
ANR	1676668	Identifier	ctx		1676540	0					
ANR	1676669	Identifier	num_vblocks		1676540	1					
ANR	1676670	Identifier	plane		1676540	1					
ANR	1676671	PostIncDecOperationExpression	y ++	25:48:589:591	1676540	2	True				
ANR	1676672	Identifier	y		1676540	0					
ANR	1676673	IncDec	++		1676540	1					
ANR	1676674	CompoundStatement		21:53:492:492	1676540	3					
ANR	1676675	ForStatement	for ( x = 0 ; x < ctx -> num_hblocks [ plane ] ; x ++ )		1676540	0					
ANR	1676676	ForInit	x = 0 ;	27:16:613:618	1676540	0	True				
ANR	1676677	AssignmentExpression	x = 0		1676540	0		=			
ANR	1676678	Identifier	x		1676540	0					
ANR	1676679	PrimaryExpression	0		1676540	1					
ANR	1676680	Condition	x < ctx -> num_hblocks [ plane ]	27:23:620:646	1676540	1	True				
ANR	1676681	RelationalExpression	x < ctx -> num_hblocks [ plane ]		1676540	0		<			
ANR	1676682	Identifier	x		1676540	0					
ANR	1676683	ArrayIndexing	ctx -> num_hblocks [ plane ]		1676540	1					
ANR	1676684	PtrMemberAccess	ctx -> num_hblocks		1676540	0					
ANR	1676685	Identifier	ctx		1676540	0					
ANR	1676686	Identifier	num_hblocks		1676540	1					
ANR	1676687	Identifier	plane		1676540	1					
ANR	1676688	PostIncDecOperationExpression	x ++	27:52:649:651	1676540	2	True				
ANR	1676689	Identifier	x		1676540	0					
ANR	1676690	IncDec	++		1676540	1					
ANR	1676691	CompoundStatement		23:57:552:552	1676540	3					
ANR	1676692	IfStatement	if ( is_iframe || get_bits1 ( & ctx -> gb ) == is_chroma )		1676540	0					
ANR	1676693	Condition	is_iframe || get_bits1 ( & ctx -> gb ) == is_chroma	39:19:917:961	1676540	0	True				
ANR	1676694	OrExpression	is_iframe || get_bits1 ( & ctx -> gb ) == is_chroma		1676540	0		||			
ANR	1676695	Identifier	is_iframe		1676540	0					
ANR	1676696	EqualityExpression	get_bits1 ( & ctx -> gb ) == is_chroma		1676540	1		==			
ANR	1676697	CallExpression	get_bits1 ( & ctx -> gb )		1676540	0					
ANR	1676698	Callee	get_bits1		1676540	0					
ANR	1676699	Identifier	get_bits1		1676540	0					
ANR	1676700	ArgumentList	& ctx -> gb		1676540	1					
ANR	1676701	Argument	& ctx -> gb		1676540	0					
ANR	1676702	UnaryOperationExpression	& ctx -> gb		1676540	0					
ANR	1676703	UnaryOperator	&		1676540	0					
ANR	1676704	PtrMemberAccess	ctx -> gb		1676540	1					
ANR	1676705	Identifier	ctx		1676540	0					
ANR	1676706	Identifier	gb		1676540	1					
ANR	1676707	Identifier	is_chroma		1676540	1					
ANR	1676708	CompoundStatement		35:66:862:862	1676540	1					
ANR	1676709	IfStatement	if ( is_chroma || is_iframe || ! get_bits1 ( & ctx -> gb ) )		1676540	0					
ANR	1676710	Condition	is_chroma || is_iframe || ! get_bits1 ( & ctx -> gb )	49:23:1208:1253	1676540	0	True				
ANR	1676711	OrExpression	is_chroma || is_iframe || ! get_bits1 ( & ctx -> gb )		1676540	0		||			
ANR	1676712	Identifier	is_chroma		1676540	0					
ANR	1676713	OrExpression	is_iframe || ! get_bits1 ( & ctx -> gb )		1676540	1		||			
ANR	1676714	Identifier	is_iframe		1676540	0					
ANR	1676715	UnaryOperationExpression	! get_bits1 ( & ctx -> gb )		1676540	1					
ANR	1676716	UnaryOperator	!		1676540	0					
ANR	1676717	CallExpression	get_bits1 ( & ctx -> gb )		1676540	1					
ANR	1676718	Callee	get_bits1		1676540	0					
ANR	1676719	Identifier	get_bits1		1676540	0					
ANR	1676720	ArgumentList	& ctx -> gb		1676540	1					
ANR	1676721	Argument	& ctx -> gb		1676540	0					
ANR	1676722	UnaryOperationExpression	& ctx -> gb		1676540	0					
ANR	1676723	UnaryOperator	&		1676540	0					
ANR	1676724	PtrMemberAccess	ctx -> gb		1676540	1					
ANR	1676725	Identifier	ctx		1676540	0					
ANR	1676726	Identifier	gb		1676540	1					
ANR	1676727	CompoundStatement		45:71:1154:1154	1676540	1					
ANR	1676728	IfStatement	"if ( ! vlc_decode_block ( ctx , num_coeffs , qscale ) )"		1676540	0					
ANR	1676729	Condition	"! vlc_decode_block ( ctx , num_coeffs , qscale )"	53:27:1288:1329	1676540	0	True				
ANR	1676730	UnaryOperationExpression	"! vlc_decode_block ( ctx , num_coeffs , qscale )"		1676540	0					
ANR	1676731	UnaryOperator	!		1676540	0					
ANR	1676732	CallExpression	"vlc_decode_block ( ctx , num_coeffs , qscale )"		1676540	1					
ANR	1676733	Callee	vlc_decode_block		1676540	0					
ANR	1676734	Identifier	vlc_decode_block		1676540	0					
ANR	1676735	ArgumentList	ctx		1676540	1					
ANR	1676736	Argument	ctx		1676540	0					
ANR	1676737	Identifier	ctx		1676540	0					
ANR	1676738	Argument	num_coeffs		1676540	1					
ANR	1676739	Identifier	num_coeffs		1676540	0					
ANR	1676740	Argument	qscale		1676540	2					
ANR	1676741	Identifier	qscale		1676540	0					
ANR	1676742	ReturnStatement	return 0 ;	55:28:1361:1369	1676540	1	True				
ANR	1676743	PrimaryExpression	0		1676540	0					
ANR	1676744	ExpressionStatement	"ctx -> dsp . idct_put ( dst , stride , ctx -> dct_block )"	57:24:1396:1442	1676540	1	True				
ANR	1676745	CallExpression	"ctx -> dsp . idct_put ( dst , stride , ctx -> dct_block )"		1676540	0					
ANR	1676746	Callee	ctx -> dsp . idct_put		1676540	0					
ANR	1676747	MemberAccess	ctx -> dsp . idct_put		1676540	0					
ANR	1676748	PtrMemberAccess	ctx -> dsp		1676540	0					
ANR	1676749	Identifier	ctx		1676540	0					
ANR	1676750	Identifier	dsp		1676540	1					
ANR	1676751	Identifier	idct_put		1676540	1					
ANR	1676752	ArgumentList	dst		1676540	1					
ANR	1676753	Argument	dst		1676540	0					
ANR	1676754	Identifier	dst		1676540	0					
ANR	1676755	Argument	stride		1676540	1					
ANR	1676756	Identifier	stride		1676540	0					
ANR	1676757	Argument	ctx -> dct_block		1676540	2					
ANR	1676758	PtrMemberAccess	ctx -> dct_block		1676540	0					
ANR	1676759	Identifier	ctx		1676540	0					
ANR	1676760	Identifier	dct_block		1676540	1					
ANR	1676761	ElseStatement	else		1676540	0					
ANR	1676762	CompoundStatement		61:24:1534:1579	1676540	0					
ANR	1676763	IdentifierDeclStatement	"unsigned int backref = get_bits ( & ctx -> gb , 4 ) ;"	61:24:1499:1543	1676540	0	True				
ANR	1676764	IdentifierDecl	"backref = get_bits ( & ctx -> gb , 4 )"		1676540	0					
ANR	1676765	IdentifierDeclType	unsigned int		1676540	0					
ANR	1676766	Identifier	backref		1676540	1					
ANR	1676767	AssignmentExpression	"backref = get_bits ( & ctx -> gb , 4 )"		1676540	2		=			
ANR	1676768	Identifier	backref		1676540	0					
ANR	1676769	CallExpression	"get_bits ( & ctx -> gb , 4 )"		1676540	1					
ANR	1676770	Callee	get_bits		1676540	0					
ANR	1676771	Identifier	get_bits		1676540	0					
ANR	1676772	ArgumentList	& ctx -> gb		1676540	1					
ANR	1676773	Argument	& ctx -> gb		1676540	0					
ANR	1676774	UnaryOperationExpression	& ctx -> gb		1676540	0					
ANR	1676775	UnaryOperator	&		1676540	0					
ANR	1676776	PtrMemberAccess	ctx -> gb		1676540	1					
ANR	1676777	Identifier	ctx		1676540	0					
ANR	1676778	Identifier	gb		1676540	1					
ANR	1676779	Argument	4		1676540	1					
ANR	1676780	PrimaryExpression	4		1676540	0					
ANR	1676781	IdentifierDeclStatement	int index = ( ctx -> cur_index + backref ) & 15 ;	63:24:1570:1609	1676540	1	True				
ANR	1676782	IdentifierDecl	index = ( ctx -> cur_index + backref ) & 15		1676540	0					
ANR	1676783	IdentifierDeclType	int		1676540	0					
ANR	1676784	Identifier	index		1676540	1					
ANR	1676785	AssignmentExpression	index = ( ctx -> cur_index + backref ) & 15		1676540	2		=			
ANR	1676786	Identifier	index		1676540	0					
ANR	1676787	BitAndExpression	( ctx -> cur_index + backref ) & 15		1676540	1		&			
ANR	1676788	AdditiveExpression	ctx -> cur_index + backref		1676540	0		+			
ANR	1676789	PtrMemberAccess	ctx -> cur_index		1676540	0					
ANR	1676790	Identifier	ctx		1676540	0					
ANR	1676791	Identifier	cur_index		1676540	1					
ANR	1676792	Identifier	backref		1676540	1					
ANR	1676793	PrimaryExpression	15		1676540	1					
ANR	1676794	IdentifierDeclStatement	uint8_t * p = ctx -> flipped_ptrs [ index ] . data [ 0 ] ;	65:24:1636:1681	1676540	2	True				
ANR	1676795	IdentifierDecl	* p = ctx -> flipped_ptrs [ index ] . data [ 0 ]		1676540	0					
ANR	1676796	IdentifierDeclType	uint8_t *		1676540	0					
ANR	1676797	Identifier	p		1676540	1					
ANR	1676798	AssignmentExpression	* p = ctx -> flipped_ptrs [ index ] . data [ 0 ]		1676540	2		=			
ANR	1676799	Identifier	p		1676540	0					
ANR	1676800	ArrayIndexing	ctx -> flipped_ptrs [ index ] . data [ 0 ]		1676540	1					
ANR	1676801	MemberAccess	ctx -> flipped_ptrs [ index ] . data		1676540	0					
ANR	1676802	ArrayIndexing	ctx -> flipped_ptrs [ index ]		1676540	0					
ANR	1676803	PtrMemberAccess	ctx -> flipped_ptrs		1676540	0					
ANR	1676804	Identifier	ctx		1676540	0					
ANR	1676805	Identifier	flipped_ptrs		1676540	1					
ANR	1676806	Identifier	index		1676540	1					
ANR	1676807	Identifier	data		1676540	1					
ANR	1676808	PrimaryExpression	0		1676540	1					
ANR	1676809	ExpressionStatement	"ff_thread_await_progress ( & ctx -> buf_ptrs [ index ] , cur_row , 0 )"	69:24:1710:1769	1676540	3	True				
ANR	1676810	CallExpression	"ff_thread_await_progress ( & ctx -> buf_ptrs [ index ] , cur_row , 0 )"		1676540	0					
ANR	1676811	Callee	ff_thread_await_progress		1676540	0					
ANR	1676812	Identifier	ff_thread_await_progress		1676540	0					
ANR	1676813	ArgumentList	& ctx -> buf_ptrs [ index ]		1676540	1					
ANR	1676814	Argument	& ctx -> buf_ptrs [ index ]		1676540	0					
ANR	1676815	UnaryOperationExpression	& ctx -> buf_ptrs [ index ]		1676540	0					
ANR	1676816	UnaryOperator	&		1676540	0					
ANR	1676817	ArrayIndexing	ctx -> buf_ptrs [ index ]		1676540	1					
ANR	1676818	PtrMemberAccess	ctx -> buf_ptrs		1676540	0					
ANR	1676819	Identifier	ctx		1676540	0					
ANR	1676820	Identifier	buf_ptrs		1676540	1					
ANR	1676821	Identifier	index		1676540	1					
ANR	1676822	Argument	cur_row		1676540	1					
ANR	1676823	Identifier	cur_row		1676540	0					
ANR	1676824	Argument	0		1676540	2					
ANR	1676825	PrimaryExpression	0		1676540	0					
ANR	1676826	IfStatement	if ( p )		1676540	4					
ANR	1676827	Condition	p	71:27:1799:1799	1676540	0	True				
ANR	1676828	Identifier	p		1676540	0					
ANR	1676829	CompoundStatement		67:30:1700:1700	1676540	1					
ANR	1676830	ExpressionStatement	p += src - ctx -> flipped_ptrs [ ctx -> prev_index ] . data [ plane ]	73:28:1833:1923	1676540	0	True				
ANR	1676831	AssignmentExpression	p += src - ctx -> flipped_ptrs [ ctx -> prev_index ] . data [ plane ]		1676540	0		+=			
ANR	1676832	Identifier	p		1676540	0					
ANR	1676833	AdditiveExpression	src - ctx -> flipped_ptrs [ ctx -> prev_index ] . data [ plane ]		1676540	1		-			
ANR	1676834	Identifier	src		1676540	0					
ANR	1676835	ArrayIndexing	ctx -> flipped_ptrs [ ctx -> prev_index ] . data [ plane ]		1676540	1					
ANR	1676836	MemberAccess	ctx -> flipped_ptrs [ ctx -> prev_index ] . data		1676540	0					
ANR	1676837	ArrayIndexing	ctx -> flipped_ptrs [ ctx -> prev_index ]		1676540	0					
ANR	1676838	PtrMemberAccess	ctx -> flipped_ptrs		1676540	0					
ANR	1676839	Identifier	ctx		1676540	0					
ANR	1676840	Identifier	flipped_ptrs		1676540	1					
ANR	1676841	PtrMemberAccess	ctx -> prev_index		1676540	1					
ANR	1676842	Identifier	ctx		1676540	0					
ANR	1676843	Identifier	prev_index		1676540	1					
ANR	1676844	Identifier	data		1676540	1					
ANR	1676845	Identifier	plane		1676540	1					
ANR	1676846	ExpressionStatement	"ctx -> dsp . put_pixels_tab [ 1 ] [ 0 ] ( dst , p , stride , 8 )"	77:28:1954:2002	1676540	1	True				
ANR	1676847	CallExpression	"ctx -> dsp . put_pixels_tab [ 1 ] [ 0 ] ( dst , p , stride , 8 )"		1676540	0					
ANR	1676848	Callee	ctx -> dsp . put_pixels_tab [ 1 ] [ 0 ]		1676540	0					
ANR	1676849	ArrayIndexing	ctx -> dsp . put_pixels_tab [ 1 ] [ 0 ]		1676540	0					
ANR	1676850	ArrayIndexing	ctx -> dsp . put_pixels_tab [ 1 ]		1676540	0					
ANR	1676851	MemberAccess	ctx -> dsp . put_pixels_tab		1676540	0					
ANR	1676852	PtrMemberAccess	ctx -> dsp		1676540	0					
ANR	1676853	Identifier	ctx		1676540	0					
ANR	1676854	Identifier	dsp		1676540	1					
ANR	1676855	Identifier	put_pixels_tab		1676540	1					
ANR	1676856	PrimaryExpression	1		1676540	1					
ANR	1676857	PrimaryExpression	0		1676540	1					
ANR	1676858	ArgumentList	dst		1676540	1					
ANR	1676859	Argument	dst		1676540	0					
ANR	1676860	Identifier	dst		1676540	0					
ANR	1676861	Argument	p		1676540	1					
ANR	1676862	Identifier	p		1676540	0					
ANR	1676863	Argument	stride		1676540	2					
ANR	1676864	Identifier	stride		1676540	0					
ANR	1676865	Argument	8		1676540	3					
ANR	1676866	PrimaryExpression	8		1676540	0					
ANR	1676867	ElseStatement	else		1676540	0					
ANR	1676868	CompoundStatement		75:31:1934:1934	1676540	0					
ANR	1676869	ExpressionStatement	"av_log ( ctx -> avctx , AV_LOG_ERROR , ""No such backreference! Buggy sample.\\n"" )"	81:28:2067:2179	1676540	0	True				
ANR	1676870	CallExpression	"av_log ( ctx -> avctx , AV_LOG_ERROR , ""No such backreference! Buggy sample.\\n"" )"		1676540	0					
ANR	1676871	Callee	av_log		1676540	0					
ANR	1676872	Identifier	av_log		1676540	0					
ANR	1676873	ArgumentList	ctx -> avctx		1676540	1					
ANR	1676874	Argument	ctx -> avctx		1676540	0					
ANR	1676875	PtrMemberAccess	ctx -> avctx		1676540	0					
ANR	1676876	Identifier	ctx		1676540	0					
ANR	1676877	Identifier	avctx		1676540	1					
ANR	1676878	Argument	AV_LOG_ERROR		1676540	1					
ANR	1676879	Identifier	AV_LOG_ERROR		1676540	0					
ANR	1676880	Argument	"""No such backreference! Buggy sample.\\n"""		1676540	2					
ANR	1676881	PrimaryExpression	"""No such backreference! Buggy sample.\\n"""		1676540	0					
ANR	1676882	ElseStatement	else		1676540	0					
ANR	1676883	CompoundStatement		85:23:2153:2153	1676540	0					
ANR	1676884	ExpressionStatement	"ff_thread_await_progress ( & ctx -> buf_ptrs [ ctx -> prev_index ] , cur_row , 0 )"	91:20:2278:2347	1676540	0	True				
ANR	1676885	CallExpression	"ff_thread_await_progress ( & ctx -> buf_ptrs [ ctx -> prev_index ] , cur_row , 0 )"		1676540	0					
ANR	1676886	Callee	ff_thread_await_progress		1676540	0					
ANR	1676887	Identifier	ff_thread_await_progress		1676540	0					
ANR	1676888	ArgumentList	& ctx -> buf_ptrs [ ctx -> prev_index ]		1676540	1					
ANR	1676889	Argument	& ctx -> buf_ptrs [ ctx -> prev_index ]		1676540	0					
ANR	1676890	UnaryOperationExpression	& ctx -> buf_ptrs [ ctx -> prev_index ]		1676540	0					
ANR	1676891	UnaryOperator	&		1676540	0					
ANR	1676892	ArrayIndexing	ctx -> buf_ptrs [ ctx -> prev_index ]		1676540	1					
ANR	1676893	PtrMemberAccess	ctx -> buf_ptrs		1676540	0					
ANR	1676894	Identifier	ctx		1676540	0					
ANR	1676895	Identifier	buf_ptrs		1676540	1					
ANR	1676896	PtrMemberAccess	ctx -> prev_index		1676540	1					
ANR	1676897	Identifier	ctx		1676540	0					
ANR	1676898	Identifier	prev_index		1676540	1					
ANR	1676899	Argument	cur_row		1676540	1					
ANR	1676900	Identifier	cur_row		1676540	0					
ANR	1676901	Argument	0		1676540	2					
ANR	1676902	PrimaryExpression	0		1676540	0					
ANR	1676903	ExpressionStatement	"ctx -> dsp . put_pixels_tab [ 1 ] [ 0 ] ( dst , src , stride , 8 )"	93:20:2370:2420	1676540	1	True				
ANR	1676904	CallExpression	"ctx -> dsp . put_pixels_tab [ 1 ] [ 0 ] ( dst , src , stride , 8 )"		1676540	0					
ANR	1676905	Callee	ctx -> dsp . put_pixels_tab [ 1 ] [ 0 ]		1676540	0					
ANR	1676906	ArrayIndexing	ctx -> dsp . put_pixels_tab [ 1 ] [ 0 ]		1676540	0					
ANR	1676907	ArrayIndexing	ctx -> dsp . put_pixels_tab [ 1 ]		1676540	0					
ANR	1676908	MemberAccess	ctx -> dsp . put_pixels_tab		1676540	0					
ANR	1676909	PtrMemberAccess	ctx -> dsp		1676540	0					
ANR	1676910	Identifier	ctx		1676540	0					
ANR	1676911	Identifier	dsp		1676540	1					
ANR	1676912	Identifier	put_pixels_tab		1676540	1					
ANR	1676913	PrimaryExpression	1		1676540	1					
ANR	1676914	PrimaryExpression	0		1676540	1					
ANR	1676915	ArgumentList	dst		1676540	1					
ANR	1676916	Argument	dst		1676540	0					
ANR	1676917	Identifier	dst		1676540	0					
ANR	1676918	Argument	src		1676540	1					
ANR	1676919	Identifier	src		1676540	0					
ANR	1676920	Argument	stride		1676540	2					
ANR	1676921	Identifier	stride		1676540	0					
ANR	1676922	Argument	8		1676540	3					
ANR	1676923	PrimaryExpression	8		1676540	0					
ANR	1676924	ExpressionStatement	src += 8	97:16:2458:2466	1676540	1	True				
ANR	1676925	AssignmentExpression	src += 8		1676540	0		+=			
ANR	1676926	Identifier	src		1676540	0					
ANR	1676927	PrimaryExpression	8		1676540	1					
ANR	1676928	ExpressionStatement	dst += 8	99:16:2485:2493	1676540	2	True				
ANR	1676929	AssignmentExpression	dst += 8		1676540	0		+=			
ANR	1676930	Identifier	dst		1676540	0					
ANR	1676931	PrimaryExpression	8		1676540	1					
ANR	1676932	ExpressionStatement	src += ( stride - ctx -> num_hblocks [ plane ] ) << 3	103:12:2523:2567	1676540	1	True				
ANR	1676933	AssignmentExpression	src += ( stride - ctx -> num_hblocks [ plane ] ) << 3		1676540	0		+=			
ANR	1676934	Identifier	src		1676540	0					
ANR	1676935	ShiftExpression	( stride - ctx -> num_hblocks [ plane ] ) << 3		1676540	1		<<			
ANR	1676936	AdditiveExpression	stride - ctx -> num_hblocks [ plane ]		1676540	0		-			
ANR	1676937	Identifier	stride		1676540	0					
ANR	1676938	ArrayIndexing	ctx -> num_hblocks [ plane ]		1676540	1					
ANR	1676939	PtrMemberAccess	ctx -> num_hblocks		1676540	0					
ANR	1676940	Identifier	ctx		1676540	0					
ANR	1676941	Identifier	num_hblocks		1676540	1					
ANR	1676942	Identifier	plane		1676540	1					
ANR	1676943	PrimaryExpression	3		1676540	1					
ANR	1676944	ExpressionStatement	dst += ( stride - ctx -> num_hblocks [ plane ] ) << 3	105:12:2582:2626	1676540	2	True				
ANR	1676945	AssignmentExpression	dst += ( stride - ctx -> num_hblocks [ plane ] ) << 3		1676540	0		+=			
ANR	1676946	Identifier	dst		1676540	0					
ANR	1676947	ShiftExpression	( stride - ctx -> num_hblocks [ plane ] ) << 3		1676540	1		<<			
ANR	1676948	AdditiveExpression	stride - ctx -> num_hblocks [ plane ]		1676540	0		-			
ANR	1676949	Identifier	stride		1676540	0					
ANR	1676950	ArrayIndexing	ctx -> num_hblocks [ plane ]		1676540	1					
ANR	1676951	PtrMemberAccess	ctx -> num_hblocks		1676540	0					
ANR	1676952	Identifier	ctx		1676540	0					
ANR	1676953	Identifier	num_hblocks		1676540	1					
ANR	1676954	Identifier	plane		1676540	1					
ANR	1676955	PrimaryExpression	3		1676540	1					
ANR	1676956	ExpressionStatement	"ff_thread_report_progress ( & ctx -> buf_ptrs [ ctx -> cur_index ] , cur_row ++ , 0 )"	109:12:2643:2714	1676540	3	True				
ANR	1676957	CallExpression	"ff_thread_report_progress ( & ctx -> buf_ptrs [ ctx -> cur_index ] , cur_row ++ , 0 )"		1676540	0					
ANR	1676958	Callee	ff_thread_report_progress		1676540	0					
ANR	1676959	Identifier	ff_thread_report_progress		1676540	0					
ANR	1676960	ArgumentList	& ctx -> buf_ptrs [ ctx -> cur_index ]		1676540	1					
ANR	1676961	Argument	& ctx -> buf_ptrs [ ctx -> cur_index ]		1676540	0					
ANR	1676962	UnaryOperationExpression	& ctx -> buf_ptrs [ ctx -> cur_index ]		1676540	0					
ANR	1676963	UnaryOperator	&		1676540	0					
ANR	1676964	ArrayIndexing	ctx -> buf_ptrs [ ctx -> cur_index ]		1676540	1					
ANR	1676965	PtrMemberAccess	ctx -> buf_ptrs		1676540	0					
ANR	1676966	Identifier	ctx		1676540	0					
ANR	1676967	Identifier	buf_ptrs		1676540	1					
ANR	1676968	PtrMemberAccess	ctx -> cur_index		1676540	1					
ANR	1676969	Identifier	ctx		1676540	0					
ANR	1676970	Identifier	cur_index		1676540	1					
ANR	1676971	Argument	cur_row ++		1676540	1					
ANR	1676972	PostIncDecOperationExpression	cur_row ++		1676540	0					
ANR	1676973	Identifier	cur_row		1676540	0					
ANR	1676974	IncDec	++		1676540	1					
ANR	1676975	Argument	0		1676540	2					
ANR	1676976	PrimaryExpression	0		1676540	0					
ANR	1676977	ReturnStatement	return 1 ;	117:4:2741:2749	1676540	2	True				
ANR	1676978	PrimaryExpression	1		1676540	0					
ANR	1676979	ReturnType	static int		1676540	1					
ANR	1676980	Identifier	decode		1676540	2					
ANR	1676981	ParameterList	"MimicContext * ctx , int quality , int num_coeffs , int is_iframe"		1676540	3					
ANR	1676982	Parameter	MimicContext * ctx	1:18:18:34	1676540	0	True				
ANR	1676983	ParameterType	MimicContext *		1676540	0					
ANR	1676984	Identifier	ctx		1676540	1					
ANR	1676985	Parameter	int quality	1:37:37:47	1676540	1	True				
ANR	1676986	ParameterType	int		1676540	0					
ANR	1676987	Identifier	quality		1676540	1					
ANR	1676988	Parameter	int num_coeffs	1:50:50:63	1676540	2	True				
ANR	1676989	ParameterType	int		1676540	0					
ANR	1676990	Identifier	num_coeffs		1676540	1					
ANR	1676991	Parameter	int is_iframe	3:18:85:97	1676540	3	True				
ANR	1676992	ParameterType	int		1676540	0					
ANR	1676993	Identifier	is_iframe		1676540	1					
ANR	1676994	CFGEntryNode	ENTRY		1676540		True				
ANR	1676995	CFGExitNode	EXIT		1676540		True				
ANR	1676996	Symbol	plane		1676540						
ANR	1676997	Symbol	ctx -> flipped_ptrs [ ctx -> prev_index ] . data		1676540						
ANR	1676998	Symbol	backref		1676540						
ANR	1676999	Symbol	ctx -> dct_block		1676540						
ANR	1677000	Symbol	* ctx -> flipped_ptrs [ ctx -> cur_index ] . linesize		1676540						
ANR	1677001	Symbol	get_bits		1676540						
ANR	1677002	Symbol	ctx -> flipped_ptrs [ index ] . data		1676540						
ANR	1677003	Symbol	* index		1676540						
ANR	1677004	Symbol	stride		1676540						
ANR	1677005	Symbol	num_coeffs		1676540						
ANR	1677006	Symbol	* ctx -> flipped_ptrs		1676540						
ANR	1677007	Symbol	av_clip		1676540						
ANR	1677008	Symbol	* ctx -> dsp		1676540						
ANR	1677009	Symbol	ctx		1676540						
ANR	1677010	Symbol	get_bits1		1676540						
ANR	1677011	Symbol	index		1676540						
ANR	1677012	Symbol	is_chroma		1676540						
ANR	1677013	Symbol	quality		1676540						
ANR	1677014	Symbol	qscale		1676540						
ANR	1677015	Symbol	ctx -> avctx		1676540						
ANR	1677016	Symbol	* ctx -> dsp . put_pixels_tab		1676540						
ANR	1677017	Symbol	ctx -> flipped_ptrs		1676540						
ANR	1677018	Symbol	* ctx -> prev_index		1676540						
ANR	1677019	Symbol	dst		1676540						
ANR	1677020	Symbol	ctx -> num_vblocks		1676540						
ANR	1677021	Symbol	& ctx -> gb		1676540						
ANR	1677022	Symbol	ctx -> buf_ptrs		1676540						
ANR	1677023	Symbol	ctx -> cur_index		1676540						
ANR	1677024	Symbol	* ctx -> flipped_ptrs [ ctx -> cur_index ] . data		1676540						
ANR	1677025	Symbol	ctx -> num_hblocks		1676540						
ANR	1677026	Symbol	* ctx -> cur_index		1676540						
ANR	1677027	Symbol	* * ctx -> cur_index		1676540						
ANR	1677028	Symbol	ctx -> flipped_ptrs [ ctx -> cur_index ] . linesize		1676540						
ANR	1677029	Symbol	* plane		1676540						
ANR	1677030	Symbol	* * ctx -> prev_index		1676540						
ANR	1677031	Symbol	* ctx -> flipped_ptrs [ ctx -> prev_index ] . data		1676540						
ANR	1677032	Symbol	* ctx -> num_vblocks		1676540						
ANR	1677033	Symbol	* * index		1676540						
ANR	1677034	Symbol	AV_LOG_ERROR		1676540						
ANR	1677035	Symbol	* * * ctx		1676540						
ANR	1677036	Symbol	src		1676540						
ANR	1677037	Symbol	ctx -> dsp		1676540						
ANR	1677038	Symbol	vlc_decode_block		1676540						
ANR	1677039	Symbol	* ctx		1676540						
ANR	1677040	Symbol	p		1676540						
ANR	1677041	Symbol	is_iframe		1676540						
ANR	1677042	Symbol	* ctx -> num_hblocks		1676540						
ANR	1677043	Symbol	ctx -> prev_index		1676540						
ANR	1677044	Symbol	* ctx -> flipped_ptrs [ index ] . data		1676540						
ANR	1677045	Symbol	cur_row		1676540						
ANR	1677046	Symbol	x		1676540						
ANR	1677047	Symbol	y		1676540						
ANR	1677048	Symbol	ctx -> dsp . put_pixels_tab		1676540						
ANR	1677049	Symbol	* * ctx		1676540						
ANR	1677050	Symbol	* * ctx -> flipped_ptrs		1676540						
ANR	1677051	Symbol	ctx -> flipped_ptrs [ ctx -> cur_index ] . data		1676540						
