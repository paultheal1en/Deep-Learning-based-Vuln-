command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8801020	File	/home/p4ultr4n/workplace/ReVeal/raw_code/vb_decode_framedata_0.c								
ANR	8801021	Function	vb_decode_framedata	1:0:0:3174							
ANR	8801022	FunctionDef	"vb_decode_framedata (VBDecContext * c , const uint8_t * buf , int offset)"		8801021	0					
ANR	8801023	CompoundStatement		3:0:81:3174	8801021	0					
ANR	8801024	IdentifierDeclStatement	"uint8_t * prev , * cur ;"	5:4:88:107	8801021	0	True				
ANR	8801025	IdentifierDecl	* prev		8801021	0					
ANR	8801026	IdentifierDeclType	uint8_t *		8801021	0					
ANR	8801027	Identifier	prev		8801021	1					
ANR	8801028	IdentifierDecl	* cur		8801021	1					
ANR	8801029	IdentifierDeclType	uint8_t *		8801021	0					
ANR	8801030	Identifier	cur		8801021	1					
ANR	8801031	IdentifierDeclStatement	"int blk , blocks , t , blk2 ;"	7:4:114:138	8801021	1	True				
ANR	8801032	IdentifierDecl	blk		8801021	0					
ANR	8801033	IdentifierDeclType	int		8801021	0					
ANR	8801034	Identifier	blk		8801021	1					
ANR	8801035	IdentifierDecl	blocks		8801021	1					
ANR	8801036	IdentifierDeclType	int		8801021	0					
ANR	8801037	Identifier	blocks		8801021	1					
ANR	8801038	IdentifierDecl	t		8801021	2					
ANR	8801039	IdentifierDeclType	int		8801021	0					
ANR	8801040	Identifier	t		8801021	1					
ANR	8801041	IdentifierDecl	blk2		8801021	3					
ANR	8801042	IdentifierDeclType	int		8801021	0					
ANR	8801043	Identifier	blk2		8801021	1					
ANR	8801044	IdentifierDeclStatement	int blocktypes = 0 ;	9:4:145:163	8801021	2	True				
ANR	8801045	IdentifierDecl	blocktypes = 0		8801021	0					
ANR	8801046	IdentifierDeclType	int		8801021	0					
ANR	8801047	Identifier	blocktypes		8801021	1					
ANR	8801048	AssignmentExpression	blocktypes = 0		8801021	2		=			
ANR	8801049	Identifier	blocktypes		8801021	0					
ANR	8801050	PrimaryExpression	0		8801021	1					
ANR	8801051	IdentifierDeclStatement	"int x , y , a , b ;"	11:4:170:184	8801021	3	True				
ANR	8801052	IdentifierDecl	x		8801021	0					
ANR	8801053	IdentifierDeclType	int		8801021	0					
ANR	8801054	Identifier	x		8801021	1					
ANR	8801055	IdentifierDecl	y		8801021	1					
ANR	8801056	IdentifierDeclType	int		8801021	0					
ANR	8801057	Identifier	y		8801021	1					
ANR	8801058	IdentifierDecl	a		8801021	2					
ANR	8801059	IdentifierDeclType	int		8801021	0					
ANR	8801060	Identifier	a		8801021	1					
ANR	8801061	IdentifierDecl	b		8801021	3					
ANR	8801062	IdentifierDeclType	int		8801021	0					
ANR	8801063	Identifier	b		8801021	1					
ANR	8801064	IdentifierDeclStatement	"int pattype , pattern ;"	13:4:191:211	8801021	4	True				
ANR	8801065	IdentifierDecl	pattype		8801021	0					
ANR	8801066	IdentifierDeclType	int		8801021	0					
ANR	8801067	Identifier	pattype		8801021	1					
ANR	8801068	IdentifierDecl	pattern		8801021	1					
ANR	8801069	IdentifierDeclType	int		8801021	0					
ANR	8801070	Identifier	pattern		8801021	1					
ANR	8801071	IdentifierDeclStatement	const int width = c -> avctx -> width ;	15:4:218:251	8801021	5	True				
ANR	8801072	IdentifierDecl	width = c -> avctx -> width		8801021	0					
ANR	8801073	IdentifierDeclType	const int		8801021	0					
ANR	8801074	Identifier	width		8801021	1					
ANR	8801075	AssignmentExpression	width = c -> avctx -> width		8801021	2		=			
ANR	8801076	Identifier	width		8801021	0					
ANR	8801077	PtrMemberAccess	c -> avctx -> width		8801021	1					
ANR	8801078	PtrMemberAccess	c -> avctx		8801021	0					
ANR	8801079	Identifier	c		8801021	0					
ANR	8801080	Identifier	avctx		8801021	1					
ANR	8801081	Identifier	width		8801021	1					
ANR	8801082	IdentifierDeclStatement	uint8_t * pstart = c -> prev_frame ;	17:4:258:289	8801021	6	True				
ANR	8801083	IdentifierDecl	* pstart = c -> prev_frame		8801021	0					
ANR	8801084	IdentifierDeclType	uint8_t *		8801021	0					
ANR	8801085	Identifier	pstart		8801021	1					
ANR	8801086	AssignmentExpression	* pstart = c -> prev_frame		8801021	2		=			
ANR	8801087	Identifier	pstart		8801021	0					
ANR	8801088	PtrMemberAccess	c -> prev_frame		8801021	1					
ANR	8801089	Identifier	c		8801021	0					
ANR	8801090	Identifier	prev_frame		8801021	1					
ANR	8801091	IdentifierDeclStatement	uint8_t * pend = c -> prev_frame + width * c -> avctx -> height ;	19:4:296:350	8801021	7	True				
ANR	8801092	IdentifierDecl	* pend = c -> prev_frame + width * c -> avctx -> height		8801021	0					
ANR	8801093	IdentifierDeclType	uint8_t *		8801021	0					
ANR	8801094	Identifier	pend		8801021	1					
ANR	8801095	AssignmentExpression	* pend = c -> prev_frame + width * c -> avctx -> height		8801021	2		=			
ANR	8801096	Identifier	pend		8801021	0					
ANR	8801097	AdditiveExpression	c -> prev_frame + width * c -> avctx -> height		8801021	1		+			
ANR	8801098	PtrMemberAccess	c -> prev_frame		8801021	0					
ANR	8801099	Identifier	c		8801021	0					
ANR	8801100	Identifier	prev_frame		8801021	1					
ANR	8801101	MultiplicativeExpression	width * c -> avctx -> height		8801021	1		*			
ANR	8801102	Identifier	width		8801021	0					
ANR	8801103	PtrMemberAccess	c -> avctx -> height		8801021	1					
ANR	8801104	PtrMemberAccess	c -> avctx		8801021	0					
ANR	8801105	Identifier	c		8801021	0					
ANR	8801106	Identifier	avctx		8801021	1					
ANR	8801107	Identifier	height		8801021	1					
ANR	8801108	ExpressionStatement	prev = c -> prev_frame + offset	23:4:359:388	8801021	8	True				
ANR	8801109	AssignmentExpression	prev = c -> prev_frame + offset		8801021	0		=			
ANR	8801110	Identifier	prev		8801021	0					
ANR	8801111	AdditiveExpression	c -> prev_frame + offset		8801021	1		+			
ANR	8801112	PtrMemberAccess	c -> prev_frame		8801021	0					
ANR	8801113	Identifier	c		8801021	0					
ANR	8801114	Identifier	prev_frame		8801021	1					
ANR	8801115	Identifier	offset		8801021	1					
ANR	8801116	ExpressionStatement	cur = c -> frame	25:4:395:409	8801021	9	True				
ANR	8801117	AssignmentExpression	cur = c -> frame		8801021	0		=			
ANR	8801118	Identifier	cur		8801021	0					
ANR	8801119	PtrMemberAccess	c -> frame		8801021	1					
ANR	8801120	Identifier	c		8801021	0					
ANR	8801121	Identifier	frame		8801021	1					
ANR	8801122	ExpressionStatement	blocks = ( c -> avctx -> width >> 2 ) * ( c -> avctx -> height >> 2 )	29:4:418:475	8801021	10	True				
ANR	8801123	AssignmentExpression	blocks = ( c -> avctx -> width >> 2 ) * ( c -> avctx -> height >> 2 )		8801021	0		=			
ANR	8801124	Identifier	blocks		8801021	0					
ANR	8801125	MultiplicativeExpression	( c -> avctx -> width >> 2 ) * ( c -> avctx -> height >> 2 )		8801021	1		*			
ANR	8801126	ShiftExpression	c -> avctx -> width >> 2		8801021	0		>>			
ANR	8801127	PtrMemberAccess	c -> avctx -> width		8801021	0					
ANR	8801128	PtrMemberAccess	c -> avctx		8801021	0					
ANR	8801129	Identifier	c		8801021	0					
ANR	8801130	Identifier	avctx		8801021	1					
ANR	8801131	Identifier	width		8801021	1					
ANR	8801132	PrimaryExpression	2		8801021	1					
ANR	8801133	ShiftExpression	c -> avctx -> height >> 2		8801021	1		>>			
ANR	8801134	PtrMemberAccess	c -> avctx -> height		8801021	0					
ANR	8801135	PtrMemberAccess	c -> avctx		8801021	0					
ANR	8801136	Identifier	c		8801021	0					
ANR	8801137	Identifier	avctx		8801021	1					
ANR	8801138	Identifier	height		8801021	1					
ANR	8801139	PrimaryExpression	2		8801021	1					
ANR	8801140	ExpressionStatement	blk2 = 0	31:4:482:490	8801021	11	True				
ANR	8801141	AssignmentExpression	blk2 = 0		8801021	0		=			
ANR	8801142	Identifier	blk2		8801021	0					
ANR	8801143	PrimaryExpression	0		8801021	1					
ANR	8801144	ForStatement	for ( blk = 0 ; blk < blocks ; blk ++ )		8801021	12					
ANR	8801145	ForInit	blk = 0 ;	33:8:501:508	8801021	0	True				
ANR	8801146	AssignmentExpression	blk = 0		8801021	0		=			
ANR	8801147	Identifier	blk		8801021	0					
ANR	8801148	PrimaryExpression	0		8801021	1					
ANR	8801149	Condition	blk < blocks	33:17:510:521	8801021	1	True				
ANR	8801150	RelationalExpression	blk < blocks		8801021	0		<			
ANR	8801151	Identifier	blk		8801021	0					
ANR	8801152	Identifier	blocks		8801021	1					
ANR	8801153	PostIncDecOperationExpression	blk ++	33:31:524:528	8801021	2	True				
ANR	8801154	Identifier	blk		8801021	0					
ANR	8801155	IncDec	++		8801021	1					
ANR	8801156	CompoundStatement		31:37:448:448	8801021	3					
ANR	8801157	IfStatement	if ( ! ( blk & 3 ) )		8801021	0					
ANR	8801158	Condition	! ( blk & 3 )	35:11:544:553	8801021	0	True				
ANR	8801159	UnaryOperationExpression	! ( blk & 3 )		8801021	0					
ANR	8801160	UnaryOperator	!		8801021	0					
ANR	8801161	BitAndExpression	blk & 3		8801021	1		&			
ANR	8801162	Identifier	blk		8801021	0					
ANR	8801163	PrimaryExpression	3		8801021	1					
ANR	8801164	ExpressionStatement	blocktypes = bytestream_get_byte ( & buf )	37:12:569:607	8801021	1	True				
ANR	8801165	AssignmentExpression	blocktypes = bytestream_get_byte ( & buf )		8801021	0		=			
ANR	8801166	Identifier	blocktypes		8801021	0					
ANR	8801167	CallExpression	bytestream_get_byte ( & buf )		8801021	1					
ANR	8801168	Callee	bytestream_get_byte		8801021	0					
ANR	8801169	Identifier	bytestream_get_byte		8801021	0					
ANR	8801170	ArgumentList	& buf		8801021	1					
ANR	8801171	Argument	& buf		8801021	0					
ANR	8801172	UnaryOperationExpression	& buf		8801021	0					
ANR	8801173	UnaryOperator	&		8801021	0					
ANR	8801174	Identifier	buf		8801021	1					
ANR	8801175	SwitchStatement	switch ( blocktypes & 0xC0 )		8801021	1					
ANR	8801176	Condition	blocktypes & 0xC0	39:15:625:641	8801021	0	True				
ANR	8801177	BitAndExpression	blocktypes & 0xC0		8801021	0		&			
ANR	8801178	Identifier	blocktypes		8801021	0					
ANR	8801179	PrimaryExpression	0xC0		8801021	1					
ANR	8801180	CompoundStatement		37:33:561:561	8801021	1					
ANR	8801181	Label	case 0x00 :	41:8:654:663	8801021	0	True				
ANR	8801182	ForStatement	for ( y = 0 ; y < 4 ; y ++ )		8801021	1					
ANR	8801183	ForInit	y = 0 ;	43:16:689:694	8801021	0	True				
ANR	8801184	AssignmentExpression	y = 0		8801021	0		=			
ANR	8801185	Identifier	y		8801021	0					
ANR	8801186	PrimaryExpression	0		8801021	1					
ANR	8801187	Condition	y < 4	43:23:696:700	8801021	1	True				
ANR	8801188	RelationalExpression	y < 4		8801021	0		<			
ANR	8801189	Identifier	y		8801021	0					
ANR	8801190	PrimaryExpression	4		8801021	1					
ANR	8801191	PostIncDecOperationExpression	y ++	43:30:703:705	8801021	2	True				
ANR	8801192	Identifier	y		8801021	0					
ANR	8801193	IncDec	++		8801021	1					
ANR	8801194	IfStatement	"if ( check_line ( prev + y * width , pstart , pend ) )"		8801021	3					
ANR	8801195	Condition	"check_line ( prev + y * width , pstart , pend )"	45:19:728:767	8801021	0	True				
ANR	8801196	CallExpression	"check_line ( prev + y * width , pstart , pend )"		8801021	0					
ANR	8801197	Callee	check_line		8801021	0					
ANR	8801198	Identifier	check_line		8801021	0					
ANR	8801199	ArgumentList	prev + y * width		8801021	1					
ANR	8801200	Argument	prev + y * width		8801021	0					
ANR	8801201	AdditiveExpression	prev + y * width		8801021	0		+			
ANR	8801202	Identifier	prev		8801021	0					
ANR	8801203	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801204	Identifier	y		8801021	0					
ANR	8801205	Identifier	width		8801021	1					
ANR	8801206	Argument	pstart		8801021	1					
ANR	8801207	Identifier	pstart		8801021	0					
ANR	8801208	Argument	pend		8801021	2					
ANR	8801209	Identifier	pend		8801021	0					
ANR	8801210	ExpressionStatement	"memcpy ( cur + y * width , prev + y * width , 4 )"	47:20:791:831	8801021	1	True				
ANR	8801211	CallExpression	"memcpy ( cur + y * width , prev + y * width , 4 )"		8801021	0					
ANR	8801212	Callee	memcpy		8801021	0					
ANR	8801213	Identifier	memcpy		8801021	0					
ANR	8801214	ArgumentList	cur + y * width		8801021	1					
ANR	8801215	Argument	cur + y * width		8801021	0					
ANR	8801216	AdditiveExpression	cur + y * width		8801021	0		+			
ANR	8801217	Identifier	cur		8801021	0					
ANR	8801218	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801219	Identifier	y		8801021	0					
ANR	8801220	Identifier	width		8801021	1					
ANR	8801221	Argument	prev + y * width		8801021	1					
ANR	8801222	AdditiveExpression	prev + y * width		8801021	0		+			
ANR	8801223	Identifier	prev		8801021	0					
ANR	8801224	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801225	Identifier	y		8801021	0					
ANR	8801226	Identifier	width		8801021	1					
ANR	8801227	Argument	4		8801021	2					
ANR	8801228	PrimaryExpression	4		8801021	0					
ANR	8801229	ElseStatement	else		8801021	0					
ANR	8801230	ExpressionStatement	"memset ( cur + y * width , 0 , 4 )"	51:20:876:903	8801021	0	True				
ANR	8801231	CallExpression	"memset ( cur + y * width , 0 , 4 )"		8801021	0					
ANR	8801232	Callee	memset		8801021	0					
ANR	8801233	Identifier	memset		8801021	0					
ANR	8801234	ArgumentList	cur + y * width		8801021	1					
ANR	8801235	Argument	cur + y * width		8801021	0					
ANR	8801236	AdditiveExpression	cur + y * width		8801021	0		+			
ANR	8801237	Identifier	cur		8801021	0					
ANR	8801238	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801239	Identifier	y		8801021	0					
ANR	8801240	Identifier	width		8801021	1					
ANR	8801241	Argument	0		8801021	1					
ANR	8801242	PrimaryExpression	0		8801021	0					
ANR	8801243	Argument	4		8801021	2					
ANR	8801244	PrimaryExpression	4		8801021	0					
ANR	8801245	BreakStatement	break ;	53:12:918:923	8801021	2	True				
ANR	8801246	Label	case 0x40 :	55:8:934:943	8801021	3	True				
ANR	8801247	ExpressionStatement	t = bytestream_get_byte ( & buf )	57:12:958:987	8801021	4	True				
ANR	8801248	AssignmentExpression	t = bytestream_get_byte ( & buf )		8801021	0		=			
ANR	8801249	Identifier	t		8801021	0					
ANR	8801250	CallExpression	bytestream_get_byte ( & buf )		8801021	1					
ANR	8801251	Callee	bytestream_get_byte		8801021	0					
ANR	8801252	Identifier	bytestream_get_byte		8801021	0					
ANR	8801253	ArgumentList	& buf		8801021	1					
ANR	8801254	Argument	& buf		8801021	0					
ANR	8801255	UnaryOperationExpression	& buf		8801021	0					
ANR	8801256	UnaryOperator	&		8801021	0					
ANR	8801257	Identifier	buf		8801021	1					
ANR	8801258	IfStatement	if ( ! t )		8801021	5					
ANR	8801259	Condition	! t	59:15:1005:1006	8801021	0	True				
ANR	8801260	UnaryOperationExpression	! t		8801021	0					
ANR	8801261	UnaryOperator	!		8801021	0					
ANR	8801262	Identifier	t		8801021	1					
ANR	8801263	CompoundStatement		57:18:926:926	8801021	1					
ANR	8801264	ForStatement	for ( y = 0 ; y < 4 ; y ++ )		8801021	0					
ANR	8801265	ForInit	y = 0 ;	61:20:1043:1048	8801021	0	True				
ANR	8801266	AssignmentExpression	y = 0		8801021	0		=			
ANR	8801267	Identifier	y		8801021	0					
ANR	8801268	PrimaryExpression	0		8801021	1					
ANR	8801269	Condition	y < 4	61:27:1050:1054	8801021	1	True				
ANR	8801270	RelationalExpression	y < 4		8801021	0		<			
ANR	8801271	Identifier	y		8801021	0					
ANR	8801272	PrimaryExpression	4		8801021	1					
ANR	8801273	PostIncDecOperationExpression	y ++	61:34:1057:1059	8801021	2	True				
ANR	8801274	Identifier	y		8801021	0					
ANR	8801275	IncDec	++		8801021	1					
ANR	8801276	ExpressionStatement	"memcpy ( cur + y * width , buf + y * 4 , 4 )"	63:20:1083:1118	8801021	3	True				
ANR	8801277	CallExpression	"memcpy ( cur + y * width , buf + y * 4 , 4 )"		8801021	0					
ANR	8801278	Callee	memcpy		8801021	0					
ANR	8801279	Identifier	memcpy		8801021	0					
ANR	8801280	ArgumentList	cur + y * width		8801021	1					
ANR	8801281	Argument	cur + y * width		8801021	0					
ANR	8801282	AdditiveExpression	cur + y * width		8801021	0		+			
ANR	8801283	Identifier	cur		8801021	0					
ANR	8801284	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801285	Identifier	y		8801021	0					
ANR	8801286	Identifier	width		8801021	1					
ANR	8801287	Argument	buf + y * 4		8801021	1					
ANR	8801288	AdditiveExpression	buf + y * 4		8801021	0		+			
ANR	8801289	Identifier	buf		8801021	0					
ANR	8801290	MultiplicativeExpression	y * 4		8801021	1		*			
ANR	8801291	Identifier	y		8801021	0					
ANR	8801292	PrimaryExpression	4		8801021	1					
ANR	8801293	Argument	4		8801021	2					
ANR	8801294	PrimaryExpression	4		8801021	0					
ANR	8801295	ExpressionStatement	buf += 16	65:16:1137:1146	8801021	1	True				
ANR	8801296	AssignmentExpression	buf += 16		8801021	0		+=			
ANR	8801297	Identifier	buf		8801021	0					
ANR	8801298	PrimaryExpression	16		8801021	1					
ANR	8801299	ElseStatement	else		8801021	0					
ANR	8801300	CompoundStatement		65:17:1084:1084	8801021	0					
ANR	8801301	ExpressionStatement	x = ( ( t & 0xF ) ^ 8 ) - 8	69:16:1208:1229	8801021	0	True				
ANR	8801302	AssignmentExpression	x = ( ( t & 0xF ) ^ 8 ) - 8		8801021	0		=			
ANR	8801303	Identifier	x		8801021	0					
ANR	8801304	AdditiveExpression	( ( t & 0xF ) ^ 8 ) - 8		8801021	1		-			
ANR	8801305	ExclusiveOrExpression	( t & 0xF ) ^ 8		8801021	0		^			
ANR	8801306	BitAndExpression	t & 0xF		8801021	0		&			
ANR	8801307	Identifier	t		8801021	0					
ANR	8801308	PrimaryExpression	0xF		8801021	1					
ANR	8801309	PrimaryExpression	8		8801021	1					
ANR	8801310	PrimaryExpression	8		8801021	1					
ANR	8801311	ExpressionStatement	y = ( ( t >> 4 ) ^ 8 ) - 8	71:16:1248:1269	8801021	1	True				
ANR	8801312	AssignmentExpression	y = ( ( t >> 4 ) ^ 8 ) - 8		8801021	0		=			
ANR	8801313	Identifier	y		8801021	0					
ANR	8801314	AdditiveExpression	( ( t >> 4 ) ^ 8 ) - 8		8801021	1		-			
ANR	8801315	ExclusiveOrExpression	( t >> 4 ) ^ 8		8801021	0		^			
ANR	8801316	ShiftExpression	t >> 4		8801021	0		>>			
ANR	8801317	Identifier	t		8801021	0					
ANR	8801318	PrimaryExpression	4		8801021	1					
ANR	8801319	PrimaryExpression	8		8801021	1					
ANR	8801320	PrimaryExpression	8		8801021	1					
ANR	8801321	ExpressionStatement	t = x + y * width	73:16:1288:1303	8801021	2	True				
ANR	8801322	AssignmentExpression	t = x + y * width		8801021	0		=			
ANR	8801323	Identifier	t		8801021	0					
ANR	8801324	AdditiveExpression	x + y * width		8801021	1		+			
ANR	8801325	Identifier	x		8801021	0					
ANR	8801326	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801327	Identifier	y		8801021	0					
ANR	8801328	Identifier	width		8801021	1					
ANR	8801329	ForStatement	for ( y = 0 ; y < 4 ; y ++ )		8801021	3					
ANR	8801330	ForInit	y = 0 ;	75:20:1326:1331	8801021	0	True				
ANR	8801331	AssignmentExpression	y = 0		8801021	0		=			
ANR	8801332	Identifier	y		8801021	0					
ANR	8801333	PrimaryExpression	0		8801021	1					
ANR	8801334	Condition	y < 4	75:27:1333:1337	8801021	1	True				
ANR	8801335	RelationalExpression	y < 4		8801021	0		<			
ANR	8801336	Identifier	y		8801021	0					
ANR	8801337	PrimaryExpression	4		8801021	1					
ANR	8801338	PostIncDecOperationExpression	y ++	75:34:1340:1342	8801021	2	True				
ANR	8801339	Identifier	y		8801021	0					
ANR	8801340	IncDec	++		8801021	1					
ANR	8801341	IfStatement	"if ( check_line ( prev + t + y * width , pstart , pend ) )"		8801021	3					
ANR	8801342	Condition	"check_line ( prev + t + y * width , pstart , pend )"	77:23:1369:1412	8801021	0	True				
ANR	8801343	CallExpression	"check_line ( prev + t + y * width , pstart , pend )"		8801021	0					
ANR	8801344	Callee	check_line		8801021	0					
ANR	8801345	Identifier	check_line		8801021	0					
ANR	8801346	ArgumentList	prev + t + y * width		8801021	1					
ANR	8801347	Argument	prev + t + y * width		8801021	0					
ANR	8801348	AdditiveExpression	prev + t + y * width		8801021	0		+			
ANR	8801349	Identifier	prev		8801021	0					
ANR	8801350	AdditiveExpression	t + y * width		8801021	1		+			
ANR	8801351	Identifier	t		8801021	0					
ANR	8801352	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801353	Identifier	y		8801021	0					
ANR	8801354	Identifier	width		8801021	1					
ANR	8801355	Argument	pstart		8801021	1					
ANR	8801356	Identifier	pstart		8801021	0					
ANR	8801357	Argument	pend		8801021	2					
ANR	8801358	Identifier	pend		8801021	0					
ANR	8801359	ExpressionStatement	"memcpy ( cur + y * width , prev + t + y * width , 4 )"	79:24:1440:1484	8801021	1	True				
ANR	8801360	CallExpression	"memcpy ( cur + y * width , prev + t + y * width , 4 )"		8801021	0					
ANR	8801361	Callee	memcpy		8801021	0					
ANR	8801362	Identifier	memcpy		8801021	0					
ANR	8801363	ArgumentList	cur + y * width		8801021	1					
ANR	8801364	Argument	cur + y * width		8801021	0					
ANR	8801365	AdditiveExpression	cur + y * width		8801021	0		+			
ANR	8801366	Identifier	cur		8801021	0					
ANR	8801367	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801368	Identifier	y		8801021	0					
ANR	8801369	Identifier	width		8801021	1					
ANR	8801370	Argument	prev + t + y * width		8801021	1					
ANR	8801371	AdditiveExpression	prev + t + y * width		8801021	0		+			
ANR	8801372	Identifier	prev		8801021	0					
ANR	8801373	AdditiveExpression	t + y * width		8801021	1		+			
ANR	8801374	Identifier	t		8801021	0					
ANR	8801375	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801376	Identifier	y		8801021	0					
ANR	8801377	Identifier	width		8801021	1					
ANR	8801378	Argument	4		8801021	2					
ANR	8801379	PrimaryExpression	4		8801021	0					
ANR	8801380	ElseStatement	else		8801021	0					
ANR	8801381	ExpressionStatement	"memset ( cur + y * width , 0 , 4 )"	83:24:1537:1564	8801021	0	True				
ANR	8801382	CallExpression	"memset ( cur + y * width , 0 , 4 )"		8801021	0					
ANR	8801383	Callee	memset		8801021	0					
ANR	8801384	Identifier	memset		8801021	0					
ANR	8801385	ArgumentList	cur + y * width		8801021	1					
ANR	8801386	Argument	cur + y * width		8801021	0					
ANR	8801387	AdditiveExpression	cur + y * width		8801021	0		+			
ANR	8801388	Identifier	cur		8801021	0					
ANR	8801389	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801390	Identifier	y		8801021	0					
ANR	8801391	Identifier	width		8801021	1					
ANR	8801392	Argument	0		8801021	1					
ANR	8801393	PrimaryExpression	0		8801021	0					
ANR	8801394	Argument	4		8801021	2					
ANR	8801395	PrimaryExpression	4		8801021	0					
ANR	8801396	BreakStatement	break ;	87:12:1594:1599	8801021	6	True				
ANR	8801397	Label	case 0x80 :	89:8:1610:1619	8801021	7	True				
ANR	8801398	ExpressionStatement	t = bytestream_get_byte ( & buf )	91:12:1642:1671	8801021	8	True				
ANR	8801399	AssignmentExpression	t = bytestream_get_byte ( & buf )		8801021	0		=			
ANR	8801400	Identifier	t		8801021	0					
ANR	8801401	CallExpression	bytestream_get_byte ( & buf )		8801021	1					
ANR	8801402	Callee	bytestream_get_byte		8801021	0					
ANR	8801403	Identifier	bytestream_get_byte		8801021	0					
ANR	8801404	ArgumentList	& buf		8801021	1					
ANR	8801405	Argument	& buf		8801021	0					
ANR	8801406	UnaryOperationExpression	& buf		8801021	0					
ANR	8801407	UnaryOperator	&		8801021	0					
ANR	8801408	Identifier	buf		8801021	1					
ANR	8801409	ForStatement	for ( y = 0 ; y < 4 ; y ++ )		8801021	9					
ANR	8801410	ForInit	y = 0 ;	93:16:1690:1695	8801021	0	True				
ANR	8801411	AssignmentExpression	y = 0		8801021	0		=			
ANR	8801412	Identifier	y		8801021	0					
ANR	8801413	PrimaryExpression	0		8801021	1					
ANR	8801414	Condition	y < 4	93:23:1697:1701	8801021	1	True				
ANR	8801415	RelationalExpression	y < 4		8801021	0		<			
ANR	8801416	Identifier	y		8801021	0					
ANR	8801417	PrimaryExpression	4		8801021	1					
ANR	8801418	PostIncDecOperationExpression	y ++	93:30:1704:1706	8801021	2	True				
ANR	8801419	Identifier	y		8801021	0					
ANR	8801420	IncDec	++		8801021	1					
ANR	8801421	ExpressionStatement	"memset ( cur + y * width , t , 4 )"	95:16:1726:1753	8801021	3	True				
ANR	8801422	CallExpression	"memset ( cur + y * width , t , 4 )"		8801021	0					
ANR	8801423	Callee	memset		8801021	0					
ANR	8801424	Identifier	memset		8801021	0					
ANR	8801425	ArgumentList	cur + y * width		8801021	1					
ANR	8801426	Argument	cur + y * width		8801021	0					
ANR	8801427	AdditiveExpression	cur + y * width		8801021	0		+			
ANR	8801428	Identifier	cur		8801021	0					
ANR	8801429	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801430	Identifier	y		8801021	0					
ANR	8801431	Identifier	width		8801021	1					
ANR	8801432	Argument	t		8801021	1					
ANR	8801433	Identifier	t		8801021	0					
ANR	8801434	Argument	4		8801021	2					
ANR	8801435	PrimaryExpression	4		8801021	0					
ANR	8801436	BreakStatement	break ;	97:12:1768:1773	8801021	10	True				
ANR	8801437	Label	case 0xC0 :	99:8:1784:1793	8801021	11	True				
ANR	8801438	ExpressionStatement	t = bytestream_get_byte ( & buf )	101:12:1824:1853	8801021	12	True				
ANR	8801439	AssignmentExpression	t = bytestream_get_byte ( & buf )		8801021	0		=			
ANR	8801440	Identifier	t		8801021	0					
ANR	8801441	CallExpression	bytestream_get_byte ( & buf )		8801021	1					
ANR	8801442	Callee	bytestream_get_byte		8801021	0					
ANR	8801443	Identifier	bytestream_get_byte		8801021	0					
ANR	8801444	ArgumentList	& buf		8801021	1					
ANR	8801445	Argument	& buf		8801021	0					
ANR	8801446	UnaryOperationExpression	& buf		8801021	0					
ANR	8801447	UnaryOperator	&		8801021	0					
ANR	8801448	Identifier	buf		8801021	1					
ANR	8801449	ExpressionStatement	pattype = t >> 6	103:12:1868:1884	8801021	13	True				
ANR	8801450	AssignmentExpression	pattype = t >> 6		8801021	0		=			
ANR	8801451	Identifier	pattype		8801021	0					
ANR	8801452	ShiftExpression	t >> 6		8801021	1		>>			
ANR	8801453	Identifier	t		8801021	0					
ANR	8801454	PrimaryExpression	6		8801021	1					
ANR	8801455	ExpressionStatement	pattern = vb_patterns [ t & 0x3F ]	105:12:1899:1930	8801021	14	True				
ANR	8801456	AssignmentExpression	pattern = vb_patterns [ t & 0x3F ]		8801021	0		=			
ANR	8801457	Identifier	pattern		8801021	0					
ANR	8801458	ArrayIndexing	vb_patterns [ t & 0x3F ]		8801021	1					
ANR	8801459	Identifier	vb_patterns		8801021	0					
ANR	8801460	BitAndExpression	t & 0x3F		8801021	1		&			
ANR	8801461	Identifier	t		8801021	0					
ANR	8801462	PrimaryExpression	0x3F		8801021	1					
ANR	8801463	SwitchStatement	switch ( pattype )		8801021	15					
ANR	8801464	Condition	pattype	107:19:1952:1958	8801021	0	True				
ANR	8801465	Identifier	pattype		8801021	0					
ANR	8801466	CompoundStatement		105:27:1878:1878	8801021	1					
ANR	8801467	Label	case 0 :	109:12:1975:1981	8801021	0	True				
ANR	8801468	ExpressionStatement	a = bytestream_get_byte ( & buf )	111:16:2000:2029	8801021	1	True				
ANR	8801469	AssignmentExpression	a = bytestream_get_byte ( & buf )		8801021	0		=			
ANR	8801470	Identifier	a		8801021	0					
ANR	8801471	CallExpression	bytestream_get_byte ( & buf )		8801021	1					
ANR	8801472	Callee	bytestream_get_byte		8801021	0					
ANR	8801473	Identifier	bytestream_get_byte		8801021	0					
ANR	8801474	ArgumentList	& buf		8801021	1					
ANR	8801475	Argument	& buf		8801021	0					
ANR	8801476	UnaryOperationExpression	& buf		8801021	0					
ANR	8801477	UnaryOperator	&		8801021	0					
ANR	8801478	Identifier	buf		8801021	1					
ANR	8801479	ExpressionStatement	b = bytestream_get_byte ( & buf )	113:16:2048:2077	8801021	2	True				
ANR	8801480	AssignmentExpression	b = bytestream_get_byte ( & buf )		8801021	0		=			
ANR	8801481	Identifier	b		8801021	0					
ANR	8801482	CallExpression	bytestream_get_byte ( & buf )		8801021	1					
ANR	8801483	Callee	bytestream_get_byte		8801021	0					
ANR	8801484	Identifier	bytestream_get_byte		8801021	0					
ANR	8801485	ArgumentList	& buf		8801021	1					
ANR	8801486	Argument	& buf		8801021	0					
ANR	8801487	UnaryOperationExpression	& buf		8801021	0					
ANR	8801488	UnaryOperator	&		8801021	0					
ANR	8801489	Identifier	buf		8801021	1					
ANR	8801490	ForStatement	for ( y = 0 ; y < 4 ; y ++ )		8801021	3					
ANR	8801491	ForInit	y = 0 ;	115:20:2100:2105	8801021	0	True				
ANR	8801492	AssignmentExpression	y = 0		8801021	0		=			
ANR	8801493	Identifier	y		8801021	0					
ANR	8801494	PrimaryExpression	0		8801021	1					
ANR	8801495	Condition	y < 4	115:27:2107:2111	8801021	1	True				
ANR	8801496	RelationalExpression	y < 4		8801021	0		<			
ANR	8801497	Identifier	y		8801021	0					
ANR	8801498	PrimaryExpression	4		8801021	1					
ANR	8801499	PostIncDecOperationExpression	y ++	115:34:2114:2116	8801021	2	True				
ANR	8801500	Identifier	y		8801021	0					
ANR	8801501	IncDec	++		8801021	1					
ANR	8801502	ForStatement	"for ( x = 0 ; x < 4 ; x ++ , pattern >>= 1 )"		8801021	3					
ANR	8801503	ForInit	x = 0 ;	117:24:2144:2149	8801021	0	True				
ANR	8801504	AssignmentExpression	x = 0		8801021	0		=			
ANR	8801505	Identifier	x		8801021	0					
ANR	8801506	PrimaryExpression	0		8801021	1					
ANR	8801507	Condition	x < 4	117:31:2151:2155	8801021	1	True				
ANR	8801508	RelationalExpression	x < 4		8801021	0		<			
ANR	8801509	Identifier	x		8801021	0					
ANR	8801510	PrimaryExpression	4		8801021	1					
ANR	8801511	Expression	"x ++ , pattern >>= 1"	117:38:2158:2175	8801021	2	True				
ANR	8801512	PostIncDecOperationExpression	x ++		8801021	0					
ANR	8801513	Identifier	x		8801021	0					
ANR	8801514	IncDec	++		8801021	1					
ANR	8801515	AssignmentExpression	pattern >>= 1		8801021	1		>>=			
ANR	8801516	Identifier	pattern		8801021	0					
ANR	8801517	PrimaryExpression	1		8801021	1					
ANR	8801518	ExpressionStatement	cur [ x + y * width ] = ( pattern & 1 ) ? b : a	119:24:2203:2243	8801021	3	True				
ANR	8801519	AssignmentExpression	cur [ x + y * width ] = ( pattern & 1 ) ? b : a		8801021	0		=			
ANR	8801520	ArrayIndexing	cur [ x + y * width ]		8801021	0					
ANR	8801521	Identifier	cur		8801021	0					
ANR	8801522	AdditiveExpression	x + y * width		8801021	1		+			
ANR	8801523	Identifier	x		8801021	0					
ANR	8801524	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801525	Identifier	y		8801021	0					
ANR	8801526	Identifier	width		8801021	1					
ANR	8801527	ConditionalExpression	( pattern & 1 ) ? b : a		8801021	1					
ANR	8801528	Condition	pattern & 1		8801021	0					
ANR	8801529	BitAndExpression	pattern & 1		8801021	0		&			
ANR	8801530	Identifier	pattern		8801021	0					
ANR	8801531	PrimaryExpression	1		8801021	1					
ANR	8801532	Identifier	b		8801021	1					
ANR	8801533	Identifier	a		8801021	2					
ANR	8801534	BreakStatement	break ;	121:16:2262:2267	8801021	4	True				
ANR	8801535	Label	case 1 :	123:12:2282:2288	8801021	5	True				
ANR	8801536	ExpressionStatement	pattern = ~pattern	125:16:2307:2325	8801021	6	True				
ANR	8801537	AssignmentExpression	pattern = ~pattern		8801021	0		=			
ANR	8801538	Identifier	pattern		8801021	0					
ANR	8801539	Identifier	~pattern		8801021	1					
ANR	8801540	Label	case 2 :	127:12:2340:2346	8801021	7	True				
ANR	8801541	ExpressionStatement	a = bytestream_get_byte ( & buf )	129:16:2365:2394	8801021	8	True				
ANR	8801542	AssignmentExpression	a = bytestream_get_byte ( & buf )		8801021	0		=			
ANR	8801543	Identifier	a		8801021	0					
ANR	8801544	CallExpression	bytestream_get_byte ( & buf )		8801021	1					
ANR	8801545	Callee	bytestream_get_byte		8801021	0					
ANR	8801546	Identifier	bytestream_get_byte		8801021	0					
ANR	8801547	ArgumentList	& buf		8801021	1					
ANR	8801548	Argument	& buf		8801021	0					
ANR	8801549	UnaryOperationExpression	& buf		8801021	0					
ANR	8801550	UnaryOperator	&		8801021	0					
ANR	8801551	Identifier	buf		8801021	1					
ANR	8801552	ForStatement	for ( y = 0 ; y < 4 ; y ++ )		8801021	9					
ANR	8801553	ForInit	y = 0 ;	131:20:2417:2422	8801021	0	True				
ANR	8801554	AssignmentExpression	y = 0		8801021	0		=			
ANR	8801555	Identifier	y		8801021	0					
ANR	8801556	PrimaryExpression	0		8801021	1					
ANR	8801557	Condition	y < 4	131:27:2424:2428	8801021	1	True				
ANR	8801558	RelationalExpression	y < 4		8801021	0		<			
ANR	8801559	Identifier	y		8801021	0					
ANR	8801560	PrimaryExpression	4		8801021	1					
ANR	8801561	PostIncDecOperationExpression	y ++	131:34:2431:2433	8801021	2	True				
ANR	8801562	Identifier	y		8801021	0					
ANR	8801563	IncDec	++		8801021	1					
ANR	8801564	ForStatement	"for ( x = 0 ; x < 4 ; x ++ , pattern >>= 1 )"		8801021	3					
ANR	8801565	ForInit	x = 0 ;	133:24:2461:2466	8801021	0	True				
ANR	8801566	AssignmentExpression	x = 0		8801021	0		=			
ANR	8801567	Identifier	x		8801021	0					
ANR	8801568	PrimaryExpression	0		8801021	1					
ANR	8801569	Condition	x < 4	133:31:2468:2472	8801021	1	True				
ANR	8801570	RelationalExpression	x < 4		8801021	0		<			
ANR	8801571	Identifier	x		8801021	0					
ANR	8801572	PrimaryExpression	4		8801021	1					
ANR	8801573	Expression	"x ++ , pattern >>= 1"	133:38:2475:2492	8801021	2	True				
ANR	8801574	PostIncDecOperationExpression	x ++		8801021	0					
ANR	8801575	Identifier	x		8801021	0					
ANR	8801576	IncDec	++		8801021	1					
ANR	8801577	AssignmentExpression	pattern >>= 1		8801021	1		>>=			
ANR	8801578	Identifier	pattern		8801021	0					
ANR	8801579	PrimaryExpression	1		8801021	1					
ANR	8801580	IfStatement	"if ( pattern & 1 && check_pixel ( prev + x + y * width , pstart , pend ) )"		8801021	3					
ANR	8801581	Condition	"pattern & 1 && check_pixel ( prev + x + y * width , pstart , pend )"	135:27:2523:2582	8801021	0	True				
ANR	8801582	AndExpression	"pattern & 1 && check_pixel ( prev + x + y * width , pstart , pend )"		8801021	0		&&			
ANR	8801583	BitAndExpression	pattern & 1		8801021	0		&			
ANR	8801584	Identifier	pattern		8801021	0					
ANR	8801585	PrimaryExpression	1		8801021	1					
ANR	8801586	CallExpression	"check_pixel ( prev + x + y * width , pstart , pend )"		8801021	1					
ANR	8801587	Callee	check_pixel		8801021	0					
ANR	8801588	Identifier	check_pixel		8801021	0					
ANR	8801589	ArgumentList	prev + x + y * width		8801021	1					
ANR	8801590	Argument	prev + x + y * width		8801021	0					
ANR	8801591	AdditiveExpression	prev + x + y * width		8801021	0		+			
ANR	8801592	Identifier	prev		8801021	0					
ANR	8801593	AdditiveExpression	x + y * width		8801021	1		+			
ANR	8801594	Identifier	x		8801021	0					
ANR	8801595	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801596	Identifier	y		8801021	0					
ANR	8801597	Identifier	width		8801021	1					
ANR	8801598	Argument	pstart		8801021	1					
ANR	8801599	Identifier	pstart		8801021	0					
ANR	8801600	Argument	pend		8801021	2					
ANR	8801601	Identifier	pend		8801021	0					
ANR	8801602	ExpressionStatement	cur [ x + y * width ] = prev [ x + y * width ]	137:28:2614:2650	8801021	1	True				
ANR	8801603	AssignmentExpression	cur [ x + y * width ] = prev [ x + y * width ]		8801021	0		=			
ANR	8801604	ArrayIndexing	cur [ x + y * width ]		8801021	0					
ANR	8801605	Identifier	cur		8801021	0					
ANR	8801606	AdditiveExpression	x + y * width		8801021	1		+			
ANR	8801607	Identifier	x		8801021	0					
ANR	8801608	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801609	Identifier	y		8801021	0					
ANR	8801610	Identifier	width		8801021	1					
ANR	8801611	ArrayIndexing	prev [ x + y * width ]		8801021	1					
ANR	8801612	Identifier	prev		8801021	0					
ANR	8801613	AdditiveExpression	x + y * width		8801021	1		+			
ANR	8801614	Identifier	x		8801021	0					
ANR	8801615	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801616	Identifier	y		8801021	0					
ANR	8801617	Identifier	width		8801021	1					
ANR	8801618	ElseStatement	else		8801021	0					
ANR	8801619	ExpressionStatement	cur [ x + y * width ] = a	141:28:2711:2731	8801021	0	True				
ANR	8801620	AssignmentExpression	cur [ x + y * width ] = a		8801021	0		=			
ANR	8801621	ArrayIndexing	cur [ x + y * width ]		8801021	0					
ANR	8801622	Identifier	cur		8801021	0					
ANR	8801623	AdditiveExpression	x + y * width		8801021	1		+			
ANR	8801624	Identifier	x		8801021	0					
ANR	8801625	MultiplicativeExpression	y * width		8801021	1		*			
ANR	8801626	Identifier	y		8801021	0					
ANR	8801627	Identifier	width		8801021	1					
ANR	8801628	Identifier	a		8801021	1					
ANR	8801629	BreakStatement	break ;	143:16:2750:2755	8801021	10	True				
ANR	8801630	Label	case 3 :	145:12:2770:2776	8801021	11	True				
ANR	8801631	ExpressionStatement	"av_log ( c -> avctx , AV_LOG_ERROR , ""Invalid opcode seen @%d\\n"" , blk )"	147:16:2795:2858	8801021	12	True				
ANR	8801632	CallExpression	"av_log ( c -> avctx , AV_LOG_ERROR , ""Invalid opcode seen @%d\\n"" , blk )"		8801021	0					
ANR	8801633	Callee	av_log		8801021	0					
ANR	8801634	Identifier	av_log		8801021	0					
ANR	8801635	ArgumentList	c -> avctx		8801021	1					
ANR	8801636	Argument	c -> avctx		8801021	0					
ANR	8801637	PtrMemberAccess	c -> avctx		8801021	0					
ANR	8801638	Identifier	c		8801021	0					
ANR	8801639	Identifier	avctx		8801021	1					
ANR	8801640	Argument	AV_LOG_ERROR		8801021	1					
ANR	8801641	Identifier	AV_LOG_ERROR		8801021	0					
ANR	8801642	Argument	"""Invalid opcode seen @%d\\n"""		8801021	2					
ANR	8801643	PrimaryExpression	"""Invalid opcode seen @%d\\n"""		8801021	0					
ANR	8801644	Argument	blk		8801021	3					
ANR	8801645	Identifier	blk		8801021	0					
ANR	8801646	ReturnStatement	return - 1 ;	149:16:2877:2886	8801021	13	True				
ANR	8801647	UnaryOperationExpression	- 1		8801021	0					
ANR	8801648	UnaryOperator	-		8801021	0					
ANR	8801649	PrimaryExpression	1		8801021	1					
ANR	8801650	BreakStatement	break ;	153:12:2916:2921	8801021	16	True				
ANR	8801651	ExpressionStatement	blocktypes <<= 2	157:8:2943:2959	8801021	2	True				
ANR	8801652	AssignmentExpression	blocktypes <<= 2		8801021	0		<<=			
ANR	8801653	Identifier	blocktypes		8801021	0					
ANR	8801654	PrimaryExpression	2		8801021	1					
ANR	8801655	ExpressionStatement	cur += 4	159:8:2970:2979	8801021	3	True				
ANR	8801656	AssignmentExpression	cur += 4		8801021	0		+=			
ANR	8801657	Identifier	cur		8801021	0					
ANR	8801658	PrimaryExpression	4		8801021	1					
ANR	8801659	ExpressionStatement	prev += 4	161:8:2990:2999	8801021	4	True				
ANR	8801660	AssignmentExpression	prev += 4		8801021	0		+=			
ANR	8801661	Identifier	prev		8801021	0					
ANR	8801662	PrimaryExpression	4		8801021	1					
ANR	8801663	ExpressionStatement	blk2 ++	163:8:3010:3016	8801021	5	True				
ANR	8801664	PostIncDecOperationExpression	blk2 ++		8801021	0					
ANR	8801665	Identifier	blk2		8801021	0					
ANR	8801666	IncDec	++		8801021	1					
ANR	8801667	IfStatement	if ( blk2 == ( width >> 2 ) )		8801021	6					
ANR	8801668	Condition	blk2 == ( width >> 2 )	165:11:3030:3049	8801021	0	True				
ANR	8801669	EqualityExpression	blk2 == ( width >> 2 )		8801021	0		==			
ANR	8801670	Identifier	blk2		8801021	0					
ANR	8801671	ShiftExpression	width >> 2		8801021	1		>>			
ANR	8801672	Identifier	width		8801021	0					
ANR	8801673	PrimaryExpression	2		8801021	1					
ANR	8801674	CompoundStatement		163:32:2969:2969	8801021	1					
ANR	8801675	ExpressionStatement	blk2 = 0	167:12:3066:3074	8801021	0	True				
ANR	8801676	AssignmentExpression	blk2 = 0		8801021	0		=			
ANR	8801677	Identifier	blk2		8801021	0					
ANR	8801678	PrimaryExpression	0		8801021	1					
ANR	8801679	ExpressionStatement	cur += width * 3	169:12:3089:3106	8801021	1	True				
ANR	8801680	AssignmentExpression	cur += width * 3		8801021	0		+=			
ANR	8801681	Identifier	cur		8801021	0					
ANR	8801682	MultiplicativeExpression	width * 3		8801021	1		*			
ANR	8801683	Identifier	width		8801021	0					
ANR	8801684	PrimaryExpression	3		8801021	1					
ANR	8801685	ExpressionStatement	prev += width * 3	171:12:3121:3138	8801021	2	True				
ANR	8801686	AssignmentExpression	prev += width * 3		8801021	0		+=			
ANR	8801687	Identifier	prev		8801021	0					
ANR	8801688	MultiplicativeExpression	width * 3		8801021	1		*			
ANR	8801689	Identifier	width		8801021	0					
ANR	8801690	PrimaryExpression	3		8801021	1					
ANR	8801691	ReturnStatement	return 0 ;	177:4:3163:3171	8801021	13	True				
ANR	8801692	PrimaryExpression	0		8801021	0					
ANR	8801693	ReturnType	static int		8801021	1					
ANR	8801694	Identifier	vb_decode_framedata		8801021	2					
ANR	8801695	ParameterList	"VBDecContext * c , const uint8_t * buf , int offset"		8801021	3					
ANR	8801696	Parameter	VBDecContext * c	1:31:31:45	8801021	0	True				
ANR	8801697	ParameterType	VBDecContext *		8801021	0					
ANR	8801698	Identifier	c		8801021	1					
ANR	8801699	Parameter	const uint8_t * buf	1:48:48:65	8801021	1	True				
ANR	8801700	ParameterType	const uint8_t *		8801021	0					
ANR	8801701	Identifier	buf		8801021	1					
ANR	8801702	Parameter	int offset	1:68:68:77	8801021	2	True				
ANR	8801703	ParameterType	int		8801021	0					
ANR	8801704	Identifier	offset		8801021	1					
ANR	8801705	CFGEntryNode	ENTRY		8801021		True				
ANR	8801706	CFGExitNode	EXIT		8801021		True				
ANR	8801707	Symbol	cur		8801021						
ANR	8801708	Symbol	check_pixel		8801021						
ANR	8801709	Symbol	* x		8801021						
ANR	8801710	Symbol	* y		8801021						
ANR	8801711	Symbol	pattype		8801021						
ANR	8801712	Symbol	c -> prev_frame		8801021						
ANR	8801713	Symbol	* vb_patterns		8801021						
ANR	8801714	Symbol	* c -> avctx		8801021						
ANR	8801715	Symbol	prev		8801021						
ANR	8801716	Symbol	pattern		8801021						
ANR	8801717	Symbol	* prev		8801021						
ANR	8801718	Symbol	* width		8801021						
ANR	8801719	Symbol	blocktypes		8801021						
ANR	8801720	Symbol	* cur		8801021						
ANR	8801721	Symbol	pstart		8801021						
ANR	8801722	Symbol	check_line		8801021						
ANR	8801723	Symbol	c -> avctx -> width		8801021						
ANR	8801724	Symbol	& buf		8801021						
ANR	8801725	Symbol	blk2		8801021						
ANR	8801726	Symbol	pend		8801021						
ANR	8801727	Symbol	blk		8801021						
ANR	8801728	Symbol	a		8801021						
ANR	8801729	Symbol	b		8801021						
ANR	8801730	Symbol	c -> frame		8801021						
ANR	8801731	Symbol	c		8801021						
ANR	8801732	Symbol	offset		8801021						
ANR	8801733	Symbol	AV_LOG_ERROR		8801021						
ANR	8801734	Symbol	bytestream_get_byte		8801021						
ANR	8801735	Symbol	blocks		8801021						
ANR	8801736	Symbol	vb_patterns		8801021						
ANR	8801737	Symbol	* * c		8801021						
ANR	8801738	Symbol	* c		8801021						
ANR	8801739	Symbol	buf		8801021						
ANR	8801740	Symbol	t		8801021						
ANR	8801741	Symbol	c -> avctx		8801021						
ANR	8801742	Symbol	c -> avctx -> height		8801021						
ANR	8801743	Symbol	x		8801021						
ANR	8801744	Symbol	width		8801021						
ANR	8801745	Symbol	y		8801021						
ANR	8801746	Symbol	* t		8801021						
ANR	8801747	Symbol	~pattern		8801021						
