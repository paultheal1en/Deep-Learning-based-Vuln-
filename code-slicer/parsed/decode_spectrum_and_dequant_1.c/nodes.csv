command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2066571	File	/home/p4ultr4n/workplace/ReVeal/raw_code/decode_spectrum_and_dequant_1.c								
ANR	2066572	Function	decode_spectrum_and_dequant	1:0:0:4723							
ANR	2066573	FunctionDef	"decode_spectrum_and_dequant (AACContext * ac , float coef [ 1024 ] , GetBitContext * gb , float sf [ 120 ] , int pulse_present , const Pulse * pulse , const IndividualChannelStream * ics , enum BandType band_type [ 120 ])"		2066572	0					
ANR	2066574	CompoundStatement		3:115:225:4723	2066572	0					
ANR	2066575	IdentifierDeclStatement	"int i , k , g , idx = 0 ;"	5:4:232:252	2066572	0	True				
ANR	2066576	IdentifierDecl	i		2066572	0					
ANR	2066577	IdentifierDeclType	int		2066572	0					
ANR	2066578	Identifier	i		2066572	1					
ANR	2066579	IdentifierDecl	k		2066572	1					
ANR	2066580	IdentifierDeclType	int		2066572	0					
ANR	2066581	Identifier	k		2066572	1					
ANR	2066582	IdentifierDecl	g		2066572	2					
ANR	2066583	IdentifierDeclType	int		2066572	0					
ANR	2066584	Identifier	g		2066572	1					
ANR	2066585	IdentifierDecl	idx = 0		2066572	3					
ANR	2066586	IdentifierDeclType	int		2066572	0					
ANR	2066587	Identifier	idx		2066572	1					
ANR	2066588	AssignmentExpression	idx = 0		2066572	2		=			
ANR	2066589	Identifier	idx		2066572	0					
ANR	2066590	PrimaryExpression	0		2066572	1					
ANR	2066591	IdentifierDeclStatement	const int c = 1024 / ics -> num_windows ;	7:4:259:294	2066572	1	True				
ANR	2066592	IdentifierDecl	c = 1024 / ics -> num_windows		2066572	0					
ANR	2066593	IdentifierDeclType	const int		2066572	0					
ANR	2066594	Identifier	c		2066572	1					
ANR	2066595	AssignmentExpression	c = 1024 / ics -> num_windows		2066572	2		=			
ANR	2066596	Identifier	c		2066572	0					
ANR	2066597	MultiplicativeExpression	1024 / ics -> num_windows		2066572	1		/			
ANR	2066598	PrimaryExpression	1024		2066572	0					
ANR	2066599	PtrMemberAccess	ics -> num_windows		2066572	1					
ANR	2066600	Identifier	ics		2066572	0					
ANR	2066601	Identifier	num_windows		2066572	1					
ANR	2066602	IdentifierDeclStatement	const uint16_t * offsets = ics -> swb_offset ;	9:4:301:343	2066572	2	True				
ANR	2066603	IdentifierDecl	* offsets = ics -> swb_offset		2066572	0					
ANR	2066604	IdentifierDeclType	const uint16_t *		2066572	0					
ANR	2066605	Identifier	offsets		2066572	1					
ANR	2066606	AssignmentExpression	* offsets = ics -> swb_offset		2066572	2		=			
ANR	2066607	Identifier	offsets		2066572	0					
ANR	2066608	PtrMemberAccess	ics -> swb_offset		2066572	1					
ANR	2066609	Identifier	ics		2066572	0					
ANR	2066610	Identifier	swb_offset		2066572	1					
ANR	2066611	IdentifierDeclStatement	float * coef_base = coef ;	11:4:350:373	2066572	3	True				
ANR	2066612	IdentifierDecl	* coef_base = coef		2066572	0					
ANR	2066613	IdentifierDeclType	float *		2066572	0					
ANR	2066614	Identifier	coef_base		2066572	1					
ANR	2066615	AssignmentExpression	* coef_base = coef		2066572	2		=			
ANR	2066616	Identifier	coef		2066572	0					
ANR	2066617	Identifier	coef		2066572	1					
ANR	2066618	ForStatement	for ( g = 0 ; g < ics -> num_windows ; g ++ )		2066572	4					
ANR	2066619	ForInit	g = 0 ;	15:9:387:392	2066572	0	True				
ANR	2066620	AssignmentExpression	g = 0		2066572	0		=			
ANR	2066621	Identifier	g		2066572	0					
ANR	2066622	PrimaryExpression	0		2066572	1					
ANR	2066623	Condition	g < ics -> num_windows	15:16:394:413	2066572	1	True				
ANR	2066624	RelationalExpression	g < ics -> num_windows		2066572	0		<			
ANR	2066625	Identifier	g		2066572	0					
ANR	2066626	PtrMemberAccess	ics -> num_windows		2066572	1					
ANR	2066627	Identifier	ics		2066572	0					
ANR	2066628	Identifier	num_windows		2066572	1					
ANR	2066629	PostIncDecOperationExpression	g ++	15:38:416:418	2066572	2	True				
ANR	2066630	Identifier	g		2066572	0					
ANR	2066631	IncDec	++		2066572	1					
ANR	2066632	ExpressionStatement	"memset ( coef + g * 128 + offsets [ ics -> max_sfb ] , 0 , sizeof ( float ) * ( c - offsets [ ics -> max_sfb ] ) )"	17:8:430:522	2066572	3	True				
ANR	2066633	CallExpression	"memset ( coef + g * 128 + offsets [ ics -> max_sfb ] , 0 , sizeof ( float ) * ( c - offsets [ ics -> max_sfb ] ) )"		2066572	0					
ANR	2066634	Callee	memset		2066572	0					
ANR	2066635	Identifier	memset		2066572	0					
ANR	2066636	ArgumentList	coef + g * 128 + offsets [ ics -> max_sfb ]		2066572	1					
ANR	2066637	Argument	coef + g * 128 + offsets [ ics -> max_sfb ]		2066572	0					
ANR	2066638	AdditiveExpression	coef + g * 128 + offsets [ ics -> max_sfb ]		2066572	0		+			
ANR	2066639	Identifier	coef		2066572	0					
ANR	2066640	AdditiveExpression	g * 128 + offsets [ ics -> max_sfb ]		2066572	1		+			
ANR	2066641	MultiplicativeExpression	g * 128		2066572	0		*			
ANR	2066642	Identifier	g		2066572	0					
ANR	2066643	PrimaryExpression	128		2066572	1					
ANR	2066644	ArrayIndexing	offsets [ ics -> max_sfb ]		2066572	1					
ANR	2066645	Identifier	offsets		2066572	0					
ANR	2066646	PtrMemberAccess	ics -> max_sfb		2066572	1					
ANR	2066647	Identifier	ics		2066572	0					
ANR	2066648	Identifier	max_sfb		2066572	1					
ANR	2066649	Argument	0		2066572	1					
ANR	2066650	PrimaryExpression	0		2066572	0					
ANR	2066651	Argument	sizeof ( float ) * ( c - offsets [ ics -> max_sfb ] )		2066572	2					
ANR	2066652	MultiplicativeExpression	sizeof ( float ) * ( c - offsets [ ics -> max_sfb ] )		2066572	0		*			
ANR	2066653	SizeofExpression	sizeof ( float )		2066572	0					
ANR	2066654	Sizeof	sizeof		2066572	0					
ANR	2066655	SizeofOperand	float		2066572	1					
ANR	2066656	AdditiveExpression	c - offsets [ ics -> max_sfb ]		2066572	1		-			
ANR	2066657	Identifier	c		2066572	0					
ANR	2066658	ArrayIndexing	offsets [ ics -> max_sfb ]		2066572	1					
ANR	2066659	Identifier	offsets		2066572	0					
ANR	2066660	PtrMemberAccess	ics -> max_sfb		2066572	1					
ANR	2066661	Identifier	ics		2066572	0					
ANR	2066662	Identifier	max_sfb		2066572	1					
ANR	2066663	ForStatement	for ( g = 0 ; g < ics -> num_window_groups ; g ++ )		2066572	5					
ANR	2066664	ForInit	g = 0 ;	21:9:536:541	2066572	0	True				
ANR	2066665	AssignmentExpression	g = 0		2066572	0		=			
ANR	2066666	Identifier	g		2066572	0					
ANR	2066667	PrimaryExpression	0		2066572	1					
ANR	2066668	Condition	g < ics -> num_window_groups	21:16:543:568	2066572	1	True				
ANR	2066669	RelationalExpression	g < ics -> num_window_groups		2066572	0		<			
ANR	2066670	Identifier	g		2066572	0					
ANR	2066671	PtrMemberAccess	ics -> num_window_groups		2066572	1					
ANR	2066672	Identifier	ics		2066572	0					
ANR	2066673	Identifier	num_window_groups		2066572	1					
ANR	2066674	PostIncDecOperationExpression	g ++	21:44:571:573	2066572	2	True				
ANR	2066675	Identifier	g		2066572	0					
ANR	2066676	IncDec	++		2066572	1					
ANR	2066677	CompoundStatement		19:49:350:350	2066572	3					
ANR	2066678	ForStatement	"for ( i = 0 ; i < ics -> max_sfb ; i ++ , idx ++ )"		2066572	0					
ANR	2066679	ForInit	i = 0 ;	23:13:592:597	2066572	0	True				
ANR	2066680	AssignmentExpression	i = 0		2066572	0		=			
ANR	2066681	Identifier	i		2066572	0					
ANR	2066682	PrimaryExpression	0		2066572	1					
ANR	2066683	Condition	i < ics -> max_sfb	23:20:599:614	2066572	1	True				
ANR	2066684	RelationalExpression	i < ics -> max_sfb		2066572	0		<			
ANR	2066685	Identifier	i		2066572	0					
ANR	2066686	PtrMemberAccess	ics -> max_sfb		2066572	1					
ANR	2066687	Identifier	ics		2066572	0					
ANR	2066688	Identifier	max_sfb		2066572	1					
ANR	2066689	Expression	"i ++ , idx ++"	23:38:617:626	2066572	2	True				
ANR	2066690	PostIncDecOperationExpression	i ++		2066572	0					
ANR	2066691	Identifier	i		2066572	0					
ANR	2066692	IncDec	++		2066572	1					
ANR	2066693	PostIncDecOperationExpression	idx ++		2066572	1					
ANR	2066694	Identifier	idx		2066572	0					
ANR	2066695	IncDec	++		2066572	1					
ANR	2066696	CompoundStatement		29:12:619:628	2066572	3					
ANR	2066697	IdentifierDeclStatement	const int cur_band_type = band_type [ idx ] ;	25:12:644:684	2066572	0	True				
ANR	2066698	IdentifierDecl	cur_band_type = band_type [ idx ]		2066572	0					
ANR	2066699	IdentifierDeclType	const int		2066572	0					
ANR	2066700	Identifier	cur_band_type		2066572	1					
ANR	2066701	AssignmentExpression	cur_band_type = band_type [ idx ]		2066572	2		=			
ANR	2066702	Identifier	cur_band_type		2066572	0					
ANR	2066703	ArrayIndexing	band_type [ idx ]		2066572	1					
ANR	2066704	Identifier	band_type		2066572	0					
ANR	2066705	Identifier	idx		2066572	1					
ANR	2066706	IdentifierDeclStatement	const int dim = cur_band_type >= FIRST_PAIR_BT ? 2 : 4 ;	27:12:699:753	2066572	1	True				
ANR	2066707	IdentifierDecl	dim = cur_band_type >= FIRST_PAIR_BT ? 2 : 4		2066572	0					
ANR	2066708	IdentifierDeclType	const int		2066572	0					
ANR	2066709	Identifier	dim		2066572	1					
ANR	2066710	AssignmentExpression	dim = cur_band_type >= FIRST_PAIR_BT ? 2 : 4		2066572	2		=			
ANR	2066711	Identifier	dim		2066572	0					
ANR	2066712	ConditionalExpression	cur_band_type >= FIRST_PAIR_BT ? 2 : 4		2066572	1					
ANR	2066713	Condition	cur_band_type >= FIRST_PAIR_BT		2066572	0					
ANR	2066714	RelationalExpression	cur_band_type >= FIRST_PAIR_BT		2066572	0		>=			
ANR	2066715	Identifier	cur_band_type		2066572	0					
ANR	2066716	Identifier	FIRST_PAIR_BT		2066572	1					
ANR	2066717	PrimaryExpression	2		2066572	1					
ANR	2066718	PrimaryExpression	4		2066572	2					
ANR	2066719	IdentifierDeclStatement	const int is_cb_unsigned = IS_CODEBOOK_UNSIGNED ( cur_band_type ) ;	29:12:768:830	2066572	2	True				
ANR	2066720	IdentifierDecl	is_cb_unsigned = IS_CODEBOOK_UNSIGNED ( cur_band_type )		2066572	0					
ANR	2066721	IdentifierDeclType	const int		2066572	0					
ANR	2066722	Identifier	is_cb_unsigned		2066572	1					
ANR	2066723	AssignmentExpression	is_cb_unsigned = IS_CODEBOOK_UNSIGNED ( cur_band_type )		2066572	2		=			
ANR	2066724	Identifier	is_cb_unsigned		2066572	0					
ANR	2066725	CallExpression	IS_CODEBOOK_UNSIGNED ( cur_band_type )		2066572	1					
ANR	2066726	Callee	IS_CODEBOOK_UNSIGNED		2066572	0					
ANR	2066727	Identifier	IS_CODEBOOK_UNSIGNED		2066572	0					
ANR	2066728	ArgumentList	cur_band_type		2066572	1					
ANR	2066729	Argument	cur_band_type		2066572	0					
ANR	2066730	Identifier	cur_band_type		2066572	0					
ANR	2066731	IdentifierDeclStatement	int group ;	31:12:845:854	2066572	3	True				
ANR	2066732	IdentifierDecl	group		2066572	0					
ANR	2066733	IdentifierDeclType	int		2066572	0					
ANR	2066734	Identifier	group		2066572	1					
ANR	2066735	IfStatement	if ( cur_band_type == ZERO_BT )		2066572	4					
ANR	2066736	Condition	cur_band_type == ZERO_BT	33:16:873:896	2066572	0	True				
ANR	2066737	EqualityExpression	cur_band_type == ZERO_BT		2066572	0		==			
ANR	2066738	Identifier	cur_band_type		2066572	0					
ANR	2066739	Identifier	ZERO_BT		2066572	1					
ANR	2066740	CompoundStatement		31:42:673:673	2066572	1					
ANR	2066741	ForStatement	for ( group = 0 ; group < ics -> group_len [ g ] ; group ++ )		2066572	0					
ANR	2066742	ForInit	group = 0 ;	35:21:923:932	2066572	0	True				
ANR	2066743	AssignmentExpression	group = 0		2066572	0		=			
ANR	2066744	Identifier	group		2066572	0					
ANR	2066745	PrimaryExpression	0		2066572	1					
ANR	2066746	Condition	group < ics -> group_len [ g ]	35:32:934:958	2066572	1	True				
ANR	2066747	RelationalExpression	group < ics -> group_len [ g ]		2066572	0		<			
ANR	2066748	Identifier	group		2066572	0					
ANR	2066749	ArrayIndexing	ics -> group_len [ g ]		2066572	1					
ANR	2066750	PtrMemberAccess	ics -> group_len		2066572	0					
ANR	2066751	Identifier	ics		2066572	0					
ANR	2066752	Identifier	group_len		2066572	1					
ANR	2066753	Identifier	g		2066572	1					
ANR	2066754	PostIncDecOperationExpression	group ++	35:59:961:967	2066572	2	True				
ANR	2066755	Identifier	group		2066572	0					
ANR	2066756	IncDec	++		2066572	1					
ANR	2066757	CompoundStatement		33:68:744:744	2066572	3					
ANR	2066758	ExpressionStatement	"memset ( coef + group * 128 + offsets [ i ] , 0 , ( offsets [ i + 1 ] - offsets [ i ] ) * sizeof ( float ) )"	37:20:993:1078	2066572	0	True				
ANR	2066759	CallExpression	"memset ( coef + group * 128 + offsets [ i ] , 0 , ( offsets [ i + 1 ] - offsets [ i ] ) * sizeof ( float ) )"		2066572	0					
ANR	2066760	Callee	memset		2066572	0					
ANR	2066761	Identifier	memset		2066572	0					
ANR	2066762	ArgumentList	coef + group * 128 + offsets [ i ]		2066572	1					
ANR	2066763	Argument	coef + group * 128 + offsets [ i ]		2066572	0					
ANR	2066764	AdditiveExpression	coef + group * 128 + offsets [ i ]		2066572	0		+			
ANR	2066765	Identifier	coef		2066572	0					
ANR	2066766	AdditiveExpression	group * 128 + offsets [ i ]		2066572	1		+			
ANR	2066767	MultiplicativeExpression	group * 128		2066572	0		*			
ANR	2066768	Identifier	group		2066572	0					
ANR	2066769	PrimaryExpression	128		2066572	1					
ANR	2066770	ArrayIndexing	offsets [ i ]		2066572	1					
ANR	2066771	Identifier	offsets		2066572	0					
ANR	2066772	Identifier	i		2066572	1					
ANR	2066773	Argument	0		2066572	1					
ANR	2066774	PrimaryExpression	0		2066572	0					
ANR	2066775	Argument	( offsets [ i + 1 ] - offsets [ i ] ) * sizeof ( float )		2066572	2					
ANR	2066776	MultiplicativeExpression	( offsets [ i + 1 ] - offsets [ i ] ) * sizeof ( float )		2066572	0		*			
ANR	2066777	AdditiveExpression	offsets [ i + 1 ] - offsets [ i ]		2066572	0		-			
ANR	2066778	ArrayIndexing	offsets [ i + 1 ]		2066572	0					
ANR	2066779	Identifier	offsets		2066572	0					
ANR	2066780	AdditiveExpression	i + 1		2066572	1		+			
ANR	2066781	Identifier	i		2066572	0					
ANR	2066782	PrimaryExpression	1		2066572	1					
ANR	2066783	ArrayIndexing	offsets [ i ]		2066572	1					
ANR	2066784	Identifier	offsets		2066572	0					
ANR	2066785	Identifier	i		2066572	1					
ANR	2066786	SizeofExpression	sizeof ( float )		2066572	1					
ANR	2066787	Sizeof	sizeof		2066572	0					
ANR	2066788	SizeofOperand	float		2066572	1					
ANR	2066789	ElseStatement	else		2066572	0					
ANR	2066790	IfStatement	if ( cur_band_type == NOISE_BT )		2066572	0					
ANR	2066791	Condition	cur_band_type == NOISE_BT	41:22:1122:1146	2066572	0	True				
ANR	2066792	EqualityExpression	cur_band_type == NOISE_BT		2066572	0		==			
ANR	2066793	Identifier	cur_band_type		2066572	0					
ANR	2066794	Identifier	NOISE_BT		2066572	1					
ANR	2066795	CompoundStatement		41:16:942:1019	2066572	1					
ANR	2066796	IdentifierDeclStatement	const float scale = sf [ idx ] / ( ( offsets [ i + 1 ] - offsets [ i ] ) * PNS_MEAN_ENERGY ) ;	43:16:1168:1245	2066572	0	True				
ANR	2066797	IdentifierDecl	scale = sf [ idx ] / ( ( offsets [ i + 1 ] - offsets [ i ] ) * PNS_MEAN_ENERGY )		2066572	0					
ANR	2066798	IdentifierDeclType	const float		2066572	0					
ANR	2066799	Identifier	scale		2066572	1					
ANR	2066800	AssignmentExpression	scale = sf [ idx ] / ( ( offsets [ i + 1 ] - offsets [ i ] ) * PNS_MEAN_ENERGY )		2066572	2		=			
ANR	2066801	Identifier	scale		2066572	0					
ANR	2066802	MultiplicativeExpression	sf [ idx ] / ( ( offsets [ i + 1 ] - offsets [ i ] ) * PNS_MEAN_ENERGY )		2066572	1		/			
ANR	2066803	ArrayIndexing	sf [ idx ]		2066572	0					
ANR	2066804	Identifier	sf		2066572	0					
ANR	2066805	Identifier	idx		2066572	1					
ANR	2066806	MultiplicativeExpression	( offsets [ i + 1 ] - offsets [ i ] ) * PNS_MEAN_ENERGY		2066572	1		*			
ANR	2066807	AdditiveExpression	offsets [ i + 1 ] - offsets [ i ]		2066572	0		-			
ANR	2066808	ArrayIndexing	offsets [ i + 1 ]		2066572	0					
ANR	2066809	Identifier	offsets		2066572	0					
ANR	2066810	AdditiveExpression	i + 1		2066572	1		+			
ANR	2066811	Identifier	i		2066572	0					
ANR	2066812	PrimaryExpression	1		2066572	1					
ANR	2066813	ArrayIndexing	offsets [ i ]		2066572	1					
ANR	2066814	Identifier	offsets		2066572	0					
ANR	2066815	Identifier	i		2066572	1					
ANR	2066816	Identifier	PNS_MEAN_ENERGY		2066572	1					
ANR	2066817	ForStatement	for ( group = 0 ; group < ics -> group_len [ g ] ; group ++ )		2066572	1					
ANR	2066818	ForInit	group = 0 ;	45:21:1269:1278	2066572	0	True				
ANR	2066819	AssignmentExpression	group = 0		2066572	0		=			
ANR	2066820	Identifier	group		2066572	0					
ANR	2066821	PrimaryExpression	0		2066572	1					
ANR	2066822	Condition	group < ics -> group_len [ g ]	45:32:1280:1304	2066572	1	True				
ANR	2066823	RelationalExpression	group < ics -> group_len [ g ]		2066572	0		<			
ANR	2066824	Identifier	group		2066572	0					
ANR	2066825	ArrayIndexing	ics -> group_len [ g ]		2066572	1					
ANR	2066826	PtrMemberAccess	ics -> group_len		2066572	0					
ANR	2066827	Identifier	ics		2066572	0					
ANR	2066828	Identifier	group_len		2066572	1					
ANR	2066829	Identifier	g		2066572	1					
ANR	2066830	PostIncDecOperationExpression	group ++	45:59:1307:1313	2066572	2	True				
ANR	2066831	Identifier	group		2066572	0					
ANR	2066832	IncDec	++		2066572	1					
ANR	2066833	CompoundStatement		43:68:1090:1090	2066572	3					
ANR	2066834	ForStatement	for ( k = offsets [ i ] ; k < offsets [ i + 1 ] ; k ++ )		2066572	0					
ANR	2066835	ForInit	k = offsets [ i ] ;	47:25:1344:1358	2066572	0	True				
ANR	2066836	AssignmentExpression	k = offsets [ i ]		2066572	0		=			
ANR	2066837	Identifier	k		2066572	0					
ANR	2066838	ArrayIndexing	offsets [ i ]		2066572	1					
ANR	2066839	Identifier	offsets		2066572	0					
ANR	2066840	Identifier	i		2066572	1					
ANR	2066841	Condition	k < offsets [ i + 1 ]	47:41:1360:1375	2066572	1	True				
ANR	2066842	RelationalExpression	k < offsets [ i + 1 ]		2066572	0		<			
ANR	2066843	Identifier	k		2066572	0					
ANR	2066844	ArrayIndexing	offsets [ i + 1 ]		2066572	1					
ANR	2066845	Identifier	offsets		2066572	0					
ANR	2066846	AdditiveExpression	i + 1		2066572	1		+			
ANR	2066847	Identifier	i		2066572	0					
ANR	2066848	PrimaryExpression	1		2066572	1					
ANR	2066849	PostIncDecOperationExpression	k ++	47:59:1378:1380	2066572	2	True				
ANR	2066850	Identifier	k		2066572	0					
ANR	2066851	IncDec	++		2066572	1					
ANR	2066852	CompoundStatement		45:64:1157:1157	2066572	3					
ANR	2066853	ExpressionStatement	ac -> random_state = lcg_random ( ac -> random_state )	49:24:1410:1458	2066572	0	True				
ANR	2066854	AssignmentExpression	ac -> random_state = lcg_random ( ac -> random_state )		2066572	0		=			
ANR	2066855	PtrMemberAccess	ac -> random_state		2066572	0					
ANR	2066856	Identifier	ac		2066572	0					
ANR	2066857	Identifier	random_state		2066572	1					
ANR	2066858	CallExpression	lcg_random ( ac -> random_state )		2066572	1					
ANR	2066859	Callee	lcg_random		2066572	0					
ANR	2066860	Identifier	lcg_random		2066572	0					
ANR	2066861	ArgumentList	ac -> random_state		2066572	1					
ANR	2066862	Argument	ac -> random_state		2066572	0					
ANR	2066863	PtrMemberAccess	ac -> random_state		2066572	0					
ANR	2066864	Identifier	ac		2066572	0					
ANR	2066865	Identifier	random_state		2066572	1					
ANR	2066866	ExpressionStatement	coef [ group * 128 + k ] = ac -> random_state * scale	51:24:1485:1529	2066572	1	True				
ANR	2066867	AssignmentExpression	coef [ group * 128 + k ] = ac -> random_state * scale		2066572	0		=			
ANR	2066868	ArrayIndexing	coef [ group * 128 + k ]		2066572	0					
ANR	2066869	Identifier	coef		2066572	0					
ANR	2066870	AdditiveExpression	group * 128 + k		2066572	1		+			
ANR	2066871	MultiplicativeExpression	group * 128		2066572	0		*			
ANR	2066872	Identifier	group		2066572	0					
ANR	2066873	PrimaryExpression	128		2066572	1					
ANR	2066874	Identifier	k		2066572	1					
ANR	2066875	MultiplicativeExpression	ac -> random_state * scale		2066572	1		*			
ANR	2066876	PtrMemberAccess	ac -> random_state		2066572	0					
ANR	2066877	Identifier	ac		2066572	0					
ANR	2066878	Identifier	random_state		2066572	1					
ANR	2066879	Identifier	scale		2066572	1					
ANR	2066880	ElseStatement	else		2066572	0					
ANR	2066881	IfStatement	if ( cur_band_type != INTENSITY_BT2 && cur_band_type != INTENSITY_BT )		2066572	0					
ANR	2066882	Condition	cur_band_type != INTENSITY_BT2 && cur_band_type != INTENSITY_BT	57:22:1596:1658	2066572	0	True				
ANR	2066883	AndExpression	cur_band_type != INTENSITY_BT2 && cur_band_type != INTENSITY_BT		2066572	0		&&			
ANR	2066884	EqualityExpression	cur_band_type != INTENSITY_BT2		2066572	0		!=			
ANR	2066885	Identifier	cur_band_type		2066572	0					
ANR	2066886	Identifier	INTENSITY_BT2		2066572	1					
ANR	2066887	EqualityExpression	cur_band_type != INTENSITY_BT		2066572	1		!=			
ANR	2066888	Identifier	cur_band_type		2066572	0					
ANR	2066889	Identifier	INTENSITY_BT		2066572	1					
ANR	2066890	CompoundStatement		55:87:1435:1435	2066572	1					
ANR	2066891	ForStatement	for ( group = 0 ; group < ics -> group_len [ g ] ; group ++ )		2066572	0					
ANR	2066892	ForInit	group = 0 ;	59:21:1685:1694	2066572	0	True				
ANR	2066893	AssignmentExpression	group = 0		2066572	0		=			
ANR	2066894	Identifier	group		2066572	0					
ANR	2066895	PrimaryExpression	0		2066572	1					
ANR	2066896	Condition	group < ics -> group_len [ g ]	59:32:1696:1720	2066572	1	True				
ANR	2066897	RelationalExpression	group < ics -> group_len [ g ]		2066572	0		<			
ANR	2066898	Identifier	group		2066572	0					
ANR	2066899	ArrayIndexing	ics -> group_len [ g ]		2066572	1					
ANR	2066900	PtrMemberAccess	ics -> group_len		2066572	0					
ANR	2066901	Identifier	ics		2066572	0					
ANR	2066902	Identifier	group_len		2066572	1					
ANR	2066903	Identifier	g		2066572	1					
ANR	2066904	PostIncDecOperationExpression	group ++	59:59:1723:1729	2066572	2	True				
ANR	2066905	Identifier	group		2066572	0					
ANR	2066906	IncDec	++		2066572	1					
ANR	2066907	CompoundStatement		57:68:1506:1506	2066572	3					
ANR	2066908	ForStatement	for ( k = offsets [ i ] ; k < offsets [ i + 1 ] ; k += dim )		2066572	0					
ANR	2066909	ForInit	k = offsets [ i ] ;	61:25:1760:1774	2066572	0	True				
ANR	2066910	AssignmentExpression	k = offsets [ i ]		2066572	0		=			
ANR	2066911	Identifier	k		2066572	0					
ANR	2066912	ArrayIndexing	offsets [ i ]		2066572	1					
ANR	2066913	Identifier	offsets		2066572	0					
ANR	2066914	Identifier	i		2066572	1					
ANR	2066915	Condition	k < offsets [ i + 1 ]	61:41:1776:1791	2066572	1	True				
ANR	2066916	RelationalExpression	k < offsets [ i + 1 ]		2066572	0		<			
ANR	2066917	Identifier	k		2066572	0					
ANR	2066918	ArrayIndexing	offsets [ i + 1 ]		2066572	1					
ANR	2066919	Identifier	offsets		2066572	0					
ANR	2066920	AdditiveExpression	i + 1		2066572	1		+			
ANR	2066921	Identifier	i		2066572	0					
ANR	2066922	PrimaryExpression	1		2066572	1					
ANR	2066923	AssignmentExpression	k += dim	61:59:1794:1801	2066572	2	True	+=			
ANR	2066924	Identifier	k		2066572	0					
ANR	2066925	Identifier	dim		2066572	1					
ANR	2066926	CompoundStatement		67:24:1821:1826	2066572	3					
ANR	2066927	IdentifierDeclStatement	"const int index = get_vlc2 ( gb , vlc_spectral [ cur_band_type - 1 ] . table , 6 , 3 ) ;"	63:24:1831:1906	2066572	0	True				
ANR	2066928	IdentifierDecl	"index = get_vlc2 ( gb , vlc_spectral [ cur_band_type - 1 ] . table , 6 , 3 )"		2066572	0					
ANR	2066929	IdentifierDeclType	const int		2066572	0					
ANR	2066930	Identifier	index		2066572	1					
ANR	2066931	AssignmentExpression	"index = get_vlc2 ( gb , vlc_spectral [ cur_band_type - 1 ] . table , 6 , 3 )"		2066572	2		=			
ANR	2066932	Identifier	index		2066572	0					
ANR	2066933	CallExpression	"get_vlc2 ( gb , vlc_spectral [ cur_band_type - 1 ] . table , 6 , 3 )"		2066572	1					
ANR	2066934	Callee	get_vlc2		2066572	0					
ANR	2066935	Identifier	get_vlc2		2066572	0					
ANR	2066936	ArgumentList	gb		2066572	1					
ANR	2066937	Argument	gb		2066572	0					
ANR	2066938	Identifier	gb		2066572	0					
ANR	2066939	Argument	vlc_spectral [ cur_band_type - 1 ] . table		2066572	1					
ANR	2066940	MemberAccess	vlc_spectral [ cur_band_type - 1 ] . table		2066572	0					
ANR	2066941	ArrayIndexing	vlc_spectral [ cur_band_type - 1 ]		2066572	0					
ANR	2066942	Identifier	vlc_spectral		2066572	0					
ANR	2066943	AdditiveExpression	cur_band_type - 1		2066572	1		-			
ANR	2066944	Identifier	cur_band_type		2066572	0					
ANR	2066945	PrimaryExpression	1		2066572	1					
ANR	2066946	Identifier	table		2066572	1					
ANR	2066947	Argument	6		2066572	2					
ANR	2066948	PrimaryExpression	6		2066572	0					
ANR	2066949	Argument	3		2066572	3					
ANR	2066950	PrimaryExpression	3		2066572	0					
ANR	2066951	IdentifierDeclStatement	const int coef_tmp_idx = ( group << 7 ) + k ;	65:24:1933:1974	2066572	1	True				
ANR	2066952	IdentifierDecl	coef_tmp_idx = ( group << 7 ) + k		2066572	0					
ANR	2066953	IdentifierDeclType	const int		2066572	0					
ANR	2066954	Identifier	coef_tmp_idx		2066572	1					
ANR	2066955	AssignmentExpression	coef_tmp_idx = ( group << 7 ) + k		2066572	2		=			
ANR	2066956	Identifier	coef_tmp_idx		2066572	0					
ANR	2066957	AdditiveExpression	( group << 7 ) + k		2066572	1		+			
ANR	2066958	ShiftExpression	group << 7		2066572	0		<<			
ANR	2066959	Identifier	group		2066572	0					
ANR	2066960	PrimaryExpression	7		2066572	1					
ANR	2066961	Identifier	k		2066572	1					
ANR	2066962	IdentifierDeclStatement	const float * vq_ptr ;	67:24:2001:2020	2066572	2	True				
ANR	2066963	IdentifierDecl	* vq_ptr		2066572	0					
ANR	2066964	IdentifierDeclType	const float *		2066572	0					
ANR	2066965	Identifier	vq_ptr		2066572	1					
ANR	2066966	IdentifierDeclStatement	int j ;	69:24:2047:2052	2066572	3	True				
ANR	2066967	IdentifierDecl	j		2066572	0					
ANR	2066968	IdentifierDeclType	int		2066572	0					
ANR	2066969	Identifier	j		2066572	1					
ANR	2066970	IfStatement	if ( index >= ff_aac_spectral_sizes [ cur_band_type - 1 ] )		2066572	4					
ANR	2066971	Condition	index >= ff_aac_spectral_sizes [ cur_band_type - 1 ]	71:27:2082:2130	2066572	0	True				
ANR	2066972	RelationalExpression	index >= ff_aac_spectral_sizes [ cur_band_type - 1 ]		2066572	0		>=			
ANR	2066973	Identifier	index		2066572	0					
ANR	2066974	ArrayIndexing	ff_aac_spectral_sizes [ cur_band_type - 1 ]		2066572	1					
ANR	2066975	Identifier	ff_aac_spectral_sizes		2066572	0					
ANR	2066976	AdditiveExpression	cur_band_type - 1		2066572	1		-			
ANR	2066977	Identifier	cur_band_type		2066572	0					
ANR	2066978	PrimaryExpression	1		2066572	1					
ANR	2066979	CompoundStatement		69:78:1907:1907	2066572	1					
ANR	2066980	ExpressionStatement	"av_log ( ac -> avccontext , AV_LOG_ERROR , ""Read beyond end of ff_aac_codebook_vectors[%d][]. index %d >= %d\\n"" , cur_band_type - 1 , index , ff_aac_spectral_sizes [ cur_band_type - 1 ] )"	73:28:2164:2404	2066572	0	True				
ANR	2066981	CallExpression	"av_log ( ac -> avccontext , AV_LOG_ERROR , ""Read beyond end of ff_aac_codebook_vectors[%d][]. index %d >= %d\\n"" , cur_band_type - 1 , index , ff_aac_spectral_sizes [ cur_band_type - 1 ] )"		2066572	0					
ANR	2066982	Callee	av_log		2066572	0					
ANR	2066983	Identifier	av_log		2066572	0					
ANR	2066984	ArgumentList	ac -> avccontext		2066572	1					
ANR	2066985	Argument	ac -> avccontext		2066572	0					
ANR	2066986	PtrMemberAccess	ac -> avccontext		2066572	0					
ANR	2066987	Identifier	ac		2066572	0					
ANR	2066988	Identifier	avccontext		2066572	1					
ANR	2066989	Argument	AV_LOG_ERROR		2066572	1					
ANR	2066990	Identifier	AV_LOG_ERROR		2066572	0					
ANR	2066991	Argument	"""Read beyond end of ff_aac_codebook_vectors[%d][]. index %d >= %d\\n"""		2066572	2					
ANR	2066992	PrimaryExpression	"""Read beyond end of ff_aac_codebook_vectors[%d][]. index %d >= %d\\n"""		2066572	0					
ANR	2066993	Argument	cur_band_type - 1		2066572	3					
ANR	2066994	AdditiveExpression	cur_band_type - 1		2066572	0		-			
ANR	2066995	Identifier	cur_band_type		2066572	0					
ANR	2066996	PrimaryExpression	1		2066572	1					
ANR	2066997	Argument	index		2066572	4					
ANR	2066998	Identifier	index		2066572	0					
ANR	2066999	Argument	ff_aac_spectral_sizes [ cur_band_type - 1 ]		2066572	5					
ANR	2067000	ArrayIndexing	ff_aac_spectral_sizes [ cur_band_type - 1 ]		2066572	0					
ANR	2067001	Identifier	ff_aac_spectral_sizes		2066572	0					
ANR	2067002	AdditiveExpression	cur_band_type - 1		2066572	1		-			
ANR	2067003	Identifier	cur_band_type		2066572	0					
ANR	2067004	PrimaryExpression	1		2066572	1					
ANR	2067005	ReturnStatement	return - 1 ;	79:28:2435:2444	2066572	1	True				
ANR	2067006	UnaryOperationExpression	- 1		2066572	0					
ANR	2067007	UnaryOperator	-		2066572	0					
ANR	2067008	PrimaryExpression	1		2066572	1					
ANR	2067009	ExpressionStatement	vq_ptr = & ff_aac_codebook_vectors [ cur_band_type - 1 ] [ index * dim ]	83:24:2498:2563	2066572	5	True				
ANR	2067010	AssignmentExpression	vq_ptr = & ff_aac_codebook_vectors [ cur_band_type - 1 ] [ index * dim ]		2066572	0		=			
ANR	2067011	Identifier	vq_ptr		2066572	0					
ANR	2067012	UnaryOperationExpression	& ff_aac_codebook_vectors [ cur_band_type - 1 ] [ index * dim ]		2066572	1					
ANR	2067013	UnaryOperator	&		2066572	0					
ANR	2067014	ArrayIndexing	ff_aac_codebook_vectors [ cur_band_type - 1 ] [ index * dim ]		2066572	1					
ANR	2067015	ArrayIndexing	ff_aac_codebook_vectors [ cur_band_type - 1 ]		2066572	0					
ANR	2067016	Identifier	ff_aac_codebook_vectors		2066572	0					
ANR	2067017	AdditiveExpression	cur_band_type - 1		2066572	1		-			
ANR	2067018	Identifier	cur_band_type		2066572	0					
ANR	2067019	PrimaryExpression	1		2066572	1					
ANR	2067020	MultiplicativeExpression	index * dim		2066572	1		*			
ANR	2067021	Identifier	index		2066572	0					
ANR	2067022	Identifier	dim		2066572	1					
ANR	2067023	IfStatement	if ( is_cb_unsigned )		2066572	6					
ANR	2067024	Condition	is_cb_unsigned	85:28:2594:2607	2066572	0	True				
ANR	2067025	Identifier	is_cb_unsigned		2066572	0					
ANR	2067026	CompoundStatement		83:44:2384:2384	2066572	1					
ANR	2067027	ForStatement	for ( j = 0 ; j < dim ; j ++ )		2066572	0					
ANR	2067028	ForInit	j = 0 ;	87:33:2646:2651	2066572	0	True				
ANR	2067029	AssignmentExpression	j = 0		2066572	0		=			
ANR	2067030	Identifier	j		2066572	0					
ANR	2067031	PrimaryExpression	0		2066572	1					
ANR	2067032	Condition	j < dim	87:40:2653:2659	2066572	1	True				
ANR	2067033	RelationalExpression	j < dim		2066572	0		<			
ANR	2067034	Identifier	j		2066572	0					
ANR	2067035	Identifier	dim		2066572	1					
ANR	2067036	PostIncDecOperationExpression	j ++	87:49:2662:2664	2066572	2	True				
ANR	2067037	Identifier	j		2066572	0					
ANR	2067038	IncDec	++		2066572	1					
ANR	2067039	IfStatement	if ( vq_ptr [ j ] )		2066572	3					
ANR	2067040	Condition	vq_ptr [ j ]	89:36:2704:2712	2066572	0	True				
ANR	2067041	ArrayIndexing	vq_ptr [ j ]		2066572	0					
ANR	2067042	Identifier	vq_ptr		2066572	0					
ANR	2067043	Identifier	j		2066572	1					
ANR	2067044	ExpressionStatement	coef [ coef_tmp_idx + j ] = 1 - 2 * ( int ) get_bits1 ( gb )	91:36:2752:2801	2066572	1	True				
ANR	2067045	AssignmentExpression	coef [ coef_tmp_idx + j ] = 1 - 2 * ( int ) get_bits1 ( gb )		2066572	0		=			
ANR	2067046	ArrayIndexing	coef [ coef_tmp_idx + j ]		2066572	0					
ANR	2067047	Identifier	coef		2066572	0					
ANR	2067048	AdditiveExpression	coef_tmp_idx + j		2066572	1		+			
ANR	2067049	Identifier	coef_tmp_idx		2066572	0					
ANR	2067050	Identifier	j		2066572	1					
ANR	2067051	AdditiveExpression	1 - 2 * ( int ) get_bits1 ( gb )		2066572	1		-			
ANR	2067052	PrimaryExpression	1		2066572	0					
ANR	2067053	MultiplicativeExpression	2 * ( int ) get_bits1 ( gb )		2066572	1		*			
ANR	2067054	PrimaryExpression	2		2066572	0					
ANR	2067055	CastExpression	( int ) get_bits1 ( gb )		2066572	1					
ANR	2067056	CastTarget	int		2066572	0					
ANR	2067057	CallExpression	get_bits1 ( gb )		2066572	1					
ANR	2067058	Callee	get_bits1		2066572	0					
ANR	2067059	Identifier	get_bits1		2066572	0					
ANR	2067060	ArgumentList	gb		2066572	1					
ANR	2067061	Argument	gb		2066572	0					
ANR	2067062	Identifier	gb		2066572	0					
ANR	2067063	ElseStatement	else		2066572	0					
ANR	2067064	CompoundStatement		91:30:2608:2608	2066572	0					
ANR	2067065	ForStatement	for ( j = 0 ; j < dim ; j ++ )		2066572	0					
ANR	2067066	ForInit	j = 0 ;	95:33:2870:2875	2066572	0	True				
ANR	2067067	AssignmentExpression	j = 0		2066572	0		=			
ANR	2067068	Identifier	j		2066572	0					
ANR	2067069	PrimaryExpression	0		2066572	1					
ANR	2067070	Condition	j < dim	95:40:2877:2883	2066572	1	True				
ANR	2067071	RelationalExpression	j < dim		2066572	0		<			
ANR	2067072	Identifier	j		2066572	0					
ANR	2067073	Identifier	dim		2066572	1					
ANR	2067074	PostIncDecOperationExpression	j ++	95:49:2886:2888	2066572	2	True				
ANR	2067075	Identifier	j		2066572	0					
ANR	2067076	IncDec	++		2066572	1					
ANR	2067077	ExpressionStatement	coef [ coef_tmp_idx + j ] = 1.0f	97:32:2924:2953	2066572	3	True				
ANR	2067078	AssignmentExpression	coef [ coef_tmp_idx + j ] = 1.0f		2066572	0		=			
ANR	2067079	ArrayIndexing	coef [ coef_tmp_idx + j ]		2066572	0					
ANR	2067080	Identifier	coef		2066572	0					
ANR	2067081	AdditiveExpression	coef_tmp_idx + j		2066572	1		+			
ANR	2067082	Identifier	coef_tmp_idx		2066572	0					
ANR	2067083	Identifier	j		2066572	1					
ANR	2067084	PrimaryExpression	1.0f		2066572	1					
ANR	2067085	IfStatement	if ( cur_band_type == ESC_BT )		2066572	7					
ANR	2067086	Condition	cur_band_type == ESC_BT	101:28:3011:3033	2066572	0	True				
ANR	2067087	EqualityExpression	cur_band_type == ESC_BT		2066572	0		==			
ANR	2067088	Identifier	cur_band_type		2066572	0					
ANR	2067089	Identifier	ESC_BT		2066572	1					
ANR	2067090	CompoundStatement		99:53:2810:2810	2066572	1					
ANR	2067091	ForStatement	for ( j = 0 ; j < 2 ; j ++ )		2066572	0					
ANR	2067092	ForInit	j = 0 ;	103:33:3072:3077	2066572	0	True				
ANR	2067093	AssignmentExpression	j = 0		2066572	0		=			
ANR	2067094	Identifier	j		2066572	0					
ANR	2067095	PrimaryExpression	0		2066572	1					
ANR	2067096	Condition	j < 2	103:40:3079:3083	2066572	1	True				
ANR	2067097	RelationalExpression	j < 2		2066572	0		<			
ANR	2067098	Identifier	j		2066572	0					
ANR	2067099	PrimaryExpression	2		2066572	1					
ANR	2067100	PostIncDecOperationExpression	j ++	103:47:3086:3088	2066572	2	True				
ANR	2067101	Identifier	j		2066572	0					
ANR	2067102	IncDec	++		2066572	1					
ANR	2067103	CompoundStatement		101:52:2865:2865	2066572	3					
ANR	2067104	IfStatement	if ( vq_ptr [ j ] == 64.0f )		2066572	0					
ANR	2067105	Condition	vq_ptr [ j ] == 64.0f	105:36:3130:3147	2066572	0	True				
ANR	2067106	EqualityExpression	vq_ptr [ j ] == 64.0f		2066572	0		==			
ANR	2067107	ArrayIndexing	vq_ptr [ j ]		2066572	0					
ANR	2067108	Identifier	vq_ptr		2066572	0					
ANR	2067109	Identifier	j		2066572	1					
ANR	2067110	PrimaryExpression	64.0f		2066572	1					
ANR	2067111	CompoundStatement		105:36:2963:2972	2066572	1					
ANR	2067112	IdentifierDeclStatement	int n = 4 ;	107:36:3189:3198	2066572	0	True				
ANR	2067113	IdentifierDecl	n = 4		2066572	0					
ANR	2067114	IdentifierDeclType	int		2066572	0					
ANR	2067115	Identifier	n		2066572	1					
ANR	2067116	AssignmentExpression	n = 4		2066572	2		=			
ANR	2067117	Identifier	n		2066572	0					
ANR	2067118	PrimaryExpression	4		2066572	1					
ANR	2067119	WhileStatement	while ( get_bits1 ( gb ) && n < 15 )		2066572	1					
ANR	2067120	Condition	get_bits1 ( gb ) && n < 15	113:43:3449:3471	2066572	0	True				
ANR	2067121	AndExpression	get_bits1 ( gb ) && n < 15		2066572	0		&&			
ANR	2067122	CallExpression	get_bits1 ( gb )		2066572	0					
ANR	2067123	Callee	get_bits1		2066572	0					
ANR	2067124	Identifier	get_bits1		2066572	0					
ANR	2067125	ArgumentList	gb		2066572	1					
ANR	2067126	Argument	gb		2066572	0					
ANR	2067127	Identifier	gb		2066572	0					
ANR	2067128	RelationalExpression	n < 15		2066572	1		<			
ANR	2067129	Identifier	n		2066572	0					
ANR	2067130	PrimaryExpression	15		2066572	1					
ANR	2067131	ExpressionStatement	n ++	113:68:3474:3477	2066572	1	True				
ANR	2067132	PostIncDecOperationExpression	n ++		2066572	0					
ANR	2067133	Identifier	n		2066572	0					
ANR	2067134	IncDec	++		2066572	1					
ANR	2067135	IfStatement	if ( n == 15 )		2066572	2					
ANR	2067136	Condition	n == 15	115:39:3519:3525	2066572	0	True				
ANR	2067137	EqualityExpression	n == 15		2066572	0		==			
ANR	2067138	Identifier	n		2066572	0					
ANR	2067139	PrimaryExpression	15		2066572	1					
ANR	2067140	CompoundStatement		113:48:3302:3302	2066572	1					
ANR	2067141	ExpressionStatement	"av_log ( ac -> avccontext , AV_LOG_ERROR , ""error in spectral data, ESC overflow\\n"" )"	117:40:3571:3649	2066572	0	True				
ANR	2067142	CallExpression	"av_log ( ac -> avccontext , AV_LOG_ERROR , ""error in spectral data, ESC overflow\\n"" )"		2066572	0					
ANR	2067143	Callee	av_log		2066572	0					
ANR	2067144	Identifier	av_log		2066572	0					
ANR	2067145	ArgumentList	ac -> avccontext		2066572	1					
ANR	2067146	Argument	ac -> avccontext		2066572	0					
ANR	2067147	PtrMemberAccess	ac -> avccontext		2066572	0					
ANR	2067148	Identifier	ac		2066572	0					
ANR	2067149	Identifier	avccontext		2066572	1					
ANR	2067150	Argument	AV_LOG_ERROR		2066572	1					
ANR	2067151	Identifier	AV_LOG_ERROR		2066572	0					
ANR	2067152	Argument	"""error in spectral data, ESC overflow\\n"""		2066572	2					
ANR	2067153	PrimaryExpression	"""error in spectral data, ESC overflow\\n"""		2066572	0					
ANR	2067154	ReturnStatement	return - 1 ;	119:40:3692:3701	2066572	1	True				
ANR	2067155	UnaryOperationExpression	- 1		2066572	0					
ANR	2067156	UnaryOperator	-		2066572	0					
ANR	2067157	PrimaryExpression	1		2066572	1					
ANR	2067158	ExpressionStatement	"n = ( 1 << n ) + get_bits ( gb , n )"	123:36:3779:3807	2066572	3	True				
ANR	2067159	AssignmentExpression	"n = ( 1 << n ) + get_bits ( gb , n )"		2066572	0		=			
ANR	2067160	Identifier	n		2066572	0					
ANR	2067161	AdditiveExpression	"( 1 << n ) + get_bits ( gb , n )"		2066572	1		+			
ANR	2067162	ShiftExpression	1 << n		2066572	0		<<			
ANR	2067163	PrimaryExpression	1		2066572	0					
ANR	2067164	Identifier	n		2066572	1					
ANR	2067165	CallExpression	"get_bits ( gb , n )"		2066572	1					
ANR	2067166	Callee	get_bits		2066572	0					
ANR	2067167	Identifier	get_bits		2066572	0					
ANR	2067168	ArgumentList	gb		2066572	1					
ANR	2067169	Argument	gb		2066572	0					
ANR	2067170	Identifier	gb		2066572	0					
ANR	2067171	Argument	n		2066572	1					
ANR	2067172	Identifier	n		2066572	0					
ANR	2067173	ExpressionStatement	coef [ coef_tmp_idx + j ] *= cbrtf ( fabsf ( n ) ) * n	125:36:3846:3891	2066572	4	True				
ANR	2067174	AssignmentExpression	coef [ coef_tmp_idx + j ] *= cbrtf ( fabsf ( n ) ) * n		2066572	0		*=			
ANR	2067175	ArrayIndexing	coef [ coef_tmp_idx + j ]		2066572	0					
ANR	2067176	Identifier	coef		2066572	0					
ANR	2067177	AdditiveExpression	coef_tmp_idx + j		2066572	1		+			
ANR	2067178	Identifier	coef_tmp_idx		2066572	0					
ANR	2067179	Identifier	j		2066572	1					
ANR	2067180	MultiplicativeExpression	cbrtf ( fabsf ( n ) ) * n		2066572	1		*			
ANR	2067181	CallExpression	cbrtf ( fabsf ( n ) )		2066572	0					
ANR	2067182	Callee	cbrtf		2066572	0					
ANR	2067183	Identifier	cbrtf		2066572	0					
ANR	2067184	ArgumentList	fabsf ( n )		2066572	1					
ANR	2067185	Argument	fabsf ( n )		2066572	0					
ANR	2067186	CallExpression	fabsf ( n )		2066572	0					
ANR	2067187	Callee	fabsf		2066572	0					
ANR	2067188	Identifier	fabsf		2066572	0					
ANR	2067189	ArgumentList	n		2066572	1					
ANR	2067190	Argument	n		2066572	0					
ANR	2067191	Identifier	n		2066572	0					
ANR	2067192	Identifier	n		2066572	1					
ANR	2067193	ElseStatement	else		2066572	0					
ANR	2067194	ExpressionStatement	coef [ coef_tmp_idx + j ] *= vq_ptr [ j ]	129:36:3969:4004	2066572	0	True				
ANR	2067195	AssignmentExpression	coef [ coef_tmp_idx + j ] *= vq_ptr [ j ]		2066572	0		*=			
ANR	2067196	ArrayIndexing	coef [ coef_tmp_idx + j ]		2066572	0					
ANR	2067197	Identifier	coef		2066572	0					
ANR	2067198	AdditiveExpression	coef_tmp_idx + j		2066572	1		+			
ANR	2067199	Identifier	coef_tmp_idx		2066572	0					
ANR	2067200	Identifier	j		2066572	1					
ANR	2067201	ArrayIndexing	vq_ptr [ j ]		2066572	1					
ANR	2067202	Identifier	vq_ptr		2066572	0					
ANR	2067203	Identifier	j		2066572	1					
ANR	2067204	ElseStatement	else		2066572	0					
ANR	2067205	ForStatement	for ( j = 0 ; j < dim ; j ++ )		2066572	0					
ANR	2067206	ForInit	j = 0 ;	135:33:4102:4107	2066572	0	True				
ANR	2067207	AssignmentExpression	j = 0		2066572	0		=			
ANR	2067208	Identifier	j		2066572	0					
ANR	2067209	PrimaryExpression	0		2066572	1					
ANR	2067210	Condition	j < dim	135:40:4109:4115	2066572	1	True				
ANR	2067211	RelationalExpression	j < dim		2066572	0		<			
ANR	2067212	Identifier	j		2066572	0					
ANR	2067213	Identifier	dim		2066572	1					
ANR	2067214	PostIncDecOperationExpression	j ++	135:49:4118:4120	2066572	2	True				
ANR	2067215	Identifier	j		2066572	0					
ANR	2067216	IncDec	++		2066572	1					
ANR	2067217	ExpressionStatement	coef [ coef_tmp_idx + j ] *= vq_ptr [ j ]	137:32:4156:4191	2066572	3	True				
ANR	2067218	AssignmentExpression	coef [ coef_tmp_idx + j ] *= vq_ptr [ j ]		2066572	0		*=			
ANR	2067219	ArrayIndexing	coef [ coef_tmp_idx + j ]		2066572	0					
ANR	2067220	Identifier	coef		2066572	0					
ANR	2067221	AdditiveExpression	coef_tmp_idx + j		2066572	1		+			
ANR	2067222	Identifier	coef_tmp_idx		2066572	0					
ANR	2067223	Identifier	j		2066572	1					
ANR	2067224	ArrayIndexing	vq_ptr [ j ]		2066572	1					
ANR	2067225	Identifier	vq_ptr		2066572	0					
ANR	2067226	Identifier	j		2066572	1					
ANR	2067227	ForStatement	for ( j = 0 ; j < dim ; j ++ )		2066572	8					
ANR	2067228	ForInit	j = 0 ;	139:29:4223:4228	2066572	0	True				
ANR	2067229	AssignmentExpression	j = 0		2066572	0		=			
ANR	2067230	Identifier	j		2066572	0					
ANR	2067231	PrimaryExpression	0		2066572	1					
ANR	2067232	Condition	j < dim	139:36:4230:4236	2066572	1	True				
ANR	2067233	RelationalExpression	j < dim		2066572	0		<			
ANR	2067234	Identifier	j		2066572	0					
ANR	2067235	Identifier	dim		2066572	1					
ANR	2067236	PostIncDecOperationExpression	j ++	139:45:4239:4241	2066572	2	True				
ANR	2067237	Identifier	j		2066572	0					
ANR	2067238	IncDec	++		2066572	1					
ANR	2067239	ExpressionStatement	coef [ coef_tmp_idx + j ] *= sf [ idx ]	141:28:4273:4306	2066572	3	True				
ANR	2067240	AssignmentExpression	coef [ coef_tmp_idx + j ] *= sf [ idx ]		2066572	0		*=			
ANR	2067241	ArrayIndexing	coef [ coef_tmp_idx + j ]		2066572	0					
ANR	2067242	Identifier	coef		2066572	0					
ANR	2067243	AdditiveExpression	coef_tmp_idx + j		2066572	1		+			
ANR	2067244	Identifier	coef_tmp_idx		2066572	0					
ANR	2067245	Identifier	j		2066572	1					
ANR	2067246	ArrayIndexing	sf [ idx ]		2066572	1					
ANR	2067247	Identifier	sf		2066572	0					
ANR	2067248	Identifier	idx		2066572	1					
ANR	2067249	ExpressionStatement	coef += ics -> group_len [ g ] << 7	151:8:4385:4413	2066572	1	True				
ANR	2067250	AssignmentExpression	coef += ics -> group_len [ g ] << 7		2066572	0		+=			
ANR	2067251	Identifier	coef		2066572	0					
ANR	2067252	ShiftExpression	ics -> group_len [ g ] << 7		2066572	1		<<			
ANR	2067253	ArrayIndexing	ics -> group_len [ g ]		2066572	0					
ANR	2067254	PtrMemberAccess	ics -> group_len		2066572	0					
ANR	2067255	Identifier	ics		2066572	0					
ANR	2067256	Identifier	group_len		2066572	1					
ANR	2067257	Identifier	g		2066572	1					
ANR	2067258	PrimaryExpression	7		2066572	1					
ANR	2067259	IfStatement	if ( pulse_present )		2066572	6					
ANR	2067260	Condition	pulse_present	157:8:4433:4445	2066572	0	True				
ANR	2067261	Identifier	pulse_present		2066572	0					
ANR	2067262	CompoundStatement		155:23:4222:4222	2066572	1					
ANR	2067263	ForStatement	for ( i = 0 ; i < pulse -> num_pulse ; i ++ )		2066572	0					
ANR	2067264	ForInit	i = 0 ;	159:12:4463:4468	2066572	0	True				
ANR	2067265	AssignmentExpression	i = 0		2066572	0		=			
ANR	2067266	Identifier	i		2066572	0					
ANR	2067267	PrimaryExpression	0		2066572	1					
ANR	2067268	Condition	i < pulse -> num_pulse	159:19:4470:4489	2066572	1	True				
ANR	2067269	RelationalExpression	i < pulse -> num_pulse		2066572	0		<			
ANR	2067270	Identifier	i		2066572	0					
ANR	2067271	PtrMemberAccess	pulse -> num_pulse		2066572	1					
ANR	2067272	Identifier	pulse		2066572	0					
ANR	2067273	Identifier	num_pulse		2066572	1					
ANR	2067274	PostIncDecOperationExpression	i ++	159:41:4492:4494	2066572	2	True				
ANR	2067275	Identifier	i		2066572	0					
ANR	2067276	IncDec	++		2066572	1					
ANR	2067277	CompoundStatement		161:12:4338:4394	2066572	3					
ANR	2067278	IdentifierDeclStatement	float co = coef_base [ pulse -> pos [ i ] ] ;	161:12:4511:4549	2066572	0	True				
ANR	2067279	IdentifierDecl	co = coef_base [ pulse -> pos [ i ] ]		2066572	0					
ANR	2067280	IdentifierDeclType	float		2066572	0					
ANR	2067281	Identifier	co		2066572	1					
ANR	2067282	AssignmentExpression	co = coef_base [ pulse -> pos [ i ] ]		2066572	2		=			
ANR	2067283	Identifier	co		2066572	0					
ANR	2067284	ArrayIndexing	coef_base [ pulse -> pos [ i ] ]		2066572	1					
ANR	2067285	Identifier	coef_base		2066572	0					
ANR	2067286	ArrayIndexing	pulse -> pos [ i ]		2066572	1					
ANR	2067287	PtrMemberAccess	pulse -> pos		2066572	0					
ANR	2067288	Identifier	pulse		2066572	0					
ANR	2067289	Identifier	pos		2066572	1					
ANR	2067290	Identifier	i		2066572	1					
ANR	2067291	IdentifierDeclStatement	float ico = co / sqrtf ( sqrtf ( fabsf ( co ) ) ) + pulse -> amp [ i ] ;	163:12:4564:4620	2066572	1	True				
ANR	2067292	IdentifierDecl	ico = co / sqrtf ( sqrtf ( fabsf ( co ) ) ) + pulse -> amp [ i ]		2066572	0					
ANR	2067293	IdentifierDeclType	float		2066572	0					
ANR	2067294	Identifier	ico		2066572	1					
ANR	2067295	AssignmentExpression	ico = co / sqrtf ( sqrtf ( fabsf ( co ) ) ) + pulse -> amp [ i ]		2066572	2		=			
ANR	2067296	Identifier	ico		2066572	0					
ANR	2067297	AdditiveExpression	co / sqrtf ( sqrtf ( fabsf ( co ) ) ) + pulse -> amp [ i ]		2066572	1		+			
ANR	2067298	MultiplicativeExpression	co / sqrtf ( sqrtf ( fabsf ( co ) ) )		2066572	0		/			
ANR	2067299	Identifier	co		2066572	0					
ANR	2067300	CallExpression	sqrtf ( sqrtf ( fabsf ( co ) ) )		2066572	1					
ANR	2067301	Callee	sqrtf		2066572	0					
ANR	2067302	Identifier	sqrtf		2066572	0					
ANR	2067303	ArgumentList	sqrtf ( fabsf ( co ) )		2066572	1					
ANR	2067304	Argument	sqrtf ( fabsf ( co ) )		2066572	0					
ANR	2067305	CallExpression	sqrtf ( fabsf ( co ) )		2066572	0					
ANR	2067306	Callee	sqrtf		2066572	0					
ANR	2067307	Identifier	sqrtf		2066572	0					
ANR	2067308	ArgumentList	fabsf ( co )		2066572	1					
ANR	2067309	Argument	fabsf ( co )		2066572	0					
ANR	2067310	CallExpression	fabsf ( co )		2066572	0					
ANR	2067311	Callee	fabsf		2066572	0					
ANR	2067312	Identifier	fabsf		2066572	0					
ANR	2067313	ArgumentList	co		2066572	1					
ANR	2067314	Argument	co		2066572	0					
ANR	2067315	Identifier	co		2066572	0					
ANR	2067316	ArrayIndexing	pulse -> amp [ i ]		2066572	1					
ANR	2067317	PtrMemberAccess	pulse -> amp		2066572	0					
ANR	2067318	Identifier	pulse		2066572	0					
ANR	2067319	Identifier	amp		2066572	1					
ANR	2067320	Identifier	i		2066572	1					
ANR	2067321	ExpressionStatement	coef_base [ pulse -> pos [ i ] ] = cbrtf ( fabsf ( ico ) ) * ico	165:12:4635:4687	2066572	2	True				
ANR	2067322	AssignmentExpression	coef_base [ pulse -> pos [ i ] ] = cbrtf ( fabsf ( ico ) ) * ico		2066572	0		=			
ANR	2067323	ArrayIndexing	coef_base [ pulse -> pos [ i ] ]		2066572	0					
ANR	2067324	Identifier	coef_base		2066572	0					
ANR	2067325	ArrayIndexing	pulse -> pos [ i ]		2066572	1					
ANR	2067326	PtrMemberAccess	pulse -> pos		2066572	0					
ANR	2067327	Identifier	pulse		2066572	0					
ANR	2067328	Identifier	pos		2066572	1					
ANR	2067329	Identifier	i		2066572	1					
ANR	2067330	MultiplicativeExpression	cbrtf ( fabsf ( ico ) ) * ico		2066572	1		*			
ANR	2067331	CallExpression	cbrtf ( fabsf ( ico ) )		2066572	0					
ANR	2067332	Callee	cbrtf		2066572	0					
ANR	2067333	Identifier	cbrtf		2066572	0					
ANR	2067334	ArgumentList	fabsf ( ico )		2066572	1					
ANR	2067335	Argument	fabsf ( ico )		2066572	0					
ANR	2067336	CallExpression	fabsf ( ico )		2066572	0					
ANR	2067337	Callee	fabsf		2066572	0					
ANR	2067338	Identifier	fabsf		2066572	0					
ANR	2067339	ArgumentList	ico		2066572	1					
ANR	2067340	Argument	ico		2066572	0					
ANR	2067341	Identifier	ico		2066572	0					
ANR	2067342	Identifier	ico		2066572	1					
ANR	2067343	ReturnStatement	return 0 ;	171:4:4712:4720	2066572	7	True				
ANR	2067344	PrimaryExpression	0		2066572	0					
ANR	2067345	ReturnType	static int		2066572	1					
ANR	2067346	Identifier	decode_spectrum_and_dequant		2066572	2					
ANR	2067347	ParameterList	"AACContext * ac , float coef [ 1024 ] , GetBitContext * gb , float sf [ 120 ] , int pulse_present , const Pulse * pulse , const IndividualChannelStream * ics , enum BandType band_type [ 120 ]"		2066572	3					
ANR	2067348	Parameter	AACContext * ac	1:39:39:53	2066572	0	True				
ANR	2067349	ParameterType	AACContext *		2066572	0					
ANR	2067350	Identifier	ac		2066572	1					
ANR	2067351	Parameter	float coef [ 1024 ]	1:56:56:71	2066572	1	True				
ANR	2067352	ParameterType	float [ 1024 ]		2066572	0					
ANR	2067353	Identifier	coef		2066572	1					
ANR	2067354	Parameter	GetBitContext * gb	1:74:74:91	2066572	2	True				
ANR	2067355	ParameterType	GetBitContext *		2066572	0					
ANR	2067356	Identifier	gb		2066572	1					
ANR	2067357	Parameter	float sf [ 120 ]	1:94:94:106	2066572	3	True				
ANR	2067358	ParameterType	float [ 120 ]		2066572	0					
ANR	2067359	Identifier	sf		2066572	1					
ANR	2067360	Parameter	int pulse_present	3:8:118:134	2066572	4	True				
ANR	2067361	ParameterType	int		2066572	0					
ANR	2067362	Identifier	pulse_present		2066572	1					
ANR	2067363	Parameter	const Pulse * pulse	3:27:137:155	2066572	5	True				
ANR	2067364	ParameterType	const Pulse *		2066572	0					
ANR	2067365	Identifier	pulse		2066572	1					
ANR	2067366	Parameter	const IndividualChannelStream * ics	3:48:158:192	2066572	6	True				
ANR	2067367	ParameterType	const IndividualChannelStream *		2066572	0					
ANR	2067368	Identifier	ics		2066572	1					
ANR	2067369	Parameter	enum BandType band_type [ 120 ]	3:85:195:222	2066572	7	True				
ANR	2067370	ParameterType	enum BandType [ 120 ]		2066572	0					
ANR	2067371	Identifier	band_type		2066572	1					
ANR	2067372	CFGEntryNode	ENTRY		2066572		True				
ANR	2067373	CFGExitNode	EXIT		2066572		True				
ANR	2067374	Symbol	is_cb_unsigned		2066572						
ANR	2067375	Symbol	band_type		2066572						
ANR	2067376	Symbol	INTENSITY_BT		2066572						
ANR	2067377	Symbol	cbrtf		2066572						
ANR	2067378	Symbol	pulse_present		2066572						
ANR	2067379	Symbol	get_bits		2066572						
ANR	2067380	Symbol	dim		2066572						
ANR	2067381	Symbol	pulse -> num_pulse		2066572						
ANR	2067382	Symbol	* * pulse		2066572						
ANR	2067383	Symbol	* coef_tmp_idx		2066572						
ANR	2067384	Symbol	* ff_aac_spectral_sizes		2066572						
ANR	2067385	Symbol	ZERO_BT		2066572						
ANR	2067386	Symbol	ff_aac_codebook_vectors		2066572						
ANR	2067387	Symbol	ESC_BT		2066572						
ANR	2067388	Symbol	ico		2066572						
ANR	2067389	Symbol	ics -> num_window_groups		2066572						
ANR	2067390	Symbol	pulse -> pos		2066572						
ANR	2067391	Symbol	ics		2066572						
ANR	2067392	Symbol	* idx		2066572						
ANR	2067393	Symbol	* sf		2066572						
ANR	2067394	Symbol	* ics -> max_sfb		2066572						
ANR	2067395	Symbol	lcg_random		2066572						
ANR	2067396	Symbol	ac -> random_state		2066572						
ANR	2067397	Symbol	ics -> num_windows		2066572						
ANR	2067398	Symbol	group		2066572						
ANR	2067399	Symbol	* pulse -> pos		2066572						
ANR	2067400	Symbol	ff_aac_spectral_sizes		2066572						
ANR	2067401	Symbol	ac		2066572						
ANR	2067402	Symbol	* * i		2066572						
ANR	2067403	Symbol	coef		2066572						
ANR	2067404	Symbol	coef_base		2066572						
ANR	2067405	Symbol	get_bits1		2066572						
ANR	2067406	Symbol	index		2066572						
ANR	2067407	Symbol	vq_ptr		2066572						
ANR	2067408	Symbol	PNS_MEAN_ENERGY		2066572						
ANR	2067409	Symbol	FIRST_PAIR_BT		2066572						
ANR	2067410	Symbol	* band_type		2066572						
ANR	2067411	Symbol	coef_tmp_idx		2066572						
ANR	2067412	Symbol	cur_band_type		2066572						
ANR	2067413	Symbol	vlc_spectral [ cur_band_type - 1 ] . table		2066572						
ANR	2067414	Symbol	idx		2066572						
ANR	2067415	Symbol	* ff_aac_codebook_vectors		2066572						
ANR	2067416	Symbol	IS_CODEBOOK_UNSIGNED		2066572						
ANR	2067417	Symbol	* * pulse -> pos		2066572						
ANR	2067418	Symbol	* ics -> group_len		2066572						
ANR	2067419	Symbol	* group		2066572						
ANR	2067420	Symbol	scale		2066572						
ANR	2067421	Symbol	* ac		2066572						
ANR	2067422	Symbol	INTENSITY_BT2		2066572						
ANR	2067423	Symbol	sqrtf		2066572						
ANR	2067424	Symbol	fabsf		2066572						
ANR	2067425	Symbol	ics -> group_len		2066572						
ANR	2067426	Symbol	sf		2066572						
ANR	2067427	Symbol	* coef_base		2066572						
ANR	2067428	Symbol	ac -> avccontext		2066572						
ANR	2067429	Symbol	ics -> swb_offset		2066572						
ANR	2067430	Symbol	* vq_ptr		2066572						
ANR	2067431	Symbol	gb		2066572						
ANR	2067432	Symbol	NOISE_BT		2066572						
ANR	2067433	Symbol	* coef		2066572						
ANR	2067434	Symbol	* offsets		2066572						
ANR	2067435	Symbol	* pulse		2066572						
ANR	2067436	Symbol	* * * pulse		2066572						
ANR	2067437	Symbol	c		2066572						
ANR	2067438	Symbol	AV_LOG_ERROR		2066572						
ANR	2067439	Symbol	pulse -> amp		2066572						
ANR	2067440	Symbol	g		2066572						
ANR	2067441	Symbol	i		2066572						
ANR	2067442	Symbol	j		2066572						
ANR	2067443	Symbol	k		2066572						
ANR	2067444	Symbol	co		2066572						
ANR	2067445	Symbol	* * ics		2066572						
ANR	2067446	Symbol	n		2066572						
ANR	2067447	Symbol	* pulse -> amp		2066572						
ANR	2067448	Symbol	ics -> max_sfb		2066572						
ANR	2067449	Symbol	* g		2066572						
ANR	2067450	Symbol	* i		2066572						
ANR	2067451	Symbol	* j		2066572						
ANR	2067452	Symbol	offsets		2066572						
ANR	2067453	Symbol	* k		2066572						
ANR	2067454	Symbol	pulse		2066572						
ANR	2067455	Symbol	* cur_band_type		2066572						
ANR	2067456	Symbol	vlc_spectral		2066572						
ANR	2067457	Symbol	* ics		2066572						
ANR	2067458	Symbol	get_vlc2		2066572						
ANR	2067459	Symbol	* vlc_spectral		2066572						
