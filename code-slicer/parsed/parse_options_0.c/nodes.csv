command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6349551	File	/home/p4ultr4n/workplace/ReVeal/raw_code/parse_options_0.c								
ANR	6349552	Function	parse_options	1:0:0:2545							
ANR	6349553	FunctionDef	"parse_options (int argc , char * * argv , const OptionDef * options , void ( * parse_arg_function ) ( const char * ))"		6349552	0					
ANR	6349554	CompoundStatement		5:0:131:2545	6349552	0					
ANR	6349555	IdentifierDeclStatement	"const char * opt , * arg ;"	7:4:138:159	6349552	0	True				
ANR	6349556	IdentifierDecl	* opt		6349552	0					
ANR	6349557	IdentifierDeclType	const char *		6349552	0					
ANR	6349558	Identifier	opt		6349552	1					
ANR	6349559	IdentifierDecl	* arg		6349552	1					
ANR	6349560	IdentifierDeclType	const char *		6349552	0					
ANR	6349561	Identifier	arg		6349552	1					
ANR	6349562	IdentifierDeclStatement	"int optindex , handleoptions = 1 ;"	9:4:166:195	6349552	1	True				
ANR	6349563	IdentifierDecl	optindex		6349552	0					
ANR	6349564	IdentifierDeclType	int		6349552	0					
ANR	6349565	Identifier	optindex		6349552	1					
ANR	6349566	IdentifierDecl	handleoptions = 1		6349552	1					
ANR	6349567	IdentifierDeclType	int		6349552	0					
ANR	6349568	Identifier	handleoptions		6349552	1					
ANR	6349569	AssignmentExpression	handleoptions = 1		6349552	2		=			
ANR	6349570	Identifier	handleoptions		6349552	0					
ANR	6349571	PrimaryExpression	1		6349552	1					
ANR	6349572	IdentifierDeclStatement	const OptionDef * po ;	11:4:202:221	6349552	2	True				
ANR	6349573	IdentifierDecl	* po		6349552	0					
ANR	6349574	IdentifierDeclType	const OptionDef *		6349552	0					
ANR	6349575	Identifier	po		6349552	1					
ANR	6349576	ExpressionStatement	optindex = 1	17:4:255:267	6349552	3	True				
ANR	6349577	AssignmentExpression	optindex = 1		6349552	0		=			
ANR	6349578	Identifier	optindex		6349552	0					
ANR	6349579	PrimaryExpression	1		6349552	1					
ANR	6349580	WhileStatement	while ( optindex < argc )		6349552	4					
ANR	6349581	Condition	optindex < argc	19:11:281:295	6349552	0	True				
ANR	6349582	RelationalExpression	optindex < argc		6349552	0		<			
ANR	6349583	Identifier	optindex		6349552	0					
ANR	6349584	Identifier	argc		6349552	1					
ANR	6349585	CompoundStatement		15:28:166:166	6349552	1					
ANR	6349586	ExpressionStatement	opt = argv [ optindex ++ ]	21:8:309:331	6349552	0	True				
ANR	6349587	AssignmentExpression	opt = argv [ optindex ++ ]		6349552	0		=			
ANR	6349588	Identifier	opt		6349552	0					
ANR	6349589	ArrayIndexing	argv [ optindex ++ ]		6349552	1					
ANR	6349590	Identifier	argv		6349552	0					
ANR	6349591	PostIncDecOperationExpression	optindex ++		6349552	1					
ANR	6349592	Identifier	optindex		6349552	0					
ANR	6349593	IncDec	++		6349552	1					
ANR	6349594	IfStatement	if ( handleoptions && opt [ 0 ] == '-' && opt [ 1 ] != '\\0' )		6349552	1					
ANR	6349595	Condition	handleoptions && opt [ 0 ] == '-' && opt [ 1 ] != '\\0'	25:12:348:395	6349552	0	True				
ANR	6349596	AndExpression	handleoptions && opt [ 0 ] == '-' && opt [ 1 ] != '\\0'		6349552	0		&&			
ANR	6349597	Identifier	handleoptions		6349552	0					
ANR	6349598	AndExpression	opt [ 0 ] == '-' && opt [ 1 ] != '\\0'		6349552	1		&&			
ANR	6349599	EqualityExpression	opt [ 0 ] == '-'		6349552	0		==			
ANR	6349600	ArrayIndexing	opt [ 0 ]		6349552	0					
ANR	6349601	Identifier	opt		6349552	0					
ANR	6349602	PrimaryExpression	0		6349552	1					
ANR	6349603	PrimaryExpression	'-'		6349552	1					
ANR	6349604	EqualityExpression	opt [ 1 ] != '\\0'		6349552	1		!=			
ANR	6349605	ArrayIndexing	opt [ 1 ]		6349552	0					
ANR	6349606	Identifier	opt		6349552	0					
ANR	6349607	PrimaryExpression	1		6349552	1					
ANR	6349608	PrimaryExpression	'\\0'		6349552	1					
ANR	6349609	CompoundStatement		23:12:281:297	6349552	1					
ANR	6349610	IdentifierDeclStatement	int bool_val = 1 ;	27:12:413:429	6349552	0	True				
ANR	6349611	IdentifierDecl	bool_val = 1		6349552	0					
ANR	6349612	IdentifierDeclType	int		6349552	0					
ANR	6349613	Identifier	bool_val		6349552	1					
ANR	6349614	AssignmentExpression	bool_val = 1		6349552	2		=			
ANR	6349615	Identifier	bool_val		6349552	0					
ANR	6349616	PrimaryExpression	1		6349552	1					
ANR	6349617	IfStatement	if ( opt [ 1 ] == '-' && opt [ 2 ] == '\\0' )		6349552	1					
ANR	6349618	Condition	opt [ 1 ] == '-' && opt [ 2 ] == '\\0'	29:16:448:478	6349552	0	True				
ANR	6349619	AndExpression	opt [ 1 ] == '-' && opt [ 2 ] == '\\0'		6349552	0		&&			
ANR	6349620	EqualityExpression	opt [ 1 ] == '-'		6349552	0		==			
ANR	6349621	ArrayIndexing	opt [ 1 ]		6349552	0					
ANR	6349622	Identifier	opt		6349552	0					
ANR	6349623	PrimaryExpression	1		6349552	1					
ANR	6349624	PrimaryExpression	'-'		6349552	1					
ANR	6349625	EqualityExpression	opt [ 2 ] == '\\0'		6349552	1		==			
ANR	6349626	ArrayIndexing	opt [ 2 ]		6349552	0					
ANR	6349627	Identifier	opt		6349552	0					
ANR	6349628	PrimaryExpression	2		6349552	1					
ANR	6349629	PrimaryExpression	'\\0'		6349552	1					
ANR	6349630	CompoundStatement		25:49:349:349	6349552	1					
ANR	6349631	ExpressionStatement	handleoptions = 0	31:16:500:517	6349552	0	True				
ANR	6349632	AssignmentExpression	handleoptions = 0		6349552	0		=			
ANR	6349633	Identifier	handleoptions		6349552	0					
ANR	6349634	PrimaryExpression	0		6349552	1					
ANR	6349635	ContinueStatement	continue ;	33:16:536:544	6349552	1	True				
ANR	6349636	ExpressionStatement	opt ++	37:12:574:579	6349552	2	True				
ANR	6349637	PostIncDecOperationExpression	opt ++		6349552	0					
ANR	6349638	Identifier	opt		6349552	0					
ANR	6349639	IncDec	++		6349552	1					
ANR	6349640	ExpressionStatement	"po = find_option ( options , opt )"	39:12:594:623	6349552	3	True				
ANR	6349641	AssignmentExpression	"po = find_option ( options , opt )"		6349552	0		=			
ANR	6349642	Identifier	po		6349552	0					
ANR	6349643	CallExpression	"find_option ( options , opt )"		6349552	1					
ANR	6349644	Callee	find_option		6349552	0					
ANR	6349645	Identifier	find_option		6349552	0					
ANR	6349646	ArgumentList	options		6349552	1					
ANR	6349647	Argument	options		6349552	0					
ANR	6349648	Identifier	options		6349552	0					
ANR	6349649	Argument	opt		6349552	1					
ANR	6349650	Identifier	opt		6349552	0					
ANR	6349651	IfStatement	if ( ! po -> name && opt [ 0 ] == 'n' && opt [ 1 ] == 'o' )		6349552	4					
ANR	6349652	Condition	! po -> name && opt [ 0 ] == 'n' && opt [ 1 ] == 'o'	41:16:642:684	6349552	0	True				
ANR	6349653	AndExpression	! po -> name && opt [ 0 ] == 'n' && opt [ 1 ] == 'o'		6349552	0		&&			
ANR	6349654	UnaryOperationExpression	! po -> name		6349552	0					
ANR	6349655	UnaryOperator	!		6349552	0					
ANR	6349656	PtrMemberAccess	po -> name		6349552	1					
ANR	6349657	Identifier	po		6349552	0					
ANR	6349658	Identifier	name		6349552	1					
ANR	6349659	AndExpression	opt [ 0 ] == 'n' && opt [ 1 ] == 'o'		6349552	1		&&			
ANR	6349660	EqualityExpression	opt [ 0 ] == 'n'		6349552	0		==			
ANR	6349661	ArrayIndexing	opt [ 0 ]		6349552	0					
ANR	6349662	Identifier	opt		6349552	0					
ANR	6349663	PrimaryExpression	0		6349552	1					
ANR	6349664	PrimaryExpression	'n'		6349552	1					
ANR	6349665	EqualityExpression	opt [ 1 ] == 'o'		6349552	1		==			
ANR	6349666	ArrayIndexing	opt [ 1 ]		6349552	0					
ANR	6349667	Identifier	opt		6349552	0					
ANR	6349668	PrimaryExpression	1		6349552	1					
ANR	6349669	PrimaryExpression	'o'		6349552	1					
ANR	6349670	CompoundStatement		37:61:555:555	6349552	1					
ANR	6349671	ExpressionStatement	"po = find_option ( options , opt + 2 )"	45:16:753:787	6349552	0	True				
ANR	6349672	AssignmentExpression	"po = find_option ( options , opt + 2 )"		6349552	0		=			
ANR	6349673	Identifier	po		6349552	0					
ANR	6349674	CallExpression	"find_option ( options , opt + 2 )"		6349552	1					
ANR	6349675	Callee	find_option		6349552	0					
ANR	6349676	Identifier	find_option		6349552	0					
ANR	6349677	ArgumentList	options		6349552	1					
ANR	6349678	Argument	options		6349552	0					
ANR	6349679	Identifier	options		6349552	0					
ANR	6349680	Argument	opt + 2		6349552	1					
ANR	6349681	AdditiveExpression	opt + 2		6349552	0		+			
ANR	6349682	Identifier	opt		6349552	0					
ANR	6349683	PrimaryExpression	2		6349552	1					
ANR	6349684	IfStatement	if ( ! ( po -> name && ( po -> flags & OPT_BOOL ) ) )		6349552	1					
ANR	6349685	Condition	! ( po -> name && ( po -> flags & OPT_BOOL ) )	47:20:810:846	6349552	0	True				
ANR	6349686	UnaryOperationExpression	! ( po -> name && ( po -> flags & OPT_BOOL ) )		6349552	0					
ANR	6349687	UnaryOperator	!		6349552	0					
ANR	6349688	AndExpression	po -> name && ( po -> flags & OPT_BOOL )		6349552	1		&&			
ANR	6349689	PtrMemberAccess	po -> name		6349552	0					
ANR	6349690	Identifier	po		6349552	0					
ANR	6349691	Identifier	name		6349552	1					
ANR	6349692	BitAndExpression	po -> flags & OPT_BOOL		6349552	1		&			
ANR	6349693	PtrMemberAccess	po -> flags		6349552	0					
ANR	6349694	Identifier	po		6349552	0					
ANR	6349695	Identifier	flags		6349552	1					
ANR	6349696	Identifier	OPT_BOOL		6349552	1					
ANR	6349697	GotoStatement	goto unknown_opt ;	49:20:870:886	6349552	1	True				
ANR	6349698	Identifier	unknown_opt		6349552	0					
ANR	6349699	ExpressionStatement	bool_val = 0	51:16:905:917	6349552	2	True				
ANR	6349700	AssignmentExpression	bool_val = 0		6349552	0		=			
ANR	6349701	Identifier	bool_val		6349552	0					
ANR	6349702	PrimaryExpression	0		6349552	1					
ANR	6349703	IfStatement	if ( ! po -> name )		6349552	5					
ANR	6349704	Condition	! po -> name	55:16:951:959	6349552	0	True				
ANR	6349705	UnaryOperationExpression	! po -> name		6349552	0					
ANR	6349706	UnaryOperator	!		6349552	0					
ANR	6349707	PtrMemberAccess	po -> name		6349552	1					
ANR	6349708	Identifier	po		6349552	0					
ANR	6349709	Identifier	name		6349552	1					
ANR	6349710	ExpressionStatement	"po = find_option ( options , ""default"" )"	57:16:979:1014	6349552	1	True				
ANR	6349711	AssignmentExpression	"po = find_option ( options , ""default"" )"		6349552	0		=			
ANR	6349712	Identifier	po		6349552	0					
ANR	6349713	CallExpression	"find_option ( options , ""default"" )"		6349552	1					
ANR	6349714	Callee	find_option		6349552	0					
ANR	6349715	Identifier	find_option		6349552	0					
ANR	6349716	ArgumentList	options		6349552	1					
ANR	6349717	Argument	options		6349552	0					
ANR	6349718	Identifier	options		6349552	0					
ANR	6349719	Argument	"""default"""		6349552	1					
ANR	6349720	PrimaryExpression	"""default"""		6349552	0					
ANR	6349721	IfStatement	if ( ! po -> name )		6349552	6					
ANR	6349722	Condition	! po -> name	59:16:1033:1041	6349552	0	True				
ANR	6349723	UnaryOperationExpression	! po -> name		6349552	0					
ANR	6349724	UnaryOperator	!		6349552	0					
ANR	6349725	PtrMemberAccess	po -> name		6349552	1					
ANR	6349726	Identifier	po		6349552	0					
ANR	6349727	Identifier	name		6349552	1					
ANR	6349728	CompoundStatement		55:27:912:912	6349552	1					
ANR	6349729	Label	unknown_opt :	61:0:1047:1058	6349552	0	True				
ANR	6349730	Identifier	unknown_opt		6349552	0					
ANR	6349731	ExpressionStatement	"fprintf ( stderr , ""%s: unrecognized option '%s'\\n"" , argv [ 0 ] , opt )"	63:16:1077:1140	6349552	1	True				
ANR	6349732	CallExpression	"fprintf ( stderr , ""%s: unrecognized option '%s'\\n"" , argv [ 0 ] , opt )"		6349552	0					
ANR	6349733	Callee	fprintf		6349552	0					
ANR	6349734	Identifier	fprintf		6349552	0					
ANR	6349735	ArgumentList	stderr		6349552	1					
ANR	6349736	Argument	stderr		6349552	0					
ANR	6349737	Identifier	stderr		6349552	0					
ANR	6349738	Argument	"""%s: unrecognized option '%s'\\n"""		6349552	1					
ANR	6349739	PrimaryExpression	"""%s: unrecognized option '%s'\\n"""		6349552	0					
ANR	6349740	Argument	argv [ 0 ]		6349552	2					
ANR	6349741	ArrayIndexing	argv [ 0 ]		6349552	0					
ANR	6349742	Identifier	argv		6349552	0					
ANR	6349743	PrimaryExpression	0		6349552	1					
ANR	6349744	Argument	opt		6349552	3					
ANR	6349745	Identifier	opt		6349552	0					
ANR	6349746	ExpressionStatement	exit ( 1 )	65:16:1159:1166	6349552	2	True				
ANR	6349747	CallExpression	exit ( 1 )		6349552	0					
ANR	6349748	Callee	exit		6349552	0					
ANR	6349749	Identifier	exit		6349552	0					
ANR	6349750	ArgumentList	1		6349552	1					
ANR	6349751	Argument	1		6349552	0					
ANR	6349752	PrimaryExpression	1		6349552	0					
ANR	6349753	ExpressionStatement	arg = NULL	69:12:1196:1206	6349552	7	True				
ANR	6349754	AssignmentExpression	arg = NULL		6349552	0		=			
ANR	6349755	Identifier	arg		6349552	0					
ANR	6349756	Identifier	NULL		6349552	1					
ANR	6349757	IfStatement	if ( po -> flags & HAS_ARG )		6349552	8					
ANR	6349758	Condition	po -> flags & HAS_ARG	71:16:1225:1243	6349552	0	True				
ANR	6349759	BitAndExpression	po -> flags & HAS_ARG		6349552	0		&			
ANR	6349760	PtrMemberAccess	po -> flags		6349552	0					
ANR	6349761	Identifier	po		6349552	0					
ANR	6349762	Identifier	flags		6349552	1					
ANR	6349763	Identifier	HAS_ARG		6349552	1					
ANR	6349764	CompoundStatement		67:37:1114:1114	6349552	1					
ANR	6349765	ExpressionStatement	arg = argv [ optindex ++ ]	73:16:1265:1287	6349552	0	True				
ANR	6349766	AssignmentExpression	arg = argv [ optindex ++ ]		6349552	0		=			
ANR	6349767	Identifier	arg		6349552	0					
ANR	6349768	ArrayIndexing	argv [ optindex ++ ]		6349552	1					
ANR	6349769	Identifier	argv		6349552	0					
ANR	6349770	PostIncDecOperationExpression	optindex ++		6349552	1					
ANR	6349771	Identifier	optindex		6349552	0					
ANR	6349772	IncDec	++		6349552	1					
ANR	6349773	IfStatement	if ( ! arg )		6349552	1					
ANR	6349774	Condition	! arg	75:20:1310:1313	6349552	0	True				
ANR	6349775	UnaryOperationExpression	! arg		6349552	0					
ANR	6349776	UnaryOperator	!		6349552	0					
ANR	6349777	Identifier	arg		6349552	1					
ANR	6349778	CompoundStatement		71:26:1184:1184	6349552	1					
ANR	6349779	ExpressionStatement	"fprintf ( stderr , ""%s: missing argument for option '%s'\\n"" , argv [ 0 ] , opt )"	77:20:1339:1410	6349552	0	True				
ANR	6349780	CallExpression	"fprintf ( stderr , ""%s: missing argument for option '%s'\\n"" , argv [ 0 ] , opt )"		6349552	0					
ANR	6349781	Callee	fprintf		6349552	0					
ANR	6349782	Identifier	fprintf		6349552	0					
ANR	6349783	ArgumentList	stderr		6349552	1					
ANR	6349784	Argument	stderr		6349552	0					
ANR	6349785	Identifier	stderr		6349552	0					
ANR	6349786	Argument	"""%s: missing argument for option '%s'\\n"""		6349552	1					
ANR	6349787	PrimaryExpression	"""%s: missing argument for option '%s'\\n"""		6349552	0					
ANR	6349788	Argument	argv [ 0 ]		6349552	2					
ANR	6349789	ArrayIndexing	argv [ 0 ]		6349552	0					
ANR	6349790	Identifier	argv		6349552	0					
ANR	6349791	PrimaryExpression	0		6349552	1					
ANR	6349792	Argument	opt		6349552	3					
ANR	6349793	Identifier	opt		6349552	0					
ANR	6349794	ExpressionStatement	exit ( 1 )	79:20:1433:1440	6349552	1	True				
ANR	6349795	CallExpression	exit ( 1 )		6349552	0					
ANR	6349796	Callee	exit		6349552	0					
ANR	6349797	Identifier	exit		6349552	0					
ANR	6349798	ArgumentList	1		6349552	1					
ANR	6349799	Argument	1		6349552	0					
ANR	6349800	PrimaryExpression	1		6349552	0					
ANR	6349801	IfStatement	if ( po -> flags & OPT_STRING )		6349552	9					
ANR	6349802	Condition	po -> flags & OPT_STRING	85:16:1493:1514	6349552	0	True				
ANR	6349803	BitAndExpression	po -> flags & OPT_STRING		6349552	0		&			
ANR	6349804	PtrMemberAccess	po -> flags		6349552	0					
ANR	6349805	Identifier	po		6349552	0					
ANR	6349806	Identifier	flags		6349552	1					
ANR	6349807	Identifier	OPT_STRING		6349552	1					
ANR	6349808	CompoundStatement		83:16:1404:1413	6349552	1					
ANR	6349809	IdentifierDeclStatement	char * str ;	87:16:1536:1545	6349552	0	True				
ANR	6349810	IdentifierDecl	* str		6349552	0					
ANR	6349811	IdentifierDeclType	char *		6349552	0					
ANR	6349812	Identifier	str		6349552	1					
ANR	6349813	ExpressionStatement	str = av_strdup ( arg )	89:16:1564:1584	6349552	1	True				
ANR	6349814	AssignmentExpression	str = av_strdup ( arg )		6349552	0		=			
ANR	6349815	Identifier	str		6349552	0					
ANR	6349816	CallExpression	av_strdup ( arg )		6349552	1					
ANR	6349817	Callee	av_strdup		6349552	0					
ANR	6349818	Identifier	av_strdup		6349552	0					
ANR	6349819	ArgumentList	arg		6349552	1					
ANR	6349820	Argument	arg		6349552	0					
ANR	6349821	Identifier	arg		6349552	0					
ANR	6349822	ExpressionStatement	* po -> u . str_arg = str	91:16:1603:1623	6349552	2	True				
ANR	6349823	AssignmentExpression	* po -> u . str_arg = str		6349552	0		=			
ANR	6349824	UnaryOperationExpression	* po -> u . str_arg		6349552	0					
ANR	6349825	UnaryOperator	*		6349552	0					
ANR	6349826	MemberAccess	po -> u . str_arg		6349552	1					
ANR	6349827	PtrMemberAccess	po -> u		6349552	0					
ANR	6349828	Identifier	po		6349552	0					
ANR	6349829	Identifier	u		6349552	1					
ANR	6349830	Identifier	str_arg		6349552	1					
ANR	6349831	Identifier	str		6349552	1					
ANR	6349832	ElseStatement	else		6349552	0					
ANR	6349833	IfStatement	if ( po -> flags & OPT_BOOL )		6349552	0					
ANR	6349834	Condition	po -> flags & OPT_BOOL	93:23:1649:1668	6349552	0	True				
ANR	6349835	BitAndExpression	po -> flags & OPT_BOOL		6349552	0		&			
ANR	6349836	PtrMemberAccess	po -> flags		6349552	0					
ANR	6349837	Identifier	po		6349552	0					
ANR	6349838	Identifier	flags		6349552	1					
ANR	6349839	Identifier	OPT_BOOL		6349552	1					
ANR	6349840	CompoundStatement		89:45:1539:1539	6349552	1					
ANR	6349841	ExpressionStatement	* po -> u . int_arg = bool_val	95:16:1690:1715	6349552	0	True				
ANR	6349842	AssignmentExpression	* po -> u . int_arg = bool_val		6349552	0		=			
ANR	6349843	UnaryOperationExpression	* po -> u . int_arg		6349552	0					
ANR	6349844	UnaryOperator	*		6349552	0					
ANR	6349845	MemberAccess	po -> u . int_arg		6349552	1					
ANR	6349846	PtrMemberAccess	po -> u		6349552	0					
ANR	6349847	Identifier	po		6349552	0					
ANR	6349848	Identifier	u		6349552	1					
ANR	6349849	Identifier	int_arg		6349552	1					
ANR	6349850	Identifier	bool_val		6349552	1					
ANR	6349851	ElseStatement	else		6349552	0					
ANR	6349852	IfStatement	if ( po -> flags & OPT_INT )		6349552	0					
ANR	6349853	Condition	po -> flags & OPT_INT	97:23:1741:1759	6349552	0	True				
ANR	6349854	BitAndExpression	po -> flags & OPT_INT		6349552	0		&			
ANR	6349855	PtrMemberAccess	po -> flags		6349552	0					
ANR	6349856	Identifier	po		6349552	0					
ANR	6349857	Identifier	flags		6349552	1					
ANR	6349858	Identifier	OPT_INT		6349552	1					
ANR	6349859	CompoundStatement		93:44:1630:1630	6349552	1					
ANR	6349860	ExpressionStatement	"* po -> u . int_arg = parse_number_or_die ( opt , arg , OPT_INT64 , INT_MIN , INT_MAX )"	99:16:1781:1856	6349552	0	True				
ANR	6349861	AssignmentExpression	"* po -> u . int_arg = parse_number_or_die ( opt , arg , OPT_INT64 , INT_MIN , INT_MAX )"		6349552	0		=			
ANR	6349862	UnaryOperationExpression	* po -> u . int_arg		6349552	0					
ANR	6349863	UnaryOperator	*		6349552	0					
ANR	6349864	MemberAccess	po -> u . int_arg		6349552	1					
ANR	6349865	PtrMemberAccess	po -> u		6349552	0					
ANR	6349866	Identifier	po		6349552	0					
ANR	6349867	Identifier	u		6349552	1					
ANR	6349868	Identifier	int_arg		6349552	1					
ANR	6349869	CallExpression	"parse_number_or_die ( opt , arg , OPT_INT64 , INT_MIN , INT_MAX )"		6349552	1					
ANR	6349870	Callee	parse_number_or_die		6349552	0					
ANR	6349871	Identifier	parse_number_or_die		6349552	0					
ANR	6349872	ArgumentList	opt		6349552	1					
ANR	6349873	Argument	opt		6349552	0					
ANR	6349874	Identifier	opt		6349552	0					
ANR	6349875	Argument	arg		6349552	1					
ANR	6349876	Identifier	arg		6349552	0					
ANR	6349877	Argument	OPT_INT64		6349552	2					
ANR	6349878	Identifier	OPT_INT64		6349552	0					
ANR	6349879	Argument	INT_MIN		6349552	3					
ANR	6349880	Identifier	INT_MIN		6349552	0					
ANR	6349881	Argument	INT_MAX		6349552	4					
ANR	6349882	Identifier	INT_MAX		6349552	0					
ANR	6349883	ElseStatement	else		6349552	0					
ANR	6349884	IfStatement	if ( po -> flags & OPT_INT64 )		6349552	0					
ANR	6349885	Condition	po -> flags & OPT_INT64	101:23:1882:1902	6349552	0	True				
ANR	6349886	BitAndExpression	po -> flags & OPT_INT64		6349552	0		&			
ANR	6349887	PtrMemberAccess	po -> flags		6349552	0					
ANR	6349888	Identifier	po		6349552	0					
ANR	6349889	Identifier	flags		6349552	1					
ANR	6349890	Identifier	OPT_INT64		6349552	1					
ANR	6349891	CompoundStatement		97:46:1773:1773	6349552	1					
ANR	6349892	ExpressionStatement	"* po -> u . int64_arg = parse_number_or_die ( opt , arg , OPT_INT64 , INT64_MIN , INT64_MAX )"	103:16:1924:2005	6349552	0	True				
ANR	6349893	AssignmentExpression	"* po -> u . int64_arg = parse_number_or_die ( opt , arg , OPT_INT64 , INT64_MIN , INT64_MAX )"		6349552	0		=			
ANR	6349894	UnaryOperationExpression	* po -> u . int64_arg		6349552	0					
ANR	6349895	UnaryOperator	*		6349552	0					
ANR	6349896	MemberAccess	po -> u . int64_arg		6349552	1					
ANR	6349897	PtrMemberAccess	po -> u		6349552	0					
ANR	6349898	Identifier	po		6349552	0					
ANR	6349899	Identifier	u		6349552	1					
ANR	6349900	Identifier	int64_arg		6349552	1					
ANR	6349901	CallExpression	"parse_number_or_die ( opt , arg , OPT_INT64 , INT64_MIN , INT64_MAX )"		6349552	1					
ANR	6349902	Callee	parse_number_or_die		6349552	0					
ANR	6349903	Identifier	parse_number_or_die		6349552	0					
ANR	6349904	ArgumentList	opt		6349552	1					
ANR	6349905	Argument	opt		6349552	0					
ANR	6349906	Identifier	opt		6349552	0					
ANR	6349907	Argument	arg		6349552	1					
ANR	6349908	Identifier	arg		6349552	0					
ANR	6349909	Argument	OPT_INT64		6349552	2					
ANR	6349910	Identifier	OPT_INT64		6349552	0					
ANR	6349911	Argument	INT64_MIN		6349552	3					
ANR	6349912	Identifier	INT64_MIN		6349552	0					
ANR	6349913	Argument	INT64_MAX		6349552	4					
ANR	6349914	Identifier	INT64_MAX		6349552	0					
ANR	6349915	ElseStatement	else		6349552	0					
ANR	6349916	IfStatement	if ( po -> flags & OPT_FLOAT )		6349552	0					
ANR	6349917	Condition	po -> flags & OPT_FLOAT	105:23:2031:2051	6349552	0	True				
ANR	6349918	BitAndExpression	po -> flags & OPT_FLOAT		6349552	0		&			
ANR	6349919	PtrMemberAccess	po -> flags		6349552	0					
ANR	6349920	Identifier	po		6349552	0					
ANR	6349921	Identifier	flags		6349552	1					
ANR	6349922	Identifier	OPT_FLOAT		6349552	1					
ANR	6349923	CompoundStatement		101:46:1922:1922	6349552	1					
ANR	6349924	ExpressionStatement	"* po -> u . float_arg = parse_number_or_die ( opt , arg , OPT_FLOAT , - 1.0 / 0.0 , 1.0 / 0.0 )"	107:16:2073:2151	6349552	0	True				
ANR	6349925	AssignmentExpression	"* po -> u . float_arg = parse_number_or_die ( opt , arg , OPT_FLOAT , - 1.0 / 0.0 , 1.0 / 0.0 )"		6349552	0		=			
ANR	6349926	UnaryOperationExpression	* po -> u . float_arg		6349552	0					
ANR	6349927	UnaryOperator	*		6349552	0					
ANR	6349928	MemberAccess	po -> u . float_arg		6349552	1					
ANR	6349929	PtrMemberAccess	po -> u		6349552	0					
ANR	6349930	Identifier	po		6349552	0					
ANR	6349931	Identifier	u		6349552	1					
ANR	6349932	Identifier	float_arg		6349552	1					
ANR	6349933	CallExpression	"parse_number_or_die ( opt , arg , OPT_FLOAT , - 1.0 / 0.0 , 1.0 / 0.0 )"		6349552	1					
ANR	6349934	Callee	parse_number_or_die		6349552	0					
ANR	6349935	Identifier	parse_number_or_die		6349552	0					
ANR	6349936	ArgumentList	opt		6349552	1					
ANR	6349937	Argument	opt		6349552	0					
ANR	6349938	Identifier	opt		6349552	0					
ANR	6349939	Argument	arg		6349552	1					
ANR	6349940	Identifier	arg		6349552	0					
ANR	6349941	Argument	OPT_FLOAT		6349552	2					
ANR	6349942	Identifier	OPT_FLOAT		6349552	0					
ANR	6349943	Argument	- 1.0 / 0.0		6349552	3					
ANR	6349944	MultiplicativeExpression	- 1.0 / 0.0		6349552	0		/			
ANR	6349945	UnaryOperationExpression	- 1.0		6349552	0					
ANR	6349946	UnaryOperator	-		6349552	0					
ANR	6349947	PrimaryExpression	1.0		6349552	1					
ANR	6349948	PrimaryExpression	0.0		6349552	1					
ANR	6349949	Argument	1.0 / 0.0		6349552	4					
ANR	6349950	MultiplicativeExpression	1.0 / 0.0		6349552	0		/			
ANR	6349951	PrimaryExpression	1.0		6349552	0					
ANR	6349952	PrimaryExpression	0.0		6349552	1					
ANR	6349953	ElseStatement	else		6349552	0					
ANR	6349954	IfStatement	if ( po -> flags & OPT_FUNC2 )		6349552	0					
ANR	6349955	Condition	po -> flags & OPT_FUNC2	109:23:2177:2197	6349552	0	True				
ANR	6349956	BitAndExpression	po -> flags & OPT_FUNC2		6349552	0		&			
ANR	6349957	PtrMemberAccess	po -> flags		6349552	0					
ANR	6349958	Identifier	po		6349552	0					
ANR	6349959	Identifier	flags		6349552	1					
ANR	6349960	Identifier	OPT_FUNC2		6349552	1					
ANR	6349961	CompoundStatement		105:46:2068:2068	6349552	1					
ANR	6349962	IfStatement	"if ( po -> u . func2_arg ( opt , arg ) < 0 )"		6349552	0					
ANR	6349963	Condition	"po -> u . func2_arg ( opt , arg ) < 0"	111:19:2222:2248	6349552	0	True				
ANR	6349964	RelationalExpression	"po -> u . func2_arg ( opt , arg ) < 0"		6349552	0		<			
ANR	6349965	CallExpression	"po -> u . func2_arg ( opt , arg )"		6349552	0					
ANR	6349966	Callee	po -> u . func2_arg		6349552	0					
ANR	6349967	MemberAccess	po -> u . func2_arg		6349552	0					
ANR	6349968	PtrMemberAccess	po -> u		6349552	0					
ANR	6349969	Identifier	po		6349552	0					
ANR	6349970	Identifier	u		6349552	1					
ANR	6349971	Identifier	func2_arg		6349552	1					
ANR	6349972	ArgumentList	opt		6349552	1					
ANR	6349973	Argument	opt		6349552	0					
ANR	6349974	Identifier	opt		6349552	0					
ANR	6349975	Argument	arg		6349552	1					
ANR	6349976	Identifier	arg		6349552	0					
ANR	6349977	PrimaryExpression	0		6349552	1					
ANR	6349978	GotoStatement	goto unknown_opt ;	113:20:2272:2288	6349552	1	True				
ANR	6349979	Identifier	unknown_opt		6349552	0					
ANR	6349980	ElseStatement	else		6349552	0					
ANR	6349981	CompoundStatement		111:19:2178:2178	6349552	0					
ANR	6349982	ExpressionStatement	po -> u . func_arg ( arg )	117:16:2329:2348	6349552	0	True				
ANR	6349983	CallExpression	po -> u . func_arg ( arg )		6349552	0					
ANR	6349984	Callee	po -> u . func_arg		6349552	0					
ANR	6349985	MemberAccess	po -> u . func_arg		6349552	0					
ANR	6349986	PtrMemberAccess	po -> u		6349552	0					
ANR	6349987	Identifier	po		6349552	0					
ANR	6349988	Identifier	u		6349552	1					
ANR	6349989	Identifier	func_arg		6349552	1					
ANR	6349990	ArgumentList	arg		6349552	1					
ANR	6349991	Argument	arg		6349552	0					
ANR	6349992	Identifier	arg		6349552	0					
ANR	6349993	IfStatement	if ( po -> flags & OPT_EXIT )		6349552	10					
ANR	6349994	Condition	po -> flags & OPT_EXIT	121:15:2381:2400	6349552	0	True				
ANR	6349995	BitAndExpression	po -> flags & OPT_EXIT		6349552	0		&			
ANR	6349996	PtrMemberAccess	po -> flags		6349552	0					
ANR	6349997	Identifier	po		6349552	0					
ANR	6349998	Identifier	flags		6349552	1					
ANR	6349999	Identifier	OPT_EXIT		6349552	1					
ANR	6350000	ExpressionStatement	exit ( 0 )	123:16:2420:2427	6349552	1	True				
ANR	6350001	CallExpression	exit ( 0 )		6349552	0					
ANR	6350002	Callee	exit		6349552	0					
ANR	6350003	Identifier	exit		6349552	0					
ANR	6350004	ArgumentList	0		6349552	1					
ANR	6350005	Argument	0		6349552	0					
ANR	6350006	PrimaryExpression	0		6349552	0					
ANR	6350007	ElseStatement	else		6349552	0					
ANR	6350008	CompoundStatement		121:15:2313:2313	6349552	0					
ANR	6350009	IfStatement	if ( parse_arg_function )		6349552	0					
ANR	6350010	Condition	parse_arg_function	127:16:2464:2481	6349552	0	True				
ANR	6350011	Identifier	parse_arg_function		6349552	0					
ANR	6350012	ExpressionStatement	parse_arg_function ( opt )	129:16:2501:2524	6349552	1	True				
ANR	6350013	CallExpression	parse_arg_function ( opt )		6349552	0					
ANR	6350014	Callee	parse_arg_function		6349552	0					
ANR	6350015	Identifier	parse_arg_function		6349552	0					
ANR	6350016	ArgumentList	opt		6349552	1					
ANR	6350017	Argument	opt		6349552	0					
ANR	6350018	Identifier	opt		6349552	0					
ANR	6350019	ReturnType	void		6349552	1					
ANR	6350020	Identifier	parse_options		6349552	2					
ANR	6350021	ParameterList	"int argc , char * * argv , const OptionDef * options , void ( * parse_arg_function ) ( const char * )"		6349552	3					
ANR	6350022	Parameter	int argc	1:19:19:26	6349552	0	True				
ANR	6350023	ParameterType	int		6349552	0					
ANR	6350024	Identifier	argc		6349552	1					
ANR	6350025	Parameter	char * * argv	1:29:29:39	6349552	1	True				
ANR	6350026	ParameterType	char * *		6349552	0					
ANR	6350027	Identifier	argv		6349552	1					
ANR	6350028	Parameter	const OptionDef * options	1:42:42:65	6349552	2	True				
ANR	6350029	ParameterType	const OptionDef *		6349552	0					
ANR	6350030	Identifier	options		6349552	1					
ANR	6350031	Parameter	void ( * parse_arg_function ) ( const char * )	3:19:88:127	6349552	3	True				
ANR	6350032	ParameterType	(( const char * ) void) *		6349552	0					
ANR	6350033	Identifier	parse_arg_function		6349552	1					
ANR	6350034	CFGEntryNode	ENTRY		6349552		True				
ANR	6350035	CFGExitNode	EXIT		6349552		True				
ANR	6350036	Symbol	bool_val		6349552						
ANR	6350037	Symbol	po -> u . int64_arg		6349552						
ANR	6350038	Symbol	av_strdup		6349552						
ANR	6350039	Symbol	* argv		6349552						
ANR	6350040	Symbol	* po -> u		6349552						
ANR	6350041	Symbol	INT64_MAX		6349552						
ANR	6350042	Symbol	argv		6349552						
ANR	6350043	Symbol	handleoptions		6349552						
ANR	6350044	Symbol	INT_MIN		6349552						
ANR	6350045	Symbol	* po -> u . int64_arg		6349552						
ANR	6350046	Symbol	parse_arg_function		6349552						
ANR	6350047	Symbol	* po -> u . str_arg		6349552						
ANR	6350048	Symbol	* po -> u . float_arg		6349552						
ANR	6350049	Symbol	arg		6349552						
ANR	6350050	Symbol	po -> name		6349552						
ANR	6350051	Symbol	options		6349552						
ANR	6350052	Symbol	HAS_ARG		6349552						
ANR	6350053	Symbol	INT_MAX		6349552						
ANR	6350054	Symbol	INT64_MIN		6349552						
ANR	6350055	Symbol	po -> u . str_arg		6349552						
ANR	6350056	Symbol	* opt		6349552						
ANR	6350057	Symbol	argc		6349552						
ANR	6350058	Symbol	NULL		6349552						
ANR	6350059	Symbol	OPT_FUNC2		6349552						
ANR	6350060	Symbol	* po		6349552						
ANR	6350061	Symbol	parse_number_or_die		6349552						
ANR	6350062	Symbol	po -> u . func2_arg		6349552						
ANR	6350063	Symbol	* * po		6349552						
ANR	6350064	Symbol	OPT_EXIT		6349552						
ANR	6350065	Symbol	stderr		6349552						
ANR	6350066	Symbol	OPT_INT64		6349552						
ANR	6350067	Symbol	find_option		6349552						
ANR	6350068	Symbol	po -> flags		6349552						
ANR	6350069	Symbol	str		6349552						
ANR	6350070	Symbol	opt		6349552						
ANR	6350071	Symbol	OPT_FLOAT		6349552						
ANR	6350072	Symbol	optindex		6349552						
ANR	6350073	Symbol	OPT_BOOL		6349552						
ANR	6350074	Symbol	* po -> u . int_arg		6349552						
ANR	6350075	Symbol	OPT_INT		6349552						
ANR	6350076	Symbol	po -> u . int_arg		6349552						
ANR	6350077	Symbol	po -> u . float_arg		6349552						
ANR	6350078	Symbol	OPT_STRING		6349552						
ANR	6350079	Symbol	po -> u		6349552						
ANR	6350080	Symbol	po		6349552						
