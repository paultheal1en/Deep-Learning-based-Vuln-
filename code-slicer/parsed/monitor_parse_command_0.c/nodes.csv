command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5568557	File	/home/p4ultr4n/workplace/ReVeal/raw_code/monitor_parse_command_0.c								
ANR	5568558	Function	monitor_parse_command	1:0:0:12907							
ANR	5568559	FunctionDef	"monitor_parse_command (Monitor * mon , const char * cmdline , int start , mon_cmd_t * table , QDict * qdict)"		5568558	0					
ANR	5568560	CompoundStatement		11:0:313:12907	5568558	0					
ANR	5568561	IdentifierDeclStatement	"const char * p , * typestr ;"	13:4:320:343	5568558	0	True				
ANR	5568562	IdentifierDecl	* p		5568558	0					
ANR	5568563	IdentifierDeclType	const char *		5568558	0					
ANR	5568564	Identifier	p		5568558	1					
ANR	5568565	IdentifierDecl	* typestr		5568558	1					
ANR	5568566	IdentifierDeclType	const char *		5568558	0					
ANR	5568567	Identifier	typestr		5568558	1					
ANR	5568568	IdentifierDeclStatement	int c ;	15:4:350:355	5568558	1	True				
ANR	5568569	IdentifierDecl	c		5568558	0					
ANR	5568570	IdentifierDeclType	int		5568558	0					
ANR	5568571	Identifier	c		5568558	1					
ANR	5568572	IdentifierDeclStatement	const mon_cmd_t * cmd ;	17:4:362:382	5568558	2	True				
ANR	5568573	IdentifierDecl	* cmd		5568558	0					
ANR	5568574	IdentifierDeclType	const mon_cmd_t *		5568558	0					
ANR	5568575	Identifier	cmd		5568558	1					
ANR	5568576	IdentifierDeclStatement	char cmdname [ 256 ] ;	19:4:389:406	5568558	3	True				
ANR	5568577	IdentifierDecl	cmdname [ 256 ]		5568558	0					
ANR	5568578	IdentifierDeclType	char [ 256 ]		5568558	0					
ANR	5568579	Identifier	cmdname		5568558	1					
ANR	5568580	PrimaryExpression	256		5568558	2					
ANR	5568581	IdentifierDeclStatement	char buf [ 1024 ] ;	21:4:413:427	5568558	4	True				
ANR	5568582	IdentifierDecl	buf [ 1024 ]		5568558	0					
ANR	5568583	IdentifierDeclType	char [ 1024 ]		5568558	0					
ANR	5568584	Identifier	buf		5568558	1					
ANR	5568585	PrimaryExpression	1024		5568558	2					
ANR	5568586	IdentifierDeclStatement	char * key ;	23:4:434:443	5568558	5	True				
ANR	5568587	IdentifierDecl	* key		5568558	0					
ANR	5568588	IdentifierDeclType	char *		5568558	0					
ANR	5568589	Identifier	key		5568558	1					
ANR	5568590	ExpressionStatement	"p = get_command_name ( cmdline + start , cmdname , sizeof ( cmdname ) )"	29:4:488:551	5568558	6	True				
ANR	5568591	AssignmentExpression	"p = get_command_name ( cmdline + start , cmdname , sizeof ( cmdname ) )"		5568558	0		=			
ANR	5568592	Identifier	p		5568558	0					
ANR	5568593	CallExpression	"get_command_name ( cmdline + start , cmdname , sizeof ( cmdname ) )"		5568558	1					
ANR	5568594	Callee	get_command_name		5568558	0					
ANR	5568595	Identifier	get_command_name		5568558	0					
ANR	5568596	ArgumentList	cmdline + start		5568558	1					
ANR	5568597	Argument	cmdline + start		5568558	0					
ANR	5568598	AdditiveExpression	cmdline + start		5568558	0		+			
ANR	5568599	Identifier	cmdline		5568558	0					
ANR	5568600	Identifier	start		5568558	1					
ANR	5568601	Argument	cmdname		5568558	1					
ANR	5568602	Identifier	cmdname		5568558	0					
ANR	5568603	Argument	sizeof ( cmdname )		5568558	2					
ANR	5568604	SizeofExpression	sizeof ( cmdname )		5568558	0					
ANR	5568605	Sizeof	sizeof		5568558	0					
ANR	5568606	SizeofOperand	cmdname		5568558	1					
ANR	5568607	IfStatement	if ( ! p )		5568558	7					
ANR	5568608	Condition	! p	31:8:562:563	5568558	0	True				
ANR	5568609	UnaryOperationExpression	! p		5568558	0					
ANR	5568610	UnaryOperator	!		5568558	0					
ANR	5568611	Identifier	p		5568558	1					
ANR	5568612	ReturnStatement	return NULL ;	33:8:575:586	5568558	1	True				
ANR	5568613	Identifier	NULL		5568558	0					
ANR	5568614	ExpressionStatement	"cmd = search_dispatch_table ( table , cmdname )"	37:4:595:638	5568558	8	True				
ANR	5568615	AssignmentExpression	"cmd = search_dispatch_table ( table , cmdname )"		5568558	0		=			
ANR	5568616	Identifier	cmd		5568558	0					
ANR	5568617	CallExpression	"search_dispatch_table ( table , cmdname )"		5568558	1					
ANR	5568618	Callee	search_dispatch_table		5568558	0					
ANR	5568619	Identifier	search_dispatch_table		5568558	0					
ANR	5568620	ArgumentList	table		5568558	1					
ANR	5568621	Argument	table		5568558	0					
ANR	5568622	Identifier	table		5568558	0					
ANR	5568623	Argument	cmdname		5568558	1					
ANR	5568624	Identifier	cmdname		5568558	0					
ANR	5568625	IfStatement	if ( ! cmd )		5568558	9					
ANR	5568626	Condition	! cmd	39:8:649:652	5568558	0	True				
ANR	5568627	UnaryOperationExpression	! cmd		5568558	0					
ANR	5568628	UnaryOperator	!		5568558	0					
ANR	5568629	Identifier	cmd		5568558	1					
ANR	5568630	CompoundStatement		29:14:341:341	5568558	1					
ANR	5568631	ExpressionStatement	"monitor_printf ( mon , ""unknown command: '%.*s'\\n"" , ( int ) ( p - cmdline ) , cmdline )"	41:8:666:767	5568558	0	True				
ANR	5568632	CallExpression	"monitor_printf ( mon , ""unknown command: '%.*s'\\n"" , ( int ) ( p - cmdline ) , cmdline )"		5568558	0					
ANR	5568633	Callee	monitor_printf		5568558	0					
ANR	5568634	Identifier	monitor_printf		5568558	0					
ANR	5568635	ArgumentList	mon		5568558	1					
ANR	5568636	Argument	mon		5568558	0					
ANR	5568637	Identifier	mon		5568558	0					
ANR	5568638	Argument	"""unknown command: '%.*s'\\n"""		5568558	1					
ANR	5568639	PrimaryExpression	"""unknown command: '%.*s'\\n"""		5568558	0					
ANR	5568640	Argument	( int ) ( p - cmdline )		5568558	2					
ANR	5568641	CastExpression	( int ) ( p - cmdline )		5568558	0					
ANR	5568642	CastTarget	int		5568558	0					
ANR	5568643	AdditiveExpression	p - cmdline		5568558	1		-			
ANR	5568644	Identifier	p		5568558	0					
ANR	5568645	Identifier	cmdline		5568558	1					
ANR	5568646	Argument	cmdline		5568558	3					
ANR	5568647	Identifier	cmdline		5568558	0					
ANR	5568648	ReturnStatement	return NULL ;	45:8:778:789	5568558	1	True				
ANR	5568649	Identifier	NULL		5568558	0					
ANR	5568650	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	10					
ANR	5568651	Condition	qemu_isspace ( * p )	53:11:858:873	5568558	0	True				
ANR	5568652	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5568653	Callee	qemu_isspace		5568558	0					
ANR	5568654	Identifier	qemu_isspace		5568558	0					
ANR	5568655	ArgumentList	* p		5568558	1					
ANR	5568656	Argument	* p		5568558	0					
ANR	5568657	UnaryOperationExpression	* p		5568558	0					
ANR	5568658	UnaryOperator	*		5568558	0					
ANR	5568659	Identifier	p		5568558	1					
ANR	5568660	CompoundStatement		43:29:562:562	5568558	1					
ANR	5568661	ExpressionStatement	p ++	55:8:887:890	5568558	0	True				
ANR	5568662	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5568663	Identifier	p		5568558	0					
ANR	5568664	IncDec	++		5568558	1					
ANR	5568665	IfStatement	if ( cmd -> sub_table != NULL )		5568558	11					
ANR	5568666	Condition	cmd -> sub_table != NULL	61:8:938:959	5568558	0	True				
ANR	5568667	EqualityExpression	cmd -> sub_table != NULL		5568558	0		!=			
ANR	5568668	PtrMemberAccess	cmd -> sub_table		5568558	0					
ANR	5568669	Identifier	cmd		5568558	0					
ANR	5568670	Identifier	sub_table		5568558	1					
ANR	5568671	Identifier	NULL		5568558	1					
ANR	5568672	CompoundStatement		51:32:648:648	5568558	1					
ANR	5568673	IfStatement	if ( * p == '\\0' )		5568558	0					
ANR	5568674	Condition	* p == '\\0'	65:12:1029:1038	5568558	0	True				
ANR	5568675	EqualityExpression	* p == '\\0'		5568558	0		==			
ANR	5568676	UnaryOperationExpression	* p		5568558	0					
ANR	5568677	UnaryOperator	*		5568558	0					
ANR	5568678	Identifier	p		5568558	1					
ANR	5568679	PrimaryExpression	'\\0'		5568558	1					
ANR	5568680	CompoundStatement		55:24:727:727	5568558	1					
ANR	5568681	ReturnStatement	return cmd ;	67:12:1056:1066	5568558	0	True				
ANR	5568682	Identifier	cmd		5568558	0					
ANR	5568683	ReturnStatement	"return monitor_parse_command ( mon , cmdline , p - cmdline , cmd -> sub_table , qdict ) ;"	71:8:1088:1204	5568558	1	True				
ANR	5568684	CallExpression	"monitor_parse_command ( mon , cmdline , p - cmdline , cmd -> sub_table , qdict )"		5568558	0					
ANR	5568685	Callee	monitor_parse_command		5568558	0					
ANR	5568686	Identifier	monitor_parse_command		5568558	0					
ANR	5568687	ArgumentList	mon		5568558	1					
ANR	5568688	Argument	mon		5568558	0					
ANR	5568689	Identifier	mon		5568558	0					
ANR	5568690	Argument	cmdline		5568558	1					
ANR	5568691	Identifier	cmdline		5568558	0					
ANR	5568692	Argument	p - cmdline		5568558	2					
ANR	5568693	AdditiveExpression	p - cmdline		5568558	0		-			
ANR	5568694	Identifier	p		5568558	0					
ANR	5568695	Identifier	cmdline		5568558	1					
ANR	5568696	Argument	cmd -> sub_table		5568558	3					
ANR	5568697	PtrMemberAccess	cmd -> sub_table		5568558	0					
ANR	5568698	Identifier	cmd		5568558	0					
ANR	5568699	Identifier	sub_table		5568558	1					
ANR	5568700	Argument	qdict		5568558	4					
ANR	5568701	Identifier	qdict		5568558	0					
ANR	5568702	ExpressionStatement	typestr = cmd -> args_type	81:4:1252:1276	5568558	12	True				
ANR	5568703	AssignmentExpression	typestr = cmd -> args_type		5568558	0		=			
ANR	5568704	Identifier	typestr		5568558	0					
ANR	5568705	PtrMemberAccess	cmd -> args_type		5568558	1					
ANR	5568706	Identifier	cmd		5568558	0					
ANR	5568707	Identifier	args_type		5568558	1					
ANR	5568708	ForStatement	for ( ; ; )		5568558	13					
ANR	5568709	CompoundStatement		73:12:977:977	5568558	0					
ANR	5568710	ExpressionStatement	"typestr = key_get_info ( typestr , & key )"	85:8:1302:1339	5568558	0	True				
ANR	5568711	AssignmentExpression	"typestr = key_get_info ( typestr , & key )"		5568558	0		=			
ANR	5568712	Identifier	typestr		5568558	0					
ANR	5568713	CallExpression	"key_get_info ( typestr , & key )"		5568558	1					
ANR	5568714	Callee	key_get_info		5568558	0					
ANR	5568715	Identifier	key_get_info		5568558	0					
ANR	5568716	ArgumentList	typestr		5568558	1					
ANR	5568717	Argument	typestr		5568558	0					
ANR	5568718	Identifier	typestr		5568558	0					
ANR	5568719	Argument	& key		5568558	1					
ANR	5568720	UnaryOperationExpression	& key		5568558	0					
ANR	5568721	UnaryOperator	&		5568558	0					
ANR	5568722	Identifier	key		5568558	1					
ANR	5568723	IfStatement	if ( ! typestr )		5568558	1					
ANR	5568724	Condition	! typestr	87:12:1354:1361	5568558	0	True				
ANR	5568725	UnaryOperationExpression	! typestr		5568558	0					
ANR	5568726	UnaryOperator	!		5568558	0					
ANR	5568727	Identifier	typestr		5568558	1					
ANR	5568728	BreakStatement	break ;	89:12:1377:1382	5568558	1	True				
ANR	5568729	ExpressionStatement	c = * typestr	91:8:1393:1405	5568558	2	True				
ANR	5568730	AssignmentExpression	c = * typestr		5568558	0		=			
ANR	5568731	Identifier	c		5568558	0					
ANR	5568732	UnaryOperationExpression	* typestr		5568558	1					
ANR	5568733	UnaryOperator	*		5568558	0					
ANR	5568734	Identifier	typestr		5568558	1					
ANR	5568735	ExpressionStatement	typestr ++	93:8:1416:1425	5568558	3	True				
ANR	5568736	PostIncDecOperationExpression	typestr ++		5568558	0					
ANR	5568737	Identifier	typestr		5568558	0					
ANR	5568738	IncDec	++		5568558	1					
ANR	5568739	SwitchStatement	switch ( c )		5568558	4					
ANR	5568740	Condition	c	95:15:1443:1443	5568558	0	True				
ANR	5568741	Identifier	c		5568558	0					
ANR	5568742	CompoundStatement		85:18:1132:1132	5568558	1					
ANR	5568743	Label	case 'F' :	97:8:1457:1465	5568558	0	True				
ANR	5568744	Label	case 'B' :	99:8:1476:1484	5568558	1	True				
ANR	5568745	Label	case 's' :	101:8:1495:1503	5568558	2	True				
ANR	5568746	CompoundStatement		95:16:1223:1230	5568558	3					
ANR	5568747	IdentifierDeclStatement	int ret ;	105:16:1537:1544	5568558	0	True				
ANR	5568748	IdentifierDecl	ret		5568558	0					
ANR	5568749	IdentifierDeclType	int		5568558	0					
ANR	5568750	Identifier	ret		5568558	1					
ANR	5568751	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	1					
ANR	5568752	Condition	qemu_isspace ( * p )	109:23:1572:1587	5568558	0	True				
ANR	5568753	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5568754	Callee	qemu_isspace		5568558	0					
ANR	5568755	Identifier	qemu_isspace		5568558	0					
ANR	5568756	ArgumentList	* p		5568558	1					
ANR	5568757	Argument	* p		5568558	0					
ANR	5568758	UnaryOperationExpression	* p		5568558	0					
ANR	5568759	UnaryOperator	*		5568558	0					
ANR	5568760	Identifier	p		5568558	1					
ANR	5568761	ExpressionStatement	p ++	111:20:1611:1614	5568558	1	True				
ANR	5568762	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5568763	Identifier	p		5568558	0					
ANR	5568764	IncDec	++		5568558	1					
ANR	5568765	IfStatement	if ( * typestr == '?' )		5568558	2					
ANR	5568766	Condition	* typestr == '?'	113:20:1637:1651	5568558	0	True				
ANR	5568767	EqualityExpression	* typestr == '?'		5568558	0		==			
ANR	5568768	UnaryOperationExpression	* typestr		5568558	0					
ANR	5568769	UnaryOperator	*		5568558	0					
ANR	5568770	Identifier	typestr		5568558	1					
ANR	5568771	PrimaryExpression	'?'		5568558	1					
ANR	5568772	CompoundStatement		103:37:1340:1340	5568558	1					
ANR	5568773	ExpressionStatement	typestr ++	115:20:1677:1686	5568558	0	True				
ANR	5568774	PostIncDecOperationExpression	typestr ++		5568558	0					
ANR	5568775	Identifier	typestr		5568558	0					
ANR	5568776	IncDec	++		5568558	1					
ANR	5568777	IfStatement	if ( * p == '\\0' )		5568558	1					
ANR	5568778	Condition	* p == '\\0'	117:24:1713:1722	5568558	0	True				
ANR	5568779	EqualityExpression	* p == '\\0'		5568558	0		==			
ANR	5568780	UnaryOperationExpression	* p		5568558	0					
ANR	5568781	UnaryOperator	*		5568558	0					
ANR	5568782	Identifier	p		5568558	1					
ANR	5568783	PrimaryExpression	'\\0'		5568558	1					
ANR	5568784	CompoundStatement		107:36:1411:1411	5568558	1					
ANR	5568785	BreakStatement	break ;	121:24:1817:1822	5568558	0	True				
ANR	5568786	ExpressionStatement	"ret = get_str ( buf , sizeof ( buf ) , & p )"	127:16:1883:1918	5568558	3	True				
ANR	5568787	AssignmentExpression	"ret = get_str ( buf , sizeof ( buf ) , & p )"		5568558	0		=			
ANR	5568788	Identifier	ret		5568558	0					
ANR	5568789	CallExpression	"get_str ( buf , sizeof ( buf ) , & p )"		5568558	1					
ANR	5568790	Callee	get_str		5568558	0					
ANR	5568791	Identifier	get_str		5568558	0					
ANR	5568792	ArgumentList	buf		5568558	1					
ANR	5568793	Argument	buf		5568558	0					
ANR	5568794	Identifier	buf		5568558	0					
ANR	5568795	Argument	sizeof ( buf )		5568558	1					
ANR	5568796	SizeofExpression	sizeof ( buf )		5568558	0					
ANR	5568797	Sizeof	sizeof		5568558	0					
ANR	5568798	SizeofOperand	buf		5568558	1					
ANR	5568799	Argument	& p		5568558	2					
ANR	5568800	UnaryOperationExpression	& p		5568558	0					
ANR	5568801	UnaryOperator	&		5568558	0					
ANR	5568802	Identifier	p		5568558	1					
ANR	5568803	IfStatement	if ( ret < 0 )		5568558	4					
ANR	5568804	Condition	ret < 0	129:20:1941:1947	5568558	0	True				
ANR	5568805	RelationalExpression	ret < 0		5568558	0		<			
ANR	5568806	Identifier	ret		5568558	0					
ANR	5568807	PrimaryExpression	0		5568558	1					
ANR	5568808	CompoundStatement		119:29:1636:1636	5568558	1					
ANR	5568809	SwitchStatement	switch ( c )		5568558	0					
ANR	5568810	Condition	c	131:27:1980:1980	5568558	0	True				
ANR	5568811	Identifier	c		5568558	0					
ANR	5568812	CompoundStatement		121:30:1669:1669	5568558	1					
ANR	5568813	Label	case 'F' :	133:20:2006:2014	5568558	0	True				
ANR	5568814	ExpressionStatement	"monitor_printf ( mon , ""%s: filename expected\\n"" , cmdname )"	135:24:2041:2136	5568558	1	True				
ANR	5568815	CallExpression	"monitor_printf ( mon , ""%s: filename expected\\n"" , cmdname )"		5568558	0					
ANR	5568816	Callee	monitor_printf		5568558	0					
ANR	5568817	Identifier	monitor_printf		5568558	0					
ANR	5568818	ArgumentList	mon		5568558	1					
ANR	5568819	Argument	mon		5568558	0					
ANR	5568820	Identifier	mon		5568558	0					
ANR	5568821	Argument	"""%s: filename expected\\n"""		5568558	1					
ANR	5568822	PrimaryExpression	"""%s: filename expected\\n"""		5568558	0					
ANR	5568823	Argument	cmdname		5568558	2					
ANR	5568824	Identifier	cmdname		5568558	0					
ANR	5568825	BreakStatement	break ;	139:24:2163:2168	5568558	2	True				
ANR	5568826	Label	case 'B' :	141:20:2191:2199	5568558	3	True				
ANR	5568827	ExpressionStatement	"monitor_printf ( mon , ""%s: block device name expected\\n"" , cmdname )"	143:24:2226:2330	5568558	4	True				
ANR	5568828	CallExpression	"monitor_printf ( mon , ""%s: block device name expected\\n"" , cmdname )"		5568558	0					
ANR	5568829	Callee	monitor_printf		5568558	0					
ANR	5568830	Identifier	monitor_printf		5568558	0					
ANR	5568831	ArgumentList	mon		5568558	1					
ANR	5568832	Argument	mon		5568558	0					
ANR	5568833	Identifier	mon		5568558	0					
ANR	5568834	Argument	"""%s: block device name expected\\n"""		5568558	1					
ANR	5568835	PrimaryExpression	"""%s: block device name expected\\n"""		5568558	0					
ANR	5568836	Argument	cmdname		5568558	2					
ANR	5568837	Identifier	cmdname		5568558	0					
ANR	5568838	BreakStatement	break ;	147:24:2357:2362	5568558	5	True				
ANR	5568839	Label	default :	149:20:2385:2392	5568558	6	True				
ANR	5568840	Identifier	default		5568558	0					
ANR	5568841	ExpressionStatement	"monitor_printf ( mon , ""%s: string expected\\n"" , cmdname )"	151:24:2419:2472	5568558	7	True				
ANR	5568842	CallExpression	"monitor_printf ( mon , ""%s: string expected\\n"" , cmdname )"		5568558	0					
ANR	5568843	Callee	monitor_printf		5568558	0					
ANR	5568844	Identifier	monitor_printf		5568558	0					
ANR	5568845	ArgumentList	mon		5568558	1					
ANR	5568846	Argument	mon		5568558	0					
ANR	5568847	Identifier	mon		5568558	0					
ANR	5568848	Argument	"""%s: string expected\\n"""		5568558	1					
ANR	5568849	PrimaryExpression	"""%s: string expected\\n"""		5568558	0					
ANR	5568850	Argument	cmdname		5568558	2					
ANR	5568851	Identifier	cmdname		5568558	0					
ANR	5568852	BreakStatement	break ;	153:24:2499:2504	5568558	8	True				
ANR	5568853	GotoStatement	goto fail ;	157:20:2550:2559	5568558	1	True				
ANR	5568854	Identifier	fail		5568558	0					
ANR	5568855	ExpressionStatement	"qdict_put ( qdict , key , qstring_from_str ( buf ) )"	161:16:2597:2641	5568558	5	True				
ANR	5568856	CallExpression	"qdict_put ( qdict , key , qstring_from_str ( buf ) )"		5568558	0					
ANR	5568857	Callee	qdict_put		5568558	0					
ANR	5568858	Identifier	qdict_put		5568558	0					
ANR	5568859	ArgumentList	qdict		5568558	1					
ANR	5568860	Argument	qdict		5568558	0					
ANR	5568861	Identifier	qdict		5568558	0					
ANR	5568862	Argument	key		5568558	1					
ANR	5568863	Identifier	key		5568558	0					
ANR	5568864	Argument	qstring_from_str ( buf )		5568558	2					
ANR	5568865	CallExpression	qstring_from_str ( buf )		5568558	0					
ANR	5568866	Callee	qstring_from_str		5568558	0					
ANR	5568867	Identifier	qstring_from_str		5568558	0					
ANR	5568868	ArgumentList	buf		5568558	1					
ANR	5568869	Argument	buf		5568558	0					
ANR	5568870	Identifier	buf		5568558	0					
ANR	5568871	BreakStatement	break ;	165:12:2671:2676	5568558	4	True				
ANR	5568872	Label	case 'O' :	167:8:2687:2695	5568558	5	True				
ANR	5568873	CompoundStatement		163:16:2457:2471	5568558	6					
ANR	5568874	IdentifierDeclStatement	QemuOptsList * opts_list ;	171:16:2729:2752	5568558	0	True				
ANR	5568875	IdentifierDecl	* opts_list		5568558	0					
ANR	5568876	IdentifierDeclType	QemuOptsList *		5568558	0					
ANR	5568877	Identifier	opts_list		5568558	1					
ANR	5568878	IdentifierDeclStatement	QemuOpts * opts ;	173:16:2771:2785	5568558	1	True				
ANR	5568879	IdentifierDecl	* opts		5568558	0					
ANR	5568880	IdentifierDeclType	QemuOpts *		5568558	0					
ANR	5568881	Identifier	opts		5568558	1					
ANR	5568882	ExpressionStatement	opts_list = qemu_find_opts ( key )	177:16:2806:2837	5568558	2	True				
ANR	5568883	AssignmentExpression	opts_list = qemu_find_opts ( key )		5568558	0		=			
ANR	5568884	Identifier	opts_list		5568558	0					
ANR	5568885	CallExpression	qemu_find_opts ( key )		5568558	1					
ANR	5568886	Callee	qemu_find_opts		5568558	0					
ANR	5568887	Identifier	qemu_find_opts		5568558	0					
ANR	5568888	ArgumentList	key		5568558	1					
ANR	5568889	Argument	key		5568558	0					
ANR	5568890	Identifier	key		5568558	0					
ANR	5568891	IfStatement	if ( ! opts_list || opts_list -> desc -> name )		5568558	3					
ANR	5568892	Condition	! opts_list || opts_list -> desc -> name	179:20:2860:2894	5568558	0	True				
ANR	5568893	OrExpression	! opts_list || opts_list -> desc -> name		5568558	0		||			
ANR	5568894	UnaryOperationExpression	! opts_list		5568558	0					
ANR	5568895	UnaryOperator	!		5568558	0					
ANR	5568896	Identifier	opts_list		5568558	1					
ANR	5568897	PtrMemberAccess	opts_list -> desc -> name		5568558	1					
ANR	5568898	PtrMemberAccess	opts_list -> desc		5568558	0					
ANR	5568899	Identifier	opts_list		5568558	0					
ANR	5568900	Identifier	desc		5568558	1					
ANR	5568901	Identifier	name		5568558	1					
ANR	5568902	CompoundStatement		169:57:2583:2583	5568558	1					
ANR	5568903	GotoStatement	goto bad_type ;	181:20:2920:2933	5568558	0	True				
ANR	5568904	Identifier	bad_type		5568558	0					
ANR	5568905	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	4					
ANR	5568906	Condition	qemu_isspace ( * p )	185:23:2978:2993	5568558	0	True				
ANR	5568907	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5568908	Callee	qemu_isspace		5568558	0					
ANR	5568909	Identifier	qemu_isspace		5568558	0					
ANR	5568910	ArgumentList	* p		5568558	1					
ANR	5568911	Argument	* p		5568558	0					
ANR	5568912	UnaryOperationExpression	* p		5568558	0					
ANR	5568913	UnaryOperator	*		5568558	0					
ANR	5568914	Identifier	p		5568558	1					
ANR	5568915	CompoundStatement		175:41:2682:2682	5568558	1					
ANR	5568916	ExpressionStatement	p ++	187:20:3019:3022	5568558	0	True				
ANR	5568917	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5568918	Identifier	p		5568558	0					
ANR	5568919	IncDec	++		5568558	1					
ANR	5568920	IfStatement	if ( ! * p )		5568558	5					
ANR	5568921	Condition	! * p	191:20:3064:3066	5568558	0	True				
ANR	5568922	UnaryOperationExpression	! * p		5568558	0					
ANR	5568923	UnaryOperator	!		5568558	0					
ANR	5568924	UnaryOperationExpression	* p		5568558	1					
ANR	5568925	UnaryOperator	*		5568558	0					
ANR	5568926	Identifier	p		5568558	1					
ANR	5568927	BreakStatement	break ;	193:20:3090:3095	5568558	1	True				
ANR	5568928	IfStatement	"if ( get_str ( buf , sizeof ( buf ) , & p ) < 0 )"		5568558	6					
ANR	5568929	Condition	"get_str ( buf , sizeof ( buf ) , & p ) < 0"	195:20:3118:3150	5568558	0	True				
ANR	5568930	RelationalExpression	"get_str ( buf , sizeof ( buf ) , & p ) < 0"		5568558	0		<			
ANR	5568931	CallExpression	"get_str ( buf , sizeof ( buf ) , & p )"		5568558	0					
ANR	5568932	Callee	get_str		5568558	0					
ANR	5568933	Identifier	get_str		5568558	0					
ANR	5568934	ArgumentList	buf		5568558	1					
ANR	5568935	Argument	buf		5568558	0					
ANR	5568936	Identifier	buf		5568558	0					
ANR	5568937	Argument	sizeof ( buf )		5568558	1					
ANR	5568938	SizeofExpression	sizeof ( buf )		5568558	0					
ANR	5568939	Sizeof	sizeof		5568558	0					
ANR	5568940	SizeofOperand	buf		5568558	1					
ANR	5568941	Argument	& p		5568558	2					
ANR	5568942	UnaryOperationExpression	& p		5568558	0					
ANR	5568943	UnaryOperator	&		5568558	0					
ANR	5568944	Identifier	p		5568558	1					
ANR	5568945	PrimaryExpression	0		5568558	1					
ANR	5568946	CompoundStatement		185:55:2839:2839	5568558	1					
ANR	5568947	GotoStatement	goto fail ;	197:20:3176:3185	5568558	0	True				
ANR	5568948	Identifier	fail		5568558	0					
ANR	5568949	ExpressionStatement	"opts = qemu_opts_parse ( opts_list , buf , 1 )"	201:16:3223:3264	5568558	7	True				
ANR	5568950	AssignmentExpression	"opts = qemu_opts_parse ( opts_list , buf , 1 )"		5568558	0		=			
ANR	5568951	Identifier	opts		5568558	0					
ANR	5568952	CallExpression	"qemu_opts_parse ( opts_list , buf , 1 )"		5568558	1					
ANR	5568953	Callee	qemu_opts_parse		5568558	0					
ANR	5568954	Identifier	qemu_opts_parse		5568558	0					
ANR	5568955	ArgumentList	opts_list		5568558	1					
ANR	5568956	Argument	opts_list		5568558	0					
ANR	5568957	Identifier	opts_list		5568558	0					
ANR	5568958	Argument	buf		5568558	1					
ANR	5568959	Identifier	buf		5568558	0					
ANR	5568960	Argument	1		5568558	2					
ANR	5568961	PrimaryExpression	1		5568558	0					
ANR	5568962	IfStatement	if ( ! opts )		5568558	8					
ANR	5568963	Condition	! opts	203:20:3287:3291	5568558	0	True				
ANR	5568964	UnaryOperationExpression	! opts		5568558	0					
ANR	5568965	UnaryOperator	!		5568558	0					
ANR	5568966	Identifier	opts		5568558	1					
ANR	5568967	CompoundStatement		193:27:2980:2980	5568558	1					
ANR	5568968	GotoStatement	goto fail ;	205:20:3317:3326	5568558	0	True				
ANR	5568969	Identifier	fail		5568558	0					
ANR	5568970	ExpressionStatement	"qemu_opts_to_qdict ( opts , qdict )"	209:16:3364:3395	5568558	9	True				
ANR	5568971	CallExpression	"qemu_opts_to_qdict ( opts , qdict )"		5568558	0					
ANR	5568972	Callee	qemu_opts_to_qdict		5568558	0					
ANR	5568973	Identifier	qemu_opts_to_qdict		5568558	0					
ANR	5568974	ArgumentList	opts		5568558	1					
ANR	5568975	Argument	opts		5568558	0					
ANR	5568976	Identifier	opts		5568558	0					
ANR	5568977	Argument	qdict		5568558	1					
ANR	5568978	Identifier	qdict		5568558	0					
ANR	5568979	ExpressionStatement	qemu_opts_del ( opts )	211:16:3414:3433	5568558	10	True				
ANR	5568980	CallExpression	qemu_opts_del ( opts )		5568558	0					
ANR	5568981	Callee	qemu_opts_del		5568558	0					
ANR	5568982	Identifier	qemu_opts_del		5568558	0					
ANR	5568983	ArgumentList	opts		5568558	1					
ANR	5568984	Argument	opts		5568558	0					
ANR	5568985	Identifier	opts		5568558	0					
ANR	5568986	BreakStatement	break ;	215:12:3463:3468	5568558	7	True				
ANR	5568987	Label	case '/' :	217:8:3479:3487	5568558	8	True				
ANR	5568988	CompoundStatement		211:16:3207:3230	5568558	9					
ANR	5568989	IdentifierDeclStatement	"int count , format , size ;"	221:16:3521:3544	5568558	0	True				
ANR	5568990	IdentifierDecl	count		5568558	0					
ANR	5568991	IdentifierDeclType	int		5568558	0					
ANR	5568992	Identifier	count		5568558	1					
ANR	5568993	IdentifierDecl	format		5568558	1					
ANR	5568994	IdentifierDeclType	int		5568558	0					
ANR	5568995	Identifier	format		5568558	1					
ANR	5568996	IdentifierDecl	size		5568558	2					
ANR	5568997	IdentifierDeclType	int		5568558	0					
ANR	5568998	Identifier	size		5568558	1					
ANR	5568999	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	1					
ANR	5569000	Condition	qemu_isspace ( * p )	225:23:3572:3587	5568558	0	True				
ANR	5569001	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5569002	Callee	qemu_isspace		5568558	0					
ANR	5569003	Identifier	qemu_isspace		5568558	0					
ANR	5569004	ArgumentList	* p		5568558	1					
ANR	5569005	Argument	* p		5568558	0					
ANR	5569006	UnaryOperationExpression	* p		5568558	0					
ANR	5569007	UnaryOperator	*		5568558	0					
ANR	5569008	Identifier	p		5568558	1					
ANR	5569009	ExpressionStatement	p ++	227:20:3611:3614	5568558	1	True				
ANR	5569010	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569011	Identifier	p		5568558	0					
ANR	5569012	IncDec	++		5568558	1					
ANR	5569013	IfStatement	if ( * p == '/' )		5568558	2					
ANR	5569014	Condition	* p == '/'	229:20:3637:3645	5568558	0	True				
ANR	5569015	EqualityExpression	* p == '/'		5568558	0		==			
ANR	5569016	UnaryOperationExpression	* p		5568558	0					
ANR	5569017	UnaryOperator	*		5568558	0					
ANR	5569018	Identifier	p		5568558	1					
ANR	5569019	PrimaryExpression	'/'		5568558	1					
ANR	5569020	CompoundStatement		219:31:3334:3334	5568558	1					
ANR	5569021	ExpressionStatement	p ++	233:20:3711:3714	5568558	0	True				
ANR	5569022	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569023	Identifier	p		5568558	0					
ANR	5569024	IncDec	++		5568558	1					
ANR	5569025	ExpressionStatement	count = 1	235:20:3737:3746	5568558	1	True				
ANR	5569026	AssignmentExpression	count = 1		5568558	0		=			
ANR	5569027	Identifier	count		5568558	0					
ANR	5569028	PrimaryExpression	1		5568558	1					
ANR	5569029	IfStatement	if ( qemu_isdigit ( * p ) )		5568558	2					
ANR	5569030	Condition	qemu_isdigit ( * p )	237:24:3773:3788	5568558	0	True				
ANR	5569031	CallExpression	qemu_isdigit ( * p )		5568558	0					
ANR	5569032	Callee	qemu_isdigit		5568558	0					
ANR	5569033	Identifier	qemu_isdigit		5568558	0					
ANR	5569034	ArgumentList	* p		5568558	1					
ANR	5569035	Argument	* p		5568558	0					
ANR	5569036	UnaryOperationExpression	* p		5568558	0					
ANR	5569037	UnaryOperator	*		5568558	0					
ANR	5569038	Identifier	p		5568558	1					
ANR	5569039	CompoundStatement		227:42:3477:3477	5568558	1					
ANR	5569040	ExpressionStatement	count = 0	239:24:3818:3827	5568558	0	True				
ANR	5569041	AssignmentExpression	count = 0		5568558	0		=			
ANR	5569042	Identifier	count		5568558	0					
ANR	5569043	PrimaryExpression	0		5568558	1					
ANR	5569044	WhileStatement	while ( qemu_isdigit ( * p ) )		5568558	1					
ANR	5569045	Condition	qemu_isdigit ( * p )	241:31:3861:3876	5568558	0	True				
ANR	5569046	CallExpression	qemu_isdigit ( * p )		5568558	0					
ANR	5569047	Callee	qemu_isdigit		5568558	0					
ANR	5569048	Identifier	qemu_isdigit		5568558	0					
ANR	5569049	ArgumentList	* p		5568558	1					
ANR	5569050	Argument	* p		5568558	0					
ANR	5569051	UnaryOperationExpression	* p		5568558	0					
ANR	5569052	UnaryOperator	*		5568558	0					
ANR	5569053	Identifier	p		5568558	1					
ANR	5569054	CompoundStatement		231:49:3565:3565	5568558	1					
ANR	5569055	ExpressionStatement	count = count * 10 + ( * p - '0' )	243:28:3910:3941	5568558	0	True				
ANR	5569056	AssignmentExpression	count = count * 10 + ( * p - '0' )		5568558	0		=			
ANR	5569057	Identifier	count		5568558	0					
ANR	5569058	AdditiveExpression	count * 10 + ( * p - '0' )		5568558	1		+			
ANR	5569059	MultiplicativeExpression	count * 10		5568558	0		*			
ANR	5569060	Identifier	count		5568558	0					
ANR	5569061	PrimaryExpression	10		5568558	1					
ANR	5569062	AdditiveExpression	* p - '0'		5568558	1		-			
ANR	5569063	UnaryOperationExpression	* p		5568558	0					
ANR	5569064	UnaryOperator	*		5568558	0					
ANR	5569065	Identifier	p		5568558	1					
ANR	5569066	PrimaryExpression	'0'		5568558	1					
ANR	5569067	ExpressionStatement	p ++	245:28:3972:3975	5568558	1	True				
ANR	5569068	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569069	Identifier	p		5568558	0					
ANR	5569070	IncDec	++		5568558	1					
ANR	5569071	ExpressionStatement	size = - 1	251:20:4048:4057	5568558	3	True				
ANR	5569072	AssignmentExpression	size = - 1		5568558	0		=			
ANR	5569073	Identifier	size		5568558	0					
ANR	5569074	UnaryOperationExpression	- 1		5568558	1					
ANR	5569075	UnaryOperator	-		5568558	0					
ANR	5569076	PrimaryExpression	1		5568558	1					
ANR	5569077	ExpressionStatement	format = - 1	253:20:4080:4091	5568558	4	True				
ANR	5569078	AssignmentExpression	format = - 1		5568558	0		=			
ANR	5569079	Identifier	format		5568558	0					
ANR	5569080	UnaryOperationExpression	- 1		5568558	1					
ANR	5569081	UnaryOperator	-		5568558	0					
ANR	5569082	PrimaryExpression	1		5568558	1					
ANR	5569083	ForStatement	for ( ; ; )		5568558	5					
ANR	5569084	CompoundStatement		245:28:3808:3808	5568558	0					
ANR	5569085	SwitchStatement	switch ( * p )		5568558	0					
ANR	5569086	Condition	* p	257:31:4156:4157	5568558	0	True				
ANR	5569087	UnaryOperationExpression	* p		5568558	0					
ANR	5569088	UnaryOperator	*		5568558	0					
ANR	5569089	Identifier	p		5568558	1					
ANR	5569090	CompoundStatement		247:35:3846:3846	5568558	1					
ANR	5569091	Label	case 'o' :	259:24:4187:4195	5568558	0	True				
ANR	5569092	Label	case 'd' :	261:24:4222:4230	5568558	1	True				
ANR	5569093	Label	case 'u' :	263:24:4257:4265	5568558	2	True				
ANR	5569094	Label	case 'x' :	265:24:4292:4300	5568558	3	True				
ANR	5569095	Label	case 'i' :	267:24:4327:4335	5568558	4	True				
ANR	5569096	Label	case 'c' :	269:24:4362:4370	5568558	5	True				
ANR	5569097	ExpressionStatement	format = * p ++	271:28:4401:4414	5568558	6	True				
ANR	5569098	AssignmentExpression	format = * p ++		5568558	0		=			
ANR	5569099	Identifier	format		5568558	0					
ANR	5569100	UnaryOperationExpression	* p ++		5568558	1					
ANR	5569101	UnaryOperator	*		5568558	0					
ANR	5569102	PostIncDecOperationExpression	p ++		5568558	1					
ANR	5569103	Identifier	p		5568558	0					
ANR	5569104	IncDec	++		5568558	1					
ANR	5569105	BreakStatement	break ;	273:28:4445:4450	5568558	7	True				
ANR	5569106	Label	case 'b' :	275:24:4477:4485	5568558	8	True				
ANR	5569107	ExpressionStatement	size = 1	277:28:4516:4524	5568558	9	True				
ANR	5569108	AssignmentExpression	size = 1		5568558	0		=			
ANR	5569109	Identifier	size		5568558	0					
ANR	5569110	PrimaryExpression	1		5568558	1					
ANR	5569111	ExpressionStatement	p ++	279:28:4555:4558	5568558	10	True				
ANR	5569112	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569113	Identifier	p		5568558	0					
ANR	5569114	IncDec	++		5568558	1					
ANR	5569115	BreakStatement	break ;	281:28:4589:4594	5568558	11	True				
ANR	5569116	Label	case 'h' :	283:24:4621:4629	5568558	12	True				
ANR	5569117	ExpressionStatement	size = 2	285:28:4660:4668	5568558	13	True				
ANR	5569118	AssignmentExpression	size = 2		5568558	0		=			
ANR	5569119	Identifier	size		5568558	0					
ANR	5569120	PrimaryExpression	2		5568558	1					
ANR	5569121	ExpressionStatement	p ++	287:28:4699:4702	5568558	14	True				
ANR	5569122	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569123	Identifier	p		5568558	0					
ANR	5569124	IncDec	++		5568558	1					
ANR	5569125	BreakStatement	break ;	289:28:4733:4738	5568558	15	True				
ANR	5569126	Label	case 'w' :	291:24:4765:4773	5568558	16	True				
ANR	5569127	ExpressionStatement	size = 4	293:28:4804:4812	5568558	17	True				
ANR	5569128	AssignmentExpression	size = 4		5568558	0		=			
ANR	5569129	Identifier	size		5568558	0					
ANR	5569130	PrimaryExpression	4		5568558	1					
ANR	5569131	ExpressionStatement	p ++	295:28:4843:4846	5568558	18	True				
ANR	5569132	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569133	Identifier	p		5568558	0					
ANR	5569134	IncDec	++		5568558	1					
ANR	5569135	BreakStatement	break ;	297:28:4877:4882	5568558	19	True				
ANR	5569136	Label	case 'g' :	299:24:4909:4917	5568558	20	True				
ANR	5569137	Label	case 'L' :	301:24:4944:4952	5568558	21	True				
ANR	5569138	ExpressionStatement	size = 8	303:28:4983:4991	5568558	22	True				
ANR	5569139	AssignmentExpression	size = 8		5568558	0		=			
ANR	5569140	Identifier	size		5568558	0					
ANR	5569141	PrimaryExpression	8		5568558	1					
ANR	5569142	ExpressionStatement	p ++	305:28:5022:5025	5568558	23	True				
ANR	5569143	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569144	Identifier	p		5568558	0					
ANR	5569145	IncDec	++		5568558	1					
ANR	5569146	BreakStatement	break ;	307:28:5056:5061	5568558	24	True				
ANR	5569147	Label	default :	309:24:5088:5095	5568558	25	True				
ANR	5569148	Identifier	default		5568558	0					
ANR	5569149	GotoStatement	goto next ;	311:28:5126:5135	5568558	26	True				
ANR	5569150	Identifier	next		5568558	0					
ANR	5569151	Label	next :	317:16:5204:5208	5568558	6	True				
ANR	5569152	Identifier	next		5568558	0					
ANR	5569153	IfStatement	if ( * p != '\\0' && ! qemu_isspace ( * p ) )		5568558	7					
ANR	5569154	Condition	* p != '\\0' && ! qemu_isspace ( * p )	319:24:5235:5265	5568558	0	True				
ANR	5569155	AndExpression	* p != '\\0' && ! qemu_isspace ( * p )		5568558	0		&&			
ANR	5569156	EqualityExpression	* p != '\\0'		5568558	0		!=			
ANR	5569157	UnaryOperationExpression	* p		5568558	0					
ANR	5569158	UnaryOperator	*		5568558	0					
ANR	5569159	Identifier	p		5568558	1					
ANR	5569160	PrimaryExpression	'\\0'		5568558	1					
ANR	5569161	UnaryOperationExpression	! qemu_isspace ( * p )		5568558	1					
ANR	5569162	UnaryOperator	!		5568558	0					
ANR	5569163	CallExpression	qemu_isspace ( * p )		5568558	1					
ANR	5569164	Callee	qemu_isspace		5568558	0					
ANR	5569165	Identifier	qemu_isspace		5568558	0					
ANR	5569166	ArgumentList	* p		5568558	1					
ANR	5569167	Argument	* p		5568558	0					
ANR	5569168	UnaryOperationExpression	* p		5568558	0					
ANR	5569169	UnaryOperator	*		5568558	0					
ANR	5569170	Identifier	p		5568558	1					
ANR	5569171	CompoundStatement		309:57:4954:4954	5568558	1					
ANR	5569172	ExpressionStatement	"monitor_printf ( mon , ""invalid char in format: '%c'\\n"" , * p )"	321:24:5295:5392	5568558	0	True				
ANR	5569173	CallExpression	"monitor_printf ( mon , ""invalid char in format: '%c'\\n"" , * p )"		5568558	0					
ANR	5569174	Callee	monitor_printf		5568558	0					
ANR	5569175	Identifier	monitor_printf		5568558	0					
ANR	5569176	ArgumentList	mon		5568558	1					
ANR	5569177	Argument	mon		5568558	0					
ANR	5569178	Identifier	mon		5568558	0					
ANR	5569179	Argument	"""invalid char in format: '%c'\\n"""		5568558	1					
ANR	5569180	PrimaryExpression	"""invalid char in format: '%c'\\n"""		5568558	0					
ANR	5569181	Argument	* p		5568558	2					
ANR	5569182	UnaryOperationExpression	* p		5568558	0					
ANR	5569183	UnaryOperator	*		5568558	0					
ANR	5569184	Identifier	p		5568558	1					
ANR	5569185	GotoStatement	goto fail ;	325:24:5419:5428	5568558	1	True				
ANR	5569186	Identifier	fail		5568558	0					
ANR	5569187	IfStatement	if ( format < 0 )		5568558	8					
ANR	5569188	Condition	format < 0	329:24:5478:5487	5568558	0	True				
ANR	5569189	RelationalExpression	format < 0		5568558	0		<			
ANR	5569190	Identifier	format		5568558	0					
ANR	5569191	PrimaryExpression	0		5568558	1					
ANR	5569192	ExpressionStatement	format = default_fmt_format	331:24:5515:5542	5568558	1	True				
ANR	5569193	AssignmentExpression	format = default_fmt_format		5568558	0		=			
ANR	5569194	Identifier	format		5568558	0					
ANR	5569195	Identifier	default_fmt_format		5568558	1					
ANR	5569196	IfStatement	if ( format != 'i' )		5568558	9					
ANR	5569197	Condition	format != 'i'	333:24:5569:5581	5568558	0	True				
ANR	5569198	EqualityExpression	format != 'i'		5568558	0		!=			
ANR	5569199	Identifier	format		5568558	0					
ANR	5569200	PrimaryExpression	'i'		5568558	1					
ANR	5569201	CompoundStatement		323:39:5270:5270	5568558	1					
ANR	5569202	IfStatement	if ( size < 0 )		5568558	0					
ANR	5569203	Condition	size < 0	337:28:5694:5701	5568558	0	True				
ANR	5569204	RelationalExpression	size < 0		5568558	0		<			
ANR	5569205	Identifier	size		5568558	0					
ANR	5569206	PrimaryExpression	0		5568558	1					
ANR	5569207	ExpressionStatement	size = default_fmt_size	339:28:5733:5756	5568558	1	True				
ANR	5569208	AssignmentExpression	size = default_fmt_size		5568558	0		=			
ANR	5569209	Identifier	size		5568558	0					
ANR	5569210	Identifier	default_fmt_size		5568558	1					
ANR	5569211	ExpressionStatement	default_fmt_size = size	341:24:5783:5806	5568558	1	True				
ANR	5569212	AssignmentExpression	default_fmt_size = size		5568558	0		=			
ANR	5569213	Identifier	default_fmt_size		5568558	0					
ANR	5569214	Identifier	size		5568558	1					
ANR	5569215	ExpressionStatement	default_fmt_format = format	345:20:5852:5879	5568558	10	True				
ANR	5569216	AssignmentExpression	default_fmt_format = format		5568558	0		=			
ANR	5569217	Identifier	default_fmt_format		5568558	0					
ANR	5569218	Identifier	format		5568558	1					
ANR	5569219	ElseStatement	else		5568558	0					
ANR	5569220	CompoundStatement		337:23:5591:5591	5568558	0					
ANR	5569221	ExpressionStatement	count = 1	349:20:5928:5937	5568558	0	True				
ANR	5569222	AssignmentExpression	count = 1		5568558	0		=			
ANR	5569223	Identifier	count		5568558	0					
ANR	5569224	PrimaryExpression	1		5568558	1					
ANR	5569225	ExpressionStatement	format = default_fmt_format	351:20:5960:5987	5568558	1	True				
ANR	5569226	AssignmentExpression	format = default_fmt_format		5568558	0		=			
ANR	5569227	Identifier	format		5568558	0					
ANR	5569228	Identifier	default_fmt_format		5568558	1					
ANR	5569229	IfStatement	if ( format != 'i' )		5568558	2					
ANR	5569230	Condition	format != 'i'	353:24:6014:6026	5568558	0	True				
ANR	5569231	EqualityExpression	format != 'i'		5568558	0		!=			
ANR	5569232	Identifier	format		5568558	0					
ANR	5569233	PrimaryExpression	'i'		5568558	1					
ANR	5569234	CompoundStatement		343:39:5715:5715	5568558	1					
ANR	5569235	ExpressionStatement	size = default_fmt_size	355:24:6056:6079	5568558	0	True				
ANR	5569236	AssignmentExpression	size = default_fmt_size		5568558	0		=			
ANR	5569237	Identifier	size		5568558	0					
ANR	5569238	Identifier	default_fmt_size		5568558	1					
ANR	5569239	ElseStatement	else		5568558	0					
ANR	5569240	CompoundStatement		347:27:5795:5795	5568558	0					
ANR	5569241	ExpressionStatement	size = - 1	359:24:6136:6145	5568558	0	True				
ANR	5569242	AssignmentExpression	size = - 1		5568558	0		=			
ANR	5569243	Identifier	size		5568558	0					
ANR	5569244	UnaryOperationExpression	- 1		5568558	1					
ANR	5569245	UnaryOperator	-		5568558	0					
ANR	5569246	PrimaryExpression	1		5568558	1					
ANR	5569247	ExpressionStatement	"qdict_put ( qdict , ""count"" , qint_from_int ( count ) )"	365:16:6206:6253	5568558	3	True				
ANR	5569248	CallExpression	"qdict_put ( qdict , ""count"" , qint_from_int ( count ) )"		5568558	0					
ANR	5569249	Callee	qdict_put		5568558	0					
ANR	5569250	Identifier	qdict_put		5568558	0					
ANR	5569251	ArgumentList	qdict		5568558	1					
ANR	5569252	Argument	qdict		5568558	0					
ANR	5569253	Identifier	qdict		5568558	0					
ANR	5569254	Argument	"""count"""		5568558	1					
ANR	5569255	PrimaryExpression	"""count"""		5568558	0					
ANR	5569256	Argument	qint_from_int ( count )		5568558	2					
ANR	5569257	CallExpression	qint_from_int ( count )		5568558	0					
ANR	5569258	Callee	qint_from_int		5568558	0					
ANR	5569259	Identifier	qint_from_int		5568558	0					
ANR	5569260	ArgumentList	count		5568558	1					
ANR	5569261	Argument	count		5568558	0					
ANR	5569262	Identifier	count		5568558	0					
ANR	5569263	ExpressionStatement	"qdict_put ( qdict , ""format"" , qint_from_int ( format ) )"	367:16:6272:6321	5568558	4	True				
ANR	5569264	CallExpression	"qdict_put ( qdict , ""format"" , qint_from_int ( format ) )"		5568558	0					
ANR	5569265	Callee	qdict_put		5568558	0					
ANR	5569266	Identifier	qdict_put		5568558	0					
ANR	5569267	ArgumentList	qdict		5568558	1					
ANR	5569268	Argument	qdict		5568558	0					
ANR	5569269	Identifier	qdict		5568558	0					
ANR	5569270	Argument	"""format"""		5568558	1					
ANR	5569271	PrimaryExpression	"""format"""		5568558	0					
ANR	5569272	Argument	qint_from_int ( format )		5568558	2					
ANR	5569273	CallExpression	qint_from_int ( format )		5568558	0					
ANR	5569274	Callee	qint_from_int		5568558	0					
ANR	5569275	Identifier	qint_from_int		5568558	0					
ANR	5569276	ArgumentList	format		5568558	1					
ANR	5569277	Argument	format		5568558	0					
ANR	5569278	Identifier	format		5568558	0					
ANR	5569279	ExpressionStatement	"qdict_put ( qdict , ""size"" , qint_from_int ( size ) )"	369:16:6340:6385	5568558	5	True				
ANR	5569280	CallExpression	"qdict_put ( qdict , ""size"" , qint_from_int ( size ) )"		5568558	0					
ANR	5569281	Callee	qdict_put		5568558	0					
ANR	5569282	Identifier	qdict_put		5568558	0					
ANR	5569283	ArgumentList	qdict		5568558	1					
ANR	5569284	Argument	qdict		5568558	0					
ANR	5569285	Identifier	qdict		5568558	0					
ANR	5569286	Argument	"""size"""		5568558	1					
ANR	5569287	PrimaryExpression	"""size"""		5568558	0					
ANR	5569288	Argument	qint_from_int ( size )		5568558	2					
ANR	5569289	CallExpression	qint_from_int ( size )		5568558	0					
ANR	5569290	Callee	qint_from_int		5568558	0					
ANR	5569291	Identifier	qint_from_int		5568558	0					
ANR	5569292	ArgumentList	size		5568558	1					
ANR	5569293	Argument	size		5568558	0					
ANR	5569294	Identifier	size		5568558	0					
ANR	5569295	BreakStatement	break ;	373:12:6415:6420	5568558	10	True				
ANR	5569296	Label	case 'i' :	375:8:6431:6439	5568558	11	True				
ANR	5569297	Label	case 'l' :	377:8:6450:6458	5568558	12	True				
ANR	5569298	Label	case 'M' :	379:8:6469:6477	5568558	13	True				
ANR	5569299	CompoundStatement		373:16:6197:6208	5568558	14					
ANR	5569300	IdentifierDeclStatement	int64_t val ;	383:16:6511:6522	5568558	0	True				
ANR	5569301	IdentifierDecl	val		5568558	0					
ANR	5569302	IdentifierDeclType	int64_t		5568558	0					
ANR	5569303	Identifier	val		5568558	1					
ANR	5569304	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	1					
ANR	5569305	Condition	qemu_isspace ( * p )	387:23:6550:6565	5568558	0	True				
ANR	5569306	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5569307	Callee	qemu_isspace		5568558	0					
ANR	5569308	Identifier	qemu_isspace		5568558	0					
ANR	5569309	ArgumentList	* p		5568558	1					
ANR	5569310	Argument	* p		5568558	0					
ANR	5569311	UnaryOperationExpression	* p		5568558	0					
ANR	5569312	UnaryOperator	*		5568558	0					
ANR	5569313	Identifier	p		5568558	1					
ANR	5569314	ExpressionStatement	p ++	389:20:6589:6592	5568558	1	True				
ANR	5569315	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569316	Identifier	p		5568558	0					
ANR	5569317	IncDec	++		5568558	1					
ANR	5569318	IfStatement	if ( * typestr == '?' || * typestr == '.' )		5568558	2					
ANR	5569319	Condition	* typestr == '?' || * typestr == '.'	391:20:6615:6648	5568558	0	True				
ANR	5569320	OrExpression	* typestr == '?' || * typestr == '.'		5568558	0		||			
ANR	5569321	EqualityExpression	* typestr == '?'		5568558	0		==			
ANR	5569322	UnaryOperationExpression	* typestr		5568558	0					
ANR	5569323	UnaryOperator	*		5568558	0					
ANR	5569324	Identifier	typestr		5568558	1					
ANR	5569325	PrimaryExpression	'?'		5568558	1					
ANR	5569326	EqualityExpression	* typestr == '.'		5568558	1		==			
ANR	5569327	UnaryOperationExpression	* typestr		5568558	0					
ANR	5569328	UnaryOperator	*		5568558	0					
ANR	5569329	Identifier	typestr		5568558	1					
ANR	5569330	PrimaryExpression	'.'		5568558	1					
ANR	5569331	CompoundStatement		381:56:6337:6337	5568558	1					
ANR	5569332	IfStatement	if ( * typestr == '?' )		5568558	0					
ANR	5569333	Condition	* typestr == '?'	393:24:6678:6692	5568558	0	True				
ANR	5569334	EqualityExpression	* typestr == '?'		5568558	0		==			
ANR	5569335	UnaryOperationExpression	* typestr		5568558	0					
ANR	5569336	UnaryOperator	*		5568558	0					
ANR	5569337	Identifier	typestr		5568558	1					
ANR	5569338	PrimaryExpression	'?'		5568558	1					
ANR	5569339	CompoundStatement		383:41:6381:6381	5568558	1					
ANR	5569340	IfStatement	if ( * p == '\\0' )		5568558	0					
ANR	5569341	Condition	* p == '\\0'	395:28:6726:6735	5568558	0	True				
ANR	5569342	EqualityExpression	* p == '\\0'		5568558	0		==			
ANR	5569343	UnaryOperationExpression	* p		5568558	0					
ANR	5569344	UnaryOperator	*		5568558	0					
ANR	5569345	Identifier	p		5568558	1					
ANR	5569346	PrimaryExpression	'\\0'		5568558	1					
ANR	5569347	CompoundStatement		385:40:6424:6424	5568558	1					
ANR	5569348	ExpressionStatement	typestr ++	397:28:6769:6778	5568558	0	True				
ANR	5569349	PostIncDecOperationExpression	typestr ++		5568558	0					
ANR	5569350	Identifier	typestr		5568558	0					
ANR	5569351	IncDec	++		5568558	1					
ANR	5569352	BreakStatement	break ;	399:28:6809:6814	5568558	1	True				
ANR	5569353	ElseStatement	else		5568558	0					
ANR	5569354	CompoundStatement		393:27:6557:6557	5568558	0					
ANR	5569355	IfStatement	if ( * p == '.' )		5568558	0					
ANR	5569356	Condition	* p == '.'	405:28:6902:6910	5568558	0	True				
ANR	5569357	EqualityExpression	* p == '.'		5568558	0		==			
ANR	5569358	UnaryOperationExpression	* p		5568558	0					
ANR	5569359	UnaryOperator	*		5568558	0					
ANR	5569360	Identifier	p		5568558	1					
ANR	5569361	PrimaryExpression	'.'		5568558	1					
ANR	5569362	CompoundStatement		395:39:6599:6599	5568558	1					
ANR	5569363	ExpressionStatement	p ++	407:28:6944:6947	5568558	0	True				
ANR	5569364	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569365	Identifier	p		5568558	0					
ANR	5569366	IncDec	++		5568558	1					
ANR	5569367	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	1					
ANR	5569368	Condition	qemu_isspace ( * p )	409:35:6985:7000	5568558	0	True				
ANR	5569369	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5569370	Callee	qemu_isspace		5568558	0					
ANR	5569371	Identifier	qemu_isspace		5568558	0					
ANR	5569372	ArgumentList	* p		5568558	1					
ANR	5569373	Argument	* p		5568558	0					
ANR	5569374	UnaryOperationExpression	* p		5568558	0					
ANR	5569375	UnaryOperator	*		5568558	0					
ANR	5569376	Identifier	p		5568558	1					
ANR	5569377	ExpressionStatement	p ++	411:32:7036:7039	5568558	1	True				
ANR	5569378	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569379	Identifier	p		5568558	0					
ANR	5569380	IncDec	++		5568558	1					
ANR	5569381	ElseStatement	else		5568558	0					
ANR	5569382	CompoundStatement		403:31:6759:6759	5568558	0					
ANR	5569383	ExpressionStatement	typestr ++	415:28:7104:7113	5568558	0	True				
ANR	5569384	PostIncDecOperationExpression	typestr ++		5568558	0					
ANR	5569385	Identifier	typestr		5568558	0					
ANR	5569386	IncDec	++		5568558	1					
ANR	5569387	BreakStatement	break ;	417:28:7144:7149	5568558	1	True				
ANR	5569388	ExpressionStatement	typestr ++	423:20:7222:7231	5568558	1	True				
ANR	5569389	PostIncDecOperationExpression	typestr ++		5568558	0					
ANR	5569390	Identifier	typestr		5568558	0					
ANR	5569391	IncDec	++		5568558	1					
ANR	5569392	IfStatement	"if ( get_expr ( mon , & val , & p ) )"		5568558	3					
ANR	5569393	Condition	"get_expr ( mon , & val , & p )"	427:20:7273:7295	5568558	0	True				
ANR	5569394	CallExpression	"get_expr ( mon , & val , & p )"		5568558	0					
ANR	5569395	Callee	get_expr		5568558	0					
ANR	5569396	Identifier	get_expr		5568558	0					
ANR	5569397	ArgumentList	mon		5568558	1					
ANR	5569398	Argument	mon		5568558	0					
ANR	5569399	Identifier	mon		5568558	0					
ANR	5569400	Argument	& val		5568558	1					
ANR	5569401	UnaryOperationExpression	& val		5568558	0					
ANR	5569402	UnaryOperator	&		5568558	0					
ANR	5569403	Identifier	val		5568558	1					
ANR	5569404	Argument	& p		5568558	2					
ANR	5569405	UnaryOperationExpression	& p		5568558	0					
ANR	5569406	UnaryOperator	&		5568558	0					
ANR	5569407	Identifier	p		5568558	1					
ANR	5569408	GotoStatement	goto fail ;	429:20:7319:7328	5568558	1	True				
ANR	5569409	Identifier	fail		5568558	0					
ANR	5569410	IfStatement	if ( ( c == 'i' ) && ( ( val >> 32 ) & 0xffffffff ) )		5568558	4					
ANR	5569411	Condition	( c == 'i' ) && ( ( val >> 32 ) & 0xffffffff )	433:20:7410:7449	5568558	0	True				
ANR	5569412	AndExpression	( c == 'i' ) && ( ( val >> 32 ) & 0xffffffff )		5568558	0		&&			
ANR	5569413	EqualityExpression	c == 'i'		5568558	0		==			
ANR	5569414	Identifier	c		5568558	0					
ANR	5569415	PrimaryExpression	'i'		5568558	1					
ANR	5569416	BitAndExpression	( val >> 32 ) & 0xffffffff		5568558	1		&			
ANR	5569417	ShiftExpression	val >> 32		5568558	0		>>			
ANR	5569418	Identifier	val		5568558	0					
ANR	5569419	PrimaryExpression	32		5568558	1					
ANR	5569420	PrimaryExpression	0xffffffff		5568558	1					
ANR	5569421	CompoundStatement		423:62:7138:7138	5568558	1					
ANR	5569422	ExpressionStatement	"monitor_printf ( mon , ""\\'%s\\' has failed: "" , cmdname )"	435:20:7475:7526	5568558	0	True				
ANR	5569423	CallExpression	"monitor_printf ( mon , ""\\'%s\\' has failed: "" , cmdname )"		5568558	0					
ANR	5569424	Callee	monitor_printf		5568558	0					
ANR	5569425	Identifier	monitor_printf		5568558	0					
ANR	5569426	ArgumentList	mon		5568558	1					
ANR	5569427	Argument	mon		5568558	0					
ANR	5569428	Identifier	mon		5568558	0					
ANR	5569429	Argument	"""\\'%s\\' has failed: """		5568558	1					
ANR	5569430	PrimaryExpression	"""\\'%s\\' has failed: """		5568558	0					
ANR	5569431	Argument	cmdname		5568558	2					
ANR	5569432	Identifier	cmdname		5568558	0					
ANR	5569433	ExpressionStatement	"monitor_printf ( mon , ""integer is for 32-bit values\\n"" )"	437:20:7549:7602	5568558	1	True				
ANR	5569434	CallExpression	"monitor_printf ( mon , ""integer is for 32-bit values\\n"" )"		5568558	0					
ANR	5569435	Callee	monitor_printf		5568558	0					
ANR	5569436	Identifier	monitor_printf		5568558	0					
ANR	5569437	ArgumentList	mon		5568558	1					
ANR	5569438	Argument	mon		5568558	0					
ANR	5569439	Identifier	mon		5568558	0					
ANR	5569440	Argument	"""integer is for 32-bit values\\n"""		5568558	1					
ANR	5569441	PrimaryExpression	"""integer is for 32-bit values\\n"""		5568558	0					
ANR	5569442	GotoStatement	goto fail ;	439:20:7625:7634	5568558	2	True				
ANR	5569443	Identifier	fail		5568558	0					
ANR	5569444	ElseStatement	else		5568558	0					
ANR	5569445	IfStatement	if ( c == 'M' )		5568558	0					
ANR	5569446	Condition	c == 'M'	441:27:7664:7671	5568558	0	True				
ANR	5569447	EqualityExpression	c == 'M'		5568558	0		==			
ANR	5569448	Identifier	c		5568558	0					
ANR	5569449	PrimaryExpression	'M'		5568558	1					
ANR	5569450	CompoundStatement		431:37:7360:7360	5568558	1					
ANR	5569451	IfStatement	if ( val < 0 )		5568558	0					
ANR	5569452	Condition	val < 0	443:24:7701:7707	5568558	0	True				
ANR	5569453	RelationalExpression	val < 0		5568558	0		<			
ANR	5569454	Identifier	val		5568558	0					
ANR	5569455	PrimaryExpression	0		5568558	1					
ANR	5569456	CompoundStatement		433:33:7396:7396	5568558	1					
ANR	5569457	ExpressionStatement	"monitor_printf ( mon , ""enter a positive value\\n"" )"	445:24:7737:7784	5568558	0	True				
ANR	5569458	CallExpression	"monitor_printf ( mon , ""enter a positive value\\n"" )"		5568558	0					
ANR	5569459	Callee	monitor_printf		5568558	0					
ANR	5569460	Identifier	monitor_printf		5568558	0					
ANR	5569461	ArgumentList	mon		5568558	1					
ANR	5569462	Argument	mon		5568558	0					
ANR	5569463	Identifier	mon		5568558	0					
ANR	5569464	Argument	"""enter a positive value\\n"""		5568558	1					
ANR	5569465	PrimaryExpression	"""enter a positive value\\n"""		5568558	0					
ANR	5569466	GotoStatement	goto fail ;	447:24:7811:7820	5568558	1	True				
ANR	5569467	Identifier	fail		5568558	0					
ANR	5569468	ExpressionStatement	val <<= 20	451:20:7866:7876	5568558	1	True				
ANR	5569469	AssignmentExpression	val <<= 20		5568558	0		<<=			
ANR	5569470	Identifier	val		5568558	0					
ANR	5569471	PrimaryExpression	20		5568558	1					
ANR	5569472	ExpressionStatement	"qdict_put ( qdict , key , qint_from_int ( val ) )"	455:16:7914:7955	5568558	5	True				
ANR	5569473	CallExpression	"qdict_put ( qdict , key , qint_from_int ( val ) )"		5568558	0					
ANR	5569474	Callee	qdict_put		5568558	0					
ANR	5569475	Identifier	qdict_put		5568558	0					
ANR	5569476	ArgumentList	qdict		5568558	1					
ANR	5569477	Argument	qdict		5568558	0					
ANR	5569478	Identifier	qdict		5568558	0					
ANR	5569479	Argument	key		5568558	1					
ANR	5569480	Identifier	key		5568558	0					
ANR	5569481	Argument	qint_from_int ( val )		5568558	2					
ANR	5569482	CallExpression	qint_from_int ( val )		5568558	0					
ANR	5569483	Callee	qint_from_int		5568558	0					
ANR	5569484	Identifier	qint_from_int		5568558	0					
ANR	5569485	ArgumentList	val		5568558	1					
ANR	5569486	Argument	val		5568558	0					
ANR	5569487	Identifier	val		5568558	0					
ANR	5569488	BreakStatement	break ;	459:12:7985:7990	5568558	15	True				
ANR	5569489	Label	case 'o' :	461:8:8001:8009	5568558	16	True				
ANR	5569490	CompoundStatement		457:16:7759:7768	5568558	17					
ANR	5569491	IdentifierDeclStatement	int64_t val ;	465:16:8043:8054	5568558	0	True				
ANR	5569492	IdentifierDecl	val		5568558	0					
ANR	5569493	IdentifierDeclType	int64_t		5568558	0					
ANR	5569494	Identifier	val		5568558	1					
ANR	5569495	IdentifierDeclStatement	char * end ;	467:16:8073:8082	5568558	1	True				
ANR	5569496	IdentifierDecl	* end		5568558	0					
ANR	5569497	IdentifierDeclType	char *		5568558	0					
ANR	5569498	Identifier	end		5568558	1					
ANR	5569499	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	2					
ANR	5569500	Condition	qemu_isspace ( * p )	471:23:8110:8125	5568558	0	True				
ANR	5569501	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5569502	Callee	qemu_isspace		5568558	0					
ANR	5569503	Identifier	qemu_isspace		5568558	0					
ANR	5569504	ArgumentList	* p		5568558	1					
ANR	5569505	Argument	* p		5568558	0					
ANR	5569506	UnaryOperationExpression	* p		5568558	0					
ANR	5569507	UnaryOperator	*		5568558	0					
ANR	5569508	Identifier	p		5568558	1					
ANR	5569509	CompoundStatement		461:41:7814:7814	5568558	1					
ANR	5569510	ExpressionStatement	p ++	473:20:8151:8154	5568558	0	True				
ANR	5569511	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569512	Identifier	p		5568558	0					
ANR	5569513	IncDec	++		5568558	1					
ANR	5569514	IfStatement	if ( * typestr == '?' )		5568558	3					
ANR	5569515	Condition	* typestr == '?'	477:20:8196:8210	5568558	0	True				
ANR	5569516	EqualityExpression	* typestr == '?'		5568558	0		==			
ANR	5569517	UnaryOperationExpression	* typestr		5568558	0					
ANR	5569518	UnaryOperator	*		5568558	0					
ANR	5569519	Identifier	typestr		5568558	1					
ANR	5569520	PrimaryExpression	'?'		5568558	1					
ANR	5569521	CompoundStatement		467:37:7899:7899	5568558	1					
ANR	5569522	ExpressionStatement	typestr ++	479:20:8236:8245	5568558	0	True				
ANR	5569523	PostIncDecOperationExpression	typestr ++		5568558	0					
ANR	5569524	Identifier	typestr		5568558	0					
ANR	5569525	IncDec	++		5568558	1					
ANR	5569526	IfStatement	if ( * p == '\\0' )		5568558	1					
ANR	5569527	Condition	* p == '\\0'	481:24:8272:8281	5568558	0	True				
ANR	5569528	EqualityExpression	* p == '\\0'		5568558	0		==			
ANR	5569529	UnaryOperationExpression	* p		5568558	0					
ANR	5569530	UnaryOperator	*		5568558	0					
ANR	5569531	Identifier	p		5568558	1					
ANR	5569532	PrimaryExpression	'\\0'		5568558	1					
ANR	5569533	CompoundStatement		471:36:7970:7970	5568558	1					
ANR	5569534	BreakStatement	break ;	483:24:8311:8316	5568558	0	True				
ANR	5569535	ExpressionStatement	"val = strtosz ( p , & end )"	489:16:8377:8399	5568558	4	True				
ANR	5569536	AssignmentExpression	"val = strtosz ( p , & end )"		5568558	0		=			
ANR	5569537	Identifier	val		5568558	0					
ANR	5569538	CallExpression	"strtosz ( p , & end )"		5568558	1					
ANR	5569539	Callee	strtosz		5568558	0					
ANR	5569540	Identifier	strtosz		5568558	0					
ANR	5569541	ArgumentList	p		5568558	1					
ANR	5569542	Argument	p		5568558	0					
ANR	5569543	Identifier	p		5568558	0					
ANR	5569544	Argument	& end		5568558	1					
ANR	5569545	UnaryOperationExpression	& end		5568558	0					
ANR	5569546	UnaryOperator	&		5568558	0					
ANR	5569547	Identifier	end		5568558	1					
ANR	5569548	IfStatement	if ( val < 0 )		5568558	5					
ANR	5569549	Condition	val < 0	491:20:8422:8428	5568558	0	True				
ANR	5569550	RelationalExpression	val < 0		5568558	0		<			
ANR	5569551	Identifier	val		5568558	0					
ANR	5569552	PrimaryExpression	0		5568558	1					
ANR	5569553	CompoundStatement		481:29:8117:8117	5568558	1					
ANR	5569554	ExpressionStatement	"monitor_printf ( mon , ""invalid size\\n"" )"	493:20:8454:8491	5568558	0	True				
ANR	5569555	CallExpression	"monitor_printf ( mon , ""invalid size\\n"" )"		5568558	0					
ANR	5569556	Callee	monitor_printf		5568558	0					
ANR	5569557	Identifier	monitor_printf		5568558	0					
ANR	5569558	ArgumentList	mon		5568558	1					
ANR	5569559	Argument	mon		5568558	0					
ANR	5569560	Identifier	mon		5568558	0					
ANR	5569561	Argument	"""invalid size\\n"""		5568558	1					
ANR	5569562	PrimaryExpression	"""invalid size\\n"""		5568558	0					
ANR	5569563	GotoStatement	goto fail ;	495:20:8514:8523	5568558	1	True				
ANR	5569564	Identifier	fail		5568558	0					
ANR	5569565	ExpressionStatement	"qdict_put ( qdict , key , qint_from_int ( val ) )"	499:16:8561:8602	5568558	6	True				
ANR	5569566	CallExpression	"qdict_put ( qdict , key , qint_from_int ( val ) )"		5568558	0					
ANR	5569567	Callee	qdict_put		5568558	0					
ANR	5569568	Identifier	qdict_put		5568558	0					
ANR	5569569	ArgumentList	qdict		5568558	1					
ANR	5569570	Argument	qdict		5568558	0					
ANR	5569571	Identifier	qdict		5568558	0					
ANR	5569572	Argument	key		5568558	1					
ANR	5569573	Identifier	key		5568558	0					
ANR	5569574	Argument	qint_from_int ( val )		5568558	2					
ANR	5569575	CallExpression	qint_from_int ( val )		5568558	0					
ANR	5569576	Callee	qint_from_int		5568558	0					
ANR	5569577	Identifier	qint_from_int		5568558	0					
ANR	5569578	ArgumentList	val		5568558	1					
ANR	5569579	Argument	val		5568558	0					
ANR	5569580	Identifier	val		5568558	0					
ANR	5569581	ExpressionStatement	p = end	501:16:8621:8628	5568558	7	True				
ANR	5569582	AssignmentExpression	p = end		5568558	0		=			
ANR	5569583	Identifier	p		5568558	0					
ANR	5569584	Identifier	end		5568558	1					
ANR	5569585	BreakStatement	break ;	505:12:8658:8663	5568558	18	True				
ANR	5569586	Label	case 'T' :	507:8:8674:8682	5568558	19	True				
ANR	5569587	CompoundStatement		501:16:8402:8412	5568558	20					
ANR	5569588	IdentifierDeclStatement	double val ;	511:16:8716:8726	5568558	0	True				
ANR	5569589	IdentifierDecl	val		5568558	0					
ANR	5569590	IdentifierDeclType	double		5568558	0					
ANR	5569591	Identifier	val		5568558	1					
ANR	5569592	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	1					
ANR	5569593	Condition	qemu_isspace ( * p )	515:23:8754:8769	5568558	0	True				
ANR	5569594	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5569595	Callee	qemu_isspace		5568558	0					
ANR	5569596	Identifier	qemu_isspace		5568558	0					
ANR	5569597	ArgumentList	* p		5568558	1					
ANR	5569598	Argument	* p		5568558	0					
ANR	5569599	UnaryOperationExpression	* p		5568558	0					
ANR	5569600	UnaryOperator	*		5568558	0					
ANR	5569601	Identifier	p		5568558	1					
ANR	5569602	ExpressionStatement	p ++	517:20:8793:8796	5568558	1	True				
ANR	5569603	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569604	Identifier	p		5568558	0					
ANR	5569605	IncDec	++		5568558	1					
ANR	5569606	IfStatement	if ( * typestr == '?' )		5568558	2					
ANR	5569607	Condition	* typestr == '?'	519:20:8819:8833	5568558	0	True				
ANR	5569608	EqualityExpression	* typestr == '?'		5568558	0		==			
ANR	5569609	UnaryOperationExpression	* typestr		5568558	0					
ANR	5569610	UnaryOperator	*		5568558	0					
ANR	5569611	Identifier	typestr		5568558	1					
ANR	5569612	PrimaryExpression	'?'		5568558	1					
ANR	5569613	CompoundStatement		509:37:8522:8522	5568558	1					
ANR	5569614	ExpressionStatement	typestr ++	521:20:8859:8868	5568558	0	True				
ANR	5569615	PostIncDecOperationExpression	typestr ++		5568558	0					
ANR	5569616	Identifier	typestr		5568558	0					
ANR	5569617	IncDec	++		5568558	1					
ANR	5569618	IfStatement	if ( * p == '\\0' )		5568558	1					
ANR	5569619	Condition	* p == '\\0'	523:24:8895:8904	5568558	0	True				
ANR	5569620	EqualityExpression	* p == '\\0'		5568558	0		==			
ANR	5569621	UnaryOperationExpression	* p		5568558	0					
ANR	5569622	UnaryOperator	*		5568558	0					
ANR	5569623	Identifier	p		5568558	1					
ANR	5569624	PrimaryExpression	'\\0'		5568558	1					
ANR	5569625	CompoundStatement		513:36:8593:8593	5568558	1					
ANR	5569626	BreakStatement	break ;	525:24:8934:8939	5568558	0	True				
ANR	5569627	IfStatement	"if ( get_double ( mon , & val , & p ) < 0 )"		5568558	3					
ANR	5569628	Condition	"get_double ( mon , & val , & p ) < 0"	531:20:9004:9032	5568558	0	True				
ANR	5569629	RelationalExpression	"get_double ( mon , & val , & p ) < 0"		5568558	0		<			
ANR	5569630	CallExpression	"get_double ( mon , & val , & p )"		5568558	0					
ANR	5569631	Callee	get_double		5568558	0					
ANR	5569632	Identifier	get_double		5568558	0					
ANR	5569633	ArgumentList	mon		5568558	1					
ANR	5569634	Argument	mon		5568558	0					
ANR	5569635	Identifier	mon		5568558	0					
ANR	5569636	Argument	& val		5568558	1					
ANR	5569637	UnaryOperationExpression	& val		5568558	0					
ANR	5569638	UnaryOperator	&		5568558	0					
ANR	5569639	Identifier	val		5568558	1					
ANR	5569640	Argument	& p		5568558	2					
ANR	5569641	UnaryOperationExpression	& p		5568558	0					
ANR	5569642	UnaryOperator	&		5568558	0					
ANR	5569643	Identifier	p		5568558	1					
ANR	5569644	PrimaryExpression	0		5568558	1					
ANR	5569645	CompoundStatement		521:51:8721:8721	5568558	1					
ANR	5569646	GotoStatement	goto fail ;	533:20:9058:9067	5568558	0	True				
ANR	5569647	Identifier	fail		5568558	0					
ANR	5569648	IfStatement	if ( p [ 0 ] && p [ 1 ] == 's' )		5568558	4					
ANR	5569649	Condition	p [ 0 ] && p [ 1 ] == 's'	537:20:9109:9127	5568558	0	True				
ANR	5569650	AndExpression	p [ 0 ] && p [ 1 ] == 's'		5568558	0		&&			
ANR	5569651	ArrayIndexing	p [ 0 ]		5568558	0					
ANR	5569652	Identifier	p		5568558	0					
ANR	5569653	PrimaryExpression	0		5568558	1					
ANR	5569654	EqualityExpression	p [ 1 ] == 's'		5568558	1		==			
ANR	5569655	ArrayIndexing	p [ 1 ]		5568558	0					
ANR	5569656	Identifier	p		5568558	0					
ANR	5569657	PrimaryExpression	1		5568558	1					
ANR	5569658	PrimaryExpression	's'		5568558	1					
ANR	5569659	CompoundStatement		527:41:8816:8816	5568558	1					
ANR	5569660	SwitchStatement	switch ( * p )		5568558	0					
ANR	5569661	Condition	* p	539:28:9161:9162	5568558	0	True				
ANR	5569662	UnaryOperationExpression	* p		5568558	0					
ANR	5569663	UnaryOperator	*		5568558	0					
ANR	5569664	Identifier	p		5568558	1					
ANR	5569665	CompoundStatement		529:32:8851:8851	5568558	1					
ANR	5569666	Label	case 'm' :	541:20:9188:9196	5568558	0	True				
ANR	5569667	ExpressionStatement	val /= 1e3	543:24:9223:9233	5568558	1	True				
ANR	5569668	AssignmentExpression	val /= 1e3		5568558	0		/=			
ANR	5569669	Identifier	val		5568558	0					
ANR	5569670	PrimaryExpression	1e3		5568558	1					
ANR	5569671	ExpressionStatement	p += 2	543:36:9235:9241	5568558	2	True				
ANR	5569672	AssignmentExpression	p += 2		5568558	0		+=			
ANR	5569673	Identifier	p		5568558	0					
ANR	5569674	PrimaryExpression	2		5568558	1					
ANR	5569675	BreakStatement	break ;	543:44:9243:9248	5568558	3	True				
ANR	5569676	Label	case 'u' :	545:20:9271:9279	5568558	4	True				
ANR	5569677	ExpressionStatement	val /= 1e6	547:24:9306:9316	5568558	5	True				
ANR	5569678	AssignmentExpression	val /= 1e6		5568558	0		/=			
ANR	5569679	Identifier	val		5568558	0					
ANR	5569680	PrimaryExpression	1e6		5568558	1					
ANR	5569681	ExpressionStatement	p += 2	547:36:9318:9324	5568558	6	True				
ANR	5569682	AssignmentExpression	p += 2		5568558	0		+=			
ANR	5569683	Identifier	p		5568558	0					
ANR	5569684	PrimaryExpression	2		5568558	1					
ANR	5569685	BreakStatement	break ;	547:44:9326:9331	5568558	7	True				
ANR	5569686	Label	case 'n' :	549:20:9354:9362	5568558	8	True				
ANR	5569687	ExpressionStatement	val /= 1e9	551:24:9389:9399	5568558	9	True				
ANR	5569688	AssignmentExpression	val /= 1e9		5568558	0		/=			
ANR	5569689	Identifier	val		5568558	0					
ANR	5569690	PrimaryExpression	1e9		5568558	1					
ANR	5569691	ExpressionStatement	p += 2	551:36:9401:9407	5568558	10	True				
ANR	5569692	AssignmentExpression	p += 2		5568558	0		+=			
ANR	5569693	Identifier	p		5568558	0					
ANR	5569694	PrimaryExpression	2		5568558	1					
ANR	5569695	BreakStatement	break ;	551:44:9409:9414	5568558	11	True				
ANR	5569696	IfStatement	if ( * p && ! qemu_isspace ( * p ) )		5568558	5					
ANR	5569697	Condition	* p && ! qemu_isspace ( * p )	557:20:9479:9501	5568558	0	True				
ANR	5569698	AndExpression	* p && ! qemu_isspace ( * p )		5568558	0		&&			
ANR	5569699	UnaryOperationExpression	* p		5568558	0					
ANR	5569700	UnaryOperator	*		5568558	0					
ANR	5569701	Identifier	p		5568558	1					
ANR	5569702	UnaryOperationExpression	! qemu_isspace ( * p )		5568558	1					
ANR	5569703	UnaryOperator	!		5568558	0					
ANR	5569704	CallExpression	qemu_isspace ( * p )		5568558	1					
ANR	5569705	Callee	qemu_isspace		5568558	0					
ANR	5569706	Identifier	qemu_isspace		5568558	0					
ANR	5569707	ArgumentList	* p		5568558	1					
ANR	5569708	Argument	* p		5568558	0					
ANR	5569709	UnaryOperationExpression	* p		5568558	0					
ANR	5569710	UnaryOperator	*		5568558	0					
ANR	5569711	Identifier	p		5568558	1					
ANR	5569712	CompoundStatement		547:45:9190:9190	5568558	1					
ANR	5569713	ExpressionStatement	"monitor_printf ( mon , ""Unknown unit suffix\\n"" )"	559:20:9527:9571	5568558	0	True				
ANR	5569714	CallExpression	"monitor_printf ( mon , ""Unknown unit suffix\\n"" )"		5568558	0					
ANR	5569715	Callee	monitor_printf		5568558	0					
ANR	5569716	Identifier	monitor_printf		5568558	0					
ANR	5569717	ArgumentList	mon		5568558	1					
ANR	5569718	Argument	mon		5568558	0					
ANR	5569719	Identifier	mon		5568558	0					
ANR	5569720	Argument	"""Unknown unit suffix\\n"""		5568558	1					
ANR	5569721	PrimaryExpression	"""Unknown unit suffix\\n"""		5568558	0					
ANR	5569722	GotoStatement	goto fail ;	561:20:9594:9603	5568558	1	True				
ANR	5569723	Identifier	fail		5568558	0					
ANR	5569724	ExpressionStatement	"qdict_put ( qdict , key , qfloat_from_double ( val ) )"	565:16:9641:9687	5568558	6	True				
ANR	5569725	CallExpression	"qdict_put ( qdict , key , qfloat_from_double ( val ) )"		5568558	0					
ANR	5569726	Callee	qdict_put		5568558	0					
ANR	5569727	Identifier	qdict_put		5568558	0					
ANR	5569728	ArgumentList	qdict		5568558	1					
ANR	5569729	Argument	qdict		5568558	0					
ANR	5569730	Identifier	qdict		5568558	0					
ANR	5569731	Argument	key		5568558	1					
ANR	5569732	Identifier	key		5568558	0					
ANR	5569733	Argument	qfloat_from_double ( val )		5568558	2					
ANR	5569734	CallExpression	qfloat_from_double ( val )		5568558	0					
ANR	5569735	Callee	qfloat_from_double		5568558	0					
ANR	5569736	Identifier	qfloat_from_double		5568558	0					
ANR	5569737	ArgumentList	val		5568558	1					
ANR	5569738	Argument	val		5568558	0					
ANR	5569739	Identifier	val		5568558	0					
ANR	5569740	BreakStatement	break ;	569:12:9717:9722	5568558	21	True				
ANR	5569741	Label	case 'b' :	571:8:9733:9741	5568558	22	True				
ANR	5569742	CompoundStatement		567:16:9495:9503	5568558	23					
ANR	5569743	IdentifierDeclStatement	const char * beg ;	575:16:9775:9790	5568558	0	True				
ANR	5569744	IdentifierDecl	* beg		5568558	0					
ANR	5569745	IdentifierDeclType	const char *		5568558	0					
ANR	5569746	Identifier	beg		5568558	1					
ANR	5569747	IdentifierDeclStatement	bool val ;	577:16:9809:9817	5568558	1	True				
ANR	5569748	IdentifierDecl	val		5568558	0					
ANR	5569749	IdentifierDeclType	bool		5568558	0					
ANR	5569750	Identifier	val		5568558	1					
ANR	5569751	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	2					
ANR	5569752	Condition	qemu_isspace ( * p )	581:23:9845:9860	5568558	0	True				
ANR	5569753	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5569754	Callee	qemu_isspace		5568558	0					
ANR	5569755	Identifier	qemu_isspace		5568558	0					
ANR	5569756	ArgumentList	* p		5568558	1					
ANR	5569757	Argument	* p		5568558	0					
ANR	5569758	UnaryOperationExpression	* p		5568558	0					
ANR	5569759	UnaryOperator	*		5568558	0					
ANR	5569760	Identifier	p		5568558	1					
ANR	5569761	CompoundStatement		571:41:9549:9549	5568558	1					
ANR	5569762	ExpressionStatement	p ++	583:20:9886:9889	5568558	0	True				
ANR	5569763	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569764	Identifier	p		5568558	0					
ANR	5569765	IncDec	++		5568558	1					
ANR	5569766	ExpressionStatement	beg = p	587:16:9927:9934	5568558	3	True				
ANR	5569767	AssignmentExpression	beg = p		5568558	0		=			
ANR	5569768	Identifier	beg		5568558	0					
ANR	5569769	Identifier	p		5568558	1					
ANR	5569770	WhileStatement	while ( qemu_isgraph ( * p ) )		5568558	4					
ANR	5569771	Condition	qemu_isgraph ( * p )	589:23:9960:9975	5568558	0	True				
ANR	5569772	CallExpression	qemu_isgraph ( * p )		5568558	0					
ANR	5569773	Callee	qemu_isgraph		5568558	0					
ANR	5569774	Identifier	qemu_isgraph		5568558	0					
ANR	5569775	ArgumentList	* p		5568558	1					
ANR	5569776	Argument	* p		5568558	0					
ANR	5569777	UnaryOperationExpression	* p		5568558	0					
ANR	5569778	UnaryOperator	*		5568558	0					
ANR	5569779	Identifier	p		5568558	1					
ANR	5569780	CompoundStatement		579:41:9664:9664	5568558	1					
ANR	5569781	ExpressionStatement	p ++	591:20:10001:10004	5568558	0	True				
ANR	5569782	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569783	Identifier	p		5568558	0					
ANR	5569784	IncDec	++		5568558	1					
ANR	5569785	IfStatement	"if ( p - beg == 2 && ! memcmp ( beg , ""on"" , p - beg ) )"		5568558	5					
ANR	5569786	Condition	"p - beg == 2 && ! memcmp ( beg , ""on"" , p - beg )"	595:20:10046:10088	5568558	0	True				
ANR	5569787	AndExpression	"p - beg == 2 && ! memcmp ( beg , ""on"" , p - beg )"		5568558	0		&&			
ANR	5569788	EqualityExpression	p - beg == 2		5568558	0		==			
ANR	5569789	AdditiveExpression	p - beg		5568558	0		-			
ANR	5569790	Identifier	p		5568558	0					
ANR	5569791	Identifier	beg		5568558	1					
ANR	5569792	PrimaryExpression	2		5568558	1					
ANR	5569793	UnaryOperationExpression	"! memcmp ( beg , ""on"" , p - beg )"		5568558	1					
ANR	5569794	UnaryOperator	!		5568558	0					
ANR	5569795	CallExpression	"memcmp ( beg , ""on"" , p - beg )"		5568558	1					
ANR	5569796	Callee	memcmp		5568558	0					
ANR	5569797	Identifier	memcmp		5568558	0					
ANR	5569798	ArgumentList	beg		5568558	1					
ANR	5569799	Argument	beg		5568558	0					
ANR	5569800	Identifier	beg		5568558	0					
ANR	5569801	Argument	"""on"""		5568558	1					
ANR	5569802	PrimaryExpression	"""on"""		5568558	0					
ANR	5569803	Argument	p - beg		5568558	2					
ANR	5569804	AdditiveExpression	p - beg		5568558	0		-			
ANR	5569805	Identifier	p		5568558	0					
ANR	5569806	Identifier	beg		5568558	1					
ANR	5569807	CompoundStatement		585:65:9777:9777	5568558	1					
ANR	5569808	ExpressionStatement	val = true	597:20:10114:10124	5568558	0	True				
ANR	5569809	AssignmentExpression	val = true		5568558	0		=			
ANR	5569810	Identifier	val		5568558	0					
ANR	5569811	Identifier	true		5568558	1					
ANR	5569812	ElseStatement	else		5568558	0					
ANR	5569813	IfStatement	"if ( p - beg == 3 && ! memcmp ( beg , ""off"" , p - beg ) )"		5568558	0					
ANR	5569814	Condition	"p - beg == 3 && ! memcmp ( beg , ""off"" , p - beg )"	599:27:10154:10197	5568558	0	True				
ANR	5569815	AndExpression	"p - beg == 3 && ! memcmp ( beg , ""off"" , p - beg )"		5568558	0		&&			
ANR	5569816	EqualityExpression	p - beg == 3		5568558	0		==			
ANR	5569817	AdditiveExpression	p - beg		5568558	0		-			
ANR	5569818	Identifier	p		5568558	0					
ANR	5569819	Identifier	beg		5568558	1					
ANR	5569820	PrimaryExpression	3		5568558	1					
ANR	5569821	UnaryOperationExpression	"! memcmp ( beg , ""off"" , p - beg )"		5568558	1					
ANR	5569822	UnaryOperator	!		5568558	0					
ANR	5569823	CallExpression	"memcmp ( beg , ""off"" , p - beg )"		5568558	1					
ANR	5569824	Callee	memcmp		5568558	0					
ANR	5569825	Identifier	memcmp		5568558	0					
ANR	5569826	ArgumentList	beg		5568558	1					
ANR	5569827	Argument	beg		5568558	0					
ANR	5569828	Identifier	beg		5568558	0					
ANR	5569829	Argument	"""off"""		5568558	1					
ANR	5569830	PrimaryExpression	"""off"""		5568558	0					
ANR	5569831	Argument	p - beg		5568558	2					
ANR	5569832	AdditiveExpression	p - beg		5568558	0		-			
ANR	5569833	Identifier	p		5568558	0					
ANR	5569834	Identifier	beg		5568558	1					
ANR	5569835	CompoundStatement		589:73:9886:9886	5568558	1					
ANR	5569836	ExpressionStatement	val = false	601:20:10223:10234	5568558	0	True				
ANR	5569837	AssignmentExpression	val = false		5568558	0		=			
ANR	5569838	Identifier	val		5568558	0					
ANR	5569839	Identifier	false		5568558	1					
ANR	5569840	ElseStatement	else		5568558	0					
ANR	5569841	CompoundStatement		593:23:9946:9946	5568558	0					
ANR	5569842	ExpressionStatement	"monitor_printf ( mon , ""Expected 'on' or 'off'\\n"" )"	605:20:10283:10330	5568558	0	True				
ANR	5569843	CallExpression	"monitor_printf ( mon , ""Expected 'on' or 'off'\\n"" )"		5568558	0					
ANR	5569844	Callee	monitor_printf		5568558	0					
ANR	5569845	Identifier	monitor_printf		5568558	0					
ANR	5569846	ArgumentList	mon		5568558	1					
ANR	5569847	Argument	mon		5568558	0					
ANR	5569848	Identifier	mon		5568558	0					
ANR	5569849	Argument	"""Expected 'on' or 'off'\\n"""		5568558	1					
ANR	5569850	PrimaryExpression	"""Expected 'on' or 'off'\\n"""		5568558	0					
ANR	5569851	GotoStatement	goto fail ;	607:20:10353:10362	5568558	1	True				
ANR	5569852	Identifier	fail		5568558	0					
ANR	5569853	ExpressionStatement	"qdict_put ( qdict , key , qbool_from_bool ( val ) )"	611:16:10400:10443	5568558	6	True				
ANR	5569854	CallExpression	"qdict_put ( qdict , key , qbool_from_bool ( val ) )"		5568558	0					
ANR	5569855	Callee	qdict_put		5568558	0					
ANR	5569856	Identifier	qdict_put		5568558	0					
ANR	5569857	ArgumentList	qdict		5568558	1					
ANR	5569858	Argument	qdict		5568558	0					
ANR	5569859	Identifier	qdict		5568558	0					
ANR	5569860	Argument	key		5568558	1					
ANR	5569861	Identifier	key		5568558	0					
ANR	5569862	Argument	qbool_from_bool ( val )		5568558	2					
ANR	5569863	CallExpression	qbool_from_bool ( val )		5568558	0					
ANR	5569864	Callee	qbool_from_bool		5568558	0					
ANR	5569865	Identifier	qbool_from_bool		5568558	0					
ANR	5569866	ArgumentList	val		5568558	1					
ANR	5569867	Argument	val		5568558	0					
ANR	5569868	Identifier	val		5568558	0					
ANR	5569869	BreakStatement	break ;	615:12:10473:10478	5568558	24	True				
ANR	5569870	Label	case '-' :	617:8:10489:10497	5568558	25	True				
ANR	5569871	CompoundStatement		613:16:10255:10271	5568558	26					
ANR	5569872	IdentifierDeclStatement	const char * tmp = p ;	621:16:10531:10550	5568558	0	True				
ANR	5569873	IdentifierDecl	* tmp = p		5568558	0					
ANR	5569874	IdentifierDeclType	const char *		5568558	0					
ANR	5569875	Identifier	tmp		5568558	1					
ANR	5569876	AssignmentExpression	* tmp = p		5568558	2		=			
ANR	5569877	Identifier	p		5568558	0					
ANR	5569878	Identifier	p		5568558	1					
ANR	5569879	IdentifierDeclStatement	int skip_key = 0 ;	623:16:10569:10585	5568558	1	True				
ANR	5569880	IdentifierDecl	skip_key = 0		5568558	0					
ANR	5569881	IdentifierDeclType	int		5568558	0					
ANR	5569882	Identifier	skip_key		5568558	1					
ANR	5569883	AssignmentExpression	skip_key = 0		5568558	2		=			
ANR	5569884	Identifier	skip_key		5568558	0					
ANR	5569885	PrimaryExpression	0		5568558	1					
ANR	5569886	ExpressionStatement	c = * typestr ++	629:16:10636:10650	5568558	2	True				
ANR	5569887	AssignmentExpression	c = * typestr ++		5568558	0		=			
ANR	5569888	Identifier	c		5568558	0					
ANR	5569889	UnaryOperationExpression	* typestr ++		5568558	1					
ANR	5569890	UnaryOperator	*		5568558	0					
ANR	5569891	PostIncDecOperationExpression	typestr ++		5568558	1					
ANR	5569892	Identifier	typestr		5568558	0					
ANR	5569893	IncDec	++		5568558	1					
ANR	5569894	IfStatement	if ( c == '\\0' )		5568558	3					
ANR	5569895	Condition	c == '\\0'	631:20:10673:10681	5568558	0	True				
ANR	5569896	EqualityExpression	c == '\\0'		5568558	0		==			
ANR	5569897	Identifier	c		5568558	0					
ANR	5569898	PrimaryExpression	'\\0'		5568558	1					
ANR	5569899	GotoStatement	goto bad_type ;	633:20:10705:10718	5568558	1	True				
ANR	5569900	Identifier	bad_type		5568558	0					
ANR	5569901	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	4					
ANR	5569902	Condition	qemu_isspace ( * p )	635:23:10744:10759	5568558	0	True				
ANR	5569903	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5569904	Callee	qemu_isspace		5568558	0					
ANR	5569905	Identifier	qemu_isspace		5568558	0					
ANR	5569906	ArgumentList	* p		5568558	1					
ANR	5569907	Argument	* p		5568558	0					
ANR	5569908	UnaryOperationExpression	* p		5568558	0					
ANR	5569909	UnaryOperator	*		5568558	0					
ANR	5569910	Identifier	p		5568558	1					
ANR	5569911	ExpressionStatement	p ++	637:20:10783:10786	5568558	1	True				
ANR	5569912	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569913	Identifier	p		5568558	0					
ANR	5569914	IncDec	++		5568558	1					
ANR	5569915	IfStatement	if ( * p == '-' )		5568558	5					
ANR	5569916	Condition	* p == '-'	639:20:10809:10817	5568558	0	True				
ANR	5569917	EqualityExpression	* p == '-'		5568558	0		==			
ANR	5569918	UnaryOperationExpression	* p		5568558	0					
ANR	5569919	UnaryOperator	*		5568558	0					
ANR	5569920	Identifier	p		5568558	1					
ANR	5569921	PrimaryExpression	'-'		5568558	1					
ANR	5569922	CompoundStatement		629:31:10506:10506	5568558	1					
ANR	5569923	ExpressionStatement	p ++	641:20:10843:10846	5568558	0	True				
ANR	5569924	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569925	Identifier	p		5568558	0					
ANR	5569926	IncDec	++		5568558	1					
ANR	5569927	IfStatement	if ( c != * p )		5568558	1					
ANR	5569928	Condition	c != * p	643:23:10872:10878	5568558	0	True				
ANR	5569929	EqualityExpression	c != * p		5568558	0		!=			
ANR	5569930	Identifier	c		5568558	0					
ANR	5569931	UnaryOperationExpression	* p		5568558	1					
ANR	5569932	UnaryOperator	*		5568558	0					
ANR	5569933	Identifier	p		5568558	1					
ANR	5569934	CompoundStatement		633:32:10567:10567	5568558	1					
ANR	5569935	IfStatement	"if ( ! is_valid_option ( p , typestr ) )"		5568558	0					
ANR	5569936	Condition	"! is_valid_option ( p , typestr )"	645:27:10911:10938	5568558	0	True				
ANR	5569937	UnaryOperationExpression	"! is_valid_option ( p , typestr )"		5568558	0					
ANR	5569938	UnaryOperator	!		5568558	0					
ANR	5569939	CallExpression	"is_valid_option ( p , typestr )"		5568558	1					
ANR	5569940	Callee	is_valid_option		5568558	0					
ANR	5569941	Identifier	is_valid_option		5568558	0					
ANR	5569942	ArgumentList	p		5568558	1					
ANR	5569943	Argument	p		5568558	0					
ANR	5569944	Identifier	p		5568558	0					
ANR	5569945	Argument	typestr		5568558	1					
ANR	5569946	Identifier	typestr		5568558	0					
ANR	5569947	CompoundStatement		635:57:10627:10627	5568558	1					
ANR	5569948	ExpressionStatement	"monitor_printf ( mon , ""%s: unsupported option -%c\\n"" , cmdname , * p )"	649:28:10992:11100	5568558	0	True				
ANR	5569949	CallExpression	"monitor_printf ( mon , ""%s: unsupported option -%c\\n"" , cmdname , * p )"		5568558	0					
ANR	5569950	Callee	monitor_printf		5568558	0					
ANR	5569951	Identifier	monitor_printf		5568558	0					
ANR	5569952	ArgumentList	mon		5568558	1					
ANR	5569953	Argument	mon		5568558	0					
ANR	5569954	Identifier	mon		5568558	0					
ANR	5569955	Argument	"""%s: unsupported option -%c\\n"""		5568558	1					
ANR	5569956	PrimaryExpression	"""%s: unsupported option -%c\\n"""		5568558	0					
ANR	5569957	Argument	cmdname		5568558	2					
ANR	5569958	Identifier	cmdname		5568558	0					
ANR	5569959	Argument	* p		5568558	3					
ANR	5569960	UnaryOperationExpression	* p		5568558	0					
ANR	5569961	UnaryOperator	*		5568558	0					
ANR	5569962	Identifier	p		5568558	1					
ANR	5569963	GotoStatement	goto fail ;	653:28:11131:11140	5568558	1	True				
ANR	5569964	Identifier	fail		5568558	0					
ANR	5569965	ElseStatement	else		5568558	0					
ANR	5569966	CompoundStatement		645:31:10860:10860	5568558	0					
ANR	5569967	ExpressionStatement	skip_key = 1	657:28:11205:11217	5568558	0	True				
ANR	5569968	AssignmentExpression	skip_key = 1		5568558	0		=			
ANR	5569969	Identifier	skip_key		5568558	0					
ANR	5569970	PrimaryExpression	1		5568558	1					
ANR	5569971	IfStatement	if ( skip_key )		5568558	2					
ANR	5569972	Condition	skip_key	663:23:11293:11300	5568558	0	True				
ANR	5569973	Identifier	skip_key		5568558	0					
ANR	5569974	CompoundStatement		653:33:10989:10989	5568558	1					
ANR	5569975	ExpressionStatement	p = tmp	665:24:11330:11337	5568558	0	True				
ANR	5569976	AssignmentExpression	p = tmp		5568558	0		=			
ANR	5569977	Identifier	p		5568558	0					
ANR	5569978	Identifier	tmp		5568558	1					
ANR	5569979	ElseStatement	else		5568558	0					
ANR	5569980	CompoundStatement		657:27:11053:11053	5568558	0					
ANR	5569981	ExpressionStatement	p ++	671:24:11436:11439	5568558	0	True				
ANR	5569982	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5569983	Identifier	p		5568558	0					
ANR	5569984	IncDec	++		5568558	1					
ANR	5569985	ExpressionStatement	"qdict_put ( qdict , key , qbool_from_bool ( true ) )"	673:24:11466:11510	5568558	1	True				
ANR	5569986	CallExpression	"qdict_put ( qdict , key , qbool_from_bool ( true ) )"		5568558	0					
ANR	5569987	Callee	qdict_put		5568558	0					
ANR	5569988	Identifier	qdict_put		5568558	0					
ANR	5569989	ArgumentList	qdict		5568558	1					
ANR	5569990	Argument	qdict		5568558	0					
ANR	5569991	Identifier	qdict		5568558	0					
ANR	5569992	Argument	key		5568558	1					
ANR	5569993	Identifier	key		5568558	0					
ANR	5569994	Argument	qbool_from_bool ( true )		5568558	2					
ANR	5569995	CallExpression	qbool_from_bool ( true )		5568558	0					
ANR	5569996	Callee	qbool_from_bool		5568558	0					
ANR	5569997	Identifier	qbool_from_bool		5568558	0					
ANR	5569998	ArgumentList	true		5568558	1					
ANR	5569999	Argument	true		5568558	0					
ANR	5570000	Identifier	true		5568558	0					
ANR	5570001	BreakStatement	break ;	681:12:11582:11587	5568558	27	True				
ANR	5570002	Label	case 'S' :	683:8:11598:11606	5568558	28	True				
ANR	5570003	CompoundStatement		679:16:11378:11385	5568558	29					
ANR	5570004	IdentifierDeclStatement	int len ;	689:16:11692:11699	5568558	0	True				
ANR	5570005	IdentifierDecl	len		5568558	0					
ANR	5570006	IdentifierDeclType	int		5568558	0					
ANR	5570007	Identifier	len		5568558	1					
ANR	5570008	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	1					
ANR	5570009	Condition	qemu_isspace ( * p )	693:23:11727:11742	5568558	0	True				
ANR	5570010	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5570011	Callee	qemu_isspace		5568558	0					
ANR	5570012	Identifier	qemu_isspace		5568558	0					
ANR	5570013	ArgumentList	* p		5568558	1					
ANR	5570014	Argument	* p		5568558	0					
ANR	5570015	UnaryOperationExpression	* p		5568558	0					
ANR	5570016	UnaryOperator	*		5568558	0					
ANR	5570017	Identifier	p		5568558	1					
ANR	5570018	CompoundStatement		683:41:11431:11431	5568558	1					
ANR	5570019	ExpressionStatement	p ++	695:20:11768:11771	5568558	0	True				
ANR	5570020	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5570021	Identifier	p		5568558	0					
ANR	5570022	IncDec	++		5568558	1					
ANR	5570023	IfStatement	if ( * typestr == '?' )		5568558	2					
ANR	5570024	Condition	* typestr == '?'	699:20:11813:11827	5568558	0	True				
ANR	5570025	EqualityExpression	* typestr == '?'		5568558	0		==			
ANR	5570026	UnaryOperationExpression	* typestr		5568558	0					
ANR	5570027	UnaryOperator	*		5568558	0					
ANR	5570028	Identifier	typestr		5568558	1					
ANR	5570029	PrimaryExpression	'?'		5568558	1					
ANR	5570030	CompoundStatement		689:37:11516:11516	5568558	1					
ANR	5570031	ExpressionStatement	typestr ++	701:20:11853:11862	5568558	0	True				
ANR	5570032	PostIncDecOperationExpression	typestr ++		5568558	0					
ANR	5570033	Identifier	typestr		5568558	0					
ANR	5570034	IncDec	++		5568558	1					
ANR	5570035	IfStatement	if ( * p == '\\0' )		5568558	1					
ANR	5570036	Condition	* p == '\\0'	703:24:11889:11898	5568558	0	True				
ANR	5570037	EqualityExpression	* p == '\\0'		5568558	0		==			
ANR	5570038	UnaryOperationExpression	* p		5568558	0					
ANR	5570039	UnaryOperator	*		5568558	0					
ANR	5570040	Identifier	p		5568558	1					
ANR	5570041	PrimaryExpression	'\\0'		5568558	1					
ANR	5570042	CompoundStatement		693:36:11587:11587	5568558	1					
ANR	5570043	BreakStatement	break ;	707:24:11994:11999	5568558	0	True				
ANR	5570044	ExpressionStatement	len = strlen ( p )	713:16:12060:12075	5568558	3	True				
ANR	5570045	AssignmentExpression	len = strlen ( p )		5568558	0		=			
ANR	5570046	Identifier	len		5568558	0					
ANR	5570047	CallExpression	strlen ( p )		5568558	1					
ANR	5570048	Callee	strlen		5568558	0					
ANR	5570049	Identifier	strlen		5568558	0					
ANR	5570050	ArgumentList	p		5568558	1					
ANR	5570051	Argument	p		5568558	0					
ANR	5570052	Identifier	p		5568558	0					
ANR	5570053	IfStatement	if ( len <= 0 )		5568558	4					
ANR	5570054	Condition	len <= 0	715:20:12098:12105	5568558	0	True				
ANR	5570055	RelationalExpression	len <= 0		5568558	0		<=			
ANR	5570056	Identifier	len		5568558	0					
ANR	5570057	PrimaryExpression	0		5568558	1					
ANR	5570058	CompoundStatement		705:30:11794:11794	5568558	1					
ANR	5570059	ExpressionStatement	"monitor_printf ( mon , ""%s: string expected\\n"" , cmdname )"	717:20:12131:12220	5568558	0	True				
ANR	5570060	CallExpression	"monitor_printf ( mon , ""%s: string expected\\n"" , cmdname )"		5568558	0					
ANR	5570061	Callee	monitor_printf		5568558	0					
ANR	5570062	Identifier	monitor_printf		5568558	0					
ANR	5570063	ArgumentList	mon		5568558	1					
ANR	5570064	Argument	mon		5568558	0					
ANR	5570065	Identifier	mon		5568558	0					
ANR	5570066	Argument	"""%s: string expected\\n"""		5568558	1					
ANR	5570067	PrimaryExpression	"""%s: string expected\\n"""		5568558	0					
ANR	5570068	Argument	cmdname		5568558	2					
ANR	5570069	Identifier	cmdname		5568558	0					
ANR	5570070	BreakStatement	break ;	721:20:12243:12248	5568558	1	True				
ANR	5570071	ExpressionStatement	"qdict_put ( qdict , key , qstring_from_str ( p ) )"	725:16:12286:12328	5568558	5	True				
ANR	5570072	CallExpression	"qdict_put ( qdict , key , qstring_from_str ( p ) )"		5568558	0					
ANR	5570073	Callee	qdict_put		5568558	0					
ANR	5570074	Identifier	qdict_put		5568558	0					
ANR	5570075	ArgumentList	qdict		5568558	1					
ANR	5570076	Argument	qdict		5568558	0					
ANR	5570077	Identifier	qdict		5568558	0					
ANR	5570078	Argument	key		5568558	1					
ANR	5570079	Identifier	key		5568558	0					
ANR	5570080	Argument	qstring_from_str ( p )		5568558	2					
ANR	5570081	CallExpression	qstring_from_str ( p )		5568558	0					
ANR	5570082	Callee	qstring_from_str		5568558	0					
ANR	5570083	Identifier	qstring_from_str		5568558	0					
ANR	5570084	ArgumentList	p		5568558	1					
ANR	5570085	Argument	p		5568558	0					
ANR	5570086	Identifier	p		5568558	0					
ANR	5570087	ExpressionStatement	p += len	727:16:12347:12355	5568558	6	True				
ANR	5570088	AssignmentExpression	p += len		5568558	0		+=			
ANR	5570089	Identifier	p		5568558	0					
ANR	5570090	Identifier	len		5568558	1					
ANR	5570091	BreakStatement	break ;	731:12:12385:12390	5568558	30	True				
ANR	5570092	Label	default :	733:8:12401:12408	5568558	31	True				
ANR	5570093	Identifier	default		5568558	0					
ANR	5570094	Label	bad_type :	735:8:12419:12427	5568558	32	True				
ANR	5570095	Identifier	bad_type		5568558	0					
ANR	5570096	ExpressionStatement	"monitor_printf ( mon , ""%s: unknown type '%c'\\n"" , cmdname , c )"	737:12:12442:12500	5568558	33	True				
ANR	5570097	CallExpression	"monitor_printf ( mon , ""%s: unknown type '%c'\\n"" , cmdname , c )"		5568558	0					
ANR	5570098	Callee	monitor_printf		5568558	0					
ANR	5570099	Identifier	monitor_printf		5568558	0					
ANR	5570100	ArgumentList	mon		5568558	1					
ANR	5570101	Argument	mon		5568558	0					
ANR	5570102	Identifier	mon		5568558	0					
ANR	5570103	Argument	"""%s: unknown type '%c'\\n"""		5568558	1					
ANR	5570104	PrimaryExpression	"""%s: unknown type '%c'\\n"""		5568558	0					
ANR	5570105	Argument	cmdname		5568558	2					
ANR	5570106	Identifier	cmdname		5568558	0					
ANR	5570107	Argument	c		5568558	3					
ANR	5570108	Identifier	c		5568558	0					
ANR	5570109	GotoStatement	goto fail ;	739:12:12515:12524	5568558	34	True				
ANR	5570110	Identifier	fail		5568558	0					
ANR	5570111	ExpressionStatement	g_free ( key )	743:8:12546:12557	5568558	5	True				
ANR	5570112	CallExpression	g_free ( key )		5568558	0					
ANR	5570113	Callee	g_free		5568558	0					
ANR	5570114	Identifier	g_free		5568558	0					
ANR	5570115	ArgumentList	key		5568558	1					
ANR	5570116	Argument	key		5568558	0					
ANR	5570117	Identifier	key		5568558	0					
ANR	5570118	ExpressionStatement	key = NULL	745:8:12568:12578	5568558	6	True				
ANR	5570119	AssignmentExpression	key = NULL		5568558	0		=			
ANR	5570120	Identifier	key		5568558	0					
ANR	5570121	Identifier	NULL		5568558	1					
ANR	5570122	WhileStatement	while ( qemu_isspace ( * p ) )		5568558	14					
ANR	5570123	Condition	qemu_isspace ( * p )	751:11:12647:12662	5568558	0	True				
ANR	5570124	CallExpression	qemu_isspace ( * p )		5568558	0					
ANR	5570125	Callee	qemu_isspace		5568558	0					
ANR	5570126	Identifier	qemu_isspace		5568558	0					
ANR	5570127	ArgumentList	* p		5568558	1					
ANR	5570128	Argument	* p		5568558	0					
ANR	5570129	UnaryOperationExpression	* p		5568558	0					
ANR	5570130	UnaryOperator	*		5568558	0					
ANR	5570131	Identifier	p		5568558	1					
ANR	5570132	ExpressionStatement	p ++	753:8:12674:12677	5568558	1	True				
ANR	5570133	PostIncDecOperationExpression	p ++		5568558	0					
ANR	5570134	Identifier	p		5568558	0					
ANR	5570135	IncDec	++		5568558	1					
ANR	5570136	IfStatement	if ( * p != '\\0' )		5568558	15					
ANR	5570137	Condition	* p != '\\0'	755:8:12688:12697	5568558	0	True				
ANR	5570138	EqualityExpression	* p != '\\0'		5568558	0		!=			
ANR	5570139	UnaryOperationExpression	* p		5568558	0					
ANR	5570140	UnaryOperator	*		5568558	0					
ANR	5570141	Identifier	p		5568558	1					
ANR	5570142	PrimaryExpression	'\\0'		5568558	1					
ANR	5570143	CompoundStatement		745:20:12386:12386	5568558	1					
ANR	5570144	ExpressionStatement	"monitor_printf ( mon , ""%s: extraneous characters at the end of line\\n"" , cmdname )"	757:8:12711:12813	5568558	0	True				
ANR	5570145	CallExpression	"monitor_printf ( mon , ""%s: extraneous characters at the end of line\\n"" , cmdname )"		5568558	0					
ANR	5570146	Callee	monitor_printf		5568558	0					
ANR	5570147	Identifier	monitor_printf		5568558	0					
ANR	5570148	ArgumentList	mon		5568558	1					
ANR	5570149	Argument	mon		5568558	0					
ANR	5570150	Identifier	mon		5568558	0					
ANR	5570151	Argument	"""%s: extraneous characters at the end of line\\n"""		5568558	1					
ANR	5570152	PrimaryExpression	"""%s: extraneous characters at the end of line\\n"""		5568558	0					
ANR	5570153	Argument	cmdname		5568558	2					
ANR	5570154	Identifier	cmdname		5568558	0					
ANR	5570155	GotoStatement	goto fail ;	761:8:12824:12833	5568558	1	True				
ANR	5570156	Identifier	fail		5568558	0					
ANR	5570157	ReturnStatement	return cmd ;	767:4:12849:12859	5568558	16	True				
ANR	5570158	Identifier	cmd		5568558	0					
ANR	5570159	Label	fail :	771:0:12864:12868	5568558	17	True				
ANR	5570160	Identifier	fail		5568558	0					
ANR	5570161	ExpressionStatement	g_free ( key )	773:4:12875:12886	5568558	18	True				
ANR	5570162	CallExpression	g_free ( key )		5568558	0					
ANR	5570163	Callee	g_free		5568558	0					
ANR	5570164	Identifier	g_free		5568558	0					
ANR	5570165	ArgumentList	key		5568558	1					
ANR	5570166	Argument	key		5568558	0					
ANR	5570167	Identifier	key		5568558	0					
ANR	5570168	ReturnStatement	return NULL ;	775:4:12893:12904	5568558	19	True				
ANR	5570169	Identifier	NULL		5568558	0					
ANR	5570170	ReturnType	static const mon_cmd_t *		5568558	1					
ANR	5570171	Identifier	monitor_parse_command		5568558	2					
ANR	5570172	ParameterList	"Monitor * mon , const char * cmdline , int start , mon_cmd_t * table , QDict * qdict"		5568558	3					
ANR	5570173	Parameter	Monitor * mon	1:46:46:57	5568558	0	True				
ANR	5570174	ParameterType	Monitor *		5568558	0					
ANR	5570175	Identifier	mon		5568558	1					
ANR	5570176	Parameter	const char * cmdline	3:46:107:125	5568558	1	True				
ANR	5570177	ParameterType	const char *		5568558	0					
ANR	5570178	Identifier	cmdline		5568558	1					
ANR	5570179	Parameter	int start	5:46:175:183	5568558	2	True				
ANR	5570180	ParameterType	int		5568558	0					
ANR	5570181	Identifier	start		5568558	1					
ANR	5570182	Parameter	mon_cmd_t * table	7:46:233:248	5568558	3	True				
ANR	5570183	ParameterType	mon_cmd_t *		5568558	0					
ANR	5570184	Identifier	table		5568558	1					
ANR	5570185	Parameter	QDict * qdict	9:46:298:309	5568558	4	True				
ANR	5570186	ParameterType	QDict *		5568558	0					
ANR	5570187	Identifier	qdict		5568558	1					
ANR	5570188	CFGEntryNode	ENTRY		5568558		True				
ANR	5570189	CFGExitNode	EXIT		5568558		True				
ANR	5570190	InfiniteForNode	true		5568558		True				
ANR	5570191	InfiniteForNode	true		5568558		True				
ANR	5570192	Symbol	& val		5568558						
ANR	5570193	Symbol	qemu_find_opts		5568558						
ANR	5570194	Symbol	beg		5568558						
ANR	5570195	Symbol	* opts_list		5568558						
ANR	5570196	Symbol	strtosz		5568558						
ANR	5570197	Symbol	qfloat_from_double		5568558						
ANR	5570198	Symbol	is_valid_option		5568558						
ANR	5570199	Symbol	mon		5568558						
ANR	5570200	Symbol	typestr		5568558						
ANR	5570201	Symbol	search_dispatch_table		5568558						
ANR	5570202	Symbol	strlen		5568558						
ANR	5570203	Symbol	cmdline		5568558						
ANR	5570204	Symbol	memcmp		5568558						
ANR	5570205	Symbol	opts		5568558						
ANR	5570206	Symbol	len		5568558						
ANR	5570207	Symbol	* opts_list -> desc		5568558						
ANR	5570208	Symbol	tmp		5568558						
ANR	5570209	Symbol	* typestr ++		5568558						
ANR	5570210	Symbol	* cmd		5568558						
ANR	5570211	Symbol	cmd -> sub_table		5568558						
ANR	5570212	Symbol	opts_list -> desc		5568558						
ANR	5570213	Symbol	ret		5568558						
ANR	5570214	Symbol	val		5568558						
ANR	5570215	Symbol	NULL		5568558						
ANR	5570216	Symbol	opts_list -> desc -> name		5568558						
ANR	5570217	Symbol	default_fmt_format		5568558						
ANR	5570218	Symbol	get_double		5568558						
ANR	5570219	Symbol	count		5568558						
ANR	5570220	Symbol	format		5568558						
ANR	5570221	Symbol	qemu_isgraph		5568558						
ANR	5570222	Symbol	key_get_info		5568558						
ANR	5570223	Symbol	size		5568558						
ANR	5570224	Symbol	default_fmt_size		5568558						
ANR	5570225	Symbol	true		5568558						
ANR	5570226	Symbol	cmd		5568558						
ANR	5570227	Symbol	get_command_name		5568558						
ANR	5570228	Symbol	qdict		5568558						
ANR	5570229	Symbol	& key		5568558						
ANR	5570230	Symbol	get_str		5568558						
ANR	5570231	Symbol	& end		5568558						
ANR	5570232	Symbol	* typestr		5568558						
ANR	5570233	Symbol	qstring_from_str		5568558						
ANR	5570234	Symbol	qemu_opts_parse		5568558						
ANR	5570235	Symbol	monitor_parse_command		5568558						
ANR	5570236	Symbol	end		5568558						
ANR	5570237	Symbol	table		5568558						
ANR	5570238	Symbol	key		5568558						
ANR	5570239	Symbol	qemu_isdigit		5568558						
ANR	5570240	Symbol	qbool_from_bool		5568558						
ANR	5570241	Symbol	c		5568558						
ANR	5570242	Symbol	qint_from_int		5568558						
ANR	5570243	Symbol	* * opts_list		5568558						
ANR	5570244	Symbol	* p ++		5568558						
ANR	5570245	Symbol	start		5568558						
ANR	5570246	Symbol	false		5568558						
ANR	5570247	Symbol	qemu_isspace		5568558						
ANR	5570248	Symbol	p		5568558						
ANR	5570249	Symbol	opts_list		5568558						
ANR	5570250	Symbol	buf		5568558						
ANR	5570251	Symbol	get_expr		5568558						
ANR	5570252	Symbol	& p		5568558						
ANR	5570253	Symbol	cmdname		5568558						
ANR	5570254	Symbol	* p		5568558						
ANR	5570255	Symbol	skip_key		5568558						
ANR	5570256	Symbol	cmd -> args_type		5568558						
