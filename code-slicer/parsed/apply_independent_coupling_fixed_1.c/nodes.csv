command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	580777	File	/home/p4ultr4n/workplace/ReVeal/raw_code/apply_independent_coupling_fixed_1.c								
ANR	580778	Function	apply_independent_coupling_fixed	1:0:0:924							
ANR	580779	FunctionDef	"apply_independent_coupling_fixed (AACContext * ac , SingleChannelElement * target , ChannelElement * cce , int index)"		580778	0					
ANR	580780	CompoundStatement		7:0:204:924	580778	0					
ANR	580781	IdentifierDeclStatement	"int i , c , shift , round , tmp ;"	9:4:211:238	580778	0	True				
ANR	580782	IdentifierDecl	i		580778	0					
ANR	580783	IdentifierDeclType	int		580778	0					
ANR	580784	Identifier	i		580778	1					
ANR	580785	IdentifierDecl	c		580778	1					
ANR	580786	IdentifierDeclType	int		580778	0					
ANR	580787	Identifier	c		580778	1					
ANR	580788	IdentifierDecl	shift		580778	2					
ANR	580789	IdentifierDeclType	int		580778	0					
ANR	580790	Identifier	shift		580778	1					
ANR	580791	IdentifierDecl	round		580778	3					
ANR	580792	IdentifierDeclType	int		580778	0					
ANR	580793	Identifier	round		580778	1					
ANR	580794	IdentifierDecl	tmp		580778	4					
ANR	580795	IdentifierDeclType	int		580778	0					
ANR	580796	Identifier	tmp		580778	1					
ANR	580797	IdentifierDeclStatement	const int gain = cce -> coup . gain [ index ] [ 0 ] ;	11:4:245:286	580778	1	True				
ANR	580798	IdentifierDecl	gain = cce -> coup . gain [ index ] [ 0 ]		580778	0					
ANR	580799	IdentifierDeclType	const int		580778	0					
ANR	580800	Identifier	gain		580778	1					
ANR	580801	AssignmentExpression	gain = cce -> coup . gain [ index ] [ 0 ]		580778	2		=			
ANR	580802	Identifier	gain		580778	0					
ANR	580803	ArrayIndexing	cce -> coup . gain [ index ] [ 0 ]		580778	1					
ANR	580804	ArrayIndexing	cce -> coup . gain [ index ]		580778	0					
ANR	580805	MemberAccess	cce -> coup . gain		580778	0					
ANR	580806	PtrMemberAccess	cce -> coup		580778	0					
ANR	580807	Identifier	cce		580778	0					
ANR	580808	Identifier	coup		580778	1					
ANR	580809	Identifier	gain		580778	1					
ANR	580810	Identifier	index		580778	1					
ANR	580811	PrimaryExpression	0		580778	1					
ANR	580812	IdentifierDeclStatement	const int * src = cce -> ch [ 0 ] . ret ;	13:4:293:324	580778	2	True				
ANR	580813	IdentifierDecl	* src = cce -> ch [ 0 ] . ret		580778	0					
ANR	580814	IdentifierDeclType	const int *		580778	0					
ANR	580815	Identifier	src		580778	1					
ANR	580816	AssignmentExpression	* src = cce -> ch [ 0 ] . ret		580778	2		=			
ANR	580817	Identifier	src		580778	0					
ANR	580818	MemberAccess	cce -> ch [ 0 ] . ret		580778	1					
ANR	580819	ArrayIndexing	cce -> ch [ 0 ]		580778	0					
ANR	580820	PtrMemberAccess	cce -> ch		580778	0					
ANR	580821	Identifier	cce		580778	0					
ANR	580822	Identifier	ch		580778	1					
ANR	580823	PrimaryExpression	0		580778	1					
ANR	580824	Identifier	ret		580778	1					
ANR	580825	IdentifierDeclStatement	int * dest = target -> ret ;	15:4:331:354	580778	3	True				
ANR	580826	IdentifierDecl	* dest = target -> ret		580778	0					
ANR	580827	IdentifierDeclType	int *		580778	0					
ANR	580828	Identifier	dest		580778	1					
ANR	580829	AssignmentExpression	* dest = target -> ret		580778	2		=			
ANR	580830	Identifier	dest		580778	0					
ANR	580831	PtrMemberAccess	target -> ret		580778	1					
ANR	580832	Identifier	target		580778	0					
ANR	580833	Identifier	ret		580778	1					
ANR	580834	IdentifierDeclStatement	const int len = 1024 << ( ac -> oc [ 1 ] . m4ac . sbr == 1 ) ;	17:4:361:410	580778	4	True				
ANR	580835	IdentifierDecl	len = 1024 << ( ac -> oc [ 1 ] . m4ac . sbr == 1 )		580778	0					
ANR	580836	IdentifierDeclType	const int		580778	0					
ANR	580837	Identifier	len		580778	1					
ANR	580838	AssignmentExpression	len = 1024 << ( ac -> oc [ 1 ] . m4ac . sbr == 1 )		580778	2		=			
ANR	580839	Identifier	len		580778	0					
ANR	580840	ShiftExpression	1024 << ( ac -> oc [ 1 ] . m4ac . sbr == 1 )		580778	1		<<			
ANR	580841	PrimaryExpression	1024		580778	0					
ANR	580842	EqualityExpression	ac -> oc [ 1 ] . m4ac . sbr == 1		580778	1		==			
ANR	580843	MemberAccess	ac -> oc [ 1 ] . m4ac . sbr		580778	0					
ANR	580844	MemberAccess	ac -> oc [ 1 ] . m4ac		580778	0					
ANR	580845	ArrayIndexing	ac -> oc [ 1 ]		580778	0					
ANR	580846	PtrMemberAccess	ac -> oc		580778	0					
ANR	580847	Identifier	ac		580778	0					
ANR	580848	Identifier	oc		580778	1					
ANR	580849	PrimaryExpression	1		580778	1					
ANR	580850	Identifier	m4ac		580778	1					
ANR	580851	Identifier	sbr		580778	1					
ANR	580852	PrimaryExpression	1		580778	1					
ANR	580853	ExpressionStatement	c = cce_scale_fixed [ gain & 7 ]	21:4:419:448	580778	5	True				
ANR	580854	AssignmentExpression	c = cce_scale_fixed [ gain & 7 ]		580778	0		=			
ANR	580855	Identifier	c		580778	0					
ANR	580856	ArrayIndexing	cce_scale_fixed [ gain & 7 ]		580778	1					
ANR	580857	Identifier	cce_scale_fixed		580778	0					
ANR	580858	BitAndExpression	gain & 7		580778	1		&			
ANR	580859	Identifier	gain		580778	0					
ANR	580860	PrimaryExpression	7		580778	1					
ANR	580861	ExpressionStatement	shift = ( gain - 1024 ) >> 3	23:4:455:479	580778	6	True				
ANR	580862	AssignmentExpression	shift = ( gain - 1024 ) >> 3		580778	0		=			
ANR	580863	Identifier	shift		580778	0					
ANR	580864	ShiftExpression	( gain - 1024 ) >> 3		580778	1		>>			
ANR	580865	AdditiveExpression	gain - 1024		580778	0		-			
ANR	580866	Identifier	gain		580778	0					
ANR	580867	PrimaryExpression	1024		580778	1					
ANR	580868	PrimaryExpression	3		580778	1					
ANR	580869	IfStatement	if ( shift < 0 )		580778	7					
ANR	580870	Condition	shift < 0	25:8:490:498	580778	0	True				
ANR	580871	RelationalExpression	shift < 0		580778	0		<			
ANR	580872	Identifier	shift		580778	0					
ANR	580873	PrimaryExpression	0		580778	1					
ANR	580874	CompoundStatement		19:19:296:296	580778	1					
ANR	580875	ExpressionStatement	shift = - shift	27:8:512:526	580778	0	True				
ANR	580876	AssignmentExpression	shift = - shift		580778	0		=			
ANR	580877	Identifier	shift		580778	0					
ANR	580878	UnaryOperationExpression	- shift		580778	1					
ANR	580879	UnaryOperator	-		580778	0					
ANR	580880	Identifier	shift		580778	1					
ANR	580881	ExpressionStatement	round = 1 << ( shift - 1 )	29:8:537:561	580778	1	True				
ANR	580882	AssignmentExpression	round = 1 << ( shift - 1 )		580778	0		=			
ANR	580883	Identifier	round		580778	0					
ANR	580884	ShiftExpression	1 << ( shift - 1 )		580778	1		<<			
ANR	580885	PrimaryExpression	1		580778	0					
ANR	580886	AdditiveExpression	shift - 1		580778	1		-			
ANR	580887	Identifier	shift		580778	0					
ANR	580888	PrimaryExpression	1		580778	1					
ANR	580889	ForStatement	for ( i = 0 ; i < len ; i ++ )		580778	2					
ANR	580890	ForInit	i = 0 ;	33:13:579:584	580778	0	True				
ANR	580891	AssignmentExpression	i = 0		580778	0		=			
ANR	580892	Identifier	i		580778	0					
ANR	580893	PrimaryExpression	0		580778	1					
ANR	580894	Condition	i < len	33:20:586:592	580778	1	True				
ANR	580895	RelationalExpression	i < len		580778	0		<			
ANR	580896	Identifier	i		580778	0					
ANR	580897	Identifier	len		580778	1					
ANR	580898	PostIncDecOperationExpression	i ++	33:29:595:597	580778	2	True				
ANR	580899	Identifier	i		580778	0					
ANR	580900	IncDec	++		580778	1					
ANR	580901	CompoundStatement		27:34:395:395	580778	3					
ANR	580902	ExpressionStatement	tmp = ( int ) ( ( ( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000 ) >> 37 )	35:12:615:679	580778	0	True				
ANR	580903	AssignmentExpression	tmp = ( int ) ( ( ( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000 ) >> 37 )		580778	0		=			
ANR	580904	Identifier	tmp		580778	0					
ANR	580905	CastExpression	( int ) ( ( ( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000 ) >> 37 )		580778	1					
ANR	580906	CastTarget	int		580778	0					
ANR	580907	ShiftExpression	( ( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000 ) >> 37		580778	1		>>			
ANR	580908	AdditiveExpression	( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000		580778	0		+			
ANR	580909	MultiplicativeExpression	( int64_t ) src [ i ] * c		580778	0		*			
ANR	580910	CastExpression	( int64_t ) src [ i ]		580778	0					
ANR	580911	CastTarget	int64_t		580778	0					
ANR	580912	ArrayIndexing	src [ i ]		580778	1					
ANR	580913	Identifier	src		580778	0					
ANR	580914	Identifier	i		580778	1					
ANR	580915	Identifier	c		580778	1					
ANR	580916	CastExpression	( int64_t ) 0x1000000000		580778	1					
ANR	580917	CastTarget	int64_t		580778	0					
ANR	580918	PrimaryExpression	0x1000000000		580778	1					
ANR	580919	PrimaryExpression	37		580778	1					
ANR	580920	ExpressionStatement	dest [ i ] += ( tmp + round ) >> shift	37:12:694:727	580778	1	True				
ANR	580921	AssignmentExpression	dest [ i ] += ( tmp + round ) >> shift		580778	0		+=			
ANR	580922	ArrayIndexing	dest [ i ]		580778	0					
ANR	580923	Identifier	dest		580778	0					
ANR	580924	Identifier	i		580778	1					
ANR	580925	ShiftExpression	( tmp + round ) >> shift		580778	1		>>			
ANR	580926	AdditiveExpression	tmp + round		580778	0		+			
ANR	580927	Identifier	tmp		580778	0					
ANR	580928	Identifier	round		580778	1					
ANR	580929	Identifier	shift		580778	1					
ANR	580930	ElseStatement	else		580778	0					
ANR	580931	CompoundStatement		37:9:552:552	580778	0					
ANR	580932	ForStatement	for ( i = 0 ; i < len ; i ++ )		580778	0					
ANR	580933	ForInit	i = 0 ;	45:11:771:776	580778	0	True				
ANR	580934	AssignmentExpression	i = 0		580778	0		=			
ANR	580935	Identifier	i		580778	0					
ANR	580936	PrimaryExpression	0		580778	1					
ANR	580937	Condition	i < len	45:18:778:784	580778	1	True				
ANR	580938	RelationalExpression	i < len		580778	0		<			
ANR	580939	Identifier	i		580778	0					
ANR	580940	Identifier	len		580778	1					
ANR	580941	PostIncDecOperationExpression	i ++	45:27:787:789	580778	2	True				
ANR	580942	Identifier	i		580778	0					
ANR	580943	IncDec	++		580778	1					
ANR	580944	CompoundStatement		39:32:587:587	580778	3					
ANR	580945	ExpressionStatement	tmp = ( int ) ( ( ( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000 ) >> 37 )	47:10:805:869	580778	0	True				
ANR	580946	AssignmentExpression	tmp = ( int ) ( ( ( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000 ) >> 37 )		580778	0		=			
ANR	580947	Identifier	tmp		580778	0					
ANR	580948	CastExpression	( int ) ( ( ( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000 ) >> 37 )		580778	1					
ANR	580949	CastTarget	int		580778	0					
ANR	580950	ShiftExpression	( ( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000 ) >> 37		580778	1		>>			
ANR	580951	AdditiveExpression	( int64_t ) src [ i ] * c + ( int64_t ) 0x1000000000		580778	0		+			
ANR	580952	MultiplicativeExpression	( int64_t ) src [ i ] * c		580778	0		*			
ANR	580953	CastExpression	( int64_t ) src [ i ]		580778	0					
ANR	580954	CastTarget	int64_t		580778	0					
ANR	580955	ArrayIndexing	src [ i ]		580778	1					
ANR	580956	Identifier	src		580778	0					
ANR	580957	Identifier	i		580778	1					
ANR	580958	Identifier	c		580778	1					
ANR	580959	CastExpression	( int64_t ) 0x1000000000		580778	1					
ANR	580960	CastTarget	int64_t		580778	0					
ANR	580961	PrimaryExpression	0x1000000000		580778	1					
ANR	580962	PrimaryExpression	37		580778	1					
ANR	580963	ExpressionStatement	dest [ i ] += tmp << shift	49:10:882:905	580778	1	True				
ANR	580964	AssignmentExpression	dest [ i ] += tmp << shift		580778	0		+=			
ANR	580965	ArrayIndexing	dest [ i ]		580778	0					
ANR	580966	Identifier	dest		580778	0					
ANR	580967	Identifier	i		580778	1					
ANR	580968	ShiftExpression	tmp << shift		580778	1		<<			
ANR	580969	Identifier	tmp		580778	0					
ANR	580970	Identifier	shift		580778	1					
ANR	580971	ReturnType	static void		580778	1					
ANR	580972	Identifier	apply_independent_coupling_fixed		580778	2					
ANR	580973	ParameterList	"AACContext * ac , SingleChannelElement * target , ChannelElement * cce , int index"		580778	3					
ANR	580974	Parameter	AACContext * ac	1:45:45:58	580778	0	True				
ANR	580975	ParameterType	AACContext *		580778	0					
ANR	580976	Identifier	ac		580778	1					
ANR	580977	Parameter	SingleChannelElement * target	3:39:101:128	580778	1	True				
ANR	580978	ParameterType	SingleChannelElement *		580778	0					
ANR	580979	Identifier	target		580778	1					
ANR	580980	Parameter	ChannelElement * cce	5:39:171:189	580778	2	True				
ANR	580981	ParameterType	ChannelElement *		580778	0					
ANR	580982	Identifier	cce		580778	1					
ANR	580983	Parameter	int index	5:60:192:200	580778	3	True				
ANR	580984	ParameterType	int		580778	0					
ANR	580985	Identifier	index		580778	1					
ANR	580986	CFGEntryNode	ENTRY		580778		True				
ANR	580987	CFGExitNode	EXIT		580778		True				
ANR	580988	Symbol	* * * cce		580778						
ANR	580989	Symbol	cce		580778						
ANR	580990	Symbol	* cce -> coup . gain		580778						
ANR	580991	Symbol	* dest		580778						
ANR	580992	Symbol	shift		580778						
ANR	580993	Symbol	* index		580778						
ANR	580994	Symbol	target -> ret		580778						
ANR	580995	Symbol	cce -> coup		580778						
ANR	580996	Symbol	cce_scale_fixed		580778						
ANR	580997	Symbol	cce -> ch		580778						
ANR	580998	Symbol	* ac		580778						
ANR	580999	Symbol	dest		580778						
ANR	581000	Symbol	* * ac		580778						
ANR	581001	Symbol	* src		580778						
ANR	581002	Symbol	gain		580778						
ANR	581003	Symbol	* cce		580778						
ANR	581004	Symbol	len		580778						
ANR	581005	Symbol	* * cce -> coup . gain		580778						
ANR	581006	Symbol	tmp		580778						
ANR	581007	Symbol	* * cce		580778						
ANR	581008	Symbol	* * index		580778						
ANR	581009	Symbol	ac		580778						
ANR	581010	Symbol	* cce -> coup		580778						
ANR	581011	Symbol	c		580778						
ANR	581012	Symbol	* cce -> ch		580778						
ANR	581013	Symbol	src		580778						
ANR	581014	Symbol	ac -> oc [ 1 ] . m4ac		580778						
ANR	581015	Symbol	* cce_scale_fixed		580778						
ANR	581016	Symbol	index		580778						
ANR	581017	Symbol	i		580778						
ANR	581018	Symbol	ac -> oc		580778						
ANR	581019	Symbol	* gain		580778						
ANR	581020	Symbol	target		580778						
ANR	581021	Symbol	* * cce -> coup		580778						
ANR	581022	Symbol	* target		580778						
ANR	581023	Symbol	* i		580778						
ANR	581024	Symbol	round		580778						
ANR	581025	Symbol	cce -> coup . gain		580778						
ANR	581026	Symbol	* ac -> oc		580778						
ANR	581027	Symbol	cce -> ch [ 0 ] . ret		580778						
ANR	581028	Symbol	ac -> oc [ 1 ] . m4ac . sbr		580778						
