command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6350081	File	/home/p4ultr4n/workplace/ReVeal/raw_code/parse_options_01_1.c								
ANR	6350082	Function	parse_options	1:0:0:2661							
ANR	6350083	FunctionDef	"parse_options (int argc , char * * argv , const OptionDef * options , void ( * parse_arg_function ) ( const char * ))"		6350082	0					
ANR	6350084	CompoundStatement		5:0:131:2661	6350082	0					
ANR	6350085	IdentifierDeclStatement	"const char * opt , * arg ;"	7:4:138:159	6350082	0	True				
ANR	6350086	IdentifierDecl	* opt		6350082	0					
ANR	6350087	IdentifierDeclType	const char *		6350082	0					
ANR	6350088	Identifier	opt		6350082	1					
ANR	6350089	IdentifierDecl	* arg		6350082	1					
ANR	6350090	IdentifierDeclType	const char *		6350082	0					
ANR	6350091	Identifier	arg		6350082	1					
ANR	6350092	IdentifierDeclStatement	"int optindex , handleoptions = 1 ;"	9:4:166:195	6350082	1	True				
ANR	6350093	IdentifierDecl	optindex		6350082	0					
ANR	6350094	IdentifierDeclType	int		6350082	0					
ANR	6350095	Identifier	optindex		6350082	1					
ANR	6350096	IdentifierDecl	handleoptions = 1		6350082	1					
ANR	6350097	IdentifierDeclType	int		6350082	0					
ANR	6350098	Identifier	handleoptions		6350082	1					
ANR	6350099	AssignmentExpression	handleoptions = 1		6350082	2		=			
ANR	6350100	Identifier	handleoptions		6350082	0					
ANR	6350101	PrimaryExpression	1		6350082	1					
ANR	6350102	IdentifierDeclStatement	const OptionDef * po ;	11:4:202:221	6350082	2	True				
ANR	6350103	IdentifierDecl	* po		6350082	0					
ANR	6350104	IdentifierDeclType	const OptionDef *		6350082	0					
ANR	6350105	Identifier	po		6350082	1					
ANR	6350106	ExpressionStatement	optindex = 1	17:4:255:267	6350082	3	True				
ANR	6350107	AssignmentExpression	optindex = 1		6350082	0		=			
ANR	6350108	Identifier	optindex		6350082	0					
ANR	6350109	PrimaryExpression	1		6350082	1					
ANR	6350110	WhileStatement	while ( optindex < argc )		6350082	4					
ANR	6350111	Condition	optindex < argc	19:11:281:295	6350082	0	True				
ANR	6350112	RelationalExpression	optindex < argc		6350082	0		<			
ANR	6350113	Identifier	optindex		6350082	0					
ANR	6350114	Identifier	argc		6350082	1					
ANR	6350115	CompoundStatement		15:28:166:166	6350082	1					
ANR	6350116	ExpressionStatement	opt = argv [ optindex ++ ]	21:8:309:331	6350082	0	True				
ANR	6350117	AssignmentExpression	opt = argv [ optindex ++ ]		6350082	0		=			
ANR	6350118	Identifier	opt		6350082	0					
ANR	6350119	ArrayIndexing	argv [ optindex ++ ]		6350082	1					
ANR	6350120	Identifier	argv		6350082	0					
ANR	6350121	PostIncDecOperationExpression	optindex ++		6350082	1					
ANR	6350122	Identifier	optindex		6350082	0					
ANR	6350123	IncDec	++		6350082	1					
ANR	6350124	IfStatement	if ( handleoptions && opt [ 0 ] == '-' && opt [ 1 ] != '\\0' )		6350082	1					
ANR	6350125	Condition	handleoptions && opt [ 0 ] == '-' && opt [ 1 ] != '\\0'	25:12:348:395	6350082	0	True				
ANR	6350126	AndExpression	handleoptions && opt [ 0 ] == '-' && opt [ 1 ] != '\\0'		6350082	0		&&			
ANR	6350127	Identifier	handleoptions		6350082	0					
ANR	6350128	AndExpression	opt [ 0 ] == '-' && opt [ 1 ] != '\\0'		6350082	1		&&			
ANR	6350129	EqualityExpression	opt [ 0 ] == '-'		6350082	0		==			
ANR	6350130	ArrayIndexing	opt [ 0 ]		6350082	0					
ANR	6350131	Identifier	opt		6350082	0					
ANR	6350132	PrimaryExpression	0		6350082	1					
ANR	6350133	PrimaryExpression	'-'		6350082	1					
ANR	6350134	EqualityExpression	opt [ 1 ] != '\\0'		6350082	1		!=			
ANR	6350135	ArrayIndexing	opt [ 1 ]		6350082	0					
ANR	6350136	Identifier	opt		6350082	0					
ANR	6350137	PrimaryExpression	1		6350082	1					
ANR	6350138	PrimaryExpression	'\\0'		6350082	1					
ANR	6350139	CompoundStatement		23:12:281:297	6350082	1					
ANR	6350140	IdentifierDeclStatement	int bool_val = 1 ;	27:12:413:429	6350082	0	True				
ANR	6350141	IdentifierDecl	bool_val = 1		6350082	0					
ANR	6350142	IdentifierDeclType	int		6350082	0					
ANR	6350143	Identifier	bool_val		6350082	1					
ANR	6350144	AssignmentExpression	bool_val = 1		6350082	2		=			
ANR	6350145	Identifier	bool_val		6350082	0					
ANR	6350146	PrimaryExpression	1		6350082	1					
ANR	6350147	IfStatement	if ( opt [ 1 ] == '-' && opt [ 2 ] == '\\0' )		6350082	1					
ANR	6350148	Condition	opt [ 1 ] == '-' && opt [ 2 ] == '\\0'	29:16:448:478	6350082	0	True				
ANR	6350149	AndExpression	opt [ 1 ] == '-' && opt [ 2 ] == '\\0'		6350082	0		&&			
ANR	6350150	EqualityExpression	opt [ 1 ] == '-'		6350082	0		==			
ANR	6350151	ArrayIndexing	opt [ 1 ]		6350082	0					
ANR	6350152	Identifier	opt		6350082	0					
ANR	6350153	PrimaryExpression	1		6350082	1					
ANR	6350154	PrimaryExpression	'-'		6350082	1					
ANR	6350155	EqualityExpression	opt [ 2 ] == '\\0'		6350082	1		==			
ANR	6350156	ArrayIndexing	opt [ 2 ]		6350082	0					
ANR	6350157	Identifier	opt		6350082	0					
ANR	6350158	PrimaryExpression	2		6350082	1					
ANR	6350159	PrimaryExpression	'\\0'		6350082	1					
ANR	6350160	CompoundStatement		25:49:349:349	6350082	1					
ANR	6350161	ExpressionStatement	handleoptions = 0	31:16:500:517	6350082	0	True				
ANR	6350162	AssignmentExpression	handleoptions = 0		6350082	0		=			
ANR	6350163	Identifier	handleoptions		6350082	0					
ANR	6350164	PrimaryExpression	0		6350082	1					
ANR	6350165	ContinueStatement	continue ;	33:16:536:544	6350082	1	True				
ANR	6350166	ExpressionStatement	opt ++	37:12:574:579	6350082	2	True				
ANR	6350167	PostIncDecOperationExpression	opt ++		6350082	0					
ANR	6350168	Identifier	opt		6350082	0					
ANR	6350169	IncDec	++		6350082	1					
ANR	6350170	ExpressionStatement	"po = find_option ( options , opt )"	39:12:594:623	6350082	3	True				
ANR	6350171	AssignmentExpression	"po = find_option ( options , opt )"		6350082	0		=			
ANR	6350172	Identifier	po		6350082	0					
ANR	6350173	CallExpression	"find_option ( options , opt )"		6350082	1					
ANR	6350174	Callee	find_option		6350082	0					
ANR	6350175	Identifier	find_option		6350082	0					
ANR	6350176	ArgumentList	options		6350082	1					
ANR	6350177	Argument	options		6350082	0					
ANR	6350178	Identifier	options		6350082	0					
ANR	6350179	Argument	opt		6350082	1					
ANR	6350180	Identifier	opt		6350082	0					
ANR	6350181	IfStatement	if ( ! po -> name && opt [ 0 ] == 'n' && opt [ 1 ] == 'o' )		6350082	4					
ANR	6350182	Condition	! po -> name && opt [ 0 ] == 'n' && opt [ 1 ] == 'o'	41:16:642:684	6350082	0	True				
ANR	6350183	AndExpression	! po -> name && opt [ 0 ] == 'n' && opt [ 1 ] == 'o'		6350082	0		&&			
ANR	6350184	UnaryOperationExpression	! po -> name		6350082	0					
ANR	6350185	UnaryOperator	!		6350082	0					
ANR	6350186	PtrMemberAccess	po -> name		6350082	1					
ANR	6350187	Identifier	po		6350082	0					
ANR	6350188	Identifier	name		6350082	1					
ANR	6350189	AndExpression	opt [ 0 ] == 'n' && opt [ 1 ] == 'o'		6350082	1		&&			
ANR	6350190	EqualityExpression	opt [ 0 ] == 'n'		6350082	0		==			
ANR	6350191	ArrayIndexing	opt [ 0 ]		6350082	0					
ANR	6350192	Identifier	opt		6350082	0					
ANR	6350193	PrimaryExpression	0		6350082	1					
ANR	6350194	PrimaryExpression	'n'		6350082	1					
ANR	6350195	EqualityExpression	opt [ 1 ] == 'o'		6350082	1		==			
ANR	6350196	ArrayIndexing	opt [ 1 ]		6350082	0					
ANR	6350197	Identifier	opt		6350082	0					
ANR	6350198	PrimaryExpression	1		6350082	1					
ANR	6350199	PrimaryExpression	'o'		6350082	1					
ANR	6350200	CompoundStatement		37:61:555:555	6350082	1					
ANR	6350201	ExpressionStatement	"po = find_option ( options , opt + 2 )"	45:16:753:787	6350082	0	True				
ANR	6350202	AssignmentExpression	"po = find_option ( options , opt + 2 )"		6350082	0		=			
ANR	6350203	Identifier	po		6350082	0					
ANR	6350204	CallExpression	"find_option ( options , opt + 2 )"		6350082	1					
ANR	6350205	Callee	find_option		6350082	0					
ANR	6350206	Identifier	find_option		6350082	0					
ANR	6350207	ArgumentList	options		6350082	1					
ANR	6350208	Argument	options		6350082	0					
ANR	6350209	Identifier	options		6350082	0					
ANR	6350210	Argument	opt + 2		6350082	1					
ANR	6350211	AdditiveExpression	opt + 2		6350082	0		+			
ANR	6350212	Identifier	opt		6350082	0					
ANR	6350213	PrimaryExpression	2		6350082	1					
ANR	6350214	IfStatement	if ( ! ( po -> name && ( po -> flags & OPT_BOOL ) ) )		6350082	1					
ANR	6350215	Condition	! ( po -> name && ( po -> flags & OPT_BOOL ) )	47:20:810:846	6350082	0	True				
ANR	6350216	UnaryOperationExpression	! ( po -> name && ( po -> flags & OPT_BOOL ) )		6350082	0					
ANR	6350217	UnaryOperator	!		6350082	0					
ANR	6350218	AndExpression	po -> name && ( po -> flags & OPT_BOOL )		6350082	1		&&			
ANR	6350219	PtrMemberAccess	po -> name		6350082	0					
ANR	6350220	Identifier	po		6350082	0					
ANR	6350221	Identifier	name		6350082	1					
ANR	6350222	BitAndExpression	po -> flags & OPT_BOOL		6350082	1		&			
ANR	6350223	PtrMemberAccess	po -> flags		6350082	0					
ANR	6350224	Identifier	po		6350082	0					
ANR	6350225	Identifier	flags		6350082	1					
ANR	6350226	Identifier	OPT_BOOL		6350082	1					
ANR	6350227	GotoStatement	goto unknown_opt ;	49:20:870:886	6350082	1	True				
ANR	6350228	Identifier	unknown_opt		6350082	0					
ANR	6350229	ExpressionStatement	bool_val = 0	51:16:905:917	6350082	2	True				
ANR	6350230	AssignmentExpression	bool_val = 0		6350082	0		=			
ANR	6350231	Identifier	bool_val		6350082	0					
ANR	6350232	PrimaryExpression	0		6350082	1					
ANR	6350233	IfStatement	if ( ! po -> name )		6350082	5					
ANR	6350234	Condition	! po -> name	55:16:951:959	6350082	0	True				
ANR	6350235	UnaryOperationExpression	! po -> name		6350082	0					
ANR	6350236	UnaryOperator	!		6350082	0					
ANR	6350237	PtrMemberAccess	po -> name		6350082	1					
ANR	6350238	Identifier	po		6350082	0					
ANR	6350239	Identifier	name		6350082	1					
ANR	6350240	ExpressionStatement	"po = find_option ( options , ""default"" )"	57:16:979:1014	6350082	1	True				
ANR	6350241	AssignmentExpression	"po = find_option ( options , ""default"" )"		6350082	0		=			
ANR	6350242	Identifier	po		6350082	0					
ANR	6350243	CallExpression	"find_option ( options , ""default"" )"		6350082	1					
ANR	6350244	Callee	find_option		6350082	0					
ANR	6350245	Identifier	find_option		6350082	0					
ANR	6350246	ArgumentList	options		6350082	1					
ANR	6350247	Argument	options		6350082	0					
ANR	6350248	Identifier	options		6350082	0					
ANR	6350249	Argument	"""default"""		6350082	1					
ANR	6350250	PrimaryExpression	"""default"""		6350082	0					
ANR	6350251	IfStatement	if ( ! po -> name )		6350082	6					
ANR	6350252	Condition	! po -> name	59:16:1033:1041	6350082	0	True				
ANR	6350253	UnaryOperationExpression	! po -> name		6350082	0					
ANR	6350254	UnaryOperator	!		6350082	0					
ANR	6350255	PtrMemberAccess	po -> name		6350082	1					
ANR	6350256	Identifier	po		6350082	0					
ANR	6350257	Identifier	name		6350082	1					
ANR	6350258	CompoundStatement		55:27:912:912	6350082	1					
ANR	6350259	Label	unknown_opt :	61:0:1047:1058	6350082	0	True				
ANR	6350260	Identifier	unknown_opt		6350082	0					
ANR	6350261	ExpressionStatement	"fprintf ( stderr , ""%s: unrecognized option '%s'\\n"" , argv [ 0 ] , opt )"	63:16:1077:1140	6350082	1	True				
ANR	6350262	CallExpression	"fprintf ( stderr , ""%s: unrecognized option '%s'\\n"" , argv [ 0 ] , opt )"		6350082	0					
ANR	6350263	Callee	fprintf		6350082	0					
ANR	6350264	Identifier	fprintf		6350082	0					
ANR	6350265	ArgumentList	stderr		6350082	1					
ANR	6350266	Argument	stderr		6350082	0					
ANR	6350267	Identifier	stderr		6350082	0					
ANR	6350268	Argument	"""%s: unrecognized option '%s'\\n"""		6350082	1					
ANR	6350269	PrimaryExpression	"""%s: unrecognized option '%s'\\n"""		6350082	0					
ANR	6350270	Argument	argv [ 0 ]		6350082	2					
ANR	6350271	ArrayIndexing	argv [ 0 ]		6350082	0					
ANR	6350272	Identifier	argv		6350082	0					
ANR	6350273	PrimaryExpression	0		6350082	1					
ANR	6350274	Argument	opt		6350082	3					
ANR	6350275	Identifier	opt		6350082	0					
ANR	6350276	ExpressionStatement	exit ( 1 )	65:16:1159:1166	6350082	2	True				
ANR	6350277	CallExpression	exit ( 1 )		6350082	0					
ANR	6350278	Callee	exit		6350082	0					
ANR	6350279	Identifier	exit		6350082	0					
ANR	6350280	ArgumentList	1		6350082	1					
ANR	6350281	Argument	1		6350082	0					
ANR	6350282	PrimaryExpression	1		6350082	0					
ANR	6350283	ExpressionStatement	arg = NULL	69:12:1196:1206	6350082	7	True				
ANR	6350284	AssignmentExpression	arg = NULL		6350082	0		=			
ANR	6350285	Identifier	arg		6350082	0					
ANR	6350286	Identifier	NULL		6350082	1					
ANR	6350287	IfStatement	if ( po -> flags & HAS_ARG )		6350082	8					
ANR	6350288	Condition	po -> flags & HAS_ARG	71:16:1225:1243	6350082	0	True				
ANR	6350289	BitAndExpression	po -> flags & HAS_ARG		6350082	0		&			
ANR	6350290	PtrMemberAccess	po -> flags		6350082	0					
ANR	6350291	Identifier	po		6350082	0					
ANR	6350292	Identifier	flags		6350082	1					
ANR	6350293	Identifier	HAS_ARG		6350082	1					
ANR	6350294	CompoundStatement		67:37:1114:1114	6350082	1					
ANR	6350295	ExpressionStatement	arg = argv [ optindex ++ ]	73:16:1265:1287	6350082	0	True				
ANR	6350296	AssignmentExpression	arg = argv [ optindex ++ ]		6350082	0		=			
ANR	6350297	Identifier	arg		6350082	0					
ANR	6350298	ArrayIndexing	argv [ optindex ++ ]		6350082	1					
ANR	6350299	Identifier	argv		6350082	0					
ANR	6350300	PostIncDecOperationExpression	optindex ++		6350082	1					
ANR	6350301	Identifier	optindex		6350082	0					
ANR	6350302	IncDec	++		6350082	1					
ANR	6350303	IfStatement	if ( ! arg )		6350082	1					
ANR	6350304	Condition	! arg	75:20:1310:1313	6350082	0	True				
ANR	6350305	UnaryOperationExpression	! arg		6350082	0					
ANR	6350306	UnaryOperator	!		6350082	0					
ANR	6350307	Identifier	arg		6350082	1					
ANR	6350308	CompoundStatement		71:26:1184:1184	6350082	1					
ANR	6350309	ExpressionStatement	"fprintf ( stderr , ""%s: missing argument for option '%s'\\n"" , argv [ 0 ] , opt )"	77:20:1339:1410	6350082	0	True				
ANR	6350310	CallExpression	"fprintf ( stderr , ""%s: missing argument for option '%s'\\n"" , argv [ 0 ] , opt )"		6350082	0					
ANR	6350311	Callee	fprintf		6350082	0					
ANR	6350312	Identifier	fprintf		6350082	0					
ANR	6350313	ArgumentList	stderr		6350082	1					
ANR	6350314	Argument	stderr		6350082	0					
ANR	6350315	Identifier	stderr		6350082	0					
ANR	6350316	Argument	"""%s: missing argument for option '%s'\\n"""		6350082	1					
ANR	6350317	PrimaryExpression	"""%s: missing argument for option '%s'\\n"""		6350082	0					
ANR	6350318	Argument	argv [ 0 ]		6350082	2					
ANR	6350319	ArrayIndexing	argv [ 0 ]		6350082	0					
ANR	6350320	Identifier	argv		6350082	0					
ANR	6350321	PrimaryExpression	0		6350082	1					
ANR	6350322	Argument	opt		6350082	3					
ANR	6350323	Identifier	opt		6350082	0					
ANR	6350324	ExpressionStatement	exit ( 1 )	79:20:1433:1440	6350082	1	True				
ANR	6350325	CallExpression	exit ( 1 )		6350082	0					
ANR	6350326	Callee	exit		6350082	0					
ANR	6350327	Identifier	exit		6350082	0					
ANR	6350328	ArgumentList	1		6350082	1					
ANR	6350329	Argument	1		6350082	0					
ANR	6350330	PrimaryExpression	1		6350082	0					
ANR	6350331	IfStatement	if ( po -> flags & OPT_STRING )		6350082	9					
ANR	6350332	Condition	po -> flags & OPT_STRING	85:16:1493:1514	6350082	0	True				
ANR	6350333	BitAndExpression	po -> flags & OPT_STRING		6350082	0		&			
ANR	6350334	PtrMemberAccess	po -> flags		6350082	0					
ANR	6350335	Identifier	po		6350082	0					
ANR	6350336	Identifier	flags		6350082	1					
ANR	6350337	Identifier	OPT_STRING		6350082	1					
ANR	6350338	CompoundStatement		83:16:1404:1413	6350082	1					
ANR	6350339	IdentifierDeclStatement	char * str ;	87:16:1536:1545	6350082	0	True				
ANR	6350340	IdentifierDecl	* str		6350082	0					
ANR	6350341	IdentifierDeclType	char *		6350082	0					
ANR	6350342	Identifier	str		6350082	1					
ANR	6350343	ExpressionStatement	str = av_strdup ( arg )	89:16:1564:1584	6350082	1	True				
ANR	6350344	AssignmentExpression	str = av_strdup ( arg )		6350082	0		=			
ANR	6350345	Identifier	str		6350082	0					
ANR	6350346	CallExpression	av_strdup ( arg )		6350082	1					
ANR	6350347	Callee	av_strdup		6350082	0					
ANR	6350348	Identifier	av_strdup		6350082	0					
ANR	6350349	ArgumentList	arg		6350082	1					
ANR	6350350	Argument	arg		6350082	0					
ANR	6350351	Identifier	arg		6350082	0					
ANR	6350352	ExpressionStatement	* po -> u . str_arg = str	91:16:1603:1623	6350082	2	True				
ANR	6350353	AssignmentExpression	* po -> u . str_arg = str		6350082	0		=			
ANR	6350354	UnaryOperationExpression	* po -> u . str_arg		6350082	0					
ANR	6350355	UnaryOperator	*		6350082	0					
ANR	6350356	MemberAccess	po -> u . str_arg		6350082	1					
ANR	6350357	PtrMemberAccess	po -> u		6350082	0					
ANR	6350358	Identifier	po		6350082	0					
ANR	6350359	Identifier	u		6350082	1					
ANR	6350360	Identifier	str_arg		6350082	1					
ANR	6350361	Identifier	str		6350082	1					
ANR	6350362	ElseStatement	else		6350082	0					
ANR	6350363	IfStatement	if ( po -> flags & OPT_BOOL )		6350082	0					
ANR	6350364	Condition	po -> flags & OPT_BOOL	93:23:1649:1668	6350082	0	True				
ANR	6350365	BitAndExpression	po -> flags & OPT_BOOL		6350082	0		&			
ANR	6350366	PtrMemberAccess	po -> flags		6350082	0					
ANR	6350367	Identifier	po		6350082	0					
ANR	6350368	Identifier	flags		6350082	1					
ANR	6350369	Identifier	OPT_BOOL		6350082	1					
ANR	6350370	CompoundStatement		89:45:1539:1539	6350082	1					
ANR	6350371	ExpressionStatement	* po -> u . int_arg = bool_val	95:16:1690:1715	6350082	0	True				
ANR	6350372	AssignmentExpression	* po -> u . int_arg = bool_val		6350082	0		=			
ANR	6350373	UnaryOperationExpression	* po -> u . int_arg		6350082	0					
ANR	6350374	UnaryOperator	*		6350082	0					
ANR	6350375	MemberAccess	po -> u . int_arg		6350082	1					
ANR	6350376	PtrMemberAccess	po -> u		6350082	0					
ANR	6350377	Identifier	po		6350082	0					
ANR	6350378	Identifier	u		6350082	1					
ANR	6350379	Identifier	int_arg		6350082	1					
ANR	6350380	Identifier	bool_val		6350082	1					
ANR	6350381	ElseStatement	else		6350082	0					
ANR	6350382	IfStatement	if ( po -> flags & OPT_INT )		6350082	0					
ANR	6350383	Condition	po -> flags & OPT_INT	97:23:1741:1759	6350082	0	True				
ANR	6350384	BitAndExpression	po -> flags & OPT_INT		6350082	0		&			
ANR	6350385	PtrMemberAccess	po -> flags		6350082	0					
ANR	6350386	Identifier	po		6350082	0					
ANR	6350387	Identifier	flags		6350082	1					
ANR	6350388	Identifier	OPT_INT		6350082	1					
ANR	6350389	CompoundStatement		93:44:1630:1630	6350082	1					
ANR	6350390	ExpressionStatement	"* po -> u . int_arg = parse_number_or_die ( opt , arg , OPT_INT64 , INT_MIN , INT_MAX )"	99:16:1781:1856	6350082	0	True				
ANR	6350391	AssignmentExpression	"* po -> u . int_arg = parse_number_or_die ( opt , arg , OPT_INT64 , INT_MIN , INT_MAX )"		6350082	0		=			
ANR	6350392	UnaryOperationExpression	* po -> u . int_arg		6350082	0					
ANR	6350393	UnaryOperator	*		6350082	0					
ANR	6350394	MemberAccess	po -> u . int_arg		6350082	1					
ANR	6350395	PtrMemberAccess	po -> u		6350082	0					
ANR	6350396	Identifier	po		6350082	0					
ANR	6350397	Identifier	u		6350082	1					
ANR	6350398	Identifier	int_arg		6350082	1					
ANR	6350399	CallExpression	"parse_number_or_die ( opt , arg , OPT_INT64 , INT_MIN , INT_MAX )"		6350082	1					
ANR	6350400	Callee	parse_number_or_die		6350082	0					
ANR	6350401	Identifier	parse_number_or_die		6350082	0					
ANR	6350402	ArgumentList	opt		6350082	1					
ANR	6350403	Argument	opt		6350082	0					
ANR	6350404	Identifier	opt		6350082	0					
ANR	6350405	Argument	arg		6350082	1					
ANR	6350406	Identifier	arg		6350082	0					
ANR	6350407	Argument	OPT_INT64		6350082	2					
ANR	6350408	Identifier	OPT_INT64		6350082	0					
ANR	6350409	Argument	INT_MIN		6350082	3					
ANR	6350410	Identifier	INT_MIN		6350082	0					
ANR	6350411	Argument	INT_MAX		6350082	4					
ANR	6350412	Identifier	INT_MAX		6350082	0					
ANR	6350413	ElseStatement	else		6350082	0					
ANR	6350414	IfStatement	if ( po -> flags & OPT_INT64 )		6350082	0					
ANR	6350415	Condition	po -> flags & OPT_INT64	101:23:1882:1902	6350082	0	True				
ANR	6350416	BitAndExpression	po -> flags & OPT_INT64		6350082	0		&			
ANR	6350417	PtrMemberAccess	po -> flags		6350082	0					
ANR	6350418	Identifier	po		6350082	0					
ANR	6350419	Identifier	flags		6350082	1					
ANR	6350420	Identifier	OPT_INT64		6350082	1					
ANR	6350421	CompoundStatement		97:46:1773:1773	6350082	1					
ANR	6350422	ExpressionStatement	"* po -> u . int64_arg = parse_number_or_die ( opt , arg , OPT_INT64 , INT64_MIN , INT64_MAX )"	103:16:1924:2005	6350082	0	True				
ANR	6350423	AssignmentExpression	"* po -> u . int64_arg = parse_number_or_die ( opt , arg , OPT_INT64 , INT64_MIN , INT64_MAX )"		6350082	0		=			
ANR	6350424	UnaryOperationExpression	* po -> u . int64_arg		6350082	0					
ANR	6350425	UnaryOperator	*		6350082	0					
ANR	6350426	MemberAccess	po -> u . int64_arg		6350082	1					
ANR	6350427	PtrMemberAccess	po -> u		6350082	0					
ANR	6350428	Identifier	po		6350082	0					
ANR	6350429	Identifier	u		6350082	1					
ANR	6350430	Identifier	int64_arg		6350082	1					
ANR	6350431	CallExpression	"parse_number_or_die ( opt , arg , OPT_INT64 , INT64_MIN , INT64_MAX )"		6350082	1					
ANR	6350432	Callee	parse_number_or_die		6350082	0					
ANR	6350433	Identifier	parse_number_or_die		6350082	0					
ANR	6350434	ArgumentList	opt		6350082	1					
ANR	6350435	Argument	opt		6350082	0					
ANR	6350436	Identifier	opt		6350082	0					
ANR	6350437	Argument	arg		6350082	1					
ANR	6350438	Identifier	arg		6350082	0					
ANR	6350439	Argument	OPT_INT64		6350082	2					
ANR	6350440	Identifier	OPT_INT64		6350082	0					
ANR	6350441	Argument	INT64_MIN		6350082	3					
ANR	6350442	Identifier	INT64_MIN		6350082	0					
ANR	6350443	Argument	INT64_MAX		6350082	4					
ANR	6350444	Identifier	INT64_MAX		6350082	0					
ANR	6350445	ElseStatement	else		6350082	0					
ANR	6350446	IfStatement	if ( po -> flags & OPT_FLOAT )		6350082	0					
ANR	6350447	Condition	po -> flags & OPT_FLOAT	105:23:2031:2051	6350082	0	True				
ANR	6350448	BitAndExpression	po -> flags & OPT_FLOAT		6350082	0		&			
ANR	6350449	PtrMemberAccess	po -> flags		6350082	0					
ANR	6350450	Identifier	po		6350082	0					
ANR	6350451	Identifier	flags		6350082	1					
ANR	6350452	Identifier	OPT_FLOAT		6350082	1					
ANR	6350453	CompoundStatement		101:46:1922:1922	6350082	1					
ANR	6350454	ExpressionStatement	"* po -> u . float_arg = parse_number_or_die ( opt , arg , OPT_FLOAT , - 1.0 / 0.0 , 1.0 / 0.0 )"	107:16:2073:2151	6350082	0	True				
ANR	6350455	AssignmentExpression	"* po -> u . float_arg = parse_number_or_die ( opt , arg , OPT_FLOAT , - 1.0 / 0.0 , 1.0 / 0.0 )"		6350082	0		=			
ANR	6350456	UnaryOperationExpression	* po -> u . float_arg		6350082	0					
ANR	6350457	UnaryOperator	*		6350082	0					
ANR	6350458	MemberAccess	po -> u . float_arg		6350082	1					
ANR	6350459	PtrMemberAccess	po -> u		6350082	0					
ANR	6350460	Identifier	po		6350082	0					
ANR	6350461	Identifier	u		6350082	1					
ANR	6350462	Identifier	float_arg		6350082	1					
ANR	6350463	CallExpression	"parse_number_or_die ( opt , arg , OPT_FLOAT , - 1.0 / 0.0 , 1.0 / 0.0 )"		6350082	1					
ANR	6350464	Callee	parse_number_or_die		6350082	0					
ANR	6350465	Identifier	parse_number_or_die		6350082	0					
ANR	6350466	ArgumentList	opt		6350082	1					
ANR	6350467	Argument	opt		6350082	0					
ANR	6350468	Identifier	opt		6350082	0					
ANR	6350469	Argument	arg		6350082	1					
ANR	6350470	Identifier	arg		6350082	0					
ANR	6350471	Argument	OPT_FLOAT		6350082	2					
ANR	6350472	Identifier	OPT_FLOAT		6350082	0					
ANR	6350473	Argument	- 1.0 / 0.0		6350082	3					
ANR	6350474	MultiplicativeExpression	- 1.0 / 0.0		6350082	0		/			
ANR	6350475	UnaryOperationExpression	- 1.0		6350082	0					
ANR	6350476	UnaryOperator	-		6350082	0					
ANR	6350477	PrimaryExpression	1.0		6350082	1					
ANR	6350478	PrimaryExpression	0.0		6350082	1					
ANR	6350479	Argument	1.0 / 0.0		6350082	4					
ANR	6350480	MultiplicativeExpression	1.0 / 0.0		6350082	0		/			
ANR	6350481	PrimaryExpression	1.0		6350082	0					
ANR	6350482	PrimaryExpression	0.0		6350082	1					
ANR	6350483	ElseStatement	else		6350082	0					
ANR	6350484	IfStatement	if ( po -> flags & OPT_FUNC2 )		6350082	0					
ANR	6350485	Condition	po -> flags & OPT_FUNC2	109:23:2177:2197	6350082	0	True				
ANR	6350486	BitAndExpression	po -> flags & OPT_FUNC2		6350082	0		&			
ANR	6350487	PtrMemberAccess	po -> flags		6350082	0					
ANR	6350488	Identifier	po		6350082	0					
ANR	6350489	Identifier	flags		6350082	1					
ANR	6350490	Identifier	OPT_FUNC2		6350082	1					
ANR	6350491	CompoundStatement		105:46:2068:2068	6350082	1					
ANR	6350492	IfStatement	"if ( po -> u . func2_arg ( opt , arg ) < 0 )"		6350082	0					
ANR	6350493	Condition	"po -> u . func2_arg ( opt , arg ) < 0"	111:20:2223:2251	6350082	0	True				
ANR	6350494	RelationalExpression	"po -> u . func2_arg ( opt , arg ) < 0"		6350082	0		<			
ANR	6350495	CallExpression	"po -> u . func2_arg ( opt , arg )"		6350082	0					
ANR	6350496	Callee	po -> u . func2_arg		6350082	0					
ANR	6350497	MemberAccess	po -> u . func2_arg		6350082	0					
ANR	6350498	PtrMemberAccess	po -> u		6350082	0					
ANR	6350499	Identifier	po		6350082	0					
ANR	6350500	Identifier	u		6350082	1					
ANR	6350501	Identifier	func2_arg		6350082	1					
ANR	6350502	ArgumentList	opt		6350082	1					
ANR	6350503	Argument	opt		6350082	0					
ANR	6350504	Identifier	opt		6350082	0					
ANR	6350505	Argument	arg		6350082	1					
ANR	6350506	Identifier	arg		6350082	0					
ANR	6350507	PrimaryExpression	0		6350082	1					
ANR	6350508	CompoundStatement		107:51:2122:2122	6350082	1					
ANR	6350509	ExpressionStatement	"fprintf ( stderr , ""%s: invalid value '%s' for option '%s'\\n"" , argv [ 0 ] , arg , opt )"	113:20:2277:2355	6350082	0	True				
ANR	6350510	CallExpression	"fprintf ( stderr , ""%s: invalid value '%s' for option '%s'\\n"" , argv [ 0 ] , arg , opt )"		6350082	0					
ANR	6350511	Callee	fprintf		6350082	0					
ANR	6350512	Identifier	fprintf		6350082	0					
ANR	6350513	ArgumentList	stderr		6350082	1					
ANR	6350514	Argument	stderr		6350082	0					
ANR	6350515	Identifier	stderr		6350082	0					
ANR	6350516	Argument	"""%s: invalid value '%s' for option '%s'\\n"""		6350082	1					
ANR	6350517	PrimaryExpression	"""%s: invalid value '%s' for option '%s'\\n"""		6350082	0					
ANR	6350518	Argument	argv [ 0 ]		6350082	2					
ANR	6350519	ArrayIndexing	argv [ 0 ]		6350082	0					
ANR	6350520	Identifier	argv		6350082	0					
ANR	6350521	PrimaryExpression	0		6350082	1					
ANR	6350522	Argument	arg		6350082	3					
ANR	6350523	Identifier	arg		6350082	0					
ANR	6350524	Argument	opt		6350082	4					
ANR	6350525	Identifier	opt		6350082	0					
ANR	6350526	ExpressionStatement	exit ( 1 )	115:20:2378:2385	6350082	1	True				
ANR	6350527	CallExpression	exit ( 1 )		6350082	0					
ANR	6350528	Callee	exit		6350082	0					
ANR	6350529	Identifier	exit		6350082	0					
ANR	6350530	ArgumentList	1		6350082	1					
ANR	6350531	Argument	1		6350082	0					
ANR	6350532	PrimaryExpression	1		6350082	0					
ANR	6350533	ElseStatement	else		6350082	0					
ANR	6350534	CompoundStatement		115:19:2294:2294	6350082	0					
ANR	6350535	ExpressionStatement	po -> u . func_arg ( arg )	121:16:2445:2464	6350082	0	True				
ANR	6350536	CallExpression	po -> u . func_arg ( arg )		6350082	0					
ANR	6350537	Callee	po -> u . func_arg		6350082	0					
ANR	6350538	MemberAccess	po -> u . func_arg		6350082	0					
ANR	6350539	PtrMemberAccess	po -> u		6350082	0					
ANR	6350540	Identifier	po		6350082	0					
ANR	6350541	Identifier	u		6350082	1					
ANR	6350542	Identifier	func_arg		6350082	1					
ANR	6350543	ArgumentList	arg		6350082	1					
ANR	6350544	Argument	arg		6350082	0					
ANR	6350545	Identifier	arg		6350082	0					
ANR	6350546	IfStatement	if ( po -> flags & OPT_EXIT )		6350082	10					
ANR	6350547	Condition	po -> flags & OPT_EXIT	125:15:2497:2516	6350082	0	True				
ANR	6350548	BitAndExpression	po -> flags & OPT_EXIT		6350082	0		&			
ANR	6350549	PtrMemberAccess	po -> flags		6350082	0					
ANR	6350550	Identifier	po		6350082	0					
ANR	6350551	Identifier	flags		6350082	1					
ANR	6350552	Identifier	OPT_EXIT		6350082	1					
ANR	6350553	ExpressionStatement	exit ( 0 )	127:16:2536:2543	6350082	1	True				
ANR	6350554	CallExpression	exit ( 0 )		6350082	0					
ANR	6350555	Callee	exit		6350082	0					
ANR	6350556	Identifier	exit		6350082	0					
ANR	6350557	ArgumentList	0		6350082	1					
ANR	6350558	Argument	0		6350082	0					
ANR	6350559	PrimaryExpression	0		6350082	0					
ANR	6350560	ElseStatement	else		6350082	0					
ANR	6350561	CompoundStatement		125:15:2429:2429	6350082	0					
ANR	6350562	IfStatement	if ( parse_arg_function )		6350082	0					
ANR	6350563	Condition	parse_arg_function	131:16:2580:2597	6350082	0	True				
ANR	6350564	Identifier	parse_arg_function		6350082	0					
ANR	6350565	ExpressionStatement	parse_arg_function ( opt )	133:16:2617:2640	6350082	1	True				
ANR	6350566	CallExpression	parse_arg_function ( opt )		6350082	0					
ANR	6350567	Callee	parse_arg_function		6350082	0					
ANR	6350568	Identifier	parse_arg_function		6350082	0					
ANR	6350569	ArgumentList	opt		6350082	1					
ANR	6350570	Argument	opt		6350082	0					
ANR	6350571	Identifier	opt		6350082	0					
ANR	6350572	ReturnType	void		6350082	1					
ANR	6350573	Identifier	parse_options		6350082	2					
ANR	6350574	ParameterList	"int argc , char * * argv , const OptionDef * options , void ( * parse_arg_function ) ( const char * )"		6350082	3					
ANR	6350575	Parameter	int argc	1:19:19:26	6350082	0	True				
ANR	6350576	ParameterType	int		6350082	0					
ANR	6350577	Identifier	argc		6350082	1					
ANR	6350578	Parameter	char * * argv	1:29:29:39	6350082	1	True				
ANR	6350579	ParameterType	char * *		6350082	0					
ANR	6350580	Identifier	argv		6350082	1					
ANR	6350581	Parameter	const OptionDef * options	1:42:42:65	6350082	2	True				
ANR	6350582	ParameterType	const OptionDef *		6350082	0					
ANR	6350583	Identifier	options		6350082	1					
ANR	6350584	Parameter	void ( * parse_arg_function ) ( const char * )	3:19:88:127	6350082	3	True				
ANR	6350585	ParameterType	(( const char * ) void) *		6350082	0					
ANR	6350586	Identifier	parse_arg_function		6350082	1					
ANR	6350587	CFGEntryNode	ENTRY		6350082		True				
ANR	6350588	CFGExitNode	EXIT		6350082		True				
ANR	6350589	Symbol	bool_val		6350082						
ANR	6350590	Symbol	po -> u . int64_arg		6350082						
ANR	6350591	Symbol	av_strdup		6350082						
ANR	6350592	Symbol	* argv		6350082						
ANR	6350593	Symbol	* po -> u		6350082						
ANR	6350594	Symbol	INT64_MAX		6350082						
ANR	6350595	Symbol	argv		6350082						
ANR	6350596	Symbol	handleoptions		6350082						
ANR	6350597	Symbol	INT_MIN		6350082						
ANR	6350598	Symbol	* po -> u . int64_arg		6350082						
ANR	6350599	Symbol	parse_arg_function		6350082						
ANR	6350600	Symbol	* po -> u . str_arg		6350082						
ANR	6350601	Symbol	* po -> u . float_arg		6350082						
ANR	6350602	Symbol	arg		6350082						
ANR	6350603	Symbol	po -> name		6350082						
ANR	6350604	Symbol	options		6350082						
ANR	6350605	Symbol	HAS_ARG		6350082						
ANR	6350606	Symbol	INT_MAX		6350082						
ANR	6350607	Symbol	INT64_MIN		6350082						
ANR	6350608	Symbol	po -> u . str_arg		6350082						
ANR	6350609	Symbol	* opt		6350082						
ANR	6350610	Symbol	argc		6350082						
ANR	6350611	Symbol	NULL		6350082						
ANR	6350612	Symbol	OPT_FUNC2		6350082						
ANR	6350613	Symbol	* po		6350082						
ANR	6350614	Symbol	parse_number_or_die		6350082						
ANR	6350615	Symbol	po -> u . func2_arg		6350082						
ANR	6350616	Symbol	* * po		6350082						
ANR	6350617	Symbol	OPT_EXIT		6350082						
ANR	6350618	Symbol	stderr		6350082						
ANR	6350619	Symbol	OPT_INT64		6350082						
ANR	6350620	Symbol	find_option		6350082						
ANR	6350621	Symbol	po -> flags		6350082						
ANR	6350622	Symbol	str		6350082						
ANR	6350623	Symbol	opt		6350082						
ANR	6350624	Symbol	OPT_FLOAT		6350082						
ANR	6350625	Symbol	optindex		6350082						
ANR	6350626	Symbol	OPT_BOOL		6350082						
ANR	6350627	Symbol	* po -> u . int_arg		6350082						
ANR	6350628	Symbol	OPT_INT		6350082						
ANR	6350629	Symbol	po -> u . int_arg		6350082						
ANR	6350630	Symbol	po -> u . float_arg		6350082						
ANR	6350631	Symbol	OPT_STRING		6350082						
ANR	6350632	Symbol	po -> u		6350082						
ANR	6350633	Symbol	po		6350082						
