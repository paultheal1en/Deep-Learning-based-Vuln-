command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1902664	File	/home/p4ultr4n/workplace/ReVeal/raw_code/decode_mb_cavlc_1.c								
ANR	1902665	Function	decode_mb_cavlc	1:0:0:20592							
ANR	1902666	FunctionDef	decode_mb_cavlc (H264Context * h)		1902665	0					
ANR	1902667	CompoundStatement		1:42:42:20592	1902665	0					
ANR	1902668	Statement	MpegEncContext	3:4:49:62	1902665	0	True				
ANR	1902669	Statement	*	3:19:64:64	1902665	1	True				
ANR	1902670	Statement	const	3:21:66:70	1902665	2	True				
ANR	1902671	ExpressionStatement	s = & h -> s	3:27:72:81	1902665	3	True				
ANR	1902672	AssignmentExpression	s = & h -> s		1902665	0		=			
ANR	1902673	Identifier	s		1902665	0					
ANR	1902674	UnaryOperationExpression	& h -> s		1902665	1					
ANR	1902675	UnaryOperator	&		1902665	0					
ANR	1902676	PtrMemberAccess	h -> s		1902665	1					
ANR	1902677	Identifier	h		1902665	0					
ANR	1902678	Identifier	s		1902665	1					
ANR	1902679	IdentifierDeclStatement	const int mb_xy = s -> mb_x + s -> mb_y * s -> mb_stride ;	5:4:88:135	1902665	4	True				
ANR	1902680	IdentifierDecl	mb_xy = s -> mb_x + s -> mb_y * s -> mb_stride		1902665	0					
ANR	1902681	IdentifierDeclType	const int		1902665	0					
ANR	1902682	Identifier	mb_xy		1902665	1					
ANR	1902683	AssignmentExpression	mb_xy = s -> mb_x + s -> mb_y * s -> mb_stride		1902665	2		=			
ANR	1902684	Identifier	mb_xy		1902665	0					
ANR	1902685	AdditiveExpression	s -> mb_x + s -> mb_y * s -> mb_stride		1902665	1		+			
ANR	1902686	PtrMemberAccess	s -> mb_x		1902665	0					
ANR	1902687	Identifier	s		1902665	0					
ANR	1902688	Identifier	mb_x		1902665	1					
ANR	1902689	MultiplicativeExpression	s -> mb_y * s -> mb_stride		1902665	1		*			
ANR	1902690	PtrMemberAccess	s -> mb_y		1902665	0					
ANR	1902691	Identifier	s		1902665	0					
ANR	1902692	Identifier	mb_y		1902665	1					
ANR	1902693	PtrMemberAccess	s -> mb_stride		1902665	1					
ANR	1902694	Identifier	s		1902665	0					
ANR	1902695	Identifier	mb_stride		1902665	1					
ANR	1902696	IdentifierDeclStatement	int partition_count ;	7:4:142:161	1902665	5	True				
ANR	1902697	IdentifierDecl	partition_count		1902665	0					
ANR	1902698	IdentifierDeclType	int		1902665	0					
ANR	1902699	Identifier	partition_count		1902665	1					
ANR	1902700	IdentifierDeclStatement	"unsigned int mb_type , cbp ;"	9:4:168:193	1902665	6	True				
ANR	1902701	IdentifierDecl	mb_type		1902665	0					
ANR	1902702	IdentifierDeclType	unsigned int		1902665	0					
ANR	1902703	Identifier	mb_type		1902665	1					
ANR	1902704	IdentifierDecl	cbp		1902665	1					
ANR	1902705	IdentifierDeclType	unsigned int		1902665	0					
ANR	1902706	Identifier	cbp		1902665	1					
ANR	1902707	IdentifierDeclStatement	int dct8x8_allowed = h -> pps . transform_8x8_mode ;	11:4:200:245	1902665	7	True				
ANR	1902708	IdentifierDecl	dct8x8_allowed = h -> pps . transform_8x8_mode		1902665	0					
ANR	1902709	IdentifierDeclType	int		1902665	0					
ANR	1902710	Identifier	dct8x8_allowed		1902665	1					
ANR	1902711	AssignmentExpression	dct8x8_allowed = h -> pps . transform_8x8_mode		1902665	2		=			
ANR	1902712	Identifier	dct8x8_allowed		1902665	0					
ANR	1902713	MemberAccess	h -> pps . transform_8x8_mode		1902665	1					
ANR	1902714	PtrMemberAccess	h -> pps		1902665	0					
ANR	1902715	Identifier	h		1902665	0					
ANR	1902716	Identifier	pps		1902665	1					
ANR	1902717	Identifier	transform_8x8_mode		1902665	1					
ANR	1902718	ExpressionStatement	s -> dsp . clear_blocks ( h -> mb )	15:4:254:280	1902665	8	True				
ANR	1902719	CallExpression	s -> dsp . clear_blocks ( h -> mb )		1902665	0					
ANR	1902720	Callee	s -> dsp . clear_blocks		1902665	0					
ANR	1902721	MemberAccess	s -> dsp . clear_blocks		1902665	0					
ANR	1902722	PtrMemberAccess	s -> dsp		1902665	0					
ANR	1902723	Identifier	s		1902665	0					
ANR	1902724	Identifier	dsp		1902665	1					
ANR	1902725	Identifier	clear_blocks		1902665	1					
ANR	1902726	ArgumentList	h -> mb		1902665	1					
ANR	1902727	Argument	h -> mb		1902665	0					
ANR	1902728	PtrMemberAccess	h -> mb		1902665	0					
ANR	1902729	Identifier	h		1902665	0					
ANR	1902730	Identifier	mb		1902665	1					
ANR	1902731	ExpressionStatement	"tprintf ( s -> avctx , ""pic:%d mb:%d/%d\\n"" , h -> frame_num , s -> mb_x , s -> mb_y )"	19:4:347:417	1902665	9	True				
ANR	1902732	CallExpression	"tprintf ( s -> avctx , ""pic:%d mb:%d/%d\\n"" , h -> frame_num , s -> mb_x , s -> mb_y )"		1902665	0					
ANR	1902733	Callee	tprintf		1902665	0					
ANR	1902734	Identifier	tprintf		1902665	0					
ANR	1902735	ArgumentList	s -> avctx		1902665	1					
ANR	1902736	Argument	s -> avctx		1902665	0					
ANR	1902737	PtrMemberAccess	s -> avctx		1902665	0					
ANR	1902738	Identifier	s		1902665	0					
ANR	1902739	Identifier	avctx		1902665	1					
ANR	1902740	Argument	"""pic:%d mb:%d/%d\\n"""		1902665	1					
ANR	1902741	PrimaryExpression	"""pic:%d mb:%d/%d\\n"""		1902665	0					
ANR	1902742	Argument	h -> frame_num		1902665	2					
ANR	1902743	PtrMemberAccess	h -> frame_num		1902665	0					
ANR	1902744	Identifier	h		1902665	0					
ANR	1902745	Identifier	frame_num		1902665	1					
ANR	1902746	Argument	s -> mb_x		1902665	3					
ANR	1902747	PtrMemberAccess	s -> mb_x		1902665	0					
ANR	1902748	Identifier	s		1902665	0					
ANR	1902749	Identifier	mb_x		1902665	1					
ANR	1902750	Argument	s -> mb_y		1902665	4					
ANR	1902751	PtrMemberAccess	s -> mb_y		1902665	0					
ANR	1902752	Identifier	s		1902665	0					
ANR	1902753	Identifier	mb_y		1902665	1					
ANR	1902754	ExpressionStatement	cbp = 0	21:4:424:431	1902665	10	True				
ANR	1902755	AssignmentExpression	cbp = 0		1902665	0		=			
ANR	1902756	Identifier	cbp		1902665	0					
ANR	1902757	PrimaryExpression	0		1902665	1					
ANR	1902758	IfStatement	if ( h -> slice_type != I_TYPE && h -> slice_type != SI_TYPE )		1902665	11					
ANR	1902759	Condition	h -> slice_type != I_TYPE && h -> slice_type != SI_TYPE	25:7:532:582	1902665	0	True				
ANR	1902760	AndExpression	h -> slice_type != I_TYPE && h -> slice_type != SI_TYPE		1902665	0		&&			
ANR	1902761	EqualityExpression	h -> slice_type != I_TYPE		1902665	0		!=			
ANR	1902762	PtrMemberAccess	h -> slice_type		1902665	0					
ANR	1902763	Identifier	h		1902665	0					
ANR	1902764	Identifier	slice_type		1902665	1					
ANR	1902765	Identifier	I_TYPE		1902665	1					
ANR	1902766	EqualityExpression	h -> slice_type != SI_TYPE		1902665	1		!=			
ANR	1902767	PtrMemberAccess	h -> slice_type		1902665	0					
ANR	1902768	Identifier	h		1902665	0					
ANR	1902769	Identifier	slice_type		1902665	1					
ANR	1902770	Identifier	SI_TYPE		1902665	1					
ANR	1902771	CompoundStatement		25:59:541:541	1902665	1					
ANR	1902772	IfStatement	if ( s -> mb_skip_run == - 1 )		1902665	0					
ANR	1902773	Condition	s -> mb_skip_run == - 1	27:11:598:615	1902665	0	True				
ANR	1902774	EqualityExpression	s -> mb_skip_run == - 1		1902665	0		==			
ANR	1902775	PtrMemberAccess	s -> mb_skip_run		1902665	0					
ANR	1902776	Identifier	s		1902665	0					
ANR	1902777	Identifier	mb_skip_run		1902665	1					
ANR	1902778	UnaryOperationExpression	- 1		1902665	1					
ANR	1902779	UnaryOperator	-		1902665	0					
ANR	1902780	PrimaryExpression	1		1902665	1					
ANR	1902781	ExpressionStatement	s -> mb_skip_run = get_ue_golomb ( & s -> gb )	29:12:631:668	1902665	1	True				
ANR	1902782	AssignmentExpression	s -> mb_skip_run = get_ue_golomb ( & s -> gb )		1902665	0		=			
ANR	1902783	PtrMemberAccess	s -> mb_skip_run		1902665	0					
ANR	1902784	Identifier	s		1902665	0					
ANR	1902785	Identifier	mb_skip_run		1902665	1					
ANR	1902786	CallExpression	get_ue_golomb ( & s -> gb )		1902665	1					
ANR	1902787	Callee	get_ue_golomb		1902665	0					
ANR	1902788	Identifier	get_ue_golomb		1902665	0					
ANR	1902789	ArgumentList	& s -> gb		1902665	1					
ANR	1902790	Argument	& s -> gb		1902665	0					
ANR	1902791	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1902792	UnaryOperator	&		1902665	0					
ANR	1902793	PtrMemberAccess	s -> gb		1902665	1					
ANR	1902794	Identifier	s		1902665	0					
ANR	1902795	Identifier	gb		1902665	1					
ANR	1902796	IfStatement	if ( s -> mb_skip_run -- )		1902665	1					
ANR	1902797	Condition	s -> mb_skip_run --	33:12:685:700	1902665	0	True				
ANR	1902798	PostIncDecOperationExpression	s -> mb_skip_run --		1902665	0					
ANR	1902799	PtrMemberAccess	s -> mb_skip_run		1902665	0					
ANR	1902800	Identifier	s		1902665	0					
ANR	1902801	Identifier	mb_skip_run		1902665	1					
ANR	1902802	IncDec	--		1902665	1					
ANR	1902803	CompoundStatement		33:30:660:660	1902665	1					
ANR	1902804	IfStatement	if ( FRAME_MBAFF && ( s -> mb_y & 1 ) == 0 )		1902665	0					
ANR	1902805	Condition	FRAME_MBAFF && ( s -> mb_y & 1 ) == 0	35:15:721:751	1902665	0	True				
ANR	1902806	AndExpression	FRAME_MBAFF && ( s -> mb_y & 1 ) == 0		1902665	0		&&			
ANR	1902807	Identifier	FRAME_MBAFF		1902665	0					
ANR	1902808	EqualityExpression	( s -> mb_y & 1 ) == 0		1902665	1		==			
ANR	1902809	BitAndExpression	s -> mb_y & 1		1902665	0		&			
ANR	1902810	PtrMemberAccess	s -> mb_y		1902665	0					
ANR	1902811	Identifier	s		1902665	0					
ANR	1902812	Identifier	mb_y		1902665	1					
ANR	1902813	PrimaryExpression	1		1902665	1					
ANR	1902814	PrimaryExpression	0		1902665	1					
ANR	1902815	CompoundStatement		35:47:710:710	1902665	1					
ANR	1902816	IfStatement	if ( s -> mb_skip_run == 0 )		1902665	0					
ANR	1902817	Condition	s -> mb_skip_run == 0	37:19:775:791	1902665	0	True				
ANR	1902818	EqualityExpression	s -> mb_skip_run == 0		1902665	0		==			
ANR	1902819	PtrMemberAccess	s -> mb_skip_run		1902665	0					
ANR	1902820	Identifier	s		1902665	0					
ANR	1902821	Identifier	mb_skip_run		1902665	1					
ANR	1902822	PrimaryExpression	0		1902665	1					
ANR	1902823	ExpressionStatement	h -> mb_mbaff = h -> mb_field_decoding_flag = get_bits1 ( & s -> gb )	39:20:815:874	1902665	1	True				
ANR	1902824	AssignmentExpression	h -> mb_mbaff = h -> mb_field_decoding_flag = get_bits1 ( & s -> gb )		1902665	0		=			
ANR	1902825	PtrMemberAccess	h -> mb_mbaff		1902665	0					
ANR	1902826	Identifier	h		1902665	0					
ANR	1902827	Identifier	mb_mbaff		1902665	1					
ANR	1902828	AssignmentExpression	h -> mb_field_decoding_flag = get_bits1 ( & s -> gb )		1902665	1		=			
ANR	1902829	PtrMemberAccess	h -> mb_field_decoding_flag		1902665	0					
ANR	1902830	Identifier	h		1902665	0					
ANR	1902831	Identifier	mb_field_decoding_flag		1902665	1					
ANR	1902832	CallExpression	get_bits1 ( & s -> gb )		1902665	1					
ANR	1902833	Callee	get_bits1		1902665	0					
ANR	1902834	Identifier	get_bits1		1902665	0					
ANR	1902835	ArgumentList	& s -> gb		1902665	1					
ANR	1902836	Argument	& s -> gb		1902665	0					
ANR	1902837	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1902838	UnaryOperator	&		1902665	0					
ANR	1902839	PtrMemberAccess	s -> gb		1902665	1					
ANR	1902840	Identifier	s		1902665	0					
ANR	1902841	Identifier	gb		1902665	1					
ANR	1902842	ElseStatement	else		1902665	0					
ANR	1902843	ExpressionStatement	predict_field_decoding_flag ( h )	43:20:919:949	1902665	0	True				
ANR	1902844	CallExpression	predict_field_decoding_flag ( h )		1902665	0					
ANR	1902845	Callee	predict_field_decoding_flag		1902665	0					
ANR	1902846	Identifier	predict_field_decoding_flag		1902665	0					
ANR	1902847	ArgumentList	h		1902665	1					
ANR	1902848	Argument	h		1902665	0					
ANR	1902849	Identifier	h		1902665	0					
ANR	1902850	ExpressionStatement	decode_mb_skip ( h )	47:12:979:996	1902665	1	True				
ANR	1902851	CallExpression	decode_mb_skip ( h )		1902665	0					
ANR	1902852	Callee	decode_mb_skip		1902665	0					
ANR	1902853	Identifier	decode_mb_skip		1902665	0					
ANR	1902854	ArgumentList	h		1902665	1					
ANR	1902855	Argument	h		1902665	0					
ANR	1902856	Identifier	h		1902665	0					
ANR	1902857	ReturnStatement	return 0 ;	49:12:1011:1019	1902665	2	True				
ANR	1902858	PrimaryExpression	0		1902665	0					
ANR	1902859	IfStatement	if ( FRAME_MBAFF )		1902665	12					
ANR	1902860	Condition	FRAME_MBAFF	55:7:1047:1057	1902665	0	True				
ANR	1902861	Identifier	FRAME_MBAFF		1902665	0					
ANR	1902862	CompoundStatement		55:19:1016:1016	1902665	1					
ANR	1902863	IfStatement	if ( ( s -> mb_y & 1 ) == 0 )		1902665	0					
ANR	1902864	Condition	( s -> mb_y & 1 ) == 0	57:12:1074:1089	1902665	0	True				
ANR	1902865	EqualityExpression	( s -> mb_y & 1 ) == 0		1902665	0		==			
ANR	1902866	BitAndExpression	s -> mb_y & 1		1902665	0		&			
ANR	1902867	PtrMemberAccess	s -> mb_y		1902665	0					
ANR	1902868	Identifier	s		1902665	0					
ANR	1902869	Identifier	mb_y		1902665	1					
ANR	1902870	PrimaryExpression	1		1902665	1					
ANR	1902871	PrimaryExpression	0		1902665	1					
ANR	1902872	ExpressionStatement	h -> mb_mbaff = h -> mb_field_decoding_flag = get_bits1 ( & s -> gb )	59:12:1106:1165	1902665	1	True				
ANR	1902873	AssignmentExpression	h -> mb_mbaff = h -> mb_field_decoding_flag = get_bits1 ( & s -> gb )		1902665	0		=			
ANR	1902874	PtrMemberAccess	h -> mb_mbaff		1902665	0					
ANR	1902875	Identifier	h		1902665	0					
ANR	1902876	Identifier	mb_mbaff		1902665	1					
ANR	1902877	AssignmentExpression	h -> mb_field_decoding_flag = get_bits1 ( & s -> gb )		1902665	1		=			
ANR	1902878	PtrMemberAccess	h -> mb_field_decoding_flag		1902665	0					
ANR	1902879	Identifier	h		1902665	0					
ANR	1902880	Identifier	mb_field_decoding_flag		1902665	1					
ANR	1902881	CallExpression	get_bits1 ( & s -> gb )		1902665	1					
ANR	1902882	Callee	get_bits1		1902665	0					
ANR	1902883	Identifier	get_bits1		1902665	0					
ANR	1902884	ArgumentList	& s -> gb		1902665	1					
ANR	1902885	Argument	& s -> gb		1902665	0					
ANR	1902886	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1902887	UnaryOperator	&		1902665	0					
ANR	1902888	PtrMemberAccess	s -> gb		1902665	1					
ANR	1902889	Identifier	s		1902665	0					
ANR	1902890	Identifier	gb		1902665	1					
ANR	1902891	ElseStatement	else		1902665	0					
ANR	1902892	ExpressionStatement	h -> mb_field_decoding_flag = ( s -> picture_structure != PICT_FRAME )	63:8:1187:1248	1902665	0	True				
ANR	1902893	AssignmentExpression	h -> mb_field_decoding_flag = ( s -> picture_structure != PICT_FRAME )		1902665	0		=			
ANR	1902894	PtrMemberAccess	h -> mb_field_decoding_flag		1902665	0					
ANR	1902895	Identifier	h		1902665	0					
ANR	1902896	Identifier	mb_field_decoding_flag		1902665	1					
ANR	1902897	EqualityExpression	s -> picture_structure != PICT_FRAME		1902665	1		!=			
ANR	1902898	PtrMemberAccess	s -> picture_structure		1902665	0					
ANR	1902899	Identifier	s		1902665	0					
ANR	1902900	Identifier	picture_structure		1902665	1					
ANR	1902901	Identifier	PICT_FRAME		1902665	1					
ANR	1902902	ExpressionStatement	h -> prev_mb_skipped = 0	67:4:1257:1278	1902665	13	True				
ANR	1902903	AssignmentExpression	h -> prev_mb_skipped = 0		1902665	0		=			
ANR	1902904	PtrMemberAccess	h -> prev_mb_skipped		1902665	0					
ANR	1902905	Identifier	h		1902665	0					
ANR	1902906	Identifier	prev_mb_skipped		1902665	1					
ANR	1902907	PrimaryExpression	0		1902665	1					
ANR	1902908	ExpressionStatement	mb_type = get_ue_golomb ( & s -> gb )	71:4:1287:1317	1902665	14	True				
ANR	1902909	AssignmentExpression	mb_type = get_ue_golomb ( & s -> gb )		1902665	0		=			
ANR	1902910	Identifier	mb_type		1902665	0					
ANR	1902911	CallExpression	get_ue_golomb ( & s -> gb )		1902665	1					
ANR	1902912	Callee	get_ue_golomb		1902665	0					
ANR	1902913	Identifier	get_ue_golomb		1902665	0					
ANR	1902914	ArgumentList	& s -> gb		1902665	1					
ANR	1902915	Argument	& s -> gb		1902665	0					
ANR	1902916	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1902917	UnaryOperator	&		1902665	0					
ANR	1902918	PtrMemberAccess	s -> gb		1902665	1					
ANR	1902919	Identifier	s		1902665	0					
ANR	1902920	Identifier	gb		1902665	1					
ANR	1902921	IfStatement	if ( h -> slice_type == B_TYPE )		1902665	15					
ANR	1902922	Condition	h -> slice_type == B_TYPE	73:7:1327:1349	1902665	0	True				
ANR	1902923	EqualityExpression	h -> slice_type == B_TYPE		1902665	0		==			
ANR	1902924	PtrMemberAccess	h -> slice_type		1902665	0					
ANR	1902925	Identifier	h		1902665	0					
ANR	1902926	Identifier	slice_type		1902665	1					
ANR	1902927	Identifier	B_TYPE		1902665	1					
ANR	1902928	CompoundStatement		73:31:1308:1308	1902665	1					
ANR	1902929	IfStatement	if ( mb_type < 23 )		1902665	0					
ANR	1902930	Condition	mb_type < 23	75:11:1365:1376	1902665	0	True				
ANR	1902931	RelationalExpression	mb_type < 23		1902665	0		<			
ANR	1902932	Identifier	mb_type		1902665	0					
ANR	1902933	PrimaryExpression	23		1902665	1					
ANR	1902934	CompoundStatement		75:24:1335:1335	1902665	1					
ANR	1902935	ExpressionStatement	partition_count = b_mb_type_info [ mb_type ] . partition_count	77:12:1393:1449	1902665	0	True				
ANR	1902936	AssignmentExpression	partition_count = b_mb_type_info [ mb_type ] . partition_count		1902665	0		=			
ANR	1902937	Identifier	partition_count		1902665	0					
ANR	1902938	MemberAccess	b_mb_type_info [ mb_type ] . partition_count		1902665	1					
ANR	1902939	ArrayIndexing	b_mb_type_info [ mb_type ]		1902665	0					
ANR	1902940	Identifier	b_mb_type_info		1902665	0					
ANR	1902941	Identifier	mb_type		1902665	1					
ANR	1902942	Identifier	partition_count		1902665	1					
ANR	1902943	ExpressionStatement	mb_type = b_mb_type_info [ mb_type ] . type	79:12:1464:1509	1902665	1	True				
ANR	1902944	AssignmentExpression	mb_type = b_mb_type_info [ mb_type ] . type		1902665	0		=			
ANR	1902945	Identifier	mb_type		1902665	0					
ANR	1902946	MemberAccess	b_mb_type_info [ mb_type ] . type		1902665	1					
ANR	1902947	ArrayIndexing	b_mb_type_info [ mb_type ]		1902665	0					
ANR	1902948	Identifier	b_mb_type_info		1902665	0					
ANR	1902949	Identifier	mb_type		1902665	1					
ANR	1902950	Identifier	type		1902665	1					
ANR	1902951	ElseStatement	else		1902665	0					
ANR	1902952	CompoundStatement		81:13:1482:1482	1902665	0					
ANR	1902953	ExpressionStatement	mb_type -= 23	83:12:1540:1553	1902665	0	True				
ANR	1902954	AssignmentExpression	mb_type -= 23		1902665	0		-=			
ANR	1902955	Identifier	mb_type		1902665	0					
ANR	1902956	PrimaryExpression	23		1902665	1					
ANR	1902957	GotoStatement	goto decode_intra_mb ;	85:12:1568:1588	1902665	1	True				
ANR	1902958	Identifier	decode_intra_mb		1902665	0					
ANR	1902959	ElseStatement	else		1902665	0					
ANR	1902960	IfStatement	if ( h -> slice_type == P_TYPE )		1902665	0					
ANR	1902961	Condition	h -> slice_type == P_TYPE	89:13:1615:1637	1902665	0	True				
ANR	1902962	EqualityExpression	h -> slice_type == P_TYPE		1902665	0		==			
ANR	1902963	PtrMemberAccess	h -> slice_type		1902665	0					
ANR	1902964	Identifier	h		1902665	0					
ANR	1902965	Identifier	slice_type		1902665	1					
ANR	1902966	Identifier	P_TYPE		1902665	1					
ANR	1902967	CompoundStatement		89:70:1629:1629	1902665	1					
ANR	1902968	IfStatement	if ( mb_type < 5 )		1902665	0					
ANR	1902969	Condition	mb_type < 5	91:11:1686:1696	1902665	0	True				
ANR	1902970	RelationalExpression	mb_type < 5		1902665	0		<			
ANR	1902971	Identifier	mb_type		1902665	0					
ANR	1902972	PrimaryExpression	5		1902665	1					
ANR	1902973	CompoundStatement		91:23:1655:1655	1902665	1					
ANR	1902974	ExpressionStatement	partition_count = p_mb_type_info [ mb_type ] . partition_count	93:12:1713:1769	1902665	0	True				
ANR	1902975	AssignmentExpression	partition_count = p_mb_type_info [ mb_type ] . partition_count		1902665	0		=			
ANR	1902976	Identifier	partition_count		1902665	0					
ANR	1902977	MemberAccess	p_mb_type_info [ mb_type ] . partition_count		1902665	1					
ANR	1902978	ArrayIndexing	p_mb_type_info [ mb_type ]		1902665	0					
ANR	1902979	Identifier	p_mb_type_info		1902665	0					
ANR	1902980	Identifier	mb_type		1902665	1					
ANR	1902981	Identifier	partition_count		1902665	1					
ANR	1902982	ExpressionStatement	mb_type = p_mb_type_info [ mb_type ] . type	95:12:1784:1829	1902665	1	True				
ANR	1902983	AssignmentExpression	mb_type = p_mb_type_info [ mb_type ] . type		1902665	0		=			
ANR	1902984	Identifier	mb_type		1902665	0					
ANR	1902985	MemberAccess	p_mb_type_info [ mb_type ] . type		1902665	1					
ANR	1902986	ArrayIndexing	p_mb_type_info [ mb_type ]		1902665	0					
ANR	1902987	Identifier	p_mb_type_info		1902665	0					
ANR	1902988	Identifier	mb_type		1902665	1					
ANR	1902989	Identifier	type		1902665	1					
ANR	1902990	ElseStatement	else		1902665	0					
ANR	1902991	CompoundStatement		97:13:1802:1802	1902665	0					
ANR	1902992	ExpressionStatement	mb_type -= 5	99:12:1860:1872	1902665	0	True				
ANR	1902993	AssignmentExpression	mb_type -= 5		1902665	0		-=			
ANR	1902994	Identifier	mb_type		1902665	0					
ANR	1902995	PrimaryExpression	5		1902665	1					
ANR	1902996	GotoStatement	goto decode_intra_mb ;	101:12:1887:1907	1902665	1	True				
ANR	1902997	Identifier	decode_intra_mb		1902665	0					
ANR	1902998	ElseStatement	else		1902665	0					
ANR	1902999	CompoundStatement		105:9:1887:1887	1902665	0					
ANR	1903000	ExpressionStatement	assert ( h -> slice_type == I_TYPE )	107:7:1940:1971	1902665	0	True				
ANR	1903001	CallExpression	assert ( h -> slice_type == I_TYPE )		1902665	0					
ANR	1903002	Callee	assert		1902665	0					
ANR	1903003	Identifier	assert		1902665	0					
ANR	1903004	ArgumentList	h -> slice_type == I_TYPE		1902665	1					
ANR	1903005	Argument	h -> slice_type == I_TYPE		1902665	0					
ANR	1903006	EqualityExpression	h -> slice_type == I_TYPE		1902665	0		==			
ANR	1903007	PtrMemberAccess	h -> slice_type		1902665	0					
ANR	1903008	Identifier	h		1902665	0					
ANR	1903009	Identifier	slice_type		1902665	1					
ANR	1903010	Identifier	I_TYPE		1902665	1					
ANR	1903011	Label	decode_intra_mb :	109:0:1974:1989	1902665	1	True				
ANR	1903012	Identifier	decode_intra_mb		1902665	0					
ANR	1903013	IfStatement	if ( mb_type > 25 )		1902665	2					
ANR	1903014	Condition	mb_type > 25	111:11:2003:2014	1902665	0	True				
ANR	1903015	RelationalExpression	mb_type > 25		1902665	0		>			
ANR	1903016	Identifier	mb_type		1902665	0					
ANR	1903017	PrimaryExpression	25		1902665	1					
ANR	1903018	CompoundStatement		111:24:1973:1973	1902665	1					
ANR	1903019	ExpressionStatement	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""mb_type %d in %c slice too large at %d %d\\n"" , mb_type , av_get_pict_type_char ( h -> slice_type ) , s -> mb_x , s -> mb_y )"	113:12:2031:2175	1902665	0	True				
ANR	1903020	CallExpression	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""mb_type %d in %c slice too large at %d %d\\n"" , mb_type , av_get_pict_type_char ( h -> slice_type ) , s -> mb_x , s -> mb_y )"		1902665	0					
ANR	1903021	Callee	av_log		1902665	0					
ANR	1903022	Identifier	av_log		1902665	0					
ANR	1903023	ArgumentList	h -> s . avctx		1902665	1					
ANR	1903024	Argument	h -> s . avctx		1902665	0					
ANR	1903025	MemberAccess	h -> s . avctx		1902665	0					
ANR	1903026	PtrMemberAccess	h -> s		1902665	0					
ANR	1903027	Identifier	h		1902665	0					
ANR	1903028	Identifier	s		1902665	1					
ANR	1903029	Identifier	avctx		1902665	1					
ANR	1903030	Argument	AV_LOG_ERROR		1902665	1					
ANR	1903031	Identifier	AV_LOG_ERROR		1902665	0					
ANR	1903032	Argument	"""mb_type %d in %c slice too large at %d %d\\n"""		1902665	2					
ANR	1903033	PrimaryExpression	"""mb_type %d in %c slice too large at %d %d\\n"""		1902665	0					
ANR	1903034	Argument	mb_type		1902665	3					
ANR	1903035	Identifier	mb_type		1902665	0					
ANR	1903036	Argument	av_get_pict_type_char ( h -> slice_type )		1902665	4					
ANR	1903037	CallExpression	av_get_pict_type_char ( h -> slice_type )		1902665	0					
ANR	1903038	Callee	av_get_pict_type_char		1902665	0					
ANR	1903039	Identifier	av_get_pict_type_char		1902665	0					
ANR	1903040	ArgumentList	h -> slice_type		1902665	1					
ANR	1903041	Argument	h -> slice_type		1902665	0					
ANR	1903042	PtrMemberAccess	h -> slice_type		1902665	0					
ANR	1903043	Identifier	h		1902665	0					
ANR	1903044	Identifier	slice_type		1902665	1					
ANR	1903045	Argument	s -> mb_x		1902665	5					
ANR	1903046	PtrMemberAccess	s -> mb_x		1902665	0					
ANR	1903047	Identifier	s		1902665	0					
ANR	1903048	Identifier	mb_x		1902665	1					
ANR	1903049	Argument	s -> mb_y		1902665	6					
ANR	1903050	PtrMemberAccess	s -> mb_y		1902665	0					
ANR	1903051	Identifier	s		1902665	0					
ANR	1903052	Identifier	mb_y		1902665	1					
ANR	1903053	ReturnStatement	return - 1 ;	115:12:2190:2199	1902665	1	True				
ANR	1903054	UnaryOperationExpression	- 1		1902665	0					
ANR	1903055	UnaryOperator	-		1902665	0					
ANR	1903056	PrimaryExpression	1		1902665	1					
ANR	1903057	ExpressionStatement	partition_count = 0	119:8:2221:2238	1902665	3	True				
ANR	1903058	AssignmentExpression	partition_count = 0		1902665	0		=			
ANR	1903059	Identifier	partition_count		1902665	0					
ANR	1903060	PrimaryExpression	0		1902665	1					
ANR	1903061	ExpressionStatement	cbp = i_mb_type_info [ mb_type ] . cbp	121:8:2249:2281	1902665	4	True				
ANR	1903062	AssignmentExpression	cbp = i_mb_type_info [ mb_type ] . cbp		1902665	0		=			
ANR	1903063	Identifier	cbp		1902665	0					
ANR	1903064	MemberAccess	i_mb_type_info [ mb_type ] . cbp		1902665	1					
ANR	1903065	ArrayIndexing	i_mb_type_info [ mb_type ]		1902665	0					
ANR	1903066	Identifier	i_mb_type_info		1902665	0					
ANR	1903067	Identifier	mb_type		1902665	1					
ANR	1903068	Identifier	cbp		1902665	1					
ANR	1903069	ExpressionStatement	h -> intra16x16_pred_mode = i_mb_type_info [ mb_type ] . pred_mode	123:8:2292:2350	1902665	5	True				
ANR	1903070	AssignmentExpression	h -> intra16x16_pred_mode = i_mb_type_info [ mb_type ] . pred_mode		1902665	0		=			
ANR	1903071	PtrMemberAccess	h -> intra16x16_pred_mode		1902665	0					
ANR	1903072	Identifier	h		1902665	0					
ANR	1903073	Identifier	intra16x16_pred_mode		1902665	1					
ANR	1903074	MemberAccess	i_mb_type_info [ mb_type ] . pred_mode		1902665	1					
ANR	1903075	ArrayIndexing	i_mb_type_info [ mb_type ]		1902665	0					
ANR	1903076	Identifier	i_mb_type_info		1902665	0					
ANR	1903077	Identifier	mb_type		1902665	1					
ANR	1903078	Identifier	pred_mode		1902665	1					
ANR	1903079	ExpressionStatement	mb_type = i_mb_type_info [ mb_type ] . type	125:8:2361:2398	1902665	6	True				
ANR	1903080	AssignmentExpression	mb_type = i_mb_type_info [ mb_type ] . type		1902665	0		=			
ANR	1903081	Identifier	mb_type		1902665	0					
ANR	1903082	MemberAccess	i_mb_type_info [ mb_type ] . type		1902665	1					
ANR	1903083	ArrayIndexing	i_mb_type_info [ mb_type ]		1902665	0					
ANR	1903084	Identifier	i_mb_type_info		1902665	0					
ANR	1903085	Identifier	mb_type		1902665	1					
ANR	1903086	Identifier	type		1902665	1					
ANR	1903087	IfStatement	if ( MB_FIELD )		1902665	16					
ANR	1903088	Condition	MB_FIELD	131:7:2417:2424	1902665	0	True				
ANR	1903089	Identifier	MB_FIELD		1902665	0					
ANR	1903090	ExpressionStatement	mb_type |= MB_TYPE_INTERLACED	133:8:2436:2465	1902665	1	True				
ANR	1903091	AssignmentExpression	mb_type |= MB_TYPE_INTERLACED		1902665	0		|=			
ANR	1903092	Identifier	mb_type		1902665	0					
ANR	1903093	Identifier	MB_TYPE_INTERLACED		1902665	1					
ANR	1903094	ExpressionStatement	h -> slice_table [ mb_xy ] = h -> slice_num	137:4:2474:2511	1902665	17	True				
ANR	1903095	AssignmentExpression	h -> slice_table [ mb_xy ] = h -> slice_num		1902665	0		=			
ANR	1903096	ArrayIndexing	h -> slice_table [ mb_xy ]		1902665	0					
ANR	1903097	PtrMemberAccess	h -> slice_table		1902665	0					
ANR	1903098	Identifier	h		1902665	0					
ANR	1903099	Identifier	slice_table		1902665	1					
ANR	1903100	Identifier	mb_xy		1902665	1					
ANR	1903101	PtrMemberAccess	h -> slice_num		1902665	1					
ANR	1903102	Identifier	h		1902665	0					
ANR	1903103	Identifier	slice_num		1902665	1					
ANR	1903104	IfStatement	if ( IS_INTRA_PCM ( mb_type ) )		1902665	18					
ANR	1903105	Condition	IS_INTRA_PCM ( mb_type )	141:7:2523:2543	1902665	0	True				
ANR	1903106	CallExpression	IS_INTRA_PCM ( mb_type )		1902665	0					
ANR	1903107	Callee	IS_INTRA_PCM		1902665	0					
ANR	1903108	Identifier	IS_INTRA_PCM		1902665	0					
ANR	1903109	ArgumentList	mb_type		1902665	1					
ANR	1903110	Argument	mb_type		1902665	0					
ANR	1903111	Identifier	mb_type		1902665	0					
ANR	1903112	CompoundStatement		143:8:2513:2530	1902665	1					
ANR	1903113	IdentifierDeclStatement	"unsigned int x , y ;"	143:8:2556:2573	1902665	0	True				
ANR	1903114	IdentifierDecl	x		1902665	0					
ANR	1903115	IdentifierDeclType	unsigned int		1902665	0					
ANR	1903116	Identifier	x		1902665	1					
ANR	1903117	IdentifierDecl	y		1902665	1					
ANR	1903118	IdentifierDeclType	unsigned int		1902665	0					
ANR	1903119	Identifier	y		1902665	1					
ANR	1903120	ExpressionStatement	align_get_bits ( & s -> gb )	149:8:2661:2683	1902665	1	True				
ANR	1903121	CallExpression	align_get_bits ( & s -> gb )		1902665	0					
ANR	1903122	Callee	align_get_bits		1902665	0					
ANR	1903123	Identifier	align_get_bits		1902665	0					
ANR	1903124	ArgumentList	& s -> gb		1902665	1					
ANR	1903125	Argument	& s -> gb		1902665	0					
ANR	1903126	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903127	UnaryOperator	&		1902665	0					
ANR	1903128	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903129	Identifier	s		1902665	0					
ANR	1903130	Identifier	gb		1902665	1					
ANR	1903131	ForStatement	for ( y = 0 ; y < 16 ; y ++ )		1902665	2					
ANR	1903132	ForInit	y = 0 ;	155:12:2778:2781	1902665	0	True				
ANR	1903133	AssignmentExpression	y = 0		1902665	0		=			
ANR	1903134	Identifier	y		1902665	0					
ANR	1903135	PrimaryExpression	0		1902665	1					
ANR	1903136	Condition	y < 16	155:17:2783:2786	1902665	1	True				
ANR	1903137	RelationalExpression	y < 16		1902665	0		<			
ANR	1903138	Identifier	y		1902665	0					
ANR	1903139	PrimaryExpression	16		1902665	1					
ANR	1903140	PostIncDecOperationExpression	y ++	155:23:2789:2791	1902665	2	True				
ANR	1903141	Identifier	y		1902665	0					
ANR	1903142	IncDec	++		1902665	1					
ANR	1903143	CompoundStatement		157:12:2765:2818	1902665	3					
ANR	1903144	IdentifierDeclStatement	const int index = 4 * ( y & 3 ) + 32 * ( ( y >> 2 ) & 1 ) + 128 * ( y >> 3 ) ;	157:12:2808:2861	1902665	0	True				
ANR	1903145	IdentifierDecl	index = 4 * ( y & 3 ) + 32 * ( ( y >> 2 ) & 1 ) + 128 * ( y >> 3 )		1902665	0					
ANR	1903146	IdentifierDeclType	const int		1902665	0					
ANR	1903147	Identifier	index		1902665	1					
ANR	1903148	AssignmentExpression	index = 4 * ( y & 3 ) + 32 * ( ( y >> 2 ) & 1 ) + 128 * ( y >> 3 )		1902665	2		=			
ANR	1903149	Identifier	index		1902665	0					
ANR	1903150	AdditiveExpression	4 * ( y & 3 ) + 32 * ( ( y >> 2 ) & 1 ) + 128 * ( y >> 3 )		1902665	1		+			
ANR	1903151	MultiplicativeExpression	4 * ( y & 3 )		1902665	0		*			
ANR	1903152	PrimaryExpression	4		1902665	0					
ANR	1903153	BitAndExpression	y & 3		1902665	1		&			
ANR	1903154	Identifier	y		1902665	0					
ANR	1903155	PrimaryExpression	3		1902665	1					
ANR	1903156	AdditiveExpression	32 * ( ( y >> 2 ) & 1 ) + 128 * ( y >> 3 )		1902665	1		+			
ANR	1903157	MultiplicativeExpression	32 * ( ( y >> 2 ) & 1 )		1902665	0		*			
ANR	1903158	PrimaryExpression	32		1902665	0					
ANR	1903159	BitAndExpression	( y >> 2 ) & 1		1902665	1		&			
ANR	1903160	ShiftExpression	y >> 2		1902665	0		>>			
ANR	1903161	Identifier	y		1902665	0					
ANR	1903162	PrimaryExpression	2		1902665	1					
ANR	1903163	PrimaryExpression	1		1902665	1					
ANR	1903164	MultiplicativeExpression	128 * ( y >> 3 )		1902665	1		*			
ANR	1903165	PrimaryExpression	128		1902665	0					
ANR	1903166	ShiftExpression	y >> 3		1902665	1		>>			
ANR	1903167	Identifier	y		1902665	0					
ANR	1903168	PrimaryExpression	3		1902665	1					
ANR	1903169	ForStatement	for ( x = 0 ; x < 16 ; x ++ )		1902665	1					
ANR	1903170	ForInit	x = 0 ;	159:16:2880:2883	1902665	0	True				
ANR	1903171	AssignmentExpression	x = 0		1902665	0		=			
ANR	1903172	Identifier	x		1902665	0					
ANR	1903173	PrimaryExpression	0		1902665	1					
ANR	1903174	Condition	x < 16	159:21:2885:2888	1902665	1	True				
ANR	1903175	RelationalExpression	x < 16		1902665	0		<			
ANR	1903176	Identifier	x		1902665	0					
ANR	1903177	PrimaryExpression	16		1902665	1					
ANR	1903178	PostIncDecOperationExpression	x ++	159:27:2891:2893	1902665	2	True				
ANR	1903179	Identifier	x		1902665	0					
ANR	1903180	IncDec	++		1902665	1					
ANR	1903181	CompoundStatement		159:31:2852:2852	1902665	3					
ANR	1903182	ExpressionStatement	"tprintf ( s -> avctx , ""LUMA ICPM LEVEL (%3d)\\n"" , show_bits ( & s -> gb , 8 ) )"	161:16:2914:2980	1902665	0	True				
ANR	1903183	CallExpression	"tprintf ( s -> avctx , ""LUMA ICPM LEVEL (%3d)\\n"" , show_bits ( & s -> gb , 8 ) )"		1902665	0					
ANR	1903184	Callee	tprintf		1902665	0					
ANR	1903185	Identifier	tprintf		1902665	0					
ANR	1903186	ArgumentList	s -> avctx		1902665	1					
ANR	1903187	Argument	s -> avctx		1902665	0					
ANR	1903188	PtrMemberAccess	s -> avctx		1902665	0					
ANR	1903189	Identifier	s		1902665	0					
ANR	1903190	Identifier	avctx		1902665	1					
ANR	1903191	Argument	"""LUMA ICPM LEVEL (%3d)\\n"""		1902665	1					
ANR	1903192	PrimaryExpression	"""LUMA ICPM LEVEL (%3d)\\n"""		1902665	0					
ANR	1903193	Argument	"show_bits ( & s -> gb , 8 )"		1902665	2					
ANR	1903194	CallExpression	"show_bits ( & s -> gb , 8 )"		1902665	0					
ANR	1903195	Callee	show_bits		1902665	0					
ANR	1903196	Identifier	show_bits		1902665	0					
ANR	1903197	ArgumentList	& s -> gb		1902665	1					
ANR	1903198	Argument	& s -> gb		1902665	0					
ANR	1903199	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903200	UnaryOperator	&		1902665	0					
ANR	1903201	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903202	Identifier	s		1902665	0					
ANR	1903203	Identifier	gb		1902665	1					
ANR	1903204	Argument	8		1902665	1					
ANR	1903205	PrimaryExpression	8		1902665	0					
ANR	1903206	ExpressionStatement	"h -> mb [ index + ( x & 3 ) + 16 * ( ( x >> 2 ) & 1 ) + 64 * ( x >> 3 ) ] = get_bits ( & s -> gb , 8 )"	163:16:2999:3068	1902665	1	True				
ANR	1903207	AssignmentExpression	"h -> mb [ index + ( x & 3 ) + 16 * ( ( x >> 2 ) & 1 ) + 64 * ( x >> 3 ) ] = get_bits ( & s -> gb , 8 )"		1902665	0		=			
ANR	1903208	ArrayIndexing	h -> mb [ index + ( x & 3 ) + 16 * ( ( x >> 2 ) & 1 ) + 64 * ( x >> 3 ) ]		1902665	0					
ANR	1903209	PtrMemberAccess	h -> mb		1902665	0					
ANR	1903210	Identifier	h		1902665	0					
ANR	1903211	Identifier	mb		1902665	1					
ANR	1903212	AdditiveExpression	index + ( x & 3 ) + 16 * ( ( x >> 2 ) & 1 ) + 64 * ( x >> 3 )		1902665	1		+			
ANR	1903213	Identifier	index		1902665	0					
ANR	1903214	AdditiveExpression	( x & 3 ) + 16 * ( ( x >> 2 ) & 1 ) + 64 * ( x >> 3 )		1902665	1		+			
ANR	1903215	BitAndExpression	x & 3		1902665	0		&			
ANR	1903216	Identifier	x		1902665	0					
ANR	1903217	PrimaryExpression	3		1902665	1					
ANR	1903218	AdditiveExpression	16 * ( ( x >> 2 ) & 1 ) + 64 * ( x >> 3 )		1902665	1		+			
ANR	1903219	MultiplicativeExpression	16 * ( ( x >> 2 ) & 1 )		1902665	0		*			
ANR	1903220	PrimaryExpression	16		1902665	0					
ANR	1903221	BitAndExpression	( x >> 2 ) & 1		1902665	1		&			
ANR	1903222	ShiftExpression	x >> 2		1902665	0		>>			
ANR	1903223	Identifier	x		1902665	0					
ANR	1903224	PrimaryExpression	2		1902665	1					
ANR	1903225	PrimaryExpression	1		1902665	1					
ANR	1903226	MultiplicativeExpression	64 * ( x >> 3 )		1902665	1		*			
ANR	1903227	PrimaryExpression	64		1902665	0					
ANR	1903228	ShiftExpression	x >> 3		1902665	1		>>			
ANR	1903229	Identifier	x		1902665	0					
ANR	1903230	PrimaryExpression	3		1902665	1					
ANR	1903231	CallExpression	"get_bits ( & s -> gb , 8 )"		1902665	1					
ANR	1903232	Callee	get_bits		1902665	0					
ANR	1903233	Identifier	get_bits		1902665	0					
ANR	1903234	ArgumentList	& s -> gb		1902665	1					
ANR	1903235	Argument	& s -> gb		1902665	0					
ANR	1903236	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903237	UnaryOperator	&		1902665	0					
ANR	1903238	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903239	Identifier	s		1902665	0					
ANR	1903240	Identifier	gb		1902665	1					
ANR	1903241	Argument	8		1902665	1					
ANR	1903242	PrimaryExpression	8		1902665	0					
ANR	1903243	ForStatement	for ( y = 0 ; y < 8 ; y ++ )		1902665	3					
ANR	1903244	ForInit	y = 0 ;	169:12:3109:3112	1902665	0	True				
ANR	1903245	AssignmentExpression	y = 0		1902665	0		=			
ANR	1903246	Identifier	y		1902665	0					
ANR	1903247	PrimaryExpression	0		1902665	1					
ANR	1903248	Condition	y < 8	169:17:3114:3116	1902665	1	True				
ANR	1903249	RelationalExpression	y < 8		1902665	0		<			
ANR	1903250	Identifier	y		1902665	0					
ANR	1903251	PrimaryExpression	8		1902665	1					
ANR	1903252	PostIncDecOperationExpression	y ++	169:22:3119:3121	1902665	2	True				
ANR	1903253	Identifier	y		1902665	0					
ANR	1903254	IncDec	++		1902665	1					
ANR	1903255	CompoundStatement		171:12:3095:3137	1902665	3					
ANR	1903256	IdentifierDeclStatement	const int index = 256 + 4 * ( y & 3 ) + 32 * ( y >> 2 ) ;	171:12:3138:3180	1902665	0	True				
ANR	1903257	IdentifierDecl	index = 256 + 4 * ( y & 3 ) + 32 * ( y >> 2 )		1902665	0					
ANR	1903258	IdentifierDeclType	const int		1902665	0					
ANR	1903259	Identifier	index		1902665	1					
ANR	1903260	AssignmentExpression	index = 256 + 4 * ( y & 3 ) + 32 * ( y >> 2 )		1902665	2		=			
ANR	1903261	Identifier	index		1902665	0					
ANR	1903262	AdditiveExpression	256 + 4 * ( y & 3 ) + 32 * ( y >> 2 )		1902665	1		+			
ANR	1903263	PrimaryExpression	256		1902665	0					
ANR	1903264	AdditiveExpression	4 * ( y & 3 ) + 32 * ( y >> 2 )		1902665	1		+			
ANR	1903265	MultiplicativeExpression	4 * ( y & 3 )		1902665	0		*			
ANR	1903266	PrimaryExpression	4		1902665	0					
ANR	1903267	BitAndExpression	y & 3		1902665	1		&			
ANR	1903268	Identifier	y		1902665	0					
ANR	1903269	PrimaryExpression	3		1902665	1					
ANR	1903270	MultiplicativeExpression	32 * ( y >> 2 )		1902665	1		*			
ANR	1903271	PrimaryExpression	32		1902665	0					
ANR	1903272	ShiftExpression	y >> 2		1902665	1		>>			
ANR	1903273	Identifier	y		1902665	0					
ANR	1903274	PrimaryExpression	2		1902665	1					
ANR	1903275	ForStatement	for ( x = 0 ; x < 8 ; x ++ )		1902665	1					
ANR	1903276	ForInit	x = 0 ;	173:16:3199:3202	1902665	0	True				
ANR	1903277	AssignmentExpression	x = 0		1902665	0		=			
ANR	1903278	Identifier	x		1902665	0					
ANR	1903279	PrimaryExpression	0		1902665	1					
ANR	1903280	Condition	x < 8	173:21:3204:3206	1902665	1	True				
ANR	1903281	RelationalExpression	x < 8		1902665	0		<			
ANR	1903282	Identifier	x		1902665	0					
ANR	1903283	PrimaryExpression	8		1902665	1					
ANR	1903284	PostIncDecOperationExpression	x ++	173:26:3209:3211	1902665	2	True				
ANR	1903285	Identifier	x		1902665	0					
ANR	1903286	IncDec	++		1902665	1					
ANR	1903287	CompoundStatement		173:30:3170:3170	1902665	3					
ANR	1903288	ExpressionStatement	"tprintf ( s -> avctx , ""CHROMA U ICPM LEVEL (%3d)\\n"" , show_bits ( & s -> gb , 8 ) )"	175:16:3232:3302	1902665	0	True				
ANR	1903289	CallExpression	"tprintf ( s -> avctx , ""CHROMA U ICPM LEVEL (%3d)\\n"" , show_bits ( & s -> gb , 8 ) )"		1902665	0					
ANR	1903290	Callee	tprintf		1902665	0					
ANR	1903291	Identifier	tprintf		1902665	0					
ANR	1903292	ArgumentList	s -> avctx		1902665	1					
ANR	1903293	Argument	s -> avctx		1902665	0					
ANR	1903294	PtrMemberAccess	s -> avctx		1902665	0					
ANR	1903295	Identifier	s		1902665	0					
ANR	1903296	Identifier	avctx		1902665	1					
ANR	1903297	Argument	"""CHROMA U ICPM LEVEL (%3d)\\n"""		1902665	1					
ANR	1903298	PrimaryExpression	"""CHROMA U ICPM LEVEL (%3d)\\n"""		1902665	0					
ANR	1903299	Argument	"show_bits ( & s -> gb , 8 )"		1902665	2					
ANR	1903300	CallExpression	"show_bits ( & s -> gb , 8 )"		1902665	0					
ANR	1903301	Callee	show_bits		1902665	0					
ANR	1903302	Identifier	show_bits		1902665	0					
ANR	1903303	ArgumentList	& s -> gb		1902665	1					
ANR	1903304	Argument	& s -> gb		1902665	0					
ANR	1903305	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903306	UnaryOperator	&		1902665	0					
ANR	1903307	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903308	Identifier	s		1902665	0					
ANR	1903309	Identifier	gb		1902665	1					
ANR	1903310	Argument	8		1902665	1					
ANR	1903311	PrimaryExpression	8		1902665	0					
ANR	1903312	ExpressionStatement	"h -> mb [ index + ( x & 3 ) + 16 * ( x >> 2 ) ] = get_bits ( & s -> gb , 8 )"	177:16:3321:3374	1902665	1	True				
ANR	1903313	AssignmentExpression	"h -> mb [ index + ( x & 3 ) + 16 * ( x >> 2 ) ] = get_bits ( & s -> gb , 8 )"		1902665	0		=			
ANR	1903314	ArrayIndexing	h -> mb [ index + ( x & 3 ) + 16 * ( x >> 2 ) ]		1902665	0					
ANR	1903315	PtrMemberAccess	h -> mb		1902665	0					
ANR	1903316	Identifier	h		1902665	0					
ANR	1903317	Identifier	mb		1902665	1					
ANR	1903318	AdditiveExpression	index + ( x & 3 ) + 16 * ( x >> 2 )		1902665	1		+			
ANR	1903319	Identifier	index		1902665	0					
ANR	1903320	AdditiveExpression	( x & 3 ) + 16 * ( x >> 2 )		1902665	1		+			
ANR	1903321	BitAndExpression	x & 3		1902665	0		&			
ANR	1903322	Identifier	x		1902665	0					
ANR	1903323	PrimaryExpression	3		1902665	1					
ANR	1903324	MultiplicativeExpression	16 * ( x >> 2 )		1902665	1		*			
ANR	1903325	PrimaryExpression	16		1902665	0					
ANR	1903326	ShiftExpression	x >> 2		1902665	1		>>			
ANR	1903327	Identifier	x		1902665	0					
ANR	1903328	PrimaryExpression	2		1902665	1					
ANR	1903329	CallExpression	"get_bits ( & s -> gb , 8 )"		1902665	1					
ANR	1903330	Callee	get_bits		1902665	0					
ANR	1903331	Identifier	get_bits		1902665	0					
ANR	1903332	ArgumentList	& s -> gb		1902665	1					
ANR	1903333	Argument	& s -> gb		1902665	0					
ANR	1903334	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903335	UnaryOperator	&		1902665	0					
ANR	1903336	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903337	Identifier	s		1902665	0					
ANR	1903338	Identifier	gb		1902665	1					
ANR	1903339	Argument	8		1902665	1					
ANR	1903340	PrimaryExpression	8		1902665	0					
ANR	1903341	ForStatement	for ( y = 0 ; y < 8 ; y ++ )		1902665	4					
ANR	1903342	ForInit	y = 0 ;	183:12:3415:3418	1902665	0	True				
ANR	1903343	AssignmentExpression	y = 0		1902665	0		=			
ANR	1903344	Identifier	y		1902665	0					
ANR	1903345	PrimaryExpression	0		1902665	1					
ANR	1903346	Condition	y < 8	183:17:3420:3422	1902665	1	True				
ANR	1903347	RelationalExpression	y < 8		1902665	0		<			
ANR	1903348	Identifier	y		1902665	0					
ANR	1903349	PrimaryExpression	8		1902665	1					
ANR	1903350	PostIncDecOperationExpression	y ++	183:22:3425:3427	1902665	2	True				
ANR	1903351	Identifier	y		1902665	0					
ANR	1903352	IncDec	++		1902665	1					
ANR	1903353	CompoundStatement		185:12:3401:3448	1902665	3					
ANR	1903354	IdentifierDeclStatement	const int index = 256 + 64 + 4 * ( y & 3 ) + 32 * ( y >> 2 ) ;	185:12:3444:3491	1902665	0	True				
ANR	1903355	IdentifierDecl	index = 256 + 64 + 4 * ( y & 3 ) + 32 * ( y >> 2 )		1902665	0					
ANR	1903356	IdentifierDeclType	const int		1902665	0					
ANR	1903357	Identifier	index		1902665	1					
ANR	1903358	AssignmentExpression	index = 256 + 64 + 4 * ( y & 3 ) + 32 * ( y >> 2 )		1902665	2		=			
ANR	1903359	Identifier	index		1902665	0					
ANR	1903360	AdditiveExpression	256 + 64 + 4 * ( y & 3 ) + 32 * ( y >> 2 )		1902665	1		+			
ANR	1903361	PrimaryExpression	256		1902665	0					
ANR	1903362	AdditiveExpression	64 + 4 * ( y & 3 ) + 32 * ( y >> 2 )		1902665	1		+			
ANR	1903363	PrimaryExpression	64		1902665	0					
ANR	1903364	AdditiveExpression	4 * ( y & 3 ) + 32 * ( y >> 2 )		1902665	1		+			
ANR	1903365	MultiplicativeExpression	4 * ( y & 3 )		1902665	0		*			
ANR	1903366	PrimaryExpression	4		1902665	0					
ANR	1903367	BitAndExpression	y & 3		1902665	1		&			
ANR	1903368	Identifier	y		1902665	0					
ANR	1903369	PrimaryExpression	3		1902665	1					
ANR	1903370	MultiplicativeExpression	32 * ( y >> 2 )		1902665	1		*			
ANR	1903371	PrimaryExpression	32		1902665	0					
ANR	1903372	ShiftExpression	y >> 2		1902665	1		>>			
ANR	1903373	Identifier	y		1902665	0					
ANR	1903374	PrimaryExpression	2		1902665	1					
ANR	1903375	ForStatement	for ( x = 0 ; x < 8 ; x ++ )		1902665	1					
ANR	1903376	ForInit	x = 0 ;	187:16:3510:3513	1902665	0	True				
ANR	1903377	AssignmentExpression	x = 0		1902665	0		=			
ANR	1903378	Identifier	x		1902665	0					
ANR	1903379	PrimaryExpression	0		1902665	1					
ANR	1903380	Condition	x < 8	187:21:3515:3517	1902665	1	True				
ANR	1903381	RelationalExpression	x < 8		1902665	0		<			
ANR	1903382	Identifier	x		1902665	0					
ANR	1903383	PrimaryExpression	8		1902665	1					
ANR	1903384	PostIncDecOperationExpression	x ++	187:26:3520:3522	1902665	2	True				
ANR	1903385	Identifier	x		1902665	0					
ANR	1903386	IncDec	++		1902665	1					
ANR	1903387	CompoundStatement		187:30:3481:3481	1902665	3					
ANR	1903388	ExpressionStatement	"tprintf ( s -> avctx , ""CHROMA V ICPM LEVEL (%3d)\\n"" , show_bits ( & s -> gb , 8 ) )"	189:16:3543:3613	1902665	0	True				
ANR	1903389	CallExpression	"tprintf ( s -> avctx , ""CHROMA V ICPM LEVEL (%3d)\\n"" , show_bits ( & s -> gb , 8 ) )"		1902665	0					
ANR	1903390	Callee	tprintf		1902665	0					
ANR	1903391	Identifier	tprintf		1902665	0					
ANR	1903392	ArgumentList	s -> avctx		1902665	1					
ANR	1903393	Argument	s -> avctx		1902665	0					
ANR	1903394	PtrMemberAccess	s -> avctx		1902665	0					
ANR	1903395	Identifier	s		1902665	0					
ANR	1903396	Identifier	avctx		1902665	1					
ANR	1903397	Argument	"""CHROMA V ICPM LEVEL (%3d)\\n"""		1902665	1					
ANR	1903398	PrimaryExpression	"""CHROMA V ICPM LEVEL (%3d)\\n"""		1902665	0					
ANR	1903399	Argument	"show_bits ( & s -> gb , 8 )"		1902665	2					
ANR	1903400	CallExpression	"show_bits ( & s -> gb , 8 )"		1902665	0					
ANR	1903401	Callee	show_bits		1902665	0					
ANR	1903402	Identifier	show_bits		1902665	0					
ANR	1903403	ArgumentList	& s -> gb		1902665	1					
ANR	1903404	Argument	& s -> gb		1902665	0					
ANR	1903405	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903406	UnaryOperator	&		1902665	0					
ANR	1903407	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903408	Identifier	s		1902665	0					
ANR	1903409	Identifier	gb		1902665	1					
ANR	1903410	Argument	8		1902665	1					
ANR	1903411	PrimaryExpression	8		1902665	0					
ANR	1903412	ExpressionStatement	"h -> mb [ index + ( x & 3 ) + 16 * ( x >> 2 ) ] = get_bits ( & s -> gb , 8 )"	191:16:3632:3685	1902665	1	True				
ANR	1903413	AssignmentExpression	"h -> mb [ index + ( x & 3 ) + 16 * ( x >> 2 ) ] = get_bits ( & s -> gb , 8 )"		1902665	0		=			
ANR	1903414	ArrayIndexing	h -> mb [ index + ( x & 3 ) + 16 * ( x >> 2 ) ]		1902665	0					
ANR	1903415	PtrMemberAccess	h -> mb		1902665	0					
ANR	1903416	Identifier	h		1902665	0					
ANR	1903417	Identifier	mb		1902665	1					
ANR	1903418	AdditiveExpression	index + ( x & 3 ) + 16 * ( x >> 2 )		1902665	1		+			
ANR	1903419	Identifier	index		1902665	0					
ANR	1903420	AdditiveExpression	( x & 3 ) + 16 * ( x >> 2 )		1902665	1		+			
ANR	1903421	BitAndExpression	x & 3		1902665	0		&			
ANR	1903422	Identifier	x		1902665	0					
ANR	1903423	PrimaryExpression	3		1902665	1					
ANR	1903424	MultiplicativeExpression	16 * ( x >> 2 )		1902665	1		*			
ANR	1903425	PrimaryExpression	16		1902665	0					
ANR	1903426	ShiftExpression	x >> 2		1902665	1		>>			
ANR	1903427	Identifier	x		1902665	0					
ANR	1903428	PrimaryExpression	2		1902665	1					
ANR	1903429	CallExpression	"get_bits ( & s -> gb , 8 )"		1902665	1					
ANR	1903430	Callee	get_bits		1902665	0					
ANR	1903431	Identifier	get_bits		1902665	0					
ANR	1903432	ArgumentList	& s -> gb		1902665	1					
ANR	1903433	Argument	& s -> gb		1902665	0					
ANR	1903434	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903435	UnaryOperator	&		1902665	0					
ANR	1903436	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903437	Identifier	s		1902665	0					
ANR	1903438	Identifier	gb		1902665	1					
ANR	1903439	Argument	8		1902665	1					
ANR	1903440	PrimaryExpression	8		1902665	0					
ANR	1903441	ExpressionStatement	s -> current_picture . qscale_table [ mb_xy ] = 0	201:8:3770:3811	1902665	5	True				
ANR	1903442	AssignmentExpression	s -> current_picture . qscale_table [ mb_xy ] = 0		1902665	0		=			
ANR	1903443	ArrayIndexing	s -> current_picture . qscale_table [ mb_xy ]		1902665	0					
ANR	1903444	MemberAccess	s -> current_picture . qscale_table		1902665	0					
ANR	1903445	PtrMemberAccess	s -> current_picture		1902665	0					
ANR	1903446	Identifier	s		1902665	0					
ANR	1903447	Identifier	current_picture		1902665	1					
ANR	1903448	Identifier	qscale_table		1902665	1					
ANR	1903449	Identifier	mb_xy		1902665	1					
ANR	1903450	PrimaryExpression	0		1902665	1					
ANR	1903451	ExpressionStatement	"h -> chroma_qp = get_chroma_qp ( h -> pps . chroma_qp_index_offset , 0 )"	203:8:3822:3884	1902665	6	True				
ANR	1903452	AssignmentExpression	"h -> chroma_qp = get_chroma_qp ( h -> pps . chroma_qp_index_offset , 0 )"		1902665	0		=			
ANR	1903453	PtrMemberAccess	h -> chroma_qp		1902665	0					
ANR	1903454	Identifier	h		1902665	0					
ANR	1903455	Identifier	chroma_qp		1902665	1					
ANR	1903456	CallExpression	"get_chroma_qp ( h -> pps . chroma_qp_index_offset , 0 )"		1902665	1					
ANR	1903457	Callee	get_chroma_qp		1902665	0					
ANR	1903458	Identifier	get_chroma_qp		1902665	0					
ANR	1903459	ArgumentList	h -> pps . chroma_qp_index_offset		1902665	1					
ANR	1903460	Argument	h -> pps . chroma_qp_index_offset		1902665	0					
ANR	1903461	MemberAccess	h -> pps . chroma_qp_index_offset		1902665	0					
ANR	1903462	PtrMemberAccess	h -> pps		1902665	0					
ANR	1903463	Identifier	h		1902665	0					
ANR	1903464	Identifier	pps		1902665	1					
ANR	1903465	Identifier	chroma_qp_index_offset		1902665	1					
ANR	1903466	Argument	0		1902665	1					
ANR	1903467	PrimaryExpression	0		1902665	0					
ANR	1903468	ExpressionStatement	"memset ( h -> non_zero_count [ mb_xy ] , 16 , 16 )"	207:8:3930:3970	1902665	7	True				
ANR	1903469	CallExpression	"memset ( h -> non_zero_count [ mb_xy ] , 16 , 16 )"		1902665	0					
ANR	1903470	Callee	memset		1902665	0					
ANR	1903471	Identifier	memset		1902665	0					
ANR	1903472	ArgumentList	h -> non_zero_count [ mb_xy ]		1902665	1					
ANR	1903473	Argument	h -> non_zero_count [ mb_xy ]		1902665	0					
ANR	1903474	ArrayIndexing	h -> non_zero_count [ mb_xy ]		1902665	0					
ANR	1903475	PtrMemberAccess	h -> non_zero_count		1902665	0					
ANR	1903476	Identifier	h		1902665	0					
ANR	1903477	Identifier	non_zero_count		1902665	1					
ANR	1903478	Identifier	mb_xy		1902665	1					
ANR	1903479	Argument	16		1902665	1					
ANR	1903480	PrimaryExpression	16		1902665	0					
ANR	1903481	Argument	16		1902665	2					
ANR	1903482	PrimaryExpression	16		1902665	0					
ANR	1903483	ExpressionStatement	s -> current_picture . mb_type [ mb_xy ] = mb_type	211:8:3983:4025	1902665	8	True				
ANR	1903484	AssignmentExpression	s -> current_picture . mb_type [ mb_xy ] = mb_type		1902665	0		=			
ANR	1903485	ArrayIndexing	s -> current_picture . mb_type [ mb_xy ]		1902665	0					
ANR	1903486	MemberAccess	s -> current_picture . mb_type		1902665	0					
ANR	1903487	PtrMemberAccess	s -> current_picture		1902665	0					
ANR	1903488	Identifier	s		1902665	0					
ANR	1903489	Identifier	current_picture		1902665	1					
ANR	1903490	Identifier	mb_type		1902665	1					
ANR	1903491	Identifier	mb_xy		1902665	1					
ANR	1903492	Identifier	mb_type		1902665	1					
ANR	1903493	ReturnStatement	return 0 ;	213:8:4036:4044	1902665	9	True				
ANR	1903494	PrimaryExpression	0		1902665	0					
ANR	1903495	IfStatement	if ( MB_MBAFF )		1902665	19					
ANR	1903496	Condition	MB_MBAFF	219:7:4063:4070	1902665	0	True				
ANR	1903497	Identifier	MB_MBAFF		1902665	0					
ANR	1903498	CompoundStatement		219:16:4029:4029	1902665	1					
ANR	1903499	ExpressionStatement	h -> ref_count [ 0 ] <<= 1	221:8:4083:4104	1902665	0	True				
ANR	1903500	AssignmentExpression	h -> ref_count [ 0 ] <<= 1		1902665	0		<<=			
ANR	1903501	ArrayIndexing	h -> ref_count [ 0 ]		1902665	0					
ANR	1903502	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1903503	Identifier	h		1902665	0					
ANR	1903504	Identifier	ref_count		1902665	1					
ANR	1903505	PrimaryExpression	0		1902665	1					
ANR	1903506	PrimaryExpression	1		1902665	1					
ANR	1903507	ExpressionStatement	h -> ref_count [ 1 ] <<= 1	223:8:4115:4136	1902665	1	True				
ANR	1903508	AssignmentExpression	h -> ref_count [ 1 ] <<= 1		1902665	0		<<=			
ANR	1903509	ArrayIndexing	h -> ref_count [ 1 ]		1902665	0					
ANR	1903510	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1903511	Identifier	h		1902665	0					
ANR	1903512	Identifier	ref_count		1902665	1					
ANR	1903513	PrimaryExpression	1		1902665	1					
ANR	1903514	PrimaryExpression	1		1902665	1					
ANR	1903515	ExpressionStatement	"fill_caches ( h , mb_type , 0 )"	229:4:4152:4178	1902665	20	True				
ANR	1903516	CallExpression	"fill_caches ( h , mb_type , 0 )"		1902665	0					
ANR	1903517	Callee	fill_caches		1902665	0					
ANR	1903518	Identifier	fill_caches		1902665	0					
ANR	1903519	ArgumentList	h		1902665	1					
ANR	1903520	Argument	h		1902665	0					
ANR	1903521	Identifier	h		1902665	0					
ANR	1903522	Argument	mb_type		1902665	1					
ANR	1903523	Identifier	mb_type		1902665	0					
ANR	1903524	Argument	0		1902665	2					
ANR	1903525	PrimaryExpression	0		1902665	0					
ANR	1903526	IfStatement	if ( IS_INTRA ( mb_type ) )		1902665	21					
ANR	1903527	Condition	IS_INTRA ( mb_type )	235:7:4205:4221	1902665	0	True				
ANR	1903528	CallExpression	IS_INTRA ( mb_type )		1902665	0					
ANR	1903529	Callee	IS_INTRA		1902665	0					
ANR	1903530	Identifier	IS_INTRA		1902665	0					
ANR	1903531	ArgumentList	mb_type		1902665	1					
ANR	1903532	Argument	mb_type		1902665	0					
ANR	1903533	Identifier	mb_type		1902665	0					
ANR	1903534	CompoundStatement		237:12:4195:4208	1902665	1					
ANR	1903535	IdentifierDeclStatement	int pred_mode ;	237:12:4238:4251	1902665	0	True				
ANR	1903536	IdentifierDecl	pred_mode		1902665	0					
ANR	1903537	IdentifierDeclType	int		1902665	0					
ANR	1903538	Identifier	pred_mode		1902665	1					
ANR	1903539	IfStatement	if ( IS_INTRA4x4 ( mb_type ) )		1902665	1					
ANR	1903540	Condition	IS_INTRA4x4 ( mb_type )	241:15:4315:4334	1902665	0	True				
ANR	1903541	CallExpression	IS_INTRA4x4 ( mb_type )		1902665	0					
ANR	1903542	Callee	IS_INTRA4x4		1902665	0					
ANR	1903543	Identifier	IS_INTRA4x4		1902665	0					
ANR	1903544	ArgumentList	mb_type		1902665	1					
ANR	1903545	Argument	mb_type		1902665	0					
ANR	1903546	Identifier	mb_type		1902665	0					
ANR	1903547	CompoundStatement		245:16:4336:4346	1902665	1					
ANR	1903548	IdentifierDeclStatement	int i ;	243:16:4355:4360	1902665	0	True				
ANR	1903549	IdentifierDecl	i		1902665	0					
ANR	1903550	IdentifierDeclType	int		1902665	0					
ANR	1903551	Identifier	i		1902665	1					
ANR	1903552	IdentifierDeclStatement	int di = 1 ;	245:16:4379:4389	1902665	1	True				
ANR	1903553	IdentifierDecl	di = 1		1902665	0					
ANR	1903554	IdentifierDeclType	int		1902665	0					
ANR	1903555	Identifier	di		1902665	1					
ANR	1903556	AssignmentExpression	di = 1		1902665	2		=			
ANR	1903557	Identifier	di		1902665	0					
ANR	1903558	PrimaryExpression	1		1902665	1					
ANR	1903559	IfStatement	if ( dct8x8_allowed && get_bits1 ( & s -> gb ) )		1902665	2					
ANR	1903560	Condition	dct8x8_allowed && get_bits1 ( & s -> gb )	247:19:4411:4445	1902665	0	True				
ANR	1903561	AndExpression	dct8x8_allowed && get_bits1 ( & s -> gb )		1902665	0		&&			
ANR	1903562	Identifier	dct8x8_allowed		1902665	0					
ANR	1903563	CallExpression	get_bits1 ( & s -> gb )		1902665	1					
ANR	1903564	Callee	get_bits1		1902665	0					
ANR	1903565	Identifier	get_bits1		1902665	0					
ANR	1903566	ArgumentList	& s -> gb		1902665	1					
ANR	1903567	Argument	& s -> gb		1902665	0					
ANR	1903568	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903569	UnaryOperator	&		1902665	0					
ANR	1903570	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903571	Identifier	s		1902665	0					
ANR	1903572	Identifier	gb		1902665	1					
ANR	1903573	CompoundStatement		247:55:4404:4404	1902665	1					
ANR	1903574	ExpressionStatement	mb_type |= MB_TYPE_8x8DCT	249:20:4470:4495	1902665	0	True				
ANR	1903575	AssignmentExpression	mb_type |= MB_TYPE_8x8DCT		1902665	0		|=			
ANR	1903576	Identifier	mb_type		1902665	0					
ANR	1903577	Identifier	MB_TYPE_8x8DCT		1902665	1					
ANR	1903578	ExpressionStatement	di = 4	251:20:4518:4524	1902665	1	True				
ANR	1903579	AssignmentExpression	di = 4		1902665	0		=			
ANR	1903580	Identifier	di		1902665	0					
ANR	1903581	PrimaryExpression	4		1902665	1					
ANR	1903582	ForStatement	for ( i = 0 ; i < 16 ; i += di )		1902665	3					
ANR	1903583	ForInit	i = 0 ;	259:20:4616:4619	1902665	0	True				
ANR	1903584	AssignmentExpression	i = 0		1902665	0		=			
ANR	1903585	Identifier	i		1902665	0					
ANR	1903586	PrimaryExpression	0		1902665	1					
ANR	1903587	Condition	i < 16	259:25:4621:4624	1902665	1	True				
ANR	1903588	RelationalExpression	i < 16		1902665	0		<			
ANR	1903589	Identifier	i		1902665	0					
ANR	1903590	PrimaryExpression	16		1902665	1					
ANR	1903591	AssignmentExpression	i += di	259:31:4627:4631	1902665	2	True	+=			
ANR	1903592	Identifier	i		1902665	0					
ANR	1903593	Identifier	di		1902665	1					
ANR	1903594	CompoundStatement		261:20:4613:4644	1902665	3					
ANR	1903595	IdentifierDeclStatement	"int mode = pred_intra_mode ( h , i ) ;"	261:20:4656:4687	1902665	0	True				
ANR	1903596	IdentifierDecl	"mode = pred_intra_mode ( h , i )"		1902665	0					
ANR	1903597	IdentifierDeclType	int		1902665	0					
ANR	1903598	Identifier	mode		1902665	1					
ANR	1903599	AssignmentExpression	"mode = pred_intra_mode ( h , i )"		1902665	2		=			
ANR	1903600	Identifier	mode		1902665	0					
ANR	1903601	CallExpression	"pred_intra_mode ( h , i )"		1902665	1					
ANR	1903602	Callee	pred_intra_mode		1902665	0					
ANR	1903603	Identifier	pred_intra_mode		1902665	0					
ANR	1903604	ArgumentList	h		1902665	1					
ANR	1903605	Argument	h		1902665	0					
ANR	1903606	Identifier	h		1902665	0					
ANR	1903607	Argument	i		1902665	1					
ANR	1903608	Identifier	i		1902665	0					
ANR	1903609	IfStatement	if ( ! get_bits1 ( & s -> gb ) )		1902665	1					
ANR	1903610	Condition	! get_bits1 ( & s -> gb )	265:23:4715:4732	1902665	0	True				
ANR	1903611	UnaryOperationExpression	! get_bits1 ( & s -> gb )		1902665	0					
ANR	1903612	UnaryOperator	!		1902665	0					
ANR	1903613	CallExpression	get_bits1 ( & s -> gb )		1902665	1					
ANR	1903614	Callee	get_bits1		1902665	0					
ANR	1903615	Identifier	get_bits1		1902665	0					
ANR	1903616	ArgumentList	& s -> gb		1902665	1					
ANR	1903617	Argument	& s -> gb		1902665	0					
ANR	1903618	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903619	UnaryOperator	&		1902665	0					
ANR	1903620	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903621	Identifier	s		1902665	0					
ANR	1903622	Identifier	gb		1902665	1					
ANR	1903623	CompoundStatement		267:24:4718:4757	1902665	1					
ANR	1903624	IdentifierDeclStatement	"const int rem_mode = get_bits ( & s -> gb , 3 ) ;"	267:24:4761:4800	1902665	0	True				
ANR	1903625	IdentifierDecl	"rem_mode = get_bits ( & s -> gb , 3 )"		1902665	0					
ANR	1903626	IdentifierDeclType	const int		1902665	0					
ANR	1903627	Identifier	rem_mode		1902665	1					
ANR	1903628	AssignmentExpression	"rem_mode = get_bits ( & s -> gb , 3 )"		1902665	2		=			
ANR	1903629	Identifier	rem_mode		1902665	0					
ANR	1903630	CallExpression	"get_bits ( & s -> gb , 3 )"		1902665	1					
ANR	1903631	Callee	get_bits		1902665	0					
ANR	1903632	Identifier	get_bits		1902665	0					
ANR	1903633	ArgumentList	& s -> gb		1902665	1					
ANR	1903634	Argument	& s -> gb		1902665	0					
ANR	1903635	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903636	UnaryOperator	&		1902665	0					
ANR	1903637	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903638	Identifier	s		1902665	0					
ANR	1903639	Identifier	gb		1902665	1					
ANR	1903640	Argument	3		1902665	1					
ANR	1903641	PrimaryExpression	3		1902665	0					
ANR	1903642	ExpressionStatement	mode = rem_mode + ( rem_mode >= mode )	269:24:4827:4863	1902665	1	True				
ANR	1903643	AssignmentExpression	mode = rem_mode + ( rem_mode >= mode )		1902665	0		=			
ANR	1903644	Identifier	mode		1902665	0					
ANR	1903645	AdditiveExpression	rem_mode + ( rem_mode >= mode )		1902665	1		+			
ANR	1903646	Identifier	rem_mode		1902665	0					
ANR	1903647	RelationalExpression	rem_mode >= mode		1902665	1		>=			
ANR	1903648	Identifier	rem_mode		1902665	0					
ANR	1903649	Identifier	mode		1902665	1					
ANR	1903650	IfStatement	if ( di == 4 )		1902665	2					
ANR	1903651	Condition	di == 4	275:23:4914:4918	1902665	0	True				
ANR	1903652	EqualityExpression	di == 4		1902665	0		==			
ANR	1903653	Identifier	di		1902665	0					
ANR	1903654	PrimaryExpression	4		1902665	1					
ANR	1903655	ExpressionStatement	"fill_rectangle ( & h -> intra4x4_pred_mode_cache [ scan8 [ i ] ] , 2 , 2 , 8 , mode , 1 )"	277:24:4946:5022	1902665	1	True				
ANR	1903656	CallExpression	"fill_rectangle ( & h -> intra4x4_pred_mode_cache [ scan8 [ i ] ] , 2 , 2 , 8 , mode , 1 )"		1902665	0					
ANR	1903657	Callee	fill_rectangle		1902665	0					
ANR	1903658	Identifier	fill_rectangle		1902665	0					
ANR	1903659	ArgumentList	& h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		1902665	1					
ANR	1903660	Argument	& h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		1902665	0					
ANR	1903661	UnaryOperationExpression	& h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		1902665	0					
ANR	1903662	UnaryOperator	&		1902665	0					
ANR	1903663	ArrayIndexing	h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		1902665	1					
ANR	1903664	PtrMemberAccess	h -> intra4x4_pred_mode_cache		1902665	0					
ANR	1903665	Identifier	h		1902665	0					
ANR	1903666	Identifier	intra4x4_pred_mode_cache		1902665	1					
ANR	1903667	ArrayIndexing	scan8 [ i ]		1902665	1					
ANR	1903668	Identifier	scan8		1902665	0					
ANR	1903669	Identifier	i		1902665	1					
ANR	1903670	Argument	2		1902665	1					
ANR	1903671	PrimaryExpression	2		1902665	0					
ANR	1903672	Argument	2		1902665	2					
ANR	1903673	PrimaryExpression	2		1902665	0					
ANR	1903674	Argument	8		1902665	3					
ANR	1903675	PrimaryExpression	8		1902665	0					
ANR	1903676	Argument	mode		1902665	4					
ANR	1903677	Identifier	mode		1902665	0					
ANR	1903678	Argument	1		1902665	5					
ANR	1903679	PrimaryExpression	1		1902665	0					
ANR	1903680	ElseStatement	else		1902665	0					
ANR	1903681	ExpressionStatement	h -> intra4x4_pred_mode_cache [ scan8 [ i ] ] = mode	281:24:5075:5121	1902665	0	True				
ANR	1903682	AssignmentExpression	h -> intra4x4_pred_mode_cache [ scan8 [ i ] ] = mode		1902665	0		=			
ANR	1903683	ArrayIndexing	h -> intra4x4_pred_mode_cache [ scan8 [ i ] ]		1902665	0					
ANR	1903684	PtrMemberAccess	h -> intra4x4_pred_mode_cache		1902665	0					
ANR	1903685	Identifier	h		1902665	0					
ANR	1903686	Identifier	intra4x4_pred_mode_cache		1902665	1					
ANR	1903687	ArrayIndexing	scan8 [ i ]		1902665	1					
ANR	1903688	Identifier	scan8		1902665	0					
ANR	1903689	Identifier	i		1902665	1					
ANR	1903690	Identifier	mode		1902665	1					
ANR	1903691	ExpressionStatement	write_back_intra_pred_mode ( h )	285:16:5159:5188	1902665	4	True				
ANR	1903692	CallExpression	write_back_intra_pred_mode ( h )		1902665	0					
ANR	1903693	Callee	write_back_intra_pred_mode		1902665	0					
ANR	1903694	Identifier	write_back_intra_pred_mode		1902665	0					
ANR	1903695	ArgumentList	h		1902665	1					
ANR	1903696	Argument	h		1902665	0					
ANR	1903697	Identifier	h		1902665	0					
ANR	1903698	IfStatement	if ( check_intra4x4_pred_mode ( h ) < 0 )		1902665	5					
ANR	1903699	Condition	check_intra4x4_pred_mode ( h ) < 0	287:20:5211:5241	1902665	0	True				
ANR	1903700	RelationalExpression	check_intra4x4_pred_mode ( h ) < 0		1902665	0		<			
ANR	1903701	CallExpression	check_intra4x4_pred_mode ( h )		1902665	0					
ANR	1903702	Callee	check_intra4x4_pred_mode		1902665	0					
ANR	1903703	Identifier	check_intra4x4_pred_mode		1902665	0					
ANR	1903704	ArgumentList	h		1902665	1					
ANR	1903705	Argument	h		1902665	0					
ANR	1903706	Identifier	h		1902665	0					
ANR	1903707	PrimaryExpression	0		1902665	1					
ANR	1903708	ReturnStatement	return - 1 ;	289:20:5265:5274	1902665	1	True				
ANR	1903709	UnaryOperationExpression	- 1		1902665	0					
ANR	1903710	UnaryOperator	-		1902665	0					
ANR	1903711	PrimaryExpression	1		1902665	1					
ANR	1903712	ElseStatement	else		1902665	0					
ANR	1903713	CompoundStatement		291:17:5251:5251	1902665	0					
ANR	1903714	ExpressionStatement	"h -> intra16x16_pred_mode = check_intra_pred_mode ( h , h -> intra16x16_pred_mode )"	293:16:5313:5387	1902665	0	True				
ANR	1903715	AssignmentExpression	"h -> intra16x16_pred_mode = check_intra_pred_mode ( h , h -> intra16x16_pred_mode )"		1902665	0		=			
ANR	1903716	PtrMemberAccess	h -> intra16x16_pred_mode		1902665	0					
ANR	1903717	Identifier	h		1902665	0					
ANR	1903718	Identifier	intra16x16_pred_mode		1902665	1					
ANR	1903719	CallExpression	"check_intra_pred_mode ( h , h -> intra16x16_pred_mode )"		1902665	1					
ANR	1903720	Callee	check_intra_pred_mode		1902665	0					
ANR	1903721	Identifier	check_intra_pred_mode		1902665	0					
ANR	1903722	ArgumentList	h		1902665	1					
ANR	1903723	Argument	h		1902665	0					
ANR	1903724	Identifier	h		1902665	0					
ANR	1903725	Argument	h -> intra16x16_pred_mode		1902665	1					
ANR	1903726	PtrMemberAccess	h -> intra16x16_pred_mode		1902665	0					
ANR	1903727	Identifier	h		1902665	0					
ANR	1903728	Identifier	intra16x16_pred_mode		1902665	1					
ANR	1903729	IfStatement	if ( h -> intra16x16_pred_mode < 0 )		1902665	1					
ANR	1903730	Condition	h -> intra16x16_pred_mode < 0	295:19:5409:5435	1902665	0	True				
ANR	1903731	RelationalExpression	h -> intra16x16_pred_mode < 0		1902665	0		<			
ANR	1903732	PtrMemberAccess	h -> intra16x16_pred_mode		1902665	0					
ANR	1903733	Identifier	h		1902665	0					
ANR	1903734	Identifier	intra16x16_pred_mode		1902665	1					
ANR	1903735	PrimaryExpression	0		1902665	1					
ANR	1903736	ReturnStatement	return - 1 ;	297:20:5459:5468	1902665	1	True				
ANR	1903737	UnaryOperationExpression	- 1		1902665	0					
ANR	1903738	UnaryOperator	-		1902665	0					
ANR	1903739	PrimaryExpression	1		1902665	1					
ANR	1903740	ExpressionStatement	"pred_mode = check_intra_pred_mode ( h , get_ue_golomb ( & s -> gb ) )"	303:12:5500:5558	1902665	2	True				
ANR	1903741	AssignmentExpression	"pred_mode = check_intra_pred_mode ( h , get_ue_golomb ( & s -> gb ) )"		1902665	0		=			
ANR	1903742	Identifier	pred_mode		1902665	0					
ANR	1903743	CallExpression	"check_intra_pred_mode ( h , get_ue_golomb ( & s -> gb ) )"		1902665	1					
ANR	1903744	Callee	check_intra_pred_mode		1902665	0					
ANR	1903745	Identifier	check_intra_pred_mode		1902665	0					
ANR	1903746	ArgumentList	h		1902665	1					
ANR	1903747	Argument	h		1902665	0					
ANR	1903748	Identifier	h		1902665	0					
ANR	1903749	Argument	get_ue_golomb ( & s -> gb )		1902665	1					
ANR	1903750	CallExpression	get_ue_golomb ( & s -> gb )		1902665	0					
ANR	1903751	Callee	get_ue_golomb		1902665	0					
ANR	1903752	Identifier	get_ue_golomb		1902665	0					
ANR	1903753	ArgumentList	& s -> gb		1902665	1					
ANR	1903754	Argument	& s -> gb		1902665	0					
ANR	1903755	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903756	UnaryOperator	&		1902665	0					
ANR	1903757	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903758	Identifier	s		1902665	0					
ANR	1903759	Identifier	gb		1902665	1					
ANR	1903760	IfStatement	if ( pred_mode < 0 )		1902665	3					
ANR	1903761	Condition	pred_mode < 0	305:15:5576:5588	1902665	0	True				
ANR	1903762	RelationalExpression	pred_mode < 0		1902665	0		<			
ANR	1903763	Identifier	pred_mode		1902665	0					
ANR	1903764	PrimaryExpression	0		1902665	1					
ANR	1903765	ReturnStatement	return - 1 ;	307:16:5608:5617	1902665	1	True				
ANR	1903766	UnaryOperationExpression	- 1		1902665	0					
ANR	1903767	UnaryOperator	-		1902665	0					
ANR	1903768	PrimaryExpression	1		1902665	1					
ANR	1903769	ExpressionStatement	h -> chroma_pred_mode = pred_mode	309:12:5632:5662	1902665	4	True				
ANR	1903770	AssignmentExpression	h -> chroma_pred_mode = pred_mode		1902665	0		=			
ANR	1903771	PtrMemberAccess	h -> chroma_pred_mode		1902665	0					
ANR	1903772	Identifier	h		1902665	0					
ANR	1903773	Identifier	chroma_pred_mode		1902665	1					
ANR	1903774	Identifier	pred_mode		1902665	1					
ANR	1903775	ElseStatement	else		1902665	0					
ANR	1903776	IfStatement	if ( partition_count == 4 )		1902665	0					
ANR	1903777	Condition	partition_count == 4	311:13:5678:5695	1902665	0	True				
ANR	1903778	EqualityExpression	partition_count == 4		1902665	0		==			
ANR	1903779	Identifier	partition_count		1902665	0					
ANR	1903780	PrimaryExpression	4		1902665	1					
ANR	1903781	CompoundStatement		311:32:5654:5654	1902665	1					
ANR	1903782	Statement	int	313:8:5708:5710	1902665	0	True				
ANR	1903783	ExpressionStatement	"i , j , sub_partition_count [ 4 ] , list , ref [ 2 ] [ 4 ]"	313:12:5712:5757	1902665	1	True				
ANR	1903784	Expression	"i , j , sub_partition_count [ 4 ] , list , ref [ 2 ] [ 4 ]"		1902665	0					
ANR	1903785	Identifier	i		1902665	0					
ANR	1903786	Expression	"j , sub_partition_count [ 4 ] , list , ref [ 2 ] [ 4 ]"		1902665	1					
ANR	1903787	Identifier	j		1902665	0					
ANR	1903788	Expression	"sub_partition_count [ 4 ] , list , ref [ 2 ] [ 4 ]"		1902665	1					
ANR	1903789	ArrayIndexing	sub_partition_count [ 4 ]		1902665	0					
ANR	1903790	Identifier	sub_partition_count		1902665	0					
ANR	1903791	PrimaryExpression	4		1902665	1					
ANR	1903792	Expression	"list , ref [ 2 ] [ 4 ]"		1902665	1					
ANR	1903793	Identifier	list		1902665	0					
ANR	1903794	ArrayIndexing	ref [ 2 ] [ 4 ]		1902665	1					
ANR	1903795	ArrayIndexing	ref [ 2 ]		1902665	0					
ANR	1903796	Identifier	ref		1902665	0					
ANR	1903797	PrimaryExpression	2		1902665	1					
ANR	1903798	PrimaryExpression	4		1902665	1					
ANR	1903799	IfStatement	if ( h -> slice_type == B_TYPE )		1902665	2					
ANR	1903800	Condition	h -> slice_type == B_TYPE	317:11:5773:5795	1902665	0	True				
ANR	1903801	EqualityExpression	h -> slice_type == B_TYPE		1902665	0		==			
ANR	1903802	PtrMemberAccess	h -> slice_type		1902665	0					
ANR	1903803	Identifier	h		1902665	0					
ANR	1903804	Identifier	slice_type		1902665	1					
ANR	1903805	Identifier	B_TYPE		1902665	1					
ANR	1903806	CompoundStatement		317:35:5754:5754	1902665	1					
ANR	1903807	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		1902665	0					
ANR	1903808	ForInit	i = 0 ;	319:16:5816:5819	1902665	0	True				
ANR	1903809	AssignmentExpression	i = 0		1902665	0		=			
ANR	1903810	Identifier	i		1902665	0					
ANR	1903811	PrimaryExpression	0		1902665	1					
ANR	1903812	Condition	i < 4	319:21:5821:5823	1902665	1	True				
ANR	1903813	RelationalExpression	i < 4		1902665	0		<			
ANR	1903814	Identifier	i		1902665	0					
ANR	1903815	PrimaryExpression	4		1902665	1					
ANR	1903816	PostIncDecOperationExpression	i ++	319:26:5826:5828	1902665	2	True				
ANR	1903817	Identifier	i		1902665	0					
ANR	1903818	IncDec	++		1902665	1					
ANR	1903819	CompoundStatement		319:30:5787:5787	1902665	3					
ANR	1903820	ExpressionStatement	h -> sub_mb_type [ i ] = get_ue_golomb ( & s -> gb )	321:16:5849:5889	1902665	0	True				
ANR	1903821	AssignmentExpression	h -> sub_mb_type [ i ] = get_ue_golomb ( & s -> gb )		1902665	0		=			
ANR	1903822	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1903823	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903824	Identifier	h		1902665	0					
ANR	1903825	Identifier	sub_mb_type		1902665	1					
ANR	1903826	Identifier	i		1902665	1					
ANR	1903827	CallExpression	get_ue_golomb ( & s -> gb )		1902665	1					
ANR	1903828	Callee	get_ue_golomb		1902665	0					
ANR	1903829	Identifier	get_ue_golomb		1902665	0					
ANR	1903830	ArgumentList	& s -> gb		1902665	1					
ANR	1903831	Argument	& s -> gb		1902665	0					
ANR	1903832	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1903833	UnaryOperator	&		1902665	0					
ANR	1903834	PtrMemberAccess	s -> gb		1902665	1					
ANR	1903835	Identifier	s		1902665	0					
ANR	1903836	Identifier	gb		1902665	1					
ANR	1903837	IfStatement	if ( h -> sub_mb_type [ i ] >= 13 )		1902665	1					
ANR	1903838	Condition	h -> sub_mb_type [ i ] >= 13	323:19:5911:5932	1902665	0	True				
ANR	1903839	RelationalExpression	h -> sub_mb_type [ i ] >= 13		1902665	0		>=			
ANR	1903840	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1903841	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903842	Identifier	h		1902665	0					
ANR	1903843	Identifier	sub_mb_type		1902665	1					
ANR	1903844	Identifier	i		1902665	1					
ANR	1903845	PrimaryExpression	13		1902665	1					
ANR	1903846	CompoundStatement		323:42:5891:5891	1902665	1					
ANR	1903847	ExpressionStatement	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""B sub_mb_type %u out of range at %d %d\\n"" , h -> sub_mb_type [ i ] , s -> mb_x , s -> mb_y )"	325:20:5957:6070	1902665	0	True				
ANR	1903848	CallExpression	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""B sub_mb_type %u out of range at %d %d\\n"" , h -> sub_mb_type [ i ] , s -> mb_x , s -> mb_y )"		1902665	0					
ANR	1903849	Callee	av_log		1902665	0					
ANR	1903850	Identifier	av_log		1902665	0					
ANR	1903851	ArgumentList	h -> s . avctx		1902665	1					
ANR	1903852	Argument	h -> s . avctx		1902665	0					
ANR	1903853	MemberAccess	h -> s . avctx		1902665	0					
ANR	1903854	PtrMemberAccess	h -> s		1902665	0					
ANR	1903855	Identifier	h		1902665	0					
ANR	1903856	Identifier	s		1902665	1					
ANR	1903857	Identifier	avctx		1902665	1					
ANR	1903858	Argument	AV_LOG_ERROR		1902665	1					
ANR	1903859	Identifier	AV_LOG_ERROR		1902665	0					
ANR	1903860	Argument	"""B sub_mb_type %u out of range at %d %d\\n"""		1902665	2					
ANR	1903861	PrimaryExpression	"""B sub_mb_type %u out of range at %d %d\\n"""		1902665	0					
ANR	1903862	Argument	h -> sub_mb_type [ i ]		1902665	3					
ANR	1903863	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1903864	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903865	Identifier	h		1902665	0					
ANR	1903866	Identifier	sub_mb_type		1902665	1					
ANR	1903867	Identifier	i		1902665	1					
ANR	1903868	Argument	s -> mb_x		1902665	4					
ANR	1903869	PtrMemberAccess	s -> mb_x		1902665	0					
ANR	1903870	Identifier	s		1902665	0					
ANR	1903871	Identifier	mb_x		1902665	1					
ANR	1903872	Argument	s -> mb_y		1902665	5					
ANR	1903873	PtrMemberAccess	s -> mb_y		1902665	0					
ANR	1903874	Identifier	s		1902665	0					
ANR	1903875	Identifier	mb_y		1902665	1					
ANR	1903876	ReturnStatement	return - 1 ;	327:20:6093:6102	1902665	1	True				
ANR	1903877	UnaryOperationExpression	- 1		1902665	0					
ANR	1903878	UnaryOperator	-		1902665	0					
ANR	1903879	PrimaryExpression	1		1902665	1					
ANR	1903880	ExpressionStatement	sub_partition_count [ i ] = b_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . partition_count	331:16:6140:6219	1902665	2	True				
ANR	1903881	AssignmentExpression	sub_partition_count [ i ] = b_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . partition_count		1902665	0		=			
ANR	1903882	ArrayIndexing	sub_partition_count [ i ]		1902665	0					
ANR	1903883	Identifier	sub_partition_count		1902665	0					
ANR	1903884	Identifier	i		1902665	1					
ANR	1903885	MemberAccess	b_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . partition_count		1902665	1					
ANR	1903886	ArrayIndexing	b_sub_mb_type_info [ h -> sub_mb_type [ i ] ]		1902665	0					
ANR	1903887	Identifier	b_sub_mb_type_info		1902665	0					
ANR	1903888	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	1					
ANR	1903889	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903890	Identifier	h		1902665	0					
ANR	1903891	Identifier	sub_mb_type		1902665	1					
ANR	1903892	Identifier	i		1902665	1					
ANR	1903893	Identifier	partition_count		1902665	1					
ANR	1903894	ExpressionStatement	h -> sub_mb_type [ i ] = b_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . type	333:16:6238:6306	1902665	3	True				
ANR	1903895	AssignmentExpression	h -> sub_mb_type [ i ] = b_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . type		1902665	0		=			
ANR	1903896	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1903897	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903898	Identifier	h		1902665	0					
ANR	1903899	Identifier	sub_mb_type		1902665	1					
ANR	1903900	Identifier	i		1902665	1					
ANR	1903901	MemberAccess	b_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . type		1902665	1					
ANR	1903902	ArrayIndexing	b_sub_mb_type_info [ h -> sub_mb_type [ i ] ]		1902665	0					
ANR	1903903	Identifier	b_sub_mb_type_info		1902665	0					
ANR	1903904	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	1					
ANR	1903905	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903906	Identifier	h		1902665	0					
ANR	1903907	Identifier	sub_mb_type		1902665	1					
ANR	1903908	Identifier	i		1902665	1					
ANR	1903909	Identifier	type		1902665	1					
ANR	1903910	IfStatement	if ( IS_DIRECT ( h -> sub_mb_type [ 0 ] ) || IS_DIRECT ( h -> sub_mb_type [ 1 ] ) || IS_DIRECT ( h -> sub_mb_type [ 2 ] ) || IS_DIRECT ( h -> sub_mb_type [ 3 ] ) )		1902665	1					
ANR	1903911	Condition	IS_DIRECT ( h -> sub_mb_type [ 0 ] ) || IS_DIRECT ( h -> sub_mb_type [ 1 ] ) || IS_DIRECT ( h -> sub_mb_type [ 2 ] ) || IS_DIRECT ( h -> sub_mb_type [ 3 ] )	337:18:6342:6481	1902665	0	True				
ANR	1903912	OrExpression	IS_DIRECT ( h -> sub_mb_type [ 0 ] ) || IS_DIRECT ( h -> sub_mb_type [ 1 ] ) || IS_DIRECT ( h -> sub_mb_type [ 2 ] ) || IS_DIRECT ( h -> sub_mb_type [ 3 ] )		1902665	0		||			
ANR	1903913	CallExpression	IS_DIRECT ( h -> sub_mb_type [ 0 ] )		1902665	0					
ANR	1903914	Callee	IS_DIRECT		1902665	0					
ANR	1903915	Identifier	IS_DIRECT		1902665	0					
ANR	1903916	ArgumentList	h -> sub_mb_type [ 0 ]		1902665	1					
ANR	1903917	Argument	h -> sub_mb_type [ 0 ]		1902665	0					
ANR	1903918	ArrayIndexing	h -> sub_mb_type [ 0 ]		1902665	0					
ANR	1903919	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903920	Identifier	h		1902665	0					
ANR	1903921	Identifier	sub_mb_type		1902665	1					
ANR	1903922	PrimaryExpression	0		1902665	1					
ANR	1903923	OrExpression	IS_DIRECT ( h -> sub_mb_type [ 1 ] ) || IS_DIRECT ( h -> sub_mb_type [ 2 ] ) || IS_DIRECT ( h -> sub_mb_type [ 3 ] )		1902665	1		||			
ANR	1903924	CallExpression	IS_DIRECT ( h -> sub_mb_type [ 1 ] )		1902665	0					
ANR	1903925	Callee	IS_DIRECT		1902665	0					
ANR	1903926	Identifier	IS_DIRECT		1902665	0					
ANR	1903927	ArgumentList	h -> sub_mb_type [ 1 ]		1902665	1					
ANR	1903928	Argument	h -> sub_mb_type [ 1 ]		1902665	0					
ANR	1903929	ArrayIndexing	h -> sub_mb_type [ 1 ]		1902665	0					
ANR	1903930	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903931	Identifier	h		1902665	0					
ANR	1903932	Identifier	sub_mb_type		1902665	1					
ANR	1903933	PrimaryExpression	1		1902665	1					
ANR	1903934	OrExpression	IS_DIRECT ( h -> sub_mb_type [ 2 ] ) || IS_DIRECT ( h -> sub_mb_type [ 3 ] )		1902665	1		||			
ANR	1903935	CallExpression	IS_DIRECT ( h -> sub_mb_type [ 2 ] )		1902665	0					
ANR	1903936	Callee	IS_DIRECT		1902665	0					
ANR	1903937	Identifier	IS_DIRECT		1902665	0					
ANR	1903938	ArgumentList	h -> sub_mb_type [ 2 ]		1902665	1					
ANR	1903939	Argument	h -> sub_mb_type [ 2 ]		1902665	0					
ANR	1903940	ArrayIndexing	h -> sub_mb_type [ 2 ]		1902665	0					
ANR	1903941	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903942	Identifier	h		1902665	0					
ANR	1903943	Identifier	sub_mb_type		1902665	1					
ANR	1903944	PrimaryExpression	2		1902665	1					
ANR	1903945	CallExpression	IS_DIRECT ( h -> sub_mb_type [ 3 ] )		1902665	1					
ANR	1903946	Callee	IS_DIRECT		1902665	0					
ANR	1903947	Identifier	IS_DIRECT		1902665	0					
ANR	1903948	ArgumentList	h -> sub_mb_type [ 3 ]		1902665	1					
ANR	1903949	Argument	h -> sub_mb_type [ 3 ]		1902665	0					
ANR	1903950	ArrayIndexing	h -> sub_mb_type [ 3 ]		1902665	0					
ANR	1903951	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1903952	Identifier	h		1902665	0					
ANR	1903953	Identifier	sub_mb_type		1902665	1					
ANR	1903954	PrimaryExpression	3		1902665	1					
ANR	1903955	CompoundStatement		339:80:6441:6441	1902665	1					
ANR	1903956	ExpressionStatement	"pred_direct_motion ( h , & mb_type )"	341:16:6503:6534	1902665	0	True				
ANR	1903957	CallExpression	"pred_direct_motion ( h , & mb_type )"		1902665	0					
ANR	1903958	Callee	pred_direct_motion		1902665	0					
ANR	1903959	Identifier	pred_direct_motion		1902665	0					
ANR	1903960	ArgumentList	h		1902665	1					
ANR	1903961	Argument	h		1902665	0					
ANR	1903962	Identifier	h		1902665	0					
ANR	1903963	Argument	& mb_type		1902665	1					
ANR	1903964	UnaryOperationExpression	& mb_type		1902665	0					
ANR	1903965	UnaryOperator	&		1902665	0					
ANR	1903966	Identifier	mb_type		1902665	1					
ANR	1903967	ExpressionStatement	h -> ref_cache [ 0 ] [ scan8 [ 4 ] ] = h -> ref_cache [ 1 ] [ scan8 [ 4 ] ] = h -> ref_cache [ 0 ] [ scan8 [ 12 ] ] = h -> ref_cache [ 1 ] [ scan8 [ 12 ] ] = PART_NOT_AVAILABLE	343:16:6553:6736	1902665	1	True				
ANR	1903968	AssignmentExpression	h -> ref_cache [ 0 ] [ scan8 [ 4 ] ] = h -> ref_cache [ 1 ] [ scan8 [ 4 ] ] = h -> ref_cache [ 0 ] [ scan8 [ 12 ] ] = h -> ref_cache [ 1 ] [ scan8 [ 12 ] ] = PART_NOT_AVAILABLE		1902665	0		=			
ANR	1903969	ArrayIndexing	h -> ref_cache [ 0 ] [ scan8 [ 4 ] ]		1902665	0					
ANR	1903970	ArrayIndexing	h -> ref_cache [ 0 ]		1902665	0					
ANR	1903971	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1903972	Identifier	h		1902665	0					
ANR	1903973	Identifier	ref_cache		1902665	1					
ANR	1903974	PrimaryExpression	0		1902665	1					
ANR	1903975	ArrayIndexing	scan8 [ 4 ]		1902665	1					
ANR	1903976	Identifier	scan8		1902665	0					
ANR	1903977	PrimaryExpression	4		1902665	1					
ANR	1903978	AssignmentExpression	h -> ref_cache [ 1 ] [ scan8 [ 4 ] ] = h -> ref_cache [ 0 ] [ scan8 [ 12 ] ] = h -> ref_cache [ 1 ] [ scan8 [ 12 ] ] = PART_NOT_AVAILABLE		1902665	1		=			
ANR	1903979	ArrayIndexing	h -> ref_cache [ 1 ] [ scan8 [ 4 ] ]		1902665	0					
ANR	1903980	ArrayIndexing	h -> ref_cache [ 1 ]		1902665	0					
ANR	1903981	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1903982	Identifier	h		1902665	0					
ANR	1903983	Identifier	ref_cache		1902665	1					
ANR	1903984	PrimaryExpression	1		1902665	1					
ANR	1903985	ArrayIndexing	scan8 [ 4 ]		1902665	1					
ANR	1903986	Identifier	scan8		1902665	0					
ANR	1903987	PrimaryExpression	4		1902665	1					
ANR	1903988	AssignmentExpression	h -> ref_cache [ 0 ] [ scan8 [ 12 ] ] = h -> ref_cache [ 1 ] [ scan8 [ 12 ] ] = PART_NOT_AVAILABLE		1902665	1		=			
ANR	1903989	ArrayIndexing	h -> ref_cache [ 0 ] [ scan8 [ 12 ] ]		1902665	0					
ANR	1903990	ArrayIndexing	h -> ref_cache [ 0 ]		1902665	0					
ANR	1903991	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1903992	Identifier	h		1902665	0					
ANR	1903993	Identifier	ref_cache		1902665	1					
ANR	1903994	PrimaryExpression	0		1902665	1					
ANR	1903995	ArrayIndexing	scan8 [ 12 ]		1902665	1					
ANR	1903996	Identifier	scan8		1902665	0					
ANR	1903997	PrimaryExpression	12		1902665	1					
ANR	1903998	AssignmentExpression	h -> ref_cache [ 1 ] [ scan8 [ 12 ] ] = PART_NOT_AVAILABLE		1902665	1		=			
ANR	1903999	ArrayIndexing	h -> ref_cache [ 1 ] [ scan8 [ 12 ] ]		1902665	0					
ANR	1904000	ArrayIndexing	h -> ref_cache [ 1 ]		1902665	0					
ANR	1904001	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904002	Identifier	h		1902665	0					
ANR	1904003	Identifier	ref_cache		1902665	1					
ANR	1904004	PrimaryExpression	1		1902665	1					
ANR	1904005	ArrayIndexing	scan8 [ 12 ]		1902665	1					
ANR	1904006	Identifier	scan8		1902665	0					
ANR	1904007	PrimaryExpression	12		1902665	1					
ANR	1904008	Identifier	PART_NOT_AVAILABLE		1902665	1					
ANR	1904009	ElseStatement	else		1902665	0					
ANR	1904010	CompoundStatement		353:13:6724:6724	1902665	0					
ANR	1904011	ExpressionStatement	assert ( h -> slice_type == P_TYPE || h -> slice_type == SP_TYPE )	355:12:6782:6841	1902665	0	True				
ANR	1904012	CallExpression	assert ( h -> slice_type == P_TYPE || h -> slice_type == SP_TYPE )		1902665	0					
ANR	1904013	Callee	assert		1902665	0					
ANR	1904014	Identifier	assert		1902665	0					
ANR	1904015	ArgumentList	h -> slice_type == P_TYPE || h -> slice_type == SP_TYPE		1902665	1					
ANR	1904016	Argument	h -> slice_type == P_TYPE || h -> slice_type == SP_TYPE		1902665	0					
ANR	1904017	OrExpression	h -> slice_type == P_TYPE || h -> slice_type == SP_TYPE		1902665	0		||			
ANR	1904018	EqualityExpression	h -> slice_type == P_TYPE		1902665	0		==			
ANR	1904019	PtrMemberAccess	h -> slice_type		1902665	0					
ANR	1904020	Identifier	h		1902665	0					
ANR	1904021	Identifier	slice_type		1902665	1					
ANR	1904022	Identifier	P_TYPE		1902665	1					
ANR	1904023	EqualityExpression	h -> slice_type == SP_TYPE		1902665	1		==			
ANR	1904024	PtrMemberAccess	h -> slice_type		1902665	0					
ANR	1904025	Identifier	h		1902665	0					
ANR	1904026	Identifier	slice_type		1902665	1					
ANR	1904027	Identifier	SP_TYPE		1902665	1					
ANR	1904028	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		1902665	1					
ANR	1904029	ForInit	i = 0 ;	357:16:6881:6884	1902665	0	True				
ANR	1904030	AssignmentExpression	i = 0		1902665	0		=			
ANR	1904031	Identifier	i		1902665	0					
ANR	1904032	PrimaryExpression	0		1902665	1					
ANR	1904033	Condition	i < 4	357:21:6886:6888	1902665	1	True				
ANR	1904034	RelationalExpression	i < 4		1902665	0		<			
ANR	1904035	Identifier	i		1902665	0					
ANR	1904036	PrimaryExpression	4		1902665	1					
ANR	1904037	PostIncDecOperationExpression	i ++	357:26:6891:6893	1902665	2	True				
ANR	1904038	Identifier	i		1902665	0					
ANR	1904039	IncDec	++		1902665	1					
ANR	1904040	CompoundStatement		357:30:6852:6852	1902665	3					
ANR	1904041	ExpressionStatement	h -> sub_mb_type [ i ] = get_ue_golomb ( & s -> gb )	359:16:6914:6954	1902665	0	True				
ANR	1904042	AssignmentExpression	h -> sub_mb_type [ i ] = get_ue_golomb ( & s -> gb )		1902665	0		=			
ANR	1904043	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904044	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904045	Identifier	h		1902665	0					
ANR	1904046	Identifier	sub_mb_type		1902665	1					
ANR	1904047	Identifier	i		1902665	1					
ANR	1904048	CallExpression	get_ue_golomb ( & s -> gb )		1902665	1					
ANR	1904049	Callee	get_ue_golomb		1902665	0					
ANR	1904050	Identifier	get_ue_golomb		1902665	0					
ANR	1904051	ArgumentList	& s -> gb		1902665	1					
ANR	1904052	Argument	& s -> gb		1902665	0					
ANR	1904053	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1904054	UnaryOperator	&		1902665	0					
ANR	1904055	PtrMemberAccess	s -> gb		1902665	1					
ANR	1904056	Identifier	s		1902665	0					
ANR	1904057	Identifier	gb		1902665	1					
ANR	1904058	IfStatement	if ( h -> sub_mb_type [ i ] >= 4 )		1902665	1					
ANR	1904059	Condition	h -> sub_mb_type [ i ] >= 4	361:19:6976:6996	1902665	0	True				
ANR	1904060	RelationalExpression	h -> sub_mb_type [ i ] >= 4		1902665	0		>=			
ANR	1904061	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904062	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904063	Identifier	h		1902665	0					
ANR	1904064	Identifier	sub_mb_type		1902665	1					
ANR	1904065	Identifier	i		1902665	1					
ANR	1904066	PrimaryExpression	4		1902665	1					
ANR	1904067	CompoundStatement		361:41:6955:6955	1902665	1					
ANR	1904068	ExpressionStatement	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""P sub_mb_type %u out of range at %d %d\\n"" , h -> sub_mb_type [ i ] , s -> mb_x , s -> mb_y )"	363:20:7021:7134	1902665	0	True				
ANR	1904069	CallExpression	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""P sub_mb_type %u out of range at %d %d\\n"" , h -> sub_mb_type [ i ] , s -> mb_x , s -> mb_y )"		1902665	0					
ANR	1904070	Callee	av_log		1902665	0					
ANR	1904071	Identifier	av_log		1902665	0					
ANR	1904072	ArgumentList	h -> s . avctx		1902665	1					
ANR	1904073	Argument	h -> s . avctx		1902665	0					
ANR	1904074	MemberAccess	h -> s . avctx		1902665	0					
ANR	1904075	PtrMemberAccess	h -> s		1902665	0					
ANR	1904076	Identifier	h		1902665	0					
ANR	1904077	Identifier	s		1902665	1					
ANR	1904078	Identifier	avctx		1902665	1					
ANR	1904079	Argument	AV_LOG_ERROR		1902665	1					
ANR	1904080	Identifier	AV_LOG_ERROR		1902665	0					
ANR	1904081	Argument	"""P sub_mb_type %u out of range at %d %d\\n"""		1902665	2					
ANR	1904082	PrimaryExpression	"""P sub_mb_type %u out of range at %d %d\\n"""		1902665	0					
ANR	1904083	Argument	h -> sub_mb_type [ i ]		1902665	3					
ANR	1904084	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904085	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904086	Identifier	h		1902665	0					
ANR	1904087	Identifier	sub_mb_type		1902665	1					
ANR	1904088	Identifier	i		1902665	1					
ANR	1904089	Argument	s -> mb_x		1902665	4					
ANR	1904090	PtrMemberAccess	s -> mb_x		1902665	0					
ANR	1904091	Identifier	s		1902665	0					
ANR	1904092	Identifier	mb_x		1902665	1					
ANR	1904093	Argument	s -> mb_y		1902665	5					
ANR	1904094	PtrMemberAccess	s -> mb_y		1902665	0					
ANR	1904095	Identifier	s		1902665	0					
ANR	1904096	Identifier	mb_y		1902665	1					
ANR	1904097	ReturnStatement	return - 1 ;	365:20:7157:7166	1902665	1	True				
ANR	1904098	UnaryOperationExpression	- 1		1902665	0					
ANR	1904099	UnaryOperator	-		1902665	0					
ANR	1904100	PrimaryExpression	1		1902665	1					
ANR	1904101	ExpressionStatement	sub_partition_count [ i ] = p_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . partition_count	369:16:7204:7283	1902665	2	True				
ANR	1904102	AssignmentExpression	sub_partition_count [ i ] = p_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . partition_count		1902665	0		=			
ANR	1904103	ArrayIndexing	sub_partition_count [ i ]		1902665	0					
ANR	1904104	Identifier	sub_partition_count		1902665	0					
ANR	1904105	Identifier	i		1902665	1					
ANR	1904106	MemberAccess	p_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . partition_count		1902665	1					
ANR	1904107	ArrayIndexing	p_sub_mb_type_info [ h -> sub_mb_type [ i ] ]		1902665	0					
ANR	1904108	Identifier	p_sub_mb_type_info		1902665	0					
ANR	1904109	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	1					
ANR	1904110	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904111	Identifier	h		1902665	0					
ANR	1904112	Identifier	sub_mb_type		1902665	1					
ANR	1904113	Identifier	i		1902665	1					
ANR	1904114	Identifier	partition_count		1902665	1					
ANR	1904115	ExpressionStatement	h -> sub_mb_type [ i ] = p_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . type	371:16:7302:7370	1902665	3	True				
ANR	1904116	AssignmentExpression	h -> sub_mb_type [ i ] = p_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . type		1902665	0		=			
ANR	1904117	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904118	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904119	Identifier	h		1902665	0					
ANR	1904120	Identifier	sub_mb_type		1902665	1					
ANR	1904121	Identifier	i		1902665	1					
ANR	1904122	MemberAccess	p_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . type		1902665	1					
ANR	1904123	ArrayIndexing	p_sub_mb_type_info [ h -> sub_mb_type [ i ] ]		1902665	0					
ANR	1904124	Identifier	p_sub_mb_type_info		1902665	0					
ANR	1904125	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	1					
ANR	1904126	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904127	Identifier	h		1902665	0					
ANR	1904128	Identifier	sub_mb_type		1902665	1					
ANR	1904129	Identifier	i		1902665	1					
ANR	1904130	Identifier	type		1902665	1					
ANR	1904131	ForStatement	for ( list = 0 ; list < h -> list_count ; list ++ )		1902665	3					
ANR	1904132	ForInit	list = 0 ;	379:12:7413:7419	1902665	0	True				
ANR	1904133	AssignmentExpression	list = 0		1902665	0		=			
ANR	1904134	Identifier	list		1902665	0					
ANR	1904135	PrimaryExpression	0		1902665	1					
ANR	1904136	Condition	list < h -> list_count	379:20:7421:7438	1902665	1	True				
ANR	1904137	RelationalExpression	list < h -> list_count		1902665	0		<			
ANR	1904138	Identifier	list		1902665	0					
ANR	1904139	PtrMemberAccess	h -> list_count		1902665	1					
ANR	1904140	Identifier	h		1902665	0					
ANR	1904141	Identifier	list_count		1902665	1					
ANR	1904142	PostIncDecOperationExpression	list ++	379:40:7441:7446	1902665	2	True				
ANR	1904143	Identifier	list		1902665	0					
ANR	1904144	IncDec	++		1902665	1					
ANR	1904145	CompoundStatement		381:12:7420:7476	1902665	3					
ANR	1904146	IdentifierDeclStatement	int ref_count = IS_REF0 ( mb_type ) ? 1 : h -> ref_count [ list ] ;	381:12:7463:7519	1902665	0	True				
ANR	1904147	IdentifierDecl	ref_count = IS_REF0 ( mb_type ) ? 1 : h -> ref_count [ list ]		1902665	0					
ANR	1904148	IdentifierDeclType	int		1902665	0					
ANR	1904149	Identifier	ref_count		1902665	1					
ANR	1904150	AssignmentExpression	ref_count = IS_REF0 ( mb_type ) ? 1 : h -> ref_count [ list ]		1902665	2		=			
ANR	1904151	Identifier	ref_count		1902665	0					
ANR	1904152	ConditionalExpression	IS_REF0 ( mb_type ) ? 1 : h -> ref_count [ list ]		1902665	1					
ANR	1904153	Condition	IS_REF0 ( mb_type )		1902665	0					
ANR	1904154	CallExpression	IS_REF0 ( mb_type )		1902665	0					
ANR	1904155	Callee	IS_REF0		1902665	0					
ANR	1904156	Identifier	IS_REF0		1902665	0					
ANR	1904157	ArgumentList	mb_type		1902665	1					
ANR	1904158	Argument	mb_type		1902665	0					
ANR	1904159	Identifier	mb_type		1902665	0					
ANR	1904160	PrimaryExpression	1		1902665	1					
ANR	1904161	ArrayIndexing	h -> ref_count [ list ]		1902665	2					
ANR	1904162	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1904163	Identifier	h		1902665	0					
ANR	1904164	Identifier	ref_count		1902665	1					
ANR	1904165	Identifier	list		1902665	1					
ANR	1904166	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		1902665	1					
ANR	1904167	ForInit	i = 0 ;	383:16:7538:7541	1902665	0	True				
ANR	1904168	AssignmentExpression	i = 0		1902665	0		=			
ANR	1904169	Identifier	i		1902665	0					
ANR	1904170	PrimaryExpression	0		1902665	1					
ANR	1904171	Condition	i < 4	383:21:7543:7545	1902665	1	True				
ANR	1904172	RelationalExpression	i < 4		1902665	0		<			
ANR	1904173	Identifier	i		1902665	0					
ANR	1904174	PrimaryExpression	4		1902665	1					
ANR	1904175	PostIncDecOperationExpression	i ++	383:26:7548:7550	1902665	2	True				
ANR	1904176	Identifier	i		1902665	0					
ANR	1904177	IncDec	++		1902665	1					
ANR	1904178	CompoundStatement		383:30:7509:7509	1902665	3					
ANR	1904179	IfStatement	if ( IS_DIRECT ( h -> sub_mb_type [ i ] ) )		1902665	0					
ANR	1904180	Condition	IS_DIRECT ( h -> sub_mb_type [ i ] )	385:19:7574:7601	1902665	0	True				
ANR	1904181	CallExpression	IS_DIRECT ( h -> sub_mb_type [ i ] )		1902665	0					
ANR	1904182	Callee	IS_DIRECT		1902665	0					
ANR	1904183	Identifier	IS_DIRECT		1902665	0					
ANR	1904184	ArgumentList	h -> sub_mb_type [ i ]		1902665	1					
ANR	1904185	Argument	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904186	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904187	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904188	Identifier	h		1902665	0					
ANR	1904189	Identifier	sub_mb_type		1902665	1					
ANR	1904190	Identifier	i		1902665	1					
ANR	1904191	ContinueStatement	continue ;	385:49:7604:7612	1902665	1	True				
ANR	1904192	IfStatement	"if ( IS_DIR ( h -> sub_mb_type [ i ] , 0 , list ) )"		1902665	1					
ANR	1904193	Condition	"IS_DIR ( h -> sub_mb_type [ i ] , 0 , list )"	387:19:7634:7667	1902665	0	True				
ANR	1904194	CallExpression	"IS_DIR ( h -> sub_mb_type [ i ] , 0 , list )"		1902665	0					
ANR	1904195	Callee	IS_DIR		1902665	0					
ANR	1904196	Identifier	IS_DIR		1902665	0					
ANR	1904197	ArgumentList	h -> sub_mb_type [ i ]		1902665	1					
ANR	1904198	Argument	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904199	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904200	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904201	Identifier	h		1902665	0					
ANR	1904202	Identifier	sub_mb_type		1902665	1					
ANR	1904203	Identifier	i		1902665	1					
ANR	1904204	Argument	0		1902665	1					
ANR	1904205	PrimaryExpression	0		1902665	0					
ANR	1904206	Argument	list		1902665	2					
ANR	1904207	Identifier	list		1902665	0					
ANR	1904208	CompoundStatement		389:20:7649:7701	1902665	1					
ANR	1904209	IdentifierDeclStatement	"unsigned int tmp = get_te0_golomb ( & s -> gb , ref_count ) ;"	389:20:7692:7744	1902665	0	True				
ANR	1904210	IdentifierDecl	"tmp = get_te0_golomb ( & s -> gb , ref_count )"		1902665	0					
ANR	1904211	IdentifierDeclType	unsigned int		1902665	0					
ANR	1904212	Identifier	tmp		1902665	1					
ANR	1904213	AssignmentExpression	"tmp = get_te0_golomb ( & s -> gb , ref_count )"		1902665	2		=			
ANR	1904214	Identifier	tmp		1902665	0					
ANR	1904215	CallExpression	"get_te0_golomb ( & s -> gb , ref_count )"		1902665	1					
ANR	1904216	Callee	get_te0_golomb		1902665	0					
ANR	1904217	Identifier	get_te0_golomb		1902665	0					
ANR	1904218	ArgumentList	& s -> gb		1902665	1					
ANR	1904219	Argument	& s -> gb		1902665	0					
ANR	1904220	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1904221	UnaryOperator	&		1902665	0					
ANR	1904222	PtrMemberAccess	s -> gb		1902665	1					
ANR	1904223	Identifier	s		1902665	0					
ANR	1904224	Identifier	gb		1902665	1					
ANR	1904225	Argument	ref_count		1902665	1					
ANR	1904226	Identifier	ref_count		1902665	0					
ANR	1904227	IfStatement	if ( tmp >= ref_count )		1902665	1					
ANR	1904228	Condition	tmp >= ref_count	391:23:7805:7818	1902665	0	True				
ANR	1904229	RelationalExpression	tmp >= ref_count		1902665	0		>=			
ANR	1904230	Identifier	tmp		1902665	0					
ANR	1904231	Identifier	ref_count		1902665	1					
ANR	1904232	CompoundStatement		391:38:7777:7777	1902665	1					
ANR	1904233	ExpressionStatement	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""ref %u overflow\\n"" , tmp )"	393:24:7847:7905	1902665	0	True				
ANR	1904234	CallExpression	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""ref %u overflow\\n"" , tmp )"		1902665	0					
ANR	1904235	Callee	av_log		1902665	0					
ANR	1904236	Identifier	av_log		1902665	0					
ANR	1904237	ArgumentList	h -> s . avctx		1902665	1					
ANR	1904238	Argument	h -> s . avctx		1902665	0					
ANR	1904239	MemberAccess	h -> s . avctx		1902665	0					
ANR	1904240	PtrMemberAccess	h -> s		1902665	0					
ANR	1904241	Identifier	h		1902665	0					
ANR	1904242	Identifier	s		1902665	1					
ANR	1904243	Identifier	avctx		1902665	1					
ANR	1904244	Argument	AV_LOG_ERROR		1902665	1					
ANR	1904245	Identifier	AV_LOG_ERROR		1902665	0					
ANR	1904246	Argument	"""ref %u overflow\\n"""		1902665	2					
ANR	1904247	PrimaryExpression	"""ref %u overflow\\n"""		1902665	0					
ANR	1904248	Argument	tmp		1902665	3					
ANR	1904249	Identifier	tmp		1902665	0					
ANR	1904250	ReturnStatement	return - 1 ;	395:24:7932:7941	1902665	1	True				
ANR	1904251	UnaryOperationExpression	- 1		1902665	0					
ANR	1904252	UnaryOperator	-		1902665	0					
ANR	1904253	PrimaryExpression	1		1902665	1					
ANR	1904254	ExpressionStatement	ref [ list ] [ i ] = tmp	399:20:7987:8004	1902665	2	True				
ANR	1904255	AssignmentExpression	ref [ list ] [ i ] = tmp		1902665	0		=			
ANR	1904256	ArrayIndexing	ref [ list ] [ i ]		1902665	0					
ANR	1904257	ArrayIndexing	ref [ list ]		1902665	0					
ANR	1904258	Identifier	ref		1902665	0					
ANR	1904259	Identifier	list		1902665	1					
ANR	1904260	Identifier	i		1902665	1					
ANR	1904261	Identifier	tmp		1902665	1					
ANR	1904262	ElseStatement	else		1902665	0					
ANR	1904263	CompoundStatement		401:21:7985:7985	1902665	0					
ANR	1904264	ExpressionStatement	ref [ list ] [ i ] = - 1	405:20:8077:8094	1902665	0	True				
ANR	1904265	AssignmentExpression	ref [ list ] [ i ] = - 1		1902665	0		=			
ANR	1904266	ArrayIndexing	ref [ list ] [ i ]		1902665	0					
ANR	1904267	ArrayIndexing	ref [ list ]		1902665	0					
ANR	1904268	Identifier	ref		1902665	0					
ANR	1904269	Identifier	list		1902665	1					
ANR	1904270	Identifier	i		1902665	1					
ANR	1904271	UnaryOperationExpression	- 1		1902665	1					
ANR	1904272	UnaryOperator	-		1902665	0					
ANR	1904273	PrimaryExpression	1		1902665	1					
ANR	1904274	IfStatement	if ( dct8x8_allowed )		1902665	4					
ANR	1904275	Condition	dct8x8_allowed	415:11:8155:8168	1902665	0	True				
ANR	1904276	Identifier	dct8x8_allowed		1902665	0					
ANR	1904277	ExpressionStatement	dct8x8_allowed = get_dct8x8_allowed ( h )	417:12:8184:8222	1902665	1	True				
ANR	1904278	AssignmentExpression	dct8x8_allowed = get_dct8x8_allowed ( h )		1902665	0		=			
ANR	1904279	Identifier	dct8x8_allowed		1902665	0					
ANR	1904280	CallExpression	get_dct8x8_allowed ( h )		1902665	1					
ANR	1904281	Callee	get_dct8x8_allowed		1902665	0					
ANR	1904282	Identifier	get_dct8x8_allowed		1902665	0					
ANR	1904283	ArgumentList	h		1902665	1					
ANR	1904284	Argument	h		1902665	0					
ANR	1904285	Identifier	h		1902665	0					
ANR	1904286	ForStatement	for ( list = 0 ; list < h -> list_count ; list ++ )		1902665	5					
ANR	1904287	ForInit	list = 0 ;	421:12:8239:8245	1902665	0	True				
ANR	1904288	AssignmentExpression	list = 0		1902665	0		=			
ANR	1904289	Identifier	list		1902665	0					
ANR	1904290	PrimaryExpression	0		1902665	1					
ANR	1904291	Condition	list < h -> list_count	421:20:8247:8264	1902665	1	True				
ANR	1904292	RelationalExpression	list < h -> list_count		1902665	0		<			
ANR	1904293	Identifier	list		1902665	0					
ANR	1904294	PtrMemberAccess	h -> list_count		1902665	1					
ANR	1904295	Identifier	h		1902665	0					
ANR	1904296	Identifier	list_count		1902665	1					
ANR	1904297	PostIncDecOperationExpression	list ++	421:40:8267:8272	1902665	2	True				
ANR	1904298	Identifier	list		1902665	0					
ANR	1904299	IncDec	++		1902665	1					
ANR	1904300	CompoundStatement		421:47:8231:8231	1902665	3					
ANR	1904301	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		1902665	0					
ANR	1904302	ForInit	i = 0 ;	423:16:8293:8296	1902665	0	True				
ANR	1904303	AssignmentExpression	i = 0		1902665	0		=			
ANR	1904304	Identifier	i		1902665	0					
ANR	1904305	PrimaryExpression	0		1902665	1					
ANR	1904306	Condition	i < 4	423:21:8298:8300	1902665	1	True				
ANR	1904307	RelationalExpression	i < 4		1902665	0		<			
ANR	1904308	Identifier	i		1902665	0					
ANR	1904309	PrimaryExpression	4		1902665	1					
ANR	1904310	PostIncDecOperationExpression	i ++	423:26:8303:8305	1902665	2	True				
ANR	1904311	Identifier	i		1902665	0					
ANR	1904312	IncDec	++		1902665	1					
ANR	1904313	CompoundStatement		423:30:8264:8264	1902665	3					
ANR	1904314	IfStatement	if ( IS_DIRECT ( h -> sub_mb_type [ i ] ) )		1902665	0					
ANR	1904315	Condition	IS_DIRECT ( h -> sub_mb_type [ i ] )	425:19:8329:8356	1902665	0	True				
ANR	1904316	CallExpression	IS_DIRECT ( h -> sub_mb_type [ i ] )		1902665	0					
ANR	1904317	Callee	IS_DIRECT		1902665	0					
ANR	1904318	Identifier	IS_DIRECT		1902665	0					
ANR	1904319	ArgumentList	h -> sub_mb_type [ i ]		1902665	1					
ANR	1904320	Argument	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904321	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904322	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904323	Identifier	h		1902665	0					
ANR	1904324	Identifier	sub_mb_type		1902665	1					
ANR	1904325	Identifier	i		1902665	1					
ANR	1904326	CompoundStatement		425:49:8316:8316	1902665	1					
ANR	1904327	ExpressionStatement	h -> ref_cache [ list ] [ scan8 [ 4 * i ] ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 1 ]	427:20:8382:8451	1902665	0	True				
ANR	1904328	AssignmentExpression	h -> ref_cache [ list ] [ scan8 [ 4 * i ] ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 1 ]		1902665	0		=			
ANR	1904329	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 4 * i ] ]		1902665	0					
ANR	1904330	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1904331	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904332	Identifier	h		1902665	0					
ANR	1904333	Identifier	ref_cache		1902665	1					
ANR	1904334	Identifier	list		1902665	1					
ANR	1904335	ArrayIndexing	scan8 [ 4 * i ]		1902665	1					
ANR	1904336	Identifier	scan8		1902665	0					
ANR	1904337	MultiplicativeExpression	4 * i		1902665	1		*			
ANR	1904338	PrimaryExpression	4		1902665	0					
ANR	1904339	Identifier	i		1902665	1					
ANR	1904340	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 1 ]		1902665	1					
ANR	1904341	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1904342	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904343	Identifier	h		1902665	0					
ANR	1904344	Identifier	ref_cache		1902665	1					
ANR	1904345	Identifier	list		1902665	1					
ANR	1904346	AdditiveExpression	scan8 [ 4 * i ] + 1		1902665	1		+			
ANR	1904347	ArrayIndexing	scan8 [ 4 * i ]		1902665	0					
ANR	1904348	Identifier	scan8		1902665	0					
ANR	1904349	MultiplicativeExpression	4 * i		1902665	1		*			
ANR	1904350	PrimaryExpression	4		1902665	0					
ANR	1904351	Identifier	i		1902665	1					
ANR	1904352	PrimaryExpression	1		1902665	1					
ANR	1904353	ContinueStatement	continue ;	429:20:8474:8482	1902665	1	True				
ANR	1904354	ExpressionStatement	h -> ref_cache [ list ] [ scan8 [ 4 * i ] ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 1 ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 8 ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 9 ] = ref [ list ] [ i ]	433:16:8520:8691	1902665	1	True				
ANR	1904355	AssignmentExpression	h -> ref_cache [ list ] [ scan8 [ 4 * i ] ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 1 ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 8 ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 9 ] = ref [ list ] [ i ]		1902665	0		=			
ANR	1904356	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 4 * i ] ]		1902665	0					
ANR	1904357	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1904358	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904359	Identifier	h		1902665	0					
ANR	1904360	Identifier	ref_cache		1902665	1					
ANR	1904361	Identifier	list		1902665	1					
ANR	1904362	ArrayIndexing	scan8 [ 4 * i ]		1902665	1					
ANR	1904363	Identifier	scan8		1902665	0					
ANR	1904364	MultiplicativeExpression	4 * i		1902665	1		*			
ANR	1904365	PrimaryExpression	4		1902665	0					
ANR	1904366	Identifier	i		1902665	1					
ANR	1904367	AssignmentExpression	h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 1 ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 8 ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 9 ] = ref [ list ] [ i ]		1902665	1		=			
ANR	1904368	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 1 ]		1902665	0					
ANR	1904369	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1904370	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904371	Identifier	h		1902665	0					
ANR	1904372	Identifier	ref_cache		1902665	1					
ANR	1904373	Identifier	list		1902665	1					
ANR	1904374	AdditiveExpression	scan8 [ 4 * i ] + 1		1902665	1		+			
ANR	1904375	ArrayIndexing	scan8 [ 4 * i ]		1902665	0					
ANR	1904376	Identifier	scan8		1902665	0					
ANR	1904377	MultiplicativeExpression	4 * i		1902665	1		*			
ANR	1904378	PrimaryExpression	4		1902665	0					
ANR	1904379	Identifier	i		1902665	1					
ANR	1904380	PrimaryExpression	1		1902665	1					
ANR	1904381	AssignmentExpression	h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 8 ] = h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 9 ] = ref [ list ] [ i ]		1902665	1		=			
ANR	1904382	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 8 ]		1902665	0					
ANR	1904383	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1904384	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904385	Identifier	h		1902665	0					
ANR	1904386	Identifier	ref_cache		1902665	1					
ANR	1904387	Identifier	list		1902665	1					
ANR	1904388	AdditiveExpression	scan8 [ 4 * i ] + 8		1902665	1		+			
ANR	1904389	ArrayIndexing	scan8 [ 4 * i ]		1902665	0					
ANR	1904390	Identifier	scan8		1902665	0					
ANR	1904391	MultiplicativeExpression	4 * i		1902665	1		*			
ANR	1904392	PrimaryExpression	4		1902665	0					
ANR	1904393	Identifier	i		1902665	1					
ANR	1904394	PrimaryExpression	8		1902665	1					
ANR	1904395	AssignmentExpression	h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 9 ] = ref [ list ] [ i ]		1902665	1		=			
ANR	1904396	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 4 * i ] + 9 ]		1902665	0					
ANR	1904397	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1904398	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904399	Identifier	h		1902665	0					
ANR	1904400	Identifier	ref_cache		1902665	1					
ANR	1904401	Identifier	list		1902665	1					
ANR	1904402	AdditiveExpression	scan8 [ 4 * i ] + 9		1902665	1		+			
ANR	1904403	ArrayIndexing	scan8 [ 4 * i ]		1902665	0					
ANR	1904404	Identifier	scan8		1902665	0					
ANR	1904405	MultiplicativeExpression	4 * i		1902665	1		*			
ANR	1904406	PrimaryExpression	4		1902665	0					
ANR	1904407	Identifier	i		1902665	1					
ANR	1904408	PrimaryExpression	9		1902665	1					
ANR	1904409	ArrayIndexing	ref [ list ] [ i ]		1902665	1					
ANR	1904410	ArrayIndexing	ref [ list ]		1902665	0					
ANR	1904411	Identifier	ref		1902665	0					
ANR	1904412	Identifier	list		1902665	1					
ANR	1904413	Identifier	i		1902665	1					
ANR	1904414	IfStatement	"if ( IS_DIR ( h -> sub_mb_type [ i ] , 0 , list ) )"		1902665	2					
ANR	1904415	Condition	"IS_DIR ( h -> sub_mb_type [ i ] , 0 , list )"	439:19:8715:8748	1902665	0	True				
ANR	1904416	CallExpression	"IS_DIR ( h -> sub_mb_type [ i ] , 0 , list )"		1902665	0					
ANR	1904417	Callee	IS_DIR		1902665	0					
ANR	1904418	Identifier	IS_DIR		1902665	0					
ANR	1904419	ArgumentList	h -> sub_mb_type [ i ]		1902665	1					
ANR	1904420	Argument	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904421	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	0					
ANR	1904422	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904423	Identifier	h		1902665	0					
ANR	1904424	Identifier	sub_mb_type		1902665	1					
ANR	1904425	Identifier	i		1902665	1					
ANR	1904426	Argument	0		1902665	1					
ANR	1904427	PrimaryExpression	0		1902665	0					
ANR	1904428	Argument	list		1902665	2					
ANR	1904429	Identifier	list		1902665	0					
ANR	1904430	CompoundStatement		443:20:8793:8868	1902665	1					
ANR	1904431	IdentifierDeclStatement	const int sub_mb_type = h -> sub_mb_type [ i ] ;	441:20:8773:8813	1902665	0	True				
ANR	1904432	IdentifierDecl	sub_mb_type = h -> sub_mb_type [ i ]		1902665	0					
ANR	1904433	IdentifierDeclType	const int		1902665	0					
ANR	1904434	Identifier	sub_mb_type		1902665	1					
ANR	1904435	AssignmentExpression	sub_mb_type = h -> sub_mb_type [ i ]		1902665	2		=			
ANR	1904436	Identifier	sub_mb_type		1902665	0					
ANR	1904437	ArrayIndexing	h -> sub_mb_type [ i ]		1902665	1					
ANR	1904438	PtrMemberAccess	h -> sub_mb_type		1902665	0					
ANR	1904439	Identifier	h		1902665	0					
ANR	1904440	Identifier	sub_mb_type		1902665	1					
ANR	1904441	Identifier	i		1902665	1					
ANR	1904442	IdentifierDeclStatement	const int block_width = ( sub_mb_type & ( MB_TYPE_16x16 | MB_TYPE_16x8 ) ) ? 2 : 1 ;	443:20:8836:8911	1902665	1	True				
ANR	1904443	IdentifierDecl	block_width = ( sub_mb_type & ( MB_TYPE_16x16 | MB_TYPE_16x8 ) ) ? 2 : 1		1902665	0					
ANR	1904444	IdentifierDeclType	const int		1902665	0					
ANR	1904445	Identifier	block_width		1902665	1					
ANR	1904446	AssignmentExpression	block_width = ( sub_mb_type & ( MB_TYPE_16x16 | MB_TYPE_16x8 ) ) ? 2 : 1		1902665	2		=			
ANR	1904447	Identifier	block_width		1902665	0					
ANR	1904448	ConditionalExpression	( sub_mb_type & ( MB_TYPE_16x16 | MB_TYPE_16x8 ) ) ? 2 : 1		1902665	1					
ANR	1904449	Condition	sub_mb_type & ( MB_TYPE_16x16 | MB_TYPE_16x8 )		1902665	0					
ANR	1904450	BitAndExpression	sub_mb_type & ( MB_TYPE_16x16 | MB_TYPE_16x8 )		1902665	0		&			
ANR	1904451	Identifier	sub_mb_type		1902665	0					
ANR	1904452	InclusiveOrExpression	MB_TYPE_16x16 | MB_TYPE_16x8		1902665	1		|			
ANR	1904453	Identifier	MB_TYPE_16x16		1902665	0					
ANR	1904454	Identifier	MB_TYPE_16x8		1902665	1					
ANR	1904455	PrimaryExpression	2		1902665	1					
ANR	1904456	PrimaryExpression	1		1902665	2					
ANR	1904457	ForStatement	for ( j = 0 ; j < sub_partition_count [ i ] ; j ++ )		1902665	2					
ANR	1904458	ForInit	j = 0 ;	445:24:8938:8941	1902665	0	True				
ANR	1904459	AssignmentExpression	j = 0		1902665	0		=			
ANR	1904460	Identifier	j		1902665	0					
ANR	1904461	PrimaryExpression	0		1902665	1					
ANR	1904462	Condition	j < sub_partition_count [ i ]	445:29:8943:8966	1902665	1	True				
ANR	1904463	RelationalExpression	j < sub_partition_count [ i ]		1902665	0		<			
ANR	1904464	Identifier	j		1902665	0					
ANR	1904465	ArrayIndexing	sub_partition_count [ i ]		1902665	1					
ANR	1904466	Identifier	sub_partition_count		1902665	0					
ANR	1904467	Identifier	i		1902665	1					
ANR	1904468	PostIncDecOperationExpression	j ++	445:55:8969:8971	1902665	2	True				
ANR	1904469	Identifier	j		1902665	0					
ANR	1904470	IncDec	++		1902665	1					
ANR	1904471	CompoundStatement		451:24:9057:9116	1902665	3					
ANR	1904472	IdentifierDeclStatement	"int mx , my ;"	447:24:9000:9010	1902665	0	True				
ANR	1904473	IdentifierDecl	mx		1902665	0					
ANR	1904474	IdentifierDeclType	int		1902665	0					
ANR	1904475	Identifier	mx		1902665	1					
ANR	1904476	IdentifierDecl	my		1902665	1					
ANR	1904477	IdentifierDeclType	int		1902665	0					
ANR	1904478	Identifier	my		1902665	1					
ANR	1904479	IdentifierDeclStatement	const int index = 4 * i + block_width * j ;	449:24:9037:9073	1902665	1	True				
ANR	1904480	IdentifierDecl	index = 4 * i + block_width * j		1902665	0					
ANR	1904481	IdentifierDeclType	const int		1902665	0					
ANR	1904482	Identifier	index		1902665	1					
ANR	1904483	AssignmentExpression	index = 4 * i + block_width * j		1902665	2		=			
ANR	1904484	Identifier	index		1902665	0					
ANR	1904485	AdditiveExpression	4 * i + block_width * j		1902665	1		+			
ANR	1904486	MultiplicativeExpression	4 * i		1902665	0		*			
ANR	1904487	PrimaryExpression	4		1902665	0					
ANR	1904488	Identifier	i		1902665	1					
ANR	1904489	MultiplicativeExpression	block_width * j		1902665	1		*			
ANR	1904490	Identifier	block_width		1902665	0					
ANR	1904491	Identifier	j		1902665	1					
ANR	1904492	IdentifierDeclStatement	int16_t ( * mv_cache ) [ 2 ] = & h -> mv_cache [ list ] [ scan8 [ index ] ] ;	451:24:9100:9159	1902665	2	True				
ANR	1904493	IdentifierDecl	( * mv_cache ) [ 2 ] = & h -> mv_cache [ list ] [ scan8 [ index ] ]		1902665	0					
ANR	1904494	IdentifierDeclType	int16_t ( * ) [ 2 ]		1902665	0					
ANR	1904495	Identifier	mv_cache		1902665	1					
ANR	1904496	PrimaryExpression	2		1902665	2					
ANR	1904497	AssignmentExpression	( * mv_cache ) [ 2 ] = & h -> mv_cache [ list ] [ scan8 [ index ] ]		1902665	3		=			
ANR	1904498	Identifier	mv_cache		1902665	0					
ANR	1904499	UnaryOperationExpression	& h -> mv_cache [ list ] [ scan8 [ index ] ]		1902665	1					
ANR	1904500	UnaryOperator	&		1902665	0					
ANR	1904501	ArrayIndexing	h -> mv_cache [ list ] [ scan8 [ index ] ]		1902665	1					
ANR	1904502	ArrayIndexing	h -> mv_cache [ list ]		1902665	0					
ANR	1904503	PtrMemberAccess	h -> mv_cache		1902665	0					
ANR	1904504	Identifier	h		1902665	0					
ANR	1904505	Identifier	mv_cache		1902665	1					
ANR	1904506	Identifier	list		1902665	1					
ANR	1904507	ArrayIndexing	scan8 [ index ]		1902665	1					
ANR	1904508	Identifier	scan8		1902665	0					
ANR	1904509	Identifier	index		1902665	1					
ANR	1904510	ExpressionStatement	"pred_motion ( h , index , block_width , list , h -> ref_cache [ list ] [ scan8 [ index ] ] , & mx , & my )"	453:24:9186:9272	1902665	3	True				
ANR	1904511	CallExpression	"pred_motion ( h , index , block_width , list , h -> ref_cache [ list ] [ scan8 [ index ] ] , & mx , & my )"		1902665	0					
ANR	1904512	Callee	pred_motion		1902665	0					
ANR	1904513	Identifier	pred_motion		1902665	0					
ANR	1904514	ArgumentList	h		1902665	1					
ANR	1904515	Argument	h		1902665	0					
ANR	1904516	Identifier	h		1902665	0					
ANR	1904517	Argument	index		1902665	1					
ANR	1904518	Identifier	index		1902665	0					
ANR	1904519	Argument	block_width		1902665	2					
ANR	1904520	Identifier	block_width		1902665	0					
ANR	1904521	Argument	list		1902665	3					
ANR	1904522	Identifier	list		1902665	0					
ANR	1904523	Argument	h -> ref_cache [ list ] [ scan8 [ index ] ]		1902665	4					
ANR	1904524	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ index ] ]		1902665	0					
ANR	1904525	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1904526	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904527	Identifier	h		1902665	0					
ANR	1904528	Identifier	ref_cache		1902665	1					
ANR	1904529	Identifier	list		1902665	1					
ANR	1904530	ArrayIndexing	scan8 [ index ]		1902665	1					
ANR	1904531	Identifier	scan8		1902665	0					
ANR	1904532	Identifier	index		1902665	1					
ANR	1904533	Argument	& mx		1902665	5					
ANR	1904534	UnaryOperationExpression	& mx		1902665	0					
ANR	1904535	UnaryOperator	&		1902665	0					
ANR	1904536	Identifier	mx		1902665	1					
ANR	1904537	Argument	& my		1902665	6					
ANR	1904538	UnaryOperationExpression	& my		1902665	0					
ANR	1904539	UnaryOperator	&		1902665	0					
ANR	1904540	Identifier	my		1902665	1					
ANR	1904541	ExpressionStatement	mx += get_se_golomb ( & s -> gb )	455:24:9299:9326	1902665	4	True				
ANR	1904542	AssignmentExpression	mx += get_se_golomb ( & s -> gb )		1902665	0		+=			
ANR	1904543	Identifier	mx		1902665	0					
ANR	1904544	CallExpression	get_se_golomb ( & s -> gb )		1902665	1					
ANR	1904545	Callee	get_se_golomb		1902665	0					
ANR	1904546	Identifier	get_se_golomb		1902665	0					
ANR	1904547	ArgumentList	& s -> gb		1902665	1					
ANR	1904548	Argument	& s -> gb		1902665	0					
ANR	1904549	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1904550	UnaryOperator	&		1902665	0					
ANR	1904551	PtrMemberAccess	s -> gb		1902665	1					
ANR	1904552	Identifier	s		1902665	0					
ANR	1904553	Identifier	gb		1902665	1					
ANR	1904554	ExpressionStatement	my += get_se_golomb ( & s -> gb )	457:24:9353:9380	1902665	5	True				
ANR	1904555	AssignmentExpression	my += get_se_golomb ( & s -> gb )		1902665	0		+=			
ANR	1904556	Identifier	my		1902665	0					
ANR	1904557	CallExpression	get_se_golomb ( & s -> gb )		1902665	1					
ANR	1904558	Callee	get_se_golomb		1902665	0					
ANR	1904559	Identifier	get_se_golomb		1902665	0					
ANR	1904560	ArgumentList	& s -> gb		1902665	1					
ANR	1904561	Argument	& s -> gb		1902665	0					
ANR	1904562	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1904563	UnaryOperator	&		1902665	0					
ANR	1904564	PtrMemberAccess	s -> gb		1902665	1					
ANR	1904565	Identifier	s		1902665	0					
ANR	1904566	Identifier	gb		1902665	1					
ANR	1904567	ExpressionStatement	"tprintf ( s -> avctx , ""final mv:%d %d\\n"" , mx , my )"	459:24:9407:9452	1902665	6	True				
ANR	1904568	CallExpression	"tprintf ( s -> avctx , ""final mv:%d %d\\n"" , mx , my )"		1902665	0					
ANR	1904569	Callee	tprintf		1902665	0					
ANR	1904570	Identifier	tprintf		1902665	0					
ANR	1904571	ArgumentList	s -> avctx		1902665	1					
ANR	1904572	Argument	s -> avctx		1902665	0					
ANR	1904573	PtrMemberAccess	s -> avctx		1902665	0					
ANR	1904574	Identifier	s		1902665	0					
ANR	1904575	Identifier	avctx		1902665	1					
ANR	1904576	Argument	"""final mv:%d %d\\n"""		1902665	1					
ANR	1904577	PrimaryExpression	"""final mv:%d %d\\n"""		1902665	0					
ANR	1904578	Argument	mx		1902665	2					
ANR	1904579	Identifier	mx		1902665	0					
ANR	1904580	Argument	my		1902665	3					
ANR	1904581	Identifier	my		1902665	0					
ANR	1904582	IfStatement	if ( IS_SUB_8X8 ( sub_mb_type ) )		1902665	7					
ANR	1904583	Condition	IS_SUB_8X8 ( sub_mb_type )	463:27:9484:9506	1902665	0	True				
ANR	1904584	CallExpression	IS_SUB_8X8 ( sub_mb_type )		1902665	0					
ANR	1904585	Callee	IS_SUB_8X8		1902665	0					
ANR	1904586	Identifier	IS_SUB_8X8		1902665	0					
ANR	1904587	ArgumentList	sub_mb_type		1902665	1					
ANR	1904588	Argument	sub_mb_type		1902665	0					
ANR	1904589	Identifier	sub_mb_type		1902665	0					
ANR	1904590	CompoundStatement		463:51:9465:9465	1902665	1					
ANR	1904591	ExpressionStatement	mv_cache [ 1 ] [ 0 ] = mv_cache [ 8 ] [ 0 ] = mv_cache [ 9 ] [ 0 ] = mx	465:28:9539:9624	1902665	0	True				
ANR	1904592	AssignmentExpression	mv_cache [ 1 ] [ 0 ] = mv_cache [ 8 ] [ 0 ] = mv_cache [ 9 ] [ 0 ] = mx		1902665	0		=			
ANR	1904593	ArrayIndexing	mv_cache [ 1 ] [ 0 ]		1902665	0					
ANR	1904594	ArrayIndexing	mv_cache [ 1 ]		1902665	0					
ANR	1904595	Identifier	mv_cache		1902665	0					
ANR	1904596	PrimaryExpression	1		1902665	1					
ANR	1904597	PrimaryExpression	0		1902665	1					
ANR	1904598	AssignmentExpression	mv_cache [ 8 ] [ 0 ] = mv_cache [ 9 ] [ 0 ] = mx		1902665	1		=			
ANR	1904599	ArrayIndexing	mv_cache [ 8 ] [ 0 ]		1902665	0					
ANR	1904600	ArrayIndexing	mv_cache [ 8 ]		1902665	0					
ANR	1904601	Identifier	mv_cache		1902665	0					
ANR	1904602	PrimaryExpression	8		1902665	1					
ANR	1904603	PrimaryExpression	0		1902665	1					
ANR	1904604	AssignmentExpression	mv_cache [ 9 ] [ 0 ] = mx		1902665	1		=			
ANR	1904605	ArrayIndexing	mv_cache [ 9 ] [ 0 ]		1902665	0					
ANR	1904606	ArrayIndexing	mv_cache [ 9 ]		1902665	0					
ANR	1904607	Identifier	mv_cache		1902665	0					
ANR	1904608	PrimaryExpression	9		1902665	1					
ANR	1904609	PrimaryExpression	0		1902665	1					
ANR	1904610	Identifier	mx		1902665	1					
ANR	1904611	ExpressionStatement	mv_cache [ 1 ] [ 1 ] = mv_cache [ 8 ] [ 1 ] = mv_cache [ 9 ] [ 1 ] = my	469:28:9655:9740	1902665	1	True				
ANR	1904612	AssignmentExpression	mv_cache [ 1 ] [ 1 ] = mv_cache [ 8 ] [ 1 ] = mv_cache [ 9 ] [ 1 ] = my		1902665	0		=			
ANR	1904613	ArrayIndexing	mv_cache [ 1 ] [ 1 ]		1902665	0					
ANR	1904614	ArrayIndexing	mv_cache [ 1 ]		1902665	0					
ANR	1904615	Identifier	mv_cache		1902665	0					
ANR	1904616	PrimaryExpression	1		1902665	1					
ANR	1904617	PrimaryExpression	1		1902665	1					
ANR	1904618	AssignmentExpression	mv_cache [ 8 ] [ 1 ] = mv_cache [ 9 ] [ 1 ] = my		1902665	1		=			
ANR	1904619	ArrayIndexing	mv_cache [ 8 ] [ 1 ]		1902665	0					
ANR	1904620	ArrayIndexing	mv_cache [ 8 ]		1902665	0					
ANR	1904621	Identifier	mv_cache		1902665	0					
ANR	1904622	PrimaryExpression	8		1902665	1					
ANR	1904623	PrimaryExpression	1		1902665	1					
ANR	1904624	AssignmentExpression	mv_cache [ 9 ] [ 1 ] = my		1902665	1		=			
ANR	1904625	ArrayIndexing	mv_cache [ 9 ] [ 1 ]		1902665	0					
ANR	1904626	ArrayIndexing	mv_cache [ 9 ]		1902665	0					
ANR	1904627	Identifier	mv_cache		1902665	0					
ANR	1904628	PrimaryExpression	9		1902665	1					
ANR	1904629	PrimaryExpression	1		1902665	1					
ANR	1904630	Identifier	my		1902665	1					
ANR	1904631	ElseStatement	else		1902665	0					
ANR	1904632	IfStatement	if ( IS_SUB_8X4 ( sub_mb_type ) )		1902665	0					
ANR	1904633	Condition	IS_SUB_8X4 ( sub_mb_type )	473:33:9776:9798	1902665	0	True				
ANR	1904634	CallExpression	IS_SUB_8X4 ( sub_mb_type )		1902665	0					
ANR	1904635	Callee	IS_SUB_8X4		1902665	0					
ANR	1904636	Identifier	IS_SUB_8X4		1902665	0					
ANR	1904637	ArgumentList	sub_mb_type		1902665	1					
ANR	1904638	Argument	sub_mb_type		1902665	0					
ANR	1904639	Identifier	sub_mb_type		1902665	0					
ANR	1904640	CompoundStatement		473:57:9757:9757	1902665	1					
ANR	1904641	ExpressionStatement	mv_cache [ 1 ] [ 0 ] = mx	475:28:9831:9851	1902665	0	True				
ANR	1904642	AssignmentExpression	mv_cache [ 1 ] [ 0 ] = mx		1902665	0		=			
ANR	1904643	ArrayIndexing	mv_cache [ 1 ] [ 0 ]		1902665	0					
ANR	1904644	ArrayIndexing	mv_cache [ 1 ]		1902665	0					
ANR	1904645	Identifier	mv_cache		1902665	0					
ANR	1904646	PrimaryExpression	1		1902665	1					
ANR	1904647	PrimaryExpression	0		1902665	1					
ANR	1904648	Identifier	mx		1902665	1					
ANR	1904649	ExpressionStatement	mv_cache [ 1 ] [ 1 ] = my	477:28:9882:9902	1902665	1	True				
ANR	1904650	AssignmentExpression	mv_cache [ 1 ] [ 1 ] = my		1902665	0		=			
ANR	1904651	ArrayIndexing	mv_cache [ 1 ] [ 1 ]		1902665	0					
ANR	1904652	ArrayIndexing	mv_cache [ 1 ]		1902665	0					
ANR	1904653	Identifier	mv_cache		1902665	0					
ANR	1904654	PrimaryExpression	1		1902665	1					
ANR	1904655	PrimaryExpression	1		1902665	1					
ANR	1904656	Identifier	my		1902665	1					
ANR	1904657	ElseStatement	else		1902665	0					
ANR	1904658	IfStatement	if ( IS_SUB_4X8 ( sub_mb_type ) )		1902665	0					
ANR	1904659	Condition	IS_SUB_4X8 ( sub_mb_type )	479:33:9938:9960	1902665	0	True				
ANR	1904660	CallExpression	IS_SUB_4X8 ( sub_mb_type )		1902665	0					
ANR	1904661	Callee	IS_SUB_4X8		1902665	0					
ANR	1904662	Identifier	IS_SUB_4X8		1902665	0					
ANR	1904663	ArgumentList	sub_mb_type		1902665	1					
ANR	1904664	Argument	sub_mb_type		1902665	0					
ANR	1904665	Identifier	sub_mb_type		1902665	0					
ANR	1904666	CompoundStatement		479:57:9919:9919	1902665	1					
ANR	1904667	ExpressionStatement	mv_cache [ 8 ] [ 0 ] = mx	481:28:9993:10013	1902665	0	True				
ANR	1904668	AssignmentExpression	mv_cache [ 8 ] [ 0 ] = mx		1902665	0		=			
ANR	1904669	ArrayIndexing	mv_cache [ 8 ] [ 0 ]		1902665	0					
ANR	1904670	ArrayIndexing	mv_cache [ 8 ]		1902665	0					
ANR	1904671	Identifier	mv_cache		1902665	0					
ANR	1904672	PrimaryExpression	8		1902665	1					
ANR	1904673	PrimaryExpression	0		1902665	1					
ANR	1904674	Identifier	mx		1902665	1					
ANR	1904675	ExpressionStatement	mv_cache [ 8 ] [ 1 ] = my	483:28:10044:10064	1902665	1	True				
ANR	1904676	AssignmentExpression	mv_cache [ 8 ] [ 1 ] = my		1902665	0		=			
ANR	1904677	ArrayIndexing	mv_cache [ 8 ] [ 1 ]		1902665	0					
ANR	1904678	ArrayIndexing	mv_cache [ 8 ]		1902665	0					
ANR	1904679	Identifier	mv_cache		1902665	0					
ANR	1904680	PrimaryExpression	8		1902665	1					
ANR	1904681	PrimaryExpression	1		1902665	1					
ANR	1904682	Identifier	my		1902665	1					
ANR	1904683	ExpressionStatement	mv_cache [ 0 ] [ 0 ] = mx	487:24:10118:10138	1902665	8	True				
ANR	1904684	AssignmentExpression	mv_cache [ 0 ] [ 0 ] = mx		1902665	0		=			
ANR	1904685	ArrayIndexing	mv_cache [ 0 ] [ 0 ]		1902665	0					
ANR	1904686	ArrayIndexing	mv_cache [ 0 ]		1902665	0					
ANR	1904687	Identifier	mv_cache		1902665	0					
ANR	1904688	PrimaryExpression	0		1902665	1					
ANR	1904689	PrimaryExpression	0		1902665	1					
ANR	1904690	Identifier	mx		1902665	1					
ANR	1904691	ExpressionStatement	mv_cache [ 0 ] [ 1 ] = my	489:24:10165:10185	1902665	9	True				
ANR	1904692	AssignmentExpression	mv_cache [ 0 ] [ 1 ] = my		1902665	0		=			
ANR	1904693	ArrayIndexing	mv_cache [ 0 ] [ 1 ]		1902665	0					
ANR	1904694	ArrayIndexing	mv_cache [ 0 ]		1902665	0					
ANR	1904695	Identifier	mv_cache		1902665	0					
ANR	1904696	PrimaryExpression	0		1902665	1					
ANR	1904697	PrimaryExpression	1		1902665	1					
ANR	1904698	Identifier	my		1902665	1					
ANR	1904699	ElseStatement	else		1902665	0					
ANR	1904700	CompoundStatement		495:20:10212:10272	1902665	0					
ANR	1904701	IdentifierDeclStatement	uint32_t * p = ( uint32_t * ) & h -> mv_cache [ list ] [ scan8 [ 4 * i ] ] [ 0 ] ;	495:20:10255:10315	1902665	0	True				
ANR	1904702	IdentifierDecl	* p = ( uint32_t * ) & h -> mv_cache [ list ] [ scan8 [ 4 * i ] ] [ 0 ]		1902665	0					
ANR	1904703	IdentifierDeclType	uint32_t *		1902665	0					
ANR	1904704	Identifier	p		1902665	1					
ANR	1904705	AssignmentExpression	* p = ( uint32_t * ) & h -> mv_cache [ list ] [ scan8 [ 4 * i ] ] [ 0 ]		1902665	2		=			
ANR	1904706	Identifier	p		1902665	0					
ANR	1904707	CastExpression	( uint32_t * ) & h -> mv_cache [ list ] [ scan8 [ 4 * i ] ] [ 0 ]		1902665	1					
ANR	1904708	CastTarget	uint32_t *		1902665	0					
ANR	1904709	UnaryOperationExpression	& h -> mv_cache [ list ] [ scan8 [ 4 * i ] ] [ 0 ]		1902665	1					
ANR	1904710	UnaryOperator	&		1902665	0					
ANR	1904711	ArrayIndexing	h -> mv_cache [ list ] [ scan8 [ 4 * i ] ] [ 0 ]		1902665	1					
ANR	1904712	ArrayIndexing	h -> mv_cache [ list ] [ scan8 [ 4 * i ] ]		1902665	0					
ANR	1904713	ArrayIndexing	h -> mv_cache [ list ]		1902665	0					
ANR	1904714	PtrMemberAccess	h -> mv_cache		1902665	0					
ANR	1904715	Identifier	h		1902665	0					
ANR	1904716	Identifier	mv_cache		1902665	1					
ANR	1904717	Identifier	list		1902665	1					
ANR	1904718	ArrayIndexing	scan8 [ 4 * i ]		1902665	1					
ANR	1904719	Identifier	scan8		1902665	0					
ANR	1904720	MultiplicativeExpression	4 * i		1902665	1		*			
ANR	1904721	PrimaryExpression	4		1902665	0					
ANR	1904722	Identifier	i		1902665	1					
ANR	1904723	PrimaryExpression	0		1902665	1					
ANR	1904724	ExpressionStatement	p [ 0 ] = p [ 1 ] = p [ 8 ] = p [ 9 ] = 0	497:20:10338:10386	1902665	1	True				
ANR	1904725	AssignmentExpression	p [ 0 ] = p [ 1 ] = p [ 8 ] = p [ 9 ] = 0		1902665	0		=			
ANR	1904726	ArrayIndexing	p [ 0 ]		1902665	0					
ANR	1904727	Identifier	p		1902665	0					
ANR	1904728	PrimaryExpression	0		1902665	1					
ANR	1904729	AssignmentExpression	p [ 1 ] = p [ 8 ] = p [ 9 ] = 0		1902665	1		=			
ANR	1904730	ArrayIndexing	p [ 1 ]		1902665	0					
ANR	1904731	Identifier	p		1902665	0					
ANR	1904732	PrimaryExpression	1		1902665	1					
ANR	1904733	AssignmentExpression	p [ 8 ] = p [ 9 ] = 0		1902665	1		=			
ANR	1904734	ArrayIndexing	p [ 8 ]		1902665	0					
ANR	1904735	Identifier	p		1902665	0					
ANR	1904736	PrimaryExpression	8		1902665	1					
ANR	1904737	AssignmentExpression	p [ 9 ] = 0		1902665	1		=			
ANR	1904738	ArrayIndexing	p [ 9 ]		1902665	0					
ANR	1904739	Identifier	p		1902665	0					
ANR	1904740	PrimaryExpression	9		1902665	1					
ANR	1904741	PrimaryExpression	0		1902665	1					
ANR	1904742	ElseStatement	else		1902665	0					
ANR	1904743	IfStatement	if ( IS_DIRECT ( mb_type ) )		1902665	0					
ANR	1904744	Condition	IS_DIRECT ( mb_type )	507:13:10447:10464	1902665	0	True				
ANR	1904745	CallExpression	IS_DIRECT ( mb_type )		1902665	0					
ANR	1904746	Callee	IS_DIRECT		1902665	0					
ANR	1904747	Identifier	IS_DIRECT		1902665	0					
ANR	1904748	ArgumentList	mb_type		1902665	1					
ANR	1904749	Argument	mb_type		1902665	0					
ANR	1904750	Identifier	mb_type		1902665	0					
ANR	1904751	CompoundStatement		507:32:10423:10423	1902665	1					
ANR	1904752	ExpressionStatement	"pred_direct_motion ( h , & mb_type )"	509:8:10477:10508	1902665	0	True				
ANR	1904753	CallExpression	"pred_direct_motion ( h , & mb_type )"		1902665	0					
ANR	1904754	Callee	pred_direct_motion		1902665	0					
ANR	1904755	Identifier	pred_direct_motion		1902665	0					
ANR	1904756	ArgumentList	h		1902665	1					
ANR	1904757	Argument	h		1902665	0					
ANR	1904758	Identifier	h		1902665	0					
ANR	1904759	Argument	& mb_type		1902665	1					
ANR	1904760	UnaryOperationExpression	& mb_type		1902665	0					
ANR	1904761	UnaryOperator	&		1902665	0					
ANR	1904762	Identifier	mb_type		1902665	1					
ANR	1904763	ExpressionStatement	dct8x8_allowed &= h -> sps . direct_8x8_inference_flag	511:8:10519:10569	1902665	1	True				
ANR	1904764	AssignmentExpression	dct8x8_allowed &= h -> sps . direct_8x8_inference_flag		1902665	0		&=			
ANR	1904765	Identifier	dct8x8_allowed		1902665	0					
ANR	1904766	MemberAccess	h -> sps . direct_8x8_inference_flag		1902665	1					
ANR	1904767	PtrMemberAccess	h -> sps		1902665	0					
ANR	1904768	Identifier	h		1902665	0					
ANR	1904769	Identifier	sps		1902665	1					
ANR	1904770	Identifier	direct_8x8_inference_flag		1902665	1					
ANR	1904771	ElseStatement	else		1902665	0					
ANR	1904772	CompoundStatement		515:8:10549:10568	1902665	0					
ANR	1904773	IdentifierDeclStatement	"int list , mx , my , i ;"	515:8:10592:10611	1902665	0	True				
ANR	1904774	IdentifierDecl	list		1902665	0					
ANR	1904775	IdentifierDeclType	int		1902665	0					
ANR	1904776	Identifier	list		1902665	1					
ANR	1904777	IdentifierDecl	mx		1902665	1					
ANR	1904778	IdentifierDeclType	int		1902665	0					
ANR	1904779	Identifier	mx		1902665	1					
ANR	1904780	IdentifierDecl	my		1902665	2					
ANR	1904781	IdentifierDeclType	int		1902665	0					
ANR	1904782	Identifier	my		1902665	1					
ANR	1904783	IdentifierDecl	i		1902665	3					
ANR	1904784	IdentifierDeclType	int		1902665	0					
ANR	1904785	Identifier	i		1902665	1					
ANR	1904786	IfStatement	if ( IS_16X16 ( mb_type ) )		1902665	1					
ANR	1904787	Condition	IS_16X16 ( mb_type )	519:11:10698:10714	1902665	0	True				
ANR	1904788	CallExpression	IS_16X16 ( mb_type )		1902665	0					
ANR	1904789	Callee	IS_16X16		1902665	0					
ANR	1904790	Identifier	IS_16X16		1902665	0					
ANR	1904791	ArgumentList	mb_type		1902665	1					
ANR	1904792	Argument	mb_type		1902665	0					
ANR	1904793	Identifier	mb_type		1902665	0					
ANR	1904794	CompoundStatement		519:29:10673:10673	1902665	1					
ANR	1904795	ForStatement	for ( list = 0 ; list < h -> list_count ; list ++ )		1902665	0					
ANR	1904796	ForInit	list = 0 ;	521:16:10735:10741	1902665	0	True				
ANR	1904797	AssignmentExpression	list = 0		1902665	0		=			
ANR	1904798	Identifier	list		1902665	0					
ANR	1904799	PrimaryExpression	0		1902665	1					
ANR	1904800	Condition	list < h -> list_count	521:24:10743:10760	1902665	1	True				
ANR	1904801	RelationalExpression	list < h -> list_count		1902665	0		<			
ANR	1904802	Identifier	list		1902665	0					
ANR	1904803	PtrMemberAccess	h -> list_count		1902665	1					
ANR	1904804	Identifier	h		1902665	0					
ANR	1904805	Identifier	list_count		1902665	1					
ANR	1904806	PostIncDecOperationExpression	list ++	521:44:10763:10768	1902665	2	True				
ANR	1904807	Identifier	list		1902665	0					
ANR	1904808	IncDec	++		1902665	1					
ANR	1904809	CompoundStatement		523:20:10750:10766	1902665	3					
ANR	1904810	IdentifierDeclStatement	unsigned int val ;	523:20:10793:10809	1902665	0	True				
ANR	1904811	IdentifierDecl	val		1902665	0					
ANR	1904812	IdentifierDeclType	unsigned int		1902665	0					
ANR	1904813	Identifier	val		1902665	1					
ANR	1904814	IfStatement	"if ( IS_DIR ( mb_type , 0 , list ) )"		1902665	1					
ANR	1904815	Condition	"IS_DIR ( mb_type , 0 , list )"	525:23:10835:10858	1902665	0	True				
ANR	1904816	CallExpression	"IS_DIR ( mb_type , 0 , list )"		1902665	0					
ANR	1904817	Callee	IS_DIR		1902665	0					
ANR	1904818	Identifier	IS_DIR		1902665	0					
ANR	1904819	ArgumentList	mb_type		1902665	1					
ANR	1904820	Argument	mb_type		1902665	0					
ANR	1904821	Identifier	mb_type		1902665	0					
ANR	1904822	Argument	0		1902665	1					
ANR	1904823	PrimaryExpression	0		1902665	0					
ANR	1904824	Argument	list		1902665	2					
ANR	1904825	Identifier	list		1902665	0					
ANR	1904826	CompoundStatement		525:48:10817:10817	1902665	1					
ANR	1904827	ExpressionStatement	"val = get_te0_golomb ( & s -> gb , h -> ref_count [ list ] )"	527:24:10887:10934	1902665	0	True				
ANR	1904828	AssignmentExpression	"val = get_te0_golomb ( & s -> gb , h -> ref_count [ list ] )"		1902665	0		=			
ANR	1904829	Identifier	val		1902665	0					
ANR	1904830	CallExpression	"get_te0_golomb ( & s -> gb , h -> ref_count [ list ] )"		1902665	1					
ANR	1904831	Callee	get_te0_golomb		1902665	0					
ANR	1904832	Identifier	get_te0_golomb		1902665	0					
ANR	1904833	ArgumentList	& s -> gb		1902665	1					
ANR	1904834	Argument	& s -> gb		1902665	0					
ANR	1904835	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1904836	UnaryOperator	&		1902665	0					
ANR	1904837	PtrMemberAccess	s -> gb		1902665	1					
ANR	1904838	Identifier	s		1902665	0					
ANR	1904839	Identifier	gb		1902665	1					
ANR	1904840	Argument	h -> ref_count [ list ]		1902665	1					
ANR	1904841	ArrayIndexing	h -> ref_count [ list ]		1902665	0					
ANR	1904842	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1904843	Identifier	h		1902665	0					
ANR	1904844	Identifier	ref_count		1902665	1					
ANR	1904845	Identifier	list		1902665	1					
ANR	1904846	IfStatement	if ( val >= h -> ref_count [ list ] )		1902665	1					
ANR	1904847	Condition	val >= h -> ref_count [ list ]	529:27:10964:10988	1902665	0	True				
ANR	1904848	RelationalExpression	val >= h -> ref_count [ list ]		1902665	0		>=			
ANR	1904849	Identifier	val		1902665	0					
ANR	1904850	ArrayIndexing	h -> ref_count [ list ]		1902665	1					
ANR	1904851	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1904852	Identifier	h		1902665	0					
ANR	1904853	Identifier	ref_count		1902665	1					
ANR	1904854	Identifier	list		1902665	1					
ANR	1904855	CompoundStatement		529:53:10947:10947	1902665	1					
ANR	1904856	ExpressionStatement	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""ref %u overflow\\n"" , val )"	531:28:11021:11079	1902665	0	True				
ANR	1904857	CallExpression	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""ref %u overflow\\n"" , val )"		1902665	0					
ANR	1904858	Callee	av_log		1902665	0					
ANR	1904859	Identifier	av_log		1902665	0					
ANR	1904860	ArgumentList	h -> s . avctx		1902665	1					
ANR	1904861	Argument	h -> s . avctx		1902665	0					
ANR	1904862	MemberAccess	h -> s . avctx		1902665	0					
ANR	1904863	PtrMemberAccess	h -> s		1902665	0					
ANR	1904864	Identifier	h		1902665	0					
ANR	1904865	Identifier	s		1902665	1					
ANR	1904866	Identifier	avctx		1902665	1					
ANR	1904867	Argument	AV_LOG_ERROR		1902665	1					
ANR	1904868	Identifier	AV_LOG_ERROR		1902665	0					
ANR	1904869	Argument	"""ref %u overflow\\n"""		1902665	2					
ANR	1904870	PrimaryExpression	"""ref %u overflow\\n"""		1902665	0					
ANR	1904871	Argument	val		1902665	3					
ANR	1904872	Identifier	val		1902665	0					
ANR	1904873	ReturnStatement	return - 1 ;	533:28:11110:11119	1902665	1	True				
ANR	1904874	UnaryOperationExpression	- 1		1902665	0					
ANR	1904875	UnaryOperator	-		1902665	0					
ANR	1904876	PrimaryExpression	1		1902665	1					
ANR	1904877	ElseStatement	else		1902665	0					
ANR	1904878	ExpressionStatement	val = LIST_NOT_USED & 0xFF	539:24:11200:11223	1902665	0	True				
ANR	1904879	AssignmentExpression	val = LIST_NOT_USED & 0xFF		1902665	0		=			
ANR	1904880	Identifier	val		1902665	0					
ANR	1904881	BitAndExpression	LIST_NOT_USED & 0xFF		1902665	1		&			
ANR	1904882	Identifier	LIST_NOT_USED		1902665	0					
ANR	1904883	PrimaryExpression	0xFF		1902665	1					
ANR	1904884	ExpressionStatement	"fill_rectangle ( & h -> ref_cache [ list ] [ scan8 [ 0 ] ] , 4 , 4 , 8 , val , 1 )"	541:20:11246:11310	1902665	2	True				
ANR	1904885	CallExpression	"fill_rectangle ( & h -> ref_cache [ list ] [ scan8 [ 0 ] ] , 4 , 4 , 8 , val , 1 )"		1902665	0					
ANR	1904886	Callee	fill_rectangle		1902665	0					
ANR	1904887	Identifier	fill_rectangle		1902665	0					
ANR	1904888	ArgumentList	& h -> ref_cache [ list ] [ scan8 [ 0 ] ]		1902665	1					
ANR	1904889	Argument	& h -> ref_cache [ list ] [ scan8 [ 0 ] ]		1902665	0					
ANR	1904890	UnaryOperationExpression	& h -> ref_cache [ list ] [ scan8 [ 0 ] ]		1902665	0					
ANR	1904891	UnaryOperator	&		1902665	0					
ANR	1904892	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 0 ] ]		1902665	1					
ANR	1904893	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1904894	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904895	Identifier	h		1902665	0					
ANR	1904896	Identifier	ref_cache		1902665	1					
ANR	1904897	Identifier	list		1902665	1					
ANR	1904898	ArrayIndexing	scan8 [ 0 ]		1902665	1					
ANR	1904899	Identifier	scan8		1902665	0					
ANR	1904900	PrimaryExpression	0		1902665	1					
ANR	1904901	Argument	4		1902665	1					
ANR	1904902	PrimaryExpression	4		1902665	0					
ANR	1904903	Argument	4		1902665	2					
ANR	1904904	PrimaryExpression	4		1902665	0					
ANR	1904905	Argument	8		1902665	3					
ANR	1904906	PrimaryExpression	8		1902665	0					
ANR	1904907	Argument	val		1902665	4					
ANR	1904908	Identifier	val		1902665	0					
ANR	1904909	Argument	1		1902665	5					
ANR	1904910	PrimaryExpression	1		1902665	0					
ANR	1904911	ForStatement	for ( list = 0 ; list < h -> list_count ; list ++ )		1902665	1					
ANR	1904912	ForInit	list = 0 ;	545:16:11344:11350	1902665	0	True				
ANR	1904913	AssignmentExpression	list = 0		1902665	0		=			
ANR	1904914	Identifier	list		1902665	0					
ANR	1904915	PrimaryExpression	0		1902665	1					
ANR	1904916	Condition	list < h -> list_count	545:24:11352:11369	1902665	1	True				
ANR	1904917	RelationalExpression	list < h -> list_count		1902665	0		<			
ANR	1904918	Identifier	list		1902665	0					
ANR	1904919	PtrMemberAccess	h -> list_count		1902665	1					
ANR	1904920	Identifier	h		1902665	0					
ANR	1904921	Identifier	list_count		1902665	1					
ANR	1904922	PostIncDecOperationExpression	list ++	545:44:11372:11377	1902665	2	True				
ANR	1904923	Identifier	list		1902665	0					
ANR	1904924	IncDec	++		1902665	1					
ANR	1904925	CompoundStatement		547:16:11355:11371	1902665	3					
ANR	1904926	IdentifierDeclStatement	unsigned int val ;	547:16:11398:11414	1902665	0	True				
ANR	1904927	IdentifierDecl	val		1902665	0					
ANR	1904928	IdentifierDeclType	unsigned int		1902665	0					
ANR	1904929	Identifier	val		1902665	1					
ANR	1904930	IfStatement	"if ( IS_DIR ( mb_type , 0 , list ) )"		1902665	1					
ANR	1904931	Condition	"IS_DIR ( mb_type , 0 , list )"	549:19:11436:11459	1902665	0	True				
ANR	1904932	CallExpression	"IS_DIR ( mb_type , 0 , list )"		1902665	0					
ANR	1904933	Callee	IS_DIR		1902665	0					
ANR	1904934	Identifier	IS_DIR		1902665	0					
ANR	1904935	ArgumentList	mb_type		1902665	1					
ANR	1904936	Argument	mb_type		1902665	0					
ANR	1904937	Identifier	mb_type		1902665	0					
ANR	1904938	Argument	0		1902665	1					
ANR	1904939	PrimaryExpression	0		1902665	0					
ANR	1904940	Argument	list		1902665	2					
ANR	1904941	Identifier	list		1902665	0					
ANR	1904942	CompoundStatement		549:44:11418:11418	1902665	1					
ANR	1904943	ExpressionStatement	"pred_motion ( h , 0 , 4 , list , h -> ref_cache [ list ] [ scan8 [ 0 ] ] , & mx , & my )"	551:20:11484:11552	1902665	0	True				
ANR	1904944	CallExpression	"pred_motion ( h , 0 , 4 , list , h -> ref_cache [ list ] [ scan8 [ 0 ] ] , & mx , & my )"		1902665	0					
ANR	1904945	Callee	pred_motion		1902665	0					
ANR	1904946	Identifier	pred_motion		1902665	0					
ANR	1904947	ArgumentList	h		1902665	1					
ANR	1904948	Argument	h		1902665	0					
ANR	1904949	Identifier	h		1902665	0					
ANR	1904950	Argument	0		1902665	1					
ANR	1904951	PrimaryExpression	0		1902665	0					
ANR	1904952	Argument	4		1902665	2					
ANR	1904953	PrimaryExpression	4		1902665	0					
ANR	1904954	Argument	list		1902665	3					
ANR	1904955	Identifier	list		1902665	0					
ANR	1904956	Argument	h -> ref_cache [ list ] [ scan8 [ 0 ] ]		1902665	4					
ANR	1904957	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 0 ] ]		1902665	0					
ANR	1904958	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1904959	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1904960	Identifier	h		1902665	0					
ANR	1904961	Identifier	ref_cache		1902665	1					
ANR	1904962	Identifier	list		1902665	1					
ANR	1904963	ArrayIndexing	scan8 [ 0 ]		1902665	1					
ANR	1904964	Identifier	scan8		1902665	0					
ANR	1904965	PrimaryExpression	0		1902665	1					
ANR	1904966	Argument	& mx		1902665	5					
ANR	1904967	UnaryOperationExpression	& mx		1902665	0					
ANR	1904968	UnaryOperator	&		1902665	0					
ANR	1904969	Identifier	mx		1902665	1					
ANR	1904970	Argument	& my		1902665	6					
ANR	1904971	UnaryOperationExpression	& my		1902665	0					
ANR	1904972	UnaryOperator	&		1902665	0					
ANR	1904973	Identifier	my		1902665	1					
ANR	1904974	ExpressionStatement	mx += get_se_golomb ( & s -> gb )	553:20:11575:11602	1902665	1	True				
ANR	1904975	AssignmentExpression	mx += get_se_golomb ( & s -> gb )		1902665	0		+=			
ANR	1904976	Identifier	mx		1902665	0					
ANR	1904977	CallExpression	get_se_golomb ( & s -> gb )		1902665	1					
ANR	1904978	Callee	get_se_golomb		1902665	0					
ANR	1904979	Identifier	get_se_golomb		1902665	0					
ANR	1904980	ArgumentList	& s -> gb		1902665	1					
ANR	1904981	Argument	& s -> gb		1902665	0					
ANR	1904982	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1904983	UnaryOperator	&		1902665	0					
ANR	1904984	PtrMemberAccess	s -> gb		1902665	1					
ANR	1904985	Identifier	s		1902665	0					
ANR	1904986	Identifier	gb		1902665	1					
ANR	1904987	ExpressionStatement	my += get_se_golomb ( & s -> gb )	555:20:11625:11652	1902665	2	True				
ANR	1904988	AssignmentExpression	my += get_se_golomb ( & s -> gb )		1902665	0		+=			
ANR	1904989	Identifier	my		1902665	0					
ANR	1904990	CallExpression	get_se_golomb ( & s -> gb )		1902665	1					
ANR	1904991	Callee	get_se_golomb		1902665	0					
ANR	1904992	Identifier	get_se_golomb		1902665	0					
ANR	1904993	ArgumentList	& s -> gb		1902665	1					
ANR	1904994	Argument	& s -> gb		1902665	0					
ANR	1904995	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1904996	UnaryOperator	&		1902665	0					
ANR	1904997	PtrMemberAccess	s -> gb		1902665	1					
ANR	1904998	Identifier	s		1902665	0					
ANR	1904999	Identifier	gb		1902665	1					
ANR	1905000	ExpressionStatement	"tprintf ( s -> avctx , ""final mv:%d %d\\n"" , mx , my )"	557:20:11675:11720	1902665	3	True				
ANR	1905001	CallExpression	"tprintf ( s -> avctx , ""final mv:%d %d\\n"" , mx , my )"		1902665	0					
ANR	1905002	Callee	tprintf		1902665	0					
ANR	1905003	Identifier	tprintf		1902665	0					
ANR	1905004	ArgumentList	s -> avctx		1902665	1					
ANR	1905005	Argument	s -> avctx		1902665	0					
ANR	1905006	PtrMemberAccess	s -> avctx		1902665	0					
ANR	1905007	Identifier	s		1902665	0					
ANR	1905008	Identifier	avctx		1902665	1					
ANR	1905009	Argument	"""final mv:%d %d\\n"""		1902665	1					
ANR	1905010	PrimaryExpression	"""final mv:%d %d\\n"""		1902665	0					
ANR	1905011	Argument	mx		1902665	2					
ANR	1905012	Identifier	mx		1902665	0					
ANR	1905013	Argument	my		1902665	3					
ANR	1905014	Identifier	my		1902665	0					
ANR	1905015	ExpressionStatement	"val = pack16to32 ( mx , my )"	561:20:11745:11767	1902665	4	True				
ANR	1905016	AssignmentExpression	"val = pack16to32 ( mx , my )"		1902665	0		=			
ANR	1905017	Identifier	val		1902665	0					
ANR	1905018	CallExpression	"pack16to32 ( mx , my )"		1902665	1					
ANR	1905019	Callee	pack16to32		1902665	0					
ANR	1905020	Identifier	pack16to32		1902665	0					
ANR	1905021	ArgumentList	mx		1902665	1					
ANR	1905022	Argument	mx		1902665	0					
ANR	1905023	Identifier	mx		1902665	0					
ANR	1905024	Argument	my		1902665	1					
ANR	1905025	Identifier	my		1902665	0					
ANR	1905026	ElseStatement	else		1902665	0					
ANR	1905027	ExpressionStatement	val = 0	565:20:11813:11818	1902665	0	True				
ANR	1905028	AssignmentExpression	val = 0		1902665	0		=			
ANR	1905029	Identifier	val		1902665	0					
ANR	1905030	PrimaryExpression	0		1902665	1					
ANR	1905031	ExpressionStatement	"fill_rectangle ( h -> mv_cache [ list ] [ scan8 [ 0 ] ] , 4 , 4 , 8 , val , 4 )"	567:16:11837:11899	1902665	2	True				
ANR	1905032	CallExpression	"fill_rectangle ( h -> mv_cache [ list ] [ scan8 [ 0 ] ] , 4 , 4 , 8 , val , 4 )"		1902665	0					
ANR	1905033	Callee	fill_rectangle		1902665	0					
ANR	1905034	Identifier	fill_rectangle		1902665	0					
ANR	1905035	ArgumentList	h -> mv_cache [ list ] [ scan8 [ 0 ] ]		1902665	1					
ANR	1905036	Argument	h -> mv_cache [ list ] [ scan8 [ 0 ] ]		1902665	0					
ANR	1905037	ArrayIndexing	h -> mv_cache [ list ] [ scan8 [ 0 ] ]		1902665	0					
ANR	1905038	ArrayIndexing	h -> mv_cache [ list ]		1902665	0					
ANR	1905039	PtrMemberAccess	h -> mv_cache		1902665	0					
ANR	1905040	Identifier	h		1902665	0					
ANR	1905041	Identifier	mv_cache		1902665	1					
ANR	1905042	Identifier	list		1902665	1					
ANR	1905043	ArrayIndexing	scan8 [ 0 ]		1902665	1					
ANR	1905044	Identifier	scan8		1902665	0					
ANR	1905045	PrimaryExpression	0		1902665	1					
ANR	1905046	Argument	4		1902665	1					
ANR	1905047	PrimaryExpression	4		1902665	0					
ANR	1905048	Argument	4		1902665	2					
ANR	1905049	PrimaryExpression	4		1902665	0					
ANR	1905050	Argument	8		1902665	3					
ANR	1905051	PrimaryExpression	8		1902665	0					
ANR	1905052	Argument	val		1902665	4					
ANR	1905053	Identifier	val		1902665	0					
ANR	1905054	Argument	4		1902665	5					
ANR	1905055	PrimaryExpression	4		1902665	0					
ANR	1905056	ElseStatement	else		1902665	0					
ANR	1905057	IfStatement	if ( IS_16X8 ( mb_type ) )		1902665	0					
ANR	1905058	Condition	IS_16X8 ( mb_type )	573:16:11944:11959	1902665	0	True				
ANR	1905059	CallExpression	IS_16X8 ( mb_type )		1902665	0					
ANR	1905060	Callee	IS_16X8		1902665	0					
ANR	1905061	Identifier	IS_16X8		1902665	0					
ANR	1905062	ArgumentList	mb_type		1902665	1					
ANR	1905063	Argument	mb_type		1902665	0					
ANR	1905064	Identifier	mb_type		1902665	0					
ANR	1905065	CompoundStatement		573:33:11918:11918	1902665	1					
ANR	1905066	ForStatement	for ( list = 0 ; list < h -> list_count ; list ++ )		1902665	0					
ANR	1905067	ForInit	list = 0 ;	575:16:11980:11986	1902665	0	True				
ANR	1905068	AssignmentExpression	list = 0		1902665	0		=			
ANR	1905069	Identifier	list		1902665	0					
ANR	1905070	PrimaryExpression	0		1902665	1					
ANR	1905071	Condition	list < h -> list_count	575:24:11988:12005	1902665	1	True				
ANR	1905072	RelationalExpression	list < h -> list_count		1902665	0		<			
ANR	1905073	Identifier	list		1902665	0					
ANR	1905074	PtrMemberAccess	h -> list_count		1902665	1					
ANR	1905075	Identifier	h		1902665	0					
ANR	1905076	Identifier	list_count		1902665	1					
ANR	1905077	PostIncDecOperationExpression	list ++	575:44:12008:12013	1902665	2	True				
ANR	1905078	Identifier	list		1902665	0					
ANR	1905079	IncDec	++		1902665	1					
ANR	1905080	CompoundStatement		575:51:11972:11972	1902665	3					
ANR	1905081	ForStatement	for ( i = 0 ; i < 2 ; i ++ )		1902665	0					
ANR	1905082	ForInit	i = 0 ;	577:24:12042:12045	1902665	0	True				
ANR	1905083	AssignmentExpression	i = 0		1902665	0		=			
ANR	1905084	Identifier	i		1902665	0					
ANR	1905085	PrimaryExpression	0		1902665	1					
ANR	1905086	Condition	i < 2	577:29:12047:12049	1902665	1	True				
ANR	1905087	RelationalExpression	i < 2		1902665	0		<			
ANR	1905088	Identifier	i		1902665	0					
ANR	1905089	PrimaryExpression	2		1902665	1					
ANR	1905090	PostIncDecOperationExpression	i ++	577:34:12052:12054	1902665	2	True				
ANR	1905091	Identifier	i		1902665	0					
ANR	1905092	IncDec	++		1902665	1					
ANR	1905093	CompoundStatement		579:24:12040:12056	1902665	3					
ANR	1905094	IdentifierDeclStatement	unsigned int val ;	579:24:12083:12099	1902665	0	True				
ANR	1905095	IdentifierDecl	val		1902665	0					
ANR	1905096	IdentifierDeclType	unsigned int		1902665	0					
ANR	1905097	Identifier	val		1902665	1					
ANR	1905098	IfStatement	"if ( IS_DIR ( mb_type , i , list ) )"		1902665	1					
ANR	1905099	Condition	"IS_DIR ( mb_type , i , list )"	581:27:12129:12152	1902665	0	True				
ANR	1905100	CallExpression	"IS_DIR ( mb_type , i , list )"		1902665	0					
ANR	1905101	Callee	IS_DIR		1902665	0					
ANR	1905102	Identifier	IS_DIR		1902665	0					
ANR	1905103	ArgumentList	mb_type		1902665	1					
ANR	1905104	Argument	mb_type		1902665	0					
ANR	1905105	Identifier	mb_type		1902665	0					
ANR	1905106	Argument	i		1902665	1					
ANR	1905107	Identifier	i		1902665	0					
ANR	1905108	Argument	list		1902665	2					
ANR	1905109	Identifier	list		1902665	0					
ANR	1905110	CompoundStatement		581:52:12111:12111	1902665	1					
ANR	1905111	ExpressionStatement	"val = get_te0_golomb ( & s -> gb , h -> ref_count [ list ] )"	583:28:12185:12232	1902665	0	True				
ANR	1905112	AssignmentExpression	"val = get_te0_golomb ( & s -> gb , h -> ref_count [ list ] )"		1902665	0		=			
ANR	1905113	Identifier	val		1902665	0					
ANR	1905114	CallExpression	"get_te0_golomb ( & s -> gb , h -> ref_count [ list ] )"		1902665	1					
ANR	1905115	Callee	get_te0_golomb		1902665	0					
ANR	1905116	Identifier	get_te0_golomb		1902665	0					
ANR	1905117	ArgumentList	& s -> gb		1902665	1					
ANR	1905118	Argument	& s -> gb		1902665	0					
ANR	1905119	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1905120	UnaryOperator	&		1902665	0					
ANR	1905121	PtrMemberAccess	s -> gb		1902665	1					
ANR	1905122	Identifier	s		1902665	0					
ANR	1905123	Identifier	gb		1902665	1					
ANR	1905124	Argument	h -> ref_count [ list ]		1902665	1					
ANR	1905125	ArrayIndexing	h -> ref_count [ list ]		1902665	0					
ANR	1905126	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1905127	Identifier	h		1902665	0					
ANR	1905128	Identifier	ref_count		1902665	1					
ANR	1905129	Identifier	list		1902665	1					
ANR	1905130	IfStatement	if ( val >= h -> ref_count [ list ] )		1902665	1					
ANR	1905131	Condition	val >= h -> ref_count [ list ]	585:31:12266:12290	1902665	0	True				
ANR	1905132	RelationalExpression	val >= h -> ref_count [ list ]		1902665	0		>=			
ANR	1905133	Identifier	val		1902665	0					
ANR	1905134	ArrayIndexing	h -> ref_count [ list ]		1902665	1					
ANR	1905135	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1905136	Identifier	h		1902665	0					
ANR	1905137	Identifier	ref_count		1902665	1					
ANR	1905138	Identifier	list		1902665	1					
ANR	1905139	CompoundStatement		585:57:12249:12249	1902665	1					
ANR	1905140	ExpressionStatement	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""ref %u overflow\\n"" , val )"	587:32:12327:12385	1902665	0	True				
ANR	1905141	CallExpression	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""ref %u overflow\\n"" , val )"		1902665	0					
ANR	1905142	Callee	av_log		1902665	0					
ANR	1905143	Identifier	av_log		1902665	0					
ANR	1905144	ArgumentList	h -> s . avctx		1902665	1					
ANR	1905145	Argument	h -> s . avctx		1902665	0					
ANR	1905146	MemberAccess	h -> s . avctx		1902665	0					
ANR	1905147	PtrMemberAccess	h -> s		1902665	0					
ANR	1905148	Identifier	h		1902665	0					
ANR	1905149	Identifier	s		1902665	1					
ANR	1905150	Identifier	avctx		1902665	1					
ANR	1905151	Argument	AV_LOG_ERROR		1902665	1					
ANR	1905152	Identifier	AV_LOG_ERROR		1902665	0					
ANR	1905153	Argument	"""ref %u overflow\\n"""		1902665	2					
ANR	1905154	PrimaryExpression	"""ref %u overflow\\n"""		1902665	0					
ANR	1905155	Argument	val		1902665	3					
ANR	1905156	Identifier	val		1902665	0					
ANR	1905157	ReturnStatement	return - 1 ;	589:32:12420:12429	1902665	1	True				
ANR	1905158	UnaryOperationExpression	- 1		1902665	0					
ANR	1905159	UnaryOperator	-		1902665	0					
ANR	1905160	PrimaryExpression	1		1902665	1					
ANR	1905161	ElseStatement	else		1902665	0					
ANR	1905162	ExpressionStatement	val = LIST_NOT_USED & 0xFF	595:28:12522:12545	1902665	0	True				
ANR	1905163	AssignmentExpression	val = LIST_NOT_USED & 0xFF		1902665	0		=			
ANR	1905164	Identifier	val		1902665	0					
ANR	1905165	BitAndExpression	LIST_NOT_USED & 0xFF		1902665	1		&			
ANR	1905166	Identifier	LIST_NOT_USED		1902665	0					
ANR	1905167	PrimaryExpression	0xFF		1902665	1					
ANR	1905168	ExpressionStatement	"fill_rectangle ( & h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ] , 4 , 2 , 8 , val , 1 )"	597:24:12572:12643	1902665	2	True				
ANR	1905169	CallExpression	"fill_rectangle ( & h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ] , 4 , 2 , 8 , val , 1 )"		1902665	0					
ANR	1905170	Callee	fill_rectangle		1902665	0					
ANR	1905171	Identifier	fill_rectangle		1902665	0					
ANR	1905172	ArgumentList	& h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ]		1902665	1					
ANR	1905173	Argument	& h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ]		1902665	0					
ANR	1905174	UnaryOperationExpression	& h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ]		1902665	0					
ANR	1905175	UnaryOperator	&		1902665	0					
ANR	1905176	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ]		1902665	1					
ANR	1905177	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1905178	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1905179	Identifier	h		1902665	0					
ANR	1905180	Identifier	ref_cache		1902665	1					
ANR	1905181	Identifier	list		1902665	1					
ANR	1905182	AdditiveExpression	scan8 [ 0 ] + 16 * i		1902665	1		+			
ANR	1905183	ArrayIndexing	scan8 [ 0 ]		1902665	0					
ANR	1905184	Identifier	scan8		1902665	0					
ANR	1905185	PrimaryExpression	0		1902665	1					
ANR	1905186	MultiplicativeExpression	16 * i		1902665	1		*			
ANR	1905187	PrimaryExpression	16		1902665	0					
ANR	1905188	Identifier	i		1902665	1					
ANR	1905189	Argument	4		1902665	1					
ANR	1905190	PrimaryExpression	4		1902665	0					
ANR	1905191	Argument	2		1902665	2					
ANR	1905192	PrimaryExpression	2		1902665	0					
ANR	1905193	Argument	8		1902665	3					
ANR	1905194	PrimaryExpression	8		1902665	0					
ANR	1905195	Argument	val		1902665	4					
ANR	1905196	Identifier	val		1902665	0					
ANR	1905197	Argument	1		1902665	5					
ANR	1905198	PrimaryExpression	1		1902665	0					
ANR	1905199	ForStatement	for ( list = 0 ; list < h -> list_count ; list ++ )		1902665	1					
ANR	1905200	ForInit	list = 0 ;	603:16:12700:12706	1902665	0	True				
ANR	1905201	AssignmentExpression	list = 0		1902665	0		=			
ANR	1905202	Identifier	list		1902665	0					
ANR	1905203	PrimaryExpression	0		1902665	1					
ANR	1905204	Condition	list < h -> list_count	603:24:12708:12725	1902665	1	True				
ANR	1905205	RelationalExpression	list < h -> list_count		1902665	0		<			
ANR	1905206	Identifier	list		1902665	0					
ANR	1905207	PtrMemberAccess	h -> list_count		1902665	1					
ANR	1905208	Identifier	h		1902665	0					
ANR	1905209	Identifier	list_count		1902665	1					
ANR	1905210	PostIncDecOperationExpression	list ++	603:44:12728:12733	1902665	2	True				
ANR	1905211	Identifier	list		1902665	0					
ANR	1905212	IncDec	++		1902665	1					
ANR	1905213	CompoundStatement		603:51:12692:12692	1902665	3					
ANR	1905214	ForStatement	for ( i = 0 ; i < 2 ; i ++ )		1902665	0					
ANR	1905215	ForInit	i = 0 ;	605:20:12758:12761	1902665	0	True				
ANR	1905216	AssignmentExpression	i = 0		1902665	0		=			
ANR	1905217	Identifier	i		1902665	0					
ANR	1905218	PrimaryExpression	0		1902665	1					
ANR	1905219	Condition	i < 2	605:25:12763:12765	1902665	1	True				
ANR	1905220	RelationalExpression	i < 2		1902665	0		<			
ANR	1905221	Identifier	i		1902665	0					
ANR	1905222	PrimaryExpression	2		1902665	1					
ANR	1905223	PostIncDecOperationExpression	i ++	605:30:12768:12770	1902665	2	True				
ANR	1905224	Identifier	i		1902665	0					
ANR	1905225	IncDec	++		1902665	1					
ANR	1905226	CompoundStatement		607:20:12752:12768	1902665	3					
ANR	1905227	IdentifierDeclStatement	unsigned int val ;	607:20:12795:12811	1902665	0	True				
ANR	1905228	IdentifierDecl	val		1902665	0					
ANR	1905229	IdentifierDeclType	unsigned int		1902665	0					
ANR	1905230	Identifier	val		1902665	1					
ANR	1905231	IfStatement	"if ( IS_DIR ( mb_type , i , list ) )"		1902665	1					
ANR	1905232	Condition	"IS_DIR ( mb_type , i , list )"	609:23:12837:12860	1902665	0	True				
ANR	1905233	CallExpression	"IS_DIR ( mb_type , i , list )"		1902665	0					
ANR	1905234	Callee	IS_DIR		1902665	0					
ANR	1905235	Identifier	IS_DIR		1902665	0					
ANR	1905236	ArgumentList	mb_type		1902665	1					
ANR	1905237	Argument	mb_type		1902665	0					
ANR	1905238	Identifier	mb_type		1902665	0					
ANR	1905239	Argument	i		1902665	1					
ANR	1905240	Identifier	i		1902665	0					
ANR	1905241	Argument	list		1902665	2					
ANR	1905242	Identifier	list		1902665	0					
ANR	1905243	CompoundStatement		609:48:12819:12819	1902665	1					
ANR	1905244	ExpressionStatement	"pred_16x8_motion ( h , 8 * i , list , h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ] , & mx , & my )"	611:24:12889:12966	1902665	0	True				
ANR	1905245	CallExpression	"pred_16x8_motion ( h , 8 * i , list , h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ] , & mx , & my )"		1902665	0					
ANR	1905246	Callee	pred_16x8_motion		1902665	0					
ANR	1905247	Identifier	pred_16x8_motion		1902665	0					
ANR	1905248	ArgumentList	h		1902665	1					
ANR	1905249	Argument	h		1902665	0					
ANR	1905250	Identifier	h		1902665	0					
ANR	1905251	Argument	8 * i		1902665	1					
ANR	1905252	MultiplicativeExpression	8 * i		1902665	0		*			
ANR	1905253	PrimaryExpression	8		1902665	0					
ANR	1905254	Identifier	i		1902665	1					
ANR	1905255	Argument	list		1902665	2					
ANR	1905256	Identifier	list		1902665	0					
ANR	1905257	Argument	h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ]		1902665	3					
ANR	1905258	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 0 ] + 16 * i ]		1902665	0					
ANR	1905259	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1905260	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1905261	Identifier	h		1902665	0					
ANR	1905262	Identifier	ref_cache		1902665	1					
ANR	1905263	Identifier	list		1902665	1					
ANR	1905264	AdditiveExpression	scan8 [ 0 ] + 16 * i		1902665	1		+			
ANR	1905265	ArrayIndexing	scan8 [ 0 ]		1902665	0					
ANR	1905266	Identifier	scan8		1902665	0					
ANR	1905267	PrimaryExpression	0		1902665	1					
ANR	1905268	MultiplicativeExpression	16 * i		1902665	1		*			
ANR	1905269	PrimaryExpression	16		1902665	0					
ANR	1905270	Identifier	i		1902665	1					
ANR	1905271	Argument	& mx		1902665	4					
ANR	1905272	UnaryOperationExpression	& mx		1902665	0					
ANR	1905273	UnaryOperator	&		1902665	0					
ANR	1905274	Identifier	mx		1902665	1					
ANR	1905275	Argument	& my		1902665	5					
ANR	1905276	UnaryOperationExpression	& my		1902665	0					
ANR	1905277	UnaryOperator	&		1902665	0					
ANR	1905278	Identifier	my		1902665	1					
ANR	1905279	ExpressionStatement	mx += get_se_golomb ( & s -> gb )	613:24:12993:13020	1902665	1	True				
ANR	1905280	AssignmentExpression	mx += get_se_golomb ( & s -> gb )		1902665	0		+=			
ANR	1905281	Identifier	mx		1902665	0					
ANR	1905282	CallExpression	get_se_golomb ( & s -> gb )		1902665	1					
ANR	1905283	Callee	get_se_golomb		1902665	0					
ANR	1905284	Identifier	get_se_golomb		1902665	0					
ANR	1905285	ArgumentList	& s -> gb		1902665	1					
ANR	1905286	Argument	& s -> gb		1902665	0					
ANR	1905287	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1905288	UnaryOperator	&		1902665	0					
ANR	1905289	PtrMemberAccess	s -> gb		1902665	1					
ANR	1905290	Identifier	s		1902665	0					
ANR	1905291	Identifier	gb		1902665	1					
ANR	1905292	ExpressionStatement	my += get_se_golomb ( & s -> gb )	615:24:13047:13074	1902665	2	True				
ANR	1905293	AssignmentExpression	my += get_se_golomb ( & s -> gb )		1902665	0		+=			
ANR	1905294	Identifier	my		1902665	0					
ANR	1905295	CallExpression	get_se_golomb ( & s -> gb )		1902665	1					
ANR	1905296	Callee	get_se_golomb		1902665	0					
ANR	1905297	Identifier	get_se_golomb		1902665	0					
ANR	1905298	ArgumentList	& s -> gb		1902665	1					
ANR	1905299	Argument	& s -> gb		1902665	0					
ANR	1905300	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1905301	UnaryOperator	&		1902665	0					
ANR	1905302	PtrMemberAccess	s -> gb		1902665	1					
ANR	1905303	Identifier	s		1902665	0					
ANR	1905304	Identifier	gb		1902665	1					
ANR	1905305	ExpressionStatement	"tprintf ( s -> avctx , ""final mv:%d %d\\n"" , mx , my )"	617:24:13101:13146	1902665	3	True				
ANR	1905306	CallExpression	"tprintf ( s -> avctx , ""final mv:%d %d\\n"" , mx , my )"		1902665	0					
ANR	1905307	Callee	tprintf		1902665	0					
ANR	1905308	Identifier	tprintf		1902665	0					
ANR	1905309	ArgumentList	s -> avctx		1902665	1					
ANR	1905310	Argument	s -> avctx		1902665	0					
ANR	1905311	PtrMemberAccess	s -> avctx		1902665	0					
ANR	1905312	Identifier	s		1902665	0					
ANR	1905313	Identifier	avctx		1902665	1					
ANR	1905314	Argument	"""final mv:%d %d\\n"""		1902665	1					
ANR	1905315	PrimaryExpression	"""final mv:%d %d\\n"""		1902665	0					
ANR	1905316	Argument	mx		1902665	2					
ANR	1905317	Identifier	mx		1902665	0					
ANR	1905318	Argument	my		1902665	3					
ANR	1905319	Identifier	my		1902665	0					
ANR	1905320	ExpressionStatement	"val = pack16to32 ( mx , my )"	621:24:13175:13197	1902665	4	True				
ANR	1905321	AssignmentExpression	"val = pack16to32 ( mx , my )"		1902665	0		=			
ANR	1905322	Identifier	val		1902665	0					
ANR	1905323	CallExpression	"pack16to32 ( mx , my )"		1902665	1					
ANR	1905324	Callee	pack16to32		1902665	0					
ANR	1905325	Identifier	pack16to32		1902665	0					
ANR	1905326	ArgumentList	mx		1902665	1					
ANR	1905327	Argument	mx		1902665	0					
ANR	1905328	Identifier	mx		1902665	0					
ANR	1905329	Argument	my		1902665	1					
ANR	1905330	Identifier	my		1902665	0					
ANR	1905331	ElseStatement	else		1902665	0					
ANR	1905332	ExpressionStatement	val = 0	625:24:13251:13256	1902665	0	True				
ANR	1905333	AssignmentExpression	val = 0		1902665	0		=			
ANR	1905334	Identifier	val		1902665	0					
ANR	1905335	PrimaryExpression	0		1902665	1					
ANR	1905336	ExpressionStatement	"fill_rectangle ( h -> mv_cache [ list ] [ scan8 [ 0 ] + 16 * i ] , 4 , 2 , 8 , val , 4 )"	627:20:13279:13348	1902665	2	True				
ANR	1905337	CallExpression	"fill_rectangle ( h -> mv_cache [ list ] [ scan8 [ 0 ] + 16 * i ] , 4 , 2 , 8 , val , 4 )"		1902665	0					
ANR	1905338	Callee	fill_rectangle		1902665	0					
ANR	1905339	Identifier	fill_rectangle		1902665	0					
ANR	1905340	ArgumentList	h -> mv_cache [ list ] [ scan8 [ 0 ] + 16 * i ]		1902665	1					
ANR	1905341	Argument	h -> mv_cache [ list ] [ scan8 [ 0 ] + 16 * i ]		1902665	0					
ANR	1905342	ArrayIndexing	h -> mv_cache [ list ] [ scan8 [ 0 ] + 16 * i ]		1902665	0					
ANR	1905343	ArrayIndexing	h -> mv_cache [ list ]		1902665	0					
ANR	1905344	PtrMemberAccess	h -> mv_cache		1902665	0					
ANR	1905345	Identifier	h		1902665	0					
ANR	1905346	Identifier	mv_cache		1902665	1					
ANR	1905347	Identifier	list		1902665	1					
ANR	1905348	AdditiveExpression	scan8 [ 0 ] + 16 * i		1902665	1		+			
ANR	1905349	ArrayIndexing	scan8 [ 0 ]		1902665	0					
ANR	1905350	Identifier	scan8		1902665	0					
ANR	1905351	PrimaryExpression	0		1902665	1					
ANR	1905352	MultiplicativeExpression	16 * i		1902665	1		*			
ANR	1905353	PrimaryExpression	16		1902665	0					
ANR	1905354	Identifier	i		1902665	1					
ANR	1905355	Argument	4		1902665	1					
ANR	1905356	PrimaryExpression	4		1902665	0					
ANR	1905357	Argument	2		1902665	2					
ANR	1905358	PrimaryExpression	2		1902665	0					
ANR	1905359	Argument	8		1902665	3					
ANR	1905360	PrimaryExpression	8		1902665	0					
ANR	1905361	Argument	val		1902665	4					
ANR	1905362	Identifier	val		1902665	0					
ANR	1905363	Argument	4		1902665	5					
ANR	1905364	PrimaryExpression	4		1902665	0					
ANR	1905365	ElseStatement	else		1902665	0					
ANR	1905366	CompoundStatement		633:13:13355:13355	1902665	0					
ANR	1905367	ExpressionStatement	assert ( IS_8X16 ( mb_type ) )	635:12:13413:13437	1902665	0	True				
ANR	1905368	CallExpression	assert ( IS_8X16 ( mb_type ) )		1902665	0					
ANR	1905369	Callee	assert		1902665	0					
ANR	1905370	Identifier	assert		1902665	0					
ANR	1905371	ArgumentList	IS_8X16 ( mb_type )		1902665	1					
ANR	1905372	Argument	IS_8X16 ( mb_type )		1902665	0					
ANR	1905373	CallExpression	IS_8X16 ( mb_type )		1902665	0					
ANR	1905374	Callee	IS_8X16		1902665	0					
ANR	1905375	Identifier	IS_8X16		1902665	0					
ANR	1905376	ArgumentList	mb_type		1902665	1					
ANR	1905377	Argument	mb_type		1902665	0					
ANR	1905378	Identifier	mb_type		1902665	0					
ANR	1905379	ForStatement	for ( list = 0 ; list < h -> list_count ; list ++ )		1902665	1					
ANR	1905380	ForInit	list = 0 ;	637:16:13456:13462	1902665	0	True				
ANR	1905381	AssignmentExpression	list = 0		1902665	0		=			
ANR	1905382	Identifier	list		1902665	0					
ANR	1905383	PrimaryExpression	0		1902665	1					
ANR	1905384	Condition	list < h -> list_count	637:24:13464:13481	1902665	1	True				
ANR	1905385	RelationalExpression	list < h -> list_count		1902665	0		<			
ANR	1905386	Identifier	list		1902665	0					
ANR	1905387	PtrMemberAccess	h -> list_count		1902665	1					
ANR	1905388	Identifier	h		1902665	0					
ANR	1905389	Identifier	list_count		1902665	1					
ANR	1905390	PostIncDecOperationExpression	list ++	637:44:13484:13489	1902665	2	True				
ANR	1905391	Identifier	list		1902665	0					
ANR	1905392	IncDec	++		1902665	1					
ANR	1905393	CompoundStatement		637:51:13448:13448	1902665	3					
ANR	1905394	ForStatement	for ( i = 0 ; i < 2 ; i ++ )		1902665	0					
ANR	1905395	ForInit	i = 0 ;	639:24:13518:13521	1902665	0	True				
ANR	1905396	AssignmentExpression	i = 0		1902665	0		=			
ANR	1905397	Identifier	i		1902665	0					
ANR	1905398	PrimaryExpression	0		1902665	1					
ANR	1905399	Condition	i < 2	639:29:13523:13525	1902665	1	True				
ANR	1905400	RelationalExpression	i < 2		1902665	0		<			
ANR	1905401	Identifier	i		1902665	0					
ANR	1905402	PrimaryExpression	2		1902665	1					
ANR	1905403	PostIncDecOperationExpression	i ++	639:34:13528:13530	1902665	2	True				
ANR	1905404	Identifier	i		1902665	0					
ANR	1905405	IncDec	++		1902665	1					
ANR	1905406	CompoundStatement		641:24:13516:13532	1902665	3					
ANR	1905407	IdentifierDeclStatement	unsigned int val ;	641:24:13559:13575	1902665	0	True				
ANR	1905408	IdentifierDecl	val		1902665	0					
ANR	1905409	IdentifierDeclType	unsigned int		1902665	0					
ANR	1905410	Identifier	val		1902665	1					
ANR	1905411	IfStatement	"if ( IS_DIR ( mb_type , i , list ) )"		1902665	1					
ANR	1905412	Condition	"IS_DIR ( mb_type , i , list )"	643:27:13605:13628	1902665	0	True				
ANR	1905413	CallExpression	"IS_DIR ( mb_type , i , list )"		1902665	0					
ANR	1905414	Callee	IS_DIR		1902665	0					
ANR	1905415	Identifier	IS_DIR		1902665	0					
ANR	1905416	ArgumentList	mb_type		1902665	1					
ANR	1905417	Argument	mb_type		1902665	0					
ANR	1905418	Identifier	mb_type		1902665	0					
ANR	1905419	Argument	i		1902665	1					
ANR	1905420	Identifier	i		1902665	0					
ANR	1905421	Argument	list		1902665	2					
ANR	1905422	Identifier	list		1902665	0					
ANR	1905423	CompoundStatement		643:52:13587:13587	1902665	1					
ANR	1905424	ExpressionStatement	"val = get_te0_golomb ( & s -> gb , h -> ref_count [ list ] )"	645:28:13678:13725	1902665	0	True				
ANR	1905425	AssignmentExpression	"val = get_te0_golomb ( & s -> gb , h -> ref_count [ list ] )"		1902665	0		=			
ANR	1905426	Identifier	val		1902665	0					
ANR	1905427	CallExpression	"get_te0_golomb ( & s -> gb , h -> ref_count [ list ] )"		1902665	1					
ANR	1905428	Callee	get_te0_golomb		1902665	0					
ANR	1905429	Identifier	get_te0_golomb		1902665	0					
ANR	1905430	ArgumentList	& s -> gb		1902665	1					
ANR	1905431	Argument	& s -> gb		1902665	0					
ANR	1905432	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1905433	UnaryOperator	&		1902665	0					
ANR	1905434	PtrMemberAccess	s -> gb		1902665	1					
ANR	1905435	Identifier	s		1902665	0					
ANR	1905436	Identifier	gb		1902665	1					
ANR	1905437	Argument	h -> ref_count [ list ]		1902665	1					
ANR	1905438	ArrayIndexing	h -> ref_count [ list ]		1902665	0					
ANR	1905439	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1905440	Identifier	h		1902665	0					
ANR	1905441	Identifier	ref_count		1902665	1					
ANR	1905442	Identifier	list		1902665	1					
ANR	1905443	IfStatement	if ( val >= h -> ref_count [ list ] )		1902665	1					
ANR	1905444	Condition	val >= h -> ref_count [ list ]	647:31:13759:13783	1902665	0	True				
ANR	1905445	RelationalExpression	val >= h -> ref_count [ list ]		1902665	0		>=			
ANR	1905446	Identifier	val		1902665	0					
ANR	1905447	ArrayIndexing	h -> ref_count [ list ]		1902665	1					
ANR	1905448	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1905449	Identifier	h		1902665	0					
ANR	1905450	Identifier	ref_count		1902665	1					
ANR	1905451	Identifier	list		1902665	1					
ANR	1905452	CompoundStatement		647:57:13742:13742	1902665	1					
ANR	1905453	ExpressionStatement	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""ref %u overflow\\n"" , val )"	649:32:13820:13878	1902665	0	True				
ANR	1905454	CallExpression	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""ref %u overflow\\n"" , val )"		1902665	0					
ANR	1905455	Callee	av_log		1902665	0					
ANR	1905456	Identifier	av_log		1902665	0					
ANR	1905457	ArgumentList	h -> s . avctx		1902665	1					
ANR	1905458	Argument	h -> s . avctx		1902665	0					
ANR	1905459	MemberAccess	h -> s . avctx		1902665	0					
ANR	1905460	PtrMemberAccess	h -> s		1902665	0					
ANR	1905461	Identifier	h		1902665	0					
ANR	1905462	Identifier	s		1902665	1					
ANR	1905463	Identifier	avctx		1902665	1					
ANR	1905464	Argument	AV_LOG_ERROR		1902665	1					
ANR	1905465	Identifier	AV_LOG_ERROR		1902665	0					
ANR	1905466	Argument	"""ref %u overflow\\n"""		1902665	2					
ANR	1905467	PrimaryExpression	"""ref %u overflow\\n"""		1902665	0					
ANR	1905468	Argument	val		1902665	3					
ANR	1905469	Identifier	val		1902665	0					
ANR	1905470	ReturnStatement	return - 1 ;	651:32:13913:13922	1902665	1	True				
ANR	1905471	UnaryOperationExpression	- 1		1902665	0					
ANR	1905472	UnaryOperator	-		1902665	0					
ANR	1905473	PrimaryExpression	1		1902665	1					
ANR	1905474	ElseStatement	else		1902665	0					
ANR	1905475	ExpressionStatement	val = LIST_NOT_USED & 0xFF	657:28:14015:14038	1902665	0	True				
ANR	1905476	AssignmentExpression	val = LIST_NOT_USED & 0xFF		1902665	0		=			
ANR	1905477	Identifier	val		1902665	0					
ANR	1905478	BitAndExpression	LIST_NOT_USED & 0xFF		1902665	1		&			
ANR	1905479	Identifier	LIST_NOT_USED		1902665	0					
ANR	1905480	PrimaryExpression	0xFF		1902665	1					
ANR	1905481	ExpressionStatement	"fill_rectangle ( & h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ] , 2 , 4 , 8 , val , 1 )"	659:24:14065:14135	1902665	2	True				
ANR	1905482	CallExpression	"fill_rectangle ( & h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ] , 2 , 4 , 8 , val , 1 )"		1902665	0					
ANR	1905483	Callee	fill_rectangle		1902665	0					
ANR	1905484	Identifier	fill_rectangle		1902665	0					
ANR	1905485	ArgumentList	& h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ]		1902665	1					
ANR	1905486	Argument	& h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ]		1902665	0					
ANR	1905487	UnaryOperationExpression	& h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ]		1902665	0					
ANR	1905488	UnaryOperator	&		1902665	0					
ANR	1905489	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ]		1902665	1					
ANR	1905490	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1905491	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1905492	Identifier	h		1902665	0					
ANR	1905493	Identifier	ref_cache		1902665	1					
ANR	1905494	Identifier	list		1902665	1					
ANR	1905495	AdditiveExpression	scan8 [ 0 ] + 2 * i		1902665	1		+			
ANR	1905496	ArrayIndexing	scan8 [ 0 ]		1902665	0					
ANR	1905497	Identifier	scan8		1902665	0					
ANR	1905498	PrimaryExpression	0		1902665	1					
ANR	1905499	MultiplicativeExpression	2 * i		1902665	1		*			
ANR	1905500	PrimaryExpression	2		1902665	0					
ANR	1905501	Identifier	i		1902665	1					
ANR	1905502	Argument	2		1902665	1					
ANR	1905503	PrimaryExpression	2		1902665	0					
ANR	1905504	Argument	4		1902665	2					
ANR	1905505	PrimaryExpression	4		1902665	0					
ANR	1905506	Argument	8		1902665	3					
ANR	1905507	PrimaryExpression	8		1902665	0					
ANR	1905508	Argument	val		1902665	4					
ANR	1905509	Identifier	val		1902665	0					
ANR	1905510	Argument	1		1902665	5					
ANR	1905511	PrimaryExpression	1		1902665	0					
ANR	1905512	ForStatement	for ( list = 0 ; list < h -> list_count ; list ++ )		1902665	2					
ANR	1905513	ForInit	list = 0 ;	665:16:14192:14198	1902665	0	True				
ANR	1905514	AssignmentExpression	list = 0		1902665	0		=			
ANR	1905515	Identifier	list		1902665	0					
ANR	1905516	PrimaryExpression	0		1902665	1					
ANR	1905517	Condition	list < h -> list_count	665:24:14200:14217	1902665	1	True				
ANR	1905518	RelationalExpression	list < h -> list_count		1902665	0		<			
ANR	1905519	Identifier	list		1902665	0					
ANR	1905520	PtrMemberAccess	h -> list_count		1902665	1					
ANR	1905521	Identifier	h		1902665	0					
ANR	1905522	Identifier	list_count		1902665	1					
ANR	1905523	PostIncDecOperationExpression	list ++	665:44:14220:14225	1902665	2	True				
ANR	1905524	Identifier	list		1902665	0					
ANR	1905525	IncDec	++		1902665	1					
ANR	1905526	CompoundStatement		665:51:14184:14184	1902665	3					
ANR	1905527	ForStatement	for ( i = 0 ; i < 2 ; i ++ )		1902665	0					
ANR	1905528	ForInit	i = 0 ;	667:20:14250:14253	1902665	0	True				
ANR	1905529	AssignmentExpression	i = 0		1902665	0		=			
ANR	1905530	Identifier	i		1902665	0					
ANR	1905531	PrimaryExpression	0		1902665	1					
ANR	1905532	Condition	i < 2	667:25:14255:14257	1902665	1	True				
ANR	1905533	RelationalExpression	i < 2		1902665	0		<			
ANR	1905534	Identifier	i		1902665	0					
ANR	1905535	PrimaryExpression	2		1902665	1					
ANR	1905536	PostIncDecOperationExpression	i ++	667:30:14260:14262	1902665	2	True				
ANR	1905537	Identifier	i		1902665	0					
ANR	1905538	IncDec	++		1902665	1					
ANR	1905539	CompoundStatement		669:20:14244:14260	1902665	3					
ANR	1905540	IdentifierDeclStatement	unsigned int val ;	669:20:14287:14303	1902665	0	True				
ANR	1905541	IdentifierDecl	val		1902665	0					
ANR	1905542	IdentifierDeclType	unsigned int		1902665	0					
ANR	1905543	Identifier	val		1902665	1					
ANR	1905544	IfStatement	"if ( IS_DIR ( mb_type , i , list ) )"		1902665	1					
ANR	1905545	Condition	"IS_DIR ( mb_type , i , list )"	671:23:14329:14352	1902665	0	True				
ANR	1905546	CallExpression	"IS_DIR ( mb_type , i , list )"		1902665	0					
ANR	1905547	Callee	IS_DIR		1902665	0					
ANR	1905548	Identifier	IS_DIR		1902665	0					
ANR	1905549	ArgumentList	mb_type		1902665	1					
ANR	1905550	Argument	mb_type		1902665	0					
ANR	1905551	Identifier	mb_type		1902665	0					
ANR	1905552	Argument	i		1902665	1					
ANR	1905553	Identifier	i		1902665	0					
ANR	1905554	Argument	list		1902665	2					
ANR	1905555	Identifier	list		1902665	0					
ANR	1905556	CompoundStatement		671:48:14311:14311	1902665	1					
ANR	1905557	ExpressionStatement	"pred_8x16_motion ( h , i * 4 , list , h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ] , & mx , & my )"	673:24:14381:14459	1902665	0	True				
ANR	1905558	CallExpression	"pred_8x16_motion ( h , i * 4 , list , h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ] , & mx , & my )"		1902665	0					
ANR	1905559	Callee	pred_8x16_motion		1902665	0					
ANR	1905560	Identifier	pred_8x16_motion		1902665	0					
ANR	1905561	ArgumentList	h		1902665	1					
ANR	1905562	Argument	h		1902665	0					
ANR	1905563	Identifier	h		1902665	0					
ANR	1905564	Argument	i * 4		1902665	1					
ANR	1905565	MultiplicativeExpression	i * 4		1902665	0		*			
ANR	1905566	Identifier	i		1902665	0					
ANR	1905567	PrimaryExpression	4		1902665	1					
ANR	1905568	Argument	list		1902665	2					
ANR	1905569	Identifier	list		1902665	0					
ANR	1905570	Argument	h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ]		1902665	3					
ANR	1905571	ArrayIndexing	h -> ref_cache [ list ] [ scan8 [ 0 ] + 2 * i ]		1902665	0					
ANR	1905572	ArrayIndexing	h -> ref_cache [ list ]		1902665	0					
ANR	1905573	PtrMemberAccess	h -> ref_cache		1902665	0					
ANR	1905574	Identifier	h		1902665	0					
ANR	1905575	Identifier	ref_cache		1902665	1					
ANR	1905576	Identifier	list		1902665	1					
ANR	1905577	AdditiveExpression	scan8 [ 0 ] + 2 * i		1902665	1		+			
ANR	1905578	ArrayIndexing	scan8 [ 0 ]		1902665	0					
ANR	1905579	Identifier	scan8		1902665	0					
ANR	1905580	PrimaryExpression	0		1902665	1					
ANR	1905581	MultiplicativeExpression	2 * i		1902665	1		*			
ANR	1905582	PrimaryExpression	2		1902665	0					
ANR	1905583	Identifier	i		1902665	1					
ANR	1905584	Argument	& mx		1902665	4					
ANR	1905585	UnaryOperationExpression	& mx		1902665	0					
ANR	1905586	UnaryOperator	&		1902665	0					
ANR	1905587	Identifier	mx		1902665	1					
ANR	1905588	Argument	& my		1902665	5					
ANR	1905589	UnaryOperationExpression	& my		1902665	0					
ANR	1905590	UnaryOperator	&		1902665	0					
ANR	1905591	Identifier	my		1902665	1					
ANR	1905592	ExpressionStatement	mx += get_se_golomb ( & s -> gb )	675:24:14486:14513	1902665	1	True				
ANR	1905593	AssignmentExpression	mx += get_se_golomb ( & s -> gb )		1902665	0		+=			
ANR	1905594	Identifier	mx		1902665	0					
ANR	1905595	CallExpression	get_se_golomb ( & s -> gb )		1902665	1					
ANR	1905596	Callee	get_se_golomb		1902665	0					
ANR	1905597	Identifier	get_se_golomb		1902665	0					
ANR	1905598	ArgumentList	& s -> gb		1902665	1					
ANR	1905599	Argument	& s -> gb		1902665	0					
ANR	1905600	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1905601	UnaryOperator	&		1902665	0					
ANR	1905602	PtrMemberAccess	s -> gb		1902665	1					
ANR	1905603	Identifier	s		1902665	0					
ANR	1905604	Identifier	gb		1902665	1					
ANR	1905605	ExpressionStatement	my += get_se_golomb ( & s -> gb )	677:24:14540:14567	1902665	2	True				
ANR	1905606	AssignmentExpression	my += get_se_golomb ( & s -> gb )		1902665	0		+=			
ANR	1905607	Identifier	my		1902665	0					
ANR	1905608	CallExpression	get_se_golomb ( & s -> gb )		1902665	1					
ANR	1905609	Callee	get_se_golomb		1902665	0					
ANR	1905610	Identifier	get_se_golomb		1902665	0					
ANR	1905611	ArgumentList	& s -> gb		1902665	1					
ANR	1905612	Argument	& s -> gb		1902665	0					
ANR	1905613	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1905614	UnaryOperator	&		1902665	0					
ANR	1905615	PtrMemberAccess	s -> gb		1902665	1					
ANR	1905616	Identifier	s		1902665	0					
ANR	1905617	Identifier	gb		1902665	1					
ANR	1905618	ExpressionStatement	"tprintf ( s -> avctx , ""final mv:%d %d\\n"" , mx , my )"	679:24:14594:14639	1902665	3	True				
ANR	1905619	CallExpression	"tprintf ( s -> avctx , ""final mv:%d %d\\n"" , mx , my )"		1902665	0					
ANR	1905620	Callee	tprintf		1902665	0					
ANR	1905621	Identifier	tprintf		1902665	0					
ANR	1905622	ArgumentList	s -> avctx		1902665	1					
ANR	1905623	Argument	s -> avctx		1902665	0					
ANR	1905624	PtrMemberAccess	s -> avctx		1902665	0					
ANR	1905625	Identifier	s		1902665	0					
ANR	1905626	Identifier	avctx		1902665	1					
ANR	1905627	Argument	"""final mv:%d %d\\n"""		1902665	1					
ANR	1905628	PrimaryExpression	"""final mv:%d %d\\n"""		1902665	0					
ANR	1905629	Argument	mx		1902665	2					
ANR	1905630	Identifier	mx		1902665	0					
ANR	1905631	Argument	my		1902665	3					
ANR	1905632	Identifier	my		1902665	0					
ANR	1905633	ExpressionStatement	"val = pack16to32 ( mx , my )"	683:24:14668:14690	1902665	4	True				
ANR	1905634	AssignmentExpression	"val = pack16to32 ( mx , my )"		1902665	0		=			
ANR	1905635	Identifier	val		1902665	0					
ANR	1905636	CallExpression	"pack16to32 ( mx , my )"		1902665	1					
ANR	1905637	Callee	pack16to32		1902665	0					
ANR	1905638	Identifier	pack16to32		1902665	0					
ANR	1905639	ArgumentList	mx		1902665	1					
ANR	1905640	Argument	mx		1902665	0					
ANR	1905641	Identifier	mx		1902665	0					
ANR	1905642	Argument	my		1902665	1					
ANR	1905643	Identifier	my		1902665	0					
ANR	1905644	ElseStatement	else		1902665	0					
ANR	1905645	ExpressionStatement	val = 0	687:24:14744:14749	1902665	0	True				
ANR	1905646	AssignmentExpression	val = 0		1902665	0		=			
ANR	1905647	Identifier	val		1902665	0					
ANR	1905648	PrimaryExpression	0		1902665	1					
ANR	1905649	ExpressionStatement	"fill_rectangle ( h -> mv_cache [ list ] [ scan8 [ 0 ] + 2 * i ] , 2 , 4 , 8 , val , 4 )"	689:20:14772:14840	1902665	2	True				
ANR	1905650	CallExpression	"fill_rectangle ( h -> mv_cache [ list ] [ scan8 [ 0 ] + 2 * i ] , 2 , 4 , 8 , val , 4 )"		1902665	0					
ANR	1905651	Callee	fill_rectangle		1902665	0					
ANR	1905652	Identifier	fill_rectangle		1902665	0					
ANR	1905653	ArgumentList	h -> mv_cache [ list ] [ scan8 [ 0 ] + 2 * i ]		1902665	1					
ANR	1905654	Argument	h -> mv_cache [ list ] [ scan8 [ 0 ] + 2 * i ]		1902665	0					
ANR	1905655	ArrayIndexing	h -> mv_cache [ list ] [ scan8 [ 0 ] + 2 * i ]		1902665	0					
ANR	1905656	ArrayIndexing	h -> mv_cache [ list ]		1902665	0					
ANR	1905657	PtrMemberAccess	h -> mv_cache		1902665	0					
ANR	1905658	Identifier	h		1902665	0					
ANR	1905659	Identifier	mv_cache		1902665	1					
ANR	1905660	Identifier	list		1902665	1					
ANR	1905661	AdditiveExpression	scan8 [ 0 ] + 2 * i		1902665	1		+			
ANR	1905662	ArrayIndexing	scan8 [ 0 ]		1902665	0					
ANR	1905663	Identifier	scan8		1902665	0					
ANR	1905664	PrimaryExpression	0		1902665	1					
ANR	1905665	MultiplicativeExpression	2 * i		1902665	1		*			
ANR	1905666	PrimaryExpression	2		1902665	0					
ANR	1905667	Identifier	i		1902665	1					
ANR	1905668	Argument	2		1902665	1					
ANR	1905669	PrimaryExpression	2		1902665	0					
ANR	1905670	Argument	4		1902665	2					
ANR	1905671	PrimaryExpression	4		1902665	0					
ANR	1905672	Argument	8		1902665	3					
ANR	1905673	PrimaryExpression	8		1902665	0					
ANR	1905674	Argument	val		1902665	4					
ANR	1905675	Identifier	val		1902665	0					
ANR	1905676	Argument	4		1902665	5					
ANR	1905677	PrimaryExpression	4		1902665	0					
ANR	1905678	IfStatement	if ( IS_INTER ( mb_type ) )		1902665	22					
ANR	1905679	Condition	IS_INTER ( mb_type )	701:7:14904:14920	1902665	0	True				
ANR	1905680	CallExpression	IS_INTER ( mb_type )		1902665	0					
ANR	1905681	Callee	IS_INTER		1902665	0					
ANR	1905682	Identifier	IS_INTER		1902665	0					
ANR	1905683	ArgumentList	mb_type		1902665	1					
ANR	1905684	Argument	mb_type		1902665	0					
ANR	1905685	Identifier	mb_type		1902665	0					
ANR	1905686	ExpressionStatement	"write_back_motion ( h , mb_type )"	703:8:14932:14961	1902665	1	True				
ANR	1905687	CallExpression	"write_back_motion ( h , mb_type )"		1902665	0					
ANR	1905688	Callee	write_back_motion		1902665	0					
ANR	1905689	Identifier	write_back_motion		1902665	0					
ANR	1905690	ArgumentList	h		1902665	1					
ANR	1905691	Argument	h		1902665	0					
ANR	1905692	Identifier	h		1902665	0					
ANR	1905693	Argument	mb_type		1902665	1					
ANR	1905694	Identifier	mb_type		1902665	0					
ANR	1905695	IfStatement	if ( ! IS_INTRA16x16 ( mb_type ) )		1902665	23					
ANR	1905696	Condition	! IS_INTRA16x16 ( mb_type )	707:7:14973:14995	1902665	0	True				
ANR	1905697	UnaryOperationExpression	! IS_INTRA16x16 ( mb_type )		1902665	0					
ANR	1905698	UnaryOperator	!		1902665	0					
ANR	1905699	CallExpression	IS_INTRA16x16 ( mb_type )		1902665	1					
ANR	1905700	Callee	IS_INTRA16x16		1902665	0					
ANR	1905701	Identifier	IS_INTRA16x16		1902665	0					
ANR	1905702	ArgumentList	mb_type		1902665	1					
ANR	1905703	Argument	mb_type		1902665	0					
ANR	1905704	Identifier	mb_type		1902665	0					
ANR	1905705	CompoundStatement		707:31:14954:14954	1902665	1					
ANR	1905706	ExpressionStatement	cbp = get_ue_golomb ( & s -> gb )	709:8:15008:15034	1902665	0	True				
ANR	1905707	AssignmentExpression	cbp = get_ue_golomb ( & s -> gb )		1902665	0		=			
ANR	1905708	Identifier	cbp		1902665	0					
ANR	1905709	CallExpression	get_ue_golomb ( & s -> gb )		1902665	1					
ANR	1905710	Callee	get_ue_golomb		1902665	0					
ANR	1905711	Identifier	get_ue_golomb		1902665	0					
ANR	1905712	ArgumentList	& s -> gb		1902665	1					
ANR	1905713	Argument	& s -> gb		1902665	0					
ANR	1905714	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1905715	UnaryOperator	&		1902665	0					
ANR	1905716	PtrMemberAccess	s -> gb		1902665	1					
ANR	1905717	Identifier	s		1902665	0					
ANR	1905718	Identifier	gb		1902665	1					
ANR	1905719	IfStatement	if ( cbp > 47 )		1902665	1					
ANR	1905720	Condition	cbp > 47	711:11:15048:15055	1902665	0	True				
ANR	1905721	RelationalExpression	cbp > 47		1902665	0		>			
ANR	1905722	Identifier	cbp		1902665	0					
ANR	1905723	PrimaryExpression	47		1902665	1					
ANR	1905724	CompoundStatement		711:20:15014:15014	1902665	1					
ANR	1905725	ExpressionStatement	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""cbp too large (%u) at %d %d\\n"" , cbp , s -> mb_x , s -> mb_y )"	713:12:15072:15160	1902665	0	True				
ANR	1905726	CallExpression	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""cbp too large (%u) at %d %d\\n"" , cbp , s -> mb_x , s -> mb_y )"		1902665	0					
ANR	1905727	Callee	av_log		1902665	0					
ANR	1905728	Identifier	av_log		1902665	0					
ANR	1905729	ArgumentList	h -> s . avctx		1902665	1					
ANR	1905730	Argument	h -> s . avctx		1902665	0					
ANR	1905731	MemberAccess	h -> s . avctx		1902665	0					
ANR	1905732	PtrMemberAccess	h -> s		1902665	0					
ANR	1905733	Identifier	h		1902665	0					
ANR	1905734	Identifier	s		1902665	1					
ANR	1905735	Identifier	avctx		1902665	1					
ANR	1905736	Argument	AV_LOG_ERROR		1902665	1					
ANR	1905737	Identifier	AV_LOG_ERROR		1902665	0					
ANR	1905738	Argument	"""cbp too large (%u) at %d %d\\n"""		1902665	2					
ANR	1905739	PrimaryExpression	"""cbp too large (%u) at %d %d\\n"""		1902665	0					
ANR	1905740	Argument	cbp		1902665	3					
ANR	1905741	Identifier	cbp		1902665	0					
ANR	1905742	Argument	s -> mb_x		1902665	4					
ANR	1905743	PtrMemberAccess	s -> mb_x		1902665	0					
ANR	1905744	Identifier	s		1902665	0					
ANR	1905745	Identifier	mb_x		1902665	1					
ANR	1905746	Argument	s -> mb_y		1902665	5					
ANR	1905747	PtrMemberAccess	s -> mb_y		1902665	0					
ANR	1905748	Identifier	s		1902665	0					
ANR	1905749	Identifier	mb_y		1902665	1					
ANR	1905750	ReturnStatement	return - 1 ;	715:12:15175:15184	1902665	1	True				
ANR	1905751	UnaryOperationExpression	- 1		1902665	0					
ANR	1905752	UnaryOperator	-		1902665	0					
ANR	1905753	PrimaryExpression	1		1902665	1					
ANR	1905754	IfStatement	if ( IS_INTRA4x4 ( mb_type ) )		1902665	2					
ANR	1905755	Condition	IS_INTRA4x4 ( mb_type )	721:11:15211:15230	1902665	0	True				
ANR	1905756	CallExpression	IS_INTRA4x4 ( mb_type )		1902665	0					
ANR	1905757	Callee	IS_INTRA4x4		1902665	0					
ANR	1905758	Identifier	IS_INTRA4x4		1902665	0					
ANR	1905759	ArgumentList	mb_type		1902665	1					
ANR	1905760	Argument	mb_type		1902665	0					
ANR	1905761	Identifier	mb_type		1902665	0					
ANR	1905762	ExpressionStatement	cbp = golomb_to_intra4x4_cbp [ cbp ]	723:12:15246:15278	1902665	1	True				
ANR	1905763	AssignmentExpression	cbp = golomb_to_intra4x4_cbp [ cbp ]		1902665	0		=			
ANR	1905764	Identifier	cbp		1902665	0					
ANR	1905765	ArrayIndexing	golomb_to_intra4x4_cbp [ cbp ]		1902665	1					
ANR	1905766	Identifier	golomb_to_intra4x4_cbp		1902665	0					
ANR	1905767	Identifier	cbp		1902665	1					
ANR	1905768	ElseStatement	else		1902665	0					
ANR	1905769	ExpressionStatement	cbp = golomb_to_inter_cbp [ cbp ]	727:12:15307:15336	1902665	0	True				
ANR	1905770	AssignmentExpression	cbp = golomb_to_inter_cbp [ cbp ]		1902665	0		=			
ANR	1905771	Identifier	cbp		1902665	0					
ANR	1905772	ArrayIndexing	golomb_to_inter_cbp [ cbp ]		1902665	1					
ANR	1905773	Identifier	golomb_to_inter_cbp		1902665	0					
ANR	1905774	Identifier	cbp		1902665	1					
ANR	1905775	ExpressionStatement	h -> cbp = cbp	731:4:15350:15362	1902665	24	True				
ANR	1905776	AssignmentExpression	h -> cbp = cbp		1902665	0		=			
ANR	1905777	PtrMemberAccess	h -> cbp		1902665	0					
ANR	1905778	Identifier	h		1902665	0					
ANR	1905779	Identifier	cbp		1902665	1					
ANR	1905780	Identifier	cbp		1902665	1					
ANR	1905781	IfStatement	if ( dct8x8_allowed && ( cbp & 15 ) && ! IS_INTRA ( mb_type ) )		1902665	25					
ANR	1905782	Condition	dct8x8_allowed && ( cbp & 15 ) && ! IS_INTRA ( mb_type )	735:7:15374:15421	1902665	0	True				
ANR	1905783	AndExpression	dct8x8_allowed && ( cbp & 15 ) && ! IS_INTRA ( mb_type )		1902665	0		&&			
ANR	1905784	Identifier	dct8x8_allowed		1902665	0					
ANR	1905785	AndExpression	( cbp & 15 ) && ! IS_INTRA ( mb_type )		1902665	1		&&			
ANR	1905786	BitAndExpression	cbp & 15		1902665	0		&			
ANR	1905787	Identifier	cbp		1902665	0					
ANR	1905788	PrimaryExpression	15		1902665	1					
ANR	1905789	UnaryOperationExpression	! IS_INTRA ( mb_type )		1902665	1					
ANR	1905790	UnaryOperator	!		1902665	0					
ANR	1905791	CallExpression	IS_INTRA ( mb_type )		1902665	1					
ANR	1905792	Callee	IS_INTRA		1902665	0					
ANR	1905793	Identifier	IS_INTRA		1902665	0					
ANR	1905794	ArgumentList	mb_type		1902665	1					
ANR	1905795	Argument	mb_type		1902665	0					
ANR	1905796	Identifier	mb_type		1902665	0					
ANR	1905797	CompoundStatement		735:56:15380:15380	1902665	1					
ANR	1905798	IfStatement	if ( get_bits1 ( & s -> gb ) )		1902665	0					
ANR	1905799	Condition	get_bits1 ( & s -> gb )	737:11:15437:15453	1902665	0	True				
ANR	1905800	CallExpression	get_bits1 ( & s -> gb )		1902665	0					
ANR	1905801	Callee	get_bits1		1902665	0					
ANR	1905802	Identifier	get_bits1		1902665	0					
ANR	1905803	ArgumentList	& s -> gb		1902665	1					
ANR	1905804	Argument	& s -> gb		1902665	0					
ANR	1905805	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1905806	UnaryOperator	&		1902665	0					
ANR	1905807	PtrMemberAccess	s -> gb		1902665	1					
ANR	1905808	Identifier	s		1902665	0					
ANR	1905809	Identifier	gb		1902665	1					
ANR	1905810	ExpressionStatement	mb_type |= MB_TYPE_8x8DCT	739:12:15469:15494	1902665	1	True				
ANR	1905811	AssignmentExpression	mb_type |= MB_TYPE_8x8DCT		1902665	0		|=			
ANR	1905812	Identifier	mb_type		1902665	0					
ANR	1905813	Identifier	MB_TYPE_8x8DCT		1902665	1					
ANR	1905814	ExpressionStatement	s -> current_picture . mb_type [ mb_xy ] = mb_type	743:4:15508:15550	1902665	26	True				
ANR	1905815	AssignmentExpression	s -> current_picture . mb_type [ mb_xy ] = mb_type		1902665	0		=			
ANR	1905816	ArrayIndexing	s -> current_picture . mb_type [ mb_xy ]		1902665	0					
ANR	1905817	MemberAccess	s -> current_picture . mb_type		1902665	0					
ANR	1905818	PtrMemberAccess	s -> current_picture		1902665	0					
ANR	1905819	Identifier	s		1902665	0					
ANR	1905820	Identifier	current_picture		1902665	1					
ANR	1905821	Identifier	mb_type		1902665	1					
ANR	1905822	Identifier	mb_xy		1902665	1					
ANR	1905823	Identifier	mb_type		1902665	1					
ANR	1905824	IfStatement	if ( cbp || IS_INTRA16x16 ( mb_type ) )		1902665	27					
ANR	1905825	Condition	cbp || IS_INTRA16x16 ( mb_type )	747:7:15562:15590	1902665	0	True				
ANR	1905826	OrExpression	cbp || IS_INTRA16x16 ( mb_type )		1902665	0		||			
ANR	1905827	Identifier	cbp		1902665	0					
ANR	1905828	CallExpression	IS_INTRA16x16 ( mb_type )		1902665	1					
ANR	1905829	Callee	IS_INTRA16x16		1902665	0					
ANR	1905830	Identifier	IS_INTRA16x16		1902665	0					
ANR	1905831	ArgumentList	mb_type		1902665	1					
ANR	1905832	Argument	mb_type		1902665	0					
ANR	1905833	Identifier	mb_type		1902665	0					
ANR	1905834	CompoundStatement		755:8:15712:15751	1902665	1					
ANR	1905835	IdentifierDeclStatement	"int i8x8 , i4x4 , chroma_idx ;"	749:8:15603:15629	1902665	0	True				
ANR	1905836	IdentifierDecl	i8x8		1902665	0					
ANR	1905837	IdentifierDeclType	int		1902665	0					
ANR	1905838	Identifier	i8x8		1902665	1					
ANR	1905839	IdentifierDecl	i4x4		1902665	1					
ANR	1905840	IdentifierDeclType	int		1902665	0					
ANR	1905841	Identifier	i4x4		1902665	1					
ANR	1905842	IdentifierDecl	chroma_idx		1902665	2					
ANR	1905843	IdentifierDeclType	int		1902665	0					
ANR	1905844	Identifier	chroma_idx		1902665	1					
ANR	1905845	IdentifierDeclStatement	"int chroma_qp , dquant ;"	751:8:15640:15661	1902665	1	True				
ANR	1905846	IdentifierDecl	chroma_qp		1902665	0					
ANR	1905847	IdentifierDeclType	int		1902665	0					
ANR	1905848	Identifier	chroma_qp		1902665	1					
ANR	1905849	IdentifierDecl	dquant		1902665	1					
ANR	1905850	IdentifierDeclType	int		1902665	0					
ANR	1905851	Identifier	dquant		1902665	1					
ANR	1905852	IdentifierDeclStatement	GetBitContext * gb = IS_INTRA ( mb_type ) ? h -> intra_gb_ptr : h -> inter_gb_ptr ;	753:8:15672:15744	1902665	2	True				
ANR	1905853	IdentifierDecl	* gb = IS_INTRA ( mb_type ) ? h -> intra_gb_ptr : h -> inter_gb_ptr		1902665	0					
ANR	1905854	IdentifierDeclType	GetBitContext *		1902665	0					
ANR	1905855	Identifier	gb		1902665	1					
ANR	1905856	AssignmentExpression	* gb = IS_INTRA ( mb_type ) ? h -> intra_gb_ptr : h -> inter_gb_ptr		1902665	2		=			
ANR	1905857	Identifier	gb		1902665	0					
ANR	1905858	ConditionalExpression	IS_INTRA ( mb_type ) ? h -> intra_gb_ptr : h -> inter_gb_ptr		1902665	1					
ANR	1905859	Condition	IS_INTRA ( mb_type )		1902665	0					
ANR	1905860	CallExpression	IS_INTRA ( mb_type )		1902665	0					
ANR	1905861	Callee	IS_INTRA		1902665	0					
ANR	1905862	Identifier	IS_INTRA		1902665	0					
ANR	1905863	ArgumentList	mb_type		1902665	1					
ANR	1905864	Argument	mb_type		1902665	0					
ANR	1905865	Identifier	mb_type		1902665	0					
ANR	1905866	PtrMemberAccess	h -> intra_gb_ptr		1902665	1					
ANR	1905867	Identifier	h		1902665	0					
ANR	1905868	Identifier	intra_gb_ptr		1902665	1					
ANR	1905869	PtrMemberAccess	h -> inter_gb_ptr		1902665	2					
ANR	1905870	Identifier	h		1902665	0					
ANR	1905871	Identifier	inter_gb_ptr		1902665	1					
ANR	1905872	IdentifierDeclStatement	"const uint8_t * scan , * scan8x8 , * dc_scan ;"	755:8:15755:15794	1902665	3	True				
ANR	1905873	IdentifierDecl	* scan		1902665	0					
ANR	1905874	IdentifierDeclType	const uint8_t *		1902665	0					
ANR	1905875	Identifier	scan		1902665	1					
ANR	1905876	IdentifierDecl	* scan8x8		1902665	1					
ANR	1905877	IdentifierDeclType	const uint8_t *		1902665	0					
ANR	1905878	Identifier	scan8x8		1902665	1					
ANR	1905879	IdentifierDecl	* dc_scan		1902665	2					
ANR	1905880	IdentifierDeclType	const uint8_t *		1902665	0					
ANR	1905881	Identifier	dc_scan		1902665	1					
ANR	1905882	IfStatement	if ( IS_INTERLACED ( mb_type ) )		1902665	4					
ANR	1905883	Condition	IS_INTERLACED ( mb_type )	763:11:15853:15874	1902665	0	True				
ANR	1905884	CallExpression	IS_INTERLACED ( mb_type )		1902665	0					
ANR	1905885	Callee	IS_INTERLACED		1902665	0					
ANR	1905886	Identifier	IS_INTERLACED		1902665	0					
ANR	1905887	ArgumentList	mb_type		1902665	1					
ANR	1905888	Argument	mb_type		1902665	0					
ANR	1905889	Identifier	mb_type		1902665	0					
ANR	1905890	CompoundStatement		763:34:15833:15833	1902665	1					
ANR	1905891	ExpressionStatement	scan8x8 = s -> qscale ? h -> field_scan8x8_cavlc : h -> field_scan8x8_cavlc_q0	765:12:15891:15962	1902665	0	True				
ANR	1905892	AssignmentExpression	scan8x8 = s -> qscale ? h -> field_scan8x8_cavlc : h -> field_scan8x8_cavlc_q0		1902665	0		=			
ANR	1905893	Identifier	scan8x8		1902665	0					
ANR	1905894	ConditionalExpression	s -> qscale ? h -> field_scan8x8_cavlc : h -> field_scan8x8_cavlc_q0		1902665	1					
ANR	1905895	Condition	s -> qscale		1902665	0					
ANR	1905896	PtrMemberAccess	s -> qscale		1902665	0					
ANR	1905897	Identifier	s		1902665	0					
ANR	1905898	Identifier	qscale		1902665	1					
ANR	1905899	PtrMemberAccess	h -> field_scan8x8_cavlc		1902665	1					
ANR	1905900	Identifier	h		1902665	0					
ANR	1905901	Identifier	field_scan8x8_cavlc		1902665	1					
ANR	1905902	PtrMemberAccess	h -> field_scan8x8_cavlc_q0		1902665	2					
ANR	1905903	Identifier	h		1902665	0					
ANR	1905904	Identifier	field_scan8x8_cavlc_q0		1902665	1					
ANR	1905905	ExpressionStatement	scan = s -> qscale ? h -> field_scan : h -> field_scan_q0	767:12:15977:16027	1902665	1	True				
ANR	1905906	AssignmentExpression	scan = s -> qscale ? h -> field_scan : h -> field_scan_q0		1902665	0		=			
ANR	1905907	Identifier	scan		1902665	0					
ANR	1905908	ConditionalExpression	s -> qscale ? h -> field_scan : h -> field_scan_q0		1902665	1					
ANR	1905909	Condition	s -> qscale		1902665	0					
ANR	1905910	PtrMemberAccess	s -> qscale		1902665	0					
ANR	1905911	Identifier	s		1902665	0					
ANR	1905912	Identifier	qscale		1902665	1					
ANR	1905913	PtrMemberAccess	h -> field_scan		1902665	1					
ANR	1905914	Identifier	h		1902665	0					
ANR	1905915	Identifier	field_scan		1902665	1					
ANR	1905916	PtrMemberAccess	h -> field_scan_q0		1902665	2					
ANR	1905917	Identifier	h		1902665	0					
ANR	1905918	Identifier	field_scan_q0		1902665	1					
ANR	1905919	ExpressionStatement	dc_scan = luma_dc_field_scan	769:12:16042:16069	1902665	2	True				
ANR	1905920	AssignmentExpression	dc_scan = luma_dc_field_scan		1902665	0		=			
ANR	1905921	Identifier	dc_scan		1902665	0					
ANR	1905922	Identifier	luma_dc_field_scan		1902665	1					
ANR	1905923	ElseStatement	else		1902665	0					
ANR	1905924	CompoundStatement		771:13:16042:16042	1902665	0					
ANR	1905925	ExpressionStatement	scan8x8 = s -> qscale ? h -> zigzag_scan8x8_cavlc : h -> zigzag_scan8x8_cavlc_q0	773:12:16100:16173	1902665	0	True				
ANR	1905926	AssignmentExpression	scan8x8 = s -> qscale ? h -> zigzag_scan8x8_cavlc : h -> zigzag_scan8x8_cavlc_q0		1902665	0		=			
ANR	1905927	Identifier	scan8x8		1902665	0					
ANR	1905928	ConditionalExpression	s -> qscale ? h -> zigzag_scan8x8_cavlc : h -> zigzag_scan8x8_cavlc_q0		1902665	1					
ANR	1905929	Condition	s -> qscale		1902665	0					
ANR	1905930	PtrMemberAccess	s -> qscale		1902665	0					
ANR	1905931	Identifier	s		1902665	0					
ANR	1905932	Identifier	qscale		1902665	1					
ANR	1905933	PtrMemberAccess	h -> zigzag_scan8x8_cavlc		1902665	1					
ANR	1905934	Identifier	h		1902665	0					
ANR	1905935	Identifier	zigzag_scan8x8_cavlc		1902665	1					
ANR	1905936	PtrMemberAccess	h -> zigzag_scan8x8_cavlc_q0		1902665	2					
ANR	1905937	Identifier	h		1902665	0					
ANR	1905938	Identifier	zigzag_scan8x8_cavlc_q0		1902665	1					
ANR	1905939	ExpressionStatement	scan = s -> qscale ? h -> zigzag_scan : h -> zigzag_scan_q0	775:12:16188:16240	1902665	1	True				
ANR	1905940	AssignmentExpression	scan = s -> qscale ? h -> zigzag_scan : h -> zigzag_scan_q0		1902665	0		=			
ANR	1905941	Identifier	scan		1902665	0					
ANR	1905942	ConditionalExpression	s -> qscale ? h -> zigzag_scan : h -> zigzag_scan_q0		1902665	1					
ANR	1905943	Condition	s -> qscale		1902665	0					
ANR	1905944	PtrMemberAccess	s -> qscale		1902665	0					
ANR	1905945	Identifier	s		1902665	0					
ANR	1905946	Identifier	qscale		1902665	1					
ANR	1905947	PtrMemberAccess	h -> zigzag_scan		1902665	1					
ANR	1905948	Identifier	h		1902665	0					
ANR	1905949	Identifier	zigzag_scan		1902665	1					
ANR	1905950	PtrMemberAccess	h -> zigzag_scan_q0		1902665	2					
ANR	1905951	Identifier	h		1902665	0					
ANR	1905952	Identifier	zigzag_scan_q0		1902665	1					
ANR	1905953	ExpressionStatement	dc_scan = luma_dc_zigzag_scan	777:12:16255:16283	1902665	2	True				
ANR	1905954	AssignmentExpression	dc_scan = luma_dc_zigzag_scan		1902665	0		=			
ANR	1905955	Identifier	dc_scan		1902665	0					
ANR	1905956	Identifier	luma_dc_zigzag_scan		1902665	1					
ANR	1905957	ExpressionStatement	dquant = get_se_golomb ( & s -> gb )	783:8:16307:16336	1902665	5	True				
ANR	1905958	AssignmentExpression	dquant = get_se_golomb ( & s -> gb )		1902665	0		=			
ANR	1905959	Identifier	dquant		1902665	0					
ANR	1905960	CallExpression	get_se_golomb ( & s -> gb )		1902665	1					
ANR	1905961	Callee	get_se_golomb		1902665	0					
ANR	1905962	Identifier	get_se_golomb		1902665	0					
ANR	1905963	ArgumentList	& s -> gb		1902665	1					
ANR	1905964	Argument	& s -> gb		1902665	0					
ANR	1905965	UnaryOperationExpression	& s -> gb		1902665	0					
ANR	1905966	UnaryOperator	&		1902665	0					
ANR	1905967	PtrMemberAccess	s -> gb		1902665	1					
ANR	1905968	Identifier	s		1902665	0					
ANR	1905969	Identifier	gb		1902665	1					
ANR	1905970	IfStatement	if ( dquant > 25 || dquant < - 26 )		1902665	6					
ANR	1905971	Condition	dquant > 25 || dquant < - 26	787:12:16353:16379	1902665	0	True				
ANR	1905972	OrExpression	dquant > 25 || dquant < - 26		1902665	0		||			
ANR	1905973	RelationalExpression	dquant > 25		1902665	0		>			
ANR	1905974	Identifier	dquant		1902665	0					
ANR	1905975	PrimaryExpression	25		1902665	1					
ANR	1905976	RelationalExpression	dquant < - 26		1902665	1		<			
ANR	1905977	Identifier	dquant		1902665	0					
ANR	1905978	UnaryOperationExpression	- 26		1902665	1					
ANR	1905979	UnaryOperator	-		1902665	0					
ANR	1905980	PrimaryExpression	26		1902665	1					
ANR	1905981	CompoundStatement		787:41:16339:16339	1902665	1					
ANR	1905982	ExpressionStatement	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""dquant out of range (%d) at %d %d\\n"" , dquant , s -> mb_x , s -> mb_y )"	789:12:16397:16494	1902665	0	True				
ANR	1905983	CallExpression	"av_log ( h -> s . avctx , AV_LOG_ERROR , ""dquant out of range (%d) at %d %d\\n"" , dquant , s -> mb_x , s -> mb_y )"		1902665	0					
ANR	1905984	Callee	av_log		1902665	0					
ANR	1905985	Identifier	av_log		1902665	0					
ANR	1905986	ArgumentList	h -> s . avctx		1902665	1					
ANR	1905987	Argument	h -> s . avctx		1902665	0					
ANR	1905988	MemberAccess	h -> s . avctx		1902665	0					
ANR	1905989	PtrMemberAccess	h -> s		1902665	0					
ANR	1905990	Identifier	h		1902665	0					
ANR	1905991	Identifier	s		1902665	1					
ANR	1905992	Identifier	avctx		1902665	1					
ANR	1905993	Argument	AV_LOG_ERROR		1902665	1					
ANR	1905994	Identifier	AV_LOG_ERROR		1902665	0					
ANR	1905995	Argument	"""dquant out of range (%d) at %d %d\\n"""		1902665	2					
ANR	1905996	PrimaryExpression	"""dquant out of range (%d) at %d %d\\n"""		1902665	0					
ANR	1905997	Argument	dquant		1902665	3					
ANR	1905998	Identifier	dquant		1902665	0					
ANR	1905999	Argument	s -> mb_x		1902665	4					
ANR	1906000	PtrMemberAccess	s -> mb_x		1902665	0					
ANR	1906001	Identifier	s		1902665	0					
ANR	1906002	Identifier	mb_x		1902665	1					
ANR	1906003	Argument	s -> mb_y		1902665	5					
ANR	1906004	PtrMemberAccess	s -> mb_y		1902665	0					
ANR	1906005	Identifier	s		1902665	0					
ANR	1906006	Identifier	mb_y		1902665	1					
ANR	1906007	ReturnStatement	return - 1 ;	791:12:16509:16518	1902665	1	True				
ANR	1906008	UnaryOperationExpression	- 1		1902665	0					
ANR	1906009	UnaryOperator	-		1902665	0					
ANR	1906010	PrimaryExpression	1		1902665	1					
ANR	1906011	ExpressionStatement	s -> qscale += dquant	797:8:16542:16561	1902665	7	True				
ANR	1906012	AssignmentExpression	s -> qscale += dquant		1902665	0		+=			
ANR	1906013	PtrMemberAccess	s -> qscale		1902665	0					
ANR	1906014	Identifier	s		1902665	0					
ANR	1906015	Identifier	qscale		1902665	1					
ANR	1906016	Identifier	dquant		1902665	1					
ANR	1906017	IfStatement	if ( ( ( unsigned ) s -> qscale ) > 51 )		1902665	8					
ANR	1906018	Condition	( ( unsigned ) s -> qscale ) > 51	799:11:16575:16600	1902665	0	True				
ANR	1906019	RelationalExpression	( ( unsigned ) s -> qscale ) > 51		1902665	0		>			
ANR	1906020	CastExpression	( unsigned ) s -> qscale		1902665	0					
ANR	1906021	CastTarget	unsigned		1902665	0					
ANR	1906022	PtrMemberAccess	s -> qscale		1902665	1					
ANR	1906023	Identifier	s		1902665	0					
ANR	1906024	Identifier	qscale		1902665	1					
ANR	1906025	PrimaryExpression	51		1902665	1					
ANR	1906026	CompoundStatement		799:38:16559:16559	1902665	1					
ANR	1906027	IfStatement	if ( s -> qscale < 0 )		1902665	0					
ANR	1906028	Condition	s -> qscale < 0	801:15:16620:16630	1902665	0	True				
ANR	1906029	RelationalExpression	s -> qscale < 0		1902665	0		<			
ANR	1906030	PtrMemberAccess	s -> qscale		1902665	0					
ANR	1906031	Identifier	s		1902665	0					
ANR	1906032	Identifier	qscale		1902665	1					
ANR	1906033	PrimaryExpression	0		1902665	1					
ANR	1906034	ExpressionStatement	s -> qscale += 52	801:28:16633:16647	1902665	1	True				
ANR	1906035	AssignmentExpression	s -> qscale += 52		1902665	0		+=			
ANR	1906036	PtrMemberAccess	s -> qscale		1902665	0					
ANR	1906037	Identifier	s		1902665	0					
ANR	1906038	Identifier	qscale		1902665	1					
ANR	1906039	PrimaryExpression	52		1902665	1					
ANR	1906040	ElseStatement	else		1902665	0					
ANR	1906041	ExpressionStatement	s -> qscale -= 52	803:28:16678:16692	1902665	0	True				
ANR	1906042	AssignmentExpression	s -> qscale -= 52		1902665	0		-=			
ANR	1906043	PtrMemberAccess	s -> qscale		1902665	0					
ANR	1906044	Identifier	s		1902665	0					
ANR	1906045	Identifier	qscale		1902665	1					
ANR	1906046	PrimaryExpression	52		1902665	1					
ANR	1906047	ExpressionStatement	"h -> chroma_qp = chroma_qp = get_chroma_qp ( h -> pps . chroma_qp_index_offset , s -> qscale )"	809:8:16716:16796	1902665	9	True				
ANR	1906048	AssignmentExpression	"h -> chroma_qp = chroma_qp = get_chroma_qp ( h -> pps . chroma_qp_index_offset , s -> qscale )"		1902665	0		=			
ANR	1906049	PtrMemberAccess	h -> chroma_qp		1902665	0					
ANR	1906050	Identifier	h		1902665	0					
ANR	1906051	Identifier	chroma_qp		1902665	1					
ANR	1906052	AssignmentExpression	"chroma_qp = get_chroma_qp ( h -> pps . chroma_qp_index_offset , s -> qscale )"		1902665	1		=			
ANR	1906053	Identifier	chroma_qp		1902665	0					
ANR	1906054	CallExpression	"get_chroma_qp ( h -> pps . chroma_qp_index_offset , s -> qscale )"		1902665	1					
ANR	1906055	Callee	get_chroma_qp		1902665	0					
ANR	1906056	Identifier	get_chroma_qp		1902665	0					
ANR	1906057	ArgumentList	h -> pps . chroma_qp_index_offset		1902665	1					
ANR	1906058	Argument	h -> pps . chroma_qp_index_offset		1902665	0					
ANR	1906059	MemberAccess	h -> pps . chroma_qp_index_offset		1902665	0					
ANR	1906060	PtrMemberAccess	h -> pps		1902665	0					
ANR	1906061	Identifier	h		1902665	0					
ANR	1906062	Identifier	pps		1902665	1					
ANR	1906063	Identifier	chroma_qp_index_offset		1902665	1					
ANR	1906064	Argument	s -> qscale		1902665	1					
ANR	1906065	PtrMemberAccess	s -> qscale		1902665	0					
ANR	1906066	Identifier	s		1902665	0					
ANR	1906067	Identifier	qscale		1902665	1					
ANR	1906068	IfStatement	if ( IS_INTRA16x16 ( mb_type ) )		1902665	10					
ANR	1906069	Condition	IS_INTRA16x16 ( mb_type )	811:11:16810:16831	1902665	0	True				
ANR	1906070	CallExpression	IS_INTRA16x16 ( mb_type )		1902665	0					
ANR	1906071	Callee	IS_INTRA16x16		1902665	0					
ANR	1906072	Identifier	IS_INTRA16x16		1902665	0					
ANR	1906073	ArgumentList	mb_type		1902665	1					
ANR	1906074	Argument	mb_type		1902665	0					
ANR	1906075	Identifier	mb_type		1902665	0					
ANR	1906076	CompoundStatement		811:34:16790:16790	1902665	1					
ANR	1906077	IfStatement	"if ( decode_residual ( h , h -> intra_gb_ptr , h -> mb , LUMA_DC_BLOCK_INDEX , dc_scan , h -> dequant4_coeff [ 0 ] [ s -> qscale ] , 16 ) < 0 )"		1902665	0					
ANR	1906078	Condition	"decode_residual ( h , h -> intra_gb_ptr , h -> mb , LUMA_DC_BLOCK_INDEX , dc_scan , h -> dequant4_coeff [ 0 ] [ s -> qscale ] , 16 ) < 0"	813:16:16852:16964	1902665	0	True				
ANR	1906079	RelationalExpression	"decode_residual ( h , h -> intra_gb_ptr , h -> mb , LUMA_DC_BLOCK_INDEX , dc_scan , h -> dequant4_coeff [ 0 ] [ s -> qscale ] , 16 ) < 0"		1902665	0		<			
ANR	1906080	CallExpression	"decode_residual ( h , h -> intra_gb_ptr , h -> mb , LUMA_DC_BLOCK_INDEX , dc_scan , h -> dequant4_coeff [ 0 ] [ s -> qscale ] , 16 )"		1902665	0					
ANR	1906081	Callee	decode_residual		1902665	0					
ANR	1906082	Identifier	decode_residual		1902665	0					
ANR	1906083	ArgumentList	h		1902665	1					
ANR	1906084	Argument	h		1902665	0					
ANR	1906085	Identifier	h		1902665	0					
ANR	1906086	Argument	h -> intra_gb_ptr		1902665	1					
ANR	1906087	PtrMemberAccess	h -> intra_gb_ptr		1902665	0					
ANR	1906088	Identifier	h		1902665	0					
ANR	1906089	Identifier	intra_gb_ptr		1902665	1					
ANR	1906090	Argument	h -> mb		1902665	2					
ANR	1906091	PtrMemberAccess	h -> mb		1902665	0					
ANR	1906092	Identifier	h		1902665	0					
ANR	1906093	Identifier	mb		1902665	1					
ANR	1906094	Argument	LUMA_DC_BLOCK_INDEX		1902665	3					
ANR	1906095	Identifier	LUMA_DC_BLOCK_INDEX		1902665	0					
ANR	1906096	Argument	dc_scan		1902665	4					
ANR	1906097	Identifier	dc_scan		1902665	0					
ANR	1906098	Argument	h -> dequant4_coeff [ 0 ] [ s -> qscale ]		1902665	5					
ANR	1906099	ArrayIndexing	h -> dequant4_coeff [ 0 ] [ s -> qscale ]		1902665	0					
ANR	1906100	ArrayIndexing	h -> dequant4_coeff [ 0 ]		1902665	0					
ANR	1906101	PtrMemberAccess	h -> dequant4_coeff		1902665	0					
ANR	1906102	Identifier	h		1902665	0					
ANR	1906103	Identifier	dequant4_coeff		1902665	1					
ANR	1906104	PrimaryExpression	0		1902665	1					
ANR	1906105	PtrMemberAccess	s -> qscale		1902665	1					
ANR	1906106	Identifier	s		1902665	0					
ANR	1906107	Identifier	qscale		1902665	1					
ANR	1906108	Argument	16		1902665	6					
ANR	1906109	PrimaryExpression	16		1902665	0					
ANR	1906110	PrimaryExpression	0		1902665	1					
ANR	1906111	CompoundStatement		813:130:16923:16923	1902665	1					
ANR	1906112	ReturnStatement	return - 1 ;	815:16:16985:16994	1902665	0	True				
ANR	1906113	UnaryOperationExpression	- 1		1902665	0					
ANR	1906114	UnaryOperator	-		1902665	0					
ANR	1906115	PrimaryExpression	1		1902665	1					
ANR	1906116	ExpressionStatement	assert ( ( cbp & 15 ) == 0 || ( cbp & 15 ) == 15 )	821:12:17082:17121	1902665	1	True				
ANR	1906117	CallExpression	assert ( ( cbp & 15 ) == 0 || ( cbp & 15 ) == 15 )		1902665	0					
ANR	1906118	Callee	assert		1902665	0					
ANR	1906119	Identifier	assert		1902665	0					
ANR	1906120	ArgumentList	( cbp & 15 ) == 0 || ( cbp & 15 ) == 15		1902665	1					
ANR	1906121	Argument	( cbp & 15 ) == 0 || ( cbp & 15 ) == 15		1902665	0					
ANR	1906122	OrExpression	( cbp & 15 ) == 0 || ( cbp & 15 ) == 15		1902665	0		||			
ANR	1906123	EqualityExpression	( cbp & 15 ) == 0		1902665	0		==			
ANR	1906124	BitAndExpression	cbp & 15		1902665	0		&			
ANR	1906125	Identifier	cbp		1902665	0					
ANR	1906126	PrimaryExpression	15		1902665	1					
ANR	1906127	PrimaryExpression	0		1902665	1					
ANR	1906128	EqualityExpression	( cbp & 15 ) == 15		1902665	1		==			
ANR	1906129	BitAndExpression	cbp & 15		1902665	0		&			
ANR	1906130	Identifier	cbp		1902665	0					
ANR	1906131	PrimaryExpression	15		1902665	1					
ANR	1906132	PrimaryExpression	15		1902665	1					
ANR	1906133	IfStatement	if ( cbp & 15 )		1902665	2					
ANR	1906134	Condition	cbp & 15	825:15:17141:17146	1902665	0	True				
ANR	1906135	BitAndExpression	cbp & 15		1902665	0		&			
ANR	1906136	Identifier	cbp		1902665	0					
ANR	1906137	PrimaryExpression	15		1902665	1					
ANR	1906138	CompoundStatement		825:22:17105:17105	1902665	1					
ANR	1906139	ForStatement	for ( i8x8 = 0 ; i8x8 < 4 ; i8x8 ++ )		1902665	0					
ANR	1906140	ForInit	i8x8 = 0 ;	827:20:17171:17177	1902665	0	True				
ANR	1906141	AssignmentExpression	i8x8 = 0		1902665	0		=			
ANR	1906142	Identifier	i8x8		1902665	0					
ANR	1906143	PrimaryExpression	0		1902665	1					
ANR	1906144	Condition	i8x8 < 4	827:28:17179:17184	1902665	1	True				
ANR	1906145	RelationalExpression	i8x8 < 4		1902665	0		<			
ANR	1906146	Identifier	i8x8		1902665	0					
ANR	1906147	PrimaryExpression	4		1902665	1					
ANR	1906148	PostIncDecOperationExpression	i8x8 ++	827:36:17187:17192	1902665	2	True				
ANR	1906149	Identifier	i8x8		1902665	0					
ANR	1906150	IncDec	++		1902665	1					
ANR	1906151	CompoundStatement		827:43:17151:17151	1902665	3					
ANR	1906152	ForStatement	for ( i4x4 = 0 ; i4x4 < 4 ; i4x4 ++ )		1902665	0					
ANR	1906153	ForInit	i4x4 = 0 ;	829:24:17221:17227	1902665	0	True				
ANR	1906154	AssignmentExpression	i4x4 = 0		1902665	0		=			
ANR	1906155	Identifier	i4x4		1902665	0					
ANR	1906156	PrimaryExpression	0		1902665	1					
ANR	1906157	Condition	i4x4 < 4	829:32:17229:17234	1902665	1	True				
ANR	1906158	RelationalExpression	i4x4 < 4		1902665	0		<			
ANR	1906159	Identifier	i4x4		1902665	0					
ANR	1906160	PrimaryExpression	4		1902665	1					
ANR	1906161	PostIncDecOperationExpression	i4x4 ++	829:40:17237:17242	1902665	2	True				
ANR	1906162	Identifier	i4x4		1902665	0					
ANR	1906163	IncDec	++		1902665	1					
ANR	1906164	CompoundStatement		831:24:17228:17258	1902665	3					
ANR	1906165	IdentifierDeclStatement	const int index = i4x4 + 4 * i8x8 ;	831:24:17271:17301	1902665	0	True				
ANR	1906166	IdentifierDecl	index = i4x4 + 4 * i8x8		1902665	0					
ANR	1906167	IdentifierDeclType	const int		1902665	0					
ANR	1906168	Identifier	index		1902665	1					
ANR	1906169	AssignmentExpression	index = i4x4 + 4 * i8x8		1902665	2		=			
ANR	1906170	Identifier	index		1902665	0					
ANR	1906171	AdditiveExpression	i4x4 + 4 * i8x8		1902665	1		+			
ANR	1906172	Identifier	i4x4		1902665	0					
ANR	1906173	MultiplicativeExpression	4 * i8x8		1902665	1		*			
ANR	1906174	PrimaryExpression	4		1902665	0					
ANR	1906175	Identifier	i8x8		1902665	1					
ANR	1906176	IfStatement	"if ( decode_residual ( h , h -> intra_gb_ptr , h -> mb + 16 * index , index , scan + 1 , h -> dequant4_coeff [ 0 ] [ s -> qscale ] , 15 ) < 0 )"		1902665	1					
ANR	1906177	Condition	"decode_residual ( h , h -> intra_gb_ptr , h -> mb + 16 * index , index , scan + 1 , h -> dequant4_coeff [ 0 ] [ s -> qscale ] , 15 ) < 0"	833:28:17332:17442	1902665	0	True				
ANR	1906178	RelationalExpression	"decode_residual ( h , h -> intra_gb_ptr , h -> mb + 16 * index , index , scan + 1 , h -> dequant4_coeff [ 0 ] [ s -> qscale ] , 15 ) < 0"		1902665	0		<			
ANR	1906179	CallExpression	"decode_residual ( h , h -> intra_gb_ptr , h -> mb + 16 * index , index , scan + 1 , h -> dequant4_coeff [ 0 ] [ s -> qscale ] , 15 )"		1902665	0					
ANR	1906180	Callee	decode_residual		1902665	0					
ANR	1906181	Identifier	decode_residual		1902665	0					
ANR	1906182	ArgumentList	h		1902665	1					
ANR	1906183	Argument	h		1902665	0					
ANR	1906184	Identifier	h		1902665	0					
ANR	1906185	Argument	h -> intra_gb_ptr		1902665	1					
ANR	1906186	PtrMemberAccess	h -> intra_gb_ptr		1902665	0					
ANR	1906187	Identifier	h		1902665	0					
ANR	1906188	Identifier	intra_gb_ptr		1902665	1					
ANR	1906189	Argument	h -> mb + 16 * index		1902665	2					
ANR	1906190	AdditiveExpression	h -> mb + 16 * index		1902665	0		+			
ANR	1906191	PtrMemberAccess	h -> mb		1902665	0					
ANR	1906192	Identifier	h		1902665	0					
ANR	1906193	Identifier	mb		1902665	1					
ANR	1906194	MultiplicativeExpression	16 * index		1902665	1		*			
ANR	1906195	PrimaryExpression	16		1902665	0					
ANR	1906196	Identifier	index		1902665	1					
ANR	1906197	Argument	index		1902665	3					
ANR	1906198	Identifier	index		1902665	0					
ANR	1906199	Argument	scan + 1		1902665	4					
ANR	1906200	AdditiveExpression	scan + 1		1902665	0		+			
ANR	1906201	Identifier	scan		1902665	0					
ANR	1906202	PrimaryExpression	1		1902665	1					
ANR	1906203	Argument	h -> dequant4_coeff [ 0 ] [ s -> qscale ]		1902665	5					
ANR	1906204	ArrayIndexing	h -> dequant4_coeff [ 0 ] [ s -> qscale ]		1902665	0					
ANR	1906205	ArrayIndexing	h -> dequant4_coeff [ 0 ]		1902665	0					
ANR	1906206	PtrMemberAccess	h -> dequant4_coeff		1902665	0					
ANR	1906207	Identifier	h		1902665	0					
ANR	1906208	Identifier	dequant4_coeff		1902665	1					
ANR	1906209	PrimaryExpression	0		1902665	1					
ANR	1906210	PtrMemberAccess	s -> qscale		1902665	1					
ANR	1906211	Identifier	s		1902665	0					
ANR	1906212	Identifier	qscale		1902665	1					
ANR	1906213	Argument	15		1902665	6					
ANR	1906214	PrimaryExpression	15		1902665	0					
ANR	1906215	PrimaryExpression	0		1902665	1					
ANR	1906216	CompoundStatement		833:141:17402:17402	1902665	1					
ANR	1906217	ReturnStatement	return - 1 ;	835:28:17476:17485	1902665	0	True				
ANR	1906218	UnaryOperationExpression	- 1		1902665	0					
ANR	1906219	UnaryOperator	-		1902665	0					
ANR	1906220	PrimaryExpression	1		1902665	1					
ANR	1906221	ElseStatement	else		1902665	0					
ANR	1906222	CompoundStatement		843:17:17531:17531	1902665	0					
ANR	1906223	ExpressionStatement	"fill_rectangle ( & h -> non_zero_count_cache [ scan8 [ 0 ] ] , 4 , 4 , 8 , 0 , 1 )"	845:16:17593:17658	1902665	0	True				
ANR	1906224	CallExpression	"fill_rectangle ( & h -> non_zero_count_cache [ scan8 [ 0 ] ] , 4 , 4 , 8 , 0 , 1 )"		1902665	0					
ANR	1906225	Callee	fill_rectangle		1902665	0					
ANR	1906226	Identifier	fill_rectangle		1902665	0					
ANR	1906227	ArgumentList	& h -> non_zero_count_cache [ scan8 [ 0 ] ]		1902665	1					
ANR	1906228	Argument	& h -> non_zero_count_cache [ scan8 [ 0 ] ]		1902665	0					
ANR	1906229	UnaryOperationExpression	& h -> non_zero_count_cache [ scan8 [ 0 ] ]		1902665	0					
ANR	1906230	UnaryOperator	&		1902665	0					
ANR	1906231	ArrayIndexing	h -> non_zero_count_cache [ scan8 [ 0 ] ]		1902665	1					
ANR	1906232	PtrMemberAccess	h -> non_zero_count_cache		1902665	0					
ANR	1906233	Identifier	h		1902665	0					
ANR	1906234	Identifier	non_zero_count_cache		1902665	1					
ANR	1906235	ArrayIndexing	scan8 [ 0 ]		1902665	1					
ANR	1906236	Identifier	scan8		1902665	0					
ANR	1906237	PrimaryExpression	0		1902665	1					
ANR	1906238	Argument	4		1902665	1					
ANR	1906239	PrimaryExpression	4		1902665	0					
ANR	1906240	Argument	4		1902665	2					
ANR	1906241	PrimaryExpression	4		1902665	0					
ANR	1906242	Argument	8		1902665	3					
ANR	1906243	PrimaryExpression	8		1902665	0					
ANR	1906244	Argument	0		1902665	4					
ANR	1906245	PrimaryExpression	0		1902665	0					
ANR	1906246	Argument	1		1902665	5					
ANR	1906247	PrimaryExpression	1		1902665	0					
ANR	1906248	ElseStatement	else		1902665	0					
ANR	1906249	CompoundStatement		849:13:17646:17646	1902665	0					
ANR	1906250	ForStatement	for ( i8x8 = 0 ; i8x8 < 4 ; i8x8 ++ )		1902665	0					
ANR	1906251	ForInit	i8x8 = 0 ;	851:16:17708:17714	1902665	0	True				
ANR	1906252	AssignmentExpression	i8x8 = 0		1902665	0		=			
ANR	1906253	Identifier	i8x8		1902665	0					
ANR	1906254	PrimaryExpression	0		1902665	1					
ANR	1906255	Condition	i8x8 < 4	851:24:17716:17721	1902665	1	True				
ANR	1906256	RelationalExpression	i8x8 < 4		1902665	0		<			
ANR	1906257	Identifier	i8x8		1902665	0					
ANR	1906258	PrimaryExpression	4		1902665	1					
ANR	1906259	PostIncDecOperationExpression	i8x8 ++	851:32:17724:17729	1902665	2	True				
ANR	1906260	Identifier	i8x8		1902665	0					
ANR	1906261	IncDec	++		1902665	1					
ANR	1906262	CompoundStatement		851:39:17688:17688	1902665	3					
ANR	1906263	IfStatement	if ( cbp & ( 1 << i8x8 ) )		1902665	0					
ANR	1906264	Condition	cbp & ( 1 << i8x8 )	853:19:17753:17767	1902665	0	True				
ANR	1906265	BitAndExpression	cbp & ( 1 << i8x8 )		1902665	0		&			
ANR	1906266	Identifier	cbp		1902665	0					
ANR	1906267	ShiftExpression	1 << i8x8		1902665	1		<<			
ANR	1906268	PrimaryExpression	1		1902665	0					
ANR	1906269	Identifier	i8x8		1902665	1					
ANR	1906270	CompoundStatement		853:35:17726:17726	1902665	1					
ANR	1906271	IfStatement	if ( IS_8x8DCT ( mb_type ) )		1902665	0					
ANR	1906272	Condition	IS_8x8DCT ( mb_type )	855:23:17795:17812	1902665	0	True				
ANR	1906273	CallExpression	IS_8x8DCT ( mb_type )		1902665	0					
ANR	1906274	Callee	IS_8x8DCT		1902665	0					
ANR	1906275	Identifier	IS_8x8DCT		1902665	0					
ANR	1906276	ArgumentList	mb_type		1902665	1					
ANR	1906277	Argument	mb_type		1902665	0					
ANR	1906278	Identifier	mb_type		1902665	0					
ANR	1906279	CompoundStatement		859:24:17855:17867	1902665	1					
ANR	1906280	IdentifierDeclStatement	DCTELEM * buf = & h -> mb [ 64 * i8x8 ] ;	857:24:17841:17871	1902665	0	True				
ANR	1906281	IdentifierDecl	* buf = & h -> mb [ 64 * i8x8 ]		1902665	0					
ANR	1906282	IdentifierDeclType	DCTELEM *		1902665	0					
ANR	1906283	Identifier	buf		1902665	1					
ANR	1906284	AssignmentExpression	* buf = & h -> mb [ 64 * i8x8 ]		1902665	2		=			
ANR	1906285	Identifier	buf		1902665	0					
ANR	1906286	UnaryOperationExpression	& h -> mb [ 64 * i8x8 ]		1902665	1					
ANR	1906287	UnaryOperator	&		1902665	0					
ANR	1906288	ArrayIndexing	h -> mb [ 64 * i8x8 ]		1902665	1					
ANR	1906289	PtrMemberAccess	h -> mb		1902665	0					
ANR	1906290	Identifier	h		1902665	0					
ANR	1906291	Identifier	mb		1902665	1					
ANR	1906292	MultiplicativeExpression	64 * i8x8		1902665	1		*			
ANR	1906293	PrimaryExpression	64		1902665	0					
ANR	1906294	Identifier	i8x8		1902665	1					
ANR	1906295	IdentifierDeclStatement	uint8_t * nnz ;	859:24:17898:17910	1902665	1	True				
ANR	1906296	IdentifierDecl	* nnz		1902665	0					
ANR	1906297	IdentifierDeclType	uint8_t *		1902665	0					
ANR	1906298	Identifier	nnz		1902665	1					
ANR	1906299	ForStatement	for ( i4x4 = 0 ; i4x4 < 4 ; i4x4 ++ )		1902665	2					
ANR	1906300	ForInit	i4x4 = 0 ;	861:28:17941:17947	1902665	0	True				
ANR	1906301	AssignmentExpression	i4x4 = 0		1902665	0		=			
ANR	1906302	Identifier	i4x4		1902665	0					
ANR	1906303	PrimaryExpression	0		1902665	1					
ANR	1906304	Condition	i4x4 < 4	861:36:17949:17954	1902665	1	True				
ANR	1906305	RelationalExpression	i4x4 < 4		1902665	0		<			
ANR	1906306	Identifier	i4x4		1902665	0					
ANR	1906307	PrimaryExpression	4		1902665	1					
ANR	1906308	PostIncDecOperationExpression	i4x4 ++	861:44:17957:17962	1902665	2	True				
ANR	1906309	Identifier	i4x4		1902665	0					
ANR	1906310	IncDec	++		1902665	1					
ANR	1906311	CompoundStatement		861:51:17921:17921	1902665	3					
ANR	1906312	IfStatement	"if ( decode_residual ( h , gb , buf , i4x4 + 4 * i8x8 , scan8x8 + 16 * i4x4 , h -> dequant8_coeff [ IS_INTRA ( mb_type ) ? 0 : 1 ] [ s -> qscale ] , 16 ) < 0 )"		1902665	0					
ANR	1906313	Condition	"decode_residual ( h , gb , buf , i4x4 + 4 * i8x8 , scan8x8 + 16 * i4x4 , h -> dequant8_coeff [ IS_INTRA ( mb_type ) ? 0 : 1 ] [ s -> qscale ] , 16 ) < 0"	863:32:17999:18168	1902665	0	True				
ANR	1906314	RelationalExpression	"decode_residual ( h , gb , buf , i4x4 + 4 * i8x8 , scan8x8 + 16 * i4x4 , h -> dequant8_coeff [ IS_INTRA ( mb_type ) ? 0 : 1 ] [ s -> qscale ] , 16 ) < 0"		1902665	0		<			
ANR	1906315	CallExpression	"decode_residual ( h , gb , buf , i4x4 + 4 * i8x8 , scan8x8 + 16 * i4x4 , h -> dequant8_coeff [ IS_INTRA ( mb_type ) ? 0 : 1 ] [ s -> qscale ] , 16 )"		1902665	0					
ANR	1906316	Callee	decode_residual		1902665	0					
ANR	1906317	Identifier	decode_residual		1902665	0					
ANR	1906318	ArgumentList	h		1902665	1					
ANR	1906319	Argument	h		1902665	0					
ANR	1906320	Identifier	h		1902665	0					
ANR	1906321	Argument	gb		1902665	1					
ANR	1906322	Identifier	gb		1902665	0					
ANR	1906323	Argument	buf		1902665	2					
ANR	1906324	Identifier	buf		1902665	0					
ANR	1906325	Argument	i4x4 + 4 * i8x8		1902665	3					
ANR	1906326	AdditiveExpression	i4x4 + 4 * i8x8		1902665	0		+			
ANR	1906327	Identifier	i4x4		1902665	0					
ANR	1906328	MultiplicativeExpression	4 * i8x8		1902665	1		*			
ANR	1906329	PrimaryExpression	4		1902665	0					
ANR	1906330	Identifier	i8x8		1902665	1					
ANR	1906331	Argument	scan8x8 + 16 * i4x4		1902665	4					
ANR	1906332	AdditiveExpression	scan8x8 + 16 * i4x4		1902665	0		+			
ANR	1906333	Identifier	scan8x8		1902665	0					
ANR	1906334	MultiplicativeExpression	16 * i4x4		1902665	1		*			
ANR	1906335	PrimaryExpression	16		1902665	0					
ANR	1906336	Identifier	i4x4		1902665	1					
ANR	1906337	Argument	h -> dequant8_coeff [ IS_INTRA ( mb_type ) ? 0 : 1 ] [ s -> qscale ]		1902665	5					
ANR	1906338	ArrayIndexing	h -> dequant8_coeff [ IS_INTRA ( mb_type ) ? 0 : 1 ] [ s -> qscale ]		1902665	0					
ANR	1906339	ArrayIndexing	h -> dequant8_coeff [ IS_INTRA ( mb_type ) ? 0 : 1 ]		1902665	0					
ANR	1906340	PtrMemberAccess	h -> dequant8_coeff		1902665	0					
ANR	1906341	Identifier	h		1902665	0					
ANR	1906342	Identifier	dequant8_coeff		1902665	1					
ANR	1906343	ConditionalExpression	IS_INTRA ( mb_type ) ? 0 : 1		1902665	1					
ANR	1906344	Condition	IS_INTRA ( mb_type )		1902665	0					
ANR	1906345	CallExpression	IS_INTRA ( mb_type )		1902665	0					
ANR	1906346	Callee	IS_INTRA		1902665	0					
ANR	1906347	Identifier	IS_INTRA		1902665	0					
ANR	1906348	ArgumentList	mb_type		1902665	1					
ANR	1906349	Argument	mb_type		1902665	0					
ANR	1906350	Identifier	mb_type		1902665	0					
ANR	1906351	PrimaryExpression	0		1902665	1					
ANR	1906352	PrimaryExpression	1		1902665	2					
ANR	1906353	PtrMemberAccess	s -> qscale		1902665	1					
ANR	1906354	Identifier	s		1902665	0					
ANR	1906355	Identifier	qscale		1902665	1					
ANR	1906356	Argument	16		1902665	6					
ANR	1906357	PrimaryExpression	16		1902665	0					
ANR	1906358	PrimaryExpression	0		1902665	1					
ANR	1906359	ReturnStatement	return - 1 ;	867:32:18205:18214	1902665	1	True				
ANR	1906360	UnaryOperationExpression	- 1		1902665	0					
ANR	1906361	UnaryOperator	-		1902665	0					
ANR	1906362	PrimaryExpression	1		1902665	1					
ANR	1906363	ExpressionStatement	nnz = & h -> non_zero_count_cache [ scan8 [ 4 * i8x8 ] ]	871:24:18268:18314	1902665	3	True				
ANR	1906364	AssignmentExpression	nnz = & h -> non_zero_count_cache [ scan8 [ 4 * i8x8 ] ]		1902665	0		=			
ANR	1906365	Identifier	nnz		1902665	0					
ANR	1906366	UnaryOperationExpression	& h -> non_zero_count_cache [ scan8 [ 4 * i8x8 ] ]		1902665	1					
ANR	1906367	UnaryOperator	&		1902665	0					
ANR	1906368	ArrayIndexing	h -> non_zero_count_cache [ scan8 [ 4 * i8x8 ] ]		1902665	1					
ANR	1906369	PtrMemberAccess	h -> non_zero_count_cache		1902665	0					
ANR	1906370	Identifier	h		1902665	0					
ANR	1906371	Identifier	non_zero_count_cache		1902665	1					
ANR	1906372	ArrayIndexing	scan8 [ 4 * i8x8 ]		1902665	1					
ANR	1906373	Identifier	scan8		1902665	0					
ANR	1906374	MultiplicativeExpression	4 * i8x8		1902665	1		*			
ANR	1906375	PrimaryExpression	4		1902665	0					
ANR	1906376	Identifier	i8x8		1902665	1					
ANR	1906377	ExpressionStatement	nnz [ 0 ] += nnz [ 1 ] + nnz [ 8 ] + nnz [ 9 ]	873:24:18341:18375	1902665	4	True				
ANR	1906378	AssignmentExpression	nnz [ 0 ] += nnz [ 1 ] + nnz [ 8 ] + nnz [ 9 ]		1902665	0		+=			
ANR	1906379	ArrayIndexing	nnz [ 0 ]		1902665	0					
ANR	1906380	Identifier	nnz		1902665	0					
ANR	1906381	PrimaryExpression	0		1902665	1					
ANR	1906382	AdditiveExpression	nnz [ 1 ] + nnz [ 8 ] + nnz [ 9 ]		1902665	1		+			
ANR	1906383	ArrayIndexing	nnz [ 1 ]		1902665	0					
ANR	1906384	Identifier	nnz		1902665	0					
ANR	1906385	PrimaryExpression	1		1902665	1					
ANR	1906386	AdditiveExpression	nnz [ 8 ] + nnz [ 9 ]		1902665	1		+			
ANR	1906387	ArrayIndexing	nnz [ 8 ]		1902665	0					
ANR	1906388	Identifier	nnz		1902665	0					
ANR	1906389	PrimaryExpression	8		1902665	1					
ANR	1906390	ArrayIndexing	nnz [ 9 ]		1902665	1					
ANR	1906391	Identifier	nnz		1902665	0					
ANR	1906392	PrimaryExpression	9		1902665	1					
ANR	1906393	ElseStatement	else		1902665	0					
ANR	1906394	CompoundStatement		875:25:18360:18360	1902665	0					
ANR	1906395	ForStatement	for ( i4x4 = 0 ; i4x4 < 4 ; i4x4 ++ )		1902665	0					
ANR	1906396	ForInit	i4x4 = 0 ;	877:28:18434:18440	1902665	0	True				
ANR	1906397	AssignmentExpression	i4x4 = 0		1902665	0		=			
ANR	1906398	Identifier	i4x4		1902665	0					
ANR	1906399	PrimaryExpression	0		1902665	1					
ANR	1906400	Condition	i4x4 < 4	877:36:18442:18447	1902665	1	True				
ANR	1906401	RelationalExpression	i4x4 < 4		1902665	0		<			
ANR	1906402	Identifier	i4x4		1902665	0					
ANR	1906403	PrimaryExpression	4		1902665	1					
ANR	1906404	PostIncDecOperationExpression	i4x4 ++	877:44:18450:18455	1902665	2	True				
ANR	1906405	Identifier	i4x4		1902665	0					
ANR	1906406	IncDec	++		1902665	1					
ANR	1906407	CompoundStatement		879:28:18445:18475	1902665	3					
ANR	1906408	IdentifierDeclStatement	const int index = i4x4 + 4 * i8x8 ;	879:28:18488:18518	1902665	0	True				
ANR	1906409	IdentifierDecl	index = i4x4 + 4 * i8x8		1902665	0					
ANR	1906410	IdentifierDeclType	const int		1902665	0					
ANR	1906411	Identifier	index		1902665	1					
ANR	1906412	AssignmentExpression	index = i4x4 + 4 * i8x8		1902665	2		=			
ANR	1906413	Identifier	index		1902665	0					
ANR	1906414	AdditiveExpression	i4x4 + 4 * i8x8		1902665	1		+			
ANR	1906415	Identifier	i4x4		1902665	0					
ANR	1906416	MultiplicativeExpression	4 * i8x8		1902665	1		*			
ANR	1906417	PrimaryExpression	4		1902665	0					
ANR	1906418	Identifier	i8x8		1902665	1					
ANR	1906419	IfStatement	"if ( decode_residual ( h , gb , h -> mb + 16 * index , index , scan , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 0 : 3 ] [ s -> qscale ] , 16 ) < 0 )"		1902665	1					
ANR	1906420	Condition	"decode_residual ( h , gb , h -> mb + 16 * index , index , scan , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 0 : 3 ] [ s -> qscale ] , 16 ) < 0"	883:32:18555:18671	1902665	0	True				
ANR	1906421	RelationalExpression	"decode_residual ( h , gb , h -> mb + 16 * index , index , scan , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 0 : 3 ] [ s -> qscale ] , 16 ) < 0"		1902665	0		<			
ANR	1906422	CallExpression	"decode_residual ( h , gb , h -> mb + 16 * index , index , scan , h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 0 : 3 ] [ s -> qscale ] , 16 )"		1902665	0					
ANR	1906423	Callee	decode_residual		1902665	0					
ANR	1906424	Identifier	decode_residual		1902665	0					
ANR	1906425	ArgumentList	h		1902665	1					
ANR	1906426	Argument	h		1902665	0					
ANR	1906427	Identifier	h		1902665	0					
ANR	1906428	Argument	gb		1902665	1					
ANR	1906429	Identifier	gb		1902665	0					
ANR	1906430	Argument	h -> mb + 16 * index		1902665	2					
ANR	1906431	AdditiveExpression	h -> mb + 16 * index		1902665	0		+			
ANR	1906432	PtrMemberAccess	h -> mb		1902665	0					
ANR	1906433	Identifier	h		1902665	0					
ANR	1906434	Identifier	mb		1902665	1					
ANR	1906435	MultiplicativeExpression	16 * index		1902665	1		*			
ANR	1906436	PrimaryExpression	16		1902665	0					
ANR	1906437	Identifier	index		1902665	1					
ANR	1906438	Argument	index		1902665	3					
ANR	1906439	Identifier	index		1902665	0					
ANR	1906440	Argument	scan		1902665	4					
ANR	1906441	Identifier	scan		1902665	0					
ANR	1906442	Argument	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 0 : 3 ] [ s -> qscale ]		1902665	5					
ANR	1906443	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 0 : 3 ] [ s -> qscale ]		1902665	0					
ANR	1906444	ArrayIndexing	h -> dequant4_coeff [ IS_INTRA ( mb_type ) ? 0 : 3 ]		1902665	0					
ANR	1906445	PtrMemberAccess	h -> dequant4_coeff		1902665	0					
ANR	1906446	Identifier	h		1902665	0					
ANR	1906447	Identifier	dequant4_coeff		1902665	1					
ANR	1906448	ConditionalExpression	IS_INTRA ( mb_type ) ? 0 : 3		1902665	1					
ANR	1906449	Condition	IS_INTRA ( mb_type )		1902665	0					
ANR	1906450	CallExpression	IS_INTRA ( mb_type )		1902665	0					
ANR	1906451	Callee	IS_INTRA		1902665	0					
ANR	1906452	Identifier	IS_INTRA		1902665	0					
ANR	1906453	ArgumentList	mb_type		1902665	1					
ANR	1906454	Argument	mb_type		1902665	0					
ANR	1906455	Identifier	mb_type		1902665	0					
ANR	1906456	PrimaryExpression	0		1902665	1					
ANR	1906457	PrimaryExpression	3		1902665	2					
ANR	1906458	PtrMemberAccess	s -> qscale		1902665	1					
ANR	1906459	Identifier	s		1902665	0					
ANR	1906460	Identifier	qscale		1902665	1					
ANR	1906461	Argument	16		1902665	6					
ANR	1906462	PrimaryExpression	16		1902665	0					
ANR	1906463	PrimaryExpression	0		1902665	1					
ANR	1906464	CompoundStatement		883:151:18631:18631	1902665	1					
ANR	1906465	ReturnStatement	return - 1 ;	885:32:18709:18718	1902665	0	True				
ANR	1906466	UnaryOperationExpression	- 1		1902665	0					
ANR	1906467	UnaryOperator	-		1902665	0					
ANR	1906468	PrimaryExpression	1		1902665	1					
ANR	1906469	ElseStatement	else		1902665	0					
ANR	1906470	CompoundStatement		893:21:18780:18780	1902665	0					
ANR	1906471	Statement	uint8_t	895:20:18846:18852	1902665	0	True				
ANR	1906472	Statement	*	895:28:18854:18854	1902665	1	True				
ANR	1906473	Statement	const	895:30:18856:18860	1902665	2	True				
ANR	1906474	ExpressionStatement	nnz = & h -> non_zero_count_cache [ scan8 [ 4 * i8x8 ] ]	895:36:18862:18908	1902665	3	True				
ANR	1906475	AssignmentExpression	nnz = & h -> non_zero_count_cache [ scan8 [ 4 * i8x8 ] ]		1902665	0		=			
ANR	1906476	Identifier	nnz		1902665	0					
ANR	1906477	UnaryOperationExpression	& h -> non_zero_count_cache [ scan8 [ 4 * i8x8 ] ]		1902665	1					
ANR	1906478	UnaryOperator	&		1902665	0					
ANR	1906479	ArrayIndexing	h -> non_zero_count_cache [ scan8 [ 4 * i8x8 ] ]		1902665	1					
ANR	1906480	PtrMemberAccess	h -> non_zero_count_cache		1902665	0					
ANR	1906481	Identifier	h		1902665	0					
ANR	1906482	Identifier	non_zero_count_cache		1902665	1					
ANR	1906483	ArrayIndexing	scan8 [ 4 * i8x8 ]		1902665	1					
ANR	1906484	Identifier	scan8		1902665	0					
ANR	1906485	MultiplicativeExpression	4 * i8x8		1902665	1		*			
ANR	1906486	PrimaryExpression	4		1902665	0					
ANR	1906487	Identifier	i8x8		1902665	1					
ANR	1906488	ExpressionStatement	nnz [ 0 ] = nnz [ 1 ] = nnz [ 8 ] = nnz [ 9 ] = 0	897:20:18931:18968	1902665	4	True				
ANR	1906489	AssignmentExpression	nnz [ 0 ] = nnz [ 1 ] = nnz [ 8 ] = nnz [ 9 ] = 0		1902665	0		=			
ANR	1906490	ArrayIndexing	nnz [ 0 ]		1902665	0					
ANR	1906491	Identifier	nnz		1902665	0					
ANR	1906492	PrimaryExpression	0		1902665	1					
ANR	1906493	AssignmentExpression	nnz [ 1 ] = nnz [ 8 ] = nnz [ 9 ] = 0		1902665	1		=			
ANR	1906494	ArrayIndexing	nnz [ 1 ]		1902665	0					
ANR	1906495	Identifier	nnz		1902665	0					
ANR	1906496	PrimaryExpression	1		1902665	1					
ANR	1906497	AssignmentExpression	nnz [ 8 ] = nnz [ 9 ] = 0		1902665	1		=			
ANR	1906498	ArrayIndexing	nnz [ 8 ]		1902665	0					
ANR	1906499	Identifier	nnz		1902665	0					
ANR	1906500	PrimaryExpression	8		1902665	1					
ANR	1906501	AssignmentExpression	nnz [ 9 ] = 0		1902665	1		=			
ANR	1906502	ArrayIndexing	nnz [ 9 ]		1902665	0					
ANR	1906503	Identifier	nnz		1902665	0					
ANR	1906504	PrimaryExpression	9		1902665	1					
ANR	1906505	PrimaryExpression	0		1902665	1					
ANR	1906506	IfStatement	if ( cbp & 0x30 )		1902665	11					
ANR	1906507	Condition	cbp & 0x30	907:11:19029:19036	1902665	0	True				
ANR	1906508	BitAndExpression	cbp & 0x30		1902665	0		&			
ANR	1906509	Identifier	cbp		1902665	0					
ANR	1906510	PrimaryExpression	0x30		1902665	1					
ANR	1906511	CompoundStatement		907:20:18995:18995	1902665	1					
ANR	1906512	ForStatement	for ( chroma_idx = 0 ; chroma_idx < 2 ; chroma_idx ++ )		1902665	0					
ANR	1906513	ForInit	chroma_idx = 0 ;	909:16:19057:19069	1902665	0	True				
ANR	1906514	AssignmentExpression	chroma_idx = 0		1902665	0		=			
ANR	1906515	Identifier	chroma_idx		1902665	0					
ANR	1906516	PrimaryExpression	0		1902665	1					
ANR	1906517	Condition	chroma_idx < 2	909:30:19071:19082	1902665	1	True				
ANR	1906518	RelationalExpression	chroma_idx < 2		1902665	0		<			
ANR	1906519	Identifier	chroma_idx		1902665	0					
ANR	1906520	PrimaryExpression	2		1902665	1					
ANR	1906521	PostIncDecOperationExpression	chroma_idx ++	909:44:19085:19096	1902665	2	True				
ANR	1906522	Identifier	chroma_idx		1902665	0					
ANR	1906523	IncDec	++		1902665	1					
ANR	1906524	IfStatement	"if ( decode_residual ( h , gb , h -> mb + 256 + 16 * 4 * chroma_idx , CHROMA_DC_BLOCK_INDEX , chroma_dc_scan , NULL , 4 ) < 0 )"		1902665	3					
ANR	1906525	Condition	"decode_residual ( h , gb , h -> mb + 256 + 16 * 4 * chroma_idx , CHROMA_DC_BLOCK_INDEX , chroma_dc_scan , NULL , 4 ) < 0"	911:20:19120:19224	1902665	0	True				
ANR	1906526	RelationalExpression	"decode_residual ( h , gb , h -> mb + 256 + 16 * 4 * chroma_idx , CHROMA_DC_BLOCK_INDEX , chroma_dc_scan , NULL , 4 ) < 0"		1902665	0		<			
ANR	1906527	CallExpression	"decode_residual ( h , gb , h -> mb + 256 + 16 * 4 * chroma_idx , CHROMA_DC_BLOCK_INDEX , chroma_dc_scan , NULL , 4 )"		1902665	0					
ANR	1906528	Callee	decode_residual		1902665	0					
ANR	1906529	Identifier	decode_residual		1902665	0					
ANR	1906530	ArgumentList	h		1902665	1					
ANR	1906531	Argument	h		1902665	0					
ANR	1906532	Identifier	h		1902665	0					
ANR	1906533	Argument	gb		1902665	1					
ANR	1906534	Identifier	gb		1902665	0					
ANR	1906535	Argument	h -> mb + 256 + 16 * 4 * chroma_idx		1902665	2					
ANR	1906536	AdditiveExpression	h -> mb + 256 + 16 * 4 * chroma_idx		1902665	0		+			
ANR	1906537	PtrMemberAccess	h -> mb		1902665	0					
ANR	1906538	Identifier	h		1902665	0					
ANR	1906539	Identifier	mb		1902665	1					
ANR	1906540	AdditiveExpression	256 + 16 * 4 * chroma_idx		1902665	1		+			
ANR	1906541	PrimaryExpression	256		1902665	0					
ANR	1906542	MultiplicativeExpression	16 * 4 * chroma_idx		1902665	1		*			
ANR	1906543	PrimaryExpression	16		1902665	0					
ANR	1906544	MultiplicativeExpression	4 * chroma_idx		1902665	1		*			
ANR	1906545	PrimaryExpression	4		1902665	0					
ANR	1906546	Identifier	chroma_idx		1902665	1					
ANR	1906547	Argument	CHROMA_DC_BLOCK_INDEX		1902665	3					
ANR	1906548	Identifier	CHROMA_DC_BLOCK_INDEX		1902665	0					
ANR	1906549	Argument	chroma_dc_scan		1902665	4					
ANR	1906550	Identifier	chroma_dc_scan		1902665	0					
ANR	1906551	Argument	NULL		1902665	5					
ANR	1906552	Identifier	NULL		1902665	0					
ANR	1906553	Argument	4		1902665	6					
ANR	1906554	PrimaryExpression	4		1902665	0					
ANR	1906555	PrimaryExpression	0		1902665	1					
ANR	1906556	CompoundStatement		911:126:19183:19183	1902665	1					
ANR	1906557	ReturnStatement	return - 1 ;	913:20:19249:19258	1902665	0	True				
ANR	1906558	UnaryOperationExpression	- 1		1902665	0					
ANR	1906559	UnaryOperator	-		1902665	0					
ANR	1906560	PrimaryExpression	1		1902665	1					
ANR	1906561	IfStatement	if ( cbp & 0x20 )		1902665	12					
ANR	1906562	Condition	cbp & 0x20	921:11:19304:19311	1902665	0	True				
ANR	1906563	BitAndExpression	cbp & 0x20		1902665	0		&			
ANR	1906564	Identifier	cbp		1902665	0					
ANR	1906565	PrimaryExpression	0x20		1902665	1					
ANR	1906566	CompoundStatement		921:20:19270:19270	1902665	1					
ANR	1906567	ForStatement	for ( chroma_idx = 0 ; chroma_idx < 2 ; chroma_idx ++ )		1902665	0					
ANR	1906568	ForInit	chroma_idx = 0 ;	923:16:19332:19344	1902665	0	True				
ANR	1906569	AssignmentExpression	chroma_idx = 0		1902665	0		=			
ANR	1906570	Identifier	chroma_idx		1902665	0					
ANR	1906571	PrimaryExpression	0		1902665	1					
ANR	1906572	Condition	chroma_idx < 2	923:30:19346:19357	1902665	1	True				
ANR	1906573	RelationalExpression	chroma_idx < 2		1902665	0		<			
ANR	1906574	Identifier	chroma_idx		1902665	0					
ANR	1906575	PrimaryExpression	2		1902665	1					
ANR	1906576	PostIncDecOperationExpression	chroma_idx ++	923:44:19360:19371	1902665	2	True				
ANR	1906577	Identifier	chroma_idx		1902665	0					
ANR	1906578	IncDec	++		1902665	1					
ANR	1906579	CompoundStatement		925:16:19349:19442	1902665	3					
ANR	1906580	IdentifierDeclStatement	const uint32_t * qmul = h -> dequant4_coeff [ chroma_idx + 1 + ( IS_INTRA ( mb_type ) ? 0 : 3 ) ] [ chroma_qp ] ;	925:16:19392:19485	1902665	0	True				
ANR	1906581	IdentifierDecl	* qmul = h -> dequant4_coeff [ chroma_idx + 1 + ( IS_INTRA ( mb_type ) ? 0 : 3 ) ] [ chroma_qp ]		1902665	0					
ANR	1906582	IdentifierDeclType	const uint32_t *		1902665	0					
ANR	1906583	Identifier	qmul		1902665	1					
ANR	1906584	AssignmentExpression	* qmul = h -> dequant4_coeff [ chroma_idx + 1 + ( IS_INTRA ( mb_type ) ? 0 : 3 ) ] [ chroma_qp ]		1902665	2		=			
ANR	1906585	Identifier	qmul		1902665	0					
ANR	1906586	ArrayIndexing	h -> dequant4_coeff [ chroma_idx + 1 + ( IS_INTRA ( mb_type ) ? 0 : 3 ) ] [ chroma_qp ]		1902665	1					
ANR	1906587	ArrayIndexing	h -> dequant4_coeff [ chroma_idx + 1 + ( IS_INTRA ( mb_type ) ? 0 : 3 ) ]		1902665	0					
ANR	1906588	PtrMemberAccess	h -> dequant4_coeff		1902665	0					
ANR	1906589	Identifier	h		1902665	0					
ANR	1906590	Identifier	dequant4_coeff		1902665	1					
ANR	1906591	AdditiveExpression	chroma_idx + 1 + ( IS_INTRA ( mb_type ) ? 0 : 3 )		1902665	1		+			
ANR	1906592	Identifier	chroma_idx		1902665	0					
ANR	1906593	AdditiveExpression	1 + ( IS_INTRA ( mb_type ) ? 0 : 3 )		1902665	1		+			
ANR	1906594	PrimaryExpression	1		1902665	0					
ANR	1906595	ConditionalExpression	IS_INTRA ( mb_type ) ? 0 : 3		1902665	1					
ANR	1906596	Condition	IS_INTRA ( mb_type )		1902665	0					
ANR	1906597	CallExpression	IS_INTRA ( mb_type )		1902665	0					
ANR	1906598	Callee	IS_INTRA		1902665	0					
ANR	1906599	Identifier	IS_INTRA		1902665	0					
ANR	1906600	ArgumentList	mb_type		1902665	1					
ANR	1906601	Argument	mb_type		1902665	0					
ANR	1906602	Identifier	mb_type		1902665	0					
ANR	1906603	PrimaryExpression	0		1902665	1					
ANR	1906604	PrimaryExpression	3		1902665	2					
ANR	1906605	Identifier	chroma_qp		1902665	1					
ANR	1906606	ForStatement	for ( i4x4 = 0 ; i4x4 < 4 ; i4x4 ++ )		1902665	1					
ANR	1906607	ForInit	i4x4 = 0 ;	927:20:19508:19514	1902665	0	True				
ANR	1906608	AssignmentExpression	i4x4 = 0		1902665	0		=			
ANR	1906609	Identifier	i4x4		1902665	0					
ANR	1906610	PrimaryExpression	0		1902665	1					
ANR	1906611	Condition	i4x4 < 4	927:28:19516:19521	1902665	1	True				
ANR	1906612	RelationalExpression	i4x4 < 4		1902665	0		<			
ANR	1906613	Identifier	i4x4		1902665	0					
ANR	1906614	PrimaryExpression	4		1902665	1					
ANR	1906615	PostIncDecOperationExpression	i4x4 ++	927:36:19524:19529	1902665	2	True				
ANR	1906616	Identifier	i4x4		1902665	0					
ANR	1906617	IncDec	++		1902665	1					
ANR	1906618	CompoundStatement		929:20:19511:19552	1902665	3					
ANR	1906619	IdentifierDeclStatement	const int index = 16 + 4 * chroma_idx + i4x4 ;	929:20:19554:19595	1902665	0	True				
ANR	1906620	IdentifierDecl	index = 16 + 4 * chroma_idx + i4x4		1902665	0					
ANR	1906621	IdentifierDeclType	const int		1902665	0					
ANR	1906622	Identifier	index		1902665	1					
ANR	1906623	AssignmentExpression	index = 16 + 4 * chroma_idx + i4x4		1902665	2		=			
ANR	1906624	Identifier	index		1902665	0					
ANR	1906625	AdditiveExpression	16 + 4 * chroma_idx + i4x4		1902665	1		+			
ANR	1906626	PrimaryExpression	16		1902665	0					
ANR	1906627	AdditiveExpression	4 * chroma_idx + i4x4		1902665	1		+			
ANR	1906628	MultiplicativeExpression	4 * chroma_idx		1902665	0		*			
ANR	1906629	PrimaryExpression	4		1902665	0					
ANR	1906630	Identifier	chroma_idx		1902665	1					
ANR	1906631	Identifier	i4x4		1902665	1					
ANR	1906632	IfStatement	"if ( decode_residual ( h , gb , h -> mb + 16 * index , index , scan + 1 , qmul , 15 ) < 0 )"		1902665	1					
ANR	1906633	Condition	"decode_residual ( h , gb , h -> mb + 16 * index , index , scan + 1 , qmul , 15 ) < 0"	931:24:19622:19692	1902665	0	True				
ANR	1906634	RelationalExpression	"decode_residual ( h , gb , h -> mb + 16 * index , index , scan + 1 , qmul , 15 ) < 0"		1902665	0		<			
ANR	1906635	CallExpression	"decode_residual ( h , gb , h -> mb + 16 * index , index , scan + 1 , qmul , 15 )"		1902665	0					
ANR	1906636	Callee	decode_residual		1902665	0					
ANR	1906637	Identifier	decode_residual		1902665	0					
ANR	1906638	ArgumentList	h		1902665	1					
ANR	1906639	Argument	h		1902665	0					
ANR	1906640	Identifier	h		1902665	0					
ANR	1906641	Argument	gb		1902665	1					
ANR	1906642	Identifier	gb		1902665	0					
ANR	1906643	Argument	h -> mb + 16 * index		1902665	2					
ANR	1906644	AdditiveExpression	h -> mb + 16 * index		1902665	0		+			
ANR	1906645	PtrMemberAccess	h -> mb		1902665	0					
ANR	1906646	Identifier	h		1902665	0					
ANR	1906647	Identifier	mb		1902665	1					
ANR	1906648	MultiplicativeExpression	16 * index		1902665	1		*			
ANR	1906649	PrimaryExpression	16		1902665	0					
ANR	1906650	Identifier	index		1902665	1					
ANR	1906651	Argument	index		1902665	3					
ANR	1906652	Identifier	index		1902665	0					
ANR	1906653	Argument	scan + 1		1902665	4					
ANR	1906654	AdditiveExpression	scan + 1		1902665	0		+			
ANR	1906655	Identifier	scan		1902665	0					
ANR	1906656	PrimaryExpression	1		1902665	1					
ANR	1906657	Argument	qmul		1902665	5					
ANR	1906658	Identifier	qmul		1902665	0					
ANR	1906659	Argument	15		1902665	6					
ANR	1906660	PrimaryExpression	15		1902665	0					
ANR	1906661	PrimaryExpression	0		1902665	1					
ANR	1906662	CompoundStatement		931:96:19651:19651	1902665	1					
ANR	1906663	ReturnStatement	return - 1 ;	933:24:19721:19730	1902665	0	True				
ANR	1906664	UnaryOperationExpression	- 1		1902665	0					
ANR	1906665	UnaryOperator	-		1902665	0					
ANR	1906666	PrimaryExpression	1		1902665	1					
ANR	1906667	ElseStatement	else		1902665	0					
ANR	1906668	CompoundStatement		941:13:19760:19760	1902665	0					
ANR	1906669	Statement	uint8_t	943:12:19818:19824	1902665	0	True				
ANR	1906670	Statement	*	943:20:19826:19826	1902665	1	True				
ANR	1906671	Statement	const	943:22:19828:19832	1902665	2	True				
ANR	1906672	ExpressionStatement	nnz = & h -> non_zero_count_cache [ 0 ]	943:28:19834:19866	1902665	3	True				
ANR	1906673	AssignmentExpression	nnz = & h -> non_zero_count_cache [ 0 ]		1902665	0		=			
ANR	1906674	Identifier	nnz		1902665	0					
ANR	1906675	UnaryOperationExpression	& h -> non_zero_count_cache [ 0 ]		1902665	1					
ANR	1906676	UnaryOperator	&		1902665	0					
ANR	1906677	ArrayIndexing	h -> non_zero_count_cache [ 0 ]		1902665	1					
ANR	1906678	PtrMemberAccess	h -> non_zero_count_cache		1902665	0					
ANR	1906679	Identifier	h		1902665	0					
ANR	1906680	Identifier	non_zero_count_cache		1902665	1					
ANR	1906681	PrimaryExpression	0		1902665	1					
ANR	1906682	ExpressionStatement	nnz [ scan8 [ 16 ] + 0 ] = nnz [ scan8 [ 16 ] + 1 ] = nnz [ scan8 [ 16 ] + 8 ] = nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0	945:12:19881:20059	1902665	4	True				
ANR	1906683	AssignmentExpression	nnz [ scan8 [ 16 ] + 0 ] = nnz [ scan8 [ 16 ] + 1 ] = nnz [ scan8 [ 16 ] + 8 ] = nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	0		=			
ANR	1906684	ArrayIndexing	nnz [ scan8 [ 16 ] + 0 ]		1902665	0					
ANR	1906685	Identifier	nnz		1902665	0					
ANR	1906686	AdditiveExpression	scan8 [ 16 ] + 0		1902665	1		+			
ANR	1906687	ArrayIndexing	scan8 [ 16 ]		1902665	0					
ANR	1906688	Identifier	scan8		1902665	0					
ANR	1906689	PrimaryExpression	16		1902665	1					
ANR	1906690	PrimaryExpression	0		1902665	1					
ANR	1906691	AssignmentExpression	nnz [ scan8 [ 16 ] + 1 ] = nnz [ scan8 [ 16 ] + 8 ] = nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906692	ArrayIndexing	nnz [ scan8 [ 16 ] + 1 ]		1902665	0					
ANR	1906693	Identifier	nnz		1902665	0					
ANR	1906694	AdditiveExpression	scan8 [ 16 ] + 1		1902665	1		+			
ANR	1906695	ArrayIndexing	scan8 [ 16 ]		1902665	0					
ANR	1906696	Identifier	scan8		1902665	0					
ANR	1906697	PrimaryExpression	16		1902665	1					
ANR	1906698	PrimaryExpression	1		1902665	1					
ANR	1906699	AssignmentExpression	nnz [ scan8 [ 16 ] + 8 ] = nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906700	ArrayIndexing	nnz [ scan8 [ 16 ] + 8 ]		1902665	0					
ANR	1906701	Identifier	nnz		1902665	0					
ANR	1906702	AdditiveExpression	scan8 [ 16 ] + 8		1902665	1		+			
ANR	1906703	ArrayIndexing	scan8 [ 16 ]		1902665	0					
ANR	1906704	Identifier	scan8		1902665	0					
ANR	1906705	PrimaryExpression	16		1902665	1					
ANR	1906706	PrimaryExpression	8		1902665	1					
ANR	1906707	AssignmentExpression	nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906708	ArrayIndexing	nnz [ scan8 [ 16 ] + 9 ]		1902665	0					
ANR	1906709	Identifier	nnz		1902665	0					
ANR	1906710	AdditiveExpression	scan8 [ 16 ] + 9		1902665	1		+			
ANR	1906711	ArrayIndexing	scan8 [ 16 ]		1902665	0					
ANR	1906712	Identifier	scan8		1902665	0					
ANR	1906713	PrimaryExpression	16		1902665	1					
ANR	1906714	PrimaryExpression	9		1902665	1					
ANR	1906715	AssignmentExpression	nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906716	ArrayIndexing	nnz [ scan8 [ 20 ] + 0 ]		1902665	0					
ANR	1906717	Identifier	nnz		1902665	0					
ANR	1906718	AdditiveExpression	scan8 [ 20 ] + 0		1902665	1		+			
ANR	1906719	ArrayIndexing	scan8 [ 20 ]		1902665	0					
ANR	1906720	Identifier	scan8		1902665	0					
ANR	1906721	PrimaryExpression	20		1902665	1					
ANR	1906722	PrimaryExpression	0		1902665	1					
ANR	1906723	AssignmentExpression	nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906724	ArrayIndexing	nnz [ scan8 [ 20 ] + 1 ]		1902665	0					
ANR	1906725	Identifier	nnz		1902665	0					
ANR	1906726	AdditiveExpression	scan8 [ 20 ] + 1		1902665	1		+			
ANR	1906727	ArrayIndexing	scan8 [ 20 ]		1902665	0					
ANR	1906728	Identifier	scan8		1902665	0					
ANR	1906729	PrimaryExpression	20		1902665	1					
ANR	1906730	PrimaryExpression	1		1902665	1					
ANR	1906731	AssignmentExpression	nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906732	ArrayIndexing	nnz [ scan8 [ 20 ] + 8 ]		1902665	0					
ANR	1906733	Identifier	nnz		1902665	0					
ANR	1906734	AdditiveExpression	scan8 [ 20 ] + 8		1902665	1		+			
ANR	1906735	ArrayIndexing	scan8 [ 20 ]		1902665	0					
ANR	1906736	Identifier	scan8		1902665	0					
ANR	1906737	PrimaryExpression	20		1902665	1					
ANR	1906738	PrimaryExpression	8		1902665	1					
ANR	1906739	AssignmentExpression	nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906740	ArrayIndexing	nnz [ scan8 [ 20 ] + 9 ]		1902665	0					
ANR	1906741	Identifier	nnz		1902665	0					
ANR	1906742	AdditiveExpression	scan8 [ 20 ] + 9		1902665	1		+			
ANR	1906743	ArrayIndexing	scan8 [ 20 ]		1902665	0					
ANR	1906744	Identifier	scan8		1902665	0					
ANR	1906745	PrimaryExpression	20		1902665	1					
ANR	1906746	PrimaryExpression	9		1902665	1					
ANR	1906747	PrimaryExpression	0		1902665	1					
ANR	1906748	ElseStatement	else		1902665	0					
ANR	1906749	CompoundStatement		951:9:20039:20039	1902665	0					
ANR	1906750	Statement	uint8_t	953:8:20093:20099	1902665	0	True				
ANR	1906751	Statement	*	953:16:20101:20101	1902665	1	True				
ANR	1906752	Statement	const	953:18:20103:20107	1902665	2	True				
ANR	1906753	ExpressionStatement	nnz = & h -> non_zero_count_cache [ 0 ]	953:24:20109:20141	1902665	3	True				
ANR	1906754	AssignmentExpression	nnz = & h -> non_zero_count_cache [ 0 ]		1902665	0		=			
ANR	1906755	Identifier	nnz		1902665	0					
ANR	1906756	UnaryOperationExpression	& h -> non_zero_count_cache [ 0 ]		1902665	1					
ANR	1906757	UnaryOperator	&		1902665	0					
ANR	1906758	ArrayIndexing	h -> non_zero_count_cache [ 0 ]		1902665	1					
ANR	1906759	PtrMemberAccess	h -> non_zero_count_cache		1902665	0					
ANR	1906760	Identifier	h		1902665	0					
ANR	1906761	Identifier	non_zero_count_cache		1902665	1					
ANR	1906762	PrimaryExpression	0		1902665	1					
ANR	1906763	ExpressionStatement	"fill_rectangle ( & nnz [ scan8 [ 0 ] ] , 4 , 4 , 8 , 0 , 1 )"	955:8:20152:20197	1902665	4	True				
ANR	1906764	CallExpression	"fill_rectangle ( & nnz [ scan8 [ 0 ] ] , 4 , 4 , 8 , 0 , 1 )"		1902665	0					
ANR	1906765	Callee	fill_rectangle		1902665	0					
ANR	1906766	Identifier	fill_rectangle		1902665	0					
ANR	1906767	ArgumentList	& nnz [ scan8 [ 0 ] ]		1902665	1					
ANR	1906768	Argument	& nnz [ scan8 [ 0 ] ]		1902665	0					
ANR	1906769	UnaryOperationExpression	& nnz [ scan8 [ 0 ] ]		1902665	0					
ANR	1906770	UnaryOperator	&		1902665	0					
ANR	1906771	ArrayIndexing	nnz [ scan8 [ 0 ] ]		1902665	1					
ANR	1906772	Identifier	nnz		1902665	0					
ANR	1906773	ArrayIndexing	scan8 [ 0 ]		1902665	1					
ANR	1906774	Identifier	scan8		1902665	0					
ANR	1906775	PrimaryExpression	0		1902665	1					
ANR	1906776	Argument	4		1902665	1					
ANR	1906777	PrimaryExpression	4		1902665	0					
ANR	1906778	Argument	4		1902665	2					
ANR	1906779	PrimaryExpression	4		1902665	0					
ANR	1906780	Argument	8		1902665	3					
ANR	1906781	PrimaryExpression	8		1902665	0					
ANR	1906782	Argument	0		1902665	4					
ANR	1906783	PrimaryExpression	0		1902665	0					
ANR	1906784	Argument	1		1902665	5					
ANR	1906785	PrimaryExpression	1		1902665	0					
ANR	1906786	ExpressionStatement	nnz [ scan8 [ 16 ] + 0 ] = nnz [ scan8 [ 16 ] + 1 ] = nnz [ scan8 [ 16 ] + 8 ] = nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0	957:8:20208:20382	1902665	5	True				
ANR	1906787	AssignmentExpression	nnz [ scan8 [ 16 ] + 0 ] = nnz [ scan8 [ 16 ] + 1 ] = nnz [ scan8 [ 16 ] + 8 ] = nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	0		=			
ANR	1906788	ArrayIndexing	nnz [ scan8 [ 16 ] + 0 ]		1902665	0					
ANR	1906789	Identifier	nnz		1902665	0					
ANR	1906790	AdditiveExpression	scan8 [ 16 ] + 0		1902665	1		+			
ANR	1906791	ArrayIndexing	scan8 [ 16 ]		1902665	0					
ANR	1906792	Identifier	scan8		1902665	0					
ANR	1906793	PrimaryExpression	16		1902665	1					
ANR	1906794	PrimaryExpression	0		1902665	1					
ANR	1906795	AssignmentExpression	nnz [ scan8 [ 16 ] + 1 ] = nnz [ scan8 [ 16 ] + 8 ] = nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906796	ArrayIndexing	nnz [ scan8 [ 16 ] + 1 ]		1902665	0					
ANR	1906797	Identifier	nnz		1902665	0					
ANR	1906798	AdditiveExpression	scan8 [ 16 ] + 1		1902665	1		+			
ANR	1906799	ArrayIndexing	scan8 [ 16 ]		1902665	0					
ANR	1906800	Identifier	scan8		1902665	0					
ANR	1906801	PrimaryExpression	16		1902665	1					
ANR	1906802	PrimaryExpression	1		1902665	1					
ANR	1906803	AssignmentExpression	nnz [ scan8 [ 16 ] + 8 ] = nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906804	ArrayIndexing	nnz [ scan8 [ 16 ] + 8 ]		1902665	0					
ANR	1906805	Identifier	nnz		1902665	0					
ANR	1906806	AdditiveExpression	scan8 [ 16 ] + 8		1902665	1		+			
ANR	1906807	ArrayIndexing	scan8 [ 16 ]		1902665	0					
ANR	1906808	Identifier	scan8		1902665	0					
ANR	1906809	PrimaryExpression	16		1902665	1					
ANR	1906810	PrimaryExpression	8		1902665	1					
ANR	1906811	AssignmentExpression	nnz [ scan8 [ 16 ] + 9 ] = nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906812	ArrayIndexing	nnz [ scan8 [ 16 ] + 9 ]		1902665	0					
ANR	1906813	Identifier	nnz		1902665	0					
ANR	1906814	AdditiveExpression	scan8 [ 16 ] + 9		1902665	1		+			
ANR	1906815	ArrayIndexing	scan8 [ 16 ]		1902665	0					
ANR	1906816	Identifier	scan8		1902665	0					
ANR	1906817	PrimaryExpression	16		1902665	1					
ANR	1906818	PrimaryExpression	9		1902665	1					
ANR	1906819	AssignmentExpression	nnz [ scan8 [ 20 ] + 0 ] = nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906820	ArrayIndexing	nnz [ scan8 [ 20 ] + 0 ]		1902665	0					
ANR	1906821	Identifier	nnz		1902665	0					
ANR	1906822	AdditiveExpression	scan8 [ 20 ] + 0		1902665	1		+			
ANR	1906823	ArrayIndexing	scan8 [ 20 ]		1902665	0					
ANR	1906824	Identifier	scan8		1902665	0					
ANR	1906825	PrimaryExpression	20		1902665	1					
ANR	1906826	PrimaryExpression	0		1902665	1					
ANR	1906827	AssignmentExpression	nnz [ scan8 [ 20 ] + 1 ] = nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906828	ArrayIndexing	nnz [ scan8 [ 20 ] + 1 ]		1902665	0					
ANR	1906829	Identifier	nnz		1902665	0					
ANR	1906830	AdditiveExpression	scan8 [ 20 ] + 1		1902665	1		+			
ANR	1906831	ArrayIndexing	scan8 [ 20 ]		1902665	0					
ANR	1906832	Identifier	scan8		1902665	0					
ANR	1906833	PrimaryExpression	20		1902665	1					
ANR	1906834	PrimaryExpression	1		1902665	1					
ANR	1906835	AssignmentExpression	nnz [ scan8 [ 20 ] + 8 ] = nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906836	ArrayIndexing	nnz [ scan8 [ 20 ] + 8 ]		1902665	0					
ANR	1906837	Identifier	nnz		1902665	0					
ANR	1906838	AdditiveExpression	scan8 [ 20 ] + 8		1902665	1		+			
ANR	1906839	ArrayIndexing	scan8 [ 20 ]		1902665	0					
ANR	1906840	Identifier	scan8		1902665	0					
ANR	1906841	PrimaryExpression	20		1902665	1					
ANR	1906842	PrimaryExpression	8		1902665	1					
ANR	1906843	AssignmentExpression	nnz [ scan8 [ 20 ] + 9 ] = 0		1902665	1		=			
ANR	1906844	ArrayIndexing	nnz [ scan8 [ 20 ] + 9 ]		1902665	0					
ANR	1906845	Identifier	nnz		1902665	0					
ANR	1906846	AdditiveExpression	scan8 [ 20 ] + 9		1902665	1		+			
ANR	1906847	ArrayIndexing	scan8 [ 20 ]		1902665	0					
ANR	1906848	Identifier	scan8		1902665	0					
ANR	1906849	PrimaryExpression	20		1902665	1					
ANR	1906850	PrimaryExpression	9		1902665	1					
ANR	1906851	PrimaryExpression	0		1902665	1					
ANR	1906852	ExpressionStatement	s -> current_picture . qscale_table [ mb_xy ] = s -> qscale	963:4:20396:20445	1902665	28	True				
ANR	1906853	AssignmentExpression	s -> current_picture . qscale_table [ mb_xy ] = s -> qscale		1902665	0		=			
ANR	1906854	ArrayIndexing	s -> current_picture . qscale_table [ mb_xy ]		1902665	0					
ANR	1906855	MemberAccess	s -> current_picture . qscale_table		1902665	0					
ANR	1906856	PtrMemberAccess	s -> current_picture		1902665	0					
ANR	1906857	Identifier	s		1902665	0					
ANR	1906858	Identifier	current_picture		1902665	1					
ANR	1906859	Identifier	qscale_table		1902665	1					
ANR	1906860	Identifier	mb_xy		1902665	1					
ANR	1906861	PtrMemberAccess	s -> qscale		1902665	1					
ANR	1906862	Identifier	s		1902665	0					
ANR	1906863	Identifier	qscale		1902665	1					
ANR	1906864	ExpressionStatement	write_back_non_zero_count ( h )	965:4:20452:20480	1902665	29	True				
ANR	1906865	CallExpression	write_back_non_zero_count ( h )		1902665	0					
ANR	1906866	Callee	write_back_non_zero_count		1902665	0					
ANR	1906867	Identifier	write_back_non_zero_count		1902665	0					
ANR	1906868	ArgumentList	h		1902665	1					
ANR	1906869	Argument	h		1902665	0					
ANR	1906870	Identifier	h		1902665	0					
ANR	1906871	IfStatement	if ( MB_MBAFF )		1902665	30					
ANR	1906872	Condition	MB_MBAFF	969:7:20492:20499	1902665	0	True				
ANR	1906873	Identifier	MB_MBAFF		1902665	0					
ANR	1906874	CompoundStatement		969:16:20458:20458	1902665	1					
ANR	1906875	ExpressionStatement	h -> ref_count [ 0 ] >>= 1	971:8:20512:20533	1902665	0	True				
ANR	1906876	AssignmentExpression	h -> ref_count [ 0 ] >>= 1		1902665	0		>>=			
ANR	1906877	ArrayIndexing	h -> ref_count [ 0 ]		1902665	0					
ANR	1906878	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1906879	Identifier	h		1902665	0					
ANR	1906880	Identifier	ref_count		1902665	1					
ANR	1906881	PrimaryExpression	0		1902665	1					
ANR	1906882	PrimaryExpression	1		1902665	1					
ANR	1906883	ExpressionStatement	h -> ref_count [ 1 ] >>= 1	973:8:20544:20565	1902665	1	True				
ANR	1906884	AssignmentExpression	h -> ref_count [ 1 ] >>= 1		1902665	0		>>=			
ANR	1906885	ArrayIndexing	h -> ref_count [ 1 ]		1902665	0					
ANR	1906886	PtrMemberAccess	h -> ref_count		1902665	0					
ANR	1906887	Identifier	h		1902665	0					
ANR	1906888	Identifier	ref_count		1902665	1					
ANR	1906889	PrimaryExpression	1		1902665	1					
ANR	1906890	PrimaryExpression	1		1902665	1					
ANR	1906891	ReturnStatement	return 0 ;	979:4:20581:20589	1902665	31	True				
ANR	1906892	PrimaryExpression	0		1902665	0					
ANR	1906893	ReturnType	static int		1902665	1					
ANR	1906894	Identifier	decode_mb_cavlc		1902665	2					
ANR	1906895	ParameterList	H264Context * h		1902665	3					
ANR	1906896	Parameter	H264Context * h	1:27:27:40	1902665	0	True				
ANR	1906897	ParameterType	H264Context *		1902665	0					
ANR	1906898	Identifier	h		1902665	1					
ANR	1906899	CFGEntryNode	ENTRY		1902665		True				
ANR	1906900	CFGExitNode	EXIT		1902665		True				
ANR	1906901	Symbol	* golomb_to_intra4x4_cbp		1902665						
ANR	1906902	Symbol	* x		1902665						
ANR	1906903	Symbol	pred_intra_mode		1902665						
ANR	1906904	Symbol	IS_INTRA_PCM		1902665						
ANR	1906905	Symbol	MB_TYPE_16x8		1902665						
ANR	1906906	Symbol	luma_dc_zigzag_scan		1902665						
ANR	1906907	Symbol	s -> current_picture		1902665						
ANR	1906908	Symbol	h -> s . avctx		1902665						
ANR	1906909	Symbol	h -> mb		1902665						
ANR	1906910	Symbol	* s -> current_picture . qscale_table		1902665						
ANR	1906911	Symbol	h -> zigzag_scan		1902665						
ANR	1906912	Symbol	pred_mode		1902665						
ANR	1906913	Symbol	IS_16X16		1902665						
ANR	1906914	Symbol	* s -> qscale		1902665						
ANR	1906915	Symbol	* golomb_to_inter_cbp		1902665						
ANR	1906916	Symbol	P_TYPE		1902665						
ANR	1906917	Symbol	s -> dsp		1902665						
ANR	1906918	Symbol	& h -> s		1902665						
ANR	1906919	Symbol	pack16to32		1902665						
ANR	1906920	Symbol	* s -> current_picture . mb_type		1902665						
ANR	1906921	Symbol	s -> mb_skip_run		1902665						
ANR	1906922	Symbol	* h -> dequant8_coeff		1902665						
ANR	1906923	Symbol	i_mb_type_info [ mb_type ] . cbp		1902665						
ANR	1906924	Symbol	scan		1902665						
ANR	1906925	Symbol	dquant		1902665						
ANR	1906926	Symbol	IS_SUB_4X8		1902665						
ANR	1906927	Symbol	h -> slice_type		1902665						
ANR	1906928	Symbol	* h -> ref_count		1902665						
ANR	1906929	Symbol	h -> slice_table		1902665						
ANR	1906930	Symbol	* * h -> dequant8_coeff		1902665						
ANR	1906931	Symbol	check_intra_pred_mode		1902665						
ANR	1906932	Symbol	* * h -> ref_cache		1902665						
ANR	1906933	Symbol	get_chroma_qp		1902665						
ANR	1906934	Symbol	p_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . partition_count		1902665						
ANR	1906935	Symbol	h -> intra16x16_pred_mode		1902665						
ANR	1906936	Symbol	h		1902665						
ANR	1906937	Symbol	i		1902665						
ANR	1906938	Symbol	j		1902665						
ANR	1906939	Symbol	golomb_to_inter_cbp		1902665						
ANR	1906940	Symbol	p		1902665						
ANR	1906941	Symbol	dc_scan		1902665						
ANR	1906942	Symbol	buf		1902665						
ANR	1906943	Symbol	s		1902665						
ANR	1906944	Symbol	x		1902665						
ANR	1906945	Symbol	y		1902665						
ANR	1906946	Symbol	h -> ref_count		1902665						
ANR	1906947	Symbol	LUMA_DC_BLOCK_INDEX		1902665						
ANR	1906948	Symbol	h -> slice_num		1902665						
ANR	1906949	Symbol	i_mb_type_info [ mb_type ] . pred_mode		1902665						
ANR	1906950	Symbol	I_TYPE		1902665						
ANR	1906951	Symbol	di		1902665						
ANR	1906952	Symbol	h -> sps . direct_8x8_inference_flag		1902665						
ANR	1906953	Symbol	chroma_qp		1902665						
ANR	1906954	Symbol	i_mb_type_info		1902665						
ANR	1906955	Symbol	h -> zigzag_scan_q0		1902665						
ANR	1906956	Symbol	* sub_partition_count		1902665						
ANR	1906957	Symbol	h -> list_count		1902665						
ANR	1906958	Symbol	ref		1902665						
ANR	1906959	Symbol	h -> field_scan8x8_cavlc_q0		1902665						
ANR	1906960	Symbol	IS_DIR		1902665						
ANR	1906961	Symbol	h -> mb_mbaff		1902665						
ANR	1906962	Symbol	* b_mb_type_info		1902665						
ANR	1906963	Symbol	rem_mode		1902665						
ANR	1906964	Symbol	* * i		1902665						
ANR	1906965	Symbol	* * h		1902665						
ANR	1906966	Symbol	* cbp		1902665						
ANR	1906967	Symbol	* IS_INTRA		1902665						
ANR	1906968	Symbol	chroma_idx		1902665						
ANR	1906969	Symbol	* chroma_idx		1902665						
ANR	1906970	Symbol	get_bits1		1902665						
ANR	1906971	Symbol	h -> mb_field_decoding_flag		1902665						
ANR	1906972	Symbol	& mb_type		1902665						
ANR	1906973	Symbol	list		1902665						
ANR	1906974	Symbol	* h -> mb		1902665						
ANR	1906975	Symbol	MB_TYPE_16x16		1902665						
ANR	1906976	Symbol	p_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . type		1902665						
ANR	1906977	Symbol	IS_REF0		1902665						
ANR	1906978	Symbol	h -> pps		1902665						
ANR	1906979	Symbol	nnz		1902665						
ANR	1906980	Symbol	scan8x8		1902665						
ANR	1906981	Symbol	b_mb_type_info		1902665						
ANR	1906982	Symbol	golomb_to_intra4x4_cbp		1902665						
ANR	1906983	Symbol	h -> chroma_qp		1902665						
ANR	1906984	Symbol	s -> mb_stride		1902665						
ANR	1906985	Symbol	IS_INTRA		1902665						
ANR	1906986	Symbol	block_width		1902665						
ANR	1906987	Symbol	s -> current_picture . mb_type		1902665						
ANR	1906988	Symbol	h -> ref_cache		1902665						
ANR	1906989	Symbol	* chroma_qp		1902665						
ANR	1906990	Symbol	b_sub_mb_type_info		1902665						
ANR	1906991	Symbol	* * list		1902665						
ANR	1906992	Symbol	i4x4		1902665						
ANR	1906993	Symbol	h -> pps . transform_8x8_mode		1902665						
ANR	1906994	Symbol	gb		1902665						
ANR	1906995	Symbol	* * index		1902665						
ANR	1906996	Symbol	i_mb_type_info [ mb_type ] . type		1902665						
ANR	1906997	Symbol	LIST_NOT_USED		1902665						
ANR	1906998	Symbol	p_mb_type_info [ mb_type ] . partition_count		1902665						
ANR	1906999	Symbol	get_se_golomb		1902665						
ANR	1907000	Symbol	h -> chroma_pred_mode		1902665						
ANR	1907001	Symbol	h -> field_scan8x8_cavlc		1902665						
ANR	1907002	Symbol	b_mb_type_info [ mb_type ] . partition_count		1902665						
ANR	1907003	Symbol	* * ref		1902665						
ANR	1907004	Symbol	h -> pps . chroma_qp_index_offset		1902665						
ANR	1907005	Symbol	s -> picture_structure		1902665						
ANR	1907006	Symbol	av_get_pict_type_char		1902665						
ANR	1907007	Symbol	PICT_FRAME		1902665						
ANR	1907008	Symbol	IS_INTRA16x16		1902665						
ANR	1907009	Symbol	* * h -> dequant4_coeff		1902665						
ANR	1907010	Symbol	* mb_xy		1902665						
ANR	1907011	Symbol	b_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . partition_count		1902665						
ANR	1907012	Symbol	h -> inter_gb_ptr		1902665						
ANR	1907013	Symbol	* h -> ref_cache		1902665						
ANR	1907014	Symbol	h -> intra_gb_ptr		1902665						
ANR	1907015	Symbol	h -> dequant4_coeff		1902665						
ANR	1907016	Symbol	* scan8		1902665						
ANR	1907017	Symbol	* index		1902665						
ANR	1907018	Symbol	h -> prev_mb_skipped		1902665						
ANR	1907019	Symbol	B_TYPE		1902665						
ANR	1907020	Symbol	tmp		1902665						
ANR	1907021	Symbol	mb_type		1902665						
ANR	1907022	Symbol	SI_TYPE		1902665						
ANR	1907023	Symbol	decode_residual		1902665						
ANR	1907024	Symbol	dct8x8_allowed		1902665						
ANR	1907025	Symbol	val		1902665						
ANR	1907026	Symbol	IS_16X8		1902665						
ANR	1907027	Symbol	partition_count		1902665						
ANR	1907028	Symbol	chroma_dc_scan		1902665						
ANR	1907029	Symbol	index		1902665						
ANR	1907030	Symbol	FRAME_MBAFF		1902665						
ANR	1907031	Symbol	h -> s		1902665						
ANR	1907032	Symbol	* h -> sub_mb_type		1902665						
ANR	1907033	Symbol	& s -> gb		1902665						
ANR	1907034	Symbol	h -> sub_mb_type		1902665						
ANR	1907035	Symbol	* * chroma_idx		1902665						
ANR	1907036	Symbol	* * h -> sub_mb_type		1902665						
ANR	1907037	Symbol	* * * h		1902665						
ANR	1907038	Symbol	h -> zigzag_scan8x8_cavlc		1902665						
ANR	1907039	Symbol	h -> non_zero_count		1902665						
ANR	1907040	Symbol	h -> cbp		1902665						
ANR	1907041	Symbol	IS_INTER		1902665						
ANR	1907042	Symbol	IS_8x8DCT		1902665						
ANR	1907043	Symbol	* * mv_cache		1902665						
ANR	1907044	Symbol	IS_INTERLACED		1902665						
ANR	1907045	Symbol	IS_SUB_8X4		1902665						
ANR	1907046	Symbol	IS_SUB_8X8		1902665						
ANR	1907047	Symbol	SP_TYPE		1902665						
ANR	1907048	Symbol	* * s		1902665						
ANR	1907049	Symbol	h -> field_scan		1902665						
ANR	1907050	Symbol	luma_dc_field_scan		1902665						
ANR	1907051	Symbol	MB_TYPE_INTERLACED		1902665						
ANR	1907052	Symbol	h -> field_scan_q0		1902665						
ANR	1907053	Symbol	* * h -> mv_cache		1902665						
ANR	1907054	Symbol	* h -> dequant4_coeff		1902665						
ANR	1907055	Symbol	h -> intra4x4_pred_mode_cache		1902665						
ANR	1907056	Symbol	AV_LOG_ERROR		1902665						
ANR	1907057	Symbol	get_te0_golomb		1902665						
ANR	1907058	Symbol	* i_mb_type_info		1902665						
ANR	1907059	Symbol	* s -> current_picture		1902665						
ANR	1907060	Symbol	p_sub_mb_type_info		1902665						
ANR	1907061	Symbol	sub_mb_type		1902665						
ANR	1907062	Symbol	get_ue_golomb		1902665						
ANR	1907063	Symbol	MB_MBAFF		1902665						
ANR	1907064	Symbol	h -> zigzag_scan8x8_cavlc_q0		1902665						
ANR	1907065	Symbol	h -> frame_num		1902665						
ANR	1907066	Symbol	* list		1902665						
ANR	1907067	Symbol	MB_TYPE_8x8DCT		1902665						
ANR	1907068	Symbol	check_intra4x4_pred_mode		1902665						
ANR	1907069	Symbol	get_bits		1902665						
ANR	1907070	Symbol	qmul		1902665						
ANR	1907071	Symbol	* b_sub_mb_type_info		1902665						
ANR	1907072	Symbol	show_bits		1902665						
ANR	1907073	Symbol	mode		1902665						
ANR	1907074	Symbol	* h -> non_zero_count		1902665						
ANR	1907075	Symbol	MB_FIELD		1902665						
ANR	1907076	Symbol	h -> dequant8_coeff		1902665						
ANR	1907077	Symbol	* h -> mv_cache		1902665						
ANR	1907078	Symbol	b_mb_type_info [ mb_type ] . type		1902665						
ANR	1907079	Symbol	* * IS_INTRA		1902665						
ANR	1907080	Symbol	NULL		1902665						
ANR	1907081	Symbol	IS_8X16		1902665						
ANR	1907082	Symbol	* nnz		1902665						
ANR	1907083	Symbol	IS_INTRA4x4		1902665						
ANR	1907084	Symbol	b_sub_mb_type_info [ h -> sub_mb_type [ i ] ] . type		1902665						
ANR	1907085	Symbol	* h -> intra4x4_pred_mode_cache		1902665						
ANR	1907086	Symbol	mx		1902665						
ANR	1907087	Symbol	* * scan8		1902665						
ANR	1907088	Symbol	ref_count		1902665						
ANR	1907089	Symbol	my		1902665						
ANR	1907090	Symbol	s -> current_picture . qscale_table		1902665						
ANR	1907091	Symbol	s -> mb_x		1902665						
ANR	1907092	Symbol	s -> mb_y		1902665						
ANR	1907093	Symbol	IS_DIRECT		1902665						
ANR	1907094	Symbol	* i8x8		1902665						
ANR	1907095	Symbol	s -> avctx		1902665						
ANR	1907096	Symbol	* mb_type		1902665						
ANR	1907097	Symbol	sub_partition_count		1902665						
ANR	1907098	Symbol	s -> qscale		1902665						
ANR	1907099	Symbol	mb_xy		1902665						
ANR	1907100	Symbol	* h -> slice_table		1902665						
ANR	1907101	Symbol	* p_sub_mb_type_info		1902665						
ANR	1907102	Symbol	get_dct8x8_allowed		1902665						
ANR	1907103	Symbol	p_mb_type_info		1902665						
ANR	1907104	Symbol	mv_cache		1902665						
ANR	1907105	Symbol	CHROMA_DC_BLOCK_INDEX		1902665						
ANR	1907106	Symbol	scan8		1902665						
ANR	1907107	Symbol	i8x8		1902665						
ANR	1907108	Symbol	h -> non_zero_count_cache		1902665						
ANR	1907109	Symbol	* p_mb_type_info		1902665						
ANR	1907110	Symbol	p_mb_type_info [ mb_type ] . type		1902665						
ANR	1907111	Symbol	cbp		1902665						
ANR	1907112	Symbol	PART_NOT_AVAILABLE		1902665						
ANR	1907113	Symbol	* h		1902665						
ANR	1907114	Symbol	* i		1902665						
ANR	1907115	Symbol	& mx		1902665						
ANR	1907116	Symbol	* mv_cache		1902665						
ANR	1907117	Symbol	h -> mv_cache		1902665						
ANR	1907118	Symbol	& my		1902665						
ANR	1907119	Symbol	* p		1902665						
ANR	1907120	Symbol	h -> sps		1902665						
ANR	1907121	Symbol	* s		1902665						
ANR	1907122	Symbol	* ref		1902665						
