command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8036527	File	/home/p4ultr4n/workplace/ReVeal/raw_code/sunrast_encode_init_0.c								
ANR	8036528	Function	sunrast_encode_init	1:0:0:1329							
ANR	8036529	FunctionDef	sunrast_encode_init (AVCodecContext * avctx)		8036528	0					
ANR	8036530	CompoundStatement		3:0:63:1329	8036528	0					
ANR	8036531	IdentifierDeclStatement	SUNRASTContext * s = avctx -> priv_data ;	5:4:70:106	8036528	0	True				
ANR	8036532	IdentifierDecl	* s = avctx -> priv_data		8036528	0					
ANR	8036533	IdentifierDeclType	SUNRASTContext *		8036528	0					
ANR	8036534	Identifier	s		8036528	1					
ANR	8036535	AssignmentExpression	* s = avctx -> priv_data		8036528	2		=			
ANR	8036536	Identifier	s		8036528	0					
ANR	8036537	PtrMemberAccess	avctx -> priv_data		8036528	1					
ANR	8036538	Identifier	avctx		8036528	0					
ANR	8036539	Identifier	priv_data		8036528	1					
ANR	8036540	SwitchStatement	switch ( avctx -> coder_type )		8036528	1					
ANR	8036541	Condition	avctx -> coder_type	9:12:123:139	8036528	0	True				
ANR	8036542	PtrMemberAccess	avctx -> coder_type		8036528	0					
ANR	8036543	Identifier	avctx		8036528	0					
ANR	8036544	Identifier	coder_type		8036528	1					
ANR	8036545	CompoundStatement		7:31:78:78	8036528	1					
ANR	8036546	Label	case FF_CODER_TYPE_RLE :	11:4:149:171	8036528	0	True				
ANR	8036547	Identifier	FF_CODER_TYPE_RLE		8036528	0					
ANR	8036548	ExpressionStatement	s -> type = RT_BYTE_ENCODED	13:8:182:207	8036528	1	True				
ANR	8036549	AssignmentExpression	s -> type = RT_BYTE_ENCODED		8036528	0		=			
ANR	8036550	PtrMemberAccess	s -> type		8036528	0					
ANR	8036551	Identifier	s		8036528	0					
ANR	8036552	Identifier	type		8036528	1					
ANR	8036553	Identifier	RT_BYTE_ENCODED		8036528	1					
ANR	8036554	BreakStatement	break ;	15:8:218:223	8036528	2	True				
ANR	8036555	Label	case FF_CODER_TYPE_RAW :	17:4:230:252	8036528	3	True				
ANR	8036556	Identifier	FF_CODER_TYPE_RAW		8036528	0					
ANR	8036557	ExpressionStatement	s -> type = RT_STANDARD	19:8:263:284	8036528	4	True				
ANR	8036558	AssignmentExpression	s -> type = RT_STANDARD		8036528	0		=			
ANR	8036559	PtrMemberAccess	s -> type		8036528	0					
ANR	8036560	Identifier	s		8036528	0					
ANR	8036561	Identifier	type		8036528	1					
ANR	8036562	Identifier	RT_STANDARD		8036528	1					
ANR	8036563	BreakStatement	break ;	21:8:295:300	8036528	5	True				
ANR	8036564	Label	default :	23:4:307:314	8036528	6	True				
ANR	8036565	Identifier	default		8036528	0					
ANR	8036566	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""invalid coder_type\\n"" )"	25:8:325:376	8036528	7	True				
ANR	8036567	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""invalid coder_type\\n"" )"		8036528	0					
ANR	8036568	Callee	av_log		8036528	0					
ANR	8036569	Identifier	av_log		8036528	0					
ANR	8036570	ArgumentList	avctx		8036528	1					
ANR	8036571	Argument	avctx		8036528	0					
ANR	8036572	Identifier	avctx		8036528	0					
ANR	8036573	Argument	AV_LOG_ERROR		8036528	1					
ANR	8036574	Identifier	AV_LOG_ERROR		8036528	0					
ANR	8036575	Argument	"""invalid coder_type\\n"""		8036528	2					
ANR	8036576	PrimaryExpression	"""invalid coder_type\\n"""		8036528	0					
ANR	8036577	ReturnStatement	return AVERROR ( EINVAL ) ;	27:8:387:409	8036528	8	True				
ANR	8036578	CallExpression	AVERROR ( EINVAL )		8036528	0					
ANR	8036579	Callee	AVERROR		8036528	0					
ANR	8036580	Identifier	AVERROR		8036528	0					
ANR	8036581	ArgumentList	EINVAL		8036528	1					
ANR	8036582	Argument	EINVAL		8036528	0					
ANR	8036583	Identifier	EINVAL		8036528	0					
ANR	8036584	ExpressionStatement	avctx -> coded_frame = av_frame_alloc ( )	33:4:425:462	8036528	2	True				
ANR	8036585	AssignmentExpression	avctx -> coded_frame = av_frame_alloc ( )		8036528	0		=			
ANR	8036586	PtrMemberAccess	avctx -> coded_frame		8036528	0					
ANR	8036587	Identifier	avctx		8036528	0					
ANR	8036588	Identifier	coded_frame		8036528	1					
ANR	8036589	CallExpression	av_frame_alloc ( )		8036528	1					
ANR	8036590	Callee	av_frame_alloc		8036528	0					
ANR	8036591	Identifier	av_frame_alloc		8036528	0					
ANR	8036592	ArgumentList			8036528	1					
ANR	8036593	IfStatement	if ( ! avctx -> coded_frame )		8036528	3					
ANR	8036594	Condition	! avctx -> coded_frame	35:8:473:491	8036528	0	True				
ANR	8036595	UnaryOperationExpression	! avctx -> coded_frame		8036528	0					
ANR	8036596	UnaryOperator	!		8036528	0					
ANR	8036597	PtrMemberAccess	avctx -> coded_frame		8036528	1					
ANR	8036598	Identifier	avctx		8036528	0					
ANR	8036599	Identifier	coded_frame		8036528	1					
ANR	8036600	ReturnStatement	return AVERROR ( ENOMEM ) ;	37:8:503:525	8036528	1	True				
ANR	8036601	CallExpression	AVERROR ( ENOMEM )		8036528	0					
ANR	8036602	Callee	AVERROR		8036528	0					
ANR	8036603	Identifier	AVERROR		8036528	0					
ANR	8036604	ArgumentList	ENOMEM		8036528	1					
ANR	8036605	Argument	ENOMEM		8036528	0					
ANR	8036606	Identifier	ENOMEM		8036528	0					
ANR	8036607	ExpressionStatement	avctx -> coded_frame -> key_frame = 1	41:4:534:567	8036528	4	True				
ANR	8036608	AssignmentExpression	avctx -> coded_frame -> key_frame = 1		8036528	0		=			
ANR	8036609	PtrMemberAccess	avctx -> coded_frame -> key_frame		8036528	0					
ANR	8036610	PtrMemberAccess	avctx -> coded_frame		8036528	0					
ANR	8036611	Identifier	avctx		8036528	0					
ANR	8036612	Identifier	coded_frame		8036528	1					
ANR	8036613	Identifier	key_frame		8036528	1					
ANR	8036614	PrimaryExpression	1		8036528	1					
ANR	8036615	ExpressionStatement	avctx -> coded_frame -> pict_type = AV_PICTURE_TYPE_I	43:4:574:623	8036528	5	True				
ANR	8036616	AssignmentExpression	avctx -> coded_frame -> pict_type = AV_PICTURE_TYPE_I		8036528	0		=			
ANR	8036617	PtrMemberAccess	avctx -> coded_frame -> pict_type		8036528	0					
ANR	8036618	PtrMemberAccess	avctx -> coded_frame		8036528	0					
ANR	8036619	Identifier	avctx		8036528	0					
ANR	8036620	Identifier	coded_frame		8036528	1					
ANR	8036621	Identifier	pict_type		8036528	1					
ANR	8036622	Identifier	AV_PICTURE_TYPE_I		8036528	1					
ANR	8036623	ExpressionStatement	s -> maptype = RMT_NONE	45:4:630:670	8036528	6	True				
ANR	8036624	AssignmentExpression	s -> maptype = RMT_NONE		8036528	0		=			
ANR	8036625	PtrMemberAccess	s -> maptype		8036528	0					
ANR	8036626	Identifier	s		8036528	0					
ANR	8036627	Identifier	maptype		8036528	1					
ANR	8036628	Identifier	RMT_NONE		8036528	1					
ANR	8036629	ExpressionStatement	s -> maplength = 0	47:4:677:710	8036528	7	True				
ANR	8036630	AssignmentExpression	s -> maplength = 0		8036528	0		=			
ANR	8036631	PtrMemberAccess	s -> maplength		8036528	0					
ANR	8036632	Identifier	s		8036528	0					
ANR	8036633	Identifier	maplength		8036528	1					
ANR	8036634	PrimaryExpression	0		8036528	1					
ANR	8036635	SwitchStatement	switch ( avctx -> pix_fmt )		8036528	8					
ANR	8036636	Condition	avctx -> pix_fmt	51:12:727:740	8036528	0	True				
ANR	8036637	PtrMemberAccess	avctx -> pix_fmt		8036528	0					
ANR	8036638	Identifier	avctx		8036528	0					
ANR	8036639	Identifier	pix_fmt		8036528	1					
ANR	8036640	CompoundStatement		49:28:679:679	8036528	1					
ANR	8036641	Label	case AV_PIX_FMT_MONOWHITE :	53:4:750:775	8036528	0	True				
ANR	8036642	Identifier	AV_PIX_FMT_MONOWHITE		8036528	0					
ANR	8036643	ExpressionStatement	s -> depth = 1	55:8:786:798	8036528	1	True				
ANR	8036644	AssignmentExpression	s -> depth = 1		8036528	0		=			
ANR	8036645	PtrMemberAccess	s -> depth		8036528	0					
ANR	8036646	Identifier	s		8036528	0					
ANR	8036647	Identifier	depth		8036528	1					
ANR	8036648	PrimaryExpression	1		8036528	1					
ANR	8036649	BreakStatement	break ;	57:8:809:814	8036528	2	True				
ANR	8036650	Label	case AV_PIX_FMT_PAL8 :	59:4:821:842	8036528	3	True				
ANR	8036651	Identifier	AV_PIX_FMT_PAL8		8036528	0					
ANR	8036652	ExpressionStatement	s -> maptype = RMT_EQUAL_RGB	61:8:853:881	8036528	4	True				
ANR	8036653	AssignmentExpression	s -> maptype = RMT_EQUAL_RGB		8036528	0		=			
ANR	8036654	PtrMemberAccess	s -> maptype		8036528	0					
ANR	8036655	Identifier	s		8036528	0					
ANR	8036656	Identifier	maptype		8036528	1					
ANR	8036657	Identifier	RMT_EQUAL_RGB		8036528	1					
ANR	8036658	ExpressionStatement	s -> maplength = 3 * 256	63:8:892:914	8036528	5	True				
ANR	8036659	AssignmentExpression	s -> maplength = 3 * 256		8036528	0		=			
ANR	8036660	PtrMemberAccess	s -> maplength		8036528	0					
ANR	8036661	Identifier	s		8036528	0					
ANR	8036662	Identifier	maplength		8036528	1					
ANR	8036663	MultiplicativeExpression	3 * 256		8036528	1		*			
ANR	8036664	PrimaryExpression	3		8036528	0					
ANR	8036665	PrimaryExpression	256		8036528	1					
ANR	8036666	Label	case AV_PIX_FMT_GRAY8 :	67:4:949:970	8036528	6	True				
ANR	8036667	Identifier	AV_PIX_FMT_GRAY8		8036528	0					
ANR	8036668	ExpressionStatement	s -> depth = 8	69:8:981:993	8036528	7	True				
ANR	8036669	AssignmentExpression	s -> depth = 8		8036528	0		=			
ANR	8036670	PtrMemberAccess	s -> depth		8036528	0					
ANR	8036671	Identifier	s		8036528	0					
ANR	8036672	Identifier	depth		8036528	1					
ANR	8036673	PrimaryExpression	8		8036528	1					
ANR	8036674	BreakStatement	break ;	71:8:1004:1009	8036528	8	True				
ANR	8036675	Label	case AV_PIX_FMT_BGR24 :	73:4:1016:1037	8036528	9	True				
ANR	8036676	Identifier	AV_PIX_FMT_BGR24		8036528	0					
ANR	8036677	ExpressionStatement	s -> depth = 24	75:8:1048:1061	8036528	10	True				
ANR	8036678	AssignmentExpression	s -> depth = 24		8036528	0		=			
ANR	8036679	PtrMemberAccess	s -> depth		8036528	0					
ANR	8036680	Identifier	s		8036528	0					
ANR	8036681	Identifier	depth		8036528	1					
ANR	8036682	PrimaryExpression	24		8036528	1					
ANR	8036683	BreakStatement	break ;	77:8:1072:1077	8036528	11	True				
ANR	8036684	Label	default :	79:4:1084:1091	8036528	12	True				
ANR	8036685	Identifier	default		8036528	0					
ANR	8036686	ReturnStatement	return AVERROR_BUG ;	81:8:1102:1120	8036528	13	True				
ANR	8036687	Identifier	AVERROR_BUG		8036528	0					
ANR	8036688	ExpressionStatement	"s -> length = avctx -> height * ( FFALIGN ( avctx -> width * s -> depth , 16 ) >> 3 )"	85:4:1134:1205	8036528	9	True				
ANR	8036689	AssignmentExpression	"s -> length = avctx -> height * ( FFALIGN ( avctx -> width * s -> depth , 16 ) >> 3 )"		8036528	0		=			
ANR	8036690	PtrMemberAccess	s -> length		8036528	0					
ANR	8036691	Identifier	s		8036528	0					
ANR	8036692	Identifier	length		8036528	1					
ANR	8036693	MultiplicativeExpression	"avctx -> height * ( FFALIGN ( avctx -> width * s -> depth , 16 ) >> 3 )"		8036528	1		*			
ANR	8036694	PtrMemberAccess	avctx -> height		8036528	0					
ANR	8036695	Identifier	avctx		8036528	0					
ANR	8036696	Identifier	height		8036528	1					
ANR	8036697	ShiftExpression	"FFALIGN ( avctx -> width * s -> depth , 16 ) >> 3"		8036528	1		>>			
ANR	8036698	CallExpression	"FFALIGN ( avctx -> width * s -> depth , 16 )"		8036528	0					
ANR	8036699	Callee	FFALIGN		8036528	0					
ANR	8036700	Identifier	FFALIGN		8036528	0					
ANR	8036701	ArgumentList	avctx -> width * s -> depth		8036528	1					
ANR	8036702	Argument	avctx -> width * s -> depth		8036528	0					
ANR	8036703	MultiplicativeExpression	avctx -> width * s -> depth		8036528	0		*			
ANR	8036704	PtrMemberAccess	avctx -> width		8036528	0					
ANR	8036705	Identifier	avctx		8036528	0					
ANR	8036706	Identifier	width		8036528	1					
ANR	8036707	PtrMemberAccess	s -> depth		8036528	1					
ANR	8036708	Identifier	s		8036528	0					
ANR	8036709	Identifier	depth		8036528	1					
ANR	8036710	Argument	16		8036528	1					
ANR	8036711	PrimaryExpression	16		8036528	0					
ANR	8036712	PrimaryExpression	3		8036528	1					
ANR	8036713	ExpressionStatement	s -> size = 32 + s -> maplength + s -> length * ( s -> type == RT_BYTE_ENCODED ? 2 : 1 )	87:4:1212:1309	8036528	10	True				
ANR	8036714	AssignmentExpression	s -> size = 32 + s -> maplength + s -> length * ( s -> type == RT_BYTE_ENCODED ? 2 : 1 )		8036528	0		=			
ANR	8036715	PtrMemberAccess	s -> size		8036528	0					
ANR	8036716	Identifier	s		8036528	0					
ANR	8036717	Identifier	size		8036528	1					
ANR	8036718	AdditiveExpression	32 + s -> maplength + s -> length * ( s -> type == RT_BYTE_ENCODED ? 2 : 1 )		8036528	1		+			
ANR	8036719	PrimaryExpression	32		8036528	0					
ANR	8036720	AdditiveExpression	s -> maplength + s -> length * ( s -> type == RT_BYTE_ENCODED ? 2 : 1 )		8036528	1		+			
ANR	8036721	PtrMemberAccess	s -> maplength		8036528	0					
ANR	8036722	Identifier	s		8036528	0					
ANR	8036723	Identifier	maplength		8036528	1					
ANR	8036724	MultiplicativeExpression	s -> length * ( s -> type == RT_BYTE_ENCODED ? 2 : 1 )		8036528	1		*			
ANR	8036725	PtrMemberAccess	s -> length		8036528	0					
ANR	8036726	Identifier	s		8036528	0					
ANR	8036727	Identifier	length		8036528	1					
ANR	8036728	ConditionalExpression	s -> type == RT_BYTE_ENCODED ? 2 : 1		8036528	1					
ANR	8036729	Condition	s -> type == RT_BYTE_ENCODED		8036528	0					
ANR	8036730	EqualityExpression	s -> type == RT_BYTE_ENCODED		8036528	0		==			
ANR	8036731	PtrMemberAccess	s -> type		8036528	0					
ANR	8036732	Identifier	s		8036528	0					
ANR	8036733	Identifier	type		8036528	1					
ANR	8036734	Identifier	RT_BYTE_ENCODED		8036528	1					
ANR	8036735	PrimaryExpression	2		8036528	1					
ANR	8036736	PrimaryExpression	1		8036528	2					
ANR	8036737	ReturnStatement	return 0 ;	93:4:1318:1326	8036528	11	True				
ANR	8036738	PrimaryExpression	0		8036528	0					
ANR	8036739	ReturnType	static av_cold int		8036528	1					
ANR	8036740	Identifier	sunrast_encode_init		8036528	2					
ANR	8036741	ParameterList	AVCodecContext * avctx		8036528	3					
ANR	8036742	Parameter	AVCodecContext * avctx	1:39:39:59	8036528	0	True				
ANR	8036743	ParameterType	AVCodecContext *		8036528	0					
ANR	8036744	Identifier	avctx		8036528	1					
ANR	8036745	CFGEntryNode	ENTRY		8036528		True				
ANR	8036746	CFGExitNode	EXIT		8036528		True				
ANR	8036747	Symbol	RT_BYTE_ENCODED		8036528						
ANR	8036748	Symbol	ENOMEM		8036528						
ANR	8036749	Symbol	avctx -> coded_frame -> pict_type		8036528						
ANR	8036750	Symbol	s -> size		8036528						
ANR	8036751	Symbol	s -> maptype		8036528						
ANR	8036752	Symbol	avctx -> width		8036528						
ANR	8036753	Symbol	s -> depth		8036528						
ANR	8036754	Symbol	avctx -> height		8036528						
ANR	8036755	Symbol	avctx -> coded_frame		8036528						
ANR	8036756	Symbol	s -> length		8036528						
ANR	8036757	Symbol	AV_PICTURE_TYPE_I		8036528						
ANR	8036758	Symbol	* avctx -> coded_frame		8036528						
ANR	8036759	Symbol	avctx		8036528						
ANR	8036760	Symbol	AV_LOG_ERROR		8036528						
ANR	8036761	Symbol	AVERROR_BUG		8036528						
ANR	8036762	Symbol	RMT_EQUAL_RGB		8036528						
ANR	8036763	Symbol	* * avctx		8036528						
ANR	8036764	Symbol	RMT_NONE		8036528						
ANR	8036765	Symbol	s -> maplength		8036528						
ANR	8036766	Symbol	avctx -> priv_data		8036528						
ANR	8036767	Symbol	avctx -> coded_frame -> key_frame		8036528						
ANR	8036768	Symbol	av_frame_alloc		8036528						
ANR	8036769	Symbol	avctx -> coder_type		8036528						
ANR	8036770	Symbol	EINVAL		8036528						
ANR	8036771	Symbol	* avctx		8036528						
ANR	8036772	Symbol	s		8036528						
ANR	8036773	Symbol	RT_STANDARD		8036528						
ANR	8036774	Symbol	FFALIGN		8036528						
ANR	8036775	Symbol	AVERROR		8036528						
ANR	8036776	Symbol	avctx -> pix_fmt		8036528						
ANR	8036777	Symbol	s -> type		8036528						
ANR	8036778	Symbol	* s		8036528						
