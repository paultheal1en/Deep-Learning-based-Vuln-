command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3664829	File	/home/p4ultr4n/workplace/ReVeal/raw_code/ff_snow_pred_block_1.c								
ANR	3664830	Function	ff_snow_pred_block	1:0:0:3917							
ANR	3664831	FunctionDef	"ff_snow_pred_block (SnowContext * s , uint8_t * dst , uint8_t * tmp , int stride , int sx , int sy , int b_w , int b_h , BlockNode * block , int plane_index , int w , int h)"		3664830	0					
ANR	3664832	CompoundStatement		1:162:162:3917	3664830	0					
ANR	3664833	IfStatement	if ( block -> type & BLOCK_INTRA )		3664830	0					
ANR	3664834	Condition	block -> type & BLOCK_INTRA	3:7:172:196	3664830	0	True				
ANR	3664835	BitAndExpression	block -> type & BLOCK_INTRA		3664830	0		&			
ANR	3664836	PtrMemberAccess	block -> type		3664830	0					
ANR	3664837	Identifier	block		3664830	0					
ANR	3664838	Identifier	type		3664830	1					
ANR	3664839	Identifier	BLOCK_INTRA		3664830	1					
ANR	3664840	CompoundStatement		9:14:131:165	3664830	1					
ANR	3664841	IdentifierDeclStatement	"int x , y ;"	5:8:209:217	3664830	0	True				
ANR	3664842	IdentifierDecl	x		3664830	0					
ANR	3664843	IdentifierDeclType	int		3664830	0					
ANR	3664844	Identifier	x		3664830	1					
ANR	3664845	IdentifierDecl	y		3664830	1					
ANR	3664846	IdentifierDeclType	int		3664830	0					
ANR	3664847	Identifier	y		3664830	1					
ANR	3664848	Statement	const	7:8:228:232	3664830	1	True				
ANR	3664849	IdentifierDeclStatement	unsigned color = block -> color [ plane_index ] ;	7:14:234:277	3664830	2	True				
ANR	3664850	IdentifierDecl	color = block -> color [ plane_index ]		3664830	0					
ANR	3664851	IdentifierDeclType	unsigned		3664830	0					
ANR	3664852	Identifier	color		3664830	1					
ANR	3664853	AssignmentExpression	color = block -> color [ plane_index ]		3664830	2		=			
ANR	3664854	Identifier	color		3664830	0					
ANR	3664855	ArrayIndexing	block -> color [ plane_index ]		3664830	1					
ANR	3664856	PtrMemberAccess	block -> color		3664830	0					
ANR	3664857	Identifier	block		3664830	0					
ANR	3664858	Identifier	color		3664830	1					
ANR	3664859	Identifier	plane_index		3664830	1					
ANR	3664860	Statement	const	9:8:288:292	3664830	3	True				
ANR	3664861	IdentifierDeclStatement	unsigned color4 = color * 0x01010101 ;	9:14:294:328	3664830	4	True				
ANR	3664862	IdentifierDecl	color4 = color * 0x01010101		3664830	0					
ANR	3664863	IdentifierDeclType	unsigned		3664830	0					
ANR	3664864	Identifier	color4		3664830	1					
ANR	3664865	AssignmentExpression	color4 = color * 0x01010101		3664830	2		=			
ANR	3664866	Identifier	color4		3664830	0					
ANR	3664867	MultiplicativeExpression	color * 0x01010101		3664830	1		*			
ANR	3664868	Identifier	color		3664830	0					
ANR	3664869	PrimaryExpression	0x01010101		3664830	1					
ANR	3664870	IfStatement	if ( b_w == 32 )		3664830	5					
ANR	3664871	Condition	b_w == 32	11:11:342:348	3664830	0	True				
ANR	3664872	EqualityExpression	b_w == 32		3664830	0		==			
ANR	3664873	Identifier	b_w		3664830	0					
ANR	3664874	PrimaryExpression	32		3664830	1					
ANR	3664875	CompoundStatement		11:19:187:187	3664830	1					
ANR	3664876	ForStatement	for ( y = 0 ; y < b_h ; y ++ )		3664830	0					
ANR	3664877	ForInit	y = 0 ;	13:16:369:372	3664830	0	True				
ANR	3664878	AssignmentExpression	y = 0		3664830	0		=			
ANR	3664879	Identifier	y		3664830	0					
ANR	3664880	PrimaryExpression	0		3664830	1					
ANR	3664881	Condition	y < b_h	13:21:374:380	3664830	1	True				
ANR	3664882	RelationalExpression	y < b_h		3664830	0		<			
ANR	3664883	Identifier	y		3664830	0					
ANR	3664884	Identifier	b_h		3664830	1					
ANR	3664885	PostIncDecOperationExpression	y ++	13:30:383:385	3664830	2	True				
ANR	3664886	Identifier	y		3664830	0					
ANR	3664887	IncDec	++		3664830	1					
ANR	3664888	CompoundStatement		13:34:224:224	3664830	3					
ANR	3664889	ExpressionStatement	* ( uint32_t * ) & dst [ 0 + y * stride ] = color4	15:16:406:444	3664830	0	True				
ANR	3664890	AssignmentExpression	* ( uint32_t * ) & dst [ 0 + y * stride ] = color4		3664830	0		=			
ANR	3664891	UnaryOperationExpression	* ( uint32_t * ) & dst [ 0 + y * stride ]		3664830	0					
ANR	3664892	UnaryOperator	*		3664830	0					
ANR	3664893	CastExpression	( uint32_t * ) & dst [ 0 + y * stride ]		3664830	1					
ANR	3664894	CastTarget	uint32_t *		3664830	0					
ANR	3664895	UnaryOperationExpression	& dst [ 0 + y * stride ]		3664830	1					
ANR	3664896	UnaryOperator	&		3664830	0					
ANR	3664897	ArrayIndexing	dst [ 0 + y * stride ]		3664830	1					
ANR	3664898	Identifier	dst		3664830	0					
ANR	3664899	AdditiveExpression	0 + y * stride		3664830	1		+			
ANR	3664900	PrimaryExpression	0		3664830	0					
ANR	3664901	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3664902	Identifier	y		3664830	0					
ANR	3664903	Identifier	stride		3664830	1					
ANR	3664904	Identifier	color4		3664830	1					
ANR	3664905	ExpressionStatement	* ( uint32_t * ) & dst [ 4 + y * stride ] = color4	17:16:463:501	3664830	1	True				
ANR	3664906	AssignmentExpression	* ( uint32_t * ) & dst [ 4 + y * stride ] = color4		3664830	0		=			
ANR	3664907	UnaryOperationExpression	* ( uint32_t * ) & dst [ 4 + y * stride ]		3664830	0					
ANR	3664908	UnaryOperator	*		3664830	0					
ANR	3664909	CastExpression	( uint32_t * ) & dst [ 4 + y * stride ]		3664830	1					
ANR	3664910	CastTarget	uint32_t *		3664830	0					
ANR	3664911	UnaryOperationExpression	& dst [ 4 + y * stride ]		3664830	1					
ANR	3664912	UnaryOperator	&		3664830	0					
ANR	3664913	ArrayIndexing	dst [ 4 + y * stride ]		3664830	1					
ANR	3664914	Identifier	dst		3664830	0					
ANR	3664915	AdditiveExpression	4 + y * stride		3664830	1		+			
ANR	3664916	PrimaryExpression	4		3664830	0					
ANR	3664917	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3664918	Identifier	y		3664830	0					
ANR	3664919	Identifier	stride		3664830	1					
ANR	3664920	Identifier	color4		3664830	1					
ANR	3664921	ExpressionStatement	* ( uint32_t * ) & dst [ 8 + y * stride ] = color4	19:16:520:558	3664830	2	True				
ANR	3664922	AssignmentExpression	* ( uint32_t * ) & dst [ 8 + y * stride ] = color4		3664830	0		=			
ANR	3664923	UnaryOperationExpression	* ( uint32_t * ) & dst [ 8 + y * stride ]		3664830	0					
ANR	3664924	UnaryOperator	*		3664830	0					
ANR	3664925	CastExpression	( uint32_t * ) & dst [ 8 + y * stride ]		3664830	1					
ANR	3664926	CastTarget	uint32_t *		3664830	0					
ANR	3664927	UnaryOperationExpression	& dst [ 8 + y * stride ]		3664830	1					
ANR	3664928	UnaryOperator	&		3664830	0					
ANR	3664929	ArrayIndexing	dst [ 8 + y * stride ]		3664830	1					
ANR	3664930	Identifier	dst		3664830	0					
ANR	3664931	AdditiveExpression	8 + y * stride		3664830	1		+			
ANR	3664932	PrimaryExpression	8		3664830	0					
ANR	3664933	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3664934	Identifier	y		3664830	0					
ANR	3664935	Identifier	stride		3664830	1					
ANR	3664936	Identifier	color4		3664830	1					
ANR	3664937	ExpressionStatement	* ( uint32_t * ) & dst [ 12 + y * stride ] = color4	21:16:577:615	3664830	3	True				
ANR	3664938	AssignmentExpression	* ( uint32_t * ) & dst [ 12 + y * stride ] = color4		3664830	0		=			
ANR	3664939	UnaryOperationExpression	* ( uint32_t * ) & dst [ 12 + y * stride ]		3664830	0					
ANR	3664940	UnaryOperator	*		3664830	0					
ANR	3664941	CastExpression	( uint32_t * ) & dst [ 12 + y * stride ]		3664830	1					
ANR	3664942	CastTarget	uint32_t *		3664830	0					
ANR	3664943	UnaryOperationExpression	& dst [ 12 + y * stride ]		3664830	1					
ANR	3664944	UnaryOperator	&		3664830	0					
ANR	3664945	ArrayIndexing	dst [ 12 + y * stride ]		3664830	1					
ANR	3664946	Identifier	dst		3664830	0					
ANR	3664947	AdditiveExpression	12 + y * stride		3664830	1		+			
ANR	3664948	PrimaryExpression	12		3664830	0					
ANR	3664949	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3664950	Identifier	y		3664830	0					
ANR	3664951	Identifier	stride		3664830	1					
ANR	3664952	Identifier	color4		3664830	1					
ANR	3664953	ExpressionStatement	* ( uint32_t * ) & dst [ 16 + y * stride ] = color4	23:16:634:672	3664830	4	True				
ANR	3664954	AssignmentExpression	* ( uint32_t * ) & dst [ 16 + y * stride ] = color4		3664830	0		=			
ANR	3664955	UnaryOperationExpression	* ( uint32_t * ) & dst [ 16 + y * stride ]		3664830	0					
ANR	3664956	UnaryOperator	*		3664830	0					
ANR	3664957	CastExpression	( uint32_t * ) & dst [ 16 + y * stride ]		3664830	1					
ANR	3664958	CastTarget	uint32_t *		3664830	0					
ANR	3664959	UnaryOperationExpression	& dst [ 16 + y * stride ]		3664830	1					
ANR	3664960	UnaryOperator	&		3664830	0					
ANR	3664961	ArrayIndexing	dst [ 16 + y * stride ]		3664830	1					
ANR	3664962	Identifier	dst		3664830	0					
ANR	3664963	AdditiveExpression	16 + y * stride		3664830	1		+			
ANR	3664964	PrimaryExpression	16		3664830	0					
ANR	3664965	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3664966	Identifier	y		3664830	0					
ANR	3664967	Identifier	stride		3664830	1					
ANR	3664968	Identifier	color4		3664830	1					
ANR	3664969	ExpressionStatement	* ( uint32_t * ) & dst [ 20 + y * stride ] = color4	25:16:691:729	3664830	5	True				
ANR	3664970	AssignmentExpression	* ( uint32_t * ) & dst [ 20 + y * stride ] = color4		3664830	0		=			
ANR	3664971	UnaryOperationExpression	* ( uint32_t * ) & dst [ 20 + y * stride ]		3664830	0					
ANR	3664972	UnaryOperator	*		3664830	0					
ANR	3664973	CastExpression	( uint32_t * ) & dst [ 20 + y * stride ]		3664830	1					
ANR	3664974	CastTarget	uint32_t *		3664830	0					
ANR	3664975	UnaryOperationExpression	& dst [ 20 + y * stride ]		3664830	1					
ANR	3664976	UnaryOperator	&		3664830	0					
ANR	3664977	ArrayIndexing	dst [ 20 + y * stride ]		3664830	1					
ANR	3664978	Identifier	dst		3664830	0					
ANR	3664979	AdditiveExpression	20 + y * stride		3664830	1		+			
ANR	3664980	PrimaryExpression	20		3664830	0					
ANR	3664981	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3664982	Identifier	y		3664830	0					
ANR	3664983	Identifier	stride		3664830	1					
ANR	3664984	Identifier	color4		3664830	1					
ANR	3664985	ExpressionStatement	* ( uint32_t * ) & dst [ 24 + y * stride ] = color4	27:16:748:786	3664830	6	True				
ANR	3664986	AssignmentExpression	* ( uint32_t * ) & dst [ 24 + y * stride ] = color4		3664830	0		=			
ANR	3664987	UnaryOperationExpression	* ( uint32_t * ) & dst [ 24 + y * stride ]		3664830	0					
ANR	3664988	UnaryOperator	*		3664830	0					
ANR	3664989	CastExpression	( uint32_t * ) & dst [ 24 + y * stride ]		3664830	1					
ANR	3664990	CastTarget	uint32_t *		3664830	0					
ANR	3664991	UnaryOperationExpression	& dst [ 24 + y * stride ]		3664830	1					
ANR	3664992	UnaryOperator	&		3664830	0					
ANR	3664993	ArrayIndexing	dst [ 24 + y * stride ]		3664830	1					
ANR	3664994	Identifier	dst		3664830	0					
ANR	3664995	AdditiveExpression	24 + y * stride		3664830	1		+			
ANR	3664996	PrimaryExpression	24		3664830	0					
ANR	3664997	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3664998	Identifier	y		3664830	0					
ANR	3664999	Identifier	stride		3664830	1					
ANR	3665000	Identifier	color4		3664830	1					
ANR	3665001	ExpressionStatement	* ( uint32_t * ) & dst [ 28 + y * stride ] = color4	29:16:805:843	3664830	7	True				
ANR	3665002	AssignmentExpression	* ( uint32_t * ) & dst [ 28 + y * stride ] = color4		3664830	0		=			
ANR	3665003	UnaryOperationExpression	* ( uint32_t * ) & dst [ 28 + y * stride ]		3664830	0					
ANR	3665004	UnaryOperator	*		3664830	0					
ANR	3665005	CastExpression	( uint32_t * ) & dst [ 28 + y * stride ]		3664830	1					
ANR	3665006	CastTarget	uint32_t *		3664830	0					
ANR	3665007	UnaryOperationExpression	& dst [ 28 + y * stride ]		3664830	1					
ANR	3665008	UnaryOperator	&		3664830	0					
ANR	3665009	ArrayIndexing	dst [ 28 + y * stride ]		3664830	1					
ANR	3665010	Identifier	dst		3664830	0					
ANR	3665011	AdditiveExpression	28 + y * stride		3664830	1		+			
ANR	3665012	PrimaryExpression	28		3664830	0					
ANR	3665013	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665014	Identifier	y		3664830	0					
ANR	3665015	Identifier	stride		3664830	1					
ANR	3665016	Identifier	color4		3664830	1					
ANR	3665017	ElseStatement	else		3664830	0					
ANR	3665018	IfStatement	if ( b_w == 16 )		3664830	0					
ANR	3665019	Condition	b_w == 16	33:17:878:884	3664830	0	True				
ANR	3665020	EqualityExpression	b_w == 16		3664830	0		==			
ANR	3665021	Identifier	b_w		3664830	0					
ANR	3665022	PrimaryExpression	16		3664830	1					
ANR	3665023	CompoundStatement		33:25:723:723	3664830	1					
ANR	3665024	ForStatement	for ( y = 0 ; y < b_h ; y ++ )		3664830	0					
ANR	3665025	ForInit	y = 0 ;	35:16:905:908	3664830	0	True				
ANR	3665026	AssignmentExpression	y = 0		3664830	0		=			
ANR	3665027	Identifier	y		3664830	0					
ANR	3665028	PrimaryExpression	0		3664830	1					
ANR	3665029	Condition	y < b_h	35:21:910:916	3664830	1	True				
ANR	3665030	RelationalExpression	y < b_h		3664830	0		<			
ANR	3665031	Identifier	y		3664830	0					
ANR	3665032	Identifier	b_h		3664830	1					
ANR	3665033	PostIncDecOperationExpression	y ++	35:30:919:921	3664830	2	True				
ANR	3665034	Identifier	y		3664830	0					
ANR	3665035	IncDec	++		3664830	1					
ANR	3665036	CompoundStatement		35:34:760:760	3664830	3					
ANR	3665037	ExpressionStatement	* ( uint32_t * ) & dst [ 0 + y * stride ] = color4	37:16:942:980	3664830	0	True				
ANR	3665038	AssignmentExpression	* ( uint32_t * ) & dst [ 0 + y * stride ] = color4		3664830	0		=			
ANR	3665039	UnaryOperationExpression	* ( uint32_t * ) & dst [ 0 + y * stride ]		3664830	0					
ANR	3665040	UnaryOperator	*		3664830	0					
ANR	3665041	CastExpression	( uint32_t * ) & dst [ 0 + y * stride ]		3664830	1					
ANR	3665042	CastTarget	uint32_t *		3664830	0					
ANR	3665043	UnaryOperationExpression	& dst [ 0 + y * stride ]		3664830	1					
ANR	3665044	UnaryOperator	&		3664830	0					
ANR	3665045	ArrayIndexing	dst [ 0 + y * stride ]		3664830	1					
ANR	3665046	Identifier	dst		3664830	0					
ANR	3665047	AdditiveExpression	0 + y * stride		3664830	1		+			
ANR	3665048	PrimaryExpression	0		3664830	0					
ANR	3665049	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665050	Identifier	y		3664830	0					
ANR	3665051	Identifier	stride		3664830	1					
ANR	3665052	Identifier	color4		3664830	1					
ANR	3665053	ExpressionStatement	* ( uint32_t * ) & dst [ 4 + y * stride ] = color4	39:16:999:1037	3664830	1	True				
ANR	3665054	AssignmentExpression	* ( uint32_t * ) & dst [ 4 + y * stride ] = color4		3664830	0		=			
ANR	3665055	UnaryOperationExpression	* ( uint32_t * ) & dst [ 4 + y * stride ]		3664830	0					
ANR	3665056	UnaryOperator	*		3664830	0					
ANR	3665057	CastExpression	( uint32_t * ) & dst [ 4 + y * stride ]		3664830	1					
ANR	3665058	CastTarget	uint32_t *		3664830	0					
ANR	3665059	UnaryOperationExpression	& dst [ 4 + y * stride ]		3664830	1					
ANR	3665060	UnaryOperator	&		3664830	0					
ANR	3665061	ArrayIndexing	dst [ 4 + y * stride ]		3664830	1					
ANR	3665062	Identifier	dst		3664830	0					
ANR	3665063	AdditiveExpression	4 + y * stride		3664830	1		+			
ANR	3665064	PrimaryExpression	4		3664830	0					
ANR	3665065	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665066	Identifier	y		3664830	0					
ANR	3665067	Identifier	stride		3664830	1					
ANR	3665068	Identifier	color4		3664830	1					
ANR	3665069	ExpressionStatement	* ( uint32_t * ) & dst [ 8 + y * stride ] = color4	41:16:1056:1094	3664830	2	True				
ANR	3665070	AssignmentExpression	* ( uint32_t * ) & dst [ 8 + y * stride ] = color4		3664830	0		=			
ANR	3665071	UnaryOperationExpression	* ( uint32_t * ) & dst [ 8 + y * stride ]		3664830	0					
ANR	3665072	UnaryOperator	*		3664830	0					
ANR	3665073	CastExpression	( uint32_t * ) & dst [ 8 + y * stride ]		3664830	1					
ANR	3665074	CastTarget	uint32_t *		3664830	0					
ANR	3665075	UnaryOperationExpression	& dst [ 8 + y * stride ]		3664830	1					
ANR	3665076	UnaryOperator	&		3664830	0					
ANR	3665077	ArrayIndexing	dst [ 8 + y * stride ]		3664830	1					
ANR	3665078	Identifier	dst		3664830	0					
ANR	3665079	AdditiveExpression	8 + y * stride		3664830	1		+			
ANR	3665080	PrimaryExpression	8		3664830	0					
ANR	3665081	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665082	Identifier	y		3664830	0					
ANR	3665083	Identifier	stride		3664830	1					
ANR	3665084	Identifier	color4		3664830	1					
ANR	3665085	ExpressionStatement	* ( uint32_t * ) & dst [ 12 + y * stride ] = color4	43:16:1113:1151	3664830	3	True				
ANR	3665086	AssignmentExpression	* ( uint32_t * ) & dst [ 12 + y * stride ] = color4		3664830	0		=			
ANR	3665087	UnaryOperationExpression	* ( uint32_t * ) & dst [ 12 + y * stride ]		3664830	0					
ANR	3665088	UnaryOperator	*		3664830	0					
ANR	3665089	CastExpression	( uint32_t * ) & dst [ 12 + y * stride ]		3664830	1					
ANR	3665090	CastTarget	uint32_t *		3664830	0					
ANR	3665091	UnaryOperationExpression	& dst [ 12 + y * stride ]		3664830	1					
ANR	3665092	UnaryOperator	&		3664830	0					
ANR	3665093	ArrayIndexing	dst [ 12 + y * stride ]		3664830	1					
ANR	3665094	Identifier	dst		3664830	0					
ANR	3665095	AdditiveExpression	12 + y * stride		3664830	1		+			
ANR	3665096	PrimaryExpression	12		3664830	0					
ANR	3665097	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665098	Identifier	y		3664830	0					
ANR	3665099	Identifier	stride		3664830	1					
ANR	3665100	Identifier	color4		3664830	1					
ANR	3665101	ElseStatement	else		3664830	0					
ANR	3665102	IfStatement	if ( b_w == 8 )		3664830	0					
ANR	3665103	Condition	b_w == 8	47:17:1186:1191	3664830	0	True				
ANR	3665104	EqualityExpression	b_w == 8		3664830	0		==			
ANR	3665105	Identifier	b_w		3664830	0					
ANR	3665106	PrimaryExpression	8		3664830	1					
ANR	3665107	CompoundStatement		47:24:1030:1030	3664830	1					
ANR	3665108	ForStatement	for ( y = 0 ; y < b_h ; y ++ )		3664830	0					
ANR	3665109	ForInit	y = 0 ;	49:16:1212:1215	3664830	0	True				
ANR	3665110	AssignmentExpression	y = 0		3664830	0		=			
ANR	3665111	Identifier	y		3664830	0					
ANR	3665112	PrimaryExpression	0		3664830	1					
ANR	3665113	Condition	y < b_h	49:21:1217:1223	3664830	1	True				
ANR	3665114	RelationalExpression	y < b_h		3664830	0		<			
ANR	3665115	Identifier	y		3664830	0					
ANR	3665116	Identifier	b_h		3664830	1					
ANR	3665117	PostIncDecOperationExpression	y ++	49:30:1226:1228	3664830	2	True				
ANR	3665118	Identifier	y		3664830	0					
ANR	3665119	IncDec	++		3664830	1					
ANR	3665120	CompoundStatement		49:34:1067:1067	3664830	3					
ANR	3665121	ExpressionStatement	* ( uint32_t * ) & dst [ 0 + y * stride ] = color4	51:16:1249:1287	3664830	0	True				
ANR	3665122	AssignmentExpression	* ( uint32_t * ) & dst [ 0 + y * stride ] = color4		3664830	0		=			
ANR	3665123	UnaryOperationExpression	* ( uint32_t * ) & dst [ 0 + y * stride ]		3664830	0					
ANR	3665124	UnaryOperator	*		3664830	0					
ANR	3665125	CastExpression	( uint32_t * ) & dst [ 0 + y * stride ]		3664830	1					
ANR	3665126	CastTarget	uint32_t *		3664830	0					
ANR	3665127	UnaryOperationExpression	& dst [ 0 + y * stride ]		3664830	1					
ANR	3665128	UnaryOperator	&		3664830	0					
ANR	3665129	ArrayIndexing	dst [ 0 + y * stride ]		3664830	1					
ANR	3665130	Identifier	dst		3664830	0					
ANR	3665131	AdditiveExpression	0 + y * stride		3664830	1		+			
ANR	3665132	PrimaryExpression	0		3664830	0					
ANR	3665133	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665134	Identifier	y		3664830	0					
ANR	3665135	Identifier	stride		3664830	1					
ANR	3665136	Identifier	color4		3664830	1					
ANR	3665137	ExpressionStatement	* ( uint32_t * ) & dst [ 4 + y * stride ] = color4	53:16:1306:1344	3664830	1	True				
ANR	3665138	AssignmentExpression	* ( uint32_t * ) & dst [ 4 + y * stride ] = color4		3664830	0		=			
ANR	3665139	UnaryOperationExpression	* ( uint32_t * ) & dst [ 4 + y * stride ]		3664830	0					
ANR	3665140	UnaryOperator	*		3664830	0					
ANR	3665141	CastExpression	( uint32_t * ) & dst [ 4 + y * stride ]		3664830	1					
ANR	3665142	CastTarget	uint32_t *		3664830	0					
ANR	3665143	UnaryOperationExpression	& dst [ 4 + y * stride ]		3664830	1					
ANR	3665144	UnaryOperator	&		3664830	0					
ANR	3665145	ArrayIndexing	dst [ 4 + y * stride ]		3664830	1					
ANR	3665146	Identifier	dst		3664830	0					
ANR	3665147	AdditiveExpression	4 + y * stride		3664830	1		+			
ANR	3665148	PrimaryExpression	4		3664830	0					
ANR	3665149	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665150	Identifier	y		3664830	0					
ANR	3665151	Identifier	stride		3664830	1					
ANR	3665152	Identifier	color4		3664830	1					
ANR	3665153	ElseStatement	else		3664830	0					
ANR	3665154	IfStatement	if ( b_w == 4 )		3664830	0					
ANR	3665155	Condition	b_w == 4	57:17:1379:1384	3664830	0	True				
ANR	3665156	EqualityExpression	b_w == 4		3664830	0		==			
ANR	3665157	Identifier	b_w		3664830	0					
ANR	3665158	PrimaryExpression	4		3664830	1					
ANR	3665159	CompoundStatement		57:24:1223:1223	3664830	1					
ANR	3665160	ForStatement	for ( y = 0 ; y < b_h ; y ++ )		3664830	0					
ANR	3665161	ForInit	y = 0 ;	59:16:1405:1408	3664830	0	True				
ANR	3665162	AssignmentExpression	y = 0		3664830	0		=			
ANR	3665163	Identifier	y		3664830	0					
ANR	3665164	PrimaryExpression	0		3664830	1					
ANR	3665165	Condition	y < b_h	59:21:1410:1416	3664830	1	True				
ANR	3665166	RelationalExpression	y < b_h		3664830	0		<			
ANR	3665167	Identifier	y		3664830	0					
ANR	3665168	Identifier	b_h		3664830	1					
ANR	3665169	PostIncDecOperationExpression	y ++	59:30:1419:1421	3664830	2	True				
ANR	3665170	Identifier	y		3664830	0					
ANR	3665171	IncDec	++		3664830	1					
ANR	3665172	CompoundStatement		59:34:1260:1260	3664830	3					
ANR	3665173	ExpressionStatement	* ( uint32_t * ) & dst [ 0 + y * stride ] = color4	61:16:1442:1480	3664830	0	True				
ANR	3665174	AssignmentExpression	* ( uint32_t * ) & dst [ 0 + y * stride ] = color4		3664830	0		=			
ANR	3665175	UnaryOperationExpression	* ( uint32_t * ) & dst [ 0 + y * stride ]		3664830	0					
ANR	3665176	UnaryOperator	*		3664830	0					
ANR	3665177	CastExpression	( uint32_t * ) & dst [ 0 + y * stride ]		3664830	1					
ANR	3665178	CastTarget	uint32_t *		3664830	0					
ANR	3665179	UnaryOperationExpression	& dst [ 0 + y * stride ]		3664830	1					
ANR	3665180	UnaryOperator	&		3664830	0					
ANR	3665181	ArrayIndexing	dst [ 0 + y * stride ]		3664830	1					
ANR	3665182	Identifier	dst		3664830	0					
ANR	3665183	AdditiveExpression	0 + y * stride		3664830	1		+			
ANR	3665184	PrimaryExpression	0		3664830	0					
ANR	3665185	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665186	Identifier	y		3664830	0					
ANR	3665187	Identifier	stride		3664830	1					
ANR	3665188	Identifier	color4		3664830	1					
ANR	3665189	ElseStatement	else		3664830	0					
ANR	3665190	CompoundStatement		65:13:1348:1348	3664830	0					
ANR	3665191	ForStatement	for ( y = 0 ; y < b_h ; y ++ )		3664830	0					
ANR	3665192	ForInit	y = 0 ;	67:16:1530:1533	3664830	0	True				
ANR	3665193	AssignmentExpression	y = 0		3664830	0		=			
ANR	3665194	Identifier	y		3664830	0					
ANR	3665195	PrimaryExpression	0		3664830	1					
ANR	3665196	Condition	y < b_h	67:21:1535:1541	3664830	1	True				
ANR	3665197	RelationalExpression	y < b_h		3664830	0		<			
ANR	3665198	Identifier	y		3664830	0					
ANR	3665199	Identifier	b_h		3664830	1					
ANR	3665200	PostIncDecOperationExpression	y ++	67:30:1544:1546	3664830	2	True				
ANR	3665201	Identifier	y		3664830	0					
ANR	3665202	IncDec	++		3664830	1					
ANR	3665203	CompoundStatement		67:34:1385:1385	3664830	3					
ANR	3665204	ForStatement	for ( x = 0 ; x < b_w ; x ++ )		3664830	0					
ANR	3665205	ForInit	x = 0 ;	69:20:1571:1574	3664830	0	True				
ANR	3665206	AssignmentExpression	x = 0		3664830	0		=			
ANR	3665207	Identifier	x		3664830	0					
ANR	3665208	PrimaryExpression	0		3664830	1					
ANR	3665209	Condition	x < b_w	69:25:1576:1582	3664830	1	True				
ANR	3665210	RelationalExpression	x < b_w		3664830	0		<			
ANR	3665211	Identifier	x		3664830	0					
ANR	3665212	Identifier	b_w		3664830	1					
ANR	3665213	PostIncDecOperationExpression	x ++	69:34:1585:1587	3664830	2	True				
ANR	3665214	Identifier	x		3664830	0					
ANR	3665215	IncDec	++		3664830	1					
ANR	3665216	CompoundStatement		69:38:1426:1426	3664830	3					
ANR	3665217	ExpressionStatement	dst [ x + y * stride ] = color	71:20:1612:1636	3664830	0	True				
ANR	3665218	AssignmentExpression	dst [ x + y * stride ] = color		3664830	0		=			
ANR	3665219	ArrayIndexing	dst [ x + y * stride ]		3664830	0					
ANR	3665220	Identifier	dst		3664830	0					
ANR	3665221	AdditiveExpression	x + y * stride		3664830	1		+			
ANR	3665222	Identifier	x		3664830	0					
ANR	3665223	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665224	Identifier	y		3664830	0					
ANR	3665225	Identifier	stride		3664830	1					
ANR	3665226	Identifier	color		3664830	1					
ANR	3665227	ElseStatement	else		3664830	0					
ANR	3665228	CompoundStatement		93:8:1833:1877	3664830	0					
ANR	3665229	IdentifierDeclStatement	uint8_t * src = s -> last_picture [ block -> ref ] -> data [ plane_index ] ;	81:8:1704:1764	3664830	0	True				
ANR	3665230	IdentifierDecl	* src = s -> last_picture [ block -> ref ] -> data [ plane_index ]		3664830	0					
ANR	3665231	IdentifierDeclType	uint8_t *		3664830	0					
ANR	3665232	Identifier	src		3664830	1					
ANR	3665233	AssignmentExpression	* src = s -> last_picture [ block -> ref ] -> data [ plane_index ]		3664830	2		=			
ANR	3665234	Identifier	src		3664830	0					
ANR	3665235	ArrayIndexing	s -> last_picture [ block -> ref ] -> data [ plane_index ]		3664830	1					
ANR	3665236	PtrMemberAccess	s -> last_picture [ block -> ref ] -> data		3664830	0					
ANR	3665237	ArrayIndexing	s -> last_picture [ block -> ref ]		3664830	0					
ANR	3665238	PtrMemberAccess	s -> last_picture		3664830	0					
ANR	3665239	Identifier	s		3664830	0					
ANR	3665240	Identifier	last_picture		3664830	1					
ANR	3665241	PtrMemberAccess	block -> ref		3664830	1					
ANR	3665242	Identifier	block		3664830	0					
ANR	3665243	Identifier	ref		3664830	1					
ANR	3665244	Identifier	data		3664830	1					
ANR	3665245	Identifier	plane_index		3664830	1					
ANR	3665246	IdentifierDeclStatement	const int scale = plane_index ? ( 2 * s -> mv_scale ) >> s -> chroma_h_shift : 2 * s -> mv_scale ;	83:8:1775:1857	3664830	1	True				
ANR	3665247	IdentifierDecl	scale = plane_index ? ( 2 * s -> mv_scale ) >> s -> chroma_h_shift : 2 * s -> mv_scale		3664830	0					
ANR	3665248	IdentifierDeclType	const int		3664830	0					
ANR	3665249	Identifier	scale		3664830	1					
ANR	3665250	AssignmentExpression	scale = plane_index ? ( 2 * s -> mv_scale ) >> s -> chroma_h_shift : 2 * s -> mv_scale		3664830	2		=			
ANR	3665251	Identifier	scale		3664830	0					
ANR	3665252	ConditionalExpression	plane_index ? ( 2 * s -> mv_scale ) >> s -> chroma_h_shift : 2 * s -> mv_scale		3664830	1					
ANR	3665253	Condition	plane_index		3664830	0					
ANR	3665254	Identifier	plane_index		3664830	0					
ANR	3665255	ShiftExpression	( 2 * s -> mv_scale ) >> s -> chroma_h_shift		3664830	1		>>			
ANR	3665256	MultiplicativeExpression	2 * s -> mv_scale		3664830	0		*			
ANR	3665257	PrimaryExpression	2		3664830	0					
ANR	3665258	PtrMemberAccess	s -> mv_scale		3664830	1					
ANR	3665259	Identifier	s		3664830	0					
ANR	3665260	Identifier	mv_scale		3664830	1					
ANR	3665261	PtrMemberAccess	s -> chroma_h_shift		3664830	1					
ANR	3665262	Identifier	s		3664830	0					
ANR	3665263	Identifier	chroma_h_shift		3664830	1					
ANR	3665264	MultiplicativeExpression	2 * s -> mv_scale		3664830	2		*			
ANR	3665265	PrimaryExpression	2		3664830	0					
ANR	3665266	PtrMemberAccess	s -> mv_scale		3664830	1					
ANR	3665267	Identifier	s		3664830	0					
ANR	3665268	Identifier	mv_scale		3664830	1					
ANR	3665269	IdentifierDeclStatement	int mx = block -> mx * scale ;	85:8:1868:1891	3664830	2	True				
ANR	3665270	IdentifierDecl	mx = block -> mx * scale		3664830	0					
ANR	3665271	IdentifierDeclType	int		3664830	0					
ANR	3665272	Identifier	mx		3664830	1					
ANR	3665273	AssignmentExpression	mx = block -> mx * scale		3664830	2		=			
ANR	3665274	Identifier	mx		3664830	0					
ANR	3665275	MultiplicativeExpression	block -> mx * scale		3664830	1		*			
ANR	3665276	PtrMemberAccess	block -> mx		3664830	0					
ANR	3665277	Identifier	block		3664830	0					
ANR	3665278	Identifier	mx		3664830	1					
ANR	3665279	Identifier	scale		3664830	1					
ANR	3665280	IdentifierDeclStatement	int my = block -> my * scale ;	87:8:1902:1925	3664830	3	True				
ANR	3665281	IdentifierDecl	my = block -> my * scale		3664830	0					
ANR	3665282	IdentifierDeclType	int		3664830	0					
ANR	3665283	Identifier	my		3664830	1					
ANR	3665284	AssignmentExpression	my = block -> my * scale		3664830	2		=			
ANR	3665285	Identifier	my		3664830	0					
ANR	3665286	MultiplicativeExpression	block -> my * scale		3664830	1		*			
ANR	3665287	PtrMemberAccess	block -> my		3664830	0					
ANR	3665288	Identifier	block		3664830	0					
ANR	3665289	Identifier	my		3664830	1					
ANR	3665290	Identifier	scale		3664830	1					
ANR	3665291	IdentifierDeclStatement	const int dx = mx & 15 ;	89:8:1936:1955	3664830	4	True				
ANR	3665292	IdentifierDecl	dx = mx & 15		3664830	0					
ANR	3665293	IdentifierDeclType	const int		3664830	0					
ANR	3665294	Identifier	dx		3664830	1					
ANR	3665295	AssignmentExpression	dx = mx & 15		3664830	2		=			
ANR	3665296	Identifier	dx		3664830	0					
ANR	3665297	BitAndExpression	mx & 15		3664830	1		&			
ANR	3665298	Identifier	mx		3664830	0					
ANR	3665299	PrimaryExpression	15		3664830	1					
ANR	3665300	IdentifierDeclStatement	const int dy = my & 15 ;	91:8:1966:1985	3664830	5	True				
ANR	3665301	IdentifierDecl	dy = my & 15		3664830	0					
ANR	3665302	IdentifierDeclType	const int		3664830	0					
ANR	3665303	Identifier	dy		3664830	1					
ANR	3665304	AssignmentExpression	dy = my & 15		3664830	2		=			
ANR	3665305	Identifier	dy		3664830	0					
ANR	3665306	BitAndExpression	my & 15		3664830	1		&			
ANR	3665307	Identifier	my		3664830	0					
ANR	3665308	PrimaryExpression	15		3664830	1					
ANR	3665309	IdentifierDeclStatement	const int tab_index = 3 - ( b_w >> 2 ) + ( b_w >> 4 ) ;	93:8:1996:2040	3664830	6	True				
ANR	3665310	IdentifierDecl	tab_index = 3 - ( b_w >> 2 ) + ( b_w >> 4 )		3664830	0					
ANR	3665311	IdentifierDeclType	const int		3664830	0					
ANR	3665312	Identifier	tab_index		3664830	1					
ANR	3665313	AssignmentExpression	tab_index = 3 - ( b_w >> 2 ) + ( b_w >> 4 )		3664830	2		=			
ANR	3665314	Identifier	tab_index		3664830	0					
ANR	3665315	AdditiveExpression	3 - ( b_w >> 2 ) + ( b_w >> 4 )		3664830	1		-			
ANR	3665316	PrimaryExpression	3		3664830	0					
ANR	3665317	AdditiveExpression	( b_w >> 2 ) + ( b_w >> 4 )		3664830	1		+			
ANR	3665318	ShiftExpression	b_w >> 2		3664830	0		>>			
ANR	3665319	Identifier	b_w		3664830	0					
ANR	3665320	PrimaryExpression	2		3664830	1					
ANR	3665321	ShiftExpression	b_w >> 4		3664830	1		>>			
ANR	3665322	Identifier	b_w		3664830	0					
ANR	3665323	PrimaryExpression	4		3664830	1					
ANR	3665324	ExpressionStatement	sx += ( mx >> 4 ) - ( HTAPS_MAX / 2 - 1 )	95:8:2051:2082	3664830	7	True				
ANR	3665325	AssignmentExpression	sx += ( mx >> 4 ) - ( HTAPS_MAX / 2 - 1 )		3664830	0		+=			
ANR	3665326	Identifier	sx		3664830	0					
ANR	3665327	AdditiveExpression	( mx >> 4 ) - ( HTAPS_MAX / 2 - 1 )		3664830	1		-			
ANR	3665328	ShiftExpression	mx >> 4		3664830	0		>>			
ANR	3665329	Identifier	mx		3664830	0					
ANR	3665330	PrimaryExpression	4		3664830	1					
ANR	3665331	AdditiveExpression	HTAPS_MAX / 2 - 1		3664830	1		-			
ANR	3665332	MultiplicativeExpression	HTAPS_MAX / 2		3664830	0		/			
ANR	3665333	Identifier	HTAPS_MAX		3664830	0					
ANR	3665334	PrimaryExpression	2		3664830	1					
ANR	3665335	PrimaryExpression	1		3664830	1					
ANR	3665336	ExpressionStatement	sy += ( my >> 4 ) - ( HTAPS_MAX / 2 - 1 )	97:8:2093:2124	3664830	8	True				
ANR	3665337	AssignmentExpression	sy += ( my >> 4 ) - ( HTAPS_MAX / 2 - 1 )		3664830	0		+=			
ANR	3665338	Identifier	sy		3664830	0					
ANR	3665339	AdditiveExpression	( my >> 4 ) - ( HTAPS_MAX / 2 - 1 )		3664830	1		-			
ANR	3665340	ShiftExpression	my >> 4		3664830	0		>>			
ANR	3665341	Identifier	my		3664830	0					
ANR	3665342	PrimaryExpression	4		3664830	1					
ANR	3665343	AdditiveExpression	HTAPS_MAX / 2 - 1		3664830	1		-			
ANR	3665344	MultiplicativeExpression	HTAPS_MAX / 2		3664830	0		/			
ANR	3665345	Identifier	HTAPS_MAX		3664830	0					
ANR	3665346	PrimaryExpression	2		3664830	1					
ANR	3665347	PrimaryExpression	1		3664830	1					
ANR	3665348	ExpressionStatement	src += sx + sy * stride	99:8:2135:2156	3664830	9	True				
ANR	3665349	AssignmentExpression	src += sx + sy * stride		3664830	0		+=			
ANR	3665350	Identifier	src		3664830	0					
ANR	3665351	AdditiveExpression	sx + sy * stride		3664830	1		+			
ANR	3665352	Identifier	sx		3664830	0					
ANR	3665353	MultiplicativeExpression	sy * stride		3664830	1		*			
ANR	3665354	Identifier	sy		3664830	0					
ANR	3665355	Identifier	stride		3664830	1					
ANR	3665356	IfStatement	"if ( ( unsigned ) sx >= FFMAX ( w - b_w - ( HTAPS_MAX - 2 ) , 0 ) || ( unsigned ) sy >= FFMAX ( h - b_h - ( HTAPS_MAX - 2 ) , 0 ) )"		3664830	10					
ANR	3665357	Condition	"( unsigned ) sx >= FFMAX ( w - b_w - ( HTAPS_MAX - 2 ) , 0 ) || ( unsigned ) sy >= FFMAX ( h - b_h - ( HTAPS_MAX - 2 ) , 0 )"	101:14:2173:2286	3664830	0	True				
ANR	3665358	OrExpression	"( unsigned ) sx >= FFMAX ( w - b_w - ( HTAPS_MAX - 2 ) , 0 ) || ( unsigned ) sy >= FFMAX ( h - b_h - ( HTAPS_MAX - 2 ) , 0 )"		3664830	0		||			
ANR	3665359	RelationalExpression	"( unsigned ) sx >= FFMAX ( w - b_w - ( HTAPS_MAX - 2 ) , 0 )"		3664830	0		>=			
ANR	3665360	CastExpression	( unsigned ) sx		3664830	0					
ANR	3665361	CastTarget	unsigned		3664830	0					
ANR	3665362	Identifier	sx		3664830	1					
ANR	3665363	CallExpression	"FFMAX ( w - b_w - ( HTAPS_MAX - 2 ) , 0 )"		3664830	1					
ANR	3665364	Callee	FFMAX		3664830	0					
ANR	3665365	Identifier	FFMAX		3664830	0					
ANR	3665366	ArgumentList	w - b_w - ( HTAPS_MAX - 2 )		3664830	1					
ANR	3665367	Argument	w - b_w - ( HTAPS_MAX - 2 )		3664830	0					
ANR	3665368	AdditiveExpression	w - b_w - ( HTAPS_MAX - 2 )		3664830	0		-			
ANR	3665369	Identifier	w		3664830	0					
ANR	3665370	AdditiveExpression	b_w - ( HTAPS_MAX - 2 )		3664830	1		-			
ANR	3665371	Identifier	b_w		3664830	0					
ANR	3665372	AdditiveExpression	HTAPS_MAX - 2		3664830	1		-			
ANR	3665373	Identifier	HTAPS_MAX		3664830	0					
ANR	3665374	PrimaryExpression	2		3664830	1					
ANR	3665375	Argument	0		3664830	1					
ANR	3665376	PrimaryExpression	0		3664830	0					
ANR	3665377	RelationalExpression	"( unsigned ) sy >= FFMAX ( h - b_h - ( HTAPS_MAX - 2 ) , 0 )"		3664830	1		>=			
ANR	3665378	CastExpression	( unsigned ) sy		3664830	0					
ANR	3665379	CastTarget	unsigned		3664830	0					
ANR	3665380	Identifier	sy		3664830	1					
ANR	3665381	CallExpression	"FFMAX ( h - b_h - ( HTAPS_MAX - 2 ) , 0 )"		3664830	1					
ANR	3665382	Callee	FFMAX		3664830	0					
ANR	3665383	Identifier	FFMAX		3664830	0					
ANR	3665384	ArgumentList	h - b_h - ( HTAPS_MAX - 2 )		3664830	1					
ANR	3665385	Argument	h - b_h - ( HTAPS_MAX - 2 )		3664830	0					
ANR	3665386	AdditiveExpression	h - b_h - ( HTAPS_MAX - 2 )		3664830	0		-			
ANR	3665387	Identifier	h		3664830	0					
ANR	3665388	AdditiveExpression	b_h - ( HTAPS_MAX - 2 )		3664830	1		-			
ANR	3665389	Identifier	b_h		3664830	0					
ANR	3665390	AdditiveExpression	HTAPS_MAX - 2		3664830	1		-			
ANR	3665391	Identifier	HTAPS_MAX		3664830	0					
ANR	3665392	PrimaryExpression	2		3664830	1					
ANR	3665393	Argument	0		3664830	1					
ANR	3665394	PrimaryExpression	0		3664830	0					
ANR	3665395	CompoundStatement		103:64:2125:2125	3664830	1					
ANR	3665396	ExpressionStatement	"s -> vdsp . emulated_edge_mc ( tmp + MB_SIZE , src , stride , b_w + HTAPS_MAX - 1 , b_h + HTAPS_MAX - 1 , sx , sy , w , h )"	105:12:2303:2403	3664830	0	True				
ANR	3665397	CallExpression	"s -> vdsp . emulated_edge_mc ( tmp + MB_SIZE , src , stride , b_w + HTAPS_MAX - 1 , b_h + HTAPS_MAX - 1 , sx , sy , w , h )"		3664830	0					
ANR	3665398	Callee	s -> vdsp . emulated_edge_mc		3664830	0					
ANR	3665399	MemberAccess	s -> vdsp . emulated_edge_mc		3664830	0					
ANR	3665400	PtrMemberAccess	s -> vdsp		3664830	0					
ANR	3665401	Identifier	s		3664830	0					
ANR	3665402	Identifier	vdsp		3664830	1					
ANR	3665403	Identifier	emulated_edge_mc		3664830	1					
ANR	3665404	ArgumentList	tmp + MB_SIZE		3664830	1					
ANR	3665405	Argument	tmp + MB_SIZE		3664830	0					
ANR	3665406	AdditiveExpression	tmp + MB_SIZE		3664830	0		+			
ANR	3665407	Identifier	tmp		3664830	0					
ANR	3665408	Identifier	MB_SIZE		3664830	1					
ANR	3665409	Argument	src		3664830	1					
ANR	3665410	Identifier	src		3664830	0					
ANR	3665411	Argument	stride		3664830	2					
ANR	3665412	Identifier	stride		3664830	0					
ANR	3665413	Argument	b_w + HTAPS_MAX - 1		3664830	3					
ANR	3665414	AdditiveExpression	b_w + HTAPS_MAX - 1		3664830	0		+			
ANR	3665415	Identifier	b_w		3664830	0					
ANR	3665416	AdditiveExpression	HTAPS_MAX - 1		3664830	1		-			
ANR	3665417	Identifier	HTAPS_MAX		3664830	0					
ANR	3665418	PrimaryExpression	1		3664830	1					
ANR	3665419	Argument	b_h + HTAPS_MAX - 1		3664830	4					
ANR	3665420	AdditiveExpression	b_h + HTAPS_MAX - 1		3664830	0		+			
ANR	3665421	Identifier	b_h		3664830	0					
ANR	3665422	AdditiveExpression	HTAPS_MAX - 1		3664830	1		-			
ANR	3665423	Identifier	HTAPS_MAX		3664830	0					
ANR	3665424	PrimaryExpression	1		3664830	1					
ANR	3665425	Argument	sx		3664830	5					
ANR	3665426	Identifier	sx		3664830	0					
ANR	3665427	Argument	sy		3664830	6					
ANR	3665428	Identifier	sy		3664830	0					
ANR	3665429	Argument	w		3664830	7					
ANR	3665430	Identifier	w		3664830	0					
ANR	3665431	Argument	h		3664830	8					
ANR	3665432	Identifier	h		3664830	0					
ANR	3665433	ExpressionStatement	src = tmp + MB_SIZE	107:12:2418:2436	3664830	1	True				
ANR	3665434	AssignmentExpression	src = tmp + MB_SIZE		3664830	0		=			
ANR	3665435	Identifier	src		3664830	0					
ANR	3665436	AdditiveExpression	tmp + MB_SIZE		3664830	1		+			
ANR	3665437	Identifier	tmp		3664830	0					
ANR	3665438	Identifier	MB_SIZE		3664830	1					
ANR	3665439	ExpressionStatement	av_assert2 ( s -> chroma_h_shift == s -> chroma_v_shift )	113:8:2460:2510	3664830	11	True				
ANR	3665440	CallExpression	av_assert2 ( s -> chroma_h_shift == s -> chroma_v_shift )		3664830	0					
ANR	3665441	Callee	av_assert2		3664830	0					
ANR	3665442	Identifier	av_assert2		3664830	0					
ANR	3665443	ArgumentList	s -> chroma_h_shift == s -> chroma_v_shift		3664830	1					
ANR	3665444	Argument	s -> chroma_h_shift == s -> chroma_v_shift		3664830	0					
ANR	3665445	EqualityExpression	s -> chroma_h_shift == s -> chroma_v_shift		3664830	0		==			
ANR	3665446	PtrMemberAccess	s -> chroma_h_shift		3664830	0					
ANR	3665447	Identifier	s		3664830	0					
ANR	3665448	Identifier	chroma_h_shift		3664830	1					
ANR	3665449	PtrMemberAccess	s -> chroma_v_shift		3664830	1					
ANR	3665450	Identifier	s		3664830	0					
ANR	3665451	Identifier	chroma_v_shift		3664830	1					
ANR	3665452	ExpressionStatement	av_assert2 ( b_w > 1 && b_h > 1 )	117:8:2544:2570	3664830	12	True				
ANR	3665453	CallExpression	av_assert2 ( b_w > 1 && b_h > 1 )		3664830	0					
ANR	3665454	Callee	av_assert2		3664830	0					
ANR	3665455	Identifier	av_assert2		3664830	0					
ANR	3665456	ArgumentList	b_w > 1 && b_h > 1		3664830	1					
ANR	3665457	Argument	b_w > 1 && b_h > 1		3664830	0					
ANR	3665458	AndExpression	b_w > 1 && b_h > 1		3664830	0		&&			
ANR	3665459	RelationalExpression	b_w > 1		3664830	0		>			
ANR	3665460	Identifier	b_w		3664830	0					
ANR	3665461	PrimaryExpression	1		3664830	1					
ANR	3665462	RelationalExpression	b_h > 1		3664830	1		>			
ANR	3665463	Identifier	b_h		3664830	0					
ANR	3665464	PrimaryExpression	1		3664830	1					
ANR	3665465	ExpressionStatement	av_assert2 ( ( tab_index >= 0 && tab_index < 4 ) || b_w == 32 )	119:8:2581:2633	3664830	13	True				
ANR	3665466	CallExpression	av_assert2 ( ( tab_index >= 0 && tab_index < 4 ) || b_w == 32 )		3664830	0					
ANR	3665467	Callee	av_assert2		3664830	0					
ANR	3665468	Identifier	av_assert2		3664830	0					
ANR	3665469	ArgumentList	( tab_index >= 0 && tab_index < 4 ) || b_w == 32		3664830	1					
ANR	3665470	Argument	( tab_index >= 0 && tab_index < 4 ) || b_w == 32		3664830	0					
ANR	3665471	OrExpression	( tab_index >= 0 && tab_index < 4 ) || b_w == 32		3664830	0		||			
ANR	3665472	AndExpression	tab_index >= 0 && tab_index < 4		3664830	0		&&			
ANR	3665473	RelationalExpression	tab_index >= 0		3664830	0		>=			
ANR	3665474	Identifier	tab_index		3664830	0					
ANR	3665475	PrimaryExpression	0		3664830	1					
ANR	3665476	RelationalExpression	tab_index < 4		3664830	1		<			
ANR	3665477	Identifier	tab_index		3664830	0					
ANR	3665478	PrimaryExpression	4		3664830	1					
ANR	3665479	EqualityExpression	b_w == 32		3664830	1		==			
ANR	3665480	Identifier	b_w		3664830	0					
ANR	3665481	PrimaryExpression	32		3664830	1					
ANR	3665482	IfStatement	if ( ( dx & 3 ) || ( dy & 3 ) || ! ( b_w == b_h || 2 * b_w == b_h || b_w == 2 * b_h ) || ( b_w & ( b_w - 1 ) ) || ! s -> plane [ plane_index ] . fast_mc )		3664830	14					
ANR	3665483	Condition	( dx & 3 ) || ( dy & 3 ) || ! ( b_w == b_h || 2 * b_w == b_h || b_w == 2 * b_h ) || ( b_w & ( b_w - 1 ) ) || ! s -> plane [ plane_index ] . fast_mc	121:11:2647:2762	3664830	0	True				
ANR	3665484	OrExpression	( dx & 3 ) || ( dy & 3 ) || ! ( b_w == b_h || 2 * b_w == b_h || b_w == 2 * b_h ) || ( b_w & ( b_w - 1 ) ) || ! s -> plane [ plane_index ] . fast_mc		3664830	0		||			
ANR	3665485	BitAndExpression	dx & 3		3664830	0		&			
ANR	3665486	Identifier	dx		3664830	0					
ANR	3665487	PrimaryExpression	3		3664830	1					
ANR	3665488	OrExpression	( dy & 3 ) || ! ( b_w == b_h || 2 * b_w == b_h || b_w == 2 * b_h ) || ( b_w & ( b_w - 1 ) ) || ! s -> plane [ plane_index ] . fast_mc		3664830	1		||			
ANR	3665489	BitAndExpression	dy & 3		3664830	0		&			
ANR	3665490	Identifier	dy		3664830	0					
ANR	3665491	PrimaryExpression	3		3664830	1					
ANR	3665492	OrExpression	! ( b_w == b_h || 2 * b_w == b_h || b_w == 2 * b_h ) || ( b_w & ( b_w - 1 ) ) || ! s -> plane [ plane_index ] . fast_mc		3664830	1		||			
ANR	3665493	UnaryOperationExpression	! ( b_w == b_h || 2 * b_w == b_h || b_w == 2 * b_h )		3664830	0					
ANR	3665494	UnaryOperator	!		3664830	0					
ANR	3665495	OrExpression	b_w == b_h || 2 * b_w == b_h || b_w == 2 * b_h		3664830	1		||			
ANR	3665496	EqualityExpression	b_w == b_h		3664830	0		==			
ANR	3665497	Identifier	b_w		3664830	0					
ANR	3665498	Identifier	b_h		3664830	1					
ANR	3665499	OrExpression	2 * b_w == b_h || b_w == 2 * b_h		3664830	1		||			
ANR	3665500	EqualityExpression	2 * b_w == b_h		3664830	0		==			
ANR	3665501	MultiplicativeExpression	2 * b_w		3664830	0		*			
ANR	3665502	PrimaryExpression	2		3664830	0					
ANR	3665503	Identifier	b_w		3664830	1					
ANR	3665504	Identifier	b_h		3664830	1					
ANR	3665505	EqualityExpression	b_w == 2 * b_h		3664830	1		==			
ANR	3665506	Identifier	b_w		3664830	0					
ANR	3665507	MultiplicativeExpression	2 * b_h		3664830	1		*			
ANR	3665508	PrimaryExpression	2		3664830	0					
ANR	3665509	Identifier	b_h		3664830	1					
ANR	3665510	OrExpression	( b_w & ( b_w - 1 ) ) || ! s -> plane [ plane_index ] . fast_mc		3664830	1		||			
ANR	3665511	BitAndExpression	b_w & ( b_w - 1 )		3664830	0		&			
ANR	3665512	Identifier	b_w		3664830	0					
ANR	3665513	AdditiveExpression	b_w - 1		3664830	1		-			
ANR	3665514	Identifier	b_w		3664830	0					
ANR	3665515	PrimaryExpression	1		3664830	1					
ANR	3665516	UnaryOperationExpression	! s -> plane [ plane_index ] . fast_mc		3664830	1					
ANR	3665517	UnaryOperator	!		3664830	0					
ANR	3665518	MemberAccess	s -> plane [ plane_index ] . fast_mc		3664830	1					
ANR	3665519	ArrayIndexing	s -> plane [ plane_index ]		3664830	0					
ANR	3665520	PtrMemberAccess	s -> plane		3664830	0					
ANR	3665521	Identifier	s		3664830	0					
ANR	3665522	Identifier	plane		3664830	1					
ANR	3665523	Identifier	plane_index		3664830	1					
ANR	3665524	Identifier	fast_mc		3664830	1					
ANR	3665525	ExpressionStatement	"mc_block ( & s -> plane [ plane_index ] , dst , src , stride , b_w , b_h , dx , dy )"	123:12:2779:2847	3664830	1	True				
ANR	3665526	CallExpression	"mc_block ( & s -> plane [ plane_index ] , dst , src , stride , b_w , b_h , dx , dy )"		3664830	0					
ANR	3665527	Callee	mc_block		3664830	0					
ANR	3665528	Identifier	mc_block		3664830	0					
ANR	3665529	ArgumentList	& s -> plane [ plane_index ]		3664830	1					
ANR	3665530	Argument	& s -> plane [ plane_index ]		3664830	0					
ANR	3665531	UnaryOperationExpression	& s -> plane [ plane_index ]		3664830	0					
ANR	3665532	UnaryOperator	&		3664830	0					
ANR	3665533	ArrayIndexing	s -> plane [ plane_index ]		3664830	1					
ANR	3665534	PtrMemberAccess	s -> plane		3664830	0					
ANR	3665535	Identifier	s		3664830	0					
ANR	3665536	Identifier	plane		3664830	1					
ANR	3665537	Identifier	plane_index		3664830	1					
ANR	3665538	Argument	dst		3664830	1					
ANR	3665539	Identifier	dst		3664830	0					
ANR	3665540	Argument	src		3664830	2					
ANR	3665541	Identifier	src		3664830	0					
ANR	3665542	Argument	stride		3664830	3					
ANR	3665543	Identifier	stride		3664830	0					
ANR	3665544	Argument	b_w		3664830	4					
ANR	3665545	Identifier	b_w		3664830	0					
ANR	3665546	Argument	b_h		3664830	5					
ANR	3665547	Identifier	b_h		3664830	0					
ANR	3665548	Argument	dx		3664830	6					
ANR	3665549	Identifier	dx		3664830	0					
ANR	3665550	Argument	dy		3664830	7					
ANR	3665551	Identifier	dy		3664830	0					
ANR	3665552	ElseStatement	else		3664830	0					
ANR	3665553	IfStatement	if ( b_w == 32 )		3664830	0					
ANR	3665554	Condition	b_w == 32	125:16:2866:2872	3664830	0	True				
ANR	3665555	EqualityExpression	b_w == 32		3664830	0		==			
ANR	3665556	Identifier	b_w		3664830	0					
ANR	3665557	PrimaryExpression	32		3664830	1					
ANR	3665558	CompoundStatement		127:12:2726:2731	3664830	1					
ANR	3665559	IdentifierDeclStatement	int y ;	127:12:2889:2894	3664830	0	True				
ANR	3665560	IdentifierDecl	y		3664830	0					
ANR	3665561	IdentifierDeclType	int		3664830	0					
ANR	3665562	Identifier	y		3664830	1					
ANR	3665563	ForStatement	for ( y = 0 ; y < b_h ; y += 16 )		3664830	1					
ANR	3665564	ForInit	y = 0 ;	129:16:2913:2916	3664830	0	True				
ANR	3665565	AssignmentExpression	y = 0		3664830	0		=			
ANR	3665566	Identifier	y		3664830	0					
ANR	3665567	PrimaryExpression	0		3664830	1					
ANR	3665568	Condition	y < b_h	129:21:2918:2922	3664830	1	True				
ANR	3665569	RelationalExpression	y < b_h		3664830	0		<			
ANR	3665570	Identifier	y		3664830	0					
ANR	3665571	Identifier	b_h		3664830	1					
ANR	3665572	AssignmentExpression	y += 16	129:28:2925:2929	3664830	2	True	+=			
ANR	3665573	Identifier	y		3664830	0					
ANR	3665574	PrimaryExpression	16		3664830	1					
ANR	3665575	CompoundStatement		129:34:2768:2768	3664830	3					
ANR	3665576	ExpressionStatement	"s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ] [ dy + ( dx >> 2 ) ] ( dst + y * stride , src + 3 + ( y + 3 ) * stride , stride )"	131:16:2950:3048	3664830	0	True				
ANR	3665577	CallExpression	"s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ] [ dy + ( dx >> 2 ) ] ( dst + y * stride , src + 3 + ( y + 3 ) * stride , stride )"		3664830	0					
ANR	3665578	Callee	s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665579	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665580	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ]		3664830	0					
ANR	3665581	MemberAccess	s -> h264qpel . put_h264_qpel_pixels_tab		3664830	0					
ANR	3665582	PtrMemberAccess	s -> h264qpel		3664830	0					
ANR	3665583	Identifier	s		3664830	0					
ANR	3665584	Identifier	h264qpel		3664830	1					
ANR	3665585	Identifier	put_h264_qpel_pixels_tab		3664830	1					
ANR	3665586	PrimaryExpression	0		3664830	1					
ANR	3665587	AdditiveExpression	dy + ( dx >> 2 )		3664830	1		+			
ANR	3665588	Identifier	dy		3664830	0					
ANR	3665589	ShiftExpression	dx >> 2		3664830	1		>>			
ANR	3665590	Identifier	dx		3664830	0					
ANR	3665591	PrimaryExpression	2		3664830	1					
ANR	3665592	ArgumentList	dst + y * stride		3664830	1					
ANR	3665593	Argument	dst + y * stride		3664830	0					
ANR	3665594	AdditiveExpression	dst + y * stride		3664830	0		+			
ANR	3665595	Identifier	dst		3664830	0					
ANR	3665596	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665597	Identifier	y		3664830	0					
ANR	3665598	Identifier	stride		3664830	1					
ANR	3665599	Argument	src + 3 + ( y + 3 ) * stride		3664830	1					
ANR	3665600	AdditiveExpression	src + 3 + ( y + 3 ) * stride		3664830	0		+			
ANR	3665601	Identifier	src		3664830	0					
ANR	3665602	AdditiveExpression	3 + ( y + 3 ) * stride		3664830	1		+			
ANR	3665603	PrimaryExpression	3		3664830	0					
ANR	3665604	MultiplicativeExpression	( y + 3 ) * stride		3664830	1		*			
ANR	3665605	AdditiveExpression	y + 3		3664830	0		+			
ANR	3665606	Identifier	y		3664830	0					
ANR	3665607	PrimaryExpression	3		3664830	1					
ANR	3665608	Identifier	stride		3664830	1					
ANR	3665609	Argument	stride		3664830	2					
ANR	3665610	Identifier	stride		3664830	0					
ANR	3665611	ExpressionStatement	"s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ] [ dy + ( dx >> 2 ) ] ( dst + 16 + y * stride , src + 19 + ( y + 3 ) * stride , stride )"	133:16:3067:3171	3664830	1	True				
ANR	3665612	CallExpression	"s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ] [ dy + ( dx >> 2 ) ] ( dst + 16 + y * stride , src + 19 + ( y + 3 ) * stride , stride )"		3664830	0					
ANR	3665613	Callee	s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665614	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665615	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ 0 ]		3664830	0					
ANR	3665616	MemberAccess	s -> h264qpel . put_h264_qpel_pixels_tab		3664830	0					
ANR	3665617	PtrMemberAccess	s -> h264qpel		3664830	0					
ANR	3665618	Identifier	s		3664830	0					
ANR	3665619	Identifier	h264qpel		3664830	1					
ANR	3665620	Identifier	put_h264_qpel_pixels_tab		3664830	1					
ANR	3665621	PrimaryExpression	0		3664830	1					
ANR	3665622	AdditiveExpression	dy + ( dx >> 2 )		3664830	1		+			
ANR	3665623	Identifier	dy		3664830	0					
ANR	3665624	ShiftExpression	dx >> 2		3664830	1		>>			
ANR	3665625	Identifier	dx		3664830	0					
ANR	3665626	PrimaryExpression	2		3664830	1					
ANR	3665627	ArgumentList	dst + 16 + y * stride		3664830	1					
ANR	3665628	Argument	dst + 16 + y * stride		3664830	0					
ANR	3665629	AdditiveExpression	dst + 16 + y * stride		3664830	0		+			
ANR	3665630	Identifier	dst		3664830	0					
ANR	3665631	AdditiveExpression	16 + y * stride		3664830	1		+			
ANR	3665632	PrimaryExpression	16		3664830	0					
ANR	3665633	MultiplicativeExpression	y * stride		3664830	1		*			
ANR	3665634	Identifier	y		3664830	0					
ANR	3665635	Identifier	stride		3664830	1					
ANR	3665636	Argument	src + 19 + ( y + 3 ) * stride		3664830	1					
ANR	3665637	AdditiveExpression	src + 19 + ( y + 3 ) * stride		3664830	0		+			
ANR	3665638	Identifier	src		3664830	0					
ANR	3665639	AdditiveExpression	19 + ( y + 3 ) * stride		3664830	1		+			
ANR	3665640	PrimaryExpression	19		3664830	0					
ANR	3665641	MultiplicativeExpression	( y + 3 ) * stride		3664830	1		*			
ANR	3665642	AdditiveExpression	y + 3		3664830	0		+			
ANR	3665643	Identifier	y		3664830	0					
ANR	3665644	PrimaryExpression	3		3664830	1					
ANR	3665645	Identifier	stride		3664830	1					
ANR	3665646	Argument	stride		3664830	2					
ANR	3665647	Identifier	stride		3664830	0					
ANR	3665648	ElseStatement	else		3664830	0					
ANR	3665649	IfStatement	if ( b_w == b_h )		3664830	0					
ANR	3665650	Condition	b_w == b_h	137:17:3206:3213	3664830	0	True				
ANR	3665651	EqualityExpression	b_w == b_h		3664830	0		==			
ANR	3665652	Identifier	b_w		3664830	0					
ANR	3665653	Identifier	b_h		3664830	1					
ANR	3665654	ExpressionStatement	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ] ( dst , src + 3 + 3 * stride , stride )"	139:12:3229:3321	3664830	1	True				
ANR	3665655	CallExpression	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ] ( dst , src + 3 + 3 * stride , stride )"		3664830	0					
ANR	3665656	Callee	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665657	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665658	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ]		3664830	0					
ANR	3665659	MemberAccess	s -> h264qpel . put_h264_qpel_pixels_tab		3664830	0					
ANR	3665660	PtrMemberAccess	s -> h264qpel		3664830	0					
ANR	3665661	Identifier	s		3664830	0					
ANR	3665662	Identifier	h264qpel		3664830	1					
ANR	3665663	Identifier	put_h264_qpel_pixels_tab		3664830	1					
ANR	3665664	Identifier	tab_index		3664830	1					
ANR	3665665	AdditiveExpression	dy + ( dx >> 2 )		3664830	1		+			
ANR	3665666	Identifier	dy		3664830	0					
ANR	3665667	ShiftExpression	dx >> 2		3664830	1		>>			
ANR	3665668	Identifier	dx		3664830	0					
ANR	3665669	PrimaryExpression	2		3664830	1					
ANR	3665670	ArgumentList	dst		3664830	1					
ANR	3665671	Argument	dst		3664830	0					
ANR	3665672	Identifier	dst		3664830	0					
ANR	3665673	Argument	src + 3 + 3 * stride		3664830	1					
ANR	3665674	AdditiveExpression	src + 3 + 3 * stride		3664830	0		+			
ANR	3665675	Identifier	src		3664830	0					
ANR	3665676	AdditiveExpression	3 + 3 * stride		3664830	1		+			
ANR	3665677	PrimaryExpression	3		3664830	0					
ANR	3665678	MultiplicativeExpression	3 * stride		3664830	1		*			
ANR	3665679	PrimaryExpression	3		3664830	0					
ANR	3665680	Identifier	stride		3664830	1					
ANR	3665681	Argument	stride		3664830	2					
ANR	3665682	Identifier	stride		3664830	0					
ANR	3665683	ElseStatement	else		3664830	0					
ANR	3665684	IfStatement	if ( b_w == 2 * b_h )		3664830	0					
ANR	3665685	Condition	b_w == 2 * b_h	141:16:3340:3349	3664830	0	True				
ANR	3665686	EqualityExpression	b_w == 2 * b_h		3664830	0		==			
ANR	3665687	Identifier	b_w		3664830	0					
ANR	3665688	MultiplicativeExpression	2 * b_h		3664830	1		*			
ANR	3665689	PrimaryExpression	2		3664830	0					
ANR	3665690	Identifier	b_h		3664830	1					
ANR	3665691	CompoundStatement		141:27:3188:3188	3664830	1					
ANR	3665692	ExpressionStatement	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ] [ dy + ( dx >> 2 ) ] ( dst , src + 3 + 3 * stride , stride )"	143:12:3366:3468	3664830	0	True				
ANR	3665693	CallExpression	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ] [ dy + ( dx >> 2 ) ] ( dst , src + 3 + 3 * stride , stride )"		3664830	0					
ANR	3665694	Callee	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665695	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665696	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ]		3664830	0					
ANR	3665697	MemberAccess	s -> h264qpel . put_h264_qpel_pixels_tab		3664830	0					
ANR	3665698	PtrMemberAccess	s -> h264qpel		3664830	0					
ANR	3665699	Identifier	s		3664830	0					
ANR	3665700	Identifier	h264qpel		3664830	1					
ANR	3665701	Identifier	put_h264_qpel_pixels_tab		3664830	1					
ANR	3665702	AdditiveExpression	tab_index + 1		3664830	1		+			
ANR	3665703	Identifier	tab_index		3664830	0					
ANR	3665704	PrimaryExpression	1		3664830	1					
ANR	3665705	AdditiveExpression	dy + ( dx >> 2 )		3664830	1		+			
ANR	3665706	Identifier	dy		3664830	0					
ANR	3665707	ShiftExpression	dx >> 2		3664830	1		>>			
ANR	3665708	Identifier	dx		3664830	0					
ANR	3665709	PrimaryExpression	2		3664830	1					
ANR	3665710	ArgumentList	dst		3664830	1					
ANR	3665711	Argument	dst		3664830	0					
ANR	3665712	Identifier	dst		3664830	0					
ANR	3665713	Argument	src + 3 + 3 * stride		3664830	1					
ANR	3665714	AdditiveExpression	src + 3 + 3 * stride		3664830	0		+			
ANR	3665715	Identifier	src		3664830	0					
ANR	3665716	AdditiveExpression	3 + 3 * stride		3664830	1		+			
ANR	3665717	PrimaryExpression	3		3664830	0					
ANR	3665718	MultiplicativeExpression	3 * stride		3664830	1		*			
ANR	3665719	PrimaryExpression	3		3664830	0					
ANR	3665720	Identifier	stride		3664830	1					
ANR	3665721	Argument	stride		3664830	2					
ANR	3665722	Identifier	stride		3664830	0					
ANR	3665723	ExpressionStatement	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ] [ dy + ( dx >> 2 ) ] ( dst + b_h , src + 3 + b_h + 3 * stride , stride )"	145:12:3483:3585	3664830	1	True				
ANR	3665724	CallExpression	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ] [ dy + ( dx >> 2 ) ] ( dst + b_h , src + 3 + b_h + 3 * stride , stride )"		3664830	0					
ANR	3665725	Callee	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665726	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665727	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index + 1 ]		3664830	0					
ANR	3665728	MemberAccess	s -> h264qpel . put_h264_qpel_pixels_tab		3664830	0					
ANR	3665729	PtrMemberAccess	s -> h264qpel		3664830	0					
ANR	3665730	Identifier	s		3664830	0					
ANR	3665731	Identifier	h264qpel		3664830	1					
ANR	3665732	Identifier	put_h264_qpel_pixels_tab		3664830	1					
ANR	3665733	AdditiveExpression	tab_index + 1		3664830	1		+			
ANR	3665734	Identifier	tab_index		3664830	0					
ANR	3665735	PrimaryExpression	1		3664830	1					
ANR	3665736	AdditiveExpression	dy + ( dx >> 2 )		3664830	1		+			
ANR	3665737	Identifier	dy		3664830	0					
ANR	3665738	ShiftExpression	dx >> 2		3664830	1		>>			
ANR	3665739	Identifier	dx		3664830	0					
ANR	3665740	PrimaryExpression	2		3664830	1					
ANR	3665741	ArgumentList	dst + b_h		3664830	1					
ANR	3665742	Argument	dst + b_h		3664830	0					
ANR	3665743	AdditiveExpression	dst + b_h		3664830	0		+			
ANR	3665744	Identifier	dst		3664830	0					
ANR	3665745	Identifier	b_h		3664830	1					
ANR	3665746	Argument	src + 3 + b_h + 3 * stride		3664830	1					
ANR	3665747	AdditiveExpression	src + 3 + b_h + 3 * stride		3664830	0		+			
ANR	3665748	Identifier	src		3664830	0					
ANR	3665749	AdditiveExpression	3 + b_h + 3 * stride		3664830	1		+			
ANR	3665750	PrimaryExpression	3		3664830	0					
ANR	3665751	AdditiveExpression	b_h + 3 * stride		3664830	1		+			
ANR	3665752	Identifier	b_h		3664830	0					
ANR	3665753	MultiplicativeExpression	3 * stride		3664830	1		*			
ANR	3665754	PrimaryExpression	3		3664830	0					
ANR	3665755	Identifier	stride		3664830	1					
ANR	3665756	Argument	stride		3664830	2					
ANR	3665757	Identifier	stride		3664830	0					
ANR	3665758	ElseStatement	else		3664830	0					
ANR	3665759	CompoundStatement		147:13:3438:3438	3664830	0					
ANR	3665760	ExpressionStatement	av_assert2 ( 2 * b_w == b_h )	149:12:3616:3638	3664830	0	True				
ANR	3665761	CallExpression	av_assert2 ( 2 * b_w == b_h )		3664830	0					
ANR	3665762	Callee	av_assert2		3664830	0					
ANR	3665763	Identifier	av_assert2		3664830	0					
ANR	3665764	ArgumentList	2 * b_w == b_h		3664830	1					
ANR	3665765	Argument	2 * b_w == b_h		3664830	0					
ANR	3665766	EqualityExpression	2 * b_w == b_h		3664830	0		==			
ANR	3665767	MultiplicativeExpression	2 * b_w		3664830	0		*			
ANR	3665768	PrimaryExpression	2		3664830	0					
ANR	3665769	Identifier	b_w		3664830	1					
ANR	3665770	Identifier	b_h		3664830	1					
ANR	3665771	ExpressionStatement	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ] ( dst , src + 3 + 3 * stride , stride )"	151:12:3653:3767	3664830	1	True				
ANR	3665772	CallExpression	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ] ( dst , src + 3 + 3 * stride , stride )"		3664830	0					
ANR	3665773	Callee	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665774	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665775	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ]		3664830	0					
ANR	3665776	MemberAccess	s -> h264qpel . put_h264_qpel_pixels_tab		3664830	0					
ANR	3665777	PtrMemberAccess	s -> h264qpel		3664830	0					
ANR	3665778	Identifier	s		3664830	0					
ANR	3665779	Identifier	h264qpel		3664830	1					
ANR	3665780	Identifier	put_h264_qpel_pixels_tab		3664830	1					
ANR	3665781	Identifier	tab_index		3664830	1					
ANR	3665782	AdditiveExpression	dy + ( dx >> 2 )		3664830	1		+			
ANR	3665783	Identifier	dy		3664830	0					
ANR	3665784	ShiftExpression	dx >> 2		3664830	1		>>			
ANR	3665785	Identifier	dx		3664830	0					
ANR	3665786	PrimaryExpression	2		3664830	1					
ANR	3665787	ArgumentList	dst		3664830	1					
ANR	3665788	Argument	dst		3664830	0					
ANR	3665789	Identifier	dst		3664830	0					
ANR	3665790	Argument	src + 3 + 3 * stride		3664830	1					
ANR	3665791	AdditiveExpression	src + 3 + 3 * stride		3664830	0		+			
ANR	3665792	Identifier	src		3664830	0					
ANR	3665793	AdditiveExpression	3 + 3 * stride		3664830	1		+			
ANR	3665794	PrimaryExpression	3		3664830	0					
ANR	3665795	MultiplicativeExpression	3 * stride		3664830	1		*			
ANR	3665796	PrimaryExpression	3		3664830	0					
ANR	3665797	Identifier	stride		3664830	1					
ANR	3665798	Argument	stride		3664830	2					
ANR	3665799	Identifier	stride		3664830	0					
ANR	3665800	ExpressionStatement	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ] ( dst + b_w * stride , src + 3 + 3 * stride + b_w * stride , stride )"	153:12:3782:3896	3664830	2	True				
ANR	3665801	CallExpression	"s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ] ( dst + b_w * stride , src + 3 + 3 * stride + b_w * stride , stride )"		3664830	0					
ANR	3665802	Callee	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665803	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ] [ dy + ( dx >> 2 ) ]		3664830	0					
ANR	3665804	ArrayIndexing	s -> h264qpel . put_h264_qpel_pixels_tab [ tab_index ]		3664830	0					
ANR	3665805	MemberAccess	s -> h264qpel . put_h264_qpel_pixels_tab		3664830	0					
ANR	3665806	PtrMemberAccess	s -> h264qpel		3664830	0					
ANR	3665807	Identifier	s		3664830	0					
ANR	3665808	Identifier	h264qpel		3664830	1					
ANR	3665809	Identifier	put_h264_qpel_pixels_tab		3664830	1					
ANR	3665810	Identifier	tab_index		3664830	1					
ANR	3665811	AdditiveExpression	dy + ( dx >> 2 )		3664830	1		+			
ANR	3665812	Identifier	dy		3664830	0					
ANR	3665813	ShiftExpression	dx >> 2		3664830	1		>>			
ANR	3665814	Identifier	dx		3664830	0					
ANR	3665815	PrimaryExpression	2		3664830	1					
ANR	3665816	ArgumentList	dst + b_w * stride		3664830	1					
ANR	3665817	Argument	dst + b_w * stride		3664830	0					
ANR	3665818	AdditiveExpression	dst + b_w * stride		3664830	0		+			
ANR	3665819	Identifier	dst		3664830	0					
ANR	3665820	MultiplicativeExpression	b_w * stride		3664830	1		*			
ANR	3665821	Identifier	b_w		3664830	0					
ANR	3665822	Identifier	stride		3664830	1					
ANR	3665823	Argument	src + 3 + 3 * stride + b_w * stride		3664830	1					
ANR	3665824	AdditiveExpression	src + 3 + 3 * stride + b_w * stride		3664830	0		+			
ANR	3665825	Identifier	src		3664830	0					
ANR	3665826	AdditiveExpression	3 + 3 * stride + b_w * stride		3664830	1		+			
ANR	3665827	PrimaryExpression	3		3664830	0					
ANR	3665828	AdditiveExpression	3 * stride + b_w * stride		3664830	1		+			
ANR	3665829	MultiplicativeExpression	3 * stride		3664830	0		*			
ANR	3665830	PrimaryExpression	3		3664830	0					
ANR	3665831	Identifier	stride		3664830	1					
ANR	3665832	MultiplicativeExpression	b_w * stride		3664830	1		*			
ANR	3665833	Identifier	b_w		3664830	0					
ANR	3665834	Identifier	stride		3664830	1					
ANR	3665835	Argument	stride		3664830	2					
ANR	3665836	Identifier	stride		3664830	0					
ANR	3665837	ReturnType	void		3664830	1					
ANR	3665838	Identifier	ff_snow_pred_block		3664830	2					
ANR	3665839	ParameterList	"SnowContext * s , uint8_t * dst , uint8_t * tmp , int stride , int sx , int sy , int b_w , int b_h , BlockNode * block , int plane_index , int w , int h"		3664830	3					
ANR	3665840	Parameter	SnowContext * s	1:24:24:37	3664830	0	True				
ANR	3665841	ParameterType	SnowContext *		3664830	0					
ANR	3665842	Identifier	s		3664830	1					
ANR	3665843	Parameter	uint8_t * dst	1:40:40:51	3664830	1	True				
ANR	3665844	ParameterType	uint8_t *		3664830	0					
ANR	3665845	Identifier	dst		3664830	1					
ANR	3665846	Parameter	uint8_t * tmp	1:54:54:65	3664830	2	True				
ANR	3665847	ParameterType	uint8_t *		3664830	0					
ANR	3665848	Identifier	tmp		3664830	1					
ANR	3665849	Parameter	int stride	1:68:68:77	3664830	3	True				
ANR	3665850	ParameterType	int		3664830	0					
ANR	3665851	Identifier	stride		3664830	1					
ANR	3665852	Parameter	int sx	1:80:80:85	3664830	4	True				
ANR	3665853	ParameterType	int		3664830	0					
ANR	3665854	Identifier	sx		3664830	1					
ANR	3665855	Parameter	int sy	1:88:88:93	3664830	5	True				
ANR	3665856	ParameterType	int		3664830	0					
ANR	3665857	Identifier	sy		3664830	1					
ANR	3665858	Parameter	int b_w	1:96:96:102	3664830	6	True				
ANR	3665859	ParameterType	int		3664830	0					
ANR	3665860	Identifier	b_w		3664830	1					
ANR	3665861	Parameter	int b_h	1:105:105:111	3664830	7	True				
ANR	3665862	ParameterType	int		3664830	0					
ANR	3665863	Identifier	b_h		3664830	1					
ANR	3665864	Parameter	BlockNode * block	1:114:114:129	3664830	8	True				
ANR	3665865	ParameterType	BlockNode *		3664830	0					
ANR	3665866	Identifier	block		3664830	1					
ANR	3665867	Parameter	int plane_index	1:132:132:146	3664830	9	True				
ANR	3665868	ParameterType	int		3664830	0					
ANR	3665869	Identifier	plane_index		3664830	1					
ANR	3665870	Parameter	int w	1:149:149:153	3664830	10	True				
ANR	3665871	ParameterType	int		3664830	0					
ANR	3665872	Identifier	w		3664830	1					
ANR	3665873	Parameter	int h	1:156:156:160	3664830	11	True				
ANR	3665874	ParameterType	int		3664830	0					
ANR	3665875	Identifier	h		3664830	1					
ANR	3665876	CFGEntryNode	ENTRY		3664830		True				
ANR	3665877	CFGExitNode	EXIT		3664830		True				
ANR	3665878	Symbol	* stride		3664830						
ANR	3665879	Symbol	* x		3664830						
ANR	3665880	Symbol	* y		3664830						
ANR	3665881	Symbol	* * * * s		3664830						
ANR	3665882	Symbol	s -> plane [ plane_index ] . fast_mc		3664830						
ANR	3665883	Symbol	* * * block -> ref		3664830						
ANR	3665884	Symbol	* s -> h264qpel		3664830						
ANR	3665885	Symbol	plane_index		3664830						
ANR	3665886	Symbol	* * * * block		3664830						
ANR	3665887	Symbol	stride		3664830						
ANR	3665888	Symbol	color4		3664830						
ANR	3665889	Symbol	* dst		3664830						
ANR	3665890	Symbol	s -> chroma_h_shift		3664830						
ANR	3665891	Symbol	block -> mx		3664830						
ANR	3665892	Symbol	dx		3664830						
ANR	3665893	Symbol	dy		3664830						
ANR	3665894	Symbol	tmp		3664830						
ANR	3665895	Symbol	* s -> last_picture [ block -> ref ] -> data		3664830						
ANR	3665896	Symbol	* * block -> ref		3664830						
ANR	3665897	Symbol	block -> color		3664830						
ANR	3665898	Symbol	* ( uint32_t * ) & dst [ 8 + y * stride ]		3664830						
ANR	3665899	Symbol	block		3664830						
ANR	3665900	Symbol	* s -> h264qpel . put_h264_qpel_pixels_tab		3664830						
ANR	3665901	Symbol	block -> my		3664830						
ANR	3665902	Symbol	block -> type		3664830						
ANR	3665903	Symbol	* * * s -> last_picture		3664830						
ANR	3665904	Symbol	* ( uint32_t * ) & dst [ 24 + y * stride ]		3664830						
ANR	3665905	Symbol	* * * block		3664830						
ANR	3665906	Symbol	HTAPS_MAX		3664830						
ANR	3665907	Symbol	tab_index		3664830						
ANR	3665908	Symbol	MB_SIZE		3664830						
ANR	3665909	Symbol	mx		3664830						
ANR	3665910	Symbol	s -> mv_scale		3664830						
ANR	3665911	Symbol	my		3664830						
ANR	3665912	Symbol	* * * s		3664830						
ANR	3665913	Symbol	* ( uint32_t * ) & dst [ 12 + y * stride ]		3664830						
ANR	3665914	Symbol	s -> h264qpel		3664830						
ANR	3665915	Symbol	s -> chroma_v_shift		3664830						
ANR	3665916	Symbol	* * s -> last_picture		3664830						
ANR	3665917	Symbol	dst		3664830						
ANR	3665918	Symbol	color		3664830						
ANR	3665919	Symbol	* block -> color		3664830						
ANR	3665920	Symbol	scale		3664830						
ANR	3665921	Symbol	b_h		3664830						
ANR	3665922	Symbol	s -> last_picture [ block -> ref ] -> data		3664830						
ANR	3665923	Symbol	s -> vdsp		3664830						
ANR	3665924	Symbol	* ( uint32_t * ) & dst [ 28 + y * stride ]		3664830						
ANR	3665925	Symbol	* ( uint32_t * ) & dst [ 0 + y * stride ]		3664830						
ANR	3665926	Symbol	* * s		3664830						
ANR	3665927	Symbol	s -> last_picture		3664830						
ANR	3665928	Symbol	b_w		3664830						
ANR	3665929	Symbol	* s -> last_picture		3664830						
ANR	3665930	Symbol	* plane_index		3664830						
ANR	3665931	Symbol	s -> plane		3664830						
ANR	3665932	Symbol	s -> h264qpel . put_h264_qpel_pixels_tab		3664830						
ANR	3665933	Symbol	* ( uint32_t * ) & dst [ 4 + y * stride ]		3664830						
ANR	3665934	Symbol	block -> ref		3664830						
ANR	3665935	Symbol	sx		3664830						
ANR	3665936	Symbol	BLOCK_INTRA		3664830						
ANR	3665937	Symbol	src		3664830						
ANR	3665938	Symbol	sy		3664830						
ANR	3665939	Symbol	* s -> plane		3664830						
ANR	3665940	Symbol	h		3664830						
ANR	3665941	Symbol	* ( uint32_t * ) & dst [ 20 + y * stride ]		3664830						
ANR	3665942	Symbol	* ( uint32_t * ) & dst [ 16 + y * stride ]		3664830						
ANR	3665943	Symbol	* block		3664830						
ANR	3665944	Symbol	s		3664830						
ANR	3665945	Symbol	* tab_index		3664830						
ANR	3665946	Symbol	* block -> ref		3664830						
ANR	3665947	Symbol	w		3664830						
ANR	3665948	Symbol	x		3664830						
ANR	3665949	Symbol	y		3664830						
ANR	3665950	Symbol	* * block		3664830						
ANR	3665951	Symbol	* s		3664830						
ANR	3665952	Symbol	FFMAX		3664830						
