command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2003801	File	/home/p4ultr4n/workplace/ReVeal/raw_code/decode_pitch_lag_high_1.c								
ANR	2003802	Function	decode_pitch_lag_high	1:0:0:1241							
ANR	2003803	FunctionDef	"decode_pitch_lag_high (int * lag_int , int * lag_frac , int pitch_index , uint8_t * base_lag_int , int subframe)"		2003802	0					
ANR	2003804	CompoundStatement		5:0:153:1241	2003802	0					
ANR	2003805	IfStatement	if ( subframe == 0 || subframe == 2 )		2003802	0					
ANR	2003806	Condition	subframe == 0 || subframe == 2	7:8:164:193	2003802	0	True				
ANR	2003807	OrExpression	subframe == 0 || subframe == 2		2003802	0		||			
ANR	2003808	EqualityExpression	subframe == 0		2003802	0		==			
ANR	2003809	Identifier	subframe		2003802	0					
ANR	2003810	PrimaryExpression	0		2003802	1					
ANR	2003811	EqualityExpression	subframe == 2		2003802	1		==			
ANR	2003812	Identifier	subframe		2003802	0					
ANR	2003813	PrimaryExpression	2		2003802	1					
ANR	2003814	CompoundStatement		3:40:42:42	2003802	1					
ANR	2003815	IfStatement	if ( pitch_index < 376 )		2003802	0					
ANR	2003816	Condition	pitch_index < 376	9:12:211:227	2003802	0	True				
ANR	2003817	RelationalExpression	pitch_index < 376		2003802	0		<			
ANR	2003818	Identifier	pitch_index		2003802	0					
ANR	2003819	PrimaryExpression	376		2003802	1					
ANR	2003820	CompoundStatement		5:31:76:76	2003802	1					
ANR	2003821	ExpressionStatement	* lag_int = ( pitch_index + 137 ) >> 2	11:12:245:281	2003802	0	True				
ANR	2003822	AssignmentExpression	* lag_int = ( pitch_index + 137 ) >> 2		2003802	0		=			
ANR	2003823	UnaryOperationExpression	* lag_int		2003802	0					
ANR	2003824	UnaryOperator	*		2003802	0					
ANR	2003825	Identifier	lag_int		2003802	1					
ANR	2003826	ShiftExpression	( pitch_index + 137 ) >> 2		2003802	1		>>			
ANR	2003827	AdditiveExpression	pitch_index + 137		2003802	0		+			
ANR	2003828	Identifier	pitch_index		2003802	0					
ANR	2003829	PrimaryExpression	137		2003802	1					
ANR	2003830	PrimaryExpression	2		2003802	1					
ANR	2003831	ExpressionStatement	* lag_frac = pitch_index - ( * lag_int << 2 ) + 136	13:12:296:343	2003802	1	True				
ANR	2003832	AssignmentExpression	* lag_frac = pitch_index - ( * lag_int << 2 ) + 136		2003802	0		=			
ANR	2003833	UnaryOperationExpression	* lag_frac		2003802	0					
ANR	2003834	UnaryOperator	*		2003802	0					
ANR	2003835	Identifier	lag_frac		2003802	1					
ANR	2003836	AdditiveExpression	pitch_index - ( * lag_int << 2 ) + 136		2003802	1		-			
ANR	2003837	Identifier	pitch_index		2003802	0					
ANR	2003838	AdditiveExpression	( * lag_int << 2 ) + 136		2003802	1		+			
ANR	2003839	ShiftExpression	* lag_int << 2		2003802	0		<<			
ANR	2003840	UnaryOperationExpression	* lag_int		2003802	0					
ANR	2003841	UnaryOperator	*		2003802	0					
ANR	2003842	Identifier	lag_int		2003802	1					
ANR	2003843	PrimaryExpression	2		2003802	1					
ANR	2003844	PrimaryExpression	136		2003802	1					
ANR	2003845	ElseStatement	else		2003802	0					
ANR	2003846	IfStatement	if ( pitch_index < 440 )		2003802	0					
ANR	2003847	Condition	pitch_index < 440	15:19:365:381	2003802	0	True				
ANR	2003848	RelationalExpression	pitch_index < 440		2003802	0		<			
ANR	2003849	Identifier	pitch_index		2003802	0					
ANR	2003850	PrimaryExpression	440		2003802	1					
ANR	2003851	CompoundStatement		11:38:230:230	2003802	1					
ANR	2003852	ExpressionStatement	* lag_int = ( pitch_index + 257 - 376 ) >> 1	17:12:399:441	2003802	0	True				
ANR	2003853	AssignmentExpression	* lag_int = ( pitch_index + 257 - 376 ) >> 1		2003802	0		=			
ANR	2003854	UnaryOperationExpression	* lag_int		2003802	0					
ANR	2003855	UnaryOperator	*		2003802	0					
ANR	2003856	Identifier	lag_int		2003802	1					
ANR	2003857	ShiftExpression	( pitch_index + 257 - 376 ) >> 1		2003802	1		>>			
ANR	2003858	AdditiveExpression	pitch_index + 257 - 376		2003802	0		+			
ANR	2003859	Identifier	pitch_index		2003802	0					
ANR	2003860	AdditiveExpression	257 - 376		2003802	1		-			
ANR	2003861	PrimaryExpression	257		2003802	0					
ANR	2003862	PrimaryExpression	376		2003802	1					
ANR	2003863	PrimaryExpression	1		2003802	1					
ANR	2003864	ExpressionStatement	* lag_frac = ( pitch_index - ( * lag_int << 1 ) + 256 - 376 ) << 1	19:12:456:516	2003802	1	True				
ANR	2003865	AssignmentExpression	* lag_frac = ( pitch_index - ( * lag_int << 1 ) + 256 - 376 ) << 1		2003802	0		=			
ANR	2003866	UnaryOperationExpression	* lag_frac		2003802	0					
ANR	2003867	UnaryOperator	*		2003802	0					
ANR	2003868	Identifier	lag_frac		2003802	1					
ANR	2003869	ShiftExpression	( pitch_index - ( * lag_int << 1 ) + 256 - 376 ) << 1		2003802	1		<<			
ANR	2003870	AdditiveExpression	pitch_index - ( * lag_int << 1 ) + 256 - 376		2003802	0		-			
ANR	2003871	Identifier	pitch_index		2003802	0					
ANR	2003872	AdditiveExpression	( * lag_int << 1 ) + 256 - 376		2003802	1		+			
ANR	2003873	ShiftExpression	* lag_int << 1		2003802	0		<<			
ANR	2003874	UnaryOperationExpression	* lag_int		2003802	0					
ANR	2003875	UnaryOperator	*		2003802	0					
ANR	2003876	Identifier	lag_int		2003802	1					
ANR	2003877	PrimaryExpression	1		2003802	1					
ANR	2003878	AdditiveExpression	256 - 376		2003802	1		-			
ANR	2003879	PrimaryExpression	256		2003802	0					
ANR	2003880	PrimaryExpression	376		2003802	1					
ANR	2003881	PrimaryExpression	1		2003802	1					
ANR	2003882	ElseStatement	else		2003802	0					
ANR	2003883	CompoundStatement		19:15:449:449	2003802	0					
ANR	2003884	ExpressionStatement	* lag_int = pitch_index - 280	25:12:618:647	2003802	0	True				
ANR	2003885	AssignmentExpression	* lag_int = pitch_index - 280		2003802	0		=			
ANR	2003886	UnaryOperationExpression	* lag_int		2003802	0					
ANR	2003887	UnaryOperator	*		2003802	0					
ANR	2003888	Identifier	lag_int		2003802	1					
ANR	2003889	AdditiveExpression	pitch_index - 280		2003802	1		-			
ANR	2003890	Identifier	pitch_index		2003802	0					
ANR	2003891	PrimaryExpression	280		2003802	1					
ANR	2003892	ExpressionStatement	* lag_frac = 0	27:12:662:675	2003802	1	True				
ANR	2003893	AssignmentExpression	* lag_frac = 0		2003802	0		=			
ANR	2003894	UnaryOperationExpression	* lag_frac		2003802	0					
ANR	2003895	UnaryOperator	*		2003802	0					
ANR	2003896	Identifier	lag_frac		2003802	1					
ANR	2003897	PrimaryExpression	0		2003802	1					
ANR	2003898	ExpressionStatement	"* base_lag_int = av_clip ( * lag_int - 8 - ( * lag_frac < 0 ) , AMRWB_P_DELAY_MIN , AMRWB_P_DELAY_MAX - 15 )"	33:8:742:873	2003802	1	True				
ANR	2003899	AssignmentExpression	"* base_lag_int = av_clip ( * lag_int - 8 - ( * lag_frac < 0 ) , AMRWB_P_DELAY_MIN , AMRWB_P_DELAY_MAX - 15 )"		2003802	0		=			
ANR	2003900	UnaryOperationExpression	* base_lag_int		2003802	0					
ANR	2003901	UnaryOperator	*		2003802	0					
ANR	2003902	Identifier	base_lag_int		2003802	1					
ANR	2003903	CallExpression	"av_clip ( * lag_int - 8 - ( * lag_frac < 0 ) , AMRWB_P_DELAY_MIN , AMRWB_P_DELAY_MAX - 15 )"		2003802	1					
ANR	2003904	Callee	av_clip		2003802	0					
ANR	2003905	Identifier	av_clip		2003802	0					
ANR	2003906	ArgumentList	* lag_int - 8 - ( * lag_frac < 0 )		2003802	1					
ANR	2003907	Argument	* lag_int - 8 - ( * lag_frac < 0 )		2003802	0					
ANR	2003908	AdditiveExpression	* lag_int - 8 - ( * lag_frac < 0 )		2003802	0		-			
ANR	2003909	UnaryOperationExpression	* lag_int		2003802	0					
ANR	2003910	UnaryOperator	*		2003802	0					
ANR	2003911	Identifier	lag_int		2003802	1					
ANR	2003912	AdditiveExpression	8 - ( * lag_frac < 0 )		2003802	1		-			
ANR	2003913	PrimaryExpression	8		2003802	0					
ANR	2003914	RelationalExpression	* lag_frac < 0		2003802	1		<			
ANR	2003915	UnaryOperationExpression	* lag_frac		2003802	0					
ANR	2003916	UnaryOperator	*		2003802	0					
ANR	2003917	Identifier	lag_frac		2003802	1					
ANR	2003918	PrimaryExpression	0		2003802	1					
ANR	2003919	Argument	AMRWB_P_DELAY_MIN		2003802	1					
ANR	2003920	Identifier	AMRWB_P_DELAY_MIN		2003802	0					
ANR	2003921	Argument	AMRWB_P_DELAY_MAX - 15		2003802	2					
ANR	2003922	AdditiveExpression	AMRWB_P_DELAY_MAX - 15		2003802	0		-			
ANR	2003923	Identifier	AMRWB_P_DELAY_MAX		2003802	0					
ANR	2003924	PrimaryExpression	15		2003802	1					
ANR	2003925	ElseStatement	else		2003802	0					
ANR	2003926	CompoundStatement		39:11:944:944	2003802	0					
ANR	2003927	ExpressionStatement	* lag_int = ( pitch_index + 1 ) >> 2	45:8:1109:1143	2003802	0	True				
ANR	2003928	AssignmentExpression	* lag_int = ( pitch_index + 1 ) >> 2		2003802	0		=			
ANR	2003929	UnaryOperationExpression	* lag_int		2003802	0					
ANR	2003930	UnaryOperator	*		2003802	0					
ANR	2003931	Identifier	lag_int		2003802	1					
ANR	2003932	ShiftExpression	( pitch_index + 1 ) >> 2		2003802	1		>>			
ANR	2003933	AdditiveExpression	pitch_index + 1		2003802	0		+			
ANR	2003934	Identifier	pitch_index		2003802	0					
ANR	2003935	PrimaryExpression	1		2003802	1					
ANR	2003936	PrimaryExpression	2		2003802	1					
ANR	2003937	ExpressionStatement	* lag_frac = pitch_index - ( * lag_int << 2 )	47:8:1154:1195	2003802	1	True				
ANR	2003938	AssignmentExpression	* lag_frac = pitch_index - ( * lag_int << 2 )		2003802	0		=			
ANR	2003939	UnaryOperationExpression	* lag_frac		2003802	0					
ANR	2003940	UnaryOperator	*		2003802	0					
ANR	2003941	Identifier	lag_frac		2003802	1					
ANR	2003942	AdditiveExpression	pitch_index - ( * lag_int << 2 )		2003802	1		-			
ANR	2003943	Identifier	pitch_index		2003802	0					
ANR	2003944	ShiftExpression	* lag_int << 2		2003802	1		<<			
ANR	2003945	UnaryOperationExpression	* lag_int		2003802	0					
ANR	2003946	UnaryOperator	*		2003802	0					
ANR	2003947	Identifier	lag_int		2003802	1					
ANR	2003948	PrimaryExpression	2		2003802	1					
ANR	2003949	ExpressionStatement	* lag_int += * base_lag_int	49:8:1206:1231	2003802	2	True				
ANR	2003950	AssignmentExpression	* lag_int += * base_lag_int		2003802	0		+=			
ANR	2003951	UnaryOperationExpression	* lag_int		2003802	0					
ANR	2003952	UnaryOperator	*		2003802	0					
ANR	2003953	Identifier	lag_int		2003802	1					
ANR	2003954	UnaryOperationExpression	* base_lag_int		2003802	1					
ANR	2003955	UnaryOperator	*		2003802	0					
ANR	2003956	Identifier	base_lag_int		2003802	1					
ANR	2003957	ReturnType	static void		2003802	1					
ANR	2003958	Identifier	decode_pitch_lag_high		2003802	2					
ANR	2003959	ParameterList	"int * lag_int , int * lag_frac , int pitch_index , uint8_t * base_lag_int , int subframe"		2003802	3					
ANR	2003960	Parameter	int * lag_int	1:34:34:45	2003802	0	True				
ANR	2003961	ParameterType	int *		2003802	0					
ANR	2003962	Identifier	lag_int		2003802	1					
ANR	2003963	Parameter	int * lag_frac	1:48:48:60	2003802	1	True				
ANR	2003964	ParameterType	int *		2003802	0					
ANR	2003965	Identifier	lag_frac		2003802	1					
ANR	2003966	Parameter	int pitch_index	1:63:63:77	2003802	2	True				
ANR	2003967	ParameterType	int		2003802	0					
ANR	2003968	Identifier	pitch_index		2003802	1					
ANR	2003969	Parameter	uint8_t * base_lag_int	3:34:115:135	2003802	3	True				
ANR	2003970	ParameterType	uint8_t *		2003802	0					
ANR	2003971	Identifier	base_lag_int		2003802	1					
ANR	2003972	Parameter	int subframe	3:57:138:149	2003802	4	True				
ANR	2003973	ParameterType	int		2003802	0					
ANR	2003974	Identifier	subframe		2003802	1					
ANR	2003975	CFGEntryNode	ENTRY		2003802		True				
ANR	2003976	CFGExitNode	EXIT		2003802		True				
ANR	2003977	Symbol	pitch_index		2003802						
ANR	2003978	Symbol	subframe		2003802						
ANR	2003979	Symbol	AMRWB_P_DELAY_MAX		2003802						
ANR	2003980	Symbol	base_lag_int		2003802						
ANR	2003981	Symbol	lag_frac		2003802						
ANR	2003982	Symbol	* lag_frac		2003802						
ANR	2003983	Symbol	AMRWB_P_DELAY_MIN		2003802						
ANR	2003984	Symbol	* lag_int		2003802						
ANR	2003985	Symbol	* base_lag_int		2003802						
ANR	2003986	Symbol	av_clip		2003802						
ANR	2003987	Symbol	lag_int		2003802						
