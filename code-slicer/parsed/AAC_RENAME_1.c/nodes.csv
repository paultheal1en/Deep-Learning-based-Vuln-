command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1	File	/home/p4ultr4n/workplace/ReVeal/raw_code/AAC_RENAME_1.c								
ANR	2	Function	ff_ps_read_data	1:0:0:5413							
ANR	3	FunctionDef	"ff_ps_read_data (AVCodecContext * avctx , GetBitContext * gb_host , PSContext * ps , int bits_left)"		2	0					
ANR	4	CompoundStatement		3:0:110:5413	2	0					
ANR	5	IdentifierDeclStatement	int e ;	5:4:117:122	2	0	True				
ANR	6	IdentifierDecl	e		2	0					
ANR	7	IdentifierDeclType	int		2	0					
ANR	8	Identifier	e		2	1					
ANR	9	IdentifierDeclStatement	int bit_count_start = get_bits_count ( gb_host ) ;	7:4:129:174	2	1	True				
ANR	10	IdentifierDecl	bit_count_start = get_bits_count ( gb_host )		2	0					
ANR	11	IdentifierDeclType	int		2	0					
ANR	12	Identifier	bit_count_start		2	1					
ANR	13	AssignmentExpression	bit_count_start = get_bits_count ( gb_host )		2	2		=			
ANR	14	Identifier	bit_count_start		2	0					
ANR	15	CallExpression	get_bits_count ( gb_host )		2	1					
ANR	16	Callee	get_bits_count		2	0					
ANR	17	Identifier	get_bits_count		2	0					
ANR	18	ArgumentList	gb_host		2	1					
ANR	19	Argument	gb_host		2	0					
ANR	20	Identifier	gb_host		2	0					
ANR	21	IdentifierDeclStatement	int header ;	9:4:181:191	2	2	True				
ANR	22	IdentifierDecl	header		2	0					
ANR	23	IdentifierDeclType	int		2	0					
ANR	24	Identifier	header		2	1					
ANR	25	IdentifierDeclStatement	int bits_consumed ;	11:4:198:215	2	3	True				
ANR	26	IdentifierDecl	bits_consumed		2	0					
ANR	27	IdentifierDeclType	int		2	0					
ANR	28	Identifier	bits_consumed		2	1					
ANR	29	IdentifierDeclStatement	"GetBitContext gbc = * gb_host , * gb = & gbc ;"	13:4:222:262	2	4	True				
ANR	30	IdentifierDecl	gbc = * gb_host		2	0					
ANR	31	IdentifierDeclType	GetBitContext		2	0					
ANR	32	Identifier	gbc		2	1					
ANR	33	AssignmentExpression	gbc = * gb_host		2	2		=			
ANR	34	Identifier	gbc		2	0					
ANR	35	UnaryOperationExpression	* gb_host		2	1					
ANR	36	UnaryOperator	*		2	0					
ANR	37	Identifier	gb_host		2	1					
ANR	38	IdentifierDecl	* gb = & gbc		2	1					
ANR	39	IdentifierDeclType	GetBitContext *		2	0					
ANR	40	Identifier	gb		2	1					
ANR	41	AssignmentExpression	* gb = & gbc		2	2		=			
ANR	42	Identifier	gb		2	0					
ANR	43	UnaryOperationExpression	& gbc		2	1					
ANR	44	UnaryOperator	&		2	0					
ANR	45	Identifier	gbc		2	1					
ANR	46	ExpressionStatement	header = get_bits1 ( gb )	17:4:271:293	2	5	True				
ANR	47	AssignmentExpression	header = get_bits1 ( gb )		2	0		=			
ANR	48	Identifier	header		2	0					
ANR	49	CallExpression	get_bits1 ( gb )		2	1					
ANR	50	Callee	get_bits1		2	0					
ANR	51	Identifier	get_bits1		2	0					
ANR	52	ArgumentList	gb		2	1					
ANR	53	Argument	gb		2	0					
ANR	54	Identifier	gb		2	0					
ANR	55	IfStatement	if ( header )		2	6					
ANR	56	Condition	header	19:8:304:309	2	0	True				
ANR	57	Identifier	header		2	0					
ANR	58	CompoundStatement		17:16:201:201	2	1					
ANR	59	ExpressionStatement	ps -> enable_iid = get_bits1 ( gb )	21:8:346:376	2	0	True				
ANR	60	AssignmentExpression	ps -> enable_iid = get_bits1 ( gb )		2	0		=			
ANR	61	PtrMemberAccess	ps -> enable_iid		2	0					
ANR	62	Identifier	ps		2	0					
ANR	63	Identifier	enable_iid		2	1					
ANR	64	CallExpression	get_bits1 ( gb )		2	1					
ANR	65	Callee	get_bits1		2	0					
ANR	66	Identifier	get_bits1		2	0					
ANR	67	ArgumentList	gb		2	1					
ANR	68	Argument	gb		2	0					
ANR	69	Identifier	gb		2	0					
ANR	70	IfStatement	if ( ps -> enable_iid )		2	1					
ANR	71	Condition	ps -> enable_iid	23:12:391:404	2	0	True				
ANR	72	PtrMemberAccess	ps -> enable_iid		2	0					
ANR	73	Identifier	ps		2	0					
ANR	74	Identifier	enable_iid		2	1					
ANR	75	CompoundStatement		23:12:311:341	2	1					
ANR	76	IdentifierDeclStatement	"int iid_mode = get_bits ( gb , 3 ) ;"	25:12:422:452	2	0	True				
ANR	77	IdentifierDecl	"iid_mode = get_bits ( gb , 3 )"		2	0					
ANR	78	IdentifierDeclType	int		2	0					
ANR	79	Identifier	iid_mode		2	1					
ANR	80	AssignmentExpression	"iid_mode = get_bits ( gb , 3 )"		2	2		=			
ANR	81	Identifier	iid_mode		2	0					
ANR	82	CallExpression	"get_bits ( gb , 3 )"		2	1					
ANR	83	Callee	get_bits		2	0					
ANR	84	Identifier	get_bits		2	0					
ANR	85	ArgumentList	gb		2	1					
ANR	86	Argument	gb		2	0					
ANR	87	Identifier	gb		2	0					
ANR	88	Argument	3		2	1					
ANR	89	PrimaryExpression	3		2	0					
ANR	90	IfStatement	if ( iid_mode > 5 )		2	1					
ANR	91	Condition	iid_mode > 5	27:16:471:482	2	0	True				
ANR	92	RelationalExpression	iid_mode > 5		2	0		>			
ANR	93	Identifier	iid_mode		2	0					
ANR	94	PrimaryExpression	5		2	1					
ANR	95	CompoundStatement		25:30:374:374	2	1					
ANR	96	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""iid_mode %d is reserved.\\n"" , iid_mode )"	29:16:504:595	2	0	True				
ANR	97	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""iid_mode %d is reserved.\\n"" , iid_mode )"		2	0					
ANR	98	Callee	av_log		2	0					
ANR	99	Identifier	av_log		2	0					
ANR	100	ArgumentList	avctx		2	1					
ANR	101	Argument	avctx		2	0					
ANR	102	Identifier	avctx		2	0					
ANR	103	Argument	AV_LOG_ERROR		2	1					
ANR	104	Identifier	AV_LOG_ERROR		2	0					
ANR	105	Argument	"""iid_mode %d is reserved.\\n"""		2	2					
ANR	106	PrimaryExpression	"""iid_mode %d is reserved.\\n"""		2	0					
ANR	107	Argument	iid_mode		2	3					
ANR	108	Identifier	iid_mode		2	0					
ANR	109	GotoStatement	goto err ;	33:16:614:622	2	1	True				
ANR	110	Identifier	err		2	0					
ANR	111	ExpressionStatement	ps -> nr_iid_par = nr_iidicc_par_tab [ iid_mode ]	37:12:652:699	2	2	True				
ANR	112	AssignmentExpression	ps -> nr_iid_par = nr_iidicc_par_tab [ iid_mode ]		2	0		=			
ANR	113	PtrMemberAccess	ps -> nr_iid_par		2	0					
ANR	114	Identifier	ps		2	0					
ANR	115	Identifier	nr_iid_par		2	1					
ANR	116	ArrayIndexing	nr_iidicc_par_tab [ iid_mode ]		2	1					
ANR	117	Identifier	nr_iidicc_par_tab		2	0					
ANR	118	Identifier	iid_mode		2	1					
ANR	119	ExpressionStatement	ps -> iid_quant = iid_mode > 2	39:12:714:746	2	3	True				
ANR	120	AssignmentExpression	ps -> iid_quant = iid_mode > 2		2	0		=			
ANR	121	PtrMemberAccess	ps -> iid_quant		2	0					
ANR	122	Identifier	ps		2	0					
ANR	123	Identifier	iid_quant		2	1					
ANR	124	RelationalExpression	iid_mode > 2		2	1		>			
ANR	125	Identifier	iid_mode		2	0					
ANR	126	PrimaryExpression	2		2	1					
ANR	127	ExpressionStatement	ps -> nr_ipdopd_par = nr_iidopd_par_tab [ iid_mode ]	41:12:761:808	2	4	True				
ANR	128	AssignmentExpression	ps -> nr_ipdopd_par = nr_iidopd_par_tab [ iid_mode ]		2	0		=			
ANR	129	PtrMemberAccess	ps -> nr_ipdopd_par		2	0					
ANR	130	Identifier	ps		2	0					
ANR	131	Identifier	nr_ipdopd_par		2	1					
ANR	132	ArrayIndexing	nr_iidopd_par_tab [ iid_mode ]		2	1					
ANR	133	Identifier	nr_iidopd_par_tab		2	0					
ANR	134	Identifier	iid_mode		2	1					
ANR	135	ExpressionStatement	ps -> enable_icc = get_bits1 ( gb )	45:8:830:860	2	2	True				
ANR	136	AssignmentExpression	ps -> enable_icc = get_bits1 ( gb )		2	0		=			
ANR	137	PtrMemberAccess	ps -> enable_icc		2	0					
ANR	138	Identifier	ps		2	0					
ANR	139	Identifier	enable_icc		2	1					
ANR	140	CallExpression	get_bits1 ( gb )		2	1					
ANR	141	Callee	get_bits1		2	0					
ANR	142	Identifier	get_bits1		2	0					
ANR	143	ArgumentList	gb		2	1					
ANR	144	Argument	gb		2	0					
ANR	145	Identifier	gb		2	0					
ANR	146	IfStatement	if ( ps -> enable_icc )		2	3					
ANR	147	Condition	ps -> enable_icc	47:12:875:888	2	0	True				
ANR	148	PtrMemberAccess	ps -> enable_icc		2	0					
ANR	149	Identifier	ps		2	0					
ANR	150	Identifier	enable_icc		2	1					
ANR	151	CompoundStatement		45:28:780:780	2	1					
ANR	152	ExpressionStatement	"ps -> icc_mode = get_bits ( gb , 3 )"	49:12:906:936	2	0	True				
ANR	153	AssignmentExpression	"ps -> icc_mode = get_bits ( gb , 3 )"		2	0		=			
ANR	154	PtrMemberAccess	ps -> icc_mode		2	0					
ANR	155	Identifier	ps		2	0					
ANR	156	Identifier	icc_mode		2	1					
ANR	157	CallExpression	"get_bits ( gb , 3 )"		2	1					
ANR	158	Callee	get_bits		2	0					
ANR	159	Identifier	get_bits		2	0					
ANR	160	ArgumentList	gb		2	1					
ANR	161	Argument	gb		2	0					
ANR	162	Identifier	gb		2	0					
ANR	163	Argument	3		2	1					
ANR	164	PrimaryExpression	3		2	0					
ANR	165	IfStatement	if ( ps -> icc_mode > 5 )		2	1					
ANR	166	Condition	ps -> icc_mode > 5	51:16:955:970	2	0	True				
ANR	167	RelationalExpression	ps -> icc_mode > 5		2	0		>			
ANR	168	PtrMemberAccess	ps -> icc_mode		2	0					
ANR	169	Identifier	ps		2	0					
ANR	170	Identifier	icc_mode		2	1					
ANR	171	PrimaryExpression	5		2	1					
ANR	172	CompoundStatement		49:34:862:862	2	1					
ANR	173	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""icc_mode %d is reserved.\\n"" , ps -> icc_mode )"	53:16:992:1087	2	0	True				
ANR	174	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""icc_mode %d is reserved.\\n"" , ps -> icc_mode )"		2	0					
ANR	175	Callee	av_log		2	0					
ANR	176	Identifier	av_log		2	0					
ANR	177	ArgumentList	avctx		2	1					
ANR	178	Argument	avctx		2	0					
ANR	179	Identifier	avctx		2	0					
ANR	180	Argument	AV_LOG_ERROR		2	1					
ANR	181	Identifier	AV_LOG_ERROR		2	0					
ANR	182	Argument	"""icc_mode %d is reserved.\\n"""		2	2					
ANR	183	PrimaryExpression	"""icc_mode %d is reserved.\\n"""		2	0					
ANR	184	Argument	ps -> icc_mode		2	3					
ANR	185	PtrMemberAccess	ps -> icc_mode		2	0					
ANR	186	Identifier	ps		2	0					
ANR	187	Identifier	icc_mode		2	1					
ANR	188	GotoStatement	goto err ;	57:16:1106:1114	2	1	True				
ANR	189	Identifier	err		2	0					
ANR	190	ExpressionStatement	ps -> nr_icc_par = nr_iidicc_par_tab [ ps -> icc_mode ]	61:12:1144:1192	2	2	True				
ANR	191	AssignmentExpression	ps -> nr_icc_par = nr_iidicc_par_tab [ ps -> icc_mode ]		2	0		=			
ANR	192	PtrMemberAccess	ps -> nr_icc_par		2	0					
ANR	193	Identifier	ps		2	0					
ANR	194	Identifier	nr_icc_par		2	1					
ANR	195	ArrayIndexing	nr_iidicc_par_tab [ ps -> icc_mode ]		2	1					
ANR	196	Identifier	nr_iidicc_par_tab		2	0					
ANR	197	PtrMemberAccess	ps -> icc_mode		2	1					
ANR	198	Identifier	ps		2	0					
ANR	199	Identifier	icc_mode		2	1					
ANR	200	ExpressionStatement	ps -> enable_ext = get_bits1 ( gb )	65:8:1214:1244	2	4	True				
ANR	201	AssignmentExpression	ps -> enable_ext = get_bits1 ( gb )		2	0		=			
ANR	202	PtrMemberAccess	ps -> enable_ext		2	0					
ANR	203	Identifier	ps		2	0					
ANR	204	Identifier	enable_ext		2	1					
ANR	205	CallExpression	get_bits1 ( gb )		2	1					
ANR	206	Callee	get_bits1		2	0					
ANR	207	Identifier	get_bits1		2	0					
ANR	208	ArgumentList	gb		2	1					
ANR	209	Argument	gb		2	0					
ANR	210	Identifier	gb		2	0					
ANR	211	ExpressionStatement	ps -> frame_class = get_bits1 ( gb )	71:4:1260:1291	2	7	True				
ANR	212	AssignmentExpression	ps -> frame_class = get_bits1 ( gb )		2	0		=			
ANR	213	PtrMemberAccess	ps -> frame_class		2	0					
ANR	214	Identifier	ps		2	0					
ANR	215	Identifier	frame_class		2	1					
ANR	216	CallExpression	get_bits1 ( gb )		2	1					
ANR	217	Callee	get_bits1		2	0					
ANR	218	Identifier	get_bits1		2	0					
ANR	219	ArgumentList	gb		2	1					
ANR	220	Argument	gb		2	0					
ANR	221	Identifier	gb		2	0					
ANR	222	ExpressionStatement	ps -> num_env_old = ps -> num_env	73:4:1298:1327	2	8	True				
ANR	223	AssignmentExpression	ps -> num_env_old = ps -> num_env		2	0		=			
ANR	224	PtrMemberAccess	ps -> num_env_old		2	0					
ANR	225	Identifier	ps		2	0					
ANR	226	Identifier	num_env_old		2	1					
ANR	227	PtrMemberAccess	ps -> num_env		2	1					
ANR	228	Identifier	ps		2	0					
ANR	229	Identifier	num_env		2	1					
ANR	230	ExpressionStatement	"ps -> num_env = num_env_tab [ ps -> frame_class ] [ get_bits ( gb , 2 ) ]"	75:4:1334:1397	2	9	True				
ANR	231	AssignmentExpression	"ps -> num_env = num_env_tab [ ps -> frame_class ] [ get_bits ( gb , 2 ) ]"		2	0		=			
ANR	232	PtrMemberAccess	ps -> num_env		2	0					
ANR	233	Identifier	ps		2	0					
ANR	234	Identifier	num_env		2	1					
ANR	235	ArrayIndexing	"num_env_tab [ ps -> frame_class ] [ get_bits ( gb , 2 ) ]"		2	1					
ANR	236	ArrayIndexing	num_env_tab [ ps -> frame_class ]		2	0					
ANR	237	Identifier	num_env_tab		2	0					
ANR	238	PtrMemberAccess	ps -> frame_class		2	1					
ANR	239	Identifier	ps		2	0					
ANR	240	Identifier	frame_class		2	1					
ANR	241	CallExpression	"get_bits ( gb , 2 )"		2	1					
ANR	242	Callee	get_bits		2	0					
ANR	243	Identifier	get_bits		2	0					
ANR	244	ArgumentList	gb		2	1					
ANR	245	Argument	gb		2	0					
ANR	246	Identifier	gb		2	0					
ANR	247	Argument	2		2	1					
ANR	248	PrimaryExpression	2		2	0					
ANR	249	ExpressionStatement	ps -> border_position [ 0 ] = - 1	79:4:1406:1433	2	10	True				
ANR	250	AssignmentExpression	ps -> border_position [ 0 ] = - 1		2	0		=			
ANR	251	ArrayIndexing	ps -> border_position [ 0 ]		2	0					
ANR	252	PtrMemberAccess	ps -> border_position		2	0					
ANR	253	Identifier	ps		2	0					
ANR	254	Identifier	border_position		2	1					
ANR	255	PrimaryExpression	0		2	1					
ANR	256	UnaryOperationExpression	- 1		2	1					
ANR	257	UnaryOperator	-		2	0					
ANR	258	PrimaryExpression	1		2	1					
ANR	259	IfStatement	if ( ps -> frame_class )		2	11					
ANR	260	Condition	ps -> frame_class	81:8:1444:1458	2	0	True				
ANR	261	PtrMemberAccess	ps -> frame_class		2	0					
ANR	262	Identifier	ps		2	0					
ANR	263	Identifier	frame_class		2	1					
ANR	264	CompoundStatement		79:25:1350:1350	2	1					
ANR	265	ForStatement	for ( e = 1 ; e <= ps -> num_env ; e ++ )		2	0					
ANR	266	ForInit	e = 1 ;	83:13:1477:1482	2	0	True				
ANR	267	AssignmentExpression	e = 1		2	0		=			
ANR	268	Identifier	e		2	0					
ANR	269	PrimaryExpression	1		2	1					
ANR	270	Condition	e <= ps -> num_env	83:20:1484:1499	2	1	True				
ANR	271	RelationalExpression	e <= ps -> num_env		2	0		<=			
ANR	272	Identifier	e		2	0					
ANR	273	PtrMemberAccess	ps -> num_env		2	1					
ANR	274	Identifier	ps		2	0					
ANR	275	Identifier	num_env		2	1					
ANR	276	PostIncDecOperationExpression	e ++	83:38:1502:1504	2	2	True				
ANR	277	Identifier	e		2	0					
ANR	278	IncDec	++		2	1					
ANR	279	ExpressionStatement	"ps -> border_position [ e ] = get_bits ( gb , 5 )"	85:12:1520:1560	2	3	True				
ANR	280	AssignmentExpression	"ps -> border_position [ e ] = get_bits ( gb , 5 )"		2	0		=			
ANR	281	ArrayIndexing	ps -> border_position [ e ]		2	0					
ANR	282	PtrMemberAccess	ps -> border_position		2	0					
ANR	283	Identifier	ps		2	0					
ANR	284	Identifier	border_position		2	1					
ANR	285	Identifier	e		2	1					
ANR	286	CallExpression	"get_bits ( gb , 5 )"		2	1					
ANR	287	Callee	get_bits		2	0					
ANR	288	Identifier	get_bits		2	0					
ANR	289	ArgumentList	gb		2	1					
ANR	290	Argument	gb		2	0					
ANR	291	Identifier	gb		2	0					
ANR	292	Argument	5		2	1					
ANR	293	PrimaryExpression	5		2	0					
ANR	294	ElseStatement	else		2	0					
ANR	295	ForStatement	for ( e = 1 ; e <= ps -> num_env ; e ++ )		2	0					
ANR	296	ForInit	e = 1 ;	89:13:1588:1593	2	0	True				
ANR	297	AssignmentExpression	e = 1		2	0		=			
ANR	298	Identifier	e		2	0					
ANR	299	PrimaryExpression	1		2	1					
ANR	300	Condition	e <= ps -> num_env	89:20:1595:1610	2	1	True				
ANR	301	RelationalExpression	e <= ps -> num_env		2	0		<=			
ANR	302	Identifier	e		2	0					
ANR	303	PtrMemberAccess	ps -> num_env		2	1					
ANR	304	Identifier	ps		2	0					
ANR	305	Identifier	num_env		2	1					
ANR	306	PostIncDecOperationExpression	e ++	89:38:1613:1615	2	2	True				
ANR	307	Identifier	e		2	0					
ANR	308	IncDec	++		2	1					
ANR	309	ExpressionStatement	ps -> border_position [ e ] = ( e * numQMFSlots >> ff_log2_tab [ ps -> num_env ] ) - 1	91:12:1631:1705	2	3	True				
ANR	310	AssignmentExpression	ps -> border_position [ e ] = ( e * numQMFSlots >> ff_log2_tab [ ps -> num_env ] ) - 1		2	0		=			
ANR	311	ArrayIndexing	ps -> border_position [ e ]		2	0					
ANR	312	PtrMemberAccess	ps -> border_position		2	0					
ANR	313	Identifier	ps		2	0					
ANR	314	Identifier	border_position		2	1					
ANR	315	Identifier	e		2	1					
ANR	316	AdditiveExpression	( e * numQMFSlots >> ff_log2_tab [ ps -> num_env ] ) - 1		2	1		-			
ANR	317	ShiftExpression	e * numQMFSlots >> ff_log2_tab [ ps -> num_env ]		2	0		>>			
ANR	318	MultiplicativeExpression	e * numQMFSlots		2	0		*			
ANR	319	Identifier	e		2	0					
ANR	320	Identifier	numQMFSlots		2	1					
ANR	321	ArrayIndexing	ff_log2_tab [ ps -> num_env ]		2	1					
ANR	322	Identifier	ff_log2_tab		2	0					
ANR	323	PtrMemberAccess	ps -> num_env		2	1					
ANR	324	Identifier	ps		2	0					
ANR	325	Identifier	num_env		2	1					
ANR	326	PrimaryExpression	1		2	1					
ANR	327	IfStatement	if ( ps -> enable_iid )		2	12					
ANR	328	Condition	ps -> enable_iid	95:8:1718:1731	2	0	True				
ANR	329	PtrMemberAccess	ps -> enable_iid		2	0					
ANR	330	Identifier	ps		2	0					
ANR	331	Identifier	enable_iid		2	1					
ANR	332	CompoundStatement		93:24:1623:1623	2	1					
ANR	333	ForStatement	for ( e = 0 ; e < ps -> num_env ; e ++ )		2	0					
ANR	334	ForInit	e = 0 ;	97:13:1750:1755	2	0	True				
ANR	335	AssignmentExpression	e = 0		2	0		=			
ANR	336	Identifier	e		2	0					
ANR	337	PrimaryExpression	0		2	1					
ANR	338	Condition	e < ps -> num_env	97:20:1757:1771	2	1	True				
ANR	339	RelationalExpression	e < ps -> num_env		2	0		<			
ANR	340	Identifier	e		2	0					
ANR	341	PtrMemberAccess	ps -> num_env		2	1					
ANR	342	Identifier	ps		2	0					
ANR	343	Identifier	num_env		2	1					
ANR	344	PostIncDecOperationExpression	e ++	97:37:1774:1776	2	2	True				
ANR	345	Identifier	e		2	0					
ANR	346	IncDec	++		2	1					
ANR	347	CompoundStatement		97:12:1683:1705	2	3					
ANR	348	IdentifierDeclStatement	int dt = get_bits1 ( gb ) ;	99:12:1794:1816	2	0	True				
ANR	349	IdentifierDecl	dt = get_bits1 ( gb )		2	0					
ANR	350	IdentifierDeclType	int		2	0					
ANR	351	Identifier	dt		2	1					
ANR	352	AssignmentExpression	dt = get_bits1 ( gb )		2	2		=			
ANR	353	Identifier	dt		2	0					
ANR	354	CallExpression	get_bits1 ( gb )		2	1					
ANR	355	Callee	get_bits1		2	0					
ANR	356	Identifier	get_bits1		2	0					
ANR	357	ArgumentList	gb		2	1					
ANR	358	Argument	gb		2	0					
ANR	359	Identifier	gb		2	0					
ANR	360	IfStatement	"if ( read_iid_data ( avctx , gb , ps , ps -> iid_par , huff_iid [ 2 * dt + ps -> iid_quant ] , e , dt ) )"		2	1					
ANR	361	Condition	"read_iid_data ( avctx , gb , ps , ps -> iid_par , huff_iid [ 2 * dt + ps -> iid_quant ] , e , dt )"	101:16:1835:1912	2	0	True				
ANR	362	CallExpression	"read_iid_data ( avctx , gb , ps , ps -> iid_par , huff_iid [ 2 * dt + ps -> iid_quant ] , e , dt )"		2	0					
ANR	363	Callee	read_iid_data		2	0					
ANR	364	Identifier	read_iid_data		2	0					
ANR	365	ArgumentList	avctx		2	1					
ANR	366	Argument	avctx		2	0					
ANR	367	Identifier	avctx		2	0					
ANR	368	Argument	gb		2	1					
ANR	369	Identifier	gb		2	0					
ANR	370	Argument	ps		2	2					
ANR	371	Identifier	ps		2	0					
ANR	372	Argument	ps -> iid_par		2	3					
ANR	373	PtrMemberAccess	ps -> iid_par		2	0					
ANR	374	Identifier	ps		2	0					
ANR	375	Identifier	iid_par		2	1					
ANR	376	Argument	huff_iid [ 2 * dt + ps -> iid_quant ]		2	4					
ANR	377	ArrayIndexing	huff_iid [ 2 * dt + ps -> iid_quant ]		2	0					
ANR	378	Identifier	huff_iid		2	0					
ANR	379	AdditiveExpression	2 * dt + ps -> iid_quant		2	1		+			
ANR	380	MultiplicativeExpression	2 * dt		2	0		*			
ANR	381	PrimaryExpression	2		2	0					
ANR	382	Identifier	dt		2	1					
ANR	383	PtrMemberAccess	ps -> iid_quant		2	1					
ANR	384	Identifier	ps		2	0					
ANR	385	Identifier	iid_quant		2	1					
ANR	386	Argument	e		2	5					
ANR	387	Identifier	e		2	0					
ANR	388	Argument	dt		2	6					
ANR	389	Identifier	dt		2	0					
ANR	390	GotoStatement	goto err ;	103:16:1932:1940	2	1	True				
ANR	391	Identifier	err		2	0					
ANR	392	ElseStatement	else		2	0					
ANR	393	ExpressionStatement	"memset ( ps -> iid_par , 0 , sizeof ( ps -> iid_par ) )"	109:8:1974:2017	2	0	True				
ANR	394	CallExpression	"memset ( ps -> iid_par , 0 , sizeof ( ps -> iid_par ) )"		2	0					
ANR	395	Callee	memset		2	0					
ANR	396	Identifier	memset		2	0					
ANR	397	ArgumentList	ps -> iid_par		2	1					
ANR	398	Argument	ps -> iid_par		2	0					
ANR	399	PtrMemberAccess	ps -> iid_par		2	0					
ANR	400	Identifier	ps		2	0					
ANR	401	Identifier	iid_par		2	1					
ANR	402	Argument	0		2	1					
ANR	403	PrimaryExpression	0		2	0					
ANR	404	Argument	sizeof ( ps -> iid_par )		2	2					
ANR	405	SizeofExpression	sizeof ( ps -> iid_par )		2	0					
ANR	406	Sizeof	sizeof		2	0					
ANR	407	PtrMemberAccess	ps -> iid_par		2	1					
ANR	408	Identifier	ps		2	0					
ANR	409	Identifier	iid_par		2	1					
ANR	410	IfStatement	if ( ps -> enable_icc )		2	13					
ANR	411	Condition	ps -> enable_icc	113:8:2030:2043	2	0	True				
ANR	412	PtrMemberAccess	ps -> enable_icc		2	0					
ANR	413	Identifier	ps		2	0					
ANR	414	Identifier	enable_icc		2	1					
ANR	415	ForStatement	for ( e = 0 ; e < ps -> num_env ; e ++ )		2	1					
ANR	416	ForInit	e = 0 ;	115:13:2060:2065	2	0	True				
ANR	417	AssignmentExpression	e = 0		2	0		=			
ANR	418	Identifier	e		2	0					
ANR	419	PrimaryExpression	0		2	1					
ANR	420	Condition	e < ps -> num_env	115:20:2067:2081	2	1	True				
ANR	421	RelationalExpression	e < ps -> num_env		2	0		<			
ANR	422	Identifier	e		2	0					
ANR	423	PtrMemberAccess	ps -> num_env		2	1					
ANR	424	Identifier	ps		2	0					
ANR	425	Identifier	num_env		2	1					
ANR	426	PostIncDecOperationExpression	e ++	115:37:2084:2086	2	2	True				
ANR	427	Identifier	e		2	0					
ANR	428	IncDec	++		2	1					
ANR	429	CompoundStatement		115:12:1993:2015	2	3					
ANR	430	IdentifierDeclStatement	int dt = get_bits1 ( gb ) ;	117:12:2104:2126	2	0	True				
ANR	431	IdentifierDecl	dt = get_bits1 ( gb )		2	0					
ANR	432	IdentifierDeclType	int		2	0					
ANR	433	Identifier	dt		2	1					
ANR	434	AssignmentExpression	dt = get_bits1 ( gb )		2	2		=			
ANR	435	Identifier	dt		2	0					
ANR	436	CallExpression	get_bits1 ( gb )		2	1					
ANR	437	Callee	get_bits1		2	0					
ANR	438	Identifier	get_bits1		2	0					
ANR	439	ArgumentList	gb		2	1					
ANR	440	Argument	gb		2	0					
ANR	441	Identifier	gb		2	0					
ANR	442	IfStatement	"if ( read_icc_data ( avctx , gb , ps , ps -> icc_par , dt ? huff_icc_dt : huff_icc_df , e , dt ) )"		2	1					
ANR	443	Condition	"read_icc_data ( avctx , gb , ps , ps -> icc_par , dt ? huff_icc_dt : huff_icc_df , e , dt )"	119:16:2145:2224	2	0	True				
ANR	444	CallExpression	"read_icc_data ( avctx , gb , ps , ps -> icc_par , dt ? huff_icc_dt : huff_icc_df , e , dt )"		2	0					
ANR	445	Callee	read_icc_data		2	0					
ANR	446	Identifier	read_icc_data		2	0					
ANR	447	ArgumentList	avctx		2	1					
ANR	448	Argument	avctx		2	0					
ANR	449	Identifier	avctx		2	0					
ANR	450	Argument	gb		2	1					
ANR	451	Identifier	gb		2	0					
ANR	452	Argument	ps		2	2					
ANR	453	Identifier	ps		2	0					
ANR	454	Argument	ps -> icc_par		2	3					
ANR	455	PtrMemberAccess	ps -> icc_par		2	0					
ANR	456	Identifier	ps		2	0					
ANR	457	Identifier	icc_par		2	1					
ANR	458	Argument	dt ? huff_icc_dt : huff_icc_df		2	4					
ANR	459	ConditionalExpression	dt ? huff_icc_dt : huff_icc_df		2	0					
ANR	460	Condition	dt		2	0					
ANR	461	Identifier	dt		2	0					
ANR	462	Identifier	huff_icc_dt		2	1					
ANR	463	Identifier	huff_icc_df		2	2					
ANR	464	Argument	e		2	5					
ANR	465	Identifier	e		2	0					
ANR	466	Argument	dt		2	6					
ANR	467	Identifier	dt		2	0					
ANR	468	GotoStatement	goto err ;	121:16:2244:2252	2	1	True				
ANR	469	Identifier	err		2	0					
ANR	470	ElseStatement	else		2	0					
ANR	471	ExpressionStatement	"memset ( ps -> icc_par , 0 , sizeof ( ps -> icc_par ) )"	127:8:2284:2327	2	0	True				
ANR	472	CallExpression	"memset ( ps -> icc_par , 0 , sizeof ( ps -> icc_par ) )"		2	0					
ANR	473	Callee	memset		2	0					
ANR	474	Identifier	memset		2	0					
ANR	475	ArgumentList	ps -> icc_par		2	1					
ANR	476	Argument	ps -> icc_par		2	0					
ANR	477	PtrMemberAccess	ps -> icc_par		2	0					
ANR	478	Identifier	ps		2	0					
ANR	479	Identifier	icc_par		2	1					
ANR	480	Argument	0		2	1					
ANR	481	PrimaryExpression	0		2	0					
ANR	482	Argument	sizeof ( ps -> icc_par )		2	2					
ANR	483	SizeofExpression	sizeof ( ps -> icc_par )		2	0					
ANR	484	Sizeof	sizeof		2	0					
ANR	485	PtrMemberAccess	ps -> icc_par		2	1					
ANR	486	Identifier	ps		2	0					
ANR	487	Identifier	icc_par		2	1					
ANR	488	IfStatement	if ( ps -> enable_ext )		2	14					
ANR	489	Condition	ps -> enable_ext	131:8:2340:2353	2	0	True				
ANR	490	PtrMemberAccess	ps -> enable_ext		2	0					
ANR	491	Identifier	ps		2	0					
ANR	492	Identifier	enable_ext		2	1					
ANR	493	CompoundStatement		131:8:2256:2281	2	1					
ANR	494	IdentifierDeclStatement	"int cnt = get_bits ( gb , 4 ) ;"	133:8:2367:2392	2	0	True				
ANR	495	IdentifierDecl	"cnt = get_bits ( gb , 4 )"		2	0					
ANR	496	IdentifierDeclType	int		2	0					
ANR	497	Identifier	cnt		2	1					
ANR	498	AssignmentExpression	"cnt = get_bits ( gb , 4 )"		2	2		=			
ANR	499	Identifier	cnt		2	0					
ANR	500	CallExpression	"get_bits ( gb , 4 )"		2	1					
ANR	501	Callee	get_bits		2	0					
ANR	502	Identifier	get_bits		2	0					
ANR	503	ArgumentList	gb		2	1					
ANR	504	Argument	gb		2	0					
ANR	505	Identifier	gb		2	0					
ANR	506	Argument	4		2	1					
ANR	507	PrimaryExpression	4		2	0					
ANR	508	IfStatement	if ( cnt == 15 )		2	1					
ANR	509	Condition	cnt == 15	135:12:2407:2415	2	0	True				
ANR	510	EqualityExpression	cnt == 15		2	0		==			
ANR	511	Identifier	cnt		2	0					
ANR	512	PrimaryExpression	15		2	1					
ANR	513	CompoundStatement		133:23:2307:2307	2	1					
ANR	514	ExpressionStatement	"cnt += get_bits ( gb , 8 )"	137:12:2433:2455	2	0	True				
ANR	515	AssignmentExpression	"cnt += get_bits ( gb , 8 )"		2	0		+=			
ANR	516	Identifier	cnt		2	0					
ANR	517	CallExpression	"get_bits ( gb , 8 )"		2	1					
ANR	518	Callee	get_bits		2	0					
ANR	519	Identifier	get_bits		2	0					
ANR	520	ArgumentList	gb		2	1					
ANR	521	Argument	gb		2	0					
ANR	522	Identifier	gb		2	0					
ANR	523	Argument	8		2	1					
ANR	524	PrimaryExpression	8		2	0					
ANR	525	ExpressionStatement	cnt *= 8	141:8:2477:2485	2	2	True				
ANR	526	AssignmentExpression	cnt *= 8		2	0		*=			
ANR	527	Identifier	cnt		2	0					
ANR	528	PrimaryExpression	8		2	1					
ANR	529	WhileStatement	while ( cnt > 7 )		2	3					
ANR	530	Condition	cnt > 7	143:15:2503:2509	2	0	True				
ANR	531	RelationalExpression	cnt > 7		2	0		>			
ANR	532	Identifier	cnt		2	0					
ANR	533	PrimaryExpression	7		2	1					
ANR	534	CompoundStatement		143:12:2416:2453	2	1					
ANR	535	IdentifierDeclStatement	"int ps_extension_id = get_bits ( gb , 2 ) ;"	145:12:2527:2564	2	0	True				
ANR	536	IdentifierDecl	"ps_extension_id = get_bits ( gb , 2 )"		2	0					
ANR	537	IdentifierDeclType	int		2	0					
ANR	538	Identifier	ps_extension_id		2	1					
ANR	539	AssignmentExpression	"ps_extension_id = get_bits ( gb , 2 )"		2	2		=			
ANR	540	Identifier	ps_extension_id		2	0					
ANR	541	CallExpression	"get_bits ( gb , 2 )"		2	1					
ANR	542	Callee	get_bits		2	0					
ANR	543	Identifier	get_bits		2	0					
ANR	544	ArgumentList	gb		2	1					
ANR	545	Argument	gb		2	0					
ANR	546	Identifier	gb		2	0					
ANR	547	Argument	2		2	1					
ANR	548	PrimaryExpression	2		2	0					
ANR	549	ExpressionStatement	"cnt -= 2 + ps_read_extension_data ( gb , ps , ps_extension_id )"	147:12:2579:2637	2	1	True				
ANR	550	AssignmentExpression	"cnt -= 2 + ps_read_extension_data ( gb , ps , ps_extension_id )"		2	0		-=			
ANR	551	Identifier	cnt		2	0					
ANR	552	AdditiveExpression	"2 + ps_read_extension_data ( gb , ps , ps_extension_id )"		2	1		+			
ANR	553	PrimaryExpression	2		2	0					
ANR	554	CallExpression	"ps_read_extension_data ( gb , ps , ps_extension_id )"		2	1					
ANR	555	Callee	ps_read_extension_data		2	0					
ANR	556	Identifier	ps_read_extension_data		2	0					
ANR	557	ArgumentList	gb		2	1					
ANR	558	Argument	gb		2	0					
ANR	559	Identifier	gb		2	0					
ANR	560	Argument	ps		2	1					
ANR	561	Identifier	ps		2	0					
ANR	562	Argument	ps_extension_id		2	2					
ANR	563	Identifier	ps_extension_id		2	0					
ANR	564	IfStatement	if ( cnt < 0 )		2	4					
ANR	565	Condition	cnt < 0	151:12:2663:2669	2	0	True				
ANR	566	RelationalExpression	cnt < 0		2	0		<			
ANR	567	Identifier	cnt		2	0					
ANR	568	PrimaryExpression	0		2	1					
ANR	569	CompoundStatement		149:21:2561:2561	2	1					
ANR	570	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""ps extension overflow %d\\n"" , cnt )"	153:12:2687:2749	2	0	True				
ANR	571	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""ps extension overflow %d\\n"" , cnt )"		2	0					
ANR	572	Callee	av_log		2	0					
ANR	573	Identifier	av_log		2	0					
ANR	574	ArgumentList	avctx		2	1					
ANR	575	Argument	avctx		2	0					
ANR	576	Identifier	avctx		2	0					
ANR	577	Argument	AV_LOG_ERROR		2	1					
ANR	578	Identifier	AV_LOG_ERROR		2	0					
ANR	579	Argument	"""ps extension overflow %d\\n"""		2	2					
ANR	580	PrimaryExpression	"""ps extension overflow %d\\n"""		2	0					
ANR	581	Argument	cnt		2	3					
ANR	582	Identifier	cnt		2	0					
ANR	583	GotoStatement	goto err ;	155:12:2764:2772	2	1	True				
ANR	584	Identifier	err		2	0					
ANR	585	ExpressionStatement	"skip_bits ( gb , cnt )"	159:8:2794:2812	2	5	True				
ANR	586	CallExpression	"skip_bits ( gb , cnt )"		2	0					
ANR	587	Callee	skip_bits		2	0					
ANR	588	Identifier	skip_bits		2	0					
ANR	589	ArgumentList	gb		2	1					
ANR	590	Argument	gb		2	0					
ANR	591	Identifier	gb		2	0					
ANR	592	Argument	cnt		2	1					
ANR	593	Identifier	cnt		2	0					
ANR	594	ExpressionStatement	ps -> enable_ipdopd &= ! PS_BASELINE	165:4:2828:2861	2	15	True				
ANR	595	AssignmentExpression	ps -> enable_ipdopd &= ! PS_BASELINE		2	0		&=			
ANR	596	PtrMemberAccess	ps -> enable_ipdopd		2	0					
ANR	597	Identifier	ps		2	0					
ANR	598	Identifier	enable_ipdopd		2	1					
ANR	599	UnaryOperationExpression	! PS_BASELINE		2	1					
ANR	600	UnaryOperator	!		2	0					
ANR	601	Identifier	PS_BASELINE		2	1					
ANR	602	IfStatement	if ( ! ps -> num_env || ps -> border_position [ ps -> num_env ] < numQMFSlots - 1 )		2	16					
ANR	603	Condition	! ps -> num_env || ps -> border_position [ ps -> num_env ] < numQMFSlots - 1	171:8:2898:2963	2	0	True				
ANR	604	OrExpression	! ps -> num_env || ps -> border_position [ ps -> num_env ] < numQMFSlots - 1		2	0		||			
ANR	605	UnaryOperationExpression	! ps -> num_env		2	0					
ANR	606	UnaryOperator	!		2	0					
ANR	607	PtrMemberAccess	ps -> num_env		2	1					
ANR	608	Identifier	ps		2	0					
ANR	609	Identifier	num_env		2	1					
ANR	610	RelationalExpression	ps -> border_position [ ps -> num_env ] < numQMFSlots - 1		2	1		<			
ANR	611	ArrayIndexing	ps -> border_position [ ps -> num_env ]		2	0					
ANR	612	PtrMemberAccess	ps -> border_position		2	0					
ANR	613	Identifier	ps		2	0					
ANR	614	Identifier	border_position		2	1					
ANR	615	PtrMemberAccess	ps -> num_env		2	1					
ANR	616	Identifier	ps		2	0					
ANR	617	Identifier	num_env		2	1					
ANR	618	AdditiveExpression	numQMFSlots - 1		2	1		-			
ANR	619	Identifier	numQMFSlots		2	0					
ANR	620	PrimaryExpression	1		2	1					
ANR	621	CompoundStatement		175:8:2975:2980	2	1					
ANR	622	IdentifierDeclStatement	int source = ps -> num_env ? ps -> num_env - 1 : ps -> num_env_old - 1 ;	175:8:3011:3075	2	0	True				
ANR	623	IdentifierDecl	source = ps -> num_env ? ps -> num_env - 1 : ps -> num_env_old - 1		2	0					
ANR	624	IdentifierDeclType	int		2	0					
ANR	625	Identifier	source		2	1					
ANR	626	AssignmentExpression	source = ps -> num_env ? ps -> num_env - 1 : ps -> num_env_old - 1		2	2		=			
ANR	627	Identifier	source		2	0					
ANR	628	ConditionalExpression	ps -> num_env ? ps -> num_env - 1 : ps -> num_env_old - 1		2	1					
ANR	629	Condition	ps -> num_env		2	0					
ANR	630	PtrMemberAccess	ps -> num_env		2	0					
ANR	631	Identifier	ps		2	0					
ANR	632	Identifier	num_env		2	1					
ANR	633	AdditiveExpression	ps -> num_env - 1		2	1		-			
ANR	634	PtrMemberAccess	ps -> num_env		2	0					
ANR	635	Identifier	ps		2	0					
ANR	636	Identifier	num_env		2	1					
ANR	637	PrimaryExpression	1		2	1					
ANR	638	AdditiveExpression	ps -> num_env_old - 1		2	2		-			
ANR	639	PtrMemberAccess	ps -> num_env_old		2	0					
ANR	640	Identifier	ps		2	0					
ANR	641	Identifier	num_env_old		2	1					
ANR	642	PrimaryExpression	1		2	1					
ANR	643	IdentifierDeclStatement	int b ;	177:8:3086:3091	2	1	True				
ANR	644	IdentifierDecl	b		2	0					
ANR	645	IdentifierDeclType	int		2	0					
ANR	646	Identifier	b		2	1					
ANR	647	IfStatement	if ( source >= 0 && source != ps -> num_env )		2	2					
ANR	648	Condition	source >= 0 && source != ps -> num_env	179:12:3106:3141	2	0	True				
ANR	649	AndExpression	source >= 0 && source != ps -> num_env		2	0		&&			
ANR	650	RelationalExpression	source >= 0		2	0		>=			
ANR	651	Identifier	source		2	0					
ANR	652	PrimaryExpression	0		2	1					
ANR	653	EqualityExpression	source != ps -> num_env		2	1		!=			
ANR	654	Identifier	source		2	0					
ANR	655	PtrMemberAccess	ps -> num_env		2	1					
ANR	656	Identifier	ps		2	0					
ANR	657	Identifier	num_env		2	1					
ANR	658	CompoundStatement		177:50:3033:3033	2	1					
ANR	659	IfStatement	if ( ps -> enable_iid )		2	0					
ANR	660	Condition	ps -> enable_iid	181:16:3163:3176	2	0	True				
ANR	661	PtrMemberAccess	ps -> enable_iid		2	0					
ANR	662	Identifier	ps		2	0					
ANR	663	Identifier	enable_iid		2	1					
ANR	664	CompoundStatement		179:32:3068:3068	2	1					
ANR	665	ExpressionStatement	"memcpy ( ps -> iid_par + ps -> num_env , ps -> iid_par + source , sizeof ( ps -> iid_par [ 0 ] ) )"	183:16:3198:3273	2	0	True				
ANR	666	CallExpression	"memcpy ( ps -> iid_par + ps -> num_env , ps -> iid_par + source , sizeof ( ps -> iid_par [ 0 ] ) )"		2	0					
ANR	667	Callee	memcpy		2	0					
ANR	668	Identifier	memcpy		2	0					
ANR	669	ArgumentList	ps -> iid_par + ps -> num_env		2	1					
ANR	670	Argument	ps -> iid_par + ps -> num_env		2	0					
ANR	671	AdditiveExpression	ps -> iid_par + ps -> num_env		2	0		+			
ANR	672	PtrMemberAccess	ps -> iid_par		2	0					
ANR	673	Identifier	ps		2	0					
ANR	674	Identifier	iid_par		2	1					
ANR	675	PtrMemberAccess	ps -> num_env		2	1					
ANR	676	Identifier	ps		2	0					
ANR	677	Identifier	num_env		2	1					
ANR	678	Argument	ps -> iid_par + source		2	1					
ANR	679	AdditiveExpression	ps -> iid_par + source		2	0		+			
ANR	680	PtrMemberAccess	ps -> iid_par		2	0					
ANR	681	Identifier	ps		2	0					
ANR	682	Identifier	iid_par		2	1					
ANR	683	Identifier	source		2	1					
ANR	684	Argument	sizeof ( ps -> iid_par [ 0 ] )		2	2					
ANR	685	SizeofExpression	sizeof ( ps -> iid_par [ 0 ] )		2	0					
ANR	686	Sizeof	sizeof		2	0					
ANR	687	ArrayIndexing	ps -> iid_par [ 0 ]		2	1					
ANR	688	PtrMemberAccess	ps -> iid_par		2	0					
ANR	689	Identifier	ps		2	0					
ANR	690	Identifier	iid_par		2	1					
ANR	691	PrimaryExpression	0		2	1					
ANR	692	IfStatement	if ( ps -> enable_icc )		2	1					
ANR	693	Condition	ps -> enable_icc	187:16:3307:3320	2	0	True				
ANR	694	PtrMemberAccess	ps -> enable_icc		2	0					
ANR	695	Identifier	ps		2	0					
ANR	696	Identifier	enable_icc		2	1					
ANR	697	CompoundStatement		185:32:3212:3212	2	1					
ANR	698	ExpressionStatement	"memcpy ( ps -> icc_par + ps -> num_env , ps -> icc_par + source , sizeof ( ps -> icc_par [ 0 ] ) )"	189:16:3342:3417	2	0	True				
ANR	699	CallExpression	"memcpy ( ps -> icc_par + ps -> num_env , ps -> icc_par + source , sizeof ( ps -> icc_par [ 0 ] ) )"		2	0					
ANR	700	Callee	memcpy		2	0					
ANR	701	Identifier	memcpy		2	0					
ANR	702	ArgumentList	ps -> icc_par + ps -> num_env		2	1					
ANR	703	Argument	ps -> icc_par + ps -> num_env		2	0					
ANR	704	AdditiveExpression	ps -> icc_par + ps -> num_env		2	0		+			
ANR	705	PtrMemberAccess	ps -> icc_par		2	0					
ANR	706	Identifier	ps		2	0					
ANR	707	Identifier	icc_par		2	1					
ANR	708	PtrMemberAccess	ps -> num_env		2	1					
ANR	709	Identifier	ps		2	0					
ANR	710	Identifier	num_env		2	1					
ANR	711	Argument	ps -> icc_par + source		2	1					
ANR	712	AdditiveExpression	ps -> icc_par + source		2	0		+			
ANR	713	PtrMemberAccess	ps -> icc_par		2	0					
ANR	714	Identifier	ps		2	0					
ANR	715	Identifier	icc_par		2	1					
ANR	716	Identifier	source		2	1					
ANR	717	Argument	sizeof ( ps -> icc_par [ 0 ] )		2	2					
ANR	718	SizeofExpression	sizeof ( ps -> icc_par [ 0 ] )		2	0					
ANR	719	Sizeof	sizeof		2	0					
ANR	720	ArrayIndexing	ps -> icc_par [ 0 ]		2	1					
ANR	721	PtrMemberAccess	ps -> icc_par		2	0					
ANR	722	Identifier	ps		2	0					
ANR	723	Identifier	icc_par		2	1					
ANR	724	PrimaryExpression	0		2	1					
ANR	725	IfStatement	if ( ps -> enable_ipdopd )		2	2					
ANR	726	Condition	ps -> enable_ipdopd	193:16:3451:3467	2	0	True				
ANR	727	PtrMemberAccess	ps -> enable_ipdopd		2	0					
ANR	728	Identifier	ps		2	0					
ANR	729	Identifier	enable_ipdopd		2	1					
ANR	730	CompoundStatement		191:35:3359:3359	2	1					
ANR	731	ExpressionStatement	"memcpy ( ps -> ipd_par + ps -> num_env , ps -> ipd_par + source , sizeof ( ps -> ipd_par [ 0 ] ) )"	195:16:3489:3564	2	0	True				
ANR	732	CallExpression	"memcpy ( ps -> ipd_par + ps -> num_env , ps -> ipd_par + source , sizeof ( ps -> ipd_par [ 0 ] ) )"		2	0					
ANR	733	Callee	memcpy		2	0					
ANR	734	Identifier	memcpy		2	0					
ANR	735	ArgumentList	ps -> ipd_par + ps -> num_env		2	1					
ANR	736	Argument	ps -> ipd_par + ps -> num_env		2	0					
ANR	737	AdditiveExpression	ps -> ipd_par + ps -> num_env		2	0		+			
ANR	738	PtrMemberAccess	ps -> ipd_par		2	0					
ANR	739	Identifier	ps		2	0					
ANR	740	Identifier	ipd_par		2	1					
ANR	741	PtrMemberAccess	ps -> num_env		2	1					
ANR	742	Identifier	ps		2	0					
ANR	743	Identifier	num_env		2	1					
ANR	744	Argument	ps -> ipd_par + source		2	1					
ANR	745	AdditiveExpression	ps -> ipd_par + source		2	0		+			
ANR	746	PtrMemberAccess	ps -> ipd_par		2	0					
ANR	747	Identifier	ps		2	0					
ANR	748	Identifier	ipd_par		2	1					
ANR	749	Identifier	source		2	1					
ANR	750	Argument	sizeof ( ps -> ipd_par [ 0 ] )		2	2					
ANR	751	SizeofExpression	sizeof ( ps -> ipd_par [ 0 ] )		2	0					
ANR	752	Sizeof	sizeof		2	0					
ANR	753	ArrayIndexing	ps -> ipd_par [ 0 ]		2	1					
ANR	754	PtrMemberAccess	ps -> ipd_par		2	0					
ANR	755	Identifier	ps		2	0					
ANR	756	Identifier	ipd_par		2	1					
ANR	757	PrimaryExpression	0		2	1					
ANR	758	ExpressionStatement	"memcpy ( ps -> opd_par + ps -> num_env , ps -> opd_par + source , sizeof ( ps -> opd_par [ 0 ] ) )"	197:16:3583:3658	2	1	True				
ANR	759	CallExpression	"memcpy ( ps -> opd_par + ps -> num_env , ps -> opd_par + source , sizeof ( ps -> opd_par [ 0 ] ) )"		2	0					
ANR	760	Callee	memcpy		2	0					
ANR	761	Identifier	memcpy		2	0					
ANR	762	ArgumentList	ps -> opd_par + ps -> num_env		2	1					
ANR	763	Argument	ps -> opd_par + ps -> num_env		2	0					
ANR	764	AdditiveExpression	ps -> opd_par + ps -> num_env		2	0		+			
ANR	765	PtrMemberAccess	ps -> opd_par		2	0					
ANR	766	Identifier	ps		2	0					
ANR	767	Identifier	opd_par		2	1					
ANR	768	PtrMemberAccess	ps -> num_env		2	1					
ANR	769	Identifier	ps		2	0					
ANR	770	Identifier	num_env		2	1					
ANR	771	Argument	ps -> opd_par + source		2	1					
ANR	772	AdditiveExpression	ps -> opd_par + source		2	0		+			
ANR	773	PtrMemberAccess	ps -> opd_par		2	0					
ANR	774	Identifier	ps		2	0					
ANR	775	Identifier	opd_par		2	1					
ANR	776	Identifier	source		2	1					
ANR	777	Argument	sizeof ( ps -> opd_par [ 0 ] )		2	2					
ANR	778	SizeofExpression	sizeof ( ps -> opd_par [ 0 ] )		2	0					
ANR	779	Sizeof	sizeof		2	0					
ANR	780	ArrayIndexing	ps -> opd_par [ 0 ]		2	1					
ANR	781	PtrMemberAccess	ps -> opd_par		2	0					
ANR	782	Identifier	ps		2	0					
ANR	783	Identifier	opd_par		2	1					
ANR	784	PrimaryExpression	0		2	1					
ANR	785	IfStatement	if ( ps -> enable_iid )		2	3					
ANR	786	Condition	ps -> enable_iid	203:12:3699:3712	2	0	True				
ANR	787	PtrMemberAccess	ps -> enable_iid		2	0					
ANR	788	Identifier	ps		2	0					
ANR	789	Identifier	enable_iid		2	1					
ANR	790	CompoundStatement		201:27:3603:3603	2	1					
ANR	791	ForStatement	for ( b = 0 ; b < ps -> nr_iid_par ; b ++ )		2	0					
ANR	792	ForInit	b = 0 ;	205:17:3734:3739	2	0	True				
ANR	793	AssignmentExpression	b = 0		2	0		=			
ANR	794	Identifier	b		2	0					
ANR	795	PrimaryExpression	0		2	1					
ANR	796	Condition	b < ps -> nr_iid_par	205:24:3741:3758	2	1	True				
ANR	797	RelationalExpression	b < ps -> nr_iid_par		2	0		<			
ANR	798	Identifier	b		2	0					
ANR	799	PtrMemberAccess	ps -> nr_iid_par		2	1					
ANR	800	Identifier	ps		2	0					
ANR	801	Identifier	nr_iid_par		2	1					
ANR	802	PostIncDecOperationExpression	b ++	205:44:3761:3763	2	2	True				
ANR	803	Identifier	b		2	0					
ANR	804	IncDec	++		2	1					
ANR	805	CompoundStatement		203:49:3655:3655	2	3					
ANR	806	IfStatement	if ( FFABS ( ps -> iid_par [ ps -> num_env ] [ b ] ) > 7 + 8 * ps -> iid_quant )		2	0					
ANR	807	Condition	FFABS ( ps -> iid_par [ ps -> num_env ] [ b ] ) > 7 + 8 * ps -> iid_quant	207:20:3789:3846	2	0	True				
ANR	808	RelationalExpression	FFABS ( ps -> iid_par [ ps -> num_env ] [ b ] ) > 7 + 8 * ps -> iid_quant		2	0		>			
ANR	809	CallExpression	FFABS ( ps -> iid_par [ ps -> num_env ] [ b ] )		2	0					
ANR	810	Callee	FFABS		2	0					
ANR	811	Identifier	FFABS		2	0					
ANR	812	ArgumentList	ps -> iid_par [ ps -> num_env ] [ b ]		2	1					
ANR	813	Argument	ps -> iid_par [ ps -> num_env ] [ b ]		2	0					
ANR	814	ArrayIndexing	ps -> iid_par [ ps -> num_env ] [ b ]		2	0					
ANR	815	ArrayIndexing	ps -> iid_par [ ps -> num_env ]		2	0					
ANR	816	PtrMemberAccess	ps -> iid_par		2	0					
ANR	817	Identifier	ps		2	0					
ANR	818	Identifier	iid_par		2	1					
ANR	819	PtrMemberAccess	ps -> num_env		2	1					
ANR	820	Identifier	ps		2	0					
ANR	821	Identifier	num_env		2	1					
ANR	822	Identifier	b		2	1					
ANR	823	AdditiveExpression	7 + 8 * ps -> iid_quant		2	1		+			
ANR	824	PrimaryExpression	7		2	0					
ANR	825	MultiplicativeExpression	8 * ps -> iid_quant		2	1		*			
ANR	826	PrimaryExpression	8		2	0					
ANR	827	PtrMemberAccess	ps -> iid_quant		2	1					
ANR	828	Identifier	ps		2	0					
ANR	829	Identifier	iid_quant		2	1					
ANR	830	CompoundStatement		205:80:3738:3738	2	1					
ANR	831	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""iid_par invalid\\n"" )"	209:20:3872:3920	2	0	True				
ANR	832	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""iid_par invalid\\n"" )"		2	0					
ANR	833	Callee	av_log		2	0					
ANR	834	Identifier	av_log		2	0					
ANR	835	ArgumentList	avctx		2	1					
ANR	836	Argument	avctx		2	0					
ANR	837	Identifier	avctx		2	0					
ANR	838	Argument	AV_LOG_ERROR		2	1					
ANR	839	Identifier	AV_LOG_ERROR		2	0					
ANR	840	Argument	"""iid_par invalid\\n"""		2	2					
ANR	841	PrimaryExpression	"""iid_par invalid\\n"""		2	0					
ANR	842	GotoStatement	goto err ;	211:20:3943:3951	2	1	True				
ANR	843	Identifier	err		2	0					
ANR	844	IfStatement	if ( ps -> enable_icc )		2	4					
ANR	845	Condition	ps -> enable_icc	219:12:4011:4024	2	0	True				
ANR	846	PtrMemberAccess	ps -> enable_icc		2	0					
ANR	847	Identifier	ps		2	0					
ANR	848	Identifier	enable_icc		2	1					
ANR	849	CompoundStatement		217:27:3915:3915	2	1					
ANR	850	ForStatement	for ( b = 0 ; b < ps -> nr_iid_par ; b ++ )		2	0					
ANR	851	ForInit	b = 0 ;	221:17:4046:4051	2	0	True				
ANR	852	AssignmentExpression	b = 0		2	0		=			
ANR	853	Identifier	b		2	0					
ANR	854	PrimaryExpression	0		2	1					
ANR	855	Condition	b < ps -> nr_iid_par	221:24:4053:4070	2	1	True				
ANR	856	RelationalExpression	b < ps -> nr_iid_par		2	0		<			
ANR	857	Identifier	b		2	0					
ANR	858	PtrMemberAccess	ps -> nr_iid_par		2	1					
ANR	859	Identifier	ps		2	0					
ANR	860	Identifier	nr_iid_par		2	1					
ANR	861	PostIncDecOperationExpression	b ++	221:44:4073:4075	2	2	True				
ANR	862	Identifier	b		2	0					
ANR	863	IncDec	++		2	1					
ANR	864	CompoundStatement		219:49:3967:3967	2	3					
ANR	865	IfStatement	if ( ps -> icc_par [ ps -> num_env ] [ b ] > 7U )		2	0					
ANR	866	Condition	ps -> icc_par [ ps -> num_env ] [ b ] > 7U	223:20:4101:4132	2	0	True				
ANR	867	RelationalExpression	ps -> icc_par [ ps -> num_env ] [ b ] > 7U		2	0		>			
ANR	868	ArrayIndexing	ps -> icc_par [ ps -> num_env ] [ b ]		2	0					
ANR	869	ArrayIndexing	ps -> icc_par [ ps -> num_env ]		2	0					
ANR	870	PtrMemberAccess	ps -> icc_par		2	0					
ANR	871	Identifier	ps		2	0					
ANR	872	Identifier	icc_par		2	1					
ANR	873	PtrMemberAccess	ps -> num_env		2	1					
ANR	874	Identifier	ps		2	0					
ANR	875	Identifier	num_env		2	1					
ANR	876	Identifier	b		2	1					
ANR	877	PrimaryExpression	7U		2	1					
ANR	878	CompoundStatement		221:54:4024:4024	2	1					
ANR	879	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""icc_par invalid\\n"" )"	225:20:4158:4206	2	0	True				
ANR	880	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""icc_par invalid\\n"" )"		2	0					
ANR	881	Callee	av_log		2	0					
ANR	882	Identifier	av_log		2	0					
ANR	883	ArgumentList	avctx		2	1					
ANR	884	Argument	avctx		2	0					
ANR	885	Identifier	avctx		2	0					
ANR	886	Argument	AV_LOG_ERROR		2	1					
ANR	887	Identifier	AV_LOG_ERROR		2	0					
ANR	888	Argument	"""icc_par invalid\\n"""		2	2					
ANR	889	PrimaryExpression	"""icc_par invalid\\n"""		2	0					
ANR	890	GotoStatement	goto err ;	227:20:4229:4237	2	1	True				
ANR	891	Identifier	err		2	0					
ANR	892	ExpressionStatement	ps -> num_env ++	235:8:4293:4306	2	5	True				
ANR	893	PostIncDecOperationExpression	ps -> num_env ++		2	0					
ANR	894	PtrMemberAccess	ps -> num_env		2	0					
ANR	895	Identifier	ps		2	0					
ANR	896	Identifier	num_env		2	1					
ANR	897	IncDec	++		2	1					
ANR	898	ExpressionStatement	ps -> border_position [ ps -> num_env ] = numQMFSlots - 1	237:8:4317:4367	2	6	True				
ANR	899	AssignmentExpression	ps -> border_position [ ps -> num_env ] = numQMFSlots - 1		2	0		=			
ANR	900	ArrayIndexing	ps -> border_position [ ps -> num_env ]		2	0					
ANR	901	PtrMemberAccess	ps -> border_position		2	0					
ANR	902	Identifier	ps		2	0					
ANR	903	Identifier	border_position		2	1					
ANR	904	PtrMemberAccess	ps -> num_env		2	1					
ANR	905	Identifier	ps		2	0					
ANR	906	Identifier	num_env		2	1					
ANR	907	AdditiveExpression	numQMFSlots - 1		2	1		-			
ANR	908	Identifier	numQMFSlots		2	0					
ANR	909	PrimaryExpression	1		2	1					
ANR	910	ExpressionStatement	ps -> is34bands_old = ps -> is34bands	245:4:4385:4418	2	17	True				
ANR	911	AssignmentExpression	ps -> is34bands_old = ps -> is34bands		2	0		=			
ANR	912	PtrMemberAccess	ps -> is34bands_old		2	0					
ANR	913	Identifier	ps		2	0					
ANR	914	Identifier	is34bands_old		2	1					
ANR	915	PtrMemberAccess	ps -> is34bands		2	1					
ANR	916	Identifier	ps		2	0					
ANR	917	Identifier	is34bands		2	1					
ANR	918	IfStatement	if ( ! PS_BASELINE && ( ps -> enable_iid || ps -> enable_icc ) )		2	18					
ANR	919	Condition	! PS_BASELINE && ( ps -> enable_iid || ps -> enable_icc )	247:8:4429:4478	2	0	True				
ANR	920	AndExpression	! PS_BASELINE && ( ps -> enable_iid || ps -> enable_icc )		2	0		&&			
ANR	921	UnaryOperationExpression	! PS_BASELINE		2	0					
ANR	922	UnaryOperator	!		2	0					
ANR	923	Identifier	PS_BASELINE		2	1					
ANR	924	OrExpression	ps -> enable_iid || ps -> enable_icc		2	1		||			
ANR	925	PtrMemberAccess	ps -> enable_iid		2	0					
ANR	926	Identifier	ps		2	0					
ANR	927	Identifier	enable_iid		2	1					
ANR	928	PtrMemberAccess	ps -> enable_icc		2	1					
ANR	929	Identifier	ps		2	0					
ANR	930	Identifier	enable_icc		2	1					
ANR	931	ExpressionStatement	ps -> is34bands = ( ps -> enable_iid && ps -> nr_iid_par == 34 ) || ( ps -> enable_icc && ps -> nr_icc_par == 34 )	249:8:4490:4615	2	1	True				
ANR	932	AssignmentExpression	ps -> is34bands = ( ps -> enable_iid && ps -> nr_iid_par == 34 ) || ( ps -> enable_icc && ps -> nr_icc_par == 34 )		2	0		=			
ANR	933	PtrMemberAccess	ps -> is34bands		2	0					
ANR	934	Identifier	ps		2	0					
ANR	935	Identifier	is34bands		2	1					
ANR	936	OrExpression	( ps -> enable_iid && ps -> nr_iid_par == 34 ) || ( ps -> enable_icc && ps -> nr_icc_par == 34 )		2	1		||			
ANR	937	AndExpression	ps -> enable_iid && ps -> nr_iid_par == 34		2	0		&&			
ANR	938	PtrMemberAccess	ps -> enable_iid		2	0					
ANR	939	Identifier	ps		2	0					
ANR	940	Identifier	enable_iid		2	1					
ANR	941	EqualityExpression	ps -> nr_iid_par == 34		2	1		==			
ANR	942	PtrMemberAccess	ps -> nr_iid_par		2	0					
ANR	943	Identifier	ps		2	0					
ANR	944	Identifier	nr_iid_par		2	1					
ANR	945	PrimaryExpression	34		2	1					
ANR	946	AndExpression	ps -> enable_icc && ps -> nr_icc_par == 34		2	1		&&			
ANR	947	PtrMemberAccess	ps -> enable_icc		2	0					
ANR	948	Identifier	ps		2	0					
ANR	949	Identifier	enable_icc		2	1					
ANR	950	EqualityExpression	ps -> nr_icc_par == 34		2	1		==			
ANR	951	PtrMemberAccess	ps -> nr_icc_par		2	0					
ANR	952	Identifier	ps		2	0					
ANR	953	Identifier	nr_icc_par		2	1					
ANR	954	PrimaryExpression	34		2	1					
ANR	955	IfStatement	if ( ! ps -> enable_ipdopd )		2	19					
ANR	956	Condition	! ps -> enable_ipdopd	257:8:4644:4661	2	0	True				
ANR	957	UnaryOperationExpression	! ps -> enable_ipdopd		2	0					
ANR	958	UnaryOperator	!		2	0					
ANR	959	PtrMemberAccess	ps -> enable_ipdopd		2	1					
ANR	960	Identifier	ps		2	0					
ANR	961	Identifier	enable_ipdopd		2	1					
ANR	962	CompoundStatement		255:28:4553:4553	2	1					
ANR	963	ExpressionStatement	"memset ( ps -> ipd_par , 0 , sizeof ( ps -> ipd_par ) )"	259:8:4675:4718	2	0	True				
ANR	964	CallExpression	"memset ( ps -> ipd_par , 0 , sizeof ( ps -> ipd_par ) )"		2	0					
ANR	965	Callee	memset		2	0					
ANR	966	Identifier	memset		2	0					
ANR	967	ArgumentList	ps -> ipd_par		2	1					
ANR	968	Argument	ps -> ipd_par		2	0					
ANR	969	PtrMemberAccess	ps -> ipd_par		2	0					
ANR	970	Identifier	ps		2	0					
ANR	971	Identifier	ipd_par		2	1					
ANR	972	Argument	0		2	1					
ANR	973	PrimaryExpression	0		2	0					
ANR	974	Argument	sizeof ( ps -> ipd_par )		2	2					
ANR	975	SizeofExpression	sizeof ( ps -> ipd_par )		2	0					
ANR	976	Sizeof	sizeof		2	0					
ANR	977	PtrMemberAccess	ps -> ipd_par		2	1					
ANR	978	Identifier	ps		2	0					
ANR	979	Identifier	ipd_par		2	1					
ANR	980	ExpressionStatement	"memset ( ps -> opd_par , 0 , sizeof ( ps -> opd_par ) )"	261:8:4729:4772	2	1	True				
ANR	981	CallExpression	"memset ( ps -> opd_par , 0 , sizeof ( ps -> opd_par ) )"		2	0					
ANR	982	Callee	memset		2	0					
ANR	983	Identifier	memset		2	0					
ANR	984	ArgumentList	ps -> opd_par		2	1					
ANR	985	Argument	ps -> opd_par		2	0					
ANR	986	PtrMemberAccess	ps -> opd_par		2	0					
ANR	987	Identifier	ps		2	0					
ANR	988	Identifier	opd_par		2	1					
ANR	989	Argument	0		2	1					
ANR	990	PrimaryExpression	0		2	0					
ANR	991	Argument	sizeof ( ps -> opd_par )		2	2					
ANR	992	SizeofExpression	sizeof ( ps -> opd_par )		2	0					
ANR	993	Sizeof	sizeof		2	0					
ANR	994	PtrMemberAccess	ps -> opd_par		2	1					
ANR	995	Identifier	ps		2	0					
ANR	996	Identifier	opd_par		2	1					
ANR	997	IfStatement	if ( header )		2	20					
ANR	998	Condition	header	267:8:4792:4797	2	0	True				
ANR	999	Identifier	header		2	0					
ANR	1000	ExpressionStatement	ps -> start = 1	269:8:4809:4822	2	1	True				
ANR	1001	AssignmentExpression	ps -> start = 1		2	0		=			
ANR	1002	PtrMemberAccess	ps -> start		2	0					
ANR	1003	Identifier	ps		2	0					
ANR	1004	Identifier	start		2	1					
ANR	1005	PrimaryExpression	1		2	1					
ANR	1006	ExpressionStatement	bits_consumed = get_bits_count ( gb ) - bit_count_start	273:4:4831:4883	2	21	True				
ANR	1007	AssignmentExpression	bits_consumed = get_bits_count ( gb ) - bit_count_start		2	0		=			
ANR	1008	Identifier	bits_consumed		2	0					
ANR	1009	AdditiveExpression	get_bits_count ( gb ) - bit_count_start		2	1		-			
ANR	1010	CallExpression	get_bits_count ( gb )		2	0					
ANR	1011	Callee	get_bits_count		2	0					
ANR	1012	Identifier	get_bits_count		2	0					
ANR	1013	ArgumentList	gb		2	1					
ANR	1014	Argument	gb		2	0					
ANR	1015	Identifier	gb		2	0					
ANR	1016	Identifier	bit_count_start		2	1					
ANR	1017	IfStatement	if ( bits_consumed <= bits_left )		2	22					
ANR	1018	Condition	bits_consumed <= bits_left	275:8:4894:4919	2	0	True				
ANR	1019	RelationalExpression	bits_consumed <= bits_left		2	0		<=			
ANR	1020	Identifier	bits_consumed		2	0					
ANR	1021	Identifier	bits_left		2	1					
ANR	1022	CompoundStatement		273:36:4811:4811	2	1					
ANR	1023	ExpressionStatement	"skip_bits_long ( gb_host , bits_consumed )"	277:8:4933:4971	2	0	True				
ANR	1024	CallExpression	"skip_bits_long ( gb_host , bits_consumed )"		2	0					
ANR	1025	Callee	skip_bits_long		2	0					
ANR	1026	Identifier	skip_bits_long		2	0					
ANR	1027	ArgumentList	gb_host		2	1					
ANR	1028	Argument	gb_host		2	0					
ANR	1029	Identifier	gb_host		2	0					
ANR	1030	Argument	bits_consumed		2	1					
ANR	1031	Identifier	bits_consumed		2	0					
ANR	1032	ReturnStatement	return bits_consumed ;	279:8:4982:5002	2	1	True				
ANR	1033	Identifier	bits_consumed		2	0					
ANR	1034	ExpressionStatement	"av_log ( avctx , AV_LOG_ERROR , ""Expected to read %d PS bits actually read %d.\\n"" , bits_left , bits_consumed )"	283:4:5016:5120	2	23	True				
ANR	1035	CallExpression	"av_log ( avctx , AV_LOG_ERROR , ""Expected to read %d PS bits actually read %d.\\n"" , bits_left , bits_consumed )"		2	0					
ANR	1036	Callee	av_log		2	0					
ANR	1037	Identifier	av_log		2	0					
ANR	1038	ArgumentList	avctx		2	1					
ANR	1039	Argument	avctx		2	0					
ANR	1040	Identifier	avctx		2	0					
ANR	1041	Argument	AV_LOG_ERROR		2	1					
ANR	1042	Identifier	AV_LOG_ERROR		2	0					
ANR	1043	Argument	"""Expected to read %d PS bits actually read %d.\\n"""		2	2					
ANR	1044	PrimaryExpression	"""Expected to read %d PS bits actually read %d.\\n"""		2	0					
ANR	1045	Argument	bits_left		2	3					
ANR	1046	Identifier	bits_left		2	0					
ANR	1047	Argument	bits_consumed		2	4					
ANR	1048	Identifier	bits_consumed		2	0					
ANR	1049	Label	err :	285:0:5123:5126	2	24	True				
ANR	1050	Identifier	err		2	0					
ANR	1051	ExpressionStatement	ps -> start = 0	287:4:5133:5146	2	25	True				
ANR	1052	AssignmentExpression	ps -> start = 0		2	0		=			
ANR	1053	PtrMemberAccess	ps -> start		2	0					
ANR	1054	Identifier	ps		2	0					
ANR	1055	Identifier	start		2	1					
ANR	1056	PrimaryExpression	0		2	1					
ANR	1057	ExpressionStatement	"skip_bits_long ( gb_host , bits_left )"	289:4:5153:5187	2	26	True				
ANR	1058	CallExpression	"skip_bits_long ( gb_host , bits_left )"		2	0					
ANR	1059	Callee	skip_bits_long		2	0					
ANR	1060	Identifier	skip_bits_long		2	0					
ANR	1061	ArgumentList	gb_host		2	1					
ANR	1062	Argument	gb_host		2	0					
ANR	1063	Identifier	gb_host		2	0					
ANR	1064	Argument	bits_left		2	1					
ANR	1065	Identifier	bits_left		2	0					
ANR	1066	ExpressionStatement	"memset ( ps -> iid_par , 0 , sizeof ( ps -> iid_par ) )"	291:4:5194:5237	2	27	True				
ANR	1067	CallExpression	"memset ( ps -> iid_par , 0 , sizeof ( ps -> iid_par ) )"		2	0					
ANR	1068	Callee	memset		2	0					
ANR	1069	Identifier	memset		2	0					
ANR	1070	ArgumentList	ps -> iid_par		2	1					
ANR	1071	Argument	ps -> iid_par		2	0					
ANR	1072	PtrMemberAccess	ps -> iid_par		2	0					
ANR	1073	Identifier	ps		2	0					
ANR	1074	Identifier	iid_par		2	1					
ANR	1075	Argument	0		2	1					
ANR	1076	PrimaryExpression	0		2	0					
ANR	1077	Argument	sizeof ( ps -> iid_par )		2	2					
ANR	1078	SizeofExpression	sizeof ( ps -> iid_par )		2	0					
ANR	1079	Sizeof	sizeof		2	0					
ANR	1080	PtrMemberAccess	ps -> iid_par		2	1					
ANR	1081	Identifier	ps		2	0					
ANR	1082	Identifier	iid_par		2	1					
ANR	1083	ExpressionStatement	"memset ( ps -> icc_par , 0 , sizeof ( ps -> icc_par ) )"	293:4:5244:5287	2	28	True				
ANR	1084	CallExpression	"memset ( ps -> icc_par , 0 , sizeof ( ps -> icc_par ) )"		2	0					
ANR	1085	Callee	memset		2	0					
ANR	1086	Identifier	memset		2	0					
ANR	1087	ArgumentList	ps -> icc_par		2	1					
ANR	1088	Argument	ps -> icc_par		2	0					
ANR	1089	PtrMemberAccess	ps -> icc_par		2	0					
ANR	1090	Identifier	ps		2	0					
ANR	1091	Identifier	icc_par		2	1					
ANR	1092	Argument	0		2	1					
ANR	1093	PrimaryExpression	0		2	0					
ANR	1094	Argument	sizeof ( ps -> icc_par )		2	2					
ANR	1095	SizeofExpression	sizeof ( ps -> icc_par )		2	0					
ANR	1096	Sizeof	sizeof		2	0					
ANR	1097	PtrMemberAccess	ps -> icc_par		2	1					
ANR	1098	Identifier	ps		2	0					
ANR	1099	Identifier	icc_par		2	1					
ANR	1100	ExpressionStatement	"memset ( ps -> ipd_par , 0 , sizeof ( ps -> ipd_par ) )"	295:4:5294:5337	2	29	True				
ANR	1101	CallExpression	"memset ( ps -> ipd_par , 0 , sizeof ( ps -> ipd_par ) )"		2	0					
ANR	1102	Callee	memset		2	0					
ANR	1103	Identifier	memset		2	0					
ANR	1104	ArgumentList	ps -> ipd_par		2	1					
ANR	1105	Argument	ps -> ipd_par		2	0					
ANR	1106	PtrMemberAccess	ps -> ipd_par		2	0					
ANR	1107	Identifier	ps		2	0					
ANR	1108	Identifier	ipd_par		2	1					
ANR	1109	Argument	0		2	1					
ANR	1110	PrimaryExpression	0		2	0					
ANR	1111	Argument	sizeof ( ps -> ipd_par )		2	2					
ANR	1112	SizeofExpression	sizeof ( ps -> ipd_par )		2	0					
ANR	1113	Sizeof	sizeof		2	0					
ANR	1114	PtrMemberAccess	ps -> ipd_par		2	1					
ANR	1115	Identifier	ps		2	0					
ANR	1116	Identifier	ipd_par		2	1					
ANR	1117	ExpressionStatement	"memset ( ps -> opd_par , 0 , sizeof ( ps -> opd_par ) )"	297:4:5344:5387	2	30	True				
ANR	1118	CallExpression	"memset ( ps -> opd_par , 0 , sizeof ( ps -> opd_par ) )"		2	0					
ANR	1119	Callee	memset		2	0					
ANR	1120	Identifier	memset		2	0					
ANR	1121	ArgumentList	ps -> opd_par		2	1					
ANR	1122	Argument	ps -> opd_par		2	0					
ANR	1123	PtrMemberAccess	ps -> opd_par		2	0					
ANR	1124	Identifier	ps		2	0					
ANR	1125	Identifier	opd_par		2	1					
ANR	1126	Argument	0		2	1					
ANR	1127	PrimaryExpression	0		2	0					
ANR	1128	Argument	sizeof ( ps -> opd_par )		2	2					
ANR	1129	SizeofExpression	sizeof ( ps -> opd_par )		2	0					
ANR	1130	Sizeof	sizeof		2	0					
ANR	1131	PtrMemberAccess	ps -> opd_par		2	1					
ANR	1132	Identifier	ps		2	0					
ANR	1133	Identifier	opd_par		2	1					
ANR	1134	ReturnStatement	return bits_left ;	299:4:5394:5410	2	31	True				
ANR	1135	Identifier	bits_left		2	0					
ANR	1136	ReturnType	int AAC_RENAME		2	1					
ANR	1137	Identifier	( ff_ps_read_data )		2	2					
ANR	1138	Identifier	ff_ps_read_data		2	3					
ANR	1139	ParameterList	"AVCodecContext * avctx , GetBitContext * gb_host , PSContext * ps , int bits_left"		2	4					
ANR	1140	Parameter	AVCodecContext * avctx	1:32:32:52	2	0	True				
ANR	1141	ParameterType	AVCodecContext *		2	0					
ANR	1142	Identifier	avctx		2	1					
ANR	1143	Parameter	GetBitContext * gb_host	1:55:55:76	2	1	True				
ANR	1144	ParameterType	GetBitContext *		2	0					
ANR	1145	Identifier	gb_host		2	1					
ANR	1146	Parameter	PSContext * ps	1:79:79:91	2	2	True				
ANR	1147	ParameterType	PSContext *		2	0					
ANR	1148	Identifier	ps		2	1					
ANR	1149	Parameter	int bits_left	1:94:94:106	2	3	True				
ANR	1150	ParameterType	int		2	0					
ANR	1151	Identifier	bits_left		2	1					
ANR	1152	CFGEntryNode	ENTRY		2		True				
ANR	1153	CFGExitNode	EXIT		2		True				
ANR	1154	Symbol	* ps -> icc_mode		2						
ANR	1155	Symbol	ps_read_extension_data		2						
ANR	1156	Symbol	* iid_mode		2						
ANR	1157	Symbol	ps		2						
ANR	1158	Symbol	ps -> is34bands_old		2						
ANR	1159	Symbol	get_bits		2						
ANR	1160	Symbol	source		2						
ANR	1161	Symbol	bit_count_start		2						
ANR	1162	Symbol	* nr_iidopd_par_tab		2						
ANR	1163	Symbol	dt		2						
ANR	1164	Symbol	* ff_log2_tab		2						
ANR	1165	Symbol	ps -> border_position		2						
ANR	1166	Symbol	huff_iid		2						
ANR	1167	Symbol	ps -> num_env_old		2						
ANR	1168	Symbol	ps -> num_env		2						
ANR	1169	Symbol	* ps -> ipd_par		2						
ANR	1170	Symbol	ps -> frame_class		2						
ANR	1171	Symbol	numQMFSlots		2						
ANR	1172	Symbol	* * * ps		2						
ANR	1173	Symbol	* ps -> border_position		2						
ANR	1174	Symbol	ps -> enable_icc		2						
ANR	1175	Symbol	ps -> start		2						
ANR	1176	Symbol	get_bits1		2						
ANR	1177	Symbol	* ps -> iid_par		2						
ANR	1178	Symbol	ff_log2_tab		2						
ANR	1179	Symbol	* ps		2						
ANR	1180	Symbol	bits_left		2						
ANR	1181	Symbol	ps -> opd_par		2						
ANR	1182	Symbol	get_bits_count		2						
ANR	1183	Symbol	ps_extension_id		2						
ANR	1184	Symbol	* ps -> iid_quant		2						
ANR	1185	Symbol	bits_consumed		2						
ANR	1186	Symbol	ps -> is34bands		2						
ANR	1187	Symbol	nr_iidopd_par_tab		2						
ANR	1188	Symbol	num_env_tab		2						
ANR	1189	Symbol	* * num_env_tab		2						
ANR	1190	Symbol	ps -> nr_icc_par		2						
ANR	1191	Symbol	ps -> enable_ipdopd		2						
ANR	1192	Symbol	header		2						
ANR	1193	Symbol	ps -> nr_iid_par		2						
ANR	1194	Symbol	* gb_host		2						
ANR	1195	Symbol	nr_iidicc_par_tab		2						
ANR	1196	Symbol	PS_BASELINE		2						
ANR	1197	Symbol	read_icc_data		2						
ANR	1198	Symbol	gb_host		2						
ANR	1199	Symbol	& gbc		2						
ANR	1200	Symbol	read_iid_data		2						
ANR	1201	Symbol	ps -> enable_ext		2						
ANR	1202	Symbol	huff_icc_dt		2						
ANR	1203	Symbol	ps -> nr_ipdopd_par		2						
ANR	1204	Symbol	* ps -> icc_par		2						
ANR	1205	Symbol	ps -> iid_par		2						
ANR	1206	Symbol	* dt		2						
ANR	1207	Symbol	huff_icc_df		2						
ANR	1208	Symbol	gb		2						
ANR	1209	Symbol	avctx		2						
ANR	1210	Symbol	* ps -> num_env		2						
ANR	1211	Symbol	ps -> ipd_par		2						
ANR	1212	Symbol	iid_mode		2						
ANR	1213	Symbol	b		2						
ANR	1214	Symbol	AV_LOG_ERROR		2						
ANR	1215	Symbol	e		2						
ANR	1216	Symbol	ps -> iid_quant		2						
ANR	1217	Symbol	* ps -> frame_class		2						
ANR	1218	Symbol	* * ps -> icc_par		2						
ANR	1219	Symbol	ps -> enable_iid		2						
ANR	1220	Symbol	* * ps -> frame_class		2						
ANR	1221	Symbol	* get_bits		2						
ANR	1222	Symbol	* num_env_tab		2						
ANR	1223	Symbol	cnt		2						
ANR	1224	Symbol	gbc		2						
ANR	1225	Symbol	FFABS		2						
ANR	1226	Symbol	ps -> icc_par		2						
ANR	1227	Symbol	* ps -> opd_par		2						
ANR	1228	Symbol	* b		2						
ANR	1229	Symbol	* * ps		2						
ANR	1230	Symbol	ps -> icc_mode		2						
ANR	1231	Symbol	* huff_iid		2						
ANR	1232	Symbol	* e		2						
ANR	1233	Symbol	* nr_iidicc_par_tab		2						
ANR	1234	Symbol	* * ps -> iid_par		2						
ANR	1235	Symbol	* * ps -> num_env		2						
