command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6964413	File	/home/p4ultr4n/workplace/ReVeal/raw_code/qemu_chr_parse_common_0.c								
ANR	6964414	Function	qemu_chr_parse_common	1:0:0:352							
ANR	6964415	FunctionDef	"qemu_chr_parse_common (QemuOpts * opts , ChardevCommon * backend)"		6964414	0					
ANR	6964416	CompoundStatement		3:0:75:352	6964414	0					
ANR	6964417	IdentifierDeclStatement	"const char * logfile = qemu_opt_get ( opts , ""logfile"" ) ;"	5:4:82:133	6964414	0	True				
ANR	6964418	IdentifierDecl	"* logfile = qemu_opt_get ( opts , ""logfile"" )"		6964414	0					
ANR	6964419	IdentifierDeclType	const char *		6964414	0					
ANR	6964420	Identifier	logfile		6964414	1					
ANR	6964421	AssignmentExpression	"* logfile = qemu_opt_get ( opts , ""logfile"" )"		6964414	2		=			
ANR	6964422	Identifier	logfile		6964414	0					
ANR	6964423	CallExpression	"qemu_opt_get ( opts , ""logfile"" )"		6964414	1					
ANR	6964424	Callee	qemu_opt_get		6964414	0					
ANR	6964425	Identifier	qemu_opt_get		6964414	0					
ANR	6964426	ArgumentList	opts		6964414	1					
ANR	6964427	Argument	opts		6964414	0					
ANR	6964428	Identifier	opts		6964414	0					
ANR	6964429	Argument	"""logfile"""		6964414	1					
ANR	6964430	PrimaryExpression	"""logfile"""		6964414	0					
ANR	6964431	ExpressionStatement	backend -> has_logfile = logfile != NULL	9:4:142:180	6964414	1	True				
ANR	6964432	AssignmentExpression	backend -> has_logfile = logfile != NULL		6964414	0		=			
ANR	6964433	PtrMemberAccess	backend -> has_logfile		6964414	0					
ANR	6964434	Identifier	backend		6964414	0					
ANR	6964435	Identifier	has_logfile		6964414	1					
ANR	6964436	EqualityExpression	logfile != NULL		6964414	1		!=			
ANR	6964437	Identifier	logfile		6964414	0					
ANR	6964438	Identifier	NULL		6964414	1					
ANR	6964439	ExpressionStatement	backend -> logfile = logfile ? g_strdup ( logfile ) : NULL	11:4:187:240	6964414	2	True				
ANR	6964440	AssignmentExpression	backend -> logfile = logfile ? g_strdup ( logfile ) : NULL		6964414	0		=			
ANR	6964441	PtrMemberAccess	backend -> logfile		6964414	0					
ANR	6964442	Identifier	backend		6964414	0					
ANR	6964443	Identifier	logfile		6964414	1					
ANR	6964444	ConditionalExpression	logfile ? g_strdup ( logfile ) : NULL		6964414	1					
ANR	6964445	Condition	logfile		6964414	0					
ANR	6964446	Identifier	logfile		6964414	0					
ANR	6964447	CallExpression	g_strdup ( logfile )		6964414	1					
ANR	6964448	Callee	g_strdup		6964414	0					
ANR	6964449	Identifier	g_strdup		6964414	0					
ANR	6964450	ArgumentList	logfile		6964414	1					
ANR	6964451	Argument	logfile		6964414	0					
ANR	6964452	Identifier	logfile		6964414	0					
ANR	6964453	Identifier	NULL		6964414	2					
ANR	6964454	ExpressionStatement	backend -> has_logappend = true	15:4:249:278	6964414	3	True				
ANR	6964455	AssignmentExpression	backend -> has_logappend = true		6964414	0		=			
ANR	6964456	PtrMemberAccess	backend -> has_logappend		6964414	0					
ANR	6964457	Identifier	backend		6964414	0					
ANR	6964458	Identifier	has_logappend		6964414	1					
ANR	6964459	Identifier	true		6964414	1					
ANR	6964460	ExpressionStatement	"backend -> logappend = qemu_opt_get_bool ( opts , ""logappend"" , false )"	17:4:285:349	6964414	4	True				
ANR	6964461	AssignmentExpression	"backend -> logappend = qemu_opt_get_bool ( opts , ""logappend"" , false )"		6964414	0		=			
ANR	6964462	PtrMemberAccess	backend -> logappend		6964414	0					
ANR	6964463	Identifier	backend		6964414	0					
ANR	6964464	Identifier	logappend		6964414	1					
ANR	6964465	CallExpression	"qemu_opt_get_bool ( opts , ""logappend"" , false )"		6964414	1					
ANR	6964466	Callee	qemu_opt_get_bool		6964414	0					
ANR	6964467	Identifier	qemu_opt_get_bool		6964414	0					
ANR	6964468	ArgumentList	opts		6964414	1					
ANR	6964469	Argument	opts		6964414	0					
ANR	6964470	Identifier	opts		6964414	0					
ANR	6964471	Argument	"""logappend"""		6964414	1					
ANR	6964472	PrimaryExpression	"""logappend"""		6964414	0					
ANR	6964473	Argument	false		6964414	2					
ANR	6964474	Identifier	false		6964414	0					
ANR	6964475	ReturnType	static void		6964414	1					
ANR	6964476	Identifier	qemu_chr_parse_common		6964414	2					
ANR	6964477	ParameterList	"QemuOpts * opts , ChardevCommon * backend"		6964414	3					
ANR	6964478	Parameter	QemuOpts * opts	1:34:34:47	6964414	0	True				
ANR	6964479	ParameterType	QemuOpts *		6964414	0					
ANR	6964480	Identifier	opts		6964414	1					
ANR	6964481	Parameter	ChardevCommon * backend	1:50:50:71	6964414	1	True				
ANR	6964482	ParameterType	ChardevCommon *		6964414	0					
ANR	6964483	Identifier	backend		6964414	1					
ANR	6964484	CFGEntryNode	ENTRY		6964414		True				
ANR	6964485	CFGExitNode	EXIT		6964414		True				
ANR	6964486	Symbol	NULL		6964414						
ANR	6964487	Symbol	backend -> logappend		6964414						
ANR	6964488	Symbol	logfile		6964414						
ANR	6964489	Symbol	qemu_opt_get		6964414						
ANR	6964490	Symbol	false		6964414						
ANR	6964491	Symbol	* backend		6964414						
ANR	6964492	Symbol	opts		6964414						
ANR	6964493	Symbol	backend -> has_logappend		6964414						
ANR	6964494	Symbol	g_strdup		6964414						
ANR	6964495	Symbol	true		6964414						
ANR	6964496	Symbol	qemu_opt_get_bool		6964414						
ANR	6964497	Symbol	backend		6964414						
ANR	6964498	Symbol	backend -> has_logfile		6964414						
ANR	6964499	Symbol	backend -> logfile		6964414						
