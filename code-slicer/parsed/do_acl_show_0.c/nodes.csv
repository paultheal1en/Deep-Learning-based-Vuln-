command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2545691	File	/home/p4ultr4n/workplace/ReVeal/raw_code/do_acl_show_0.c								
ANR	2545692	Function	do_acl_show	1:0:0:551							
ANR	2545693	FunctionDef	"do_acl_show (Monitor * mon , const QDict * qdict)"		2545692	0					
ANR	2545694	CompoundStatement		3:0:59:551	2545692	0					
ANR	2545695	IdentifierDeclStatement	"const char * aclname = qdict_get_str ( qdict , ""aclname"" ) ;"	5:4:66:119	2545692	0	True				
ANR	2545696	IdentifierDecl	"* aclname = qdict_get_str ( qdict , ""aclname"" )"		2545692	0					
ANR	2545697	IdentifierDeclType	const char *		2545692	0					
ANR	2545698	Identifier	aclname		2545692	1					
ANR	2545699	AssignmentExpression	"* aclname = qdict_get_str ( qdict , ""aclname"" )"		2545692	2		=			
ANR	2545700	Identifier	aclname		2545692	0					
ANR	2545701	CallExpression	"qdict_get_str ( qdict , ""aclname"" )"		2545692	1					
ANR	2545702	Callee	qdict_get_str		2545692	0					
ANR	2545703	Identifier	qdict_get_str		2545692	0					
ANR	2545704	ArgumentList	qdict		2545692	1					
ANR	2545705	Argument	qdict		2545692	0					
ANR	2545706	Identifier	qdict		2545692	0					
ANR	2545707	Argument	"""aclname"""		2545692	1					
ANR	2545708	PrimaryExpression	"""aclname"""		2545692	0					
ANR	2545709	IdentifierDeclStatement	"qemu_acl * acl = find_acl ( mon , aclname ) ;"	7:4:126:164	2545692	1	True				
ANR	2545710	IdentifierDecl	"* acl = find_acl ( mon , aclname )"		2545692	0					
ANR	2545711	IdentifierDeclType	qemu_acl *		2545692	0					
ANR	2545712	Identifier	acl		2545692	1					
ANR	2545713	AssignmentExpression	"* acl = find_acl ( mon , aclname )"		2545692	2		=			
ANR	2545714	Identifier	acl		2545692	0					
ANR	2545715	CallExpression	"find_acl ( mon , aclname )"		2545692	1					
ANR	2545716	Callee	find_acl		2545692	0					
ANR	2545717	Identifier	find_acl		2545692	0					
ANR	2545718	ArgumentList	mon		2545692	1					
ANR	2545719	Argument	mon		2545692	0					
ANR	2545720	Identifier	mon		2545692	0					
ANR	2545721	Argument	aclname		2545692	1					
ANR	2545722	Identifier	aclname		2545692	0					
ANR	2545723	IdentifierDeclStatement	qemu_acl_entry * entry ;	9:4:171:192	2545692	2	True				
ANR	2545724	IdentifierDecl	* entry		2545692	0					
ANR	2545725	IdentifierDeclType	qemu_acl_entry *		2545692	0					
ANR	2545726	Identifier	entry		2545692	1					
ANR	2545727	IdentifierDeclStatement	int i = 0 ;	11:4:199:208	2545692	3	True				
ANR	2545728	IdentifierDecl	i = 0		2545692	0					
ANR	2545729	IdentifierDeclType	int		2545692	0					
ANR	2545730	Identifier	i		2545692	1					
ANR	2545731	AssignmentExpression	i = 0		2545692	2		=			
ANR	2545732	Identifier	i		2545692	0					
ANR	2545733	PrimaryExpression	0		2545692	1					
ANR	2545734	IfStatement	if ( acl )		2545692	4					
ANR	2545735	Condition	acl	15:8:221:223	2545692	0	True				
ANR	2545736	Identifier	acl		2545692	0					
ANR	2545737	CompoundStatement		13:13:166:166	2545692	1					
ANR	2545738	ExpressionStatement	"monitor_printf ( mon , ""policy: %s\\n"" , acl -> defaultDeny ? ""deny"" : ""allow"" )"	17:8:237:333	2545692	0	True				
ANR	2545739	CallExpression	"monitor_printf ( mon , ""policy: %s\\n"" , acl -> defaultDeny ? ""deny"" : ""allow"" )"		2545692	0					
ANR	2545740	Callee	monitor_printf		2545692	0					
ANR	2545741	Identifier	monitor_printf		2545692	0					
ANR	2545742	ArgumentList	mon		2545692	1					
ANR	2545743	Argument	mon		2545692	0					
ANR	2545744	Identifier	mon		2545692	0					
ANR	2545745	Argument	"""policy: %s\\n"""		2545692	1					
ANR	2545746	PrimaryExpression	"""policy: %s\\n"""		2545692	0					
ANR	2545747	Argument	"acl -> defaultDeny ? ""deny"" : ""allow"""		2545692	2					
ANR	2545748	ConditionalExpression	"acl -> defaultDeny ? ""deny"" : ""allow"""		2545692	0					
ANR	2545749	Condition	acl -> defaultDeny		2545692	0					
ANR	2545750	PtrMemberAccess	acl -> defaultDeny		2545692	0					
ANR	2545751	Identifier	acl		2545692	0					
ANR	2545752	Identifier	defaultDeny		2545692	1					
ANR	2545753	PrimaryExpression	"""deny"""		2545692	1					
ANR	2545754	PrimaryExpression	"""allow"""		2545692	2					
ANR	2545755	Statement	TAILQ_FOREACH	21:8:344:356	2545692	1	True				
ANR	2545756	Statement	(	21:21:357:357	2545692	2	True				
ANR	2545757	Statement	entry	21:22:358:362	2545692	3	True				
ANR	2545758	Statement	","	21:27:363:363	2545692	4	True				
ANR	2545759	Statement	&	21:29:365:365	2545692	5	True				
ANR	2545760	Statement	acl	21:30:366:368	2545692	6	True				
ANR	2545761	Statement	->	21:33:369:370	2545692	7	True				
ANR	2545762	Statement	entries	21:35:371:377	2545692	8	True				
ANR	2545763	Statement	","	21:42:378:378	2545692	9	True				
ANR	2545764	Statement	next	21:44:380:383	2545692	10	True				
ANR	2545765	Statement	)	21:48:384:384	2545692	11	True				
ANR	2545766	CompoundStatement		19:50:326:326	2545692	12					
ANR	2545767	ExpressionStatement	i ++	23:12:401:404	2545692	0	True				
ANR	2545768	PostIncDecOperationExpression	i ++		2545692	0					
ANR	2545769	Identifier	i		2545692	0					
ANR	2545770	IncDec	++		2545692	1					
ANR	2545771	ExpressionStatement	"monitor_printf ( mon , ""%d: %s %s\\n"" , i , entry -> deny ? ""deny"" : ""allow"" , entry -> match )"	25:12:419:530	2545692	1	True				
ANR	2545772	CallExpression	"monitor_printf ( mon , ""%d: %s %s\\n"" , i , entry -> deny ? ""deny"" : ""allow"" , entry -> match )"		2545692	0					
ANR	2545773	Callee	monitor_printf		2545692	0					
ANR	2545774	Identifier	monitor_printf		2545692	0					
ANR	2545775	ArgumentList	mon		2545692	1					
ANR	2545776	Argument	mon		2545692	0					
ANR	2545777	Identifier	mon		2545692	0					
ANR	2545778	Argument	"""%d: %s %s\\n"""		2545692	1					
ANR	2545779	PrimaryExpression	"""%d: %s %s\\n"""		2545692	0					
ANR	2545780	Argument	i		2545692	2					
ANR	2545781	Identifier	i		2545692	0					
ANR	2545782	Argument	"entry -> deny ? ""deny"" : ""allow"""		2545692	3					
ANR	2545783	ConditionalExpression	"entry -> deny ? ""deny"" : ""allow"""		2545692	0					
ANR	2545784	Condition	entry -> deny		2545692	0					
ANR	2545785	PtrMemberAccess	entry -> deny		2545692	0					
ANR	2545786	Identifier	entry		2545692	0					
ANR	2545787	Identifier	deny		2545692	1					
ANR	2545788	PrimaryExpression	"""deny"""		2545692	1					
ANR	2545789	PrimaryExpression	"""allow"""		2545692	2					
ANR	2545790	Argument	entry -> match		2545692	4					
ANR	2545791	PtrMemberAccess	entry -> match		2545692	0					
ANR	2545792	Identifier	entry		2545692	0					
ANR	2545793	Identifier	match		2545692	1					
ANR	2545794	ReturnType	static void		2545692	1					
ANR	2545795	Identifier	do_acl_show		2545692	2					
ANR	2545796	ParameterList	"Monitor * mon , const QDict * qdict"		2545692	3					
ANR	2545797	Parameter	Monitor * mon	1:24:24:35	2545692	0	True				
ANR	2545798	ParameterType	Monitor *		2545692	0					
ANR	2545799	Identifier	mon		2545692	1					
ANR	2545800	Parameter	const QDict * qdict	1:38:38:55	2545692	1	True				
ANR	2545801	ParameterType	const QDict *		2545692	0					
ANR	2545802	Identifier	qdict		2545692	1					
ANR	2545803	CFGEntryNode	ENTRY		2545692		True				
ANR	2545804	CFGExitNode	EXIT		2545692		True				
ANR	2545805	Symbol	qdict		2545692						
ANR	2545806	Symbol	aclname		2545692						
ANR	2545807	Symbol	i		2545692						
ANR	2545808	Symbol	acl		2545692						
ANR	2545809	Symbol	* acl		2545692						
ANR	2545810	Symbol	entry -> match		2545692						
ANR	2545811	Symbol	mon		2545692						
ANR	2545812	Symbol	find_acl		2545692						
ANR	2545813	Symbol	entry		2545692						
ANR	2545814	Symbol	qdict_get_str		2545692						
ANR	2545815	Symbol	acl -> defaultDeny		2545692						
ANR	2545816	Symbol	entry -> deny		2545692						
ANR	2545817	Symbol	* entry		2545692						
